//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class File
	{
	}
	
	/// <summary>
	/// Links relevant to the payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Links
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string First { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Last { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Next { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Prev { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Meta Data relevant to the payload
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Meta
	{
		
		/// <summary>
		/// All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FirstAvailableDateTime { get; set; }
		
		/// <summary>
		/// All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastAvailableDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalPages { get; set; }
	}
	
	/// <summary>
	/// Amount of money associated with the charge type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBActiveOrHistoricCurrencyAndAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	/// <summary>
	/// Identifies the nature of the postal address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBAddressTypeCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Business")]
		Business = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Correspondence")]
		Correspondence = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeliveryTo")]
		DeliveryTo = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MailTo")]
		MailTo = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POBox")]
		POBox = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Postal")]
		Postal = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Residential")]
		Residential = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Statement")]
		Statement = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBCashAccountCreditor3
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name of the account, as assigned by the account servicing institution.  Usage The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// Secondary identification of the account, as assigned by the account servicing institution. This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	/// <summary>
	/// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBCashAccountDebtor4
	{
		
		/// <summary>
		/// ^ Identification assigned by an institution to identify an account. This identification is known by the account owner. | Max256Text
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Identification { get; set; }
		
		/// <summary>
		/// ^ Name of the account, as assigned by the account servicing institution.  Usage The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// ^ Name of the identification scheme, in a coded form as published in an external list. | Namespaced Enumeration OBExternalAccountIdentification4Code
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// ^ This is secondary identification of the account, as assigned by the account servicing institution.  This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination) | Max34Text
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SecondaryIdentification { get; set; }
	}
	
	/// <summary>
	/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBChargeBearerType1Code
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BorneByCreditor")]
		BorneByCreditor = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BorneByDebtor")]
		BorneByDebtor = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FollowingServiceLevel")]
		FollowingServiceLevel = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Shared")]
		Shared = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBError1
	{
		
		/// <summary>
		/// Low level textual error code, e.g., UK.OBIE.Field.Missing
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// A description of the error that occurred. e.g., 'A mandatory field isn't supplied' or 'RequestedExecutionDateTime must be in future'
		///OBIE doesn't standardise this field
		/// Required
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Message { get; set; }
		
		/// <summary>
		/// Recommended but optional reference to the JSON Path of the field with error, e.g., Data.Initiation.InstructedAmount.Currency
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Path { get; set; }
		
		/// <summary>
		/// URL to help remediate the problem, or provide more information, or to API Reference, or help etc
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// An array of detail error codes, and messages, and URLs to documentation to help remediation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBErrorResponse1
	{
		
		/// <summary>
		/// High level textual error code, to help categorize the errors.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public OBError1[] Errors { get; set; }
		
		/// <summary>
		/// A unique reference for the error instance, for audit purposes, in case of unknown/unclassified errors.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string Id { get; set; }
		
		/// <summary>
		/// Brief Error message, e.g., 'There is something wrong with the request parameters provided'
		/// Required
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Information that locates and identifies a specific address, as defined by postal services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBPostalAddress6
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public string[] AddressLine { get; set; }
		
		/// <summary>
		/// Identifies the nature of the postal address.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBAddressTypeCode AddressType { get; set; }
		
		/// <summary>
		/// Number that identifies the position of a building on a street.
		/// Min length: 1
		/// Max length: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string BuildingNumber { get; set; }
		
		/// <summary>
		/// Nation with its own government.
		/// Pattern: ^[A-Z]{2,2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2,2}$")]
		public string Country { get; set; }
		
		/// <summary>
		/// Identifies a subdivision of a country such as state, region, county.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string CountrySubDivision { get; set; }
		
		/// <summary>
		/// Identification of a division of a large organisation or building.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string Department { get; set; }
		
		/// <summary>
		/// Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.
		/// Min length: 1
		/// Max length: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string PostCode { get; set; }
		
		/// <summary>
		/// Name of a street or thoroughfare.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string StreetName { get; set; }
		
		/// <summary>
		/// Identification of a sub-division of a large organisation or building.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string SubDepartment { get; set; }
		
		/// <summary>
		/// Name of a built-up area, with defined boundaries, and a local government.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string TownName { get; set; }
	}
	
	/// <summary>
	/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBRisk1
	{
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services or in free format text.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1DeliveryAddress DeliveryAddress { get; set; }
		
		/// <summary>
		/// Category code conform to ISO 18245, related to the type of services or goods the merchant provides for the transaction.
		/// Min length: 3
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string MerchantCategoryCode { get; set; }
		
		/// <summary>
		/// The unique customer identifier of the PSU with the merchant.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string MerchantCustomerIdentification { get; set; }
		
		/// <summary>
		/// Specifies the payment context
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBRisk1PaymentContextCode> PaymentContextCode { get; set; }
	}
	
	public class OBRisk1DeliveryAddress
	{
		
		/// <summary>
		/// Minimum items: 0
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string[] AddressLine { get; set; }
		
		/// <summary>
		/// Number that identifies the position of a building on a street.
		/// Min length: 1
		/// Max length: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string BuildingNumber { get; set; }
		
		/// <summary>
		/// Nation with its own government, occupying a particular territory.
		/// Required
		/// Pattern: ^[A-Z]{2,2}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2,2}$")]
		public string Country { get; set; }
		
		/// <summary>
		/// Identifies a subdivision of a country such as state, region, county.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string CountrySubDivision { get; set; }
		
		/// <summary>
		/// Identifier consisting of a group of letters and/or numbers that is added to a postal address to assist the sorting of mail.
		/// Min length: 1
		/// Max length: 16
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(16)]
		public string PostCode { get; set; }
		
		/// <summary>
		/// Name of a street or thoroughfare.
		/// Min length: 1
		/// Max length: 70
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(70)]
		public string StreetName { get; set; }
		
		/// <summary>
		/// Name of a built-up area, with defined boundaries, and a local government.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string TownName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBRisk1PaymentContextCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BillPayment")]
		BillPayment = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EcommerceGoods")]
		EcommerceGoods = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EcommerceServices")]
		EcommerceServices = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PartyToParty")]
		PartyToParty = 4,
	}
	
	/// <summary>
	/// Supporting Data provided by TPP, when requesting SCA Exemption.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBSCASupportData1
	{
		
		/// <summary>
		/// Specifies a character string with a maximum length of 40 characters.
		///Usage: This field indicates whether the PSU was subject to SCA performed by the TPP
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public System.Nullable<OBSCASupportData1AppliedAuthenticationApproach> AppliedAuthenticationApproach { get; set; }
		
		/// <summary>
		/// If the payment is recurring, then this field is populated with the transaction identifier of the previous payment occurrence so that the ASPSP can verify that the PISP, amount and the payee are the same as the previous occurrence. The value here refers to the payment id e.g. DomesticPaymentId  
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string ReferencePaymentOrderId { get; set; }
		
		/// <summary>
		/// This field allows a PISP to request specific SCA Exemption for a Payment Initiation
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBSCASupportData1RequestedSCAExemptionType> RequestedSCAExemptionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBSCASupportData1AppliedAuthenticationApproach
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CA")]
		CA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCA")]
		SCA = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBSCASupportData1RequestedSCAExemptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BillPayment")]
		BillPayment = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ContactlessTravel")]
		ContactlessTravel = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EcommerceGoods")]
		EcommerceGoods = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EcommerceServices")]
		EcommerceServices = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Kiosk")]
		Kiosk = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Parking")]
		Parking = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PartyToParty")]
		PartyToParty = 6,
	}
	
	/// <summary>
	/// Additional information that can not be captured in the structured fields and/or any other specific block.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBSupplementaryData1
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteDomestic2
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomestic2Data Data { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteDomestic2Data
	{
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single domestic payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomestic2DataInitiation Initiation { get; set; }
	}
	
	public class OBWriteDomestic2DataInitiation
	{
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomestic2DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 CreditorPostalAddress { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomestic2DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
		///Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
		///OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndToEndIdentification { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomestic2DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
		///Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string InstructionIdentification { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomestic2DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteDomestic2DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomestic2DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomestic2DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomestic2DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteDomesticConsent4
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4Data Data { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteDomesticConsent4Data
	{
		
		/// <summary>
		/// The authorisation type request from the TPP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataAuthorisation Authorisation { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single domestic payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// Specifies to share the refund account details with PISP
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBWriteDomesticConsent4DataReadRefundAccount> ReadRefundAccount { get; set; }
		
		/// <summary>
		/// Supporting Data provided by TPP, when requesting SCA Exemption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSCASupportData1 SCASupportData { get; set; }
	}
	
	public class OBWriteDomesticConsent4DataAuthorisation
	{
		
		/// <summary>
		/// Type of authorisation flow requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataAuthorisationAuthorisationType AuthorisationType { get; set; }
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBWriteDomesticConsent4DataAuthorisationAuthorisationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Any")]
		Any = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Single")]
		Single = 1,
	}
	
	public class OBWriteDomesticConsent4DataInitiation
	{
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 CreditorPostalAddress { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
		///Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
		///OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndToEndIdentification { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
		///Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string InstructionIdentification { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteDomesticConsent4DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticConsent4DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticConsent4DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomesticConsent4DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBWriteDomesticConsent4DataReadRefundAccount
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="No")]
		No = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Yes")]
		Yes = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteDomesticConsentResponse5
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsentResponse5Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteDomesticConsentResponse5Data
	{
		
		/// <summary>
		/// The authorisation type request from the TPP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsentResponse5DataAuthorisation Authorisation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsentResponse5DataCharges[] OBWriteDomesticConsentResponse5DataCharges { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CutOffDateTime { get; set; }
		
		/// <summary>
		/// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccountDebtor4 Debtor { get; set; }
		
		/// <summary>
		/// Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedSettlementDateTime { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single domestic payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsentResponse5DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// Specifies to share the refund account details with PISP
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataReadRefundAccount ReadRefundAccount { get; set; }
		
		/// <summary>
		/// Supporting Data provided by TPP, when requesting SCA Exemption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSCASupportData1 SCASupportData { get; set; }
		
		/// <summary>
		/// Specifies the status of consent resource in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsentResponse5DataStatus Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	public class OBWriteDomesticConsentResponse5DataAuthorisation
	{
		
		/// <summary>
		/// Type of authorisation flow requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataAuthorisationAuthorisationType AuthorisationType { get; set; }
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionDateTime { get; set; }
	}
	
	public class OBWriteDomesticConsentResponse5DataCharges
	{
		
		/// <summary>
		/// Amount of money associated with the charge type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Charge type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBWriteDomesticConsentResponse5DataInitiation
	{
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsentResponse5DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 CreditorPostalAddress { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsentResponse5DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
		///Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
		///OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndToEndIdentification { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsentResponse5DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
		///Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string InstructionIdentification { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsentResponse5DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteDomesticConsentResponse5DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticConsentResponse5DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticConsentResponse5DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomesticConsentResponse5DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBWriteDomesticConsentResponse5DataStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Authorised")]
		Authorised = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AwaitingAuthorisation")]
		AwaitingAuthorisation = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Consumed")]
		Consumed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Rejected")]
		Rejected = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteDomesticResponse5
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBWriteDomesticResponse5Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataCharges[] OBWriteDomesticResponse5DataCharges { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the message was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccountDebtor4 Debtor { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the domestic payment resource.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string DomesticPaymentId { get; set; }
		
		/// <summary>
		/// Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedSettlementDateTime { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single domestic payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// The multiple authorisation flow response from the ASPSP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataMultiAuthorisation MultiAuthorisation { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the refund account to which a refund will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataRefund Refund { get; set; }
		
		/// <summary>
		/// Specifies the status of the payment information group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataStatus Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	public class OBWriteDomesticResponse5DataCharges
	{
		
		/// <summary>
		/// Amount of money associated with the charge type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Charge type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBWriteDomesticResponse5DataInitiation
	{
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 CreditorPostalAddress { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
		///Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
		///OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndToEndIdentification { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
		///Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string InstructionIdentification { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteDomesticResponse5DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticResponse5DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticResponse5DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomesticResponse5DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	public class OBWriteDomesticResponse5DataMultiAuthorisation
	{
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
		
		/// <summary>
		/// Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateDateTime { get; set; }
		
		/// <summary>
		/// Number of authorisations received.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberReceived { get; set; }
		
		/// <summary>
		/// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberRequired { get; set; }
		
		/// <summary>
		/// Specifies the status of the authorisation flow in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataMultiAuthorisationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBWriteDomesticResponse5DataMultiAuthorisationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Authorised")]
		Authorised = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AwaitingFurtherAuthorisation")]
		AwaitingFurtherAuthorisation = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Rejected")]
		Rejected = 2,
	}
	
	public class OBWriteDomesticResponse5DataRefund
	{
		
		/// <summary>
		/// Provides the details to identify an account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataRefundAccount Account { get; set; }
	}
	
	public class OBWriteDomesticResponse5DataRefundAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name of the account, as assigned by the account servicing institution.
		///Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBWriteDomesticResponse5DataStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AcceptedCreditSettlementCompleted")]
		AcceptedCreditSettlementCompleted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AcceptedSettlementCompleted")]
		AcceptedSettlementCompleted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AcceptedSettlementInProcess")]
		AcceptedSettlementInProcess = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AcceptedWithoutPosting")]
		AcceptedWithoutPosting = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending")]
		Pending = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Rejected")]
		Rejected = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteDomesticScheduled2
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduled2Data Data { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteDomesticScheduled2Data
	{
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled domestic payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduled2DataInitiation Initiation { get; set; }
	}
	
	public class OBWriteDomesticScheduled2DataInitiation
	{
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduled2DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 CreditorPostalAddress { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduled2DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
		///Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
		///OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndToEndIdentification { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduled2DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
		///Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string InstructionIdentification { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduled2DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Date at which the initiating party requests the clearing agent to process the payment. 
		///Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RequestedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteDomesticScheduled2DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticScheduled2DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticScheduled2DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomesticScheduled2DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteDomesticScheduledConsent4
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsent4Data Data { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteDomesticScheduledConsent4Data
	{
		
		/// <summary>
		/// The authorisation type request from the TPP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsent4DataAuthorisation Authorisation { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled domestic payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsent4DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// Specifies the Open Banking service request types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsent4DataPermission Permission { get; set; }
		
		/// <summary>
		/// Specifies to share the refund account details with PISP
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataReadRefundAccount ReadRefundAccount { get; set; }
		
		/// <summary>
		/// Supporting Data provided by TPP, when requesting SCA Exemption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSCASupportData1 SCASupportData { get; set; }
	}
	
	public class OBWriteDomesticScheduledConsent4DataAuthorisation
	{
		
		/// <summary>
		/// Type of authorisation flow requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataAuthorisationAuthorisationType AuthorisationType { get; set; }
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionDateTime { get; set; }
	}
	
	public class OBWriteDomesticScheduledConsent4DataInitiation
	{
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsent4DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 CreditorPostalAddress { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsent4DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
		///Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
		///OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndToEndIdentification { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsent4DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
		///Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string InstructionIdentification { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsent4DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Date at which the initiating party requests the clearing agent to process the payment. 
		///Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RequestedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteDomesticScheduledConsent4DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticScheduledConsent4DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticScheduledConsent4DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomesticScheduledConsent4DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBWriteDomesticScheduledConsent4DataPermission
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Create")]
		Create = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteDomesticScheduledConsentResponse5
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsentResponse5Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteDomesticScheduledConsentResponse5Data
	{
		
		/// <summary>
		/// The authorisation type request from the TPP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsentResponse5DataAuthorisation Authorisation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsentResponse5DataCharges[] OBWriteDomesticScheduledConsentResponse5DataCharges { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CutOffDateTime { get; set; }
		
		/// <summary>
		/// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccountDebtor4 Debtor { get; set; }
		
		/// <summary>
		/// Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedSettlementDateTime { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled domestic payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsentResponse5DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// Specifies the Open Banking service request types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsent4DataPermission Permission { get; set; }
		
		/// <summary>
		/// Specifies to share the refund account details with PISP
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataReadRefundAccount ReadRefundAccount { get; set; }
		
		/// <summary>
		/// Supporting Data provided by TPP, when requesting SCA Exemption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSCASupportData1 SCASupportData { get; set; }
		
		/// <summary>
		/// Specifies the status of consent resource in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsentResponse5DataStatus Status { get; set; }
		
		/// <summary>
		/// Date and time at which the consent resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	public class OBWriteDomesticScheduledConsentResponse5DataAuthorisation
	{
		
		/// <summary>
		/// Type of authorisation flow requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataAuthorisationAuthorisationType AuthorisationType { get; set; }
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionDateTime { get; set; }
	}
	
	public class OBWriteDomesticScheduledConsentResponse5DataCharges
	{
		
		/// <summary>
		/// Amount of money associated with the charge type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Charge type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBWriteDomesticScheduledConsentResponse5DataInitiation
	{
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsentResponse5DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 CreditorPostalAddress { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsentResponse5DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
		///Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
		///OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndToEndIdentification { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsentResponse5DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
		///Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string InstructionIdentification { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsentResponse5DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Date at which the initiating party requests the clearing agent to process the payment. 
		///Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RequestedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteDomesticScheduledConsentResponse5DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticScheduledConsentResponse5DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticScheduledConsentResponse5DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomesticScheduledConsentResponse5DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteDomesticScheduledResponse5
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledResponse5Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBWriteDomesticScheduledResponse5Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledResponse5DataCharges[] OBWriteDomesticScheduledResponse5DataCharges { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the message was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccountDebtor4 Debtor { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the domestic schedule payment resource.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string DomesticScheduledPaymentId { get; set; }
		
		/// <summary>
		/// Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedSettlementDateTime { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled domestic payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledResponse5DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// The multiple authorisation flow response from the ASPSP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledResponse5DataMultiAuthorisation MultiAuthorisation { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the refund account to which a refund will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledResponse5DataRefund Refund { get; set; }
		
		/// <summary>
		/// Specifies the status of the payment order resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledResponse5DataStatus Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	public class OBWriteDomesticScheduledResponse5DataCharges
	{
		
		/// <summary>
		/// Amount of money associated with the charge type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Charge type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBWriteDomesticScheduledResponse5DataInitiation
	{
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledResponse5DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 CreditorPostalAddress { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledResponse5DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
		///Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
		///OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndToEndIdentification { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledResponse5DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
		///Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string InstructionIdentification { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledResponse5DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Date at which the initiating party requests the clearing agent to process the payment. 
		///Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RequestedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteDomesticScheduledResponse5DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticScheduledResponse5DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticScheduledResponse5DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomesticScheduledResponse5DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	public class OBWriteDomesticScheduledResponse5DataMultiAuthorisation
	{
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
		
		/// <summary>
		/// Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateDateTime { get; set; }
		
		/// <summary>
		/// Number of authorisations received.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberReceived { get; set; }
		
		/// <summary>
		/// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberRequired { get; set; }
		
		/// <summary>
		/// Specifies the status of the authorisation flow in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataMultiAuthorisationStatus Status { get; set; }
	}
	
	public class OBWriteDomesticScheduledResponse5DataRefund
	{
		
		/// <summary>
		/// Provides the details to identify an account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledResponse5DataRefundAccount Account { get; set; }
	}
	
	public class OBWriteDomesticScheduledResponse5DataRefundAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name of the account, as assigned by the account servicing institution.
		///Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBWriteDomesticScheduledResponse5DataStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cancelled")]
		Cancelled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InitiationCompleted")]
		InitiationCompleted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InitiationFailed")]
		InitiationFailed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InitiationPending")]
		InitiationPending = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteDomesticStandingOrder3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrder3Data Data { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteDomesticStandingOrder3Data
	{
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrder3DataInitiation Initiation { get; set; }
	}
	
	public class OBWriteDomesticStandingOrder3DataInitiation
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrder3DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Provides the details to identify the debtor account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrder3DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// The amount of the final Standing Order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrder3DataInitiationFinalPaymentAmount FinalPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FinalPaymentDateTime { get; set; }
		
		/// <summary>
		/// The amount of the first Standing Order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrder3DataInitiationFirstPaymentAmount FirstPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset FirstPaymentDateTime { get; set; }
		
		/// <summary>
		/// Individual Definitions:
		///EvryDay - Every day
		///EvryWorkgDay - Every working day
		///IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
		///WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
		///IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)
		///QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). 
		///ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. 
		///SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
		///RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. 
		///Individual Patterns:
		///EvryDay (ScheduleCode)
		///EvryWorkgDay (ScheduleCode)
		///IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
		///WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
		///IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
		///QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
		///The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
		///EvryDay
		///EvryWorkgDay
		///IntrvlWkDay:0[1-9]:0[1-7]
		///WkInMnthDay:0[1-5]:0[1-7]
		///IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
		///QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
		///Full Regular Expression:
		///^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// Required
		/// Pattern: ^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$")]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string NumberOfPayments { get; set; }
		
		/// <summary>
		/// The amount of the recurring Standing Order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrder3DataInitiationRecurringPaymentAmount RecurringPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the first recurring payment for a Standing Order schedule will be made. 
		///Usage: This must be populated only if the first recurring date is different to the first payment date.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RecurringPaymentDateTime { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteDomesticStandingOrder3DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticStandingOrder3DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticStandingOrder3DataInitiationFinalPaymentAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomesticStandingOrder3DataInitiationFirstPaymentAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomesticStandingOrder3DataInitiationRecurringPaymentAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteDomesticStandingOrderConsent5
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsent5Data Data { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsent5Data
	{
		
		/// <summary>
		/// The authorisation type request from the TPP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsent5DataAuthorisation Authorisation { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsent5DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// Specifies the Open Banking service request types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsent4DataPermission Permission { get; set; }
		
		/// <summary>
		/// Specifies to share the refund account details with PISP
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataReadRefundAccount ReadRefundAccount { get; set; }
		
		/// <summary>
		/// Supporting Data provided by TPP, when requesting SCA Exemption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSCASupportData1 SCASupportData { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsent5DataAuthorisation
	{
		
		/// <summary>
		/// Type of authorisation flow requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataAuthorisationAuthorisationType AuthorisationType { get; set; }
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionDateTime { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsent5DataInitiation
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsent5DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Provides the details to identify the debtor account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsent5DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// The amount of the final Standing Order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsent5DataInitiationFinalPaymentAmount FinalPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FinalPaymentDateTime { get; set; }
		
		/// <summary>
		/// The amount of the first Standing Order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsent5DataInitiationFirstPaymentAmount FirstPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset FirstPaymentDateTime { get; set; }
		
		/// <summary>
		/// Individual Definitions:
		///EvryDay - Every day
		///EvryWorkgDay - Every working day
		///IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
		///WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
		///IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)
		///QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). 
		///ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. 
		///SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
		///RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. 
		///Individual Patterns:
		///EvryDay (ScheduleCode)
		///EvryWorkgDay (ScheduleCode)
		///IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
		///WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
		///IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
		///QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
		///The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
		///EvryDay
		///EvryWorkgDay
		///IntrvlWkDay:0[1-9]:0[1-7]
		///WkInMnthDay:0[1-5]:0[1-7]
		///IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
		///QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
		///Full Regular Expression:
		///^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// Required
		/// Pattern: ^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$")]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string NumberOfPayments { get; set; }
		
		/// <summary>
		/// The amount of the recurring Standing Order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsent5DataInitiationRecurringPaymentAmount RecurringPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the first recurring payment for a Standing Order schedule will be made. 
		///Usage: This must be populated only if the first recurring date is different to the first payment date.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RecurringPaymentDateTime { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsent5DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsent5DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsent5DataInitiationFinalPaymentAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsent5DataInitiationFirstPaymentAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsent5DataInitiationRecurringPaymentAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteDomesticStandingOrderConsentResponse6
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsentResponse6Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsentResponse6Data
	{
		
		/// <summary>
		/// The authorisation type request from the TPP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsentResponse6DataAuthorisation Authorisation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsentResponse6DataCharges[] OBWriteDomesticStandingOrderConsentResponse6DataCharges { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CutOffDateTime { get; set; }
		
		/// <summary>
		/// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccountDebtor4 Debtor { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsentResponse6DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// Specifies the Open Banking service request types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsent4DataPermission Permission { get; set; }
		
		/// <summary>
		/// Specifies to share the refund account details with PISP
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataReadRefundAccount ReadRefundAccount { get; set; }
		
		/// <summary>
		/// Supporting Data provided by TPP, when requesting SCA Exemption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSCASupportData1 SCASupportData { get; set; }
		
		/// <summary>
		/// Specifies the status of consent resource in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsentResponse5DataStatus Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsentResponse6DataAuthorisation
	{
		
		/// <summary>
		/// Type of authorisation flow requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataAuthorisationAuthorisationType AuthorisationType { get; set; }
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionDateTime { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsentResponse6DataCharges
	{
		
		/// <summary>
		/// Amount of money associated with the charge type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Charge type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsentResponse6DataInitiation
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsentResponse6DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsentResponse6DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// The amount of the final Standing Order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsentResponse6DataInitiationFinalPaymentAmount FinalPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FinalPaymentDateTime { get; set; }
		
		/// <summary>
		/// The amount of the first Standing Order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsentResponse6DataInitiationFirstPaymentAmount FirstPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset FirstPaymentDateTime { get; set; }
		
		/// <summary>
		/// Individual Definitions:
		///EvryDay - Every day
		///EvryWorkgDay - Every working day
		///IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
		///WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
		///IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)
		///QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). 
		///ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. 
		///SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
		///RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. 
		///Individual Patterns:
		///EvryDay (ScheduleCode)
		///EvryWorkgDay (ScheduleCode)
		///IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
		///WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
		///IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
		///QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
		///The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
		///EvryDay
		///EvryWorkgDay
		///IntrvlWkDay:0[1-9]:0[1-7]
		///WkInMnthDay:0[1-5]:0[1-7]
		///IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
		///QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
		///Full Regular Expression:
		///^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// Required
		/// Pattern: ^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$")]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string NumberOfPayments { get; set; }
		
		/// <summary>
		/// The amount of the recurring Standing Order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderConsentResponse6DataInitiationRecurringPaymentAmount RecurringPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the first recurring payment for a Standing Order schedule will be made. 
		///Usage: This must be populated only if the first recurring date is different to the first payment date.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RecurringPaymentDateTime { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsentResponse6DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsentResponse6DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsentResponse6DataInitiationFinalPaymentAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsentResponse6DataInitiationFirstPaymentAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderConsentResponse6DataInitiationRecurringPaymentAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteDomesticStandingOrderResponse6
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderResponse6Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderResponse6Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderResponse6DataCharges[] OBWriteDomesticStandingOrderResponse6DataCharges { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccountDebtor4 Debtor { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the domestic standing order resource.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string DomesticStandingOrderId { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a domestic standing order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderResponse6DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// The multiple authorisation flow response from the ASPSP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderResponse6DataMultiAuthorisation MultiAuthorisation { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the refund account to which a refund will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderResponse6DataRefund Refund { get; set; }
		
		/// <summary>
		/// Specifies the status of the payment order resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledResponse5DataStatus Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderResponse6DataCharges
	{
		
		/// <summary>
		/// Amount of money associated with the charge type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Charge type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderResponse6DataInitiation
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderResponse6DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderResponse6DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// The amount of the final Standing Order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderResponse6DataInitiationFinalPaymentAmount FinalPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FinalPaymentDateTime { get; set; }
		
		/// <summary>
		/// The amount of the first Standing Order
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderResponse6DataInitiationFirstPaymentAmount FirstPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset FirstPaymentDateTime { get; set; }
		
		/// <summary>
		/// Individual Definitions:
		///EvryDay - Every day
		///EvryWorkgDay - Every working day
		///IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
		///WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
		///IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)
		///QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). 
		///ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. 
		///SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
		///RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. 
		///Individual Patterns:
		///EvryDay (ScheduleCode)
		///EvryWorkgDay (ScheduleCode)
		///IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
		///WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
		///IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
		///QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
		///The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
		///EvryDay
		///EvryWorkgDay
		///IntrvlWkDay:0[1-9]:0[1-7]
		///WkInMnthDay:0[1-5]:0[1-7]
		///IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
		///QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
		///Full Regular Expression:
		///^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// Required
		/// Pattern: ^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$")]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string NumberOfPayments { get; set; }
		
		/// <summary>
		/// The amount of the recurring Standing Order
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderResponse6DataInitiationRecurringPaymentAmount RecurringPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the first recurring payment for a Standing Order schedule will be made. 
		///Usage: This must be populated only if the first recurring date is different to the first payment date.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RecurringPaymentDateTime { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderResponse6DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderResponse6DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderResponse6DataInitiationFinalPaymentAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderResponse6DataInitiationFirstPaymentAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderResponse6DataInitiationRecurringPaymentAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderResponse6DataMultiAuthorisation
	{
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
		
		/// <summary>
		/// Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateDateTime { get; set; }
		
		/// <summary>
		/// Number of authorisations received.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberReceived { get; set; }
		
		/// <summary>
		/// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberRequired { get; set; }
		
		/// <summary>
		/// Specifies the status of the authorisation flow in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataMultiAuthorisationStatus Status { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderResponse6DataRefund
	{
		
		/// <summary>
		/// Provides the details to identify an account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticStandingOrderResponse6DataRefundAccount Account { get; set; }
	}
	
	public class OBWriteDomesticStandingOrderResponse6DataRefundAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name of the account, as assigned by the account servicing institution.
		///Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteFile2
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFile2Data Data { get; set; }
	}
	
	public class OBWriteFile2Data
	{
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFile2DataInitiation Initiation { get; set; }
	}
	
	public class OBWriteFile2DataInitiation
	{
		
		/// <summary>
		/// Total of all individual amounts included in the group, irrespective of currencies.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ControlSum { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFile2DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// A base64 encoding of a SHA256 hash of the file to be uploaded.
		/// Required
		/// Min length: 1
		/// Max length: 44
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(44)]
		public string FileHash { get; set; }
		
		/// <summary>
		/// Reference for the file.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string FileReference { get; set; }
		
		/// <summary>
		/// Specifies the payment file type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FileType { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Number of individual transactions contained in the payment information group.
		/// Pattern: [0-9]{1,15}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{1,15}")]
		public string NumberOfTransactions { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFile2DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Date at which the initiating party requests the clearing agent to process the payment. 
		///Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RequestedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteFile2DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteFile2DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteFileConsent3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileConsent3Data Data { get; set; }
	}
	
	public class OBWriteFileConsent3Data
	{
		
		/// <summary>
		/// The authorisation type request from the TPP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileConsent3DataAuthorisation Authorisation { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileConsent3DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// Supporting Data provided by TPP, when requesting SCA Exemption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSCASupportData1 SCASupportData { get; set; }
	}
	
	public class OBWriteFileConsent3DataAuthorisation
	{
		
		/// <summary>
		/// Type of authorisation flow requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataAuthorisationAuthorisationType AuthorisationType { get; set; }
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionDateTime { get; set; }
	}
	
	public class OBWriteFileConsent3DataInitiation
	{
		
		/// <summary>
		/// Total of all individual amounts included in the group, irrespective of currencies.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ControlSum { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileConsent3DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// A base64 encoding of a SHA256 hash of the file to be uploaded.
		/// Required
		/// Min length: 1
		/// Max length: 44
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(44)]
		public string FileHash { get; set; }
		
		/// <summary>
		/// Reference for the file.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string FileReference { get; set; }
		
		/// <summary>
		/// Specifies the payment file type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FileType { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Number of individual transactions contained in the payment information group.
		/// Pattern: [0-9]{1,15}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{1,15}")]
		public string NumberOfTransactions { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileConsent3DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Date at which the initiating party requests the clearing agent to process the payment. 
		///Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RequestedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteFileConsent3DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteFileConsent3DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteFileConsentResponse4
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileConsentResponse4Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBWriteFileConsentResponse4Data
	{
		
		/// <summary>
		/// The authorisation type request from the TPP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileConsentResponse4DataAuthorisation Authorisation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileConsentResponse4DataCharges[] OBWriteFileConsentResponse4DataCharges { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CutOffDateTime { get; set; }
		
		/// <summary>
		/// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccountDebtor4 Debtor { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileConsentResponse4DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// Supporting Data provided by TPP, when requesting SCA Exemption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSCASupportData1 SCASupportData { get; set; }
		
		/// <summary>
		/// Specifies the status of consent resource in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileConsentResponse4DataStatus Status { get; set; }
		
		/// <summary>
		/// Date and time at which the consent resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	public class OBWriteFileConsentResponse4DataAuthorisation
	{
		
		/// <summary>
		/// Type of authorisation flow requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataAuthorisationAuthorisationType AuthorisationType { get; set; }
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionDateTime { get; set; }
	}
	
	public class OBWriteFileConsentResponse4DataCharges
	{
		
		/// <summary>
		/// Amount of money associated with the charge type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Charge type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBWriteFileConsentResponse4DataInitiation
	{
		
		/// <summary>
		/// Total of all individual amounts included in the group, irrespective of currencies.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ControlSum { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileConsentResponse4DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// A base64 encoding of a SHA256 hash of the file to be uploaded.
		/// Required
		/// Min length: 1
		/// Max length: 44
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(44)]
		public string FileHash { get; set; }
		
		/// <summary>
		/// Reference for the file.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string FileReference { get; set; }
		
		/// <summary>
		/// Specifies the payment file type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FileType { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Number of individual transactions contained in the payment information group.
		/// Pattern: [0-9]{1,15}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{1,15}")]
		public string NumberOfTransactions { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileConsentResponse4DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Date at which the initiating party requests the clearing agent to process the payment. 
		///Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RequestedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteFileConsentResponse4DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteFileConsentResponse4DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBWriteFileConsentResponse4DataStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Authorised")]
		Authorised = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AwaitingAuthorisation")]
		AwaitingAuthorisation = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AwaitingUpload")]
		AwaitingUpload = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Consumed")]
		Consumed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Rejected")]
		Rejected = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteFileResponse3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileResponse3Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBWriteFileResponse3Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileResponse3DataCharges[] OBWriteFileResponse3DataCharges { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the message was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccountDebtor4 Debtor { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the file payment resource.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string FilePaymentId { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds using a payment file.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileResponse3DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// The multiple authorisation flow response from the ASPSP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileResponse3DataMultiAuthorisation MultiAuthorisation { get; set; }
		
		/// <summary>
		/// Specifies the status of the payment order resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileResponse3DataStatus Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	public class OBWriteFileResponse3DataCharges
	{
		
		/// <summary>
		/// Amount of money associated with the charge type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Charge type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBWriteFileResponse3DataInitiation
	{
		
		/// <summary>
		/// Total of all individual amounts included in the group, irrespective of currencies.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ControlSum { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileResponse3DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// A base64 encoding of a SHA256 hash of the file to be uploaded.
		/// Required
		/// Min length: 1
		/// Max length: 44
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(44)]
		public string FileHash { get; set; }
		
		/// <summary>
		/// Reference for the file.
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string FileReference { get; set; }
		
		/// <summary>
		/// Specifies the payment file type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FileType { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Number of individual transactions contained in the payment information group.
		/// Pattern: [0-9]{1,15}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]{1,15}")]
		public string NumberOfTransactions { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFileResponse3DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Date at which the initiating party requests the clearing agent to process the payment. 
		///Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> RequestedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteFileResponse3DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteFileResponse3DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	public class OBWriteFileResponse3DataMultiAuthorisation
	{
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
		
		/// <summary>
		/// Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateDateTime { get; set; }
		
		/// <summary>
		/// Number of authorisations received.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberReceived { get; set; }
		
		/// <summary>
		/// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberRequired { get; set; }
		
		/// <summary>
		/// Specifies the status of the authorisation flow in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataMultiAuthorisationStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBWriteFileResponse3DataStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InitiationCompleted")]
		InitiationCompleted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InitiationFailed")]
		InitiationFailed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InitiationPending")]
		InitiationPending = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteFundsConfirmationResponse1
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFundsConfirmationResponse1Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBWriteFundsConfirmationResponse1Data
	{
		
		/// <summary>
		/// Result of a funds availability check.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteFundsConfirmationResponse1DataFundsAvailableResult FundsAvailableResult { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteFundsConfirmationResponse1DataFundsAvailableResult
	{
		
		/// <summary>
		/// Flag to indicate the availability of funds given the Amount in the consent request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool FundsAvailable { get; set; }
		
		/// <summary>
		/// Date and time at which the funds availability check was generated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset FundsAvailableDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteInternational3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3Data Data { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteInternational3Data
	{
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single international payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiation Initiation { get; set; }
	}
	
	public class OBWriteInternational3DataInitiation
	{
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Party to which an amount of money is due.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationCreditor Creditor { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Financial institution servicing an account for the creditor.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationCreditorAgent CreditorAgent { get; set; }
		
		/// <summary>
		/// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string CurrencyOfTransfer { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
		/// Pattern: [A-Z]{2,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Z]{2,2}")]
		public string DestinationCountryCode { get; set; }
		
		/// <summary>
		/// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
		///Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
		///OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndToEndIdentification { get; set; }
		
		/// <summary>
		/// Provides details on the currency exchange rate and contract.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationExchangeRateInformation ExchangeRateInformation { get; set; }
		
		/// <summary>
		/// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string ExtendedPurpose { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
		///Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string InstructionIdentification { get; set; }
		
		/// <summary>
		/// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBWriteInternational3DataInitiationInstructionPriority> InstructionPriority { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
		///The list of valid codes is an external code list published separately.
		///External code sets can be downloaded from www.iso20022.org.
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Purpose { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteInternational3DataInitiationCreditor
	{
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
	}
	
	public class OBWriteInternational3DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternational3DataInitiationCreditorAgent
	{
		
		/// <summary>
		/// Unique and unambiguous identification of a financial institution or a branch of a financial institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	public class OBWriteInternational3DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternational3DataInitiationExchangeRateInformation
	{
		
		/// <summary>
		/// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ContractIdentification { get; set; }
		
		/// <summary>
		/// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		/// <summary>
		/// Specifies the type used to complete the currency exchange.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationExchangeRateInformationRateType RateType { get; set; }
		
		/// <summary>
		/// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string UnitCurrency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBWriteInternational3DataInitiationExchangeRateInformationRateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Actual")]
		Actual = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Agreed")]
		Agreed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Indicative")]
		Indicative = 2,
	}
	
	public class OBWriteInternational3DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBWriteInternational3DataInitiationInstructionPriority
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Normal")]
		Normal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Urgent")]
		Urgent = 1,
	}
	
	public class OBWriteInternational3DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteInternationalConsent5
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsent5Data Data { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteInternationalConsent5Data
	{
		
		/// <summary>
		/// The authorisation type request from the TPP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsent5DataAuthorisation Authorisation { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single international payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsent5DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// Specifies to share the refund account details with PISP
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataReadRefundAccount ReadRefundAccount { get; set; }
		
		/// <summary>
		/// Supporting Data provided by TPP, when requesting SCA Exemption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSCASupportData1 SCASupportData { get; set; }
	}
	
	public class OBWriteInternationalConsent5DataAuthorisation
	{
		
		/// <summary>
		/// Type of authorisation flow requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataAuthorisationAuthorisationType AuthorisationType { get; set; }
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionDateTime { get; set; }
	}
	
	public class OBWriteInternationalConsent5DataInitiation
	{
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Party to which an amount of money is due.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsent5DataInitiationCreditor Creditor { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsent5DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Financial institution servicing an account for the creditor.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsent5DataInitiationCreditorAgent CreditorAgent { get; set; }
		
		/// <summary>
		/// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string CurrencyOfTransfer { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsent5DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
		/// Pattern: [A-Z]{2,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Z]{2,2}")]
		public string DestinationCountryCode { get; set; }
		
		/// <summary>
		/// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
		///Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
		///OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndToEndIdentification { get; set; }
		
		/// <summary>
		/// Provides details on the currency exchange rate and contract.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsent5DataInitiationExchangeRateInformation ExchangeRateInformation { get; set; }
		
		/// <summary>
		/// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string ExtendedPurpose { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsent5DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
		///Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string InstructionIdentification { get; set; }
		
		/// <summary>
		/// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationInstructionPriority InstructionPriority { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
		///The list of valid codes is an external code list published separately.
		///External code sets can be downloaded from www.iso20022.org.
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Purpose { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsent5DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteInternationalConsent5DataInitiationCreditor
	{
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
	}
	
	public class OBWriteInternationalConsent5DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalConsent5DataInitiationCreditorAgent
	{
		
		/// <summary>
		/// Unique and unambiguous identification of a financial institution or a branch of a financial institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	public class OBWriteInternationalConsent5DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalConsent5DataInitiationExchangeRateInformation
	{
		
		/// <summary>
		/// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ContractIdentification { get; set; }
		
		/// <summary>
		/// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		/// <summary>
		/// Specifies the type used to complete the currency exchange.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationExchangeRateInformationRateType RateType { get; set; }
		
		/// <summary>
		/// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string UnitCurrency { get; set; }
	}
	
	public class OBWriteInternationalConsent5DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteInternationalConsent5DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteInternationalConsentResponse6
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsentResponse6Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteInternationalConsentResponse6Data
	{
		
		/// <summary>
		/// The authorisation type request from the TPP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsentResponse6DataAuthorisation Authorisation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsentResponse6DataCharges[] OBWriteInternationalConsentResponse6DataCharges { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CutOffDateTime { get; set; }
		
		/// <summary>
		/// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccountDebtor4 Debtor { get; set; }
		
		/// <summary>
		/// Further detailed information on the exchange rate that has been used in the payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsentResponse6DataExchangeRateInformation ExchangeRateInformation { get; set; }
		
		/// <summary>
		/// Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedSettlementDateTime { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single international payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsentResponse6DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// Specifies to share the refund account details with PISP
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataReadRefundAccount ReadRefundAccount { get; set; }
		
		/// <summary>
		/// Supporting Data provided by TPP, when requesting SCA Exemption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSCASupportData1 SCASupportData { get; set; }
		
		/// <summary>
		/// Specifies the status of consent resource in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsentResponse5DataStatus Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	public class OBWriteInternationalConsentResponse6DataAuthorisation
	{
		
		/// <summary>
		/// Type of authorisation flow requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataAuthorisationAuthorisationType AuthorisationType { get; set; }
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionDateTime { get; set; }
	}
	
	public class OBWriteInternationalConsentResponse6DataCharges
	{
		
		/// <summary>
		/// Amount of money associated with the charge type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Charge type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBWriteInternationalConsentResponse6DataExchangeRateInformation
	{
		
		/// <summary>
		/// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ContractIdentification { get; set; }
		
		/// <summary>
		/// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double ExchangeRate { get; set; }
		
		/// <summary>
		/// Specified date and time the exchange rate agreement will expire.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
		
		/// <summary>
		/// Specifies the type used to complete the currency exchange.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationExchangeRateInformationRateType RateType { get; set; }
		
		/// <summary>
		/// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string UnitCurrency { get; set; }
	}
	
	public class OBWriteInternationalConsentResponse6DataInitiation
	{
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Party to which an amount of money is due.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsentResponse6DataInitiationCreditor Creditor { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsentResponse6DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Financial institution servicing an account for the creditor.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsentResponse6DataInitiationCreditorAgent CreditorAgent { get; set; }
		
		/// <summary>
		/// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string CurrencyOfTransfer { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsentResponse6DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
		/// Pattern: [A-Z]{2,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Z]{2,2}")]
		public string DestinationCountryCode { get; set; }
		
		/// <summary>
		/// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
		///Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
		///OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndToEndIdentification { get; set; }
		
		/// <summary>
		/// Provides details on the currency exchange rate and contract.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsentResponse6DataInitiationExchangeRateInformation ExchangeRateInformation { get; set; }
		
		/// <summary>
		/// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string ExtendedPurpose { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsentResponse6DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
		///Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string InstructionIdentification { get; set; }
		
		/// <summary>
		/// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationInstructionPriority InstructionPriority { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
		///The list of valid codes is an external code list published separately.
		///External code sets can be downloaded from www.iso20022.org.
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Purpose { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalConsentResponse6DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteInternationalConsentResponse6DataInitiationCreditor
	{
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
	}
	
	public class OBWriteInternationalConsentResponse6DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalConsentResponse6DataInitiationCreditorAgent
	{
		
		/// <summary>
		/// Unique and unambiguous identification of a financial institution or a branch of a financial institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	public class OBWriteInternationalConsentResponse6DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalConsentResponse6DataInitiationExchangeRateInformation
	{
		
		/// <summary>
		/// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ContractIdentification { get; set; }
		
		/// <summary>
		/// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		/// <summary>
		/// Specifies the type used to complete the currency exchange.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationExchangeRateInformationRateType RateType { get; set; }
		
		/// <summary>
		/// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string UnitCurrency { get; set; }
	}
	
	public class OBWriteInternationalConsentResponse6DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteInternationalConsentResponse6DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteInternationalResponse5
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalResponse5Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBWriteInternationalResponse5Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalResponse5DataCharges[] OBWriteInternationalResponse5DataCharges { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the message was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccountDebtor4 Debtor { get; set; }
		
		/// <summary>
		/// Further detailed information on the exchange rate that has been used in the payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalResponse5DataExchangeRateInformation ExchangeRateInformation { get; set; }
		
		/// <summary>
		/// Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedSettlementDateTime { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single international payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalResponse5DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the international payment resource.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string InternationalPaymentId { get; set; }
		
		/// <summary>
		/// The multiple authorisation flow response from the ASPSP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalResponse5DataMultiAuthorisation MultiAuthorisation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalResponse5DataRefund Refund { get; set; }
		
		/// <summary>
		/// Specifies the status of the payment information group.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataStatus Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	public class OBWriteInternationalResponse5DataCharges
	{
		
		/// <summary>
		/// Amount of money associated with the charge type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Charge type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBWriteInternationalResponse5DataExchangeRateInformation
	{
		
		/// <summary>
		/// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ContractIdentification { get; set; }
		
		/// <summary>
		/// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double ExchangeRate { get; set; }
		
		/// <summary>
		/// Specified date and time the exchange rate agreement will expire.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
		
		/// <summary>
		/// Specifies the type used to complete the currency exchange.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationExchangeRateInformationRateType RateType { get; set; }
		
		/// <summary>
		/// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string UnitCurrency { get; set; }
	}
	
	public class OBWriteInternationalResponse5DataInitiation
	{
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Party to which an amount of money is due.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalResponse5DataInitiationCreditor Creditor { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalResponse5DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Financial institution servicing an account for the creditor.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalResponse5DataInitiationCreditorAgent CreditorAgent { get; set; }
		
		/// <summary>
		/// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string CurrencyOfTransfer { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalResponse5DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
		/// Pattern: [A-Z]{2,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Z]{2,2}")]
		public string DestinationCountryCode { get; set; }
		
		/// <summary>
		/// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
		///Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
		///OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndToEndIdentification { get; set; }
		
		/// <summary>
		/// Provides details on the currency exchange rate and contract.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalResponse5DataInitiationExchangeRateInformation ExchangeRateInformation { get; set; }
		
		/// <summary>
		/// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string ExtendedPurpose { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalResponse5DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
		///Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string InstructionIdentification { get; set; }
		
		/// <summary>
		/// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationInstructionPriority InstructionPriority { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
		///The list of valid codes is an external code list published separately.
		///External code sets can be downloaded from www.iso20022.org.
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Purpose { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalResponse5DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteInternationalResponse5DataInitiationCreditor
	{
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
	}
	
	public class OBWriteInternationalResponse5DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalResponse5DataInitiationCreditorAgent
	{
		
		/// <summary>
		/// Unique and unambiguous identification of a financial institution or a branch of a financial institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	public class OBWriteInternationalResponse5DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalResponse5DataInitiationExchangeRateInformation
	{
		
		/// <summary>
		/// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ContractIdentification { get; set; }
		
		/// <summary>
		/// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		/// <summary>
		/// Specifies the type used to complete the currency exchange.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationExchangeRateInformationRateType RateType { get; set; }
		
		/// <summary>
		/// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string UnitCurrency { get; set; }
	}
	
	public class OBWriteInternationalResponse5DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteInternationalResponse5DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	public class OBWriteInternationalResponse5DataMultiAuthorisation
	{
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
		
		/// <summary>
		/// Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateDateTime { get; set; }
		
		/// <summary>
		/// Number of authorisations received.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberReceived { get; set; }
		
		/// <summary>
		/// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberRequired { get; set; }
		
		/// <summary>
		/// Specifies the status of the authorisation flow in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataMultiAuthorisationStatus Status { get; set; }
	}
	
	public class OBWriteInternationalResponse5DataRefund
	{
		
		/// <summary>
		/// Provides the details to identify an account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalResponse5DataRefundAccount Account { get; set; }
		
		/// <summary>
		/// Set of elements used to uniquely and unambiguously identify a financial institution or a branch of a financial institution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalResponse5DataRefundAgent Agent { get; set; }
		
		/// <summary>
		/// Set of elements used to identify a person or an organisation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalResponse5DataRefundCreditor Creditor { get; set; }
	}
	
	public class OBWriteInternationalResponse5DataRefundAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name of the account, as assigned by the account servicing institution.
		///Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalResponse5DataRefundAgent
	{
		
		/// <summary>
		/// Unique and unambiguous identification of a financial institution or a branch of a financial institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	public class OBWriteInternationalResponse5DataRefundCreditor
	{
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteInternationalScheduled3
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduled3Data Data { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteInternationalScheduled3Data
	{
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduled3DataInitiation Initiation { get; set; }
	}
	
	public class OBWriteInternationalScheduled3DataInitiation
	{
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Party to which an amount of money is due.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduled3DataInitiationCreditor Creditor { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduled3DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Financial institution servicing an account for the creditor.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduled3DataInitiationCreditorAgent CreditorAgent { get; set; }
		
		/// <summary>
		/// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string CurrencyOfTransfer { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduled3DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
		/// Pattern: [A-Z]{2,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Z]{2,2}")]
		public string DestinationCountryCode { get; set; }
		
		/// <summary>
		/// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
		///Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
		///OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndToEndIdentification { get; set; }
		
		/// <summary>
		/// Provides details on the currency exchange rate and contract.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduled3DataInitiationExchangeRateInformation ExchangeRateInformation { get; set; }
		
		/// <summary>
		/// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string ExtendedPurpose { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduled3DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
		///Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string InstructionIdentification { get; set; }
		
		/// <summary>
		/// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationInstructionPriority InstructionPriority { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
		///The list of valid codes is an external code list published separately.
		///External code sets can be downloaded from www.iso20022.org.
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Purpose { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduled3DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Date at which the initiating party requests the clearing agent to process the payment. 
		///Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RequestedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteInternationalScheduled3DataInitiationCreditor
	{
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
	}
	
	public class OBWriteInternationalScheduled3DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalScheduled3DataInitiationCreditorAgent
	{
		
		/// <summary>
		/// Unique and unambiguous identification of a financial institution or a branch of a financial institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	public class OBWriteInternationalScheduled3DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalScheduled3DataInitiationExchangeRateInformation
	{
		
		/// <summary>
		/// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ContractIdentification { get; set; }
		
		/// <summary>
		/// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		/// <summary>
		/// Specifies the type used to complete the currency exchange.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationExchangeRateInformationRateType RateType { get; set; }
		
		/// <summary>
		/// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string UnitCurrency { get; set; }
	}
	
	public class OBWriteInternationalScheduled3DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteInternationalScheduled3DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteInternationalScheduledConsent5
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsent5Data Data { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsent5Data
	{
		
		/// <summary>
		/// The authorisation type request from the TPP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsent5DataAuthorisation Authorisation { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsent5DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// Specifies the Open Banking service request types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsent4DataPermission Permission { get; set; }
		
		/// <summary>
		/// Specifies to share the refund account details with PISP
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataReadRefundAccount ReadRefundAccount { get; set; }
		
		/// <summary>
		/// Supporting Data provided by TPP, when requesting SCA Exemption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSCASupportData1 SCASupportData { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsent5DataAuthorisation
	{
		
		/// <summary>
		/// Type of authorisation flow requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataAuthorisationAuthorisationType AuthorisationType { get; set; }
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionDateTime { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsent5DataInitiation
	{
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Party to which an amount of money is due.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsent5DataInitiationCreditor Creditor { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsent5DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Financial institution servicing an account for the creditor.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsent5DataInitiationCreditorAgent CreditorAgent { get; set; }
		
		/// <summary>
		/// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string CurrencyOfTransfer { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsent5DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
		/// Pattern: [A-Z]{2,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Z]{2,2}")]
		public string DestinationCountryCode { get; set; }
		
		/// <summary>
		/// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
		///Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
		///OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndToEndIdentification { get; set; }
		
		/// <summary>
		/// Provides details on the currency exchange rate and contract.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsent5DataInitiationExchangeRateInformation ExchangeRateInformation { get; set; }
		
		/// <summary>
		/// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string ExtendedPurpose { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsent5DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
		///Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string InstructionIdentification { get; set; }
		
		/// <summary>
		/// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationInstructionPriority InstructionPriority { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
		///The list of valid codes is an external code list published separately.
		///External code sets can be downloaded from www.iso20022.org.
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Purpose { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsent5DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Date at which the initiating party requests the clearing agent to process the payment. 
		///Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RequestedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsent5DataInitiationCreditor
	{
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsent5DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsent5DataInitiationCreditorAgent
	{
		
		/// <summary>
		/// Unique and unambiguous identification of a financial institution or a branch of a financial institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsent5DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsent5DataInitiationExchangeRateInformation
	{
		
		/// <summary>
		/// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ContractIdentification { get; set; }
		
		/// <summary>
		/// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		/// <summary>
		/// Specifies the type used to complete the currency exchange.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationExchangeRateInformationRateType RateType { get; set; }
		
		/// <summary>
		/// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string UnitCurrency { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsent5DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsent5DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteInternationalScheduledConsentResponse6
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsentResponse6Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsentResponse6Data
	{
		
		/// <summary>
		/// The authorisation type request from the TPP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsentResponse6DataAuthorisation Authorisation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsentResponse6DataCharges[] OBWriteInternationalScheduledConsentResponse6DataCharges { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CutOffDateTime { get; set; }
		
		/// <summary>
		/// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccountDebtor4 Debtor { get; set; }
		
		/// <summary>
		/// Further detailed information on the exchange rate that has been used in the payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformation ExchangeRateInformation { get; set; }
		
		/// <summary>
		/// Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedSettlementDateTime { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsentResponse6DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// Specifies the Open Banking service request types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsent4DataPermission Permission { get; set; }
		
		/// <summary>
		/// Specifies to share the refund account details with PISP
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataReadRefundAccount ReadRefundAccount { get; set; }
		
		/// <summary>
		/// Supporting Data provided by TPP, when requesting SCA Exemption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSCASupportData1 SCASupportData { get; set; }
		
		/// <summary>
		/// Specifies the status of consent resource in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsentResponse5DataStatus Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsentResponse6DataAuthorisation
	{
		
		/// <summary>
		/// Type of authorisation flow requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataAuthorisationAuthorisationType AuthorisationType { get; set; }
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionDateTime { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsentResponse6DataCharges
	{
		
		/// <summary>
		/// Amount of money associated with the charge type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Charge type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsentResponse6DataExchangeRateInformation
	{
		
		/// <summary>
		/// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ContractIdentification { get; set; }
		
		/// <summary>
		/// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double ExchangeRate { get; set; }
		
		/// <summary>
		/// Specified date and time the exchange rate agreement will expire.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
		
		/// <summary>
		/// Specifies the type used to complete the currency exchange.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationExchangeRateInformationRateType RateType { get; set; }
		
		/// <summary>
		/// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string UnitCurrency { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsentResponse6DataInitiation
	{
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Party to which an amount of money is due.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsentResponse6DataInitiationCreditor Creditor { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsentResponse6DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Financial institution servicing an account for the creditor.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsentResponse6DataInitiationCreditorAgent CreditorAgent { get; set; }
		
		/// <summary>
		/// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string CurrencyOfTransfer { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsentResponse6DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
		/// Pattern: [A-Z]{2,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Z]{2,2}")]
		public string DestinationCountryCode { get; set; }
		
		/// <summary>
		/// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
		///Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
		///OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndToEndIdentification { get; set; }
		
		/// <summary>
		/// Provides details on the currency exchange rate and contract.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformation ExchangeRateInformation { get; set; }
		
		/// <summary>
		/// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string ExtendedPurpose { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsentResponse6DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
		///Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string InstructionIdentification { get; set; }
		
		/// <summary>
		/// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationInstructionPriority InstructionPriority { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
		///The list of valid codes is an external code list published separately.
		///External code sets can be downloaded from www.iso20022.org.
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Purpose { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledConsentResponse6DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Date at which the initiating party requests the clearing agent to process the payment. 
		///Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RequestedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsentResponse6DataInitiationCreditor
	{
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsentResponse6DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsentResponse6DataInitiationCreditorAgent
	{
		
		/// <summary>
		/// Unique and unambiguous identification of a financial institution or a branch of a financial institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsentResponse6DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsentResponse6DataInitiationExchangeRateInformation
	{
		
		/// <summary>
		/// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ContractIdentification { get; set; }
		
		/// <summary>
		/// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		/// <summary>
		/// Specifies the type used to complete the currency exchange.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationExchangeRateInformationRateType RateType { get; set; }
		
		/// <summary>
		/// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string UnitCurrency { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsentResponse6DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteInternationalScheduledConsentResponse6DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteInternationalScheduledResponse6
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledResponse6Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBWriteInternationalScheduledResponse6Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledResponse6DataCharges[] OBWriteInternationalScheduledResponse6DataCharges { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the message was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccountDebtor4 Debtor { get; set; }
		
		/// <summary>
		/// Further detailed information on the exchange rate that has been used in the payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledResponse6DataExchangeRateInformation ExchangeRateInformation { get; set; }
		
		/// <summary>
		/// Expected execution date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Expected settlement date and time for the payment resource.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpectedSettlementDateTime { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for a single scheduled international payment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledResponse6DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the international scheduled payment resource.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string InternationalScheduledPaymentId { get; set; }
		
		/// <summary>
		/// The multiple authorisation flow response from the ASPSP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledResponse6DataMultiAuthorisation MultiAuthorisation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledResponse6DataRefund Refund { get; set; }
		
		/// <summary>
		/// Specifies the status of the payment order resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledResponse5DataStatus Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	public class OBWriteInternationalScheduledResponse6DataCharges
	{
		
		/// <summary>
		/// Amount of money associated with the charge type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Charge type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBWriteInternationalScheduledResponse6DataExchangeRateInformation
	{
		
		/// <summary>
		/// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ContractIdentification { get; set; }
		
		/// <summary>
		/// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public double ExchangeRate { get; set; }
		
		/// <summary>
		/// Specified date and time the exchange rate agreement will expire.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
		
		/// <summary>
		/// Specifies the type used to complete the currency exchange.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationExchangeRateInformationRateType RateType { get; set; }
		
		/// <summary>
		/// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string UnitCurrency { get; set; }
	}
	
	public class OBWriteInternationalScheduledResponse6DataInitiation
	{
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Party to which an amount of money is due.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledResponse6DataInitiationCreditor Creditor { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the creditor to which a credit entry will be posted as a result of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledResponse6DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Financial institution servicing an account for the creditor.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledResponse6DataInitiationCreditorAgent CreditorAgent { get; set; }
		
		/// <summary>
		/// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string CurrencyOfTransfer { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledResponse6DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
		/// Pattern: [A-Z]{2,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Z]{2,2}")]
		public string DestinationCountryCode { get; set; }
		
		/// <summary>
		/// Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain.
		///Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction.
		///OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string EndToEndIdentification { get; set; }
		
		/// <summary>
		/// Provides details on the currency exchange rate and contract.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledResponse6DataInitiationExchangeRateInformation ExchangeRateInformation { get; set; }
		
		/// <summary>
		/// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string ExtendedPurpose { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledResponse6DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction.
		///Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.
		/// Required
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string InstructionIdentification { get; set; }
		
		/// <summary>
		/// Indicator of the urgency or order of importance that the instructing party would like the instructed party to apply to the processing of the instruction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationInstructionPriority InstructionPriority { get; set; }
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
		///The list of valid codes is an external code list published separately.
		///External code sets can be downloaded from www.iso20022.org.
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Purpose { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching of an entry with the items that the transfer is intended to settle, such as commercial invoices in an accounts' receivable system.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledResponse6DataInitiationRemittanceInformation RemittanceInformation { get; set; }
		
		/// <summary>
		/// Date at which the initiating party requests the clearing agent to process the payment. 
		///Usage: This is the date on which the debtor's account is to be debited.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RequestedExecutionDateTime { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteInternationalScheduledResponse6DataInitiationCreditor
	{
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
	}
	
	public class OBWriteInternationalScheduledResponse6DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalScheduledResponse6DataInitiationCreditorAgent
	{
		
		/// <summary>
		/// Unique and unambiguous identification of a financial institution or a branch of a financial institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	public class OBWriteInternationalScheduledResponse6DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalScheduledResponse6DataInitiationExchangeRateInformation
	{
		
		/// <summary>
		/// Unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string ContractIdentification { get; set; }
		
		/// <summary>
		/// The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ExchangeRate { get; set; }
		
		/// <summary>
		/// Specifies the type used to complete the currency exchange.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternational3DataInitiationExchangeRateInformationRateType RateType { get; set; }
		
		/// <summary>
		/// Currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is GBP.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string UnitCurrency { get; set; }
	}
	
	public class OBWriteInternationalScheduledResponse6DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteInternationalScheduledResponse6DataInitiationRemittanceInformation
	{
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		///OB: The Faster Payments Scheme can only accept 18 characters for the ReferenceInformation field - which is where this ISO field will be mapped.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Information supplied to enable the matching/reconciliation of an entry with the items that the payment is intended to settle, such as commercial invoices in an accounts' receivable system, in an unstructured form.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Unstructured { get; set; }
	}
	
	public class OBWriteInternationalScheduledResponse6DataMultiAuthorisation
	{
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
		
		/// <summary>
		/// Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateDateTime { get; set; }
		
		/// <summary>
		/// Number of authorisations received.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberReceived { get; set; }
		
		/// <summary>
		/// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberRequired { get; set; }
		
		/// <summary>
		/// Specifies the status of the authorisation flow in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataMultiAuthorisationStatus Status { get; set; }
	}
	
	public class OBWriteInternationalScheduledResponse6DataRefund
	{
		
		/// <summary>
		/// Provides the details to identify an account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledResponse6DataRefundAccount Account { get; set; }
		
		/// <summary>
		/// Set of elements used to uniquely and unambiguously identify a financial institution or a branch of a financial institution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledResponse6DataRefundAgent Agent { get; set; }
		
		/// <summary>
		/// Set of elements used to identify a person or an organisation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalScheduledResponse6DataRefundCreditor Creditor { get; set; }
	}
	
	public class OBWriteInternationalScheduledResponse6DataRefundAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name of the account, as assigned by the account servicing institution.
		///Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalScheduledResponse6DataRefundAgent
	{
		
		/// <summary>
		/// Unique and unambiguous identification of a financial institution or a branch of a financial institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	public class OBWriteInternationalScheduledResponse6DataRefundCreditor
	{
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteInternationalStandingOrder4
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrder4Data Data { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteInternationalStandingOrder4Data
	{
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for an international standing order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrder4DataInitiation Initiation { get; set; }
	}
	
	public class OBWriteInternationalStandingOrder4DataInitiation
	{
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Party to which an amount of money is due.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrder4DataInitiationCreditor Creditor { get; set; }
		
		/// <summary>
		/// Provides the details to identify the beneficiary account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrder4DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
		///This is the servicer of the beneficiary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrder4DataInitiationCreditorAgent CreditorAgent { get; set; }
		
		/// <summary>
		/// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string CurrencyOfTransfer { get; set; }
		
		/// <summary>
		/// Provides the details to identify the debtor account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrder4DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
		/// Pattern: [A-Z]{2,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Z]{2,2}")]
		public string DestinationCountryCode { get; set; }
		
		/// <summary>
		/// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string ExtendedPurpose { get; set; }
		
		/// <summary>
		/// The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FinalPaymentDateTime { get; set; }
		
		/// <summary>
		/// The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset FirstPaymentDateTime { get; set; }
		
		/// <summary>
		/// Individual Definitions:
		///EvryDay - Every day
		///EvryWorkgDay - Every working day
		///IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
		///WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
		///IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)
		///QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). 
		///ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. 
		///SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
		///RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. 
		///Individual Patterns:
		///EvryDay (ScheduleCode)
		///EvryWorkgDay (ScheduleCode)
		///IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
		///WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
		///IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
		///QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
		///The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
		///EvryDay
		///EvryWorkgDay
		///IntrvlWkDay:0[1-9]:0[1-7]
		///WkInMnthDay:0[1-5]:0[1-7]
		///IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
		///QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
		///Full Regular Expression:
		///^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// Required
		/// Pattern: ^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$")]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrder4DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string NumberOfPayments { get; set; }
		
		/// <summary>
		/// Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
		///The list of valid codes is an external code list published separately.
		///External code sets can be downloaded from www.iso20022.org.
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Purpose { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteInternationalStandingOrder4DataInitiationCreditor
	{
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
	}
	
	public class OBWriteInternationalStandingOrder4DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalStandingOrder4DataInitiationCreditorAgent
	{
		
		/// <summary>
		/// Unique and unambiguous identification of the servicing institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	public class OBWriteInternationalStandingOrder4DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalStandingOrder4DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteInternationalStandingOrderConsent6
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsent6Data Data { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsent6Data
	{
		
		/// <summary>
		/// The authorisation type request from the TPP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsent6DataAuthorisation Authorisation { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for an international standing order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsent6DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// Specifies the Open Banking service request types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsent4DataPermission Permission { get; set; }
		
		/// <summary>
		/// Specifies to share the refund account details with PISP
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataReadRefundAccount ReadRefundAccount { get; set; }
		
		/// <summary>
		/// Supporting Data provided by TPP, when requesting SCA Exemption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSCASupportData1 SCASupportData { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsent6DataAuthorisation
	{
		
		/// <summary>
		/// Type of authorisation flow requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataAuthorisationAuthorisationType AuthorisationType { get; set; }
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionDateTime { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsent6DataInitiation
	{
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Party to which an amount of money is due.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsent6DataInitiationCreditor Creditor { get; set; }
		
		/// <summary>
		/// Provides the details to identify the beneficiary account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsent6DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
		///This is the servicer of the beneficiary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsent6DataInitiationCreditorAgent CreditorAgent { get; set; }
		
		/// <summary>
		/// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string CurrencyOfTransfer { get; set; }
		
		/// <summary>
		/// Provides the details to identify the debtor account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsent6DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
		/// Pattern: [A-Z]{2,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Z]{2,2}")]
		public string DestinationCountryCode { get; set; }
		
		/// <summary>
		/// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string ExtendedPurpose { get; set; }
		
		/// <summary>
		/// The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FinalPaymentDateTime { get; set; }
		
		/// <summary>
		/// The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset FirstPaymentDateTime { get; set; }
		
		/// <summary>
		/// Individual Definitions:
		///EvryDay - Every day
		///EvryWorkgDay - Every working day
		///IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
		///WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
		///IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)
		///QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). 
		///ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. 
		///SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
		///RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. 
		///Individual Patterns:
		///EvryDay (ScheduleCode)
		///EvryWorkgDay (ScheduleCode)
		///IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
		///WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
		///IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
		///QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
		///The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
		///EvryDay
		///EvryWorkgDay
		///IntrvlWkDay:0[1-9]:0[1-7]
		///WkInMnthDay:0[1-5]:0[1-7]
		///IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
		///QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
		///Full Regular Expression:
		///^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// Required
		/// Pattern: ^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$")]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsent6DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string NumberOfPayments { get; set; }
		
		/// <summary>
		/// Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
		///The list of valid codes is an external code list published separately.
		///External code sets can be downloaded from www.iso20022.org.
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Purpose { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsent6DataInitiationCreditor
	{
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsent6DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsent6DataInitiationCreditorAgent
	{
		
		/// <summary>
		/// Unique and unambiguous identification of the servicing institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsent6DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsent6DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteInternationalStandingOrderConsentResponse7
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsentResponse7Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// The Risk section is sent by the initiating party to the ASPSP. It is used to specify additional details for risk scoring for Payments.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBRisk1 Risk { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsentResponse7Data
	{
		
		/// <summary>
		/// The authorisation type request from the TPP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsentResponse7DataAuthorisation Authorisation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsentResponse7DataCharges[] OBWriteInternationalStandingOrderConsentResponse7DataCharges { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// Specified cut-off date and time for the payment consent.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CutOffDateTime { get; set; }
		
		/// <summary>
		/// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccountDebtor4 Debtor { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for an international standing order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsentResponse7DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// Specifies the Open Banking service request types.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledConsent4DataPermission Permission { get; set; }
		
		/// <summary>
		/// Specifies to share the refund account details with PISP
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataReadRefundAccount ReadRefundAccount { get; set; }
		
		/// <summary>
		/// Supporting Data provided by TPP, when requesting SCA Exemption.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSCASupportData1 SCASupportData { get; set; }
		
		/// <summary>
		/// Specifies the status of resource in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsentResponse5DataStatus Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsentResponse7DataAuthorisation
	{
		
		/// <summary>
		/// Type of authorisation flow requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticConsent4DataAuthorisationAuthorisationType AuthorisationType { get; set; }
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CompletionDateTime { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsentResponse7DataCharges
	{
		
		/// <summary>
		/// Amount of money associated with the charge type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Charge type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsentResponse7DataInitiation
	{
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Party to which an amount of money is due.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsentResponse7DataInitiationCreditor Creditor { get; set; }
		
		/// <summary>
		/// Provides the details to identify the beneficiary account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsentResponse7DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
		///This is the servicer of the beneficiary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsentResponse7DataInitiationCreditorAgent CreditorAgent { get; set; }
		
		/// <summary>
		/// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string CurrencyOfTransfer { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsentResponse7DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
		/// Pattern: [A-Z]{2,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Z]{2,2}")]
		public string DestinationCountryCode { get; set; }
		
		/// <summary>
		/// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string ExtendedPurpose { get; set; }
		
		/// <summary>
		/// The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FinalPaymentDateTime { get; set; }
		
		/// <summary>
		/// The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset FirstPaymentDateTime { get; set; }
		
		/// <summary>
		/// Individual Definitions:
		///EvryDay - Every day
		///EvryWorkgDay - Every working day
		///IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
		///WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
		///IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)
		///QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). 
		///ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. 
		///SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
		///RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. 
		///Individual Patterns:
		///EvryDay (ScheduleCode)
		///EvryWorkgDay (ScheduleCode)
		///IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
		///WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
		///IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
		///QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
		///The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
		///EvryDay
		///EvryWorkgDay
		///IntrvlWkDay:0[1-9]:0[1-7]
		///WkInMnthDay:0[1-5]:0[1-7]
		///IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
		///QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
		///Full Regular Expression:
		///^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// Required
		/// Pattern: ^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$")]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderConsentResponse7DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string NumberOfPayments { get; set; }
		
		/// <summary>
		/// Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
		///The list of valid codes is an external code list published separately.
		///External code sets can be downloaded from www.iso20022.org.
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Purpose { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsentResponse7DataInitiationCreditor
	{
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsentResponse7DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsentResponse7DataInitiationCreditorAgent
	{
		
		/// <summary>
		/// Unique and unambiguous identification of the servicing institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsentResponse7DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderConsentResponse7DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWriteInternationalStandingOrderResponse7
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderResponse7Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderResponse7Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderResponse7DataCharges[] OBWriteInternationalStandingOrderResponse7DataCharges { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the consent resource.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Date and time at which the resource was created.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationDateTime { get; set; }
		
		/// <summary>
		/// ^ Only incuded in the response if `Data. ReadRefundAccount` is set to `Yes` in the consent.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBCashAccountDebtor4 Debtor { get; set; }
		
		/// <summary>
		/// The Initiation payload is sent by the initiating party to the ASPSP. It is used to request movement of funds from the debtor account to a creditor for an international standing order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderResponse7DataInitiation Initiation { get; set; }
		
		/// <summary>
		/// OB: Unique identification as assigned by the ASPSP to uniquely identify the international standing order resource.
		/// Required
		/// Min length: 1
		/// Max length: 40
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(40)]
		public string InternationalStandingOrderId { get; set; }
		
		/// <summary>
		/// The multiple authorisation flow response from the ASPSP.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderResponse7DataMultiAuthorisation MultiAuthorisation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderResponse7DataRefund Refund { get; set; }
		
		/// <summary>
		/// Specifies the status of resource in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticScheduledResponse5DataStatus Status { get; set; }
		
		/// <summary>
		/// Date and time at which the resource status was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderResponse7DataCharges
	{
		
		/// <summary>
		/// Amount of money associated with the charge type.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBActiveOrHistoricCurrencyAndAmount Amount { get; set; }
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Charge type, in a coded form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderResponse7DataInitiation
	{
		
		/// <summary>
		/// Specifies which party/parties will bear the charges associated with the processing of the payment transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBChargeBearerType1Code ChargeBearer { get; set; }
		
		/// <summary>
		/// Party to which an amount of money is due.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderResponse7DataInitiationCreditor Creditor { get; set; }
		
		/// <summary>
		/// Provides the details to identify the beneficiary account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderResponse7DataInitiationCreditorAccount CreditorAccount { get; set; }
		
		/// <summary>
		/// Party that manages the account on behalf of the account owner, that is manages the registration and booking of entries on the account, calculates balances on the account and provides information about the account.
		///This is the servicer of the beneficiary account.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderResponse7DataInitiationCreditorAgent CreditorAgent { get; set; }
		
		/// <summary>
		/// Specifies the currency of the to be transferred amount, which is different from the currency of the debtor's account.
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string CurrencyOfTransfer { get; set; }
		
		/// <summary>
		/// Unambiguous identification of the account of the debtor to which a debit entry will be made as a result of the transaction.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderResponse7DataInitiationDebtorAccount DebtorAccount { get; set; }
		
		/// <summary>
		/// Country in which Credit Account is domiciled. Code to identify a country, a dependency, or another area of particular geopolitical interest, on the basis of country names obtained from the United Nations (ISO 3166, Alpha-2 code).
		/// Pattern: [A-Z]{2,2}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[A-Z]{2,2}")]
		public string DestinationCountryCode { get; set; }
		
		/// <summary>
		/// Specifies the purpose of an international payment, when there is no corresponding 4 character code available in the ISO20022 list of Purpose Codes.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string ExtendedPurpose { get; set; }
		
		/// <summary>
		/// The date on which the final payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> FinalPaymentDateTime { get; set; }
		
		/// <summary>
		/// The date on which the first payment for a Standing Order schedule will be made.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset FirstPaymentDateTime { get; set; }
		
		/// <summary>
		/// Individual Definitions:
		///EvryDay - Every day
		///EvryWorkgDay - Every working day
		///IntrvlWkDay - An interval specified in weeks (01 to 09), and the day within the week (01 to 07)
		///WkInMnthDay - A monthly interval, specifying the week of the month (01 to 05) and day within the week (01 to 07)
		///IntrvlMnthDay - An interval specified in months (between 01 to 06, 12, 24), specifying the day within the month (-5 to -1, 1 to 31)
		///QtrDay - Quarterly (either ENGLISH, SCOTTISH, or RECEIVED). 
		///ENGLISH = Paid on the 25th March, 24th June, 29th September and 25th December. 
		///SCOTTISH = Paid on the 2nd February, 15th May, 1st August and 11th November.
		///RECEIVED = Paid on the 20th March, 19th June, 24th September and 20th December. 
		///Individual Patterns:
		///EvryDay (ScheduleCode)
		///EvryWorkgDay (ScheduleCode)
		///IntrvlWkDay:IntervalInWeeks:DayInWeek (ScheduleCode + IntervalInWeeks + DayInWeek)
		///WkInMnthDay:WeekInMonth:DayInWeek (ScheduleCode + WeekInMonth + DayInWeek)
		///IntrvlMnthDay:IntervalInMonths:DayInMonth (ScheduleCode + IntervalInMonths + DayInMonth)
		///QtrDay: + either (ENGLISH, SCOTTISH or RECEIVED) ScheduleCode + QuarterDay
		///The regular expression for this element combines five smaller versions for each permitted pattern. To aid legibility - the components are presented individually here:
		///EvryDay
		///EvryWorkgDay
		///IntrvlWkDay:0[1-9]:0[1-7]
		///WkInMnthDay:0[1-5]:0[1-7]
		///IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01])
		///QtrDay:(ENGLISH|SCOTTISH|RECEIVED)
		///Full Regular Expression:
		///^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// Required
		/// Pattern: ^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(EvryDay)$|^(EvryWorkgDay)$|^(IntrvlDay:((0[2-9])|([1-2][0-9])|3[0-1]))$|^(IntrvlWkDay:0[1-9]:0[1-7])$|^(WkInMnthDay:0[1-5]:0[1-7])$|^(IntrvlMnthDay:(0[1-6]|12|24):(-0[1-5]|0[1-9]|[12][0-9]|3[01]))$|^(QtrDay:(ENGLISH|SCOTTISH|RECEIVED))$")]
		public string Frequency { get; set; }
		
		/// <summary>
		/// Amount of money to be moved between the debtor and creditor, before deduction of charges, expressed in the currency as ordered by the initiating party.
		///Usage: This amount has to be transported unchanged through the transaction chain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderResponse7DataInitiationInstructedAmount InstructedAmount { get; set; }
		
		/// <summary>
		/// Number of the payments that will be made in completing this frequency sequence including any executed since the sequence start date.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string NumberOfPayments { get; set; }
		
		/// <summary>
		/// Specifies the external purpose code in the format of character string with a maximum length of 4 characters.
		///The list of valid codes is an external code list published separately.
		///External code sets can be downloaded from www.iso20022.org.
		/// Min length: 1
		/// Max length: 4
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string Purpose { get; set; }
		
		/// <summary>
		/// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction.
		///Usage: If available, the initiating party should provide this reference in the structured remittance information, to enable reconciliation by the creditor upon receipt of the amount of money.
		///If the business context requires the use of a creditor reference or a payment remit identification, and only one identifier can be passed through the end-to-end chain, the creditor's reference or payment remittance identification should be quoted in the end-to-end transaction identification.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Reference { get; set; }
		
		/// <summary>
		/// Additional information that can not be captured in the structured fields and/or any other specific block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBSupplementaryData1 SupplementaryData { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderResponse7DataInitiationCreditor
	{
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderResponse7DataInitiationCreditorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level.
		///Note, the account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderResponse7DataInitiationCreditorAgent
	{
		
		/// <summary>
		/// Unique and unambiguous identification of the servicing institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderResponse7DataInitiationDebtorAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// The account name is the name or names of the account owner(s) represented at an account level, as displayed by the ASPSP's online channels.
		///Note, the account name is not the product name or the nickname of the account.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderResponse7DataInitiationInstructedAmount
	{
		
		/// <summary>
		/// A number of monetary units specified in an active currency where the unit of currency is explicit and compliant with ISO 4217.
		/// Required
		/// Pattern: ^\d{1,13}$|^\d{1,13}\.\d{1,5}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^\d{1,13}$|^\d{1,13}\.\d{1,5}$")]
		public string Amount { get; set; }
		
		/// <summary>
		/// A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 "Codes for the representation of currencies and funds".
		/// Required
		/// Pattern: ^[A-Z]{3,3}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{3,3}$")]
		public string Currency { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderResponse7DataMultiAuthorisation
	{
		
		/// <summary>
		/// Date and time at which the requested authorisation flow must be completed.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> ExpirationDateTime { get; set; }
		
		/// <summary>
		/// Last date and time at the authorisation flow was updated.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastUpdateDateTime { get; set; }
		
		/// <summary>
		/// Number of authorisations received.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberReceived { get; set; }
		
		/// <summary>
		/// Number of authorisations required for payment order (total required at the start of the multi authorisation journey).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberRequired { get; set; }
		
		/// <summary>
		/// Specifies the status of the authorisation flow in code form.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteDomesticResponse5DataMultiAuthorisationStatus Status { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderResponse7DataRefund
	{
		
		/// <summary>
		/// Provides the details to identify an account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderResponse7DataRefundAccount Account { get; set; }
		
		/// <summary>
		/// Set of elements used to uniquely and unambiguously identify a financial institution or a branch of a financial institution.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderResponse7DataRefundAgent Agent { get; set; }
		
		/// <summary>
		/// Set of elements used to identify a person or an organisation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWriteInternationalStandingOrderResponse7DataRefundCreditor Creditor { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderResponse7DataRefundAccount
	{
		
		/// <summary>
		/// Identification assigned by an institution to identify an account. This identification is known by the account owner.
		/// Required
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name of the account, as assigned by the account servicing institution.
		///Usage: The account name is the name or names of the account owner(s) represented at an account level. The account name is not the product name or the nickname of the account.
		///OB: ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.
		/// Required
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
		
		/// <summary>
		/// This is secondary identification of the account, as assigned by the account servicing institution. 
		///This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).
		/// Min length: 1
		/// Max length: 34
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		public string SecondaryIdentification { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderResponse7DataRefundAgent
	{
		
		/// <summary>
		/// Unique and unambiguous identification of a financial institution or a branch of a financial institution.
		/// Min length: 1
		/// Max length: 35
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(35)]
		public string Identification { get; set; }
		
		/// <summary>
		/// Name by which an agent is known and which is usually used to identify that agent.
		/// Min length: 1
		/// Max length: 140
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(140)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
		
		/// <summary>
		/// Name of the identification scheme, in a coded form as published in an external list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SchemeName { get; set; }
	}
	
	public class OBWriteInternationalStandingOrderResponse7DataRefundCreditor
	{
		
		/// <summary>
		/// Name by which a party is known and which is usually used to identify that party.
		/// Min length: 1
		/// Max length: 350
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(350)]
		public string Name { get; set; }
		
		/// <summary>
		/// Information that locates and identifies a specific address, as defined by postal services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBPostalAddress6 PostalAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OBWritePaymentDetailsResponse1
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWritePaymentDetailsResponse1Data Data { get; set; }
		
		/// <summary>
		/// Links relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Links Links { get; set; }
		
		/// <summary>
		/// Meta Data relevant to the payload
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Meta Meta { get; set; }
	}
	
	public class OBWritePaymentDetailsResponse1Data
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OBWritePaymentDetailsResponse1DataPaymentStatus[] OBWritePaymentDetailsResponse1DataPaymentStatus { get; set; }
	}
	
	public class OBWritePaymentDetailsResponse1DataPaymentStatus
	{
		
		/// <summary>
		/// Unique identifier for the transaction within an servicing institution. This identifier is both unique and immutable.
		/// Required
		/// Min length: 1
		/// Max length: 210
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(210)]
		public string PaymentTransactionId { get; set; }
		
		/// <summary>
		/// Status of a transfe, as assigned by the transaction administrator.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OBWritePaymentDetailsResponse1DataPaymentStatusStatus Status { get; set; }
		
		/// <summary>
		/// Payment status details as per underlying Payment Rail.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OBWritePaymentDetailsResponse1DataPaymentStatusStatusDetail StatusDetail { get; set; }
		
		/// <summary>
		/// Date and time at which the status was assigned to the transfer.All dates in the JSON payloads are represented in ISO 8601 date-time format. 
		///All date-time fields in responses must include the timezone. An example is below:
		///2017-04-05T10:43:07+00:00
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StatusUpdateDateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBWritePaymentDetailsResponse1DataPaymentStatusStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Accepted")]
		Accepted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AcceptedCancellationRequest")]
		AcceptedCancellationRequest = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AcceptedCreditSettlementCompleted")]
		AcceptedCreditSettlementCompleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AcceptedCustomerProfile")]
		AcceptedCustomerProfile = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AcceptedFundsChecked")]
		AcceptedFundsChecked = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AcceptedSettlementCompleted")]
		AcceptedSettlementCompleted = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AcceptedSettlementInProcess")]
		AcceptedSettlementInProcess = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AcceptedTechnicalValidation")]
		AcceptedTechnicalValidation = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AcceptedWithChange")]
		AcceptedWithChange = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AcceptedWithoutPosting")]
		AcceptedWithoutPosting = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cancelled")]
		Cancelled = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NoCancellationProcess")]
		NoCancellationProcess = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PartiallyAcceptedCancellationRequest")]
		PartiallyAcceptedCancellationRequest = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PartiallyAcceptedTechnicalCorrect")]
		PartiallyAcceptedTechnicalCorrect = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PaymentCancelled")]
		PaymentCancelled = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pending")]
		Pending = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PendingCancellationRequest")]
		PendingCancellationRequest = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Received")]
		Received = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Rejected")]
		Rejected = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RejectedCancellationRequest")]
		RejectedCancellationRequest = 19,
	}
	
	public class OBWritePaymentDetailsResponse1DataPaymentStatusStatusDetail
	{
		
		/// <summary>
		/// User community specific instrument.
		///Usage: This element is used to specify a local instrument, local clearing option and/or further qualify the service or service level.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LocalInstrument { get; set; }
		
		/// <summary>
		/// Status of a transfer, as assigned by the transaction administrator.
		/// Required
		/// Min length: 1
		/// Max length: 128
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(128)]
		public string Status { get; set; }
		
		/// <summary>
		/// Reason Code provided for the status of a transfer.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<OBWritePaymentDetailsResponse1DataPaymentStatusStatusDetailStatusReason> StatusReason { get; set; }
		
		/// <summary>
		/// Reason provided for the status of a transfer.
		/// Min length: 1
		/// Max length: 256
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		public string StatusReasonDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OBWritePaymentDetailsResponse1DataPaymentStatusStatusDetailStatusReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cancelled")]
		Cancelled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PendingFailingSettlement")]
		PendingFailingSettlement = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PendingSettlement")]
		PendingSettlement = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Proprietary")]
		Proprietary = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProprietaryRejection")]
		ProprietaryRejection = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Suspended")]
		Suspended = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unmatched")]
		Unmatched = 6,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create Domestic Payment Consents
		/// CreateDomesticPaymentConsents domestic-payment-consents
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateDomesticPaymentConsentsAsync(OBWriteDomesticConsent4 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domestic-payment-consents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Domestic Payment Consents
		/// GetDomesticPaymentConsentsConsentId domestic-payment-consents/{ConsentId}
		/// </summary>
		/// <param name="ConsentId">ConsentId</param>
		/// <returns>Domestic Payment Consents Read</returns>
		public async Task<OBWriteDomesticConsentResponse5> GetDomesticPaymentConsentsConsentIdAsync(string ConsentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domestic-payment-consents/"+ (ConsentId==null? "" : System.Uri.EscapeDataString(ConsentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteDomesticConsentResponse5>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Domestic Payment Consents Funds Confirmation
		/// GetDomesticPaymentConsentsConsentIdFundsConfirmation domestic-payment-consents/{ConsentId}/funds-confirmation
		/// </summary>
		/// <param name="ConsentId">ConsentId</param>
		/// <returns>Domestic Payment Consents Read</returns>
		public async Task<OBWriteFundsConfirmationResponse1> GetDomesticPaymentConsentsConsentIdFundsConfirmationAsync(string ConsentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domestic-payment-consents/"+ (ConsentId==null? "" : System.Uri.EscapeDataString(ConsentId))+"/funds-confirmation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteFundsConfirmationResponse1>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Domestic Payments
		/// CreateDomesticPayments domestic-payments
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateDomesticPaymentsAsync(OBWriteDomestic2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domestic-payments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Domestic Payments
		/// GetDomesticPaymentsDomesticPaymentId domestic-payments/{DomesticPaymentId}
		/// </summary>
		/// <param name="DomesticPaymentId">DomesticPaymentId</param>
		/// <returns>Domestic Payments Read</returns>
		public async Task<OBWriteDomesticResponse5> GetDomesticPaymentsDomesticPaymentIdAsync(string DomesticPaymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domestic-payments/"+ (DomesticPaymentId==null? "" : System.Uri.EscapeDataString(DomesticPaymentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteDomesticResponse5>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payment Details
		/// GetDomesticPaymentsDomesticPaymentIdPaymentDetails domestic-payments/{DomesticPaymentId}/payment-details
		/// </summary>
		/// <param name="DomesticPaymentId">DomesticPaymentId</param>
		/// <returns>Payment Details Read</returns>
		public async Task<OBWritePaymentDetailsResponse1> GetDomesticPaymentsDomesticPaymentIdPaymentDetailsAsync(string DomesticPaymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domestic-payments/"+ (DomesticPaymentId==null? "" : System.Uri.EscapeDataString(DomesticPaymentId))+"/payment-details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWritePaymentDetailsResponse1>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Domestic Scheduled Payment Consents
		/// CreateDomesticScheduledPaymentConsents domestic-scheduled-payment-consents
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateDomesticScheduledPaymentConsentsAsync(OBWriteDomesticScheduledConsent4 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domestic-scheduled-payment-consents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Domestic Scheduled Payment Consents
		/// GetDomesticScheduledPaymentConsentsConsentId domestic-scheduled-payment-consents/{ConsentId}
		/// </summary>
		/// <param name="ConsentId">ConsentId</param>
		/// <returns>Domestic Scheduled Payment Consents Read</returns>
		public async Task<OBWriteDomesticScheduledConsentResponse5> GetDomesticScheduledPaymentConsentsConsentIdAsync(string ConsentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domestic-scheduled-payment-consents/"+ (ConsentId==null? "" : System.Uri.EscapeDataString(ConsentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteDomesticScheduledConsentResponse5>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Domestic Scheduled Payments
		/// CreateDomesticScheduledPayments domestic-scheduled-payments
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateDomesticScheduledPaymentsAsync(OBWriteDomesticScheduled2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domestic-scheduled-payments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Domestic Scheduled Payments
		/// GetDomesticScheduledPaymentsDomesticScheduledPaymentId domestic-scheduled-payments/{DomesticScheduledPaymentId}
		/// </summary>
		/// <param name="DomesticScheduledPaymentId">DomesticScheduledPaymentId</param>
		/// <returns>Domestic Scheduled Payments Read</returns>
		public async Task<OBWriteDomesticScheduledResponse5> GetDomesticScheduledPaymentsDomesticScheduledPaymentIdAsync(string DomesticScheduledPaymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domestic-scheduled-payments/"+ (DomesticScheduledPaymentId==null? "" : System.Uri.EscapeDataString(DomesticScheduledPaymentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteDomesticScheduledResponse5>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payment Details
		/// GetDomesticScheduledPaymentsDomesticScheduledPaymentIdPaymentDetails domestic-scheduled-payments/{DomesticScheduledPaymentId}/payment-details
		/// </summary>
		/// <param name="DomesticScheduledPaymentId">DomesticScheduledPaymentId</param>
		/// <returns>Payment Details Read</returns>
		public async Task<OBWritePaymentDetailsResponse1> GetDomesticScheduledPaymentsDomesticScheduledPaymentIdPaymentDetailsAsync(string DomesticScheduledPaymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domestic-scheduled-payments/"+ (DomesticScheduledPaymentId==null? "" : System.Uri.EscapeDataString(DomesticScheduledPaymentId))+"/payment-details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWritePaymentDetailsResponse1>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Domestic Standing Order Consents
		/// CreateDomesticStandingOrderConsents domestic-standing-order-consents
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateDomesticStandingOrderConsentsAsync(OBWriteDomesticStandingOrderConsent5 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domestic-standing-order-consents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Domestic Standing Order Consents
		/// GetDomesticStandingOrderConsentsConsentId domestic-standing-order-consents/{ConsentId}
		/// </summary>
		/// <param name="ConsentId">ConsentId</param>
		/// <returns>Domestic Standing Order Consents Read</returns>
		public async Task<OBWriteDomesticStandingOrderConsentResponse6> GetDomesticStandingOrderConsentsConsentIdAsync(string ConsentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domestic-standing-order-consents/"+ (ConsentId==null? "" : System.Uri.EscapeDataString(ConsentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteDomesticStandingOrderConsentResponse6>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Domestic Standing Orders
		/// CreateDomesticStandingOrders domestic-standing-orders
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateDomesticStandingOrdersAsync(OBWriteDomesticStandingOrder3 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domestic-standing-orders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Domestic Standing Orders
		/// GetDomesticStandingOrdersDomesticStandingOrderId domestic-standing-orders/{DomesticStandingOrderId}
		/// </summary>
		/// <param name="DomesticStandingOrderId">DomesticStandingOrderId</param>
		/// <returns>Domestic Standing Orders Read</returns>
		public async Task<OBWriteDomesticStandingOrderResponse6> GetDomesticStandingOrdersDomesticStandingOrderIdAsync(string DomesticStandingOrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domestic-standing-orders/"+ (DomesticStandingOrderId==null? "" : System.Uri.EscapeDataString(DomesticStandingOrderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteDomesticStandingOrderResponse6>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payment Details
		/// GetDomesticStandingOrdersDomesticStandingOrderIdPaymentDetails domestic-standing-orders/{DomesticStandingOrderId}/payment-details
		/// </summary>
		/// <param name="DomesticStandingOrderId">DomesticStandingOrderId</param>
		/// <returns>Payment Details Read</returns>
		public async Task<OBWritePaymentDetailsResponse1> GetDomesticStandingOrdersDomesticStandingOrderIdPaymentDetailsAsync(string DomesticStandingOrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domestic-standing-orders/"+ (DomesticStandingOrderId==null? "" : System.Uri.EscapeDataString(DomesticStandingOrderId))+"/payment-details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWritePaymentDetailsResponse1>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create File Payment Consents
		/// CreateFilePaymentConsents file-payment-consents
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateFilePaymentConsentsAsync(OBWriteFileConsent3 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "file-payment-consents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get File Payment Consents
		/// GetFilePaymentConsentsConsentId file-payment-consents/{ConsentId}
		/// </summary>
		/// <param name="ConsentId">ConsentId</param>
		/// <returns>File Payment Consents Read</returns>
		public async Task<OBWriteFileConsentResponse4> GetFilePaymentConsentsConsentIdAsync(string ConsentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "file-payment-consents/"+ (ConsentId==null? "" : System.Uri.EscapeDataString(ConsentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteFileConsentResponse4>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get File Payment Consents
		/// GetFilePaymentConsentsConsentIdFile file-payment-consents/{ConsentId}/file
		/// </summary>
		/// <param name="ConsentId">ConsentId</param>
		/// <returns>File Payment Consents Read</returns>
		public async Task<File> GetFilePaymentConsentsConsentIdFileAsync(string ConsentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "file-payment-consents/"+ (ConsentId==null? "" : System.Uri.EscapeDataString(ConsentId))+"/file";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<File>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create File Payment Consents
		/// CreateFilePaymentConsentsConsentIdFile file-payment-consents/{ConsentId}/file
		/// </summary>
		/// <param name="ConsentId">ConsentId</param>
		/// <param name="requestBody">Default</param>
		/// <returns>File Payment Consents Created</returns>
		public async Task CreateFilePaymentConsentsConsentIdFileAsync(string ConsentId, File requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "file-payment-consents/"+ (ConsentId==null? "" : System.Uri.EscapeDataString(ConsentId))+"/file";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create File Payments
		/// CreateFilePayments file-payments
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateFilePaymentsAsync(OBWriteFile2 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "file-payments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get File Payments
		/// GetFilePaymentsFilePaymentId file-payments/{FilePaymentId}
		/// </summary>
		/// <param name="FilePaymentId">FilePaymentId</param>
		/// <returns>File Payments Read</returns>
		public async Task<OBWriteFileResponse3> GetFilePaymentsFilePaymentIdAsync(string FilePaymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "file-payments/"+ (FilePaymentId==null? "" : System.Uri.EscapeDataString(FilePaymentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteFileResponse3>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payment Details
		/// GetFilePaymentsFilePaymentIdPaymentDetails file-payments/{FilePaymentId}/payment-details
		/// </summary>
		/// <param name="FilePaymentId">FilePaymentId</param>
		/// <returns>Payment Details Read</returns>
		public async Task<OBWritePaymentDetailsResponse1> GetFilePaymentsFilePaymentIdPaymentDetailsAsync(string FilePaymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "file-payments/"+ (FilePaymentId==null? "" : System.Uri.EscapeDataString(FilePaymentId))+"/payment-details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWritePaymentDetailsResponse1>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get File Payments
		/// GetFilePaymentsFilePaymentIdReportFile file-payments/{FilePaymentId}/report-file
		/// </summary>
		/// <param name="FilePaymentId">FilePaymentId</param>
		/// <returns>File Payments Read</returns>
		public async Task<File> GetFilePaymentsFilePaymentIdReportFileAsync(string FilePaymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "file-payments/"+ (FilePaymentId==null? "" : System.Uri.EscapeDataString(FilePaymentId))+"/report-file";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<File>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create International Payment Consents
		/// CreateInternationalPaymentConsents international-payment-consents
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateInternationalPaymentConsentsAsync(OBWriteInternationalConsent5 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-payment-consents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get International Payment Consents
		/// GetInternationalPaymentConsentsConsentId international-payment-consents/{ConsentId}
		/// </summary>
		/// <param name="ConsentId">ConsentId</param>
		/// <returns>International Payment Consents Read</returns>
		public async Task<OBWriteInternationalConsentResponse6> GetInternationalPaymentConsentsConsentIdAsync(string ConsentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-payment-consents/"+ (ConsentId==null? "" : System.Uri.EscapeDataString(ConsentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteInternationalConsentResponse6>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get International Payment Consents Funds Confirmation
		/// GetInternationalPaymentConsentsConsentIdFundsConfirmation international-payment-consents/{ConsentId}/funds-confirmation
		/// </summary>
		/// <param name="ConsentId">ConsentId</param>
		/// <returns>International Payment Consents Read</returns>
		public async Task<OBWriteFundsConfirmationResponse1> GetInternationalPaymentConsentsConsentIdFundsConfirmationAsync(string ConsentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-payment-consents/"+ (ConsentId==null? "" : System.Uri.EscapeDataString(ConsentId))+"/funds-confirmation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteFundsConfirmationResponse1>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create International Payments
		/// CreateInternationalPayments international-payments
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateInternationalPaymentsAsync(OBWriteInternational3 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-payments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get International Payments
		/// GetInternationalPaymentsInternationalPaymentId international-payments/{InternationalPaymentId}
		/// </summary>
		/// <param name="InternationalPaymentId">InternationalPaymentId</param>
		/// <returns>International Payments Read</returns>
		public async Task<OBWriteInternationalResponse5> GetInternationalPaymentsInternationalPaymentIdAsync(string InternationalPaymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-payments/"+ (InternationalPaymentId==null? "" : System.Uri.EscapeDataString(InternationalPaymentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteInternationalResponse5>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payment Details
		/// GetInternationalPaymentsInternationalPaymentIdPaymentDetails international-payments/{InternationalPaymentId}/payment-details
		/// </summary>
		/// <param name="InternationalPaymentId">InternationalPaymentId</param>
		/// <returns>Payment Details Read</returns>
		public async Task<OBWritePaymentDetailsResponse1> GetInternationalPaymentsInternationalPaymentIdPaymentDetailsAsync(string InternationalPaymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-payments/"+ (InternationalPaymentId==null? "" : System.Uri.EscapeDataString(InternationalPaymentId))+"/payment-details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWritePaymentDetailsResponse1>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create International Scheduled Payment Consents
		/// CreateInternationalScheduledPaymentConsents international-scheduled-payment-consents
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateInternationalScheduledPaymentConsentsAsync(OBWriteInternationalScheduledConsent5 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-scheduled-payment-consents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get International Scheduled Payment Consents
		/// GetInternationalScheduledPaymentConsentsConsentId international-scheduled-payment-consents/{ConsentId}
		/// </summary>
		/// <param name="ConsentId">ConsentId</param>
		/// <returns>International Scheduled Payment Consents Read</returns>
		public async Task<OBWriteInternationalScheduledConsentResponse6> GetInternationalScheduledPaymentConsentsConsentIdAsync(string ConsentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-scheduled-payment-consents/"+ (ConsentId==null? "" : System.Uri.EscapeDataString(ConsentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteInternationalScheduledConsentResponse6>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get International Scheduled Payment Consents Funds Confirmation
		/// GetInternationalScheduledPaymentConsentsConsentIdFundsConfirmation international-scheduled-payment-consents/{ConsentId}/funds-confirmation
		/// </summary>
		/// <param name="ConsentId">ConsentId</param>
		/// <returns>International Scheduled Payment Consents Read</returns>
		public async Task<OBWriteFundsConfirmationResponse1> GetInternationalScheduledPaymentConsentsConsentIdFundsConfirmationAsync(string ConsentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-scheduled-payment-consents/"+ (ConsentId==null? "" : System.Uri.EscapeDataString(ConsentId))+"/funds-confirmation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteFundsConfirmationResponse1>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create International Scheduled Payments
		/// CreateInternationalScheduledPayments international-scheduled-payments
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateInternationalScheduledPaymentsAsync(OBWriteInternationalScheduled3 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-scheduled-payments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get International Scheduled Payments
		/// GetInternationalScheduledPaymentsInternationalScheduledPaymentId international-scheduled-payments/{InternationalScheduledPaymentId}
		/// </summary>
		/// <param name="InternationalScheduledPaymentId">InternationalScheduledPaymentId</param>
		/// <returns>International Scheduled Payments Read</returns>
		public async Task<OBWriteInternationalScheduledResponse6> GetInternationalScheduledPaymentsInternationalScheduledPaymentIdAsync(string InternationalScheduledPaymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-scheduled-payments/"+ (InternationalScheduledPaymentId==null? "" : System.Uri.EscapeDataString(InternationalScheduledPaymentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteInternationalScheduledResponse6>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payment Details
		/// GetInternationalScheduledPaymentsInternationalScheduledPaymentIdPaymentDetails international-scheduled-payments/{InternationalScheduledPaymentId}/payment-details
		/// </summary>
		/// <param name="InternationalScheduledPaymentId">InternationalScheduledPaymentId</param>
		/// <returns>Payment Details Read</returns>
		public async Task<OBWritePaymentDetailsResponse1> GetInternationalScheduledPaymentsInternationalScheduledPaymentIdPaymentDetailsAsync(string InternationalScheduledPaymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-scheduled-payments/"+ (InternationalScheduledPaymentId==null? "" : System.Uri.EscapeDataString(InternationalScheduledPaymentId))+"/payment-details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWritePaymentDetailsResponse1>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create International Standing Order Consents
		/// CreateInternationalStandingOrderConsents international-standing-order-consents
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateInternationalStandingOrderConsentsAsync(OBWriteInternationalStandingOrderConsent6 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-standing-order-consents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get International Standing Order Consents
		/// GetInternationalStandingOrderConsentsConsentId international-standing-order-consents/{ConsentId}
		/// </summary>
		/// <param name="ConsentId">ConsentId</param>
		/// <returns>International Standing Order Consents Read</returns>
		public async Task<OBWriteInternationalStandingOrderConsentResponse7> GetInternationalStandingOrderConsentsConsentIdAsync(string ConsentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-standing-order-consents/"+ (ConsentId==null? "" : System.Uri.EscapeDataString(ConsentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteInternationalStandingOrderConsentResponse7>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create International Standing Orders
		/// CreateInternationalStandingOrders international-standing-orders
		/// </summary>
		/// <param name="requestBody">Default</param>
		public async Task CreateInternationalStandingOrdersAsync(OBWriteInternationalStandingOrder4 requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-standing-orders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get International Standing Orders
		/// GetInternationalStandingOrdersInternationalStandingOrderPaymentId international-standing-orders/{InternationalStandingOrderPaymentId}
		/// </summary>
		/// <param name="InternationalStandingOrderPaymentId">InternationalStandingOrderPaymentId</param>
		/// <returns>International Standing Orders Read</returns>
		public async Task<OBWriteInternationalStandingOrderResponse7> GetInternationalStandingOrdersInternationalStandingOrderPaymentIdAsync(string InternationalStandingOrderPaymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-standing-orders/"+ (InternationalStandingOrderPaymentId==null? "" : System.Uri.EscapeDataString(InternationalStandingOrderPaymentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWriteInternationalStandingOrderResponse7>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Payment Details
		/// GetInternationalStandingOrdersInternationalStandingOrderPaymentIdPaymentDetails international-standing-orders/{InternationalStandingOrderPaymentId}/payment-details
		/// </summary>
		/// <param name="InternationalStandingOrderPaymentId">InternationalStandingOrderPaymentId</param>
		/// <returns>Payment Details Read</returns>
		public async Task<OBWritePaymentDetailsResponse1> GetInternationalStandingOrdersInternationalStandingOrderPaymentIdPaymentDetailsAsync(string InternationalStandingOrderPaymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "international-standing-orders/"+ (InternationalStandingOrderPaymentId==null? "" : System.Uri.EscapeDataString(InternationalStandingOrderPaymentId))+"/payment-details";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OBWritePaymentDetailsResponse1>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
