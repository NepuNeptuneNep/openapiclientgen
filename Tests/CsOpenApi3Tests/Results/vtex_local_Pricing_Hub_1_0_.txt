//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigExternalPriceSourceRequest
	{
		
		/// <summary>
		/// Defines if the external price source is active (`true`) or not (`false`). If not set, the default value will be `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Name of the app that communicates with the external pricing source
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appName")]
		public string AppName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetPricesRequestObject
	{
		
		/// <summary>
		/// Campaign name, represented by the `utm_campaign` value in the URL that led to the order. If there is no value, use `null`
		/// </summary>
		[System.ComponentModel.DefaultValue("summer")]
		[System.Runtime.Serialization.DataMember()]
		public string UtmCampaign { get; set; } = "summer";
		
		/// <summary>
		/// Internal campaign name, represented by the `utmi_cp` value in the URL that led to the order. If there is no value, use `null`
		/// </summary>
		[System.ComponentModel.DefaultValue("sale")]
		[System.Runtime.Serialization.DataMember()]
		public string UtmInternalCampaign { get; set; } = "sale";
		
		/// <summary>
		/// Medium that indicates what type of traffic the customer originated from, represented by the `utm_medium` value in the URL that led to the order. If there is no value, use `null`
		/// </summary>
		[System.ComponentModel.DefaultValue("social")]
		[System.Runtime.Serialization.DataMember()]
		public string UtmMedium { get; set; } = "social";
		
		/// <summary>
		/// Traffic source, indicates where the traffic originated from according to the `utm_source` value in the URL that led to the order. If there is no value, use `null`
		/// </summary>
		[System.ComponentModel.DefaultValue("facebook")]
		[System.Runtime.Serialization.DataMember()]
		public string UtmSource { get; set; } = "facebook";
		
		/// <summary>
		/// The customer's email address. If there is no value, use an empty string
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("customer@email.com")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; } = "customer@email.com";
		
		/// <summary>
		/// The list of items that are to be priced by Pricing Hub
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public GetPricesRequestObjectItems[] GetPricesRequestObjectItems { get; set; }
		
		/// <summary>
		/// Represents Checkout's sales channel
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("1")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="salesChannel")]
		public string SalesChannel { get; set; } = "1";
	}
	
	public class GetPricesRequestObjectItems
	{
		
		/// <summary>
		/// This is the brand ID for the item
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("2000000")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brandId")]
		public string BrandId { get; set; } = "2000000";
		
		/// <summary>
		/// ID of the categories that will be used to compute the price
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoriesIds")]
		public string[] CategoriesIds { get; set; }
		
		/// <summary>
		/// This is the index of the item at Checkout's cart. It has to be unique in the items array
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(0)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="index")]
		public int Index { get; set; } = 0;
		
		/// <summary>
		/// IDs of the price tables that will be used to compute the price. More than one price table might be passed to the array. The final price rule might be more complex than the lowest or the highest price
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceTableIds")]
		public string[] PriceTableIds { get; set; }
		
		/// <summary>
		/// This is the amount of items that will be priced. It is possible to have a volume discount for many repeated items. Hence, the price may not be the quantity of the item multiplied by the unitary price
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(1)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public int Quantity { get; set; } = 1;
		
		/// <summary>
		/// This is the seller ID for the item
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("1")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sellerId")]
		public string SellerId { get; set; } = "1";
		
		/// <summary>
		/// This is the sku id of the item that will be priced
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("13")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="skuId")]
		public string SkuId { get; set; } = "13";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Item1
	{
		
		/// <summary>
		/// The cost price returned by the pricing API that was used by Pricing Hub. It is measured in cents, so 5000 means 50,00 in local currency.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="costPrice")]
		public double CostPrice { get; set; }
		
		/// <summary>
		/// The same index referring to Checkout's cart that was passed to the API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="index")]
		public int Index { get; set; }
		
		/// <summary>
		/// The list price returned by the pricing API that was used by Pricing Hub. It is measured in cents, so 5000 means 50,00 in local currency
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="listPrice")]
		public double ListPrice { get; set; }
		
		/// <summary>
		/// The price returned by the pricing API that was used by Pricing Hub. It is measured in cents, so 5000 means 50,00 in local currency
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="price")]
		public double Price { get; set; }
		
		/// <summary>
		/// The price table that was used to price the item
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceTable")]
		public string PriceTable { get; set; }
		
		/// <summary>
		/// The moment up until the price is valid. After that moment, it will be necessary to call the pricing API again. The format of the string is in RFC3339
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceValidUntil")]
		public string PriceValidUntil { get; set; }
		
		/// <summary>
		/// The same skuId that was passed to the API
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="skuId")]
		public string SkuId { get; set; }
	}
	
	/// <summary>
	/// Each item to be priced by Pricing Hub
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ItemsElement
	{
		
		/// <summary>
		/// This is the brand ID for the item
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("2000000")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brandId")]
		public string BrandId { get; set; } = "2000000";
		
		/// <summary>
		/// ID of the categories that will be used to compute the price
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoriesIds")]
		public string[] CategoriesIds { get; set; }
		
		/// <summary>
		/// This is the index of the item at Checkout's cart. It has to be unique in the items array
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(0)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="index")]
		public int Index { get; set; } = 0;
		
		/// <summary>
		/// IDs of the price tables that will be used to compute the price. More than one price table might be passed to the array. The final price rule might be more complex than the lowest or the highest price
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="priceTableIds")]
		public string[] PriceTableIds { get; set; }
		
		/// <summary>
		/// This is the amount of items that will be priced. It is possible to have a volume discount for many repeated items. Hence, the price may not be the quantity of the item multiplied by the unitary price
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(1)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public int Quantity { get; set; } = 1;
		
		/// <summary>
		/// This is the seller ID for the item
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("1")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sellerId")]
		public string SellerId { get; set; } = "1";
		
		/// <summary>
		/// This is the sku id of the item that will be priced
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue("13")]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="skuId")]
		public string SkuId { get; set; } = "13";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Response2
	{
		
		/// <summary>
		/// List of items and their respective prices applied by Pricing Hub
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Item1[] Items { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get Prices
		/// This route retrieves and applies prices for the items that are passed in the request. Pricing Hub will select the pricing method that will be used for each item and will fetch their respective price from the selected pricing method.
		/// 
		/// >ℹ️ > This feature is in closed beta, available only for selected customers. If you have any questions, contact our [Support](https://support.vtex.com/hc/en-us/requests).
		/// Pricing_Hub_PricesPostByAccountName api/pricing-hub/prices
		/// </summary>
		/// <param name="accountName">Name of the VTEX account. Used as part of the URL</param>
		/// <returns>OK</returns>
		public async Task<Response2> Pricing_Hub_PricesPostByAccountNameAsync(string accountName, GetPricesRequestObject requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pricing-hub/prices?accountName=" + (accountName==null? "" : System.Uri.EscapeDataString(accountName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Response2>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Configure External Price Source
		/// This route facilitates setting up an external price source in Pricing Hub. It also allows you to activate or deactivate that source in a given account.
		/// 
		/// >ℹ️ This feature is in closed beta, available only for selected customers. If you have any questions, contact our [Support](https://support.vtex.com/hc/en-us/requests).
		/// ConfigExternalPriceSource config
		/// </summary>
		/// <param name="an">Name of the VTEX account</param>
		/// <returns>OK</returns>
		public async Task ConfigExternalPriceSourceAsync(string an, ConfigExternalPriceSourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "config?an=" + (an==null? "" : System.Uri.EscapeDataString(an));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
