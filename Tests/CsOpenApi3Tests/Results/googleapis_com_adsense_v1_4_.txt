//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Account
	{
		
		[System.Runtime.Serialization.DataMember(Name="creation_time")]
		public string Creation_time { get; set; }
		
		/// <summary>
		/// Unique identifier of this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Kind of resource this is, in this case adsense#account.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#account")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#account";
		
		/// <summary>
		/// Name of this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Whether this account is premium.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="premium")]
		public System.Nullable<System.Boolean> Premium { get; set; }
		
		/// <summary>
		/// Sub accounts of the this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subAccounts")]
		public Account[] SubAccounts { get; set; }
		
		/// <summary>
		/// AdSense timezone of this account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Accounts
	{
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The accounts returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Account[] Items { get; set; }
		
		/// <summary>
		/// Kind of list this is, in this case adsense#accounts.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#accounts")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#accounts";
		
		/// <summary>
		/// Continuation token used to page through accounts. To retrieve the next page of results, set the next request's "pageToken" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdClient
	{
		
		/// <summary>
		/// Whether this ad client is opted in to ARC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arcOptIn")]
		public System.Nullable<System.Boolean> ArcOptIn { get; set; }
		
		/// <summary>
		/// Unique identifier of this ad client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Kind of resource this is, in this case adsense#adClient.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#adClient")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#adClient";
		
		/// <summary>
		/// This ad client's product code, which corresponds to the PRODUCT_CODE report dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productCode")]
		public string ProductCode { get; set; }
		
		/// <summary>
		/// Whether this ad client supports being reported on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportsReporting")]
		public System.Nullable<System.Boolean> SupportsReporting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdClients
	{
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ad clients returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AdClient[] Items { get; set; }
		
		/// <summary>
		/// Kind of list this is, in this case adsense#adClients.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#adClients")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#adClients";
		
		/// <summary>
		/// Continuation token used to page through ad clients. To retrieve the next page of results, set the next request's "pageToken" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdCode
	{
		
		/// <summary>
		/// The Auto ad code snippet. The ad code snippet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adCode")]
		public string AdCode1 { get; set; }
		
		/// <summary>
		/// The AMP Auto ad code snippet that goes in the body of an AMP page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ampBody")]
		public string AmpBody { get; set; }
		
		/// <summary>
		/// The AMP Auto ad code snippet that goes in the head of an AMP page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ampHead")]
		public string AmpHead { get; set; }
		
		/// <summary>
		/// Kind this is, in this case adsense#adCode.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#adCode")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#adCode";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdStyle
	{
		
		/// <summary>
		/// The colors which are included in the style. These are represented as six hexadecimal characters, similar to HTML color codes, but without the leading hash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public AdStyleColors Colors { get; set; }
		
		/// <summary>
		/// The style of the corners in the ad (deprecated: never populated, ignored).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="corners")]
		public string Corners { get; set; }
		
		/// <summary>
		/// The font which is included in the style.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="font")]
		public AdStyleFont Font { get; set; }
		
		/// <summary>
		/// Kind this is, in this case adsense#adStyle.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#adStyle")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#adStyle";
	}
	
	public class AdStyleColors
	{
		
		/// <summary>
		/// The color of the ad background.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="background")]
		public string Background { get; set; }
		
		/// <summary>
		/// The color of the ad border.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="border")]
		public string Border { get; set; }
		
		/// <summary>
		/// The color of the ad text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The color of the ad title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The color of the ad url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class AdStyleFont
	{
		
		/// <summary>
		/// The family of the font.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family")]
		public string Family { get; set; }
		
		/// <summary>
		/// The size of the font.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdUnit
	{
		
		/// <summary>
		/// Identity code of this ad unit, not necessarily unique across ad clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Settings specific to content ads (AFC) and highend mobile content ads (AFMC - deprecated).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentAdsSettings")]
		public AdUnitContentAdsSettings ContentAdsSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customStyle")]
		public AdStyle CustomStyle { get; set; }
		
		/// <summary>
		/// Settings specific to feed ads (AFF) - deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedAdsSettings")]
		public AdUnitFeedAdsSettings FeedAdsSettings { get; set; }
		
		/// <summary>
		/// Unique identifier of this ad unit. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Kind of resource this is, in this case adsense#adUnit.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#adUnit")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#adUnit";
		
		/// <summary>
		/// Settings specific to WAP mobile content ads (AFMC) - deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileContentAdsSettings")]
		public AdUnitMobileContentAdsSettings MobileContentAdsSettings { get; set; }
		
		/// <summary>
		/// Name of this ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// ID of the saved ad style which holds this ad unit's style information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="savedStyleId")]
		public string SavedStyleId { get; set; }
		
		/// <summary>
		/// Status of this ad unit. Possible values are:
		///NEW: Indicates that the ad unit was created within the last seven days and does not yet have any activity associated with it.
		///
		///ACTIVE: Indicates that there has been activity on this ad unit in the last seven days.
		///
		///INACTIVE: Indicates that there has been no activity on this ad unit in the last seven days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class AdUnitContentAdsSettings
	{
		
		/// <summary>
		/// The backup option to be used in instances where no ad is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupOption")]
		public AdUnitContentAdsSettingsBackupOption BackupOption { get; set; }
		
		/// <summary>
		/// Size of this ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Type of this ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class AdUnitContentAdsSettingsBackupOption
	{
		
		/// <summary>
		/// Color to use when type is set to COLOR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// Type of the backup option. Possible values are BLANK, COLOR and URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// URL to use when type is set to URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class AdUnitFeedAdsSettings
	{
		
		/// <summary>
		/// The position of the ads relative to the feed entries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adPosition")]
		public string AdPosition { get; set; }
		
		/// <summary>
		/// The frequency at which ads should appear in the feed (i.e. every N entries).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public System.Nullable<System.Int32> Frequency { get; set; }
		
		/// <summary>
		/// The minimum length an entry should be in order to have attached ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumWordCount")]
		public System.Nullable<System.Int32> MinimumWordCount { get; set; }
		
		/// <summary>
		/// The type of ads which should appear.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class AdUnitMobileContentAdsSettings
	{
		
		/// <summary>
		/// The markup language to use for this ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markupLanguage")]
		public string MarkupLanguage { get; set; }
		
		/// <summary>
		/// The scripting language to use for this ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptingLanguage")]
		public string ScriptingLanguage { get; set; }
		
		/// <summary>
		/// Size of this ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public string Size { get; set; }
		
		/// <summary>
		/// Type of this ad unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdUnits
	{
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The ad units returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public AdUnit[] Items { get; set; }
		
		/// <summary>
		/// Kind of list this is, in this case adsense#adUnits.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#adUnits")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#adUnits";
		
		/// <summary>
		/// Continuation token used to page through ad units. To retrieve the next page of results, set the next request's "pageToken" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdsenseReportsGenerateResponse
	{
		
		/// <summary>
		/// The averages of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="averages")]
		public string[] Averages { get; set; }
		
		/// <summary>
		/// The requested end date in yyyy-mm-dd format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// The header information of the columns requested in the report. This is a list of headers; one for each dimension in the request, followed by one for each metric in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public AdsenseReportsGenerateResponseHeaders[] AdsenseReportsGenerateResponseHeaders { get; set; }
		
		/// <summary>
		/// Kind this is, in this case adsense#report.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#report")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#report";
		
		/// <summary>
		/// The output rows of the report. Each row is a list of cells; one for each dimension in the request, followed by one for each metric in the request. The dimension cells contain strings, and the metric cells contain numbers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public string[] Rows { get; set; }
		
		/// <summary>
		/// The requested start date in yyyy-mm-dd format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		/// <summary>
		/// The total number of rows matched by the report request. Fewer rows may be returned in the response due to being limited by the row count requested or the report row limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalMatchedRows")]
		public string TotalMatchedRows { get; set; }
		
		/// <summary>
		/// The totals of the report. This is the same length as any other row in the report; cells corresponding to dimension columns are empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totals")]
		public string[] Totals { get; set; }
		
		/// <summary>
		/// Any warnings associated with generation of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string[] Warnings { get; set; }
	}
	
	public class AdsenseReportsGenerateResponseHeaders
	{
		
		/// <summary>
		/// The currency of this column. Only present if the header type is METRIC_CURRENCY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The name of the header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The type of the header; one of DIMENSION, METRIC_TALLY, METRIC_RATIO, or METRIC_CURRENCY.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Alert
	{
		
		/// <summary>
		/// Unique identifier of this alert. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Whether this alert can be dismissed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDismissible")]
		public System.Nullable<System.Boolean> IsDismissible { get; set; }
		
		/// <summary>
		/// Kind of resource this is, in this case adsense#alert.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#alert")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#alert";
		
		/// <summary>
		/// The localized alert message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Severity of this alert. Possible values: INFO, WARNING, SEVERE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public string Severity { get; set; }
		
		/// <summary>
		/// Type of this alert. Possible values: SELF_HOLD, MIGRATED_TO_BILLING3, ADDRESS_PIN_VERIFICATION, PHONE_PIN_VERIFICATION, CORPORATE_ENTITY, GRAYLISTED_PUBLISHER, API_HOLD.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Alerts
	{
		
		/// <summary>
		/// The alerts returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Alert[] Items { get; set; }
		
		/// <summary>
		/// Kind of list this is, in this case adsense#alerts.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#alerts")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#alerts";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomChannel
	{
		
		/// <summary>
		/// Code of this custom channel, not necessarily unique across ad clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Unique identifier of this custom channel. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Kind of resource this is, in this case adsense#customChannel.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#customChannel")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#customChannel";
		
		/// <summary>
		/// Name of this custom channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The targeting information of this custom channel, if activated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingInfo")]
		public CustomChannelTargetingInfo TargetingInfo { get; set; }
	}
	
	public class CustomChannelTargetingInfo
	{
		
		/// <summary>
		/// The name used to describe this channel externally.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adsAppearOn")]
		public string AdsAppearOn { get; set; }
		
		/// <summary>
		/// The external description of the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The locations in which ads appear. (Only valid for content and mobile content ads (deprecated)). Acceptable values for content ads are: TOP_LEFT, TOP_CENTER, TOP_RIGHT, MIDDLE_LEFT, MIDDLE_CENTER, MIDDLE_RIGHT, BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT, MULTIPLE_LOCATIONS. Acceptable values for mobile content ads (deprecated) are: TOP, MIDDLE, BOTTOM, MULTIPLE_LOCATIONS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The language of the sites ads will be displayed on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteLanguage")]
		public string SiteLanguage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomChannels
	{
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The custom channels returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public CustomChannel[] Items { get; set; }
		
		/// <summary>
		/// Kind of list this is, in this case adsense#customChannels.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#customChannels")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#customChannels";
		
		/// <summary>
		/// Continuation token used to page through custom channels. To retrieve the next page of results, set the next request's "pageToken" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ReportingMetadataEntry[] Items { get; set; }
		
		/// <summary>
		/// Kind of list this is, in this case adsense#metadata.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#metadata")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#metadata";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportingMetadataEntry
	{
		
		/// <summary>
		/// For metrics this is a list of dimension IDs which the metric is compatible with, for dimensions it is a list of compatibility groups the dimension belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibleDimensions")]
		public string[] CompatibleDimensions { get; set; }
		
		/// <summary>
		/// The names of the metrics the dimension or metric this reporting metadata entry describes is compatible with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compatibleMetrics")]
		public string[] CompatibleMetrics { get; set; }
		
		/// <summary>
		/// Unique identifier of this reporting metadata entry, corresponding to the name of the appropriate dimension or metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Kind of resource this is, in this case adsense#reportingMetadataEntry.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#reportingMetadataEntry")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#reportingMetadataEntry";
		
		/// <summary>
		/// The names of the dimensions which the dimension or metric this reporting metadata entry describes requires to also be present in order for the report to be valid. Omitting these will not cause an error or warning, but may result in data which cannot be correctly interpreted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredDimensions")]
		public string[] RequiredDimensions { get; set; }
		
		/// <summary>
		/// The names of the metrics which the dimension or metric this reporting metadata entry describes requires to also be present in order for the report to be valid. Omitting these will not cause an error or warning, but may result in data which cannot be correctly interpreted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredMetrics")]
		public string[] RequiredMetrics { get; set; }
		
		/// <summary>
		/// The codes of the projects supported by the dimension or metric this reporting metadata entry describes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedProducts")]
		public string[] SupportedProducts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Payment
	{
		
		/// <summary>
		/// Unique identifier of this Payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Kind of resource this is, in this case adsense#payment.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#payment")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#payment";
		
		/// <summary>
		/// The amount to be paid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentAmount")]
		public string PaymentAmount { get; set; }
		
		/// <summary>
		/// The currency code for the amount to be paid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentAmountCurrencyCode")]
		public string PaymentAmountCurrencyCode { get; set; }
		
		/// <summary>
		/// The date this payment was/will be credited to the user, or none if the payment threshold has not been met.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentDate")]
		public string PaymentDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Payments
	{
		
		/// <summary>
		/// The list of Payments for the account. One or both of a) the account's most recent payment; and b) the account's upcoming payment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public Payment[] Items { get; set; }
		
		/// <summary>
		/// Kind of list this is, in this case adsense#payments.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#payments")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#payments";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SavedAdStyle
	{
		
		[System.Runtime.Serialization.DataMember(Name="adStyle")]
		public AdStyle AdStyle { get; set; }
		
		/// <summary>
		/// Unique identifier of this saved ad style. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Kind of resource this is, in this case adsense#savedAdStyle.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#savedAdStyle")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#savedAdStyle";
		
		/// <summary>
		/// The user selected name of this SavedAdStyle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SavedAdStyles
	{
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The saved ad styles returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SavedAdStyle[] Items { get; set; }
		
		/// <summary>
		/// Kind of list this is, in this case adsense#savedAdStyles.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#savedAdStyles")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#savedAdStyles";
		
		/// <summary>
		/// Continuation token used to page through ad units. To retrieve the next page of results, set the next request's "pageToken" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SavedReport
	{
		
		/// <summary>
		/// Unique identifier of this saved report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Kind of resource this is, in this case adsense#savedReport.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#savedReport")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#savedReport";
		
		/// <summary>
		/// This saved report's name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SavedReports
	{
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The saved reports returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public SavedReport[] Items { get; set; }
		
		/// <summary>
		/// Kind of list this is, in this case adsense#savedReports.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#savedReports")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#savedReports";
		
		/// <summary>
		/// Continuation token used to page through saved reports. To retrieve the next page of results, set the next request's "pageToken" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UrlChannel
	{
		
		/// <summary>
		/// Unique identifier of this URL channel. This should be considered an opaque identifier; it is not safe to rely on it being in any particular format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Kind of resource this is, in this case adsense#urlChannel.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#urlChannel")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#urlChannel";
		
		/// <summary>
		/// URL Pattern of this URL channel. Does not include "http://" or "https://". Example: www.example.com/home
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlPattern")]
		public string UrlPattern { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UrlChannels
	{
		
		/// <summary>
		/// ETag of this response for caching purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// The URL channels returned in this list response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public UrlChannel[] Items { get; set; }
		
		/// <summary>
		/// Kind of list this is, in this case adsense#urlChannels.
		/// </summary>
		[System.ComponentModel.DefaultValue("adsense#urlChannels")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "adsense#urlChannels";
		
		/// <summary>
		/// Continuation token used to page through URL channels. To retrieve the next page of results, set the next request's "pageToken" value to this.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List all accounts available to this AdSense account.
		/// Adsense_accounts_list accounts
		/// </summary>
		/// <param name="maxResults">The maximum number of accounts to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through accounts. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<Accounts> Adsense_accounts_listAsync(int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts?maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Accounts>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about the selected AdSense account.
		/// Adsense_accounts_get accounts/{accountId}
		/// </summary>
		/// <param name="accountId">Account to get information about.</param>
		/// <param name="tree">Whether the tree of sub accounts should be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<Account> Adsense_accounts_getAsync(string accountId, bool tree, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&tree="+tree;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Account>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all ad clients in the specified account.
		/// Adsense_accounts_adclients_list accounts/{accountId}/adclients
		/// </summary>
		/// <param name="accountId">Account for which to list ad clients.</param>
		/// <param name="maxResults">The maximum number of ad clients to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<AdClients> Adsense_accounts_adclients_listAsync(string accountId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdClients>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Auto ad code for a given ad client.
		/// Adsense_accounts_adclients_getAdCode accounts/{accountId}/adclients/{adClientId}/adcode
		/// </summary>
		/// <param name="accountId">Account which contains the ad client.</param>
		/// <param name="adClientId">Ad client to get the code for.</param>
		/// <param name="tagPartner">Tag partner to include in the ad code snippet.</param>
		/// <returns>Successful response</returns>
		public async Task<AdCode> Adsense_accounts_adclients_getAdCodeAsync(string accountId, string adClientId, string tagPartner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/adcode&tagPartner=" + (tagPartner==null? "" : System.Uri.EscapeDataString(tagPartner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdCode>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all ad units in the specified ad client for the specified account.
		/// Adsense_accounts_adunits_list accounts/{accountId}/adclients/{adClientId}/adunits
		/// </summary>
		/// <param name="accountId">Account to which the ad client belongs.</param>
		/// <param name="adClientId">Ad client for which to list ad units.</param>
		/// <param name="includeInactive">Whether to include inactive ad units. Default: true.</param>
		/// <param name="maxResults">The maximum number of ad units to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<AdUnits> Adsense_accounts_adunits_listAsync(string accountId, string adClientId, bool includeInactive, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/adunits&includeInactive="+includeInactive+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdUnits>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified ad unit in the specified ad client for the specified account.
		/// Adsense_accounts_adunits_get accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}
		/// </summary>
		/// <param name="accountId">Account to which the ad client belongs.</param>
		/// <param name="adClientId">Ad client for which to get the ad unit.</param>
		/// <param name="adUnitId">Ad unit to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<AdUnit> Adsense_accounts_adunits_getAsync(string accountId, string adClientId, string adUnitId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/adunits/"+ (adUnitId==null? "" : System.Uri.EscapeDataString(adUnitId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdUnit>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get ad code for the specified ad unit.
		/// Adsense_accounts_adunits_getAdCode accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/adcode
		/// </summary>
		/// <param name="accountId">Account which contains the ad client.</param>
		/// <param name="adClientId">Ad client with contains the ad unit.</param>
		/// <param name="adUnitId">Ad unit to get the code for.</param>
		/// <returns>Successful response</returns>
		public async Task<AdCode> Adsense_accounts_adunits_getAdCodeAsync(string accountId, string adClientId, string adUnitId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/adunits/"+ (adUnitId==null? "" : System.Uri.EscapeDataString(adUnitId))+"/adcode";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdCode>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all custom channels which the specified ad unit belongs to.
		/// Adsense_accounts_adunits_customchannels_list accounts/{accountId}/adclients/{adClientId}/adunits/{adUnitId}/customchannels
		/// </summary>
		/// <param name="accountId">Account to which the ad client belongs.</param>
		/// <param name="adClientId">Ad client which contains the ad unit.</param>
		/// <param name="adUnitId">Ad unit for which to list custom channels.</param>
		/// <param name="maxResults">The maximum number of custom channels to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomChannels> Adsense_accounts_adunits_customchannels_listAsync(string accountId, string adClientId, string adUnitId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/adunits/"+ (adUnitId==null? "" : System.Uri.EscapeDataString(adUnitId))+"/customchannels&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomChannels>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all custom channels in the specified ad client for the specified account.
		/// Adsense_accounts_customchannels_list accounts/{accountId}/adclients/{adClientId}/customchannels
		/// </summary>
		/// <param name="accountId">Account to which the ad client belongs.</param>
		/// <param name="adClientId">Ad client for which to list custom channels.</param>
		/// <param name="maxResults">The maximum number of custom channels to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomChannels> Adsense_accounts_customchannels_listAsync(string accountId, string adClientId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/customchannels&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomChannels>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the specified custom channel from the specified ad client for the specified account.
		/// Adsense_accounts_customchannels_get accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}
		/// </summary>
		/// <param name="accountId">Account to which the ad client belongs.</param>
		/// <param name="adClientId">Ad client which contains the custom channel.</param>
		/// <param name="customChannelId">Custom channel to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomChannel> Adsense_accounts_customchannels_getAsync(string accountId, string adClientId, string customChannelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/customchannels/"+ (customChannelId==null? "" : System.Uri.EscapeDataString(customChannelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomChannel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all ad units in the specified custom channel.
		/// Adsense_accounts_customchannels_adunits_list accounts/{accountId}/adclients/{adClientId}/customchannels/{customChannelId}/adunits
		/// </summary>
		/// <param name="accountId">Account to which the ad client belongs.</param>
		/// <param name="adClientId">Ad client which contains the custom channel.</param>
		/// <param name="customChannelId">Custom channel for which to list ad units.</param>
		/// <param name="includeInactive">Whether to include inactive ad units. Default: true.</param>
		/// <param name="maxResults">The maximum number of ad units to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<AdUnits> Adsense_accounts_customchannels_adunits_listAsync(string accountId, string adClientId, string customChannelId, bool includeInactive, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/customchannels/"+ (customChannelId==null? "" : System.Uri.EscapeDataString(customChannelId))+"/adunits&includeInactive="+includeInactive+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdUnits>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all URL channels in the specified ad client for the specified account.
		/// Adsense_accounts_urlchannels_list accounts/{accountId}/adclients/{adClientId}/urlchannels
		/// </summary>
		/// <param name="accountId">Account to which the ad client belongs.</param>
		/// <param name="adClientId">Ad client for which to list URL channels.</param>
		/// <param name="maxResults">The maximum number of URL channels to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through URL channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<UrlChannels> Adsense_accounts_urlchannels_listAsync(string accountId, string adClientId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/urlchannels&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UrlChannels>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the alerts for the specified AdSense account.
		/// Adsense_accounts_alerts_list accounts/{accountId}/alerts
		/// </summary>
		/// <param name="accountId">Account for which to retrieve the alerts.</param>
		/// <param name="locale">The locale to use for translating alert messages. The account locale will be used if this is not supplied. The AdSense default (English) will be used if the supplied locale is invalid or unsupported.</param>
		/// <returns>Successful response</returns>
		public async Task<Alerts> Adsense_accounts_alerts_listAsync(string accountId, string locale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/alerts&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Alerts>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Dismiss (delete) the specified alert from the specified publisher AdSense account.
		/// Adsense_accounts_alerts_delete accounts/{accountId}/alerts/{alertId}
		/// </summary>
		/// <param name="accountId">Account which contains the ad unit.</param>
		/// <param name="alertId">Alert to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Adsense_accounts_alerts_deleteAsync(string accountId, string alertId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/alerts/"+ (alertId==null? "" : System.Uri.EscapeDataString(alertId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the payments for the specified AdSense account.
		/// Adsense_accounts_payments_list accounts/{accountId}/payments
		/// </summary>
		/// <param name="accountId">Account for which to retrieve the payments.</param>
		/// <returns>Successful response</returns>
		public async Task<Payments> Adsense_accounts_payments_listAsync(string accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/payments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Payments>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter.
		/// Adsense_accounts_reports_generate accounts/{accountId}/reports
		/// </summary>
		/// <param name="accountId">Account upon which to report.</param>
		/// <param name="startDate">Start of the date range to report on in "YYYY-MM-DD" format, inclusive.</param>
		/// <param name="endDate">End of the date range to report on in "YYYY-MM-DD" format, inclusive.</param>
		/// <param name="currency">Optional currency to use when reporting on monetary metrics. Defaults to the account's currency if not set.</param>
		/// <param name="dimension">Dimensions to base the report on.</param>
		/// <param name="filter">Filters to be run on the report.</param>
		/// <param name="locale">Optional locale to use for translating report output to a local language. Defaults to "en_US" if not specified.</param>
		/// <param name="maxResults">The maximum number of rows of report data to return.
		/// Minimum: 0
		/// Maximum: 50000
		// </param>
		/// <param name="metric">Numeric columns to include in the report.</param>
		/// <param name="sort">The name of a dimension or metric to sort the resulting report on, optionally prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted ascending.</param>
		/// <param name="startIndex">Index of the first row of report data to return.
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <param name="useTimezoneReporting">Whether the report should be generated in the AdSense account's local timezone. If false default PST/PDT timezone will be used.</param>
		/// <returns>Successful response</returns>
		public async Task<AdsenseReportsGenerateResponse> Adsense_accounts_reports_generateAsync(string accountId, string startDate, string endDate, string currency, string[] dimension, string[] filter, string locale, int maxResults, string[] metric, string[] sort, int startIndex, bool useTimezoneReporting, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/reports&startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&"+string.Join("&", dimension.Select(z => $"dimension={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", filter.Select(z => $"filter={System.Uri.EscapeDataString(z.ToString())}"))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&maxResults="+maxResults+"&"+string.Join("&", metric.Select(z => $"metric={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", sort.Select(z => $"sort={System.Uri.EscapeDataString(z.ToString())}"))+"&startIndex="+startIndex+"&useTimezoneReporting="+useTimezoneReporting;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdsenseReportsGenerateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all saved reports in the specified AdSense account.
		/// Adsense_accounts_reports_saved_list accounts/{accountId}/reports/saved
		/// </summary>
		/// <param name="accountId">Account to which the saved reports belong.</param>
		/// <param name="maxResults">The maximum number of saved reports to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 100
		// </param>
		/// <param name="pageToken">A continuation token, used to page through saved reports. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<SavedReports> Adsense_accounts_reports_saved_listAsync(string accountId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/reports/saved&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SavedReports>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate an AdSense report based on the saved report ID sent in the query parameters.
		/// Adsense_accounts_reports_saved_generate accounts/{accountId}/reports/{savedReportId}
		/// </summary>
		/// <param name="accountId">Account to which the saved reports belong.</param>
		/// <param name="savedReportId">The saved report to retrieve.</param>
		/// <param name="locale">Optional locale to use for translating report output to a local language. Defaults to "en_US" if not specified.</param>
		/// <param name="maxResults">The maximum number of rows of report data to return.
		/// Minimum: 0
		/// Maximum: 50000
		// </param>
		/// <param name="startIndex">Index of the first row of report data to return.
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <returns>Successful response</returns>
		public async Task<AdsenseReportsGenerateResponse> Adsense_accounts_reports_saved_generateAsync(string accountId, string savedReportId, string locale, int maxResults, int startIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/reports/"+ (savedReportId==null? "" : System.Uri.EscapeDataString(savedReportId))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&maxResults="+maxResults+"&startIndex="+startIndex;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdsenseReportsGenerateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all saved ad styles in the specified account.
		/// Adsense_accounts_savedadstyles_list accounts/{accountId}/savedadstyles
		/// </summary>
		/// <param name="accountId">Account for which to list saved ad styles.</param>
		/// <param name="maxResults">The maximum number of saved ad styles to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through saved ad styles. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<SavedAdStyles> Adsense_accounts_savedadstyles_listAsync(string accountId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/savedadstyles&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SavedAdStyles>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List a specific saved ad style for the specified account.
		/// Adsense_accounts_savedadstyles_get accounts/{accountId}/savedadstyles/{savedAdStyleId}
		/// </summary>
		/// <param name="accountId">Account for which to get the saved ad style.</param>
		/// <param name="savedAdStyleId">Saved ad style to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<SavedAdStyle> Adsense_accounts_savedadstyles_getAsync(string accountId, string savedAdStyleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+ (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"/savedadstyles/"+ (savedAdStyleId==null? "" : System.Uri.EscapeDataString(savedAdStyleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SavedAdStyle>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all ad clients in this AdSense account.
		/// Adsense_adclients_list adclients
		/// </summary>
		/// <param name="maxResults">The maximum number of ad clients to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through ad clients. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<AdClients> Adsense_adclients_listAsync(int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients?maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdClients>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all ad units in the specified ad client for this AdSense account.
		/// Adsense_adunits_list adclients/{adClientId}/adunits
		/// </summary>
		/// <param name="adClientId">Ad client for which to list ad units.</param>
		/// <param name="includeInactive">Whether to include inactive ad units. Default: true.</param>
		/// <param name="maxResults">The maximum number of ad units to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<AdUnits> Adsense_adunits_listAsync(string adClientId, bool includeInactive, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/adunits&includeInactive="+includeInactive+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdUnits>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified ad unit in the specified ad client.
		/// Adsense_adunits_get adclients/{adClientId}/adunits/{adUnitId}
		/// </summary>
		/// <param name="adClientId">Ad client for which to get the ad unit.</param>
		/// <param name="adUnitId">Ad unit to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<AdUnit> Adsense_adunits_getAsync(string adClientId, string adUnitId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/adunits/"+ (adUnitId==null? "" : System.Uri.EscapeDataString(adUnitId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdUnit>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get ad code for the specified ad unit.
		/// Adsense_adunits_getAdCode adclients/{adClientId}/adunits/{adUnitId}/adcode
		/// </summary>
		/// <param name="adClientId">Ad client with contains the ad unit.</param>
		/// <param name="adUnitId">Ad unit to get the code for.</param>
		/// <returns>Successful response</returns>
		public async Task<AdCode> Adsense_adunits_getAdCodeAsync(string adClientId, string adUnitId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/adunits/"+ (adUnitId==null? "" : System.Uri.EscapeDataString(adUnitId))+"/adcode";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdCode>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all custom channels which the specified ad unit belongs to.
		/// Adsense_adunits_customchannels_list adclients/{adClientId}/adunits/{adUnitId}/customchannels
		/// </summary>
		/// <param name="adClientId">Ad client which contains the ad unit.</param>
		/// <param name="adUnitId">Ad unit for which to list custom channels.</param>
		/// <param name="maxResults">The maximum number of custom channels to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomChannels> Adsense_adunits_customchannels_listAsync(string adClientId, string adUnitId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/adunits/"+ (adUnitId==null? "" : System.Uri.EscapeDataString(adUnitId))+"/customchannels&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomChannels>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all custom channels in the specified ad client for this AdSense account.
		/// Adsense_customchannels_list adclients/{adClientId}/customchannels
		/// </summary>
		/// <param name="adClientId">Ad client for which to list custom channels.</param>
		/// <param name="maxResults">The maximum number of custom channels to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through custom channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomChannels> Adsense_customchannels_listAsync(string adClientId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/customchannels&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomChannels>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the specified custom channel from the specified ad client.
		/// Adsense_customchannels_get adclients/{adClientId}/customchannels/{customChannelId}
		/// </summary>
		/// <param name="adClientId">Ad client which contains the custom channel.</param>
		/// <param name="customChannelId">Custom channel to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomChannel> Adsense_customchannels_getAsync(string adClientId, string customChannelId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/customchannels/"+ (customChannelId==null? "" : System.Uri.EscapeDataString(customChannelId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomChannel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all ad units in the specified custom channel.
		/// Adsense_customchannels_adunits_list adclients/{adClientId}/customchannels/{customChannelId}/adunits
		/// </summary>
		/// <param name="adClientId">Ad client which contains the custom channel.</param>
		/// <param name="customChannelId">Custom channel for which to list ad units.</param>
		/// <param name="includeInactive">Whether to include inactive ad units. Default: true.</param>
		/// <param name="maxResults">The maximum number of ad units to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through ad units. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<AdUnits> Adsense_customchannels_adunits_listAsync(string adClientId, string customChannelId, bool includeInactive, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/customchannels/"+ (customChannelId==null? "" : System.Uri.EscapeDataString(customChannelId))+"/adunits&includeInactive="+includeInactive+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdUnits>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all URL channels in the specified ad client for this AdSense account.
		/// Adsense_urlchannels_list adclients/{adClientId}/urlchannels
		/// </summary>
		/// <param name="adClientId">Ad client for which to list URL channels.</param>
		/// <param name="maxResults">The maximum number of URL channels to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through URL channels. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<UrlChannels> Adsense_urlchannels_listAsync(string adClientId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "adclients/"+ (adClientId==null? "" : System.Uri.EscapeDataString(adClientId))+"/urlchannels&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UrlChannels>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the alerts for this AdSense account.
		/// Adsense_alerts_list alerts
		/// </summary>
		/// <param name="locale">The locale to use for translating alert messages. The account locale will be used if this is not supplied. The AdSense default (English) will be used if the supplied locale is invalid or unsupported.</param>
		/// <returns>Successful response</returns>
		public async Task<Alerts> Adsense_alerts_listAsync(string locale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts?locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Alerts>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Dismiss (delete) the specified alert from the publisher's AdSense account.
		/// Adsense_alerts_delete alerts/{alertId}
		/// </summary>
		/// <param name="alertId">Alert to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Adsense_alerts_deleteAsync(string alertId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/"+ (alertId==null? "" : System.Uri.EscapeDataString(alertId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the metadata for the dimensions available to this AdSense account.
		/// Adsense_metadata_dimensions_list metadata/dimensions
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Metadata> Adsense_metadata_dimensions_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metadata/dimensions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Metadata>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the metadata for the metrics available to this AdSense account.
		/// Adsense_metadata_metrics_list metadata/metrics
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Metadata> Adsense_metadata_metrics_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "metadata/metrics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Metadata>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the payments for this AdSense account.
		/// Adsense_payments_list payments
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Payments> Adsense_payments_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "payments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Payments>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate an AdSense report based on the report request sent in the query parameters. Returns the result as JSON; to retrieve output in CSV format specify "alt=csv" as a query parameter.
		/// Adsense_reports_generate reports
		/// </summary>
		/// <param name="startDate">Start of the date range to report on in "YYYY-MM-DD" format, inclusive.</param>
		/// <param name="endDate">End of the date range to report on in "YYYY-MM-DD" format, inclusive.</param>
		/// <param name="accountId">Accounts upon which to report.</param>
		/// <param name="currency">Optional currency to use when reporting on monetary metrics. Defaults to the account's currency if not set.</param>
		/// <param name="dimension">Dimensions to base the report on.</param>
		/// <param name="filter">Filters to be run on the report.</param>
		/// <param name="locale">Optional locale to use for translating report output to a local language. Defaults to "en_US" if not specified.</param>
		/// <param name="maxResults">The maximum number of rows of report data to return.
		/// Minimum: 0
		/// Maximum: 50000
		// </param>
		/// <param name="metric">Numeric columns to include in the report.</param>
		/// <param name="sort">The name of a dimension or metric to sort the resulting report on, optionally prefixed with "+" to sort ascending or "-" to sort descending. If no prefix is specified, the column is sorted ascending.</param>
		/// <param name="startIndex">Index of the first row of report data to return.
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <param name="useTimezoneReporting">Whether the report should be generated in the AdSense account's local timezone. If false default PST/PDT timezone will be used.</param>
		/// <returns>Successful response</returns>
		public async Task<AdsenseReportsGenerateResponse> Adsense_reports_generateAsync(string startDate, string endDate, string[] accountId, string currency, string[] dimension, string[] filter, string locale, int maxResults, string[] metric, string[] sort, int startIndex, bool useTimezoneReporting, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports?startDate=" + (startDate==null? "" : System.Uri.EscapeDataString(startDate))+"&endDate=" + (endDate==null? "" : System.Uri.EscapeDataString(endDate))+"&"+string.Join("&", accountId.Select(z => $"accountId={System.Uri.EscapeDataString(z.ToString())}"))+"&currency=" + (currency==null? "" : System.Uri.EscapeDataString(currency))+"&"+string.Join("&", dimension.Select(z => $"dimension={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", filter.Select(z => $"filter={System.Uri.EscapeDataString(z.ToString())}"))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&maxResults="+maxResults+"&"+string.Join("&", metric.Select(z => $"metric={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", sort.Select(z => $"sort={System.Uri.EscapeDataString(z.ToString())}"))+"&startIndex="+startIndex+"&useTimezoneReporting="+useTimezoneReporting;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdsenseReportsGenerateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all saved reports in this AdSense account.
		/// Adsense_reports_saved_list reports/saved
		/// </summary>
		/// <param name="maxResults">The maximum number of saved reports to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 100
		// </param>
		/// <param name="pageToken">A continuation token, used to page through saved reports. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<SavedReports> Adsense_reports_saved_listAsync(int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/saved?maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SavedReports>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate an AdSense report based on the saved report ID sent in the query parameters.
		/// Adsense_reports_saved_generate reports/{savedReportId}
		/// </summary>
		/// <param name="savedReportId">The saved report to retrieve.</param>
		/// <param name="locale">Optional locale to use for translating report output to a local language. Defaults to "en_US" if not specified.</param>
		/// <param name="maxResults">The maximum number of rows of report data to return.
		/// Minimum: 0
		/// Maximum: 50000
		// </param>
		/// <param name="startIndex">Index of the first row of report data to return.
		/// Minimum: 0
		/// Maximum: 5000
		// </param>
		/// <returns>Successful response</returns>
		public async Task<AdsenseReportsGenerateResponse> Adsense_reports_saved_generateAsync(string savedReportId, string locale, int maxResults, int startIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "reports/"+ (savedReportId==null? "" : System.Uri.EscapeDataString(savedReportId))+"&locale=" + (locale==null? "" : System.Uri.EscapeDataString(locale))+"&maxResults="+maxResults+"&startIndex="+startIndex;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AdsenseReportsGenerateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all saved ad styles in the user's account.
		/// Adsense_savedadstyles_list savedadstyles
		/// </summary>
		/// <param name="maxResults">The maximum number of saved ad styles to include in the response, used for paging.
		/// Minimum: 0
		/// Maximum: 10000
		// </param>
		/// <param name="pageToken">A continuation token, used to page through saved ad styles. To retrieve the next page, set this parameter to the value of "nextPageToken" from the previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<SavedAdStyles> Adsense_savedadstyles_listAsync(int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "savedadstyles?maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SavedAdStyles>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific saved ad style from the user's account.
		/// Adsense_savedadstyles_get savedadstyles/{savedAdStyleId}
		/// </summary>
		/// <param name="savedAdStyleId">Saved ad style to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<SavedAdStyle> Adsense_savedadstyles_getAsync(string savedAdStyleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "savedadstyles/"+ (savedAdStyleId==null? "" : System.Uri.EscapeDataString(savedAdStyleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SavedAdStyle>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
