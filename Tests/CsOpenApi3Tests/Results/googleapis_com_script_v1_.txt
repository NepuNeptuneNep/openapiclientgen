//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The Content resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Content
	{
		
		/// <summary>
		/// The list of script project files. One of the files is a script manifest; it must be named "appsscript", must have type of JSON, and include the manifest configurations for the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="files")]
		public File[] Files { get; set; }
		
		/// <summary>
		/// The script project's Drive ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptId")]
		public string ScriptId { get; set; }
	}
	
	/// <summary>
	/// An individual file within a script project. A file is a third-party source code created by one or more developers. It can be a server-side JS code, HTML, or a configuration file. Each script project can contain multiple files.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class File
	{
		
		/// <summary>
		/// Creation date timestamp. This read-only field is only visible to users who have WRITER permission for the script project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// A set of functions. No duplicates are permitted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functionSet")]
		public GoogleAppsScriptTypeFunctionSet FunctionSet { get; set; }
		
		/// <summary>
		/// A simple user profile resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifyUser")]
		public GoogleAppsScriptTypeUser LastModifyUser { get; set; }
		
		/// <summary>
		/// The name of the file. The file extension is not part of the file name, which can be identified from the type field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The file content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The type of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<FileType> Type { get; set; }
		
		/// <summary>
		/// Last modified date timestamp. This read-only field is only visible to users who have WRITER permission for the script project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// A set of functions. No duplicates are permitted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsScriptTypeFunctionSet
	{
		
		/// <summary>
		/// A list of functions composing the set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public GoogleAppsScriptTypeFunction[] Values { get; set; }
	}
	
	/// <summary>
	/// Represents a function in a script project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsScriptTypeFunction
	{
		
		/// <summary>
		/// The function name in the script project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ordered list of parameter names of the function in the script project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string[] Parameters { get; set; }
	}
	
	/// <summary>
	/// A simple user profile resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsScriptTypeUser
	{
		
		/// <summary>
		/// The user's domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// The user's identifying email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The user's display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The user's photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photoUrl")]
		public string PhotoUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FileType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENUM_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVER_JS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 3,
	}
	
	/// <summary>
	/// Request to create a script project. Request to create a script project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateProjectRequest
	{
		
		/// <summary>
		/// The Drive ID of a parent file that the created script project is bound to. This is usually the ID of a Google Doc, Google Sheet, Google Form, or Google Slides file. If not set, a standalone script project is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public string ParentId { get; set; }
		
		/// <summary>
		/// The title for the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Representation of a single script deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Deployment
	{
		
		/// <summary>
		/// Metadata the defines how a deployment is configured.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentConfig")]
		public DeploymentConfig DeploymentConfig { get; set; }
		
		/// <summary>
		/// The deployment ID for this deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentId")]
		public string DeploymentId { get; set; }
		
		/// <summary>
		/// The deployment's entry points.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entryPoints")]
		public EntryPoint[] EntryPoints { get; set; }
		
		/// <summary>
		/// Last modified date time stamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Metadata the defines how a deployment is configured.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeploymentConfig
	{
		
		/// <summary>
		/// The description for this deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The manifest file name for this deployment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manifestFileName")]
		public string ManifestFileName { get; set; }
		
		/// <summary>
		/// The script project's Drive ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptId")]
		public string ScriptId { get; set; }
		
		/// <summary>
		/// The version number on which this deployment is based.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionNumber")]
		public System.Nullable<System.Int32> VersionNumber { get; set; }
	}
	
	/// <summary>
	/// A configuration that defines how a deployment is accessed externally.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntryPoint
	{
		
		/// <summary>
		/// An add-on entry point.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addOn")]
		public GoogleAppsScriptTypeAddOnEntryPoint AddOn { get; set; }
		
		/// <summary>
		/// The type of the entry point.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entryPointType")]
		public System.Nullable<EntryPointEntryPointType> EntryPointType { get; set; }
		
		/// <summary>
		/// An API executable entry point.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionApi")]
		public GoogleAppsScriptTypeExecutionApiEntryPoint ExecutionApi { get; set; }
		
		/// <summary>
		/// A web application entry point.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webApp")]
		public GoogleAppsScriptTypeWebAppEntryPoint WebApp { get; set; }
	}
	
	/// <summary>
	/// An add-on entry point.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsScriptTypeAddOnEntryPoint
	{
		
		/// <summary>
		/// The add-on's required list of supported container types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addOnType")]
		public System.Nullable<GoogleAppsScriptTypeAddOnEntryPointAddOnType> AddOnType { get; set; }
		
		/// <summary>
		/// The add-on's optional description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The add-on's optional help URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="helpUrl")]
		public string HelpUrl { get; set; }
		
		/// <summary>
		/// The add-on's required post install tip URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postInstallTipUrl")]
		public string PostInstallTipUrl { get; set; }
		
		/// <summary>
		/// The add-on's optional report issue URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportIssueUrl")]
		public string ReportIssueUrl { get; set; }
		
		/// <summary>
		/// The add-on's required title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsScriptTypeAddOnEntryPointAddOnType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_ADDON_TYPE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GMAIL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_STUDIO = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EntryPointEntryPointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTRY_POINT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_APP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXECUTION_API = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD_ON = 3,
	}
	
	/// <summary>
	/// An API executable entry point.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsScriptTypeExecutionApiEntryPoint
	{
		
		/// <summary>
		/// API executable entry point configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entryPointConfig")]
		public GoogleAppsScriptTypeExecutionApiConfig EntryPointConfig { get; set; }
	}
	
	/// <summary>
	/// API executable entry point configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsScriptTypeExecutionApiConfig
	{
		
		/// <summary>
		/// Who has permission to run the API executable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access")]
		public System.Nullable<GoogleAppsScriptTypeExecutionApiConfigAccess> Access { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsScriptTypeExecutionApiConfigAccess
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_ACCESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYSELF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOMAIN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANYONE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANYONE_ANONYMOUS = 4,
	}
	
	/// <summary>
	/// A web application entry point.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsScriptTypeWebAppEntryPoint
	{
		
		/// <summary>
		/// Web app entry point configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entryPointConfig")]
		public GoogleAppsScriptTypeWebAppConfig EntryPointConfig { get; set; }
		
		/// <summary>
		/// The URL for the web application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Web app entry point configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsScriptTypeWebAppConfig
	{
		
		/// <summary>
		/// Who has permission to run the web app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="access")]
		public GoogleAppsScriptTypeExecutionApiConfigAccess Access { get; set; }
		
		/// <summary>
		/// Who to execute the web app as.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executeAs")]
		public System.Nullable<GoogleAppsScriptTypeWebAppConfigExecuteAs> ExecuteAs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsScriptTypeWebAppConfigExecuteAs
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_EXECUTE_AS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_ACCESSING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_DEPLOYING = 2,
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// The response for executing or debugging a function in an Apps Script project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecuteStreamResponse
	{
		
		/// <summary>
		/// The result of an execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ScriptExecutionResult Result { get; set; }
	}
	
	/// <summary>
	/// The result of an execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScriptExecutionResult
	{
		
		/// <summary>
		/// `Value` represents a dynamically typed value which is the outcome of an executed script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="returnValue")]
		public Value ReturnValue { get; set; }
	}
	
	/// <summary>
	/// `Value` represents a dynamically typed value which is the outcome of an executed script.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Value
	{
		
		/// <summary>
		/// Represents a boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boolValue")]
		public System.Nullable<System.Boolean> BoolValue { get; set; }
		
		/// <summary>
		/// Represents raw byte values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bytesValue")]
		public string BytesValue { get; set; }
		
		/// <summary>
		/// Represents a date in ms since the epoch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateValue")]
		public string DateValue { get; set; }
		
		/// <summary>
		/// `ListValue` is a wrapper around a repeated field of values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listValue")]
		public ListValue ListValue { get; set; }
		
		/// <summary>
		/// Represents a null value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nullValue")]
		public System.Nullable<ValueNullValue> NullValue { get; set; }
		
		/// <summary>
		/// Represents a double value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberValue")]
		public System.Nullable<System.Double> NumberValue { get; set; }
		
		/// <summary>
		/// Represents a structured proto value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protoValue")]
		public System.Collections.Generic.Dictionary<string, object> ProtoValue { get; set; }
		
		/// <summary>
		/// Represents a string value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
		
		/// <summary>
		/// `Struct` represents a structured data value, consisting of fields which map to dynamically typed values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structValue")]
		public Struct StructValue { get; set; }
	}
	
	/// <summary>
	/// `ListValue` is a wrapper around a repeated field of values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListValue
	{
		
		/// <summary>
		/// Repeated field of dynamically typed values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public Value[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ValueNullValue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NULL_VALUE = 0,
	}
	
	/// <summary>
	/// `Struct` represents a structured data value, consisting of fields which map to dynamically typed values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Struct
	{
		
		/// <summary>
		/// Unordered map of dynamically typed values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public System.Collections.Generic.Dictionary<string, Value> Fields { get; set; }
	}
	
	/// <summary>
	/// An object that provides information about the nature of an error resulting from an attempted execution of a script function using the Apps Script API. If a run call succeeds but the script function (or Apps Script itself) throws an exception, the response body's error field contains a Status object. The `Status` object's `details` field contains an array with a single one of these `ExecutionError` objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecutionError
	{
		
		/// <summary>
		/// The error message thrown by Apps Script, usually localized into the user's language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// The error type, for example `TypeError` or `ReferenceError`. If the error type is unavailable, this field is not included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorType")]
		public string ErrorType { get; set; }
		
		/// <summary>
		/// An array of objects that provide a stack trace through the script to show where the execution failed, with the deepest call first.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptStackTraceElements")]
		public ScriptStackTraceElement[] ScriptStackTraceElements { get; set; }
	}
	
	/// <summary>
	/// A stack trace through the script that shows where the execution failed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScriptStackTraceElement
	{
		
		/// <summary>
		/// The name of the function that failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="function")]
		public string Function { get; set; }
		
		/// <summary>
		/// The line number where the script failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNumber")]
		public System.Nullable<System.Int32> LineNumber { get; set; }
	}
	
	/// <summary>
	/// A request to run the function in a script. The script is identified by the specified `script_id`. Executing a function on a script returns results based on the implementation of the script.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecutionRequest
	{
		
		/// <summary>
		/// If `true` and the user is an owner of the script, the script runs at the most recently saved version rather than the version deployed for use with the Apps Script API. Optional; default is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devMode")]
		public System.Nullable<System.Boolean> DevMode { get; set; }
		
		/// <summary>
		/// The name of the function to execute in the given script. The name does not include parentheses or parameters. It can reference a function in an included library such as `Library.libFunction1`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="function")]
		public string Function { get; set; }
		
		/// <summary>
		/// The parameters to be passed to the function being executed. The object type for each parameter should match the expected type in Apps Script. Parameters cannot be Apps Script-specific object types (such as a `Document` or a `Calendar`); they can only be primitive types such as `string`, `number`, `array`, `object`, or `boolean`. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string[] Parameters { get; set; }
		
		/// <summary>
		/// *Deprecated*. For use with Android add-ons only. An ID that represents the user's current session in the Android app for Google Docs or Sheets, included as extra data in the [Intent](https://developer.android.com/guide/components/intents-filters.html) that launches the add-on. When an Android add-on is run with a session state, it gains the privileges of a [bound](https://developers.google.com/apps-script/guides/bound) script—that is, it can access information like the user's current cursor position (in Docs) or selected cell (in Sheets). To retrieve the state, call `Intent.getStringExtra("com.google.android.apps.docs.addons.SessionState")`. Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionState")]
		public string SessionState { get; set; }
	}
	
	/// <summary>
	/// An object that provides the return value of a function executed using the Apps Script API. If the script function returns successfully, the response body's response field contains this `ExecutionResponse` object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecutionResponse
	{
		
		/// <summary>
		/// The return value of the script function. The type matches the object type returned in Apps Script. Functions called using the Apps Script API cannot return Apps Script-specific objects (such as a `Document` or a `Calendar`); they can only return primitive types such as a `string`, `number`, `array`, `object`, or `boolean`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public object Result { get; set; }
	}
	
	/// <summary>
	/// Representation of a single script process execution that was started from the script editor, a trigger, an application, or using the Apps Script API. This is distinct from the `Operation` resource, which only represents executions started via the Apps Script API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAppsScriptTypeProcess
	{
		
		/// <summary>
		/// Duration the execution spent executing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// Name of the function the started the execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functionName")]
		public string FunctionName { get; set; }
		
		/// <summary>
		/// The executions status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processStatus")]
		public System.Nullable<GoogleAppsScriptTypeProcessProcessStatus> ProcessStatus { get; set; }
		
		/// <summary>
		/// The executions type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processType")]
		public System.Nullable<GoogleAppsScriptTypeProcessProcessType> ProcessType { get; set; }
		
		/// <summary>
		/// Name of the script being executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		/// <summary>
		/// Which version of maestro to use to execute the script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runtimeVersion")]
		public System.Nullable<GoogleAppsScriptTypeProcessRuntimeVersion> RuntimeVersion { get; set; }
		
		/// <summary>
		/// Time the execution started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// The executing users access level to the script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userAccessLevel")]
		public System.Nullable<GoogleAppsScriptTypeProcessUserAccessLevel> UserAccessLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsScriptTypeProcessProcessStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESS_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAUSED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELAYED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXECUTION_DISABLED = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsScriptTypeProcessProcessType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROCESS_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD_ON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXECUTION_API = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_DRIVEN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRIGGER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEBAPP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EDITOR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIMPLE_TRIGGER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MENU = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BATCH_TASK = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsScriptTypeProcessRuntimeVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNTIME_VERSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED_ES5 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		V8 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAppsScriptTypeProcessUserAccessLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_ACCESS_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRITE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OWNER = 4,
	}
	
	/// <summary>
	/// Response with the list of deployments for the specified Apps Script project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDeploymentsResponse
	{
		
		/// <summary>
		/// The list of deployments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deployments")]
		public Deployment[] Deployments { get; set; }
		
		/// <summary>
		/// The token that can be used in the next call to get the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response with the list of Process resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListScriptProcessesResponse
	{
		
		/// <summary>
		/// Token for the next page of results. If empty, there are no more pages remaining.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of processes matching request parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processes")]
		public GoogleAppsScriptTypeProcess[] Processes { get; set; }
	}
	
	/// <summary>
	/// Response with the list of Process resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUserProcessesResponse
	{
		
		/// <summary>
		/// Token for the next page of results. If empty, there are no more pages remaining.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// List of processes matching request parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="processes")]
		public GoogleAppsScriptTypeProcess[] Processes { get; set; }
	}
	
	/// <summary>
	/// Response with the list of the versions for the specified script project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListVersionsResponse
	{
		
		/// <summary>
		/// The token use to fetch the next page of records. if not exist in the response, that means no more versions to list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of versions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versions")]
		public Version[] Versions { get; set; }
	}
	
	/// <summary>
	/// A resource representing a script project version. A version is a "snapshot" of a script project and is similar to a read-only branched release. When creating deployments, the version to use must be specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Version
	{
		
		/// <summary>
		/// When the version was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The description for this version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The script project's Drive ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptId")]
		public string ScriptId { get; set; }
		
		/// <summary>
		/// The incremental ID that is created by Apps Script when a version is created. This is system assigned number and is immutable once created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionNumber")]
		public System.Nullable<System.Int32> VersionNumber { get; set; }
	}
	
	/// <summary>
	/// Resource containing usage stats for a given script, based on the supplied filter and mask present in the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metrics
	{
		
		/// <summary>
		/// Number of active users.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeUsers")]
		public MetricsValue[] ActiveUsers { get; set; }
		
		/// <summary>
		/// Number of failed executions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failedExecutions")]
		public MetricsValue[] FailedExecutions { get; set; }
		
		/// <summary>
		/// Number of total executions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalExecutions")]
		public MetricsValue[] TotalExecutions { get; set; }
	}
	
	/// <summary>
	/// Metrics value that holds number of executions counted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MetricsValue
	{
		
		/// <summary>
		/// Required field indicating the end time of the interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Required field indicating the start time of the interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Indicates the number of executions counted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A representation of an execution of an Apps Script function started with run. The execution response does not arrive until the function finishes executing. The maximum execution runtime is listed in the [Apps Script quotas guide](/apps-script/guides/services/quotas#current_limitations). After execution has started, it can have one of four outcomes: - If the script function returns successfully, the response field contains an ExecutionResponse object with the function's return value in the object's `result` field. - If the script function (or Apps Script itself) throws an exception, the error field contains a Status object. The `Status` object's `details` field contains an array with a single ExecutionError object that provides information about the nature of the error. - If the execution has not yet completed, the done field is `false` and the neither the `response` nor `error` fields are present. - If the `run` call itself fails (for example, because of a malformed request or an authorization error), the method returns an HTTP response code in the 4XX range with a different format for the response body. Client libraries automatically convert a 4XX response into an exception class. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// This field indicates whether the script execution has completed. A completed execution has a populated `response` field containing the ExecutionResponse from function that was executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// If a `run` call succeeds but the script function (or Apps Script itself) throws an exception, the response body's error field contains this `Status` object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// If the script function returns successfully, this field contains an ExecutionResponse object with the function's return value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// If a `run` call succeeds but the script function (or Apps Script itself) throws an exception, the response body's error field contains this `Status` object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code. For this API, this value either: - 10, indicating a `SCRIPT_TIMEOUT` error, - 3, indicating an `INVALID_ARGUMENT` error, or - 1, indicating a `CANCELLED` execution. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// An array that contains a single ExecutionError object that provides information about the nature of the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which is in English. Any user-facing error message is localized and sent in the details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The script project resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Project
	{
		
		/// <summary>
		/// When the script was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// A simple user profile resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator")]
		public GoogleAppsScriptTypeUser Creator { get; set; }
		
		/// <summary>
		/// A simple user profile resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifyUser")]
		public GoogleAppsScriptTypeUser LastModifyUser { get; set; }
		
		/// <summary>
		/// The parent's Drive ID that the script will be attached to. This is usually the ID of a Google Document or Google Sheet. This filed is optional, and if not set, a stand-alone script will be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public string ParentId { get; set; }
		
		/// <summary>
		/// The script project's Drive ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scriptId")]
		public string ScriptId { get; set; }
		
		/// <summary>
		/// The title for the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// When the script was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Request with deployment information to update an existing deployment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDeploymentRequest
	{
		
		/// <summary>
		/// Metadata the defines how a deployment is configured.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentConfig")]
		public DeploymentConfig DeploymentConfig { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List information about processes made by or on behalf of a user, such as process type and current status.
		/// Script_processes_list v1/processes
		/// </summary>
		/// <param name="pageSize">The maximum number of returned processes per page of results. Defaults to 50.</param>
		/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.</param>
		/// <param name="userProcessFilter_deploymentId">Optional field used to limit returned processes to those originating from projects with a specific deployment ID.</param>
		/// <param name="userProcessFilter_endTime">Optional field used to limit returned processes to those that completed on or before the given timestamp.</param>
		/// <param name="userProcessFilter_functionName">Optional field used to limit returned processes to those originating from a script function with the given function name.</param>
		/// <param name="userProcessFilter_projectName">Optional field used to limit returned processes to those originating from projects with project names containing a specific string.</param>
		/// <param name="userProcessFilter_scriptId">Optional field used to limit returned processes to those originating from projects with a specific script ID.</param>
		/// <param name="userProcessFilter_startTime">Optional field used to limit returned processes to those that were started on or after the given timestamp.</param>
		/// <param name="userProcessFilter_statuses">Optional field used to limit returned processes to those having one of the specified process statuses.</param>
		/// <param name="userProcessFilter_types">Optional field used to limit returned processes to those having one of the specified process types.</param>
		/// <param name="userProcessFilter_userAccessLevels">Optional field used to limit returned processes to those having one of the specified user access levels.</param>
		/// <returns>Successful response</returns>
		public async Task<ListUserProcessesResponse> Script_processes_listAsync(int pageSize, string pageToken, string userProcessFilter_deploymentId, string userProcessFilter_endTime, string userProcessFilter_functionName, string userProcessFilter_projectName, string userProcessFilter_scriptId, string userProcessFilter_startTime, GoogleAppsScriptTypeProcessProcessStatus[] userProcessFilter_statuses, GoogleAppsScriptTypeProcessProcessType[] userProcessFilter_types, GoogleAppsScriptTypeProcessUserAccessLevel[] userProcessFilter_userAccessLevels, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/processes?pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&userProcessFilter.deploymentId=" + (userProcessFilter_deploymentId==null? "" : System.Uri.EscapeDataString(userProcessFilter_deploymentId))+"&userProcessFilter.endTime=" + (userProcessFilter_endTime==null? "" : System.Uri.EscapeDataString(userProcessFilter_endTime))+"&userProcessFilter.functionName=" + (userProcessFilter_functionName==null? "" : System.Uri.EscapeDataString(userProcessFilter_functionName))+"&userProcessFilter.projectName=" + (userProcessFilter_projectName==null? "" : System.Uri.EscapeDataString(userProcessFilter_projectName))+"&userProcessFilter.scriptId=" + (userProcessFilter_scriptId==null? "" : System.Uri.EscapeDataString(userProcessFilter_scriptId))+"&userProcessFilter.startTime=" + (userProcessFilter_startTime==null? "" : System.Uri.EscapeDataString(userProcessFilter_startTime))+"&"+string.Join("&", userProcessFilter_statuses.Select(z => $"userProcessFilter.statuses={z}"))+"&"+string.Join("&", userProcessFilter_types.Select(z => $"userProcessFilter.types={z}"))+"&"+string.Join("&", userProcessFilter_userAccessLevels.Select(z => $"userProcessFilter.userAccessLevels={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListUserProcessesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List information about a script's executed processes, such as process type and current status.
		/// Script_processes_listScriptProcesses v1/processes:listScriptProcesses
		/// </summary>
		/// <param name="pageSize">The maximum number of returned processes per page of results. Defaults to 50.</param>
		/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.</param>
		/// <param name="scriptId">The script ID of the project whose processes are listed.</param>
		/// <param name="scriptProcessFilter_deploymentId">Optional field used to limit returned processes to those originating from projects with a specific deployment ID.</param>
		/// <param name="scriptProcessFilter_endTime">Optional field used to limit returned processes to those that completed on or before the given timestamp.</param>
		/// <param name="scriptProcessFilter_functionName">Optional field used to limit returned processes to those originating from a script function with the given function name.</param>
		/// <param name="scriptProcessFilter_startTime">Optional field used to limit returned processes to those that were started on or after the given timestamp.</param>
		/// <param name="scriptProcessFilter_statuses">Optional field used to limit returned processes to those having one of the specified process statuses.</param>
		/// <param name="scriptProcessFilter_types">Optional field used to limit returned processes to those having one of the specified process types.</param>
		/// <param name="scriptProcessFilter_userAccessLevels">Optional field used to limit returned processes to those having one of the specified user access levels.</param>
		/// <returns>Successful response</returns>
		public async Task<ListScriptProcessesResponse> Script_processes_listScriptProcessesAsync(int pageSize, string pageToken, string scriptId, string scriptProcessFilter_deploymentId, string scriptProcessFilter_endTime, string scriptProcessFilter_functionName, string scriptProcessFilter_startTime, GoogleAppsScriptTypeProcessProcessStatus[] scriptProcessFilter_statuses, GoogleAppsScriptTypeProcessProcessType[] scriptProcessFilter_types, GoogleAppsScriptTypeProcessUserAccessLevel[] scriptProcessFilter_userAccessLevels, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/processes:listScriptProcesses?pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&scriptId=" + (scriptId==null? "" : System.Uri.EscapeDataString(scriptId))+"&scriptProcessFilter.deploymentId=" + (scriptProcessFilter_deploymentId==null? "" : System.Uri.EscapeDataString(scriptProcessFilter_deploymentId))+"&scriptProcessFilter.endTime=" + (scriptProcessFilter_endTime==null? "" : System.Uri.EscapeDataString(scriptProcessFilter_endTime))+"&scriptProcessFilter.functionName=" + (scriptProcessFilter_functionName==null? "" : System.Uri.EscapeDataString(scriptProcessFilter_functionName))+"&scriptProcessFilter.startTime=" + (scriptProcessFilter_startTime==null? "" : System.Uri.EscapeDataString(scriptProcessFilter_startTime))+"&"+string.Join("&", scriptProcessFilter_statuses.Select(z => $"scriptProcessFilter.statuses={z}"))+"&"+string.Join("&", scriptProcessFilter_types.Select(z => $"scriptProcessFilter.types={z}"))+"&"+string.Join("&", scriptProcessFilter_userAccessLevels.Select(z => $"scriptProcessFilter.userAccessLevels={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListScriptProcessesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new, empty script project with no script files and a base manifest file.
		/// Script_projects_create v1/projects
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Project> Script_projects_createAsync(CreateProjectRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Project>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a script project's metadata.
		/// Script_projects_get v1/projects/{scriptId}
		/// </summary>
		/// <param name="scriptId">The script project's Drive ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Project> Script_projects_getAsync(string scriptId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (scriptId==null? "" : System.Uri.EscapeDataString(scriptId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Project>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the content of the script project, including the code source and metadata for each script file.
		/// Script_projects_getContent v1/projects/{scriptId}/content
		/// </summary>
		/// <param name="scriptId">The script project's Drive ID.</param>
		/// <param name="versionNumber">The version number of the project to retrieve. If not provided, the project's HEAD version is returned.</param>
		/// <returns>Successful response</returns>
		public async Task<Content> Script_projects_getContentAsync(string scriptId, int versionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (scriptId==null? "" : System.Uri.EscapeDataString(scriptId))+"/content&versionNumber="+versionNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Content>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the content of the specified script project. This content is stored as the HEAD version, and is used when the script is executed as a trigger, in the script editor, in add-on preview mode, or as a web app or Apps Script API in development mode. This clears all the existing files in the project.
		/// Script_projects_updateContent v1/projects/{scriptId}/content
		/// </summary>
		/// <param name="scriptId">The script project's Drive ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Content> Script_projects_updateContentAsync(string scriptId, Content requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (scriptId==null? "" : System.Uri.EscapeDataString(scriptId))+"/content";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Content>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the deployments of an Apps Script project.
		/// Script_projects_deployments_list v1/projects/{scriptId}/deployments
		/// </summary>
		/// <param name="scriptId">The script project's Drive ID.</param>
		/// <param name="pageSize">The maximum number of deployments on each returned page. Defaults to 50.</param>
		/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDeploymentsResponse> Script_projects_deployments_listAsync(string scriptId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (scriptId==null? "" : System.Uri.EscapeDataString(scriptId))+"/deployments&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListDeploymentsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a deployment of an Apps Script project.
		/// Script_projects_deployments_create v1/projects/{scriptId}/deployments
		/// </summary>
		/// <param name="scriptId">The script project's Drive ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Deployment> Script_projects_deployments_createAsync(string scriptId, DeploymentConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (scriptId==null? "" : System.Uri.EscapeDataString(scriptId))+"/deployments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Deployment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a deployment of an Apps Script project.
		/// Script_projects_deployments_delete v1/projects/{scriptId}/deployments/{deploymentId}
		/// </summary>
		/// <param name="scriptId">The script project's Drive ID.</param>
		/// <param name="deploymentId">The deployment ID to be undeployed.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Script_projects_deployments_deleteAsync(string scriptId, string deploymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (scriptId==null? "" : System.Uri.EscapeDataString(scriptId))+"/deployments/"+ (deploymentId==null? "" : System.Uri.EscapeDataString(deploymentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a deployment of an Apps Script project.
		/// Script_projects_deployments_get v1/projects/{scriptId}/deployments/{deploymentId}
		/// </summary>
		/// <param name="scriptId">The script project's Drive ID.</param>
		/// <param name="deploymentId">The deployment ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Deployment> Script_projects_deployments_getAsync(string scriptId, string deploymentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (scriptId==null? "" : System.Uri.EscapeDataString(scriptId))+"/deployments/"+ (deploymentId==null? "" : System.Uri.EscapeDataString(deploymentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Deployment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a deployment of an Apps Script project.
		/// Script_projects_deployments_update v1/projects/{scriptId}/deployments/{deploymentId}
		/// </summary>
		/// <param name="scriptId">The script project's Drive ID.</param>
		/// <param name="deploymentId">The deployment ID for this deployment.</param>
		/// <returns>Successful response</returns>
		public async Task<Deployment> Script_projects_deployments_updateAsync(string scriptId, string deploymentId, UpdateDeploymentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (scriptId==null? "" : System.Uri.EscapeDataString(scriptId))+"/deployments/"+ (deploymentId==null? "" : System.Uri.EscapeDataString(deploymentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Deployment>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get metrics data for scripts, such as number of executions and active users.
		/// Script_projects_getMetrics v1/projects/{scriptId}/metrics
		/// </summary>
		/// <param name="scriptId">Required field indicating the script to get metrics for.</param>
		/// <param name="metricsFilter_deploymentId">Optional field indicating a specific deployment to retrieve metrics from.</param>
		/// <param name="metricsGranularity">Required field indicating what granularity of metrics are returned.</param>
		/// <returns>Successful response</returns>
		public async Task<Metrics> Script_projects_getMetricsAsync(string scriptId, string metricsFilter_deploymentId, Script_projects_getMetricsMetricsGranularity metricsGranularity, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (scriptId==null? "" : System.Uri.EscapeDataString(scriptId))+"/metrics&metricsFilter.deploymentId=" + (metricsFilter_deploymentId==null? "" : System.Uri.EscapeDataString(metricsFilter_deploymentId))+"&metricsGranularity=" + metricsGranularity;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Metrics>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List the versions of a script project.
		/// Script_projects_versions_list v1/projects/{scriptId}/versions
		/// </summary>
		/// <param name="scriptId">The script project's Drive ID.</param>
		/// <param name="pageSize">The maximum number of versions on each returned page. Defaults to 50.</param>
		/// <param name="pageToken">The token for continuing a previous list request on the next page. This should be set to the value of `nextPageToken` from a previous response.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVersionsResponse> Script_projects_versions_listAsync(string scriptId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (scriptId==null? "" : System.Uri.EscapeDataString(scriptId))+"/versions&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListVersionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new immutable version using the current code, with a unique version number.
		/// Script_projects_versions_create v1/projects/{scriptId}/versions
		/// </summary>
		/// <param name="scriptId">The script project's Drive ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Version> Script_projects_versions_createAsync(string scriptId, Version requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (scriptId==null? "" : System.Uri.EscapeDataString(scriptId))+"/versions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Version>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a version of a script project.
		/// Script_projects_versions_get v1/projects/{scriptId}/versions/{versionNumber}
		/// </summary>
		/// <param name="scriptId">The script project's Drive ID.</param>
		/// <param name="versionNumber">The version number.</param>
		/// <returns>Successful response</returns>
		public async Task<Version> Script_projects_versions_getAsync(string scriptId, int versionNumber, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (scriptId==null? "" : System.Uri.EscapeDataString(scriptId))+"/versions/"+versionNumber;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Version>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs a function in an Apps Script project. The script project must be deployed for use with the Apps Script API and the calling application must share the same Cloud Platform project. This method requires authorization with an OAuth 2.0 token that includes at least one of the scopes listed in the [Authorization](#authorization-scopes) section; script projects that do not require authorization cannot be executed through this API. To find the correct scopes to include in the authentication token, open the script project **Overview** page and scroll down to "Project OAuth Scopes." The error `403, PERMISSION_DENIED: The caller does not have permission` indicates that the Cloud Platform project used to authorize the request is not the same as the one used by the script.
		/// Script_scripts_run v1/scripts/{scriptId}:run
		/// </summary>
		/// <param name="scriptId">The script ID of the script to be executed. Find the script ID on the **Project settings** page under "IDs." As multiple executable APIs can be deployed in new IDE for same script, this field should be populated with DeploymentID generated while deploying in new IDE instead of script ID.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Script_scripts_runAsync(string scriptId, ExecutionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/scripts/"+ (scriptId==null? "" : System.Uri.EscapeDataString(scriptId))+":run";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Script_projects_getMetricsMetricsGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED_GRANULARITY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
