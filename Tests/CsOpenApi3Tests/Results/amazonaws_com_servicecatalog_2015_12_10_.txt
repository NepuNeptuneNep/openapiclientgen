//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceptPortfolioShareOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceptPortfolioShareInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PortfolioShareType PortfolioShareType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PortfolioShareType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IMPORTED")]
		IMPORTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_SERVICECATALOG")]
		AWS_SERVICECATALOG = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS_ORGANIZATIONS")]
		AWS_ORGANIZATIONS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidParametersException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateBudgetWithResourceOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateBudgetWithResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BudgetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DuplicateResourceException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociatePrincipalWithPortfolioOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociatePrincipalWithPortfolioInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalARN { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PrincipalType PrincipalType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PrincipalType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IAM")]
		IAM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IAM_PATTERN")]
		IAM_PATTERN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateProductWithPortfolioOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateProductWithPortfolioInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourcePortfolioId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateServiceActionWithProvisioningArtifactOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateServiceActionWithProvisioningArtifactInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceActionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateTagOptionWithResourceOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateTagOptionWithResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TagOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagOptionNotMigratedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidStateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchAssociateServiceActionWithProvisioningArtifactOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailedServiceActionAssociation[] FailedServiceActionAssociations { get; set; }
	}
	
	/// <summary>
	/// An object containing information about the error, along with identifying information about the self-service action and its associations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailedServiceActionAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceActionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceActionAssociationErrorCode ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServiceActionAssociationErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DUPLICATE_RESOURCE")]
		DUPLICATE_RESOURCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INTERNAL_FAILURE")]
		INTERNAL_FAILURE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LIMIT_EXCEEDED")]
		LIMIT_EXCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESOURCE_NOT_FOUND")]
		RESOURCE_NOT_FOUND = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THROTTLING")]
		THROTTLING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_PARAMETER")]
		INVALID_PARAMETER = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchAssociateServiceActionWithProvisioningArtifactInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceActionAssociation[] ServiceActionAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
	}
	
	/// <summary>
	/// A self-service action association consisting of the Action ID, the Product ID, and the Provisioning Artifact ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceActionAssociation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceActionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDisassociateServiceActionFromProvisioningArtifactOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FailedServiceActionAssociation[] FailedServiceActionAssociations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchDisassociateServiceActionFromProvisioningArtifactInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceActionAssociation[] ServiceActionAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CopyProductOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CopyProductToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CopyProductInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceProductArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetProductName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceProvisioningArtifactPropertiesMap[] SourceProvisioningArtifactIdentifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CopyOption[] CopyOptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceProvisioningArtifactPropertiesMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CopyOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CopyTags")]
		CopyTags = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConstraintOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConstraintDetail ConstraintDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConstraintParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
	}
	
	/// <summary>
	/// Information about a constraint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConstraintDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConstraintId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConstraintInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Parameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePortfolioOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PortfolioDetail PortfolioDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Information about a portfolio.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
	}
	
	/// <summary>
	/// Information about a tag. A tag is a key-value pair. Tags are propagated to the resources created when provisioning a product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePortfolioInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePortfolioShareOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioShareToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePortfolioShareInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationNode OrganizationNode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShareTagOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SharePrincipals { get; set; }
	}
	
	/// <summary>
	/// Information about the organization node.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationNode
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationNodeType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OrganizationNodeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORGANIZATION")]
		ORGANIZATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORGANIZATIONAL_UNIT")]
		ORGANIZATIONAL_UNIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCOUNT")]
		ACCOUNT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationNotSupportedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProductOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProductViewDetail ProductViewDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactDetail ProvisioningArtifactDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Information about a product view.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductViewDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProductViewSummary ProductViewSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceConnectionDetail SourceConnection { get; set; }
	}
	
	/// <summary>
	/// Summary information about a product view.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductViewSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShortDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Distributor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasDefaultPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOUD_FORMATION_TEMPLATE")]
		CLOUD_FORMATION_TEMPLATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MARKETPLACE")]
		MARKETPLACE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TERRAFORM_OPEN_SOURCE")]
		TERRAFORM_OPEN_SOURCE = 2,
	}
	
	/// <summary>
	/// Provides details about the configured <code>SourceConnection</code>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceConnectionDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SourceType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceConnectionParameters ConnectionParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LastSync LastSync { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CODESTAR")]
		CODESTAR = 0,
	}
	
	/// <summary>
	/// Provides connection details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceConnectionParameters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CodeStarParameters CodeStar { get; set; }
	}
	
	/// <summary>
	/// The subtype containing details about the Codestar connection <code>Type</code>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CodeStarParameters
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Repository { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Branch { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ArtifactPath { get; set; }
	}
	
	/// <summary>
	/// <p>Provides details about the product's connection sync and contains the following sub-fields. </p> <ul> <li> <p> <code>LastSyncTime</code> </p> </li> <li> <p> <code>LastSyncStatus</code> </p> </li> <li> <p> <code>LastSyncStatusMessage</code> </p> </li> <li> <p> <code>LastSuccessfulSyncTime</code> </p> </li> <li> <p> <code>LastSuccessfulSyncProvisioningArtifactID</code> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LastSync
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastSyncTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LastSyncStatus LastSyncStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastSyncStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastSuccessfulSyncTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastSuccessfulSyncProvisioningArtifactId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LastSyncStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 1,
	}
	
	/// <summary>
	/// Information about a provisioning artifact (also known as a version) for a product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningArtifactDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactGuidance Guidance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceRevision { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProvisioningArtifactType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOUD_FORMATION_TEMPLATE")]
		CLOUD_FORMATION_TEMPLATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MARKETPLACE_AMI")]
		MARKETPLACE_AMI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MARKETPLACE_CAR")]
		MARKETPLACE_CAR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TERRAFORM_OPEN_SOURCE")]
		TERRAFORM_OPEN_SOURCE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProvisioningArtifactGuidance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEFAULT")]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPRECATED")]
		DEPRECATED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProductInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Distributor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportUrl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProductType ProductType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactProperties ProvisioningArtifactParameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceConnection SourceConnection { get; set; }
	}
	
	/// <summary>
	/// Information about a provisioning artifact (also known as a version) for a product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningArtifactProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactInfo Info { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DisableTemplateValidation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningArtifactInfo
	{
	}
	
	/// <summary>
	/// A top level <code>ProductViewDetail</code> response containing details about the product’s connection. Service Catalog returns this field for the <code>CreateProduct</code>, <code>UpdateProduct</code>, <code>DescribeProductAsAdmin</code>, and <code>SearchProductAsAdmin</code> APIs. This response contains the same fields as the <code>ConnectionParameters</code> request, with the addition of the <code>LastSync</code> response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceConnection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SourceType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SourceConnectionParameters ConnectionParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProvisionedProductPlanOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PlanName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProvisionedProductPlanInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PlanName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedProductPlanType PlanType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NotificationArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateProvisioningParameter[] ProvisioningParameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProvisionedProductPlanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CLOUDFORMATION")]
		CLOUDFORMATION = 0,
	}
	
	/// <summary>
	/// The parameter key-value pair used to update a provisioned product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProvisioningParameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UsePreviousValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProvisioningArtifactOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactDetail ProvisioningArtifactDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactInfo Info { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateProvisioningArtifactInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactProperties Parameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateServiceActionOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceActionDetail ServiceActionDetail { get; set; }
	}
	
	/// <summary>
	/// An object containing detailed information about the self-service action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceActionDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceActionSummary ServiceActionSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceActionDefinitionMap Definition { get; set; }
	}
	
	/// <summary>
	/// Detailed information about the self-service action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceActionSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceActionDefinitionType DefinitionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServiceActionDefinitionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSM_AUTOMATION")]
		SSM_AUTOMATION = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceActionDefinitionMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateServiceActionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceActionDefinitionType DefinitionType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceActionDefinitionMap Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTagOptionOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagOptionDetail TagOptionDetail { get; set; }
	}
	
	/// <summary>
	/// Information about a TagOption.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagOptionDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Owner { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTagOptionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConstraintOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConstraintInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePortfolioOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePortfolioInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceInUseException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePortfolioShareOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioShareToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePortfolioShareInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationNode OrganizationNode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProductOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProductInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProvisionedProductPlanOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProvisionedProductPlanInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IgnoreErrors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProvisioningArtifactOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteProvisioningArtifactInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteServiceActionOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteServiceActionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTagOptionOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteTagOptionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConstraintOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConstraintDetail ConstraintDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConstraintParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeConstraintInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCopyProductStatusOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CopyProductStatus CopyProductStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TargetProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CopyProductStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeCopyProductStatusInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CopyProductToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePortfolioOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PortfolioDetail PortfolioDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagOptionDetail[] TagOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BudgetDetail[] Budgets { get; set; }
	}
	
	/// <summary>
	/// Information about a budget.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BudgetDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BudgetName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePortfolioInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePortfolioShareStatusOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioShareToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationNodeValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShareStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShareDetails ShareDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShareStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_STARTED")]
		NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED_WITH_ERRORS")]
		COMPLETED_WITH_ERRORS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 4,
	}
	
	/// <summary>
	/// Information about the portfolio share operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShareDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SuccessfulShares { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShareError[] ShareErrors { get; set; }
	}
	
	/// <summary>
	/// Errors that occurred during the portfolio share operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShareError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Accounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePortfolioShareStatusInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioShareToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePortfolioSharesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PortfolioShareDetail[] PortfolioShareDetails { get; set; }
	}
	
	/// <summary>
	/// Information about the portfolio share.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PortfolioShareDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DescribePortfolioShareType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Accepted { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShareTagOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SharePrincipals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DescribePortfolioShareType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCOUNT")]
		ACCOUNT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORGANIZATION")]
		ORGANIZATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORGANIZATIONAL_UNIT")]
		ORGANIZATIONAL_UNIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ORGANIZATION_MEMBER_ACCOUNT")]
		ORGANIZATION_MEMBER_ACCOUNT = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribePortfolioSharesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DescribePortfolioShareType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProductOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProductViewSummary ProductViewSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifact[] ProvisioningArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BudgetDetail[] Budgets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchPath[] LaunchPaths { get; set; }
	}
	
	/// <summary>
	/// Information about a provisioning artifact. A provisioning artifact is also known as a product version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningArtifact
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactGuidance Guidance { get; set; }
	}
	
	/// <summary>
	/// A launch path object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchPath
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProductInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProductAsAdminOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProductViewDetail ProductViewDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactSummary[] ProvisioningArtifactSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagOptionDetail[] TagOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BudgetDetail[] Budgets { get; set; }
	}
	
	/// <summary>
	/// Summary information about a provisioning artifact (also known as a version) for a product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningArtifactSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactInfo ProvisioningArtifactMetadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProductAsAdminInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourcePortfolioId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProductViewOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProductViewSummary ProductViewSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifact[] ProvisioningArtifacts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProductViewInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProvisionedProductOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedProductDetail ProvisionedProductDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CloudWatchDashboard[] CloudWatchDashboards { get; set; }
	}
	
	/// <summary>
	/// Information about a provisioned product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisionedProductDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedProductStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastRecordId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastProvisioningRecordId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastSuccessfulProvisioningRecordId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchRoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProvisionedProductStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNDER_CHANGE")]
		UNDER_CHANGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TAINTED")]
		TAINTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR")]
		ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLAN_IN_PROGRESS")]
		PLAN_IN_PROGRESS = 4,
	}
	
	/// <summary>
	/// Information about a CloudWatch dashboard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CloudWatchDashboard
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// DescribeProvisionedProductAPI input structure. AcceptLanguage - [Optional] The language code for localization. Id - [Optional] The provisioned product identifier. Name - [Optional] Another provisioned product identifier. Customers must provide either Id or Name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProvisionedProductInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProvisionedProductPlanOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedProductPlanDetails ProvisionedProductPlanDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceChange[] ResourceChanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Information about a plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisionedProductPlanDetails
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlanName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionProductName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedProductPlanType PlanType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedProductPlanStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NotificationArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateProvisioningParameter[] ProvisioningParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProvisionedProductPlanStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_IN_PROGRESS")]
		CREATE_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_SUCCESS")]
		CREATE_SUCCESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE_FAILED")]
		CREATE_FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXECUTE_IN_PROGRESS")]
		EXECUTE_IN_PROGRESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXECUTE_SUCCESS")]
		EXECUTE_SUCCESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXECUTE_FAILED")]
		EXECUTE_FAILED = 5,
	}
	
	/// <summary>
	/// Information about a resource change that will occur when a plan is executed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceChange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ChangeAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LogicalResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhysicalResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Replacement Replacement { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceAttribute[] Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceChangeDetail[] Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChangeAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADD")]
		ADD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MODIFY")]
		MODIFY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REMOVE")]
		REMOVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Replacement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRUE")]
		TRUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FALSE")]
		FALSE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONDITIONAL")]
		CONDITIONAL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResourceAttribute
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROPERTIES")]
		PROPERTIES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="METADATA")]
		METADATA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATIONPOLICY")]
		CREATIONPOLICY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATEPOLICY")]
		UPDATEPOLICY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETIONPOLICY")]
		DELETIONPOLICY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TAGS")]
		TAGS = 5,
	}
	
	/// <summary>
	/// Information about a change to a resource attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceChangeDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceTargetDefinition Target { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationType Evaluation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CausingEntity { get; set; }
	}
	
	/// <summary>
	/// Information about a change to a resource attribute.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceTargetDefinition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceAttribute Attribute { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RequiresRecreation RequiresRecreation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RequiresRecreation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NEVER")]
		NEVER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONDITIONALLY")]
		CONDITIONALLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALWAYS")]
		ALWAYS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EvaluationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATIC")]
		STATIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DYNAMIC")]
		DYNAMIC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProvisionedProductPlanInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProvisioningArtifactOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactDetail ProvisioningArtifactDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactInfo Info { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactParameter[] ProvisioningArtifactParameters { get; set; }
	}
	
	/// <summary>
	/// Information about a parameter used to provision a product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningArtifactParameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ParameterType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsNoEcho { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ParameterConstraints ParameterConstraints { get; set; }
	}
	
	/// <summary>
	/// The constraints that the administrator has put on the parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParameterConstraints
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AllowedValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllowedPattern { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConstraintDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxLength { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinLength { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaxValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MinValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProvisioningArtifactInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Verbose { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeProvisioningArtifactParameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProvisioningParametersOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactParameter[] ProvisioningArtifactParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConstraintSummary[] ConstraintSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UsageInstruction[] UsageInstructions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TagOptionSummary[] TagOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactPreferences ProvisioningArtifactPreferences { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactOutput[] ProvisioningArtifactOutputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactOutput[] ProvisioningArtifactOutputKeys { get; set; }
	}
	
	/// <summary>
	/// Summary information about a constraint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConstraintSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Additional information provided by the administrator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsageInstruction
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Summary information about a TagOption.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagOptionSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// <p>The user-defined preferences that will be applied during product provisioning, unless overridden by <code>ProvisioningPreferences</code> or <code>UpdateProvisioningPreferences</code>.</p> <p>For more information on maximum concurrent accounts and failure tolerance, see <a href="https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/stacksets-concepts.html#stackset-ops-options">Stack set operation options</a> in the <i>CloudFormation User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningArtifactPreferences
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StackSetAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StackSetRegions { get; set; }
	}
	
	/// <summary>
	/// Provisioning artifact output.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningArtifactOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeProvisioningParametersInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeRecordOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RecordDetail RecordDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecordOutput[] RecordOutputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Information about a request operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecordDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RecordId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecordStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecordType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecordError[] RecordErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecordTag[] RecordTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LaunchRoleArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RecordStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATED")]
		CREATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS_IN_ERROR")]
		IN_PROGRESS_IN_ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 4,
	}
	
	/// <summary>
	/// The error code and description resulting from an operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecordError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	/// <summary>
	/// Information about a tag, which is a key-value pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecordTag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The output for the product created as the result of a request. For example, the output for a CloudFormation-backed product that creates an S3 bucket would include the S3 bucket URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecordOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OutputKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OutputValue { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeRecordInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeServiceActionOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceActionDetail ServiceActionDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeServiceActionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeServiceActionExecutionParametersOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ExecutionParameter[] ServiceActionParameters { get; set; }
	}
	
	/// <summary>
	/// Details of an execution parameter value that is passed to a self-service action when executed on a provisioned product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecutionParameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DefaultValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeServiceActionExecutionParametersInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceActionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTagOptionOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagOptionDetail TagOptionDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeTagOptionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableAWSOrganizationsAccessOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableAWSOrganizationsAccessInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateBudgetFromResourceOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateBudgetFromResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string BudgetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociatePrincipalFromPortfolioOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociatePrincipalFromPortfolioInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PrincipalType PrincipalType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateProductFromPortfolioOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateProductFromPortfolioInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateServiceActionFromProvisioningArtifactOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateServiceActionFromProvisioningArtifactInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceActionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateTagOptionFromResourceOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateTagOptionFromResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TagOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableAWSOrganizationsAccessOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableAWSOrganizationsAccessInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecuteProvisionedProductPlanOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RecordDetail RecordDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecuteProvisionedProductPlanInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PlanId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecuteProvisionedProductServiceActionOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RecordDetail RecordDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecuteProvisionedProductServiceActionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceActionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ExecuteToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExecutionParameterMap Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecutionParameterMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAWSOrganizationsAccessStatusOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccessStatus AccessStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccessStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ENABLED")]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNDER_CHANGE")]
		UNDER_CHANGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DISABLED")]
		DISABLED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAWSOrganizationsAccessStatusInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetProvisionedProductOutputsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RecordOutput[] Outputs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetProvisionedProductOutputsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] OutputKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportAsProvisionedProductOutput
	{
		
		/// <summary>
		/// Information about a request operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RecordDetail RecordDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportAsProvisionedProductInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PhysicalId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAcceptedPortfolioSharesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PortfolioDetail[] PortfolioDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAcceptedPortfolioSharesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PortfolioShareType PortfolioShareType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBudgetsForResourceOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BudgetDetail[] Budgets { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBudgetsForResourceInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListConstraintsForPortfolioOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConstraintDetail[] ConstraintDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListConstraintsForPortfolioInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLaunchPathsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LaunchPathSummary[] LaunchPathSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about a product path for a user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LaunchPathSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConstraintSummary[] ConstraintSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListLaunchPathsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOrganizationPortfolioAccessOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationNode[] OrganizationNodes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOrganizationPortfolioAccessInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OrganizationNodeType OrganizationNodeType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPortfolioAccessOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPortfolioAccessInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationParentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPortfoliosOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PortfolioDetail[] PortfolioDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPortfoliosInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPortfoliosForProductOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PortfolioDetail[] PortfolioDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPortfoliosForProductInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPrincipalsForPortfolioOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Principal[] Principals { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Information about a principal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Principal
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PrincipalARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PrincipalType PrincipalType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPrincipalsForPortfolioInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProvisionedProductPlansOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedProductPlanSummary[] ProvisionedProductPlans { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about a plan.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisionedProductPlanSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PlanName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PlanId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionProductName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedProductPlanType PlanType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProvisionedProductPlansInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccessLevelFilter AccessLevelFilter { get; set; }
	}
	
	/// <summary>
	/// The access level to use to filter results.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessLevelFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AccessLevelFilterKey Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccessLevelFilterKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Account")]
		Account = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Role")]
		Role = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="User")]
		User = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProvisioningArtifactsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactDetail[] ProvisioningArtifactDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProvisioningArtifactsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProvisioningArtifactsForServiceActionOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactView[] ProvisioningArtifactViews { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// An object that contains summary information about a product view and a provisioning artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningArtifactView
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProductViewSummary ProductViewSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifact ProvisioningArtifact { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListProvisioningArtifactsForServiceActionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceActionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRecordHistoryOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RecordDetail[] RecordDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRecordHistoryInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccessLevelFilter AccessLevelFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ListRecordHistorySearchFilter SearchFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	/// <summary>
	/// The search filter to use when listing history records.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRecordHistorySearchFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListResourcesForTagOptionOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceDetail[] ResourceDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	/// <summary>
	/// Information about a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ARN { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListResourcesForTagOptionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TagOptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListServiceActionsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceActionSummary[] ServiceActionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListServiceActionsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListServiceActionsForProvisioningArtifactOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceActionSummary[] ServiceActionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListServiceActionsForProvisioningArtifactInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListStackInstancesForProvisionedProductOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public StackInstance[] StackInstances { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// An CloudFormation stack, in a specific account and Region, that's part of a stack set operation. A stack instance is a reference to an attempted or actual stack in a given account within a given Region. A stack instance can exist without a stack—for example, if the stack couldn't be created for some reason. A stack instance is associated with only one stack set. Each stack instance contains the ID of its associated stack set, as well as the ID of the actual stack and the stack status. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StackInstance
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Account { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StackInstanceStatus StackInstanceStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StackInstanceStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CURRENT")]
		CURRENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OUTDATED")]
		OUTDATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INOPERABLE")]
		INOPERABLE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListStackInstancesForProvisionedProductInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagOptionsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagOptionDetail[] TagOptionDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagOptionsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ListTagOptionsFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	/// <summary>
	/// Filters to use when listing TagOptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagOptionsFilters
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotifyProvisionProductEngineWorkflowResultOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotifyProvisionProductEngineWorkflowResultInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkflowToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecordId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LastSyncStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EngineWorkflowResourceIdentifier ResourceIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecordOutput[] Outputs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	/// <summary>
	///  The ID for the provisioned product resources that are part of a resource group. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EngineWorkflowResourceIdentifier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UniqueTagResourceIdentifier UniqueTag { get; set; }
	}
	
	/// <summary>
	///  The unique key-value pair for a tag that identifies provisioned product resources. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UniqueTagResourceIdentifier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotifyTerminateProvisionedProductEngineWorkflowResultOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotifyTerminateProvisionedProductEngineWorkflowResultInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkflowToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecordId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LastSyncStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotifyUpdateProvisionedProductEngineWorkflowResultOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotifyUpdateProvisionedProductEngineWorkflowResultInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string WorkflowToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecordId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LastSyncStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FailureReason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecordOutput[] Outputs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisionProductOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RecordDetail RecordDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisionProductInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningParameter[] ProvisioningParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningPreferences ProvisioningPreferences { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] NotificationArns { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionToken { get; set; }
	}
	
	/// <summary>
	/// Information about a parameter used to provision a product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningParameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// <p>The user-defined preferences that will be applied when updating a provisioned product. Not all preferences are applicable to all provisioned product type</p> <p>One or more Amazon Web Services accounts that will have access to the provisioned product.</p> <p>Applicable only to a <code>CFN_STACKSET</code> provisioned product type.</p> <p>The Amazon Web Services accounts specified should be within the list of accounts in the <code>STACKSET</code> constraint. To get the list of accounts in the <code>STACKSET</code> constraint, use the <code>DescribeProvisioningParameters</code> operation.</p> <p>If no values are specified, the default value is all accounts from the <code>STACKSET</code> constraint.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisioningPreferences
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StackSetAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StackSetRegions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StackSetFailureToleranceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StackSetFailureTolerancePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StackSetMaxConcurrencyCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StackSetMaxConcurrencyPercentage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RejectPortfolioShareOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RejectPortfolioShareInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PortfolioShareType PortfolioShareType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScanProvisionedProductsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedProductDetail[] ProvisionedProducts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScanProvisionedProductsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccessLevelFilter AccessLevelFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchProductsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProductViewSummary[] ProductViewSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductViewAggregations ProductViewAggregations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductViewAggregations
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchProductsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductViewFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductViewSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductViewFilters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductViewSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Title")]
		Title = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VersionCount")]
		VersionCount = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CreationDate")]
		CreationDate = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASCENDING")]
		ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESCENDING")]
		DESCENDING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchProductsAsAdminOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProductViewDetail[] ProductViewDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchProductsAsAdminInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductViewFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductViewSortBy SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProductSource ProductSource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACCOUNT")]
		ACCOUNT = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchProvisionedProductsOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedProductAttribute[] ProvisionedProducts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalResultsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Information about a provisioned product.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisionedProductAttribute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedProductStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastRecordId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastProvisioningRecordId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastSuccessfulProvisioningRecordId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhysicalId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserArnSession { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchProvisionedProductsInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccessLevelFilter AccessLevelFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedProductFilters Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SortBy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortOrder SortOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisionedProductFilters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminateProvisionedProductOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RecordDetail RecordDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TerminateProvisionedProductInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TerminateToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IgnoreErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RetainPhysicalResources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateConstraintOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConstraintDetail ConstraintDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConstraintParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateConstraintInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePortfolioOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PortfolioDetail PortfolioDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePortfolioInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] AddTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RemoveTags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePortfolioShareOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioShareToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ShareStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePortfolioShareInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PortfolioId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		/// <summary>
		/// Information about the organization node.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OrganizationNode OrganizationNode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ShareTagOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SharePrincipals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProductOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProductViewDetail ProductViewDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProductInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Distributor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SupportUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] AddTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RemoveTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SourceConnection SourceConnection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProvisionedProductOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RecordDetail RecordDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProvisionedProductInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProductName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateProvisioningParameter[] ProvisioningParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateProvisioningPreferences ProvisioningPreferences { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UpdateToken { get; set; }
	}
	
	/// <summary>
	/// The user-defined preferences that will be applied when updating a provisioned product. Not all preferences are applicable to all provisioned product types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProvisioningPreferences
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StackSetAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] StackSetRegions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StackSetFailureToleranceCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StackSetFailureTolerancePercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StackSetMaxConcurrencyCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StackSetMaxConcurrencyPercentage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StackSetOperationType StackSetOperationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StackSetOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATE")]
		CREATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATE")]
		UPDATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETE")]
		DELETE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProvisionedProductPropertiesOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedProductProperties ProvisionedProductProperties { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecordId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RecordStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProvisionedProductProperties
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProvisionedProductPropertiesInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProvisionedProductId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ProvisionedProductProperties ProvisionedProductProperties { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string IdempotencyToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProvisioningArtifactOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactDetail ProvisioningArtifactDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactInfo Info { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Status Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateProvisioningArtifactInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ProvisioningArtifactId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProvisioningArtifactGuidance Guidance { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateServiceActionOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceActionDetail ServiceActionDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateServiceActionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceActionDefinitionMap Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AcceptLanguage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTagOptionOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TagOptionDetail TagOptionDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateTagOptionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Active { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EngineWorkflowStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEEDED")]
		SUCCEEDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 1,
	}
	
	/// <summary>
	/// A single product view aggregation value/count pair, containing metadata about each product to which the calling user has access.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductViewAggregationValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ApproximateCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProductViewFilterBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FullTextSearch")]
		FullTextSearch = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Owner")]
		Owner = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProductType")]
		ProductType = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SourceProductId")]
		SourceProductId = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PropertyKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OWNER")]
		OWNER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LAUNCH_ROLE")]
		LAUNCH_ROLE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProvisionedProductViewFilterBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SearchQuery")]
		SearchQuery = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProvisioningArtifactPropertyName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Id")]
		Id = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServiceActionDefinitionKey
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Name")]
		Name = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Version")]
		Version = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AssumeRole")]
		AssumeRole = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Parameters")]
		Parameters = 3,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Accepts an offer to share the specified portfolio.
		/// AcceptPortfolioShare #X-Amz-Target=AWS242ServiceCatalogService.AcceptPortfolioShare
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AcceptPortfolioShareOutput> AcceptPortfolioShareAsync(AcceptPortfolioShareInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.AcceptPortfolioShare";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AcceptPortfolioShareOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates the specified budget with the specified resource.
		/// AssociateBudgetWithResource #X-Amz-Target=AWS242ServiceCatalogService.AssociateBudgetWithResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateBudgetWithResourceOutput> AssociateBudgetWithResourceAsync(AssociateBudgetWithResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.AssociateBudgetWithResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateBudgetWithResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Associates the specified principal ARN with the specified portfolio.</p> <p>If you share the portfolio with principal name sharing enabled, the <code>PrincipalARN</code> association is included in the share. </p> <p>The <code>PortfolioID</code>, <code>PrincipalARN</code>, and <code>PrincipalType</code> parameters are required. </p> <p>You can associate a maximum of 10 Principals with a portfolio using <code>PrincipalType</code> as <code>IAM_PATTERN</code> </p> <note> <p>When you associate a principal with portfolio, a potential privilege escalation path may occur when that portfolio is then shared with other accounts. For a user in a recipient account who is <i>not</i> an Service Catalog Admin, but still has the ability to create Principals (Users/Groups/Roles), that user could create a role that matches a principal name association for the portfolio. Although this user may not know which principal names are associated through Service Catalog, they may be able to guess the user. If this potential escalation path is a concern, then Service Catalog recommends using <code>PrincipalType</code> as <code>IAM</code>. With this configuration, the <code>PrincipalARN</code> must already exist in the recipient account before it can be associated. </p> </note>
		/// AssociatePrincipalWithPortfolio #X-Amz-Target=AWS242ServiceCatalogService.AssociatePrincipalWithPortfolio
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociatePrincipalWithPortfolioOutput> AssociatePrincipalWithPortfolioAsync(AssociatePrincipalWithPortfolioInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.AssociatePrincipalWithPortfolio";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociatePrincipalWithPortfolioOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Associates the specified product with the specified portfolio.</p> <p>A delegated admin is authorized to invoke this command.</p>
		/// AssociateProductWithPortfolio #X-Amz-Target=AWS242ServiceCatalogService.AssociateProductWithPortfolio
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateProductWithPortfolioOutput> AssociateProductWithPortfolioAsync(AssociateProductWithPortfolioInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.AssociateProductWithPortfolio";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateProductWithPortfolioOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates a self-service action with a provisioning artifact.
		/// AssociateServiceActionWithProvisioningArtifact #X-Amz-Target=AWS242ServiceCatalogService.AssociateServiceActionWithProvisioningArtifact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateServiceActionWithProvisioningArtifactOutput> AssociateServiceActionWithProvisioningArtifactAsync(AssociateServiceActionWithProvisioningArtifactInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.AssociateServiceActionWithProvisioningArtifact";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateServiceActionWithProvisioningArtifactOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associate the specified TagOption with the specified portfolio or product.
		/// AssociateTagOptionWithResource #X-Amz-Target=AWS242ServiceCatalogService.AssociateTagOptionWithResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AssociateTagOptionWithResourceOutput> AssociateTagOptionWithResourceAsync(AssociateTagOptionWithResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.AssociateTagOptionWithResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateTagOptionWithResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates multiple self-service actions with provisioning artifacts.
		/// BatchAssociateServiceActionWithProvisioningArtifact #X-Amz-Target=AWS242ServiceCatalogService.BatchAssociateServiceActionWithProvisioningArtifact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchAssociateServiceActionWithProvisioningArtifactOutput> BatchAssociateServiceActionWithProvisioningArtifactAsync(BatchAssociateServiceActionWithProvisioningArtifactInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.BatchAssociateServiceActionWithProvisioningArtifact";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchAssociateServiceActionWithProvisioningArtifactOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates a batch of self-service actions from the specified provisioning artifact.
		/// BatchDisassociateServiceActionFromProvisioningArtifact #X-Amz-Target=AWS242ServiceCatalogService.BatchDisassociateServiceActionFromProvisioningArtifact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDisassociateServiceActionFromProvisioningArtifactOutput> BatchDisassociateServiceActionFromProvisioningArtifactAsync(BatchDisassociateServiceActionFromProvisioningArtifactInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.BatchDisassociateServiceActionFromProvisioningArtifact";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDisassociateServiceActionFromProvisioningArtifactOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Copies the specified source product to the specified target product or a new product.</p> <p>You can copy a product to the same account or another account. You can copy a product to the same Region or another Region. If you copy a product to another account, you must first share the product in a portfolio using <a>CreatePortfolioShare</a>.</p> <p>This operation is performed asynchronously. To track the progress of the operation, use <a>DescribeCopyProductStatus</a>.</p>
		/// CopyProduct #X-Amz-Target=AWS242ServiceCatalogService.CopyProduct
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CopyProductOutput> CopyProductAsync(CopyProductInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.CopyProduct";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CopyProductOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a constraint.</p> <p>A delegated admin is authorized to invoke this command.</p>
		/// CreateConstraint #X-Amz-Target=AWS242ServiceCatalogService.CreateConstraint
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateConstraintOutput> CreateConstraintAsync(CreateConstraintInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.CreateConstraint";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateConstraintOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a portfolio.</p> <p>A delegated admin is authorized to invoke this command.</p>
		/// CreatePortfolio #X-Amz-Target=AWS242ServiceCatalogService.CreatePortfolio
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreatePortfolioOutput> CreatePortfolioAsync(CreatePortfolioInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.CreatePortfolio";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePortfolioOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Shares the specified portfolio with the specified account or organization node. Shares to an organization node can only be created by the management account of an organization or by a delegated administrator. You can share portfolios to an organization, an organizational unit, or a specific account.</p> <p>Note that if a delegated admin is de-registered, they can no longer create portfolio shares.</p> <p> <code>AWSOrganizationsAccess</code> must be enabled in order to create a portfolio share to an organization node.</p> <p>You can't share a shared resource, including portfolios that contain a shared product.</p> <p>If the portfolio share with the specified account or organization node already exists, this action will have no effect and will not return an error. To update an existing share, you must use the <code> UpdatePortfolioShare</code> API instead. </p> <note> <p>When you associate a principal with portfolio, a potential privilege escalation path may occur when that portfolio is then shared with other accounts. For a user in a recipient account who is <i>not</i> an Service Catalog Admin, but still has the ability to create Principals (Users/Groups/Roles), that user could create a role that matches a principal name association for the portfolio. Although this user may not know which principal names are associated through Service Catalog, they may be able to guess the user. If this potential escalation path is a concern, then Service Catalog recommends using <code>PrincipalType</code> as <code>IAM</code>. With this configuration, the <code>PrincipalARN</code> must already exist in the recipient account before it can be associated. </p> </note>
		/// CreatePortfolioShare #X-Amz-Target=AWS242ServiceCatalogService.CreatePortfolioShare
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreatePortfolioShareOutput> CreatePortfolioShareAsync(CreatePortfolioShareInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.CreatePortfolioShare";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePortfolioShareOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a product.</p> <p>A delegated admin is authorized to invoke this command.</p> <p>The user or role that performs this operation must have the <code>cloudformation:GetTemplate</code> IAM policy permission. This policy permission is required when using the <code>ImportFromPhysicalId</code> template source in the information data section.</p>
		/// CreateProduct #X-Amz-Target=AWS242ServiceCatalogService.CreateProduct
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateProductOutput> CreateProductAsync(CreateProductInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.CreateProduct";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateProductOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a plan.</p> <p>A plan includes the list of resources to be created (when provisioning a new product) or modified (when updating a provisioned product) when the plan is executed.</p> <p>You can create one plan for each provisioned product. To create a plan for an existing provisioned product, the product status must be AVAILABLE or TAINTED.</p> <p>To view the resource changes in the change set, use <a>DescribeProvisionedProductPlan</a>. To create or modify the provisioned product, use <a>ExecuteProvisionedProductPlan</a>.</p>
		/// CreateProvisionedProductPlan #X-Amz-Target=AWS242ServiceCatalogService.CreateProvisionedProductPlan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateProvisionedProductPlanOutput> CreateProvisionedProductPlanAsync(CreateProvisionedProductPlanInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.CreateProvisionedProductPlan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateProvisionedProductPlanOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a provisioning artifact (also known as a version) for the specified product.</p> <p>You cannot create a provisioning artifact for a product that was shared with you.</p> <p>The user or role that performs this operation must have the <code>cloudformation:GetTemplate</code> IAM policy permission. This policy permission is required when using the <code>ImportFromPhysicalId</code> template source in the information data section.</p>
		/// CreateProvisioningArtifact #X-Amz-Target=AWS242ServiceCatalogService.CreateProvisioningArtifact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateProvisioningArtifactOutput> CreateProvisioningArtifactAsync(CreateProvisioningArtifactInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.CreateProvisioningArtifact";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateProvisioningArtifactOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a self-service action.
		/// CreateServiceAction #X-Amz-Target=AWS242ServiceCatalogService.CreateServiceAction
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateServiceActionOutput> CreateServiceActionAsync(CreateServiceActionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.CreateServiceAction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateServiceActionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a TagOption.
		/// CreateTagOption #X-Amz-Target=AWS242ServiceCatalogService.CreateTagOption
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTagOptionOutput> CreateTagOptionAsync(CreateTagOptionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.CreateTagOption";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateTagOptionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified constraint.</p> <p>A delegated admin is authorized to invoke this command.</p>
		/// DeleteConstraint #X-Amz-Target=AWS242ServiceCatalogService.DeleteConstraint
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteConstraintOutput> DeleteConstraintAsync(DeleteConstraintInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DeleteConstraint";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteConstraintOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified portfolio.</p> <p>You cannot delete a portfolio if it was shared with you or if it has associated products, users, constraints, or shared accounts.</p> <p>A delegated admin is authorized to invoke this command.</p>
		/// DeletePortfolio #X-Amz-Target=AWS242ServiceCatalogService.DeletePortfolio
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeletePortfolioOutput> DeletePortfolioAsync(DeletePortfolioInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DeletePortfolio";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletePortfolioOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops sharing the specified portfolio with the specified account or organization node. Shares to an organization node can only be deleted by the management account of an organization or by a delegated administrator.</p> <p>Note that if a delegated admin is de-registered, portfolio shares created from that account are removed.</p>
		/// DeletePortfolioShare #X-Amz-Target=AWS242ServiceCatalogService.DeletePortfolioShare
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeletePortfolioShareOutput> DeletePortfolioShareAsync(DeletePortfolioShareInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DeletePortfolioShare";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletePortfolioShareOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified product.</p> <p>You cannot delete a product if it was shared with you or is associated with a portfolio.</p> <p>A delegated admin is authorized to invoke this command.</p>
		/// DeleteProduct #X-Amz-Target=AWS242ServiceCatalogService.DeleteProduct
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteProductOutput> DeleteProductAsync(DeleteProductInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DeleteProduct";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteProductOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified plan.
		/// DeleteProvisionedProductPlan #X-Amz-Target=AWS242ServiceCatalogService.DeleteProvisionedProductPlan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteProvisionedProductPlanOutput> DeleteProvisionedProductPlanAsync(DeleteProvisionedProductPlanInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DeleteProvisionedProductPlan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteProvisionedProductPlanOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified provisioning artifact (also known as a version) for the specified product.</p> <p>You cannot delete a provisioning artifact associated with a product that was shared with you. You cannot delete the last provisioning artifact for a product, because a product must have at least one provisioning artifact.</p>
		/// DeleteProvisioningArtifact #X-Amz-Target=AWS242ServiceCatalogService.DeleteProvisioningArtifact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteProvisioningArtifactOutput> DeleteProvisioningArtifactAsync(DeleteProvisioningArtifactInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DeleteProvisioningArtifact";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteProvisioningArtifactOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a self-service action.
		/// DeleteServiceAction #X-Amz-Target=AWS242ServiceCatalogService.DeleteServiceAction
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteServiceActionOutput> DeleteServiceActionAsync(DeleteServiceActionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DeleteServiceAction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteServiceActionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified TagOption.</p> <p>You cannot delete a TagOption if it is associated with a product or portfolio.</p>
		/// DeleteTagOption #X-Amz-Target=AWS242ServiceCatalogService.DeleteTagOption
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteTagOptionOutput> DeleteTagOptionAsync(DeleteTagOptionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DeleteTagOption";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteTagOptionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified constraint.
		/// DescribeConstraint #X-Amz-Target=AWS242ServiceCatalogService.DescribeConstraint
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeConstraintOutput> DescribeConstraintAsync(DescribeConstraintInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DescribeConstraint";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeConstraintOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the status of the specified copy product operation.
		/// DescribeCopyProductStatus #X-Amz-Target=AWS242ServiceCatalogService.DescribeCopyProductStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeCopyProductStatusOutput> DescribeCopyProductStatusAsync(DescribeCopyProductStatusInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DescribeCopyProductStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeCopyProductStatusOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the specified portfolio.</p> <p>A delegated admin is authorized to invoke this command.</p>
		/// DescribePortfolio #X-Amz-Target=AWS242ServiceCatalogService.DescribePortfolio
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribePortfolioOutput> DescribePortfolioAsync(DescribePortfolioInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DescribePortfolio";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribePortfolioOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the status of the specified portfolio share operation. This API can only be called by the management account in the organization or by a delegated admin.
		/// DescribePortfolioShareStatus #X-Amz-Target=AWS242ServiceCatalogService.DescribePortfolioShareStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribePortfolioShareStatusOutput> DescribePortfolioShareStatusAsync(DescribePortfolioShareStatusInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DescribePortfolioShareStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribePortfolioShareStatusOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a summary of each of the portfolio shares that were created for the specified portfolio.</p> <p>You can use this API to determine which accounts or organizational nodes this portfolio have been shared, whether the recipient entity has imported the share, and whether TagOptions are included with the share.</p> <p>The <code>PortfolioId</code> and <code>Type</code> parameters are both required.</p>
		/// DescribePortfolioShares #X-Amz-Target=AWS242ServiceCatalogService.DescribePortfolioShares
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribePortfolioSharesOutput> DescribePortfolioSharesAsync(string PageSize, string PageToken, DescribePortfolioSharesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DescribePortfolioShares?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribePortfolioSharesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the specified product.</p> <note> <p> Running this operation with administrator access results in a failure. <a>DescribeProductAsAdmin</a> should be used instead. </p> </note>
		/// DescribeProduct #X-Amz-Target=AWS242ServiceCatalogService.DescribeProduct
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeProductOutput> DescribeProductAsync(DescribeProductInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DescribeProduct";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeProductOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified product. This operation is run with administrator access.
		/// DescribeProductAsAdmin #X-Amz-Target=AWS242ServiceCatalogService.DescribeProductAsAdmin
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeProductAsAdminOutput> DescribeProductAsAdminAsync(DescribeProductAsAdminInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DescribeProductAsAdmin";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeProductAsAdminOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified product.
		/// DescribeProductView #X-Amz-Target=AWS242ServiceCatalogService.DescribeProductView
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeProductViewOutput> DescribeProductViewAsync(DescribeProductViewInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DescribeProductView";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeProductViewOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified provisioned product.
		/// DescribeProvisionedProduct #X-Amz-Target=AWS242ServiceCatalogService.DescribeProvisionedProduct
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeProvisionedProductOutput> DescribeProvisionedProductAsync(DescribeProvisionedProductInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DescribeProvisionedProduct";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeProvisionedProductOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about the resource changes for the specified plan.
		/// DescribeProvisionedProductPlan #X-Amz-Target=AWS242ServiceCatalogService.DescribeProvisionedProductPlan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeProvisionedProductPlanOutput> DescribeProvisionedProductPlanAsync(DescribeProvisionedProductPlanInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DescribeProvisionedProductPlan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeProvisionedProductPlanOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified provisioning artifact (also known as a version) for the specified product.
		/// DescribeProvisioningArtifact #X-Amz-Target=AWS242ServiceCatalogService.DescribeProvisioningArtifact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeProvisioningArtifactOutput> DescribeProvisioningArtifactAsync(DescribeProvisioningArtifactInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DescribeProvisioningArtifact";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeProvisioningArtifactOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the configuration required to provision the specified product using the specified provisioning artifact.</p> <p>If the output contains a TagOption key with an empty list of values, there is a TagOption conflict for that key. The end user cannot take action to fix the conflict, and launch is not blocked. In subsequent calls to <a>ProvisionProduct</a>, do not include conflicted TagOption keys as tags, or this causes the error "Parameter validation failed: Missing required parameter in Tags[<i>N</i>]:<i>Value</i>". Tag the provisioned product with the value <code>sc-tagoption-conflict-portfolioId-productId</code>.</p>
		/// DescribeProvisioningParameters #X-Amz-Target=AWS242ServiceCatalogService.DescribeProvisioningParameters
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeProvisioningParametersOutput> DescribeProvisioningParametersAsync(DescribeProvisioningParametersInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DescribeProvisioningParameters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeProvisioningParametersOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about the specified request operation.</p> <p>Use this operation after calling a request operation (for example, <a>ProvisionProduct</a>, <a>TerminateProvisionedProduct</a>, or <a>UpdateProvisionedProduct</a>). </p> <note> <p>If a provisioned product was transferred to a new owner using <a>UpdateProvisionedProductProperties</a>, the new owner will be able to describe all past records for that product. The previous owner will no longer be able to describe the records, but will be able to use <a>ListRecordHistory</a> to see the product's history from when he was the owner.</p> </note>
		/// DescribeRecord #X-Amz-Target=AWS242ServiceCatalogService.DescribeRecord
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeRecordOutput> DescribeRecordAsync(DescribeRecordInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DescribeRecord";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeRecordOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes a self-service action.
		/// DescribeServiceAction #X-Amz-Target=AWS242ServiceCatalogService.DescribeServiceAction
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeServiceActionOutput> DescribeServiceActionAsync(DescribeServiceActionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DescribeServiceAction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeServiceActionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Finds the default parameters for a specific self-service action on a specific provisioned product and returns a map of the results to the user.
		/// DescribeServiceActionExecutionParameters #X-Amz-Target=AWS242ServiceCatalogService.DescribeServiceActionExecutionParameters
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeServiceActionExecutionParametersOutput> DescribeServiceActionExecutionParametersAsync(DescribeServiceActionExecutionParametersInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DescribeServiceActionExecutionParameters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeServiceActionExecutionParametersOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified TagOption.
		/// DescribeTagOption #X-Amz-Target=AWS242ServiceCatalogService.DescribeTagOption
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeTagOptionOutput> DescribeTagOptionAsync(DescribeTagOptionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DescribeTagOption";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeTagOptionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Disable portfolio sharing through the Organizations service. This command will not delete your current shares, but prevents you from creating new shares throughout your organization. Current shares are not kept in sync with your organization structure if the structure changes after calling this API. Only the management account in the organization can call this API.</p> <p>You cannot call this API if there are active delegated administrators in the organization.</p> <p>Note that a delegated administrator is not authorized to invoke <code>DisableAWSOrganizationsAccess</code>.</p> <important> <p>If you share an Service Catalog portfolio in an organization within Organizations, and then disable Organizations access for Service Catalog, the portfolio access permissions will not sync with the latest changes to the organization structure. Specifically, accounts that you removed from the organization after disabling Service Catalog access will retain access to the previously shared portfolio.</p> </important>
		/// DisableAWSOrganizationsAccess #X-Amz-Target=AWS242ServiceCatalogService.DisableAWSOrganizationsAccess
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisableAWSOrganizationsAccessOutput> DisableAWSOrganizationsAccessAsync(DisableAWSOrganizationsAccessInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DisableAWSOrganizationsAccess";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisableAWSOrganizationsAccessOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates the specified budget from the specified resource.
		/// DisassociateBudgetFromResource #X-Amz-Target=AWS242ServiceCatalogService.DisassociateBudgetFromResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateBudgetFromResourceOutput> DisassociateBudgetFromResourceAsync(DisassociateBudgetFromResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DisassociateBudgetFromResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateBudgetFromResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates a previously associated principal ARN from a specified portfolio.</p> <p>The <code>PrincipalType</code> and <code>PrincipalARN</code> must match the <code>AssociatePrincipalWithPortfolio</code> call request details. For example, to disassociate an association created with a <code>PrincipalARN</code> of <code>PrincipalType</code> IAM you must use the <code>PrincipalType</code> IAM when calling <code>DisassociatePrincipalFromPortfolio</code>. </p> <p>For portfolios that have been shared with principal name sharing enabled: after disassociating a principal, share recipient accounts will no longer be able to provision products in this portfolio using a role matching the name of the associated principal. </p> <p>For more information, review <a href="https://docs.aws.amazon.com/cli/latest/reference/servicecatalog/associate-principal-with-portfolio.html#options">associate-principal-with-portfolio</a> in the Amazon Web Services CLI Command Reference. </p> <note> <p>If you disassociate a principal from a portfolio, with PrincipalType as <code>IAM</code>, the same principal will still have access to the portfolio if it matches one of the associated principals of type <code>IAM_PATTERN</code>. To fully remove access for a principal, verify all the associated Principals of type <code>IAM_PATTERN</code>, and then ensure you disassociate any <code>IAM_PATTERN</code> principals that match the principal whose access you are removing.</p> </note>
		/// DisassociatePrincipalFromPortfolio #X-Amz-Target=AWS242ServiceCatalogService.DisassociatePrincipalFromPortfolio
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociatePrincipalFromPortfolioOutput> DisassociatePrincipalFromPortfolioAsync(DisassociatePrincipalFromPortfolioInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DisassociatePrincipalFromPortfolio";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociatePrincipalFromPortfolioOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Disassociates the specified product from the specified portfolio. </p> <p>A delegated admin is authorized to invoke this command.</p>
		/// DisassociateProductFromPortfolio #X-Amz-Target=AWS242ServiceCatalogService.DisassociateProductFromPortfolio
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateProductFromPortfolioOutput> DisassociateProductFromPortfolioAsync(DisassociateProductFromPortfolioInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DisassociateProductFromPortfolio";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateProductFromPortfolioOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates the specified self-service action association from the specified provisioning artifact.
		/// DisassociateServiceActionFromProvisioningArtifact #X-Amz-Target=AWS242ServiceCatalogService.DisassociateServiceActionFromProvisioningArtifact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateServiceActionFromProvisioningArtifactOutput> DisassociateServiceActionFromProvisioningArtifactAsync(DisassociateServiceActionFromProvisioningArtifactInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DisassociateServiceActionFromProvisioningArtifact";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateServiceActionFromProvisioningArtifactOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disassociates the specified TagOption from the specified resource.
		/// DisassociateTagOptionFromResource #X-Amz-Target=AWS242ServiceCatalogService.DisassociateTagOptionFromResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DisassociateTagOptionFromResourceOutput> DisassociateTagOptionFromResourceAsync(DisassociateTagOptionFromResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.DisassociateTagOptionFromResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateTagOptionFromResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Enable portfolio sharing feature through Organizations. This API will allow Service Catalog to receive updates on your organization in order to sync your shares with the current structure. This API can only be called by the management account in the organization.</p> <p>When you call this API, Service Catalog calls <code>organizations:EnableAWSServiceAccess</code> on your behalf so that your shares stay in sync with any changes in your Organizations structure.</p> <p>Note that a delegated administrator is not authorized to invoke <code>EnableAWSOrganizationsAccess</code>.</p> <important> <p>If you have previously disabled Organizations access for Service Catalog, and then enable access again, the portfolio access permissions might not sync with the latest changes to the organization structure. Specifically, accounts that you removed from the organization after disabling Service Catalog access, and before you enabled access again, can retain access to the previously shared portfolio. As a result, an account that has been removed from the organization might still be able to create or manage Amazon Web Services resources when it is no longer authorized to do so. Amazon Web Services is working to resolve this issue.</p> </important>
		/// EnableAWSOrganizationsAccess #X-Amz-Target=AWS242ServiceCatalogService.EnableAWSOrganizationsAccess
		/// </summary>
		/// <returns>Success</returns>
		public async Task<EnableAWSOrganizationsAccessOutput> EnableAWSOrganizationsAccessAsync(EnableAWSOrganizationsAccessInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.EnableAWSOrganizationsAccess";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EnableAWSOrganizationsAccessOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provisions or modifies a product based on the resource changes for the specified plan.
		/// ExecuteProvisionedProductPlan #X-Amz-Target=AWS242ServiceCatalogService.ExecuteProvisionedProductPlan
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ExecuteProvisionedProductPlanOutput> ExecuteProvisionedProductPlanAsync(ExecuteProvisionedProductPlanInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ExecuteProvisionedProductPlan";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExecuteProvisionedProductPlanOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Executes a self-service action against a provisioned product.
		/// ExecuteProvisionedProductServiceAction #X-Amz-Target=AWS242ServiceCatalogService.ExecuteProvisionedProductServiceAction
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ExecuteProvisionedProductServiceActionOutput> ExecuteProvisionedProductServiceActionAsync(ExecuteProvisionedProductServiceActionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ExecuteProvisionedProductServiceAction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExecuteProvisionedProductServiceActionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get the Access Status for Organizations portfolio share feature. This API can only be called by the management account in the organization or by a delegated admin.
		/// GetAWSOrganizationsAccessStatus #X-Amz-Target=AWS242ServiceCatalogService.GetAWSOrganizationsAccessStatus
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetAWSOrganizationsAccessStatusOutput> GetAWSOrganizationsAccessStatusAsync(GetAWSOrganizationsAccessStatusInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.GetAWSOrganizationsAccessStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAWSOrganizationsAccessStatusOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// This API takes either a <code>ProvisonedProductId</code> or a <code>ProvisionedProductName</code>, along with a list of one or more output keys, and responds with the key/value pairs of those outputs.
		/// GetProvisionedProductOutputs #X-Amz-Target=AWS242ServiceCatalogService.GetProvisionedProductOutputs
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetProvisionedProductOutputsOutput> GetProvisionedProductOutputsAsync(string PageSize, string PageToken, GetProvisionedProductOutputsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.GetProvisionedProductOutputs?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetProvisionedProductOutputsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Requests the import of a resource as an Service Catalog provisioned product that is associated to an Service Catalog product and provisioning artifact. Once imported, all supported governance actions are supported on the provisioned product. </p> <p> Resource import only supports CloudFormation stack ARNs. CloudFormation StackSets, and non-root nested stacks are not supported. </p> <p> The CloudFormation stack must have one of the following statuses to be imported: <code>CREATE_COMPLETE</code>, <code>UPDATE_COMPLETE</code>, <code>UPDATE_ROLLBACK_COMPLETE</code>, <code>IMPORT_COMPLETE</code>, and <code>IMPORT_ROLLBACK_COMPLETE</code>. </p> <p> Import of the resource requires that the CloudFormation stack template matches the associated Service Catalog product provisioning artifact. </p> <note> <p> When you import an existing CloudFormation stack into a portfolio, constraints that are associated with the product aren't applied during the import process. The constraints are applied after you call <code>UpdateProvisionedProduct</code> for the provisioned product. </p> </note> <p> The user or role that performs this operation must have the <code>cloudformation:GetTemplate</code> and <code>cloudformation:DescribeStacks</code> IAM policy permissions. </p>
		/// ImportAsProvisionedProduct #X-Amz-Target=AWS242ServiceCatalogService.ImportAsProvisionedProduct
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ImportAsProvisionedProductOutput> ImportAsProvisionedProductAsync(ImportAsProvisionedProductInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ImportAsProvisionedProduct";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportAsProvisionedProductOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all imported portfolios for which account-to-account shares were accepted by this account. By specifying the <code>PortfolioShareType</code>, you can list portfolios for which organizational shares were accepted by this account.
		/// ListAcceptedPortfolioShares #X-Amz-Target=AWS242ServiceCatalogService.ListAcceptedPortfolioShares
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAcceptedPortfolioSharesOutput> ListAcceptedPortfolioSharesAsync(string PageSize, string PageToken, ListAcceptedPortfolioSharesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListAcceptedPortfolioShares?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAcceptedPortfolioSharesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all the budgets associated to the specified resource.
		/// ListBudgetsForResource #X-Amz-Target=AWS242ServiceCatalogService.ListBudgetsForResource
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListBudgetsForResourceOutput> ListBudgetsForResourceAsync(string PageSize, string PageToken, ListBudgetsForResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListBudgetsForResource?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBudgetsForResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the constraints for the specified portfolio and product.
		/// ListConstraintsForPortfolio #X-Amz-Target=AWS242ServiceCatalogService.ListConstraintsForPortfolio
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListConstraintsForPortfolioOutput> ListConstraintsForPortfolioAsync(string PageSize, string PageToken, ListConstraintsForPortfolioInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListConstraintsForPortfolio?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListConstraintsForPortfolioOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Lists the paths to the specified product. A path describes how the user gets access to a specified product and is necessary when provisioning a product. A path also determines the constraints that are put on a product. A path is dependent on a specific product, porfolio, and principal. </p> <note> <p> When provisioning a product that's been added to a portfolio, you must grant your user, group, or role access to the portfolio. For more information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/catalogs_portfolios_users.html">Granting users access</a> in the <i>Service Catalog User Guide</i>. </p> </note>
		/// ListLaunchPaths #X-Amz-Target=AWS242ServiceCatalogService.ListLaunchPaths
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListLaunchPathsOutput> ListLaunchPathsAsync(string PageSize, string PageToken, ListLaunchPathsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListLaunchPaths?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLaunchPathsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the organization nodes that have access to the specified portfolio. This API can only be called by the management account in the organization or by a delegated admin.</p> <p>If a delegated admin is de-registered, they can no longer perform this operation.</p>
		/// ListOrganizationPortfolioAccess #X-Amz-Target=AWS242ServiceCatalogService.ListOrganizationPortfolioAccess
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListOrganizationPortfolioAccessOutput> ListOrganizationPortfolioAccessAsync(string PageSize, string PageToken, ListOrganizationPortfolioAccessInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListOrganizationPortfolioAccess?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOrganizationPortfolioAccessOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the account IDs that have access to the specified portfolio.</p> <p>A delegated admin can list the accounts that have access to the shared portfolio. Note that if a delegated admin is de-registered, they can no longer perform this operation.</p>
		/// ListPortfolioAccess #X-Amz-Target=AWS242ServiceCatalogService.ListPortfolioAccess
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPortfolioAccessOutput> ListPortfolioAccessAsync(string PageSize, string PageToken, ListPortfolioAccessInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListPortfolioAccess?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPortfolioAccessOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all portfolios in the catalog.
		/// ListPortfolios #X-Amz-Target=AWS242ServiceCatalogService.ListPortfolios
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPortfoliosOutput> ListPortfoliosAsync(string PageSize, string PageToken, ListPortfoliosInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListPortfolios?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPortfoliosOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all portfolios that the specified product is associated with.
		/// ListPortfoliosForProduct #X-Amz-Target=AWS242ServiceCatalogService.ListPortfoliosForProduct
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPortfoliosForProductOutput> ListPortfoliosForProductAsync(string PageSize, string PageToken, ListPortfoliosForProductInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListPortfoliosForProduct?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPortfoliosForProductOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all <code>PrincipalARN</code>s and corresponding <code>PrincipalType</code>s associated with the specified portfolio.
		/// ListPrincipalsForPortfolio #X-Amz-Target=AWS242ServiceCatalogService.ListPrincipalsForPortfolio
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPrincipalsForPortfolioOutput> ListPrincipalsForPortfolioAsync(string PageSize, string PageToken, ListPrincipalsForPortfolioInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListPrincipalsForPortfolio?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPrincipalsForPortfolioOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the plans for the specified provisioned product or all plans to which the user has access.
		/// ListProvisionedProductPlans #X-Amz-Target=AWS242ServiceCatalogService.ListProvisionedProductPlans
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListProvisionedProductPlansOutput> ListProvisionedProductPlansAsync(ListProvisionedProductPlansInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListProvisionedProductPlans";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListProvisionedProductPlansOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all provisioning artifacts (also known as versions) for the specified product.
		/// ListProvisioningArtifacts #X-Amz-Target=AWS242ServiceCatalogService.ListProvisioningArtifacts
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListProvisioningArtifactsOutput> ListProvisioningArtifactsAsync(ListProvisioningArtifactsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListProvisioningArtifacts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListProvisioningArtifactsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all provisioning artifacts (also known as versions) for the specified self-service action.
		/// ListProvisioningArtifactsForServiceAction #X-Amz-Target=AWS242ServiceCatalogService.ListProvisioningArtifactsForServiceAction
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListProvisioningArtifactsForServiceActionOutput> ListProvisioningArtifactsForServiceActionAsync(string PageSize, string PageToken, ListProvisioningArtifactsForServiceActionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListProvisioningArtifactsForServiceAction?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListProvisioningArtifactsForServiceActionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the specified requests or all performed requests.
		/// ListRecordHistory #X-Amz-Target=AWS242ServiceCatalogService.ListRecordHistory
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListRecordHistoryOutput> ListRecordHistoryAsync(ListRecordHistoryInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListRecordHistory";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListRecordHistoryOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the resources associated with the specified TagOption.
		/// ListResourcesForTagOption #X-Amz-Target=AWS242ServiceCatalogService.ListResourcesForTagOption
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListResourcesForTagOptionOutput> ListResourcesForTagOptionAsync(string PageSize, string PageToken, ListResourcesForTagOptionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListResourcesForTagOption?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListResourcesForTagOptionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all self-service actions.
		/// ListServiceActions #X-Amz-Target=AWS242ServiceCatalogService.ListServiceActions
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListServiceActionsOutput> ListServiceActionsAsync(string PageSize, string PageToken, ListServiceActionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListServiceActions?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListServiceActionsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a paginated list of self-service actions associated with the specified Product ID and Provisioning Artifact ID.
		/// ListServiceActionsForProvisioningArtifact #X-Amz-Target=AWS242ServiceCatalogService.ListServiceActionsForProvisioningArtifact
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListServiceActionsForProvisioningArtifactOutput> ListServiceActionsForProvisioningArtifactAsync(string PageSize, string PageToken, ListServiceActionsForProvisioningArtifactInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListServiceActionsForProvisioningArtifact?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListServiceActionsForProvisioningArtifactOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns summary information about stack instances that are associated with the specified <code>CFN_STACKSET</code> type provisioned product. You can filter for stack instances that are associated with a specific Amazon Web Services account name or Region.
		/// ListStackInstancesForProvisionedProduct #X-Amz-Target=AWS242ServiceCatalogService.ListStackInstancesForProvisionedProduct
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListStackInstancesForProvisionedProductOutput> ListStackInstancesForProvisionedProductAsync(ListStackInstancesForProvisionedProductInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListStackInstancesForProvisionedProduct";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListStackInstancesForProvisionedProductOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the specified TagOptions or all TagOptions.
		/// ListTagOptions #X-Amz-Target=AWS242ServiceCatalogService.ListTagOptions
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTagOptionsOutput> ListTagOptionsAsync(string PageSize, string PageToken, ListTagOptionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ListTagOptions?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagOptionsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Notifies the result of the provisioning engine execution.
		/// NotifyProvisionProductEngineWorkflowResult #X-Amz-Target=AWS242ServiceCatalogService.NotifyProvisionProductEngineWorkflowResult
		/// </summary>
		/// <returns>Success</returns>
		public async Task<NotifyProvisionProductEngineWorkflowResultOutput> NotifyProvisionProductEngineWorkflowResultAsync(NotifyProvisionProductEngineWorkflowResultInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.NotifyProvisionProductEngineWorkflowResult";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NotifyProvisionProductEngineWorkflowResultOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Notifies the result of the terminate engine execution.
		/// NotifyTerminateProvisionedProductEngineWorkflowResult #X-Amz-Target=AWS242ServiceCatalogService.NotifyTerminateProvisionedProductEngineWorkflowResult
		/// </summary>
		/// <returns>Success</returns>
		public async Task<NotifyTerminateProvisionedProductEngineWorkflowResultOutput> NotifyTerminateProvisionedProductEngineWorkflowResultAsync(NotifyTerminateProvisionedProductEngineWorkflowResultInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.NotifyTerminateProvisionedProductEngineWorkflowResult";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NotifyTerminateProvisionedProductEngineWorkflowResultOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Notifies the result of the update engine execution.
		/// NotifyUpdateProvisionedProductEngineWorkflowResult #X-Amz-Target=AWS242ServiceCatalogService.NotifyUpdateProvisionedProductEngineWorkflowResult
		/// </summary>
		/// <returns>Success</returns>
		public async Task<NotifyUpdateProvisionedProductEngineWorkflowResultOutput> NotifyUpdateProvisionedProductEngineWorkflowResultAsync(NotifyUpdateProvisionedProductEngineWorkflowResultInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.NotifyUpdateProvisionedProductEngineWorkflowResult";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NotifyUpdateProvisionedProductEngineWorkflowResultOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p> Provisions the specified product. </p> <p> A provisioned product is a resourced instance of a product. For example, provisioning a product that's based on an CloudFormation template launches an CloudFormation stack and its underlying resources. You can check the status of this request using <a>DescribeRecord</a>. </p> <p> If the request contains a tag key with an empty list of values, there's a tag conflict for that key. Don't include conflicted keys as tags, or this will cause the error "Parameter validation failed: Missing required parameter in Tags[<i>N</i>]:<i>Value</i>". </p> <note> <p> When provisioning a product that's been added to a portfolio, you must grant your user, group, or role access to the portfolio. For more information, see <a href="https://docs.aws.amazon.com/servicecatalog/latest/adminguide/catalogs_portfolios_users.html">Granting users access</a> in the <i>Service Catalog User Guide</i>. </p> </note>
		/// ProvisionProduct #X-Amz-Target=AWS242ServiceCatalogService.ProvisionProduct
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ProvisionProductOutput> ProvisionProductAsync(ProvisionProductInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ProvisionProduct";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProvisionProductOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Rejects an offer to share the specified portfolio.
		/// RejectPortfolioShare #X-Amz-Target=AWS242ServiceCatalogService.RejectPortfolioShare
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RejectPortfolioShareOutput> RejectPortfolioShareAsync(RejectPortfolioShareInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.RejectPortfolioShare";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RejectPortfolioShareOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the provisioned products that are available (not terminated).</p> <p>To use additional filtering, see <a>SearchProvisionedProducts</a>.</p>
		/// ScanProvisionedProducts #X-Amz-Target=AWS242ServiceCatalogService.ScanProvisionedProducts
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ScanProvisionedProductsOutput> ScanProvisionedProductsAsync(ScanProvisionedProductsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.ScanProvisionedProducts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScanProvisionedProductsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about the products to which the caller has access.
		/// SearchProducts #X-Amz-Target=AWS242ServiceCatalogService.SearchProducts
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SearchProductsOutput> SearchProductsAsync(string PageSize, string PageToken, SearchProductsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.SearchProducts?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchProductsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about the products for the specified portfolio or all products.
		/// SearchProductsAsAdmin #X-Amz-Target=AWS242ServiceCatalogService.SearchProductsAsAdmin
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SearchProductsAsAdminOutput> SearchProductsAsAdminAsync(string PageSize, string PageToken, SearchProductsAsAdminInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.SearchProductsAsAdmin?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchProductsAsAdminOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about the provisioned products that meet the specified criteria.
		/// SearchProvisionedProducts #X-Amz-Target=AWS242ServiceCatalogService.SearchProvisionedProducts
		/// </summary>
		/// <param name="PageSize">Pagination limit</param>
		/// <param name="PageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<SearchProvisionedProductsOutput> SearchProvisionedProductsAsync(string PageSize, string PageToken, SearchProvisionedProductsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.SearchProvisionedProducts?PageSize=" + (PageSize==null? "" : System.Uri.EscapeDataString(PageSize))+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchProvisionedProductsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Terminates the specified provisioned product.</p> <p>This operation does not delete any records associated with the provisioned product.</p> <p>You can check the status of this request using <a>DescribeRecord</a>.</p>
		/// TerminateProvisionedProduct #X-Amz-Target=AWS242ServiceCatalogService.TerminateProvisionedProduct
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TerminateProvisionedProductOutput> TerminateProvisionedProductAsync(TerminateProvisionedProductInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.TerminateProvisionedProduct";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TerminateProvisionedProductOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the specified constraint.
		/// UpdateConstraint #X-Amz-Target=AWS242ServiceCatalogService.UpdateConstraint
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateConstraintOutput> UpdateConstraintAsync(UpdateConstraintInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.UpdateConstraint";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateConstraintOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified portfolio.</p> <p>You cannot update a product that was shared with you.</p>
		/// UpdatePortfolio #X-Amz-Target=AWS242ServiceCatalogService.UpdatePortfolio
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdatePortfolioOutput> UpdatePortfolioAsync(UpdatePortfolioInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.UpdatePortfolio";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePortfolioOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified portfolio share. You can use this API to enable or disable <code>TagOptions</code> sharing or Principal sharing for an existing portfolio share. </p> <p>The portfolio share cannot be updated if the <code>CreatePortfolioShare</code> operation is <code>IN_PROGRESS</code>, as the share is not available to recipient entities. In this case, you must wait for the portfolio share to be COMPLETED.</p> <p>You must provide the <code>accountId</code> or organization node in the input, but not both.</p> <p>If the portfolio is shared to both an external account and an organization node, and both shares need to be updated, you must invoke <code>UpdatePortfolioShare</code> separately for each share type. </p> <p>This API cannot be used for removing the portfolio share. You must use <code>DeletePortfolioShare</code> API for that action. </p> <note> <p>When you associate a principal with portfolio, a potential privilege escalation path may occur when that portfolio is then shared with other accounts. For a user in a recipient account who is <i>not</i> an Service Catalog Admin, but still has the ability to create Principals (Users/Groups/Roles), that user could create a role that matches a principal name association for the portfolio. Although this user may not know which principal names are associated through Service Catalog, they may be able to guess the user. If this potential escalation path is a concern, then Service Catalog recommends using <code>PrincipalType</code> as <code>IAM</code>. With this configuration, the <code>PrincipalARN</code> must already exist in the recipient account before it can be associated. </p> </note>
		/// UpdatePortfolioShare #X-Amz-Target=AWS242ServiceCatalogService.UpdatePortfolioShare
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdatePortfolioShareOutput> UpdatePortfolioShareAsync(UpdatePortfolioShareInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.UpdatePortfolioShare";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePortfolioShareOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the specified product.
		/// UpdateProduct #X-Amz-Target=AWS242ServiceCatalogService.UpdateProduct
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateProductOutput> UpdateProductAsync(UpdateProductInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.UpdateProduct";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateProductOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Requests updates to the configuration of the specified provisioned product.</p> <p>If there are tags associated with the object, they cannot be updated or added. Depending on the specific updates requested, this operation can update with no interruption, with some interruption, or replace the provisioned product entirely.</p> <p>You can check the status of this request using <a>DescribeRecord</a>.</p>
		/// UpdateProvisionedProduct #X-Amz-Target=AWS242ServiceCatalogService.UpdateProvisionedProduct
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateProvisionedProductOutput> UpdateProvisionedProductAsync(UpdateProvisionedProductInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.UpdateProvisionedProduct";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateProvisionedProductOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Requests updates to the properties of the specified provisioned product.
		/// UpdateProvisionedProductProperties #X-Amz-Target=AWS242ServiceCatalogService.UpdateProvisionedProductProperties
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateProvisionedProductPropertiesOutput> UpdateProvisionedProductPropertiesAsync(UpdateProvisionedProductPropertiesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.UpdateProvisionedProductProperties";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateProvisionedProductPropertiesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the specified provisioning artifact (also known as a version) for the specified product.</p> <p>You cannot update a provisioning artifact for a product that was shared with you.</p>
		/// UpdateProvisioningArtifact #X-Amz-Target=AWS242ServiceCatalogService.UpdateProvisioningArtifact
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateProvisioningArtifactOutput> UpdateProvisioningArtifactAsync(UpdateProvisioningArtifactInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.UpdateProvisioningArtifact";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateProvisioningArtifactOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a self-service action.
		/// UpdateServiceAction #X-Amz-Target=AWS242ServiceCatalogService.UpdateServiceAction
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateServiceActionOutput> UpdateServiceActionAsync(UpdateServiceActionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.UpdateServiceAction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateServiceActionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the specified TagOption.
		/// UpdateTagOption #X-Amz-Target=AWS242ServiceCatalogService.UpdateTagOption
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateTagOptionOutput> UpdateTagOptionAsync(UpdateTagOptionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=AWS242ServiceCatalogService.UpdateTagOption";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateTagOptionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum AcceptPortfolioShareX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.AcceptPortfolioShare")]
		AWS242ServiceCatalogService_AcceptPortfolioShare = 0,
	}
	
	public enum AssociateBudgetWithResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.AssociateBudgetWithResource")]
		AWS242ServiceCatalogService_AssociateBudgetWithResource = 0,
	}
	
	public enum AssociatePrincipalWithPortfolioX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.AssociatePrincipalWithPortfolio")]
		AWS242ServiceCatalogService_AssociatePrincipalWithPortfolio = 0,
	}
	
	public enum AssociateProductWithPortfolioX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.AssociateProductWithPortfolio")]
		AWS242ServiceCatalogService_AssociateProductWithPortfolio = 0,
	}
	
	public enum AssociateServiceActionWithProvisioningArtifactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.AssociateServiceActionWithProvisioningArtifact")]
		AWS242ServiceCatalogService_AssociateServiceActionWithProvisioningArtifact = 0,
	}
	
	public enum AssociateTagOptionWithResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.AssociateTagOptionWithResource")]
		AWS242ServiceCatalogService_AssociateTagOptionWithResource = 0,
	}
	
	public enum BatchAssociateServiceActionWithProvisioningArtifactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.BatchAssociateServiceActionWithProvisioningArtifact")]
		AWS242ServiceCatalogService_BatchAssociateServiceActionWithProvisioningArtifact = 0,
	}
	
	public enum BatchDisassociateServiceActionFromProvisioningArtifactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.BatchDisassociateServiceActionFromProvisioningArtifact")]
		AWS242ServiceCatalogService_BatchDisassociateServiceActionFromProvisioningArtifact = 0,
	}
	
	public enum CopyProductX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.CopyProduct")]
		AWS242ServiceCatalogService_CopyProduct = 0,
	}
	
	public enum CreateConstraintX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.CreateConstraint")]
		AWS242ServiceCatalogService_CreateConstraint = 0,
	}
	
	public enum CreatePortfolioX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.CreatePortfolio")]
		AWS242ServiceCatalogService_CreatePortfolio = 0,
	}
	
	public enum CreatePortfolioShareX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.CreatePortfolioShare")]
		AWS242ServiceCatalogService_CreatePortfolioShare = 0,
	}
	
	public enum CreateProductX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.CreateProduct")]
		AWS242ServiceCatalogService_CreateProduct = 0,
	}
	
	public enum CreateProvisionedProductPlanX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.CreateProvisionedProductPlan")]
		AWS242ServiceCatalogService_CreateProvisionedProductPlan = 0,
	}
	
	public enum CreateProvisioningArtifactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.CreateProvisioningArtifact")]
		AWS242ServiceCatalogService_CreateProvisioningArtifact = 0,
	}
	
	public enum CreateServiceActionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.CreateServiceAction")]
		AWS242ServiceCatalogService_CreateServiceAction = 0,
	}
	
	public enum CreateTagOptionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.CreateTagOption")]
		AWS242ServiceCatalogService_CreateTagOption = 0,
	}
	
	public enum DeleteConstraintX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DeleteConstraint")]
		AWS242ServiceCatalogService_DeleteConstraint = 0,
	}
	
	public enum DeletePortfolioX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DeletePortfolio")]
		AWS242ServiceCatalogService_DeletePortfolio = 0,
	}
	
	public enum DeletePortfolioShareX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DeletePortfolioShare")]
		AWS242ServiceCatalogService_DeletePortfolioShare = 0,
	}
	
	public enum DeleteProductX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DeleteProduct")]
		AWS242ServiceCatalogService_DeleteProduct = 0,
	}
	
	public enum DeleteProvisionedProductPlanX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DeleteProvisionedProductPlan")]
		AWS242ServiceCatalogService_DeleteProvisionedProductPlan = 0,
	}
	
	public enum DeleteProvisioningArtifactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DeleteProvisioningArtifact")]
		AWS242ServiceCatalogService_DeleteProvisioningArtifact = 0,
	}
	
	public enum DeleteServiceActionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DeleteServiceAction")]
		AWS242ServiceCatalogService_DeleteServiceAction = 0,
	}
	
	public enum DeleteTagOptionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DeleteTagOption")]
		AWS242ServiceCatalogService_DeleteTagOption = 0,
	}
	
	public enum DescribeConstraintX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DescribeConstraint")]
		AWS242ServiceCatalogService_DescribeConstraint = 0,
	}
	
	public enum DescribeCopyProductStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DescribeCopyProductStatus")]
		AWS242ServiceCatalogService_DescribeCopyProductStatus = 0,
	}
	
	public enum DescribePortfolioX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DescribePortfolio")]
		AWS242ServiceCatalogService_DescribePortfolio = 0,
	}
	
	public enum DescribePortfolioShareStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DescribePortfolioShareStatus")]
		AWS242ServiceCatalogService_DescribePortfolioShareStatus = 0,
	}
	
	public enum DescribePortfolioSharesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DescribePortfolioShares")]
		AWS242ServiceCatalogService_DescribePortfolioShares = 0,
	}
	
	public enum DescribeProductX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DescribeProduct")]
		AWS242ServiceCatalogService_DescribeProduct = 0,
	}
	
	public enum DescribeProductAsAdminX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DescribeProductAsAdmin")]
		AWS242ServiceCatalogService_DescribeProductAsAdmin = 0,
	}
	
	public enum DescribeProductViewX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DescribeProductView")]
		AWS242ServiceCatalogService_DescribeProductView = 0,
	}
	
	public enum DescribeProvisionedProductX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DescribeProvisionedProduct")]
		AWS242ServiceCatalogService_DescribeProvisionedProduct = 0,
	}
	
	public enum DescribeProvisionedProductPlanX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DescribeProvisionedProductPlan")]
		AWS242ServiceCatalogService_DescribeProvisionedProductPlan = 0,
	}
	
	public enum DescribeProvisioningArtifactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DescribeProvisioningArtifact")]
		AWS242ServiceCatalogService_DescribeProvisioningArtifact = 0,
	}
	
	public enum DescribeProvisioningParametersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DescribeProvisioningParameters")]
		AWS242ServiceCatalogService_DescribeProvisioningParameters = 0,
	}
	
	public enum DescribeRecordX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DescribeRecord")]
		AWS242ServiceCatalogService_DescribeRecord = 0,
	}
	
	public enum DescribeServiceActionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DescribeServiceAction")]
		AWS242ServiceCatalogService_DescribeServiceAction = 0,
	}
	
	public enum DescribeServiceActionExecutionParametersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DescribeServiceActionExecutionParameters")]
		AWS242ServiceCatalogService_DescribeServiceActionExecutionParameters = 0,
	}
	
	public enum DescribeTagOptionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DescribeTagOption")]
		AWS242ServiceCatalogService_DescribeTagOption = 0,
	}
	
	public enum DisableAWSOrganizationsAccessX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DisableAWSOrganizationsAccess")]
		AWS242ServiceCatalogService_DisableAWSOrganizationsAccess = 0,
	}
	
	public enum DisassociateBudgetFromResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DisassociateBudgetFromResource")]
		AWS242ServiceCatalogService_DisassociateBudgetFromResource = 0,
	}
	
	public enum DisassociatePrincipalFromPortfolioX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DisassociatePrincipalFromPortfolio")]
		AWS242ServiceCatalogService_DisassociatePrincipalFromPortfolio = 0,
	}
	
	public enum DisassociateProductFromPortfolioX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DisassociateProductFromPortfolio")]
		AWS242ServiceCatalogService_DisassociateProductFromPortfolio = 0,
	}
	
	public enum DisassociateServiceActionFromProvisioningArtifactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DisassociateServiceActionFromProvisioningArtifact")]
		AWS242ServiceCatalogService_DisassociateServiceActionFromProvisioningArtifact = 0,
	}
	
	public enum DisassociateTagOptionFromResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.DisassociateTagOptionFromResource")]
		AWS242ServiceCatalogService_DisassociateTagOptionFromResource = 0,
	}
	
	public enum EnableAWSOrganizationsAccessX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.EnableAWSOrganizationsAccess")]
		AWS242ServiceCatalogService_EnableAWSOrganizationsAccess = 0,
	}
	
	public enum ExecuteProvisionedProductPlanX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ExecuteProvisionedProductPlan")]
		AWS242ServiceCatalogService_ExecuteProvisionedProductPlan = 0,
	}
	
	public enum ExecuteProvisionedProductServiceActionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ExecuteProvisionedProductServiceAction")]
		AWS242ServiceCatalogService_ExecuteProvisionedProductServiceAction = 0,
	}
	
	public enum GetAWSOrganizationsAccessStatusX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.GetAWSOrganizationsAccessStatus")]
		AWS242ServiceCatalogService_GetAWSOrganizationsAccessStatus = 0,
	}
	
	public enum GetProvisionedProductOutputsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.GetProvisionedProductOutputs")]
		AWS242ServiceCatalogService_GetProvisionedProductOutputs = 0,
	}
	
	public enum ImportAsProvisionedProductX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ImportAsProvisionedProduct")]
		AWS242ServiceCatalogService_ImportAsProvisionedProduct = 0,
	}
	
	public enum ListAcceptedPortfolioSharesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListAcceptedPortfolioShares")]
		AWS242ServiceCatalogService_ListAcceptedPortfolioShares = 0,
	}
	
	public enum ListBudgetsForResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListBudgetsForResource")]
		AWS242ServiceCatalogService_ListBudgetsForResource = 0,
	}
	
	public enum ListConstraintsForPortfolioX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListConstraintsForPortfolio")]
		AWS242ServiceCatalogService_ListConstraintsForPortfolio = 0,
	}
	
	public enum ListLaunchPathsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListLaunchPaths")]
		AWS242ServiceCatalogService_ListLaunchPaths = 0,
	}
	
	public enum ListOrganizationPortfolioAccessX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListOrganizationPortfolioAccess")]
		AWS242ServiceCatalogService_ListOrganizationPortfolioAccess = 0,
	}
	
	public enum ListPortfolioAccessX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListPortfolioAccess")]
		AWS242ServiceCatalogService_ListPortfolioAccess = 0,
	}
	
	public enum ListPortfoliosX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListPortfolios")]
		AWS242ServiceCatalogService_ListPortfolios = 0,
	}
	
	public enum ListPortfoliosForProductX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListPortfoliosForProduct")]
		AWS242ServiceCatalogService_ListPortfoliosForProduct = 0,
	}
	
	public enum ListPrincipalsForPortfolioX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListPrincipalsForPortfolio")]
		AWS242ServiceCatalogService_ListPrincipalsForPortfolio = 0,
	}
	
	public enum ListProvisionedProductPlansX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListProvisionedProductPlans")]
		AWS242ServiceCatalogService_ListProvisionedProductPlans = 0,
	}
	
	public enum ListProvisioningArtifactsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListProvisioningArtifacts")]
		AWS242ServiceCatalogService_ListProvisioningArtifacts = 0,
	}
	
	public enum ListProvisioningArtifactsForServiceActionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListProvisioningArtifactsForServiceAction")]
		AWS242ServiceCatalogService_ListProvisioningArtifactsForServiceAction = 0,
	}
	
	public enum ListRecordHistoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListRecordHistory")]
		AWS242ServiceCatalogService_ListRecordHistory = 0,
	}
	
	public enum ListResourcesForTagOptionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListResourcesForTagOption")]
		AWS242ServiceCatalogService_ListResourcesForTagOption = 0,
	}
	
	public enum ListServiceActionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListServiceActions")]
		AWS242ServiceCatalogService_ListServiceActions = 0,
	}
	
	public enum ListServiceActionsForProvisioningArtifactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListServiceActionsForProvisioningArtifact")]
		AWS242ServiceCatalogService_ListServiceActionsForProvisioningArtifact = 0,
	}
	
	public enum ListStackInstancesForProvisionedProductX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListStackInstancesForProvisionedProduct")]
		AWS242ServiceCatalogService_ListStackInstancesForProvisionedProduct = 0,
	}
	
	public enum ListTagOptionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ListTagOptions")]
		AWS242ServiceCatalogService_ListTagOptions = 0,
	}
	
	public enum NotifyProvisionProductEngineWorkflowResultX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.NotifyProvisionProductEngineWorkflowResult")]
		AWS242ServiceCatalogService_NotifyProvisionProductEngineWorkflowResult = 0,
	}
	
	public enum NotifyTerminateProvisionedProductEngineWorkflowResultX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.NotifyTerminateProvisionedProductEngineWorkflowResult")]
		AWS242ServiceCatalogService_NotifyTerminateProvisionedProductEngineWorkflowResult = 0,
	}
	
	public enum NotifyUpdateProvisionedProductEngineWorkflowResultX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.NotifyUpdateProvisionedProductEngineWorkflowResult")]
		AWS242ServiceCatalogService_NotifyUpdateProvisionedProductEngineWorkflowResult = 0,
	}
	
	public enum ProvisionProductX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ProvisionProduct")]
		AWS242ServiceCatalogService_ProvisionProduct = 0,
	}
	
	public enum RejectPortfolioShareX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.RejectPortfolioShare")]
		AWS242ServiceCatalogService_RejectPortfolioShare = 0,
	}
	
	public enum ScanProvisionedProductsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.ScanProvisionedProducts")]
		AWS242ServiceCatalogService_ScanProvisionedProducts = 0,
	}
	
	public enum SearchProductsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.SearchProducts")]
		AWS242ServiceCatalogService_SearchProducts = 0,
	}
	
	public enum SearchProductsAsAdminX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.SearchProductsAsAdmin")]
		AWS242ServiceCatalogService_SearchProductsAsAdmin = 0,
	}
	
	public enum SearchProvisionedProductsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.SearchProvisionedProducts")]
		AWS242ServiceCatalogService_SearchProvisionedProducts = 0,
	}
	
	public enum TerminateProvisionedProductX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.TerminateProvisionedProduct")]
		AWS242ServiceCatalogService_TerminateProvisionedProduct = 0,
	}
	
	public enum UpdateConstraintX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.UpdateConstraint")]
		AWS242ServiceCatalogService_UpdateConstraint = 0,
	}
	
	public enum UpdatePortfolioX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.UpdatePortfolio")]
		AWS242ServiceCatalogService_UpdatePortfolio = 0,
	}
	
	public enum UpdatePortfolioShareX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.UpdatePortfolioShare")]
		AWS242ServiceCatalogService_UpdatePortfolioShare = 0,
	}
	
	public enum UpdateProductX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.UpdateProduct")]
		AWS242ServiceCatalogService_UpdateProduct = 0,
	}
	
	public enum UpdateProvisionedProductX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.UpdateProvisionedProduct")]
		AWS242ServiceCatalogService_UpdateProvisionedProduct = 0,
	}
	
	public enum UpdateProvisionedProductPropertiesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.UpdateProvisionedProductProperties")]
		AWS242ServiceCatalogService_UpdateProvisionedProductProperties = 0,
	}
	
	public enum UpdateProvisioningArtifactX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.UpdateProvisioningArtifact")]
		AWS242ServiceCatalogService_UpdateProvisioningArtifact = 0,
	}
	
	public enum UpdateServiceActionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.UpdateServiceAction")]
		AWS242ServiceCatalogService_UpdateServiceAction = 0,
	}
	
	public enum UpdateTagOptionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS242ServiceCatalogService.UpdateTagOption")]
		AWS242ServiceCatalogService_UpdateTagOption = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
