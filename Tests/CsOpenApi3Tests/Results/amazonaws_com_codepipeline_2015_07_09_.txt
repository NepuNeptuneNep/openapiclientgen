//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Represents the output of an AcknowledgeJob action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcknowledgeJobOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Queued = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dispatched = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimedOut = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 6,
	}
	
	/// <summary>
	/// Represents the input of an AcknowledgeJob action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcknowledgeJobInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nonce")]
		public string Nonce { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidNonceException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobNotFoundException
	{
	}
	
	/// <summary>
	/// Represents the output of an AcknowledgeThirdPartyJob action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcknowledgeThirdPartyJobOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
	}
	
	/// <summary>
	/// Represents the input of an AcknowledgeThirdPartyJob action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcknowledgeThirdPartyJobInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nonce")]
		public string Nonce { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidClientTokenException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>CreateCustomActionType</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomActionTypeOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionType")]
		public ActionType ActionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Returns information about the details of an action type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public ActionTypeId Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public ActionTypeSettings Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionConfigurationProperties")]
		public ActionConfigurationProperty[] ActionConfigurationProperties { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputArtifactDetails")]
		public ArtifactDetails InputArtifactDetails { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="outputArtifactDetails")]
		public ArtifactDetails OutputArtifactDetails { get; set; }
	}
	
	/// <summary>
	/// Represents information about an action type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionTypeId
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ActionCategory Category { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public ActionOwner Owner { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ActionCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Source = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Build = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deploy = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Test = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Invoke = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Approval = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ActionOwner
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ThirdParty = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Custom = 2,
	}
	
	/// <summary>
	/// Returns information about the settings for an action type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionTypeSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="thirdPartyConfigurationUrl")]
		public string ThirdPartyConfigurationUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entityUrlTemplate")]
		public string EntityUrlTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionUrlTemplate")]
		public string ExecutionUrlTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionUrlTemplate")]
		public string RevisionUrlTemplate { get; set; }
	}
	
	/// <summary>
	/// Represents information about an action configuration property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionConfigurationProperty
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="required")]
		public bool Required { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public bool Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public bool Secret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryable")]
		public System.Nullable<System.Boolean> Queryable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ActionConfigurationPropertyType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ActionConfigurationPropertyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		String = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Number = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Boolean = 2,
	}
	
	/// <summary>
	/// Returns information about the details of an artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtifactDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minimumCount")]
		public int MinimumCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maximumCount")]
		public int MaximumCount { get; set; }
	}
	
	/// <summary>
	/// A tag is a key-value pair that is used to manage the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a CreateCustomActionType operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCustomActionTypeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ActionCategory Category { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public ActionTypeSettings Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurationProperties")]
		public ActionConfigurationProperty[] ConfigurationProperties { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputArtifactDetails")]
		public ArtifactDetails InputArtifactDetails { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="outputArtifactDetails")]
		public ArtifactDetails OutputArtifactDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TooManyTagsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidTagsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConcurrentModificationException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>CreatePipeline</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePipelineOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipeline")]
		public PipelineDeclaration Pipeline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Represents the structure of actions and stages to be performed in the pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineDeclaration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artifactStore")]
		public ArtifactStore ArtifactStore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artifactStores")]
		public ArtifactStoreMap ArtifactStores { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stages")]
		public StageDeclaration[] Stages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// <p>The S3 bucket where artifacts for the pipeline are stored.</p> <note> <p>You must include either <code>artifactStore</code> or <code>artifactStores</code> in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use <code>artifactStores</code>.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtifactStore
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ArtifactStoreType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKey")]
		public EncryptionKey EncryptionKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ArtifactStoreType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
	}
	
	/// <summary>
	/// Represents information about the key used to encrypt data in the artifact store, such as an Amazon Web Services Key Management Service (Key Management Service) key.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncryptionKey
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EncryptionKeyType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EncryptionKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KMS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtifactStoreMap
	{
	}
	
	/// <summary>
	/// Represents information about a stage and its definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StageDeclaration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blockers")]
		public BlockerDeclaration[] Blockers { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public ActionDeclaration[] Actions { get; set; }
	}
	
	/// <summary>
	/// Reserved for future use.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlockerDeclaration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public BlockerType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BlockerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Schedule = 0,
	}
	
	/// <summary>
	/// Represents information about an action declaration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionDeclaration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionTypeId")]
		public ActionTypeId ActionTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runOrder")]
		public System.Nullable<System.Int32> RunOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public ActionConfigurationMap Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputArtifacts")]
		public OutputArtifact[] OutputArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputArtifacts")]
		public InputArtifact[] InputArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionConfigurationMap
	{
	}
	
	/// <summary>
	/// Represents information about the output of an action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutputArtifact
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents information about an artifact to be worked on, such as a test or build artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InputArtifact
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>CreatePipeline</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePipelineInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipeline")]
		public PipelineDeclaration Pipeline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineNameInUseException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidStageDeclarationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidActionDeclarationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidBlockerDeclarationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidStructureException
	{
	}
	
	/// <summary>
	/// Represents the input of a <code>DeleteCustomActionType</code> operation. The custom action will be marked as deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCustomActionTypeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ActionCategory Category { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>DeletePipeline</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePipelineInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWebhookOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWebhookInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregisterWebhookWithThirdPartyOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregisterWebhookWithThirdPartyInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="webhookName")]
		public string WebhookName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookNotFoundException
	{
	}
	
	/// <summary>
	/// Represents the input of a <code>DisableStageTransition</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisableStageTransitionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stageName")]
		public string StageName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transitionType")]
		public StageTransitionType TransitionType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StageTransitionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inbound = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Outbound = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StageNotFoundException
	{
	}
	
	/// <summary>
	/// Represents the input of an <code>EnableStageTransition</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableStageTransitionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stageName")]
		public string StageName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transitionType")]
		public StageTransitionType TransitionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetActionTypeOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionType")]
		public ActionTypeDeclaration ActionType { get; set; }
	}
	
	/// <summary>
	/// The parameters for the action type definition that are provided when the action type is created or updated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionTypeDeclaration
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executor")]
		public ActionTypeExecutor Executor { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public ActionTypeIdentifier Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="inputArtifactDetails")]
		public ActionTypeArtifactDetails InputArtifactDetails { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="outputArtifactDetails")]
		public ActionTypeArtifactDetails OutputArtifactDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public ActionTypePermissions Permissions { get; set; }
		
		/// <summary>
		/// The properties of the action type to be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public object Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urls")]
		public ActionTypeUrls Urls { get; set; }
	}
	
	/// <summary>
	/// The action engine, or executor, for an action type created for a provider, where the action is to be used by customers of the provider. The action engine is associated with the model used to create and update the action, such as the Lambda integration model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionTypeExecutor
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public ExecutorConfiguration Configuration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ExecutorType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policyStatementsTemplate")]
		public string PolicyStatementsTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobTimeout")]
		public System.Nullable<System.Int32> JobTimeout { get; set; }
	}
	
	/// <summary>
	/// The action engine, or executor, related to the supported integration model used to create and update the action type. The available executor types are <code>Lambda</code> and <code>JobWorker</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecutorConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="lambdaExecutorConfiguration")]
		public LambdaExecutorConfiguration LambdaExecutorConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobWorkerExecutorConfiguration")]
		public JobWorkerExecutorConfiguration JobWorkerExecutorConfiguration { get; set; }
	}
	
	/// <summary>
	/// Details about the configuration for the <code>Lambda</code> action engine, or executor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LambdaExecutorConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lambdaFunctionArn")]
		public string LambdaFunctionArn { get; set; }
	}
	
	/// <summary>
	/// Details about the polling configuration for the <code>JobWorker</code> action engine, or executor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobWorkerExecutorConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="pollingAccounts")]
		public string[] PollingAccounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pollingServicePrincipals")]
		public string[] PollingServicePrincipals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ExecutorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JobWorker = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lambda = 1,
	}
	
	/// <summary>
	/// Specifies the category, owner, provider, and version of the action type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionTypeIdentifier
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ActionCategory Category { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Information about parameters for artifacts associated with the action type, such as the minimum and maximum artifacts allowed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionTypeArtifactDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="minimumCount")]
		public int MinimumCount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maximumCount")]
		public int MaximumCount { get; set; }
	}
	
	/// <summary>
	/// Details identifying the users with permissions to use the action type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionTypePermissions
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowedAccounts")]
		public string[] AllowedAccounts { get; set; }
	}
	
	/// <summary>
	/// Returns information about URLs for web pages that display to customers as links on the pipeline view, such as an external configuration page for the action type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionTypeUrls
	{
		
		[System.Runtime.Serialization.DataMember(Name="configurationUrl")]
		public string ConfigurationUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entityUrlTemplate")]
		public string EntityUrlTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionUrlTemplate")]
		public string ExecutionUrlTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionUrlTemplate")]
		public string RevisionUrlTemplate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetActionTypeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ActionCategory Category { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public string Provider { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionTypeNotFoundException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>GetJobDetails</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetJobDetailsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobDetails")]
		public JobDetails JobDetails { get; set; }
	}
	
	/// <summary>
	/// Represents information about the details of a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public JobData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
	}
	
	/// <summary>
	/// Represents other information about a job required for a job worker to complete the job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobData
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionTypeId")]
		public ActionTypeId ActionTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionConfiguration")]
		public ActionConfiguration ActionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipelineContext")]
		public PipelineContext PipelineContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputArtifacts")]
		public Artifact[] InputArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputArtifacts")]
		public Artifact[] OutputArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artifactCredentials")]
		public AWSSessionCredentials ArtifactCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKey")]
		public EncryptionKey EncryptionKey { get; set; }
	}
	
	/// <summary>
	/// Represents information about an action configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public ActionConfigurationMap Configuration { get; set; }
	}
	
	/// <summary>
	/// <p>Represents information about a pipeline to a job worker.</p> <note> <p>PipelineContext contains <code>pipelineArn</code> and <code>pipelineExecutionId</code> for custom action jobs. The <code>pipelineArn</code> and <code>pipelineExecutionId</code> fields are not populated for ThirdParty action jobs.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineContext
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public StageContext Stage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public ActionContext Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipelineArn")]
		public string PipelineArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionId")]
		public string PipelineExecutionId { get; set; }
	}
	
	/// <summary>
	/// Represents information about a stage to a job worker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StageContext
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents the context of an action in the stage of a pipeline to a job worker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionContext
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionExecutionId")]
		public string ActionExecutionId { get; set; }
	}
	
	/// <summary>
	/// Artifacts are the files that are worked on by actions in the pipeline. See the action configuration for each action for details about artifact parameters. For example, the S3 source action artifact is a file name (or file path), and the files are generally provided as a ZIP file. Example artifact name: SampleApp_Windows.zip
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Artifact
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public ArtifactLocation Location { get; set; }
	}
	
	/// <summary>
	/// Represents information about the location of an artifact.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtifactLocation
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ArtifactStoreType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Location")]
		public S3ArtifactLocation S3Location { get; set; }
	}
	
	/// <summary>
	/// The location of the S3 bucket that contains a revision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3ArtifactLocation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="objectKey")]
		public string ObjectKey { get; set; }
	}
	
	/// <summary>
	/// Represents an Amazon Web Services session credentials object. These credentials are temporary credentials that are issued by Amazon Web Services Secure Token Service (STS). They can be used to access input and output artifacts in the S3 bucket used to store artifact for the pipeline in CodePipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AWSSessionCredentials
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessKeyId")]
		public string AccessKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretAccessKey")]
		public string SecretAccessKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sessionToken")]
		public string SessionToken { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetJobDetails</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetJobDetailsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>GetPipeline</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPipelineOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipeline")]
		public PipelineDeclaration Pipeline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public PipelineMetadata Metadata { get; set; }
	}
	
	/// <summary>
	/// Information about a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineArn")]
		public string PipelineArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.DateTimeOffset Updated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pollingDisabledAt")]
		public System.DateTimeOffset PollingDisabledAt { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetPipeline</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPipelineInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineVersionNotFoundException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>GetPipelineExecution</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPipelineExecutionOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineExecution")]
		public PipelineExecution PipelineExecution { get; set; }
	}
	
	/// <summary>
	/// Represents information about an execution of a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineExecution
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipelineVersion")]
		public System.Nullable<System.Int32> PipelineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionId")]
		public string PipelineExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PipelineExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusSummary")]
		public string StatusSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artifactRevisions")]
		public ArtifactRevision[] ArtifactRevisions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PipelineExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Superseded = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 6,
	}
	
	/// <summary>
	/// Represents revision details of an artifact. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtifactRevision
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionChangeIdentifier")]
		public string RevisionChangeIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionSummary")]
		public string RevisionSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionUrl")]
		public string RevisionUrl { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetPipelineExecution</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPipelineExecutionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionId")]
		public string PipelineExecutionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineExecutionNotFoundException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>GetPipelineState</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPipelineStateOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipelineVersion")]
		public System.Nullable<System.Int32> PipelineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stageStates")]
		public StageState[] StageStates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.DateTimeOffset Updated { get; set; }
	}
	
	/// <summary>
	/// Represents information about the state of the stage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StageState
	{
		
		[System.Runtime.Serialization.DataMember(Name="stageName")]
		public string StageName { get; set; }
		
		/// <summary>
		/// Represents information about the run of a stage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inboundExecution")]
		public StageExecution InboundExecution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inboundTransitionState")]
		public TransitionState InboundTransitionState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionStates")]
		public ActionState[] ActionStates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestExecution")]
		public StageExecution LatestExecution { get; set; }
	}
	
	/// <summary>
	/// Represents information about the run of a stage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StageExecution
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionId")]
		public string PipelineExecutionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StageExecutionStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StageExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancelled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopped = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stopping = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 5,
	}
	
	/// <summary>
	/// Represents information about the state of transitions between one stage and another stage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitionState
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastChangedBy")]
		public string LastChangedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastChangedAt")]
		public System.DateTimeOffset LastChangedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabledReason")]
		public string DisabledReason { get; set; }
	}
	
	/// <summary>
	/// Represents information about the state of an action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionState
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentRevision")]
		public ActionRevision CurrentRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestExecution")]
		public ActionExecution LatestExecution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entityUrl")]
		public string EntityUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionUrl")]
		public string RevisionUrl { get; set; }
	}
	
	/// <summary>
	/// Represents information about the version (or revision) of an action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionRevision
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="revisionChangeId")]
		public string RevisionChangeId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
	}
	
	/// <summary>
	/// Represents information about the run of an action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionExecution
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionExecutionId")]
		public string ActionExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ActionExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastStatusChange")]
		public System.DateTimeOffset LastStatusChange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdatedBy")]
		public string LastUpdatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalExecutionId")]
		public string ExternalExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalExecutionUrl")]
		public string ExternalExecutionUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentComplete")]
		public System.Nullable<System.Int32> PercentComplete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorDetails")]
		public ErrorDetails ErrorDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ActionExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Abandoned = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 3,
	}
	
	/// <summary>
	/// Represents information about an error in CodePipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetPipelineState</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPipelineStateInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>GetThirdPartyJobDetails</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetThirdPartyJobDetailsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobDetails")]
		public ThirdPartyJobDetails JobDetails { get; set; }
	}
	
	/// <summary>
	/// The details of a job sent in response to a <code>GetThirdPartyJobDetails</code> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThirdPartyJobDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ThirdPartyJobData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonce")]
		public string Nonce { get; set; }
	}
	
	/// <summary>
	/// Represents information about the job data for a partner action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThirdPartyJobData
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionTypeId")]
		public ActionTypeId ActionTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionConfiguration")]
		public ActionConfiguration ActionConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipelineContext")]
		public PipelineContext PipelineContext { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputArtifacts")]
		public Artifact[] InputArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputArtifacts")]
		public Artifact[] OutputArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artifactCredentials")]
		public AWSSessionCredentials ArtifactCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encryptionKey")]
		public EncryptionKey EncryptionKey { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>GetThirdPartyJobDetails</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetThirdPartyJobDetailsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidJobException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListActionExecutionsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionExecutionDetails")]
		public ActionExecutionDetail[] ActionExecutionDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns information about an execution of an action, including the action execution ID, and the name, version, and timing of the action. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionExecutionDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionId")]
		public string PipelineExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionExecutionId")]
		public string ActionExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipelineVersion")]
		public System.Nullable<System.Int32> PipelineVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stageName")]
		public string StageName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ActionExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public ActionExecutionInput Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="output")]
		public ActionExecutionOutput Output { get; set; }
	}
	
	/// <summary>
	/// Input information used for an action execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionExecutionInput
	{
		
		/// <summary>
		/// Represents information about an action type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionTypeId")]
		public ActionTypeId ActionTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public ActionConfigurationMap Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resolvedConfiguration")]
		public ResolvedActionConfigurationMap ResolvedConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleArn")]
		public string RoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputArtifacts")]
		public ArtifactDetail[] InputArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public string Namespace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResolvedActionConfigurationMap
	{
	}
	
	/// <summary>
	/// Artifact details for the action execution, such as the artifact location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArtifactDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3location")]
		public S3Location S3location { get; set; }
	}
	
	/// <summary>
	/// The Amazon S3 artifact location for an action's artifacts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3Location
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	/// <summary>
	/// Output details listed for an action execution, such as the action execution result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionExecutionOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="outputArtifacts")]
		public ArtifactDetail[] OutputArtifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionResult")]
		public ActionExecutionResult ExecutionResult { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputVariables")]
		public OutputVariablesMap OutputVariables { get; set; }
	}
	
	/// <summary>
	/// Execution result information, such as the external execution ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionExecutionResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="externalExecutionId")]
		public string ExternalExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalExecutionSummary")]
		public string ExternalExecutionSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalExecutionUrl")]
		public string ExternalExecutionUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutputVariablesMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListActionExecutionsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public ActionExecutionFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Filter values for the action execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionExecutionFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionId")]
		public string PipelineExecutionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidNextTokenException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>ListActionTypes</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListActionTypesOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionTypes")]
		public ActionType[] ActionTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ListActionTypes</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListActionTypesInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="actionOwnerFilter")]
		public ActionOwner ActionOwnerFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionFilter")]
		public string RegionFilter { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>ListPipelineExecutions</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPipelineExecutionsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionSummaries")]
		public PipelineExecutionSummary[] PipelineExecutionSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary information about a pipeline execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineExecutionSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionId")]
		public string PipelineExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PipelineExecutionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.DateTimeOffset LastUpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceRevisions")]
		public SourceRevision[] SourceRevisions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="trigger")]
		public ExecutionTrigger Trigger { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stopTrigger")]
		public StopExecutionTrigger StopTrigger { get; set; }
	}
	
	/// <summary>
	/// Information about the version (or revision) of a source artifact that initiated a pipeline execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceRevision
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public string ActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionSummary")]
		public string RevisionSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionUrl")]
		public string RevisionUrl { get; set; }
	}
	
	/// <summary>
	/// The interaction or event that started a pipeline execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecutionTrigger
	{
		
		[System.Runtime.Serialization.DataMember(Name="triggerType")]
		public TriggerType TriggerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="triggerDetail")]
		public string TriggerDetail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TriggerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreatePipeline = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartPipelineExecution = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PollForSourceChanges = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Webhook = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CloudWatchEvent = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PutActionRevision = 5,
	}
	
	/// <summary>
	/// The interaction that stopped a pipeline execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopExecutionTrigger
	{
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ListPipelineExecutions</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPipelineExecutionsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>ListPipelines</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPipelinesOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelines")]
		public PipelineSummary[] Pipelines { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns a summary of a pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.DateTimeOffset Updated { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>ListPipelines</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPipelinesInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidArnException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWebhooksOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="webhooks")]
		public ListWebhookItem[] Webhooks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The detail returned for each webhook after listing webhooks, such as the webhook URL, the webhook name, and the webhook ARN.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWebhookItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="definition")]
		public WebhookDefinition Definition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastTriggered")]
		public System.DateTimeOffset LastTriggered { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Represents information about a webhook and its definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookDefinition
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetPipeline")]
		public string TargetPipeline { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetAction")]
		public string TargetAction { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public WebhookFilterRule[] Filters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authentication")]
		public WebhookAuthenticationType Authentication { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authenticationConfiguration")]
		public WebhookAuthConfiguration AuthenticationConfiguration { get; set; }
	}
	
	/// <summary>
	/// The event criteria that specify when a webhook notification is sent to your URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookFilterRule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jsonPath")]
		public string JsonPath { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="matchEquals")]
		public string MatchEquals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum WebhookAuthenticationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB_HMAC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAUTHENTICATED = 2,
	}
	
	/// <summary>
	/// The authentication applied to incoming webhook trigger requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookAuthConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AllowedIPRange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SecretToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWebhooksInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>PollForJobs</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PollForJobsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobs")]
		public Job[] Jobs { get; set; }
	}
	
	/// <summary>
	/// Represents information about a job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Job
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public JobData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonce")]
		public string Nonce { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public string AccountId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>PollForJobs</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PollForJobsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionTypeId")]
		public ActionTypeId ActionTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxBatchSize")]
		public System.Nullable<System.Int32> MaxBatchSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryParam")]
		public QueryParamMap QueryParam { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueryParamMap
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>PollForThirdPartyJobs</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PollForThirdPartyJobsOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobs")]
		public ThirdPartyJob[] Jobs { get; set; }
	}
	
	/// <summary>
	/// A response to a <code>PollForThirdPartyJobs</code> request returned by CodePipeline when there is a job to be worked on by a partner action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThirdPartyJob
	{
		
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>PollForThirdPartyJobs</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PollForThirdPartyJobsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionTypeId")]
		public ActionTypeId ActionTypeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxBatchSize")]
		public System.Nullable<System.Int32> MaxBatchSize { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>PutActionRevision</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutActionRevisionOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="newRevision")]
		public System.Nullable<System.Boolean> NewRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionId")]
		public string PipelineExecutionId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>PutActionRevision</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutActionRevisionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stageName")]
		public string StageName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public string ActionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionRevision")]
		public ActionRevision ActionRevision { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionNotFoundException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>PutApprovalResult</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutApprovalResultOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="approvedAt")]
		public System.DateTimeOffset ApprovedAt { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>PutApprovalResult</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutApprovalResultInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stageName")]
		public string StageName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionName")]
		public string ActionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ApprovalResult Result { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	/// <summary>
	/// Represents information about the result of an approval request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ApprovalStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ApprovalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Approved = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rejected = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidApprovalTokenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalAlreadyCompletedException
	{
	}
	
	/// <summary>
	/// Represents the input of a <code>PutJobFailureResult</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutJobFailureResultInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failureDetails")]
		public FailureDetails FailureDetails { get; set; }
	}
	
	/// <summary>
	/// Represents information about failure details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FailureDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public FailureType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalExecutionId")]
		public string ExternalExecutionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FailureType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JobFailed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ConfigurationError = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PermissionError = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RevisionOutOfSync = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RevisionUnavailable = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SystemUnavailable = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidJobStateException
	{
	}
	
	/// <summary>
	/// Represents the input of a <code>PutJobSuccessResult</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutJobSuccessResultInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentRevision")]
		public CurrentRevision CurrentRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionDetails")]
		public ExecutionDetails ExecutionDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputVariables")]
		public OutputVariablesMap OutputVariables { get; set; }
	}
	
	/// <summary>
	/// Represents information about a current revision.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CurrentRevision
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="changeIdentifier")]
		public string ChangeIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.DateTimeOffset Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionSummary")]
		public string RevisionSummary { get; set; }
	}
	
	/// <summary>
	/// The details of the actions taken and results produced on an artifact as it passes through stages in the pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecutionDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalExecutionId")]
		public string ExternalExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="percentComplete")]
		public System.Nullable<System.Int32> PercentComplete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OutputVariablesSizeExceededException
	{
	}
	
	/// <summary>
	/// Represents the input of a <code>PutThirdPartyJobFailureResult</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutThirdPartyJobFailureResultInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="failureDetails")]
		public FailureDetails FailureDetails { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>PutThirdPartyJobSuccessResult</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutThirdPartyJobSuccessResultInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentRevision")]
		public CurrentRevision CurrentRevision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public string ContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionDetails")]
		public ExecutionDetails ExecutionDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutWebhookOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="webhook")]
		public ListWebhookItem Webhook { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutWebhookInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhook")]
		public WebhookDefinition Webhook { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidWebhookFilterPatternException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidWebhookAuthenticationParametersException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterWebhookWithThirdPartyOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterWebhookWithThirdPartyInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="webhookName")]
		public string WebhookName { get; set; }
	}
	
	/// <summary>
	/// Represents the output of a <code>RetryStageExecution</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetryStageExecutionOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionId")]
		public string PipelineExecutionId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>RetryStageExecution</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetryStageExecutionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stageName")]
		public string StageName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionId")]
		public string PipelineExecutionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="retryMode")]
		public StageRetryMode RetryMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StageRetryMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_ACTIONS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StageNotRetryableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotLatestPipelineExecutionException
	{
	}
	
	/// <summary>
	/// Represents the output of a <code>StartPipelineExecution</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartPipelineExecutionOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionId")]
		public string PipelineExecutionId { get; set; }
	}
	
	/// <summary>
	/// Represents the input of a <code>StartPipelineExecution</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartPipelineExecutionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopPipelineExecutionOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionId")]
		public string PipelineExecutionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopPipelineExecutionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineName")]
		public string PipelineName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipelineExecutionId")]
		public string PipelineExecutionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="abandon")]
		public System.Nullable<System.Boolean> Abandon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineExecutionNotStoppableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DuplicatedStopRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceOutput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tagKeys")]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateActionTypeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="actionType")]
		public ActionTypeDeclaration ActionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RequestFailedException
	{
	}
	
	/// <summary>
	/// Represents the output of an <code>UpdatePipeline</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePipelineOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipeline")]
		public PipelineDeclaration Pipeline { get; set; }
	}
	
	/// <summary>
	/// Represents the input of an <code>UpdatePipeline</code> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePipelineInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pipeline")]
		public PipelineDeclaration Pipeline { get; set; }
	}
	
	/// <summary>
	/// Represents information about each property specified in the action configuration, such as the description and key name that display for the customer using the action type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ActionTypeProperty
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="optional")]
		public bool Optional { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public bool Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="noEcho")]
		public bool NoEcho { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="queryable")]
		public System.Nullable<System.Boolean> Queryable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ArtifactLocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S3 = 0,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns information about a specified job and whether that job has been received by the job worker. Used for custom actions only.
		/// AcknowledgeJob #X-Amz-Target=CodePipeline_20150709.AcknowledgeJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AcknowledgeJobOutput> AcknowledgeJobAsync(AcknowledgeJobInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.AcknowledgeJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AcknowledgeJobOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Confirms a job worker has received the specified job. Used for partner actions only.
		/// AcknowledgeThirdPartyJob #X-Amz-Target=CodePipeline_20150709.AcknowledgeThirdPartyJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<AcknowledgeThirdPartyJobOutput> AcknowledgeThirdPartyJobAsync(AcknowledgeThirdPartyJobInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.AcknowledgeThirdPartyJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AcknowledgeThirdPartyJobOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new custom action that can be used in all pipelines associated with the Amazon Web Services account. Only used for custom actions.
		/// CreateCustomActionType #X-Amz-Target=CodePipeline_20150709.CreateCustomActionType
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateCustomActionTypeOutput> CreateCustomActionTypeAsync(CreateCustomActionTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.CreateCustomActionType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCustomActionTypeOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a pipeline.</p> <note> <p>In the pipeline structure, you must include either <code>artifactStore</code> or <code>artifactStores</code> in your pipeline, but you cannot use both. If you create a cross-region action in your pipeline, you must use <code>artifactStores</code>.</p> </note>
		/// CreatePipeline #X-Amz-Target=CodePipeline_20150709.CreatePipeline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreatePipelineOutput> CreatePipelineAsync(CreatePipelineInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.CreatePipeline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreatePipelineOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Marks a custom action as deleted. <code>PollForJobs</code> for the custom action fails after the action is marked for deletion. Used for custom actions only.</p> <important> <p>To re-create a custom action after it has been deleted you must use a string in the version field that has never been used before. This string can be an incremented version number, for example. To restore a deleted custom action, use a JSON file that is identical to the deleted action, including the original string in the version field.</p> </important>
		/// DeleteCustomActionType #X-Amz-Target=CodePipeline_20150709.DeleteCustomActionType
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeleteCustomActionTypeAsync(DeleteCustomActionTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.DeleteCustomActionType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified pipeline.
		/// DeletePipeline #X-Amz-Target=CodePipeline_20150709.DeletePipeline
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeletePipelineAsync(DeletePipelineInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.DeletePipeline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a previously created webhook by name. Deleting the webhook stops CodePipeline from starting a pipeline every time an external event occurs. The API returns successfully when trying to delete a webhook that is already deleted. If a deleted webhook is re-created by calling PutWebhook with the same name, it will have a different URL.
		/// DeleteWebhook #X-Amz-Target=CodePipeline_20150709.DeleteWebhook
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteWebhookOutput> DeleteWebhookAsync(DeleteWebhookInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.DeleteWebhook";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteWebhookOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes the connection between the webhook that was created by CodePipeline and the external tool with events to be detected. Currently supported only for webhooks that target an action type of GitHub.
		/// DeregisterWebhookWithThirdParty #X-Amz-Target=CodePipeline_20150709.DeregisterWebhookWithThirdParty
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeregisterWebhookWithThirdPartyOutput> DeregisterWebhookWithThirdPartyAsync(DeregisterWebhookWithThirdPartyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.DeregisterWebhookWithThirdParty";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeregisterWebhookWithThirdPartyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Prevents artifacts in a pipeline from transitioning to the next stage in the pipeline.
		/// DisableStageTransition #X-Amz-Target=CodePipeline_20150709.DisableStageTransition
		/// </summary>
		/// <returns>Success</returns>
		public async Task DisableStageTransitionAsync(DisableStageTransitionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.DisableStageTransition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Enables artifacts in a pipeline to transition to a stage in a pipeline.
		/// EnableStageTransition #X-Amz-Target=CodePipeline_20150709.EnableStageTransition
		/// </summary>
		/// <returns>Success</returns>
		public async Task EnableStageTransitionAsync(EnableStageTransitionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.EnableStageTransition";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about an action type created for an external provider, where the action is to be used by customers of the external provider. The action can be created with any supported integration model.
		/// GetActionType #X-Amz-Target=CodePipeline_20150709.GetActionType
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetActionTypeOutput> GetActionTypeAsync(GetActionTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.GetActionType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetActionTypeOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about a job. Used for custom actions only.</p> <important> <p>When this API is called, CodePipeline returns temporary credentials for the S3 bucket used to store artifacts for the pipeline, if the action requires access to that S3 bucket for input or output artifacts. This API also returns any secret values defined for the action.</p> </important>
		/// GetJobDetails #X-Amz-Target=CodePipeline_20150709.GetJobDetails
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetJobDetailsOutput> GetJobDetailsAsync(GetJobDetailsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.GetJobDetails";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetJobDetailsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the metadata, structure, stages, and actions of a pipeline. Can be used to return the entire structure of a pipeline in JSON format, which can then be modified and used to update the pipeline structure with <a>UpdatePipeline</a>.
		/// GetPipeline #X-Amz-Target=CodePipeline_20150709.GetPipeline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPipelineOutput> GetPipelineAsync(GetPipelineInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.GetPipeline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPipelineOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about an execution of a pipeline, including details about artifacts, the pipeline execution ID, and the name, version, and status of the pipeline.
		/// GetPipelineExecution #X-Amz-Target=CodePipeline_20150709.GetPipelineExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPipelineExecutionOutput> GetPipelineExecutionAsync(GetPipelineExecutionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.GetPipelineExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPipelineExecutionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the state of a pipeline, including the stages and actions.</p> <note> <p>Values returned in the <code>revisionId</code> and <code>revisionUrl</code> fields indicate the source revision information, such as the commit ID, for the current state.</p> </note>
		/// GetPipelineState #X-Amz-Target=CodePipeline_20150709.GetPipelineState
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPipelineStateOutput> GetPipelineStateAsync(GetPipelineStateInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.GetPipelineState";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPipelineStateOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Requests the details of a job for a third party action. Used for partner actions only.</p> <important> <p>When this API is called, CodePipeline returns temporary credentials for the S3 bucket used to store artifacts for the pipeline, if the action requires access to that S3 bucket for input or output artifacts. This API also returns any secret values defined for the action.</p> </important>
		/// GetThirdPartyJobDetails #X-Amz-Target=CodePipeline_20150709.GetThirdPartyJobDetails
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetThirdPartyJobDetailsOutput> GetThirdPartyJobDetailsAsync(GetThirdPartyJobDetailsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.GetThirdPartyJobDetails";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetThirdPartyJobDetailsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the action executions that have occurred in a pipeline.
		/// ListActionExecutions #X-Amz-Target=CodePipeline_20150709.ListActionExecutions
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListActionExecutionsOutput> ListActionExecutionsAsync(string maxResults, string nextToken, ListActionExecutionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.ListActionExecutions?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListActionExecutionsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a summary of all CodePipeline action types associated with your account.
		/// ListActionTypes #X-Amz-Target=CodePipeline_20150709.ListActionTypes
		/// </summary>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListActionTypesOutput> ListActionTypesAsync(string nextToken, ListActionTypesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.ListActionTypes?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListActionTypesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a summary of the most recent executions for a pipeline.
		/// ListPipelineExecutions #X-Amz-Target=CodePipeline_20150709.ListPipelineExecutions
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPipelineExecutionsOutput> ListPipelineExecutionsAsync(string maxResults, string nextToken, ListPipelineExecutionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.ListPipelineExecutions?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPipelineExecutionsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a summary of all of the pipelines associated with your account.
		/// ListPipelines #X-Amz-Target=CodePipeline_20150709.ListPipelines
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPipelinesOutput> ListPipelinesAsync(string maxResults, string nextToken, ListPipelinesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.ListPipelines?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPipelinesOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the set of key-value pairs (metadata) that are used to manage the resource.
		/// ListTagsForResource #X-Amz-Target=CodePipeline_20150709.ListTagsForResource
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceOutput> ListTagsForResourceAsync(string maxResults, string nextToken, ListTagsForResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.ListTagsForResource?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a listing of all the webhooks in this Amazon Web Services Region for this account. The output lists all webhooks and includes the webhook URL and ARN and the configuration for each webhook.
		/// ListWebhooks #X-Amz-Target=CodePipeline_20150709.ListWebhooks
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListWebhooksOutput> ListWebhooksAsync(string MaxResults, string NextToken, ListWebhooksInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.ListWebhooks?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWebhooksOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about any jobs for CodePipeline to act on. <code>PollForJobs</code> is valid only for action types with "Custom" in the owner field. If the action type contains <code>AWS</code> or <code>ThirdParty</code> in the owner field, the <code>PollForJobs</code> action returns an error.</p> <important> <p>When this API is called, CodePipeline returns temporary credentials for the S3 bucket used to store artifacts for the pipeline, if the action requires access to that S3 bucket for input or output artifacts. This API also returns any secret values defined for the action.</p> </important>
		/// PollForJobs #X-Amz-Target=CodePipeline_20150709.PollForJobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PollForJobsOutput> PollForJobsAsync(PollForJobsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.PollForJobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PollForJobsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Determines whether there are any third party jobs for a job worker to act on. Used for partner actions only.</p> <important> <p>When this API is called, CodePipeline returns temporary credentials for the S3 bucket used to store artifacts for the pipeline, if the action requires access to that S3 bucket for input or output artifacts.</p> </important>
		/// PollForThirdPartyJobs #X-Amz-Target=CodePipeline_20150709.PollForThirdPartyJobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PollForThirdPartyJobsOutput> PollForThirdPartyJobsAsync(PollForThirdPartyJobsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.PollForThirdPartyJobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PollForThirdPartyJobsOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides information to CodePipeline about new revisions to a source.
		/// PutActionRevision #X-Amz-Target=CodePipeline_20150709.PutActionRevision
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutActionRevisionOutput> PutActionRevisionAsync(PutActionRevisionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.PutActionRevision";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutActionRevisionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides the response to a manual approval request to CodePipeline. Valid responses include Approved and Rejected.
		/// PutApprovalResult #X-Amz-Target=CodePipeline_20150709.PutApprovalResult
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutApprovalResultOutput> PutApprovalResultAsync(PutApprovalResultInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.PutApprovalResult";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutApprovalResultOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Represents the failure of a job as returned to the pipeline by a job worker. Used for custom actions only.
		/// PutJobFailureResult #X-Amz-Target=CodePipeline_20150709.PutJobFailureResult
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutJobFailureResultAsync(PutJobFailureResultInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.PutJobFailureResult";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Represents the success of a job as returned to the pipeline by a job worker. Used for custom actions only.
		/// PutJobSuccessResult #X-Amz-Target=CodePipeline_20150709.PutJobSuccessResult
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutJobSuccessResultAsync(PutJobSuccessResultInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.PutJobSuccessResult";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Represents the failure of a third party job as returned to the pipeline by a job worker. Used for partner actions only.
		/// PutThirdPartyJobFailureResult #X-Amz-Target=CodePipeline_20150709.PutThirdPartyJobFailureResult
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutThirdPartyJobFailureResultAsync(PutThirdPartyJobFailureResultInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.PutThirdPartyJobFailureResult";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Represents the success of a third party job as returned to the pipeline by a job worker. Used for partner actions only.
		/// PutThirdPartyJobSuccessResult #X-Amz-Target=CodePipeline_20150709.PutThirdPartyJobSuccessResult
		/// </summary>
		/// <returns>Success</returns>
		public async Task PutThirdPartyJobSuccessResultAsync(PutThirdPartyJobSuccessResultInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.PutThirdPartyJobSuccessResult";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Defines a webhook and returns a unique webhook URL generated by CodePipeline. This URL can be supplied to third party source hosting providers to call every time there's a code change. When CodePipeline receives a POST request on this URL, the pipeline defined in the webhook is started as long as the POST request satisfied the authentication and filtering requirements supplied when defining the webhook. RegisterWebhookWithThirdParty and DeregisterWebhookWithThirdParty APIs can be used to automatically configure supported third parties to call the generated webhook URL.
		/// PutWebhook #X-Amz-Target=CodePipeline_20150709.PutWebhook
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutWebhookOutput> PutWebhookAsync(PutWebhookInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.PutWebhook";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutWebhookOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Configures a connection between the webhook that was created and the external tool with events to be detected.
		/// RegisterWebhookWithThirdParty #X-Amz-Target=CodePipeline_20150709.RegisterWebhookWithThirdParty
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RegisterWebhookWithThirdPartyOutput> RegisterWebhookWithThirdPartyAsync(RegisterWebhookWithThirdPartyInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.RegisterWebhookWithThirdParty";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterWebhookWithThirdPartyOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Resumes the pipeline execution by retrying the last failed actions in a stage. You can retry a stage immediately if any of the actions in the stage fail. When you retry, all actions that are still in progress continue working, and failed actions are triggered again.
		/// RetryStageExecution #X-Amz-Target=CodePipeline_20150709.RetryStageExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RetryStageExecutionOutput> RetryStageExecutionAsync(RetryStageExecutionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.RetryStageExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RetryStageExecutionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts the specified pipeline. Specifically, it begins processing the latest commit to the source location specified as part of the pipeline.
		/// StartPipelineExecution #X-Amz-Target=CodePipeline_20150709.StartPipelineExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartPipelineExecutionOutput> StartPipelineExecutionAsync(StartPipelineExecutionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.StartPipelineExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartPipelineExecutionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops the specified pipeline execution. You choose to either stop the pipeline execution by completing in-progress actions without starting subsequent actions, or by abandoning in-progress actions. While completing or abandoning in-progress actions, the pipeline execution is in a <code>Stopping</code> state. After all in-progress actions are completed or abandoned, the pipeline execution is in a <code>Stopped</code> state.
		/// StopPipelineExecution #X-Amz-Target=CodePipeline_20150709.StopPipelineExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopPipelineExecutionOutput> StopPipelineExecutionAsync(StopPipelineExecutionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.StopPipelineExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopPipelineExecutionOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Adds to or modifies the tags of the given resource. Tags are metadata that can be used to manage a resource.
		/// TagResource #X-Amz-Target=CodePipeline_20150709.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceOutput> TagResourceAsync(TagResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.TagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes tags from an Amazon Web Services resource.
		/// UntagResource #X-Amz-Target=CodePipeline_20150709.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceOutput> UntagResourceAsync(UntagResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.UntagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates an action type that was created with any supported integration model, where the action type is to be used by customers of the action type provider. Use a JSON file with the action definition and <code>UpdateActionType</code> to provide the full structure.
		/// UpdateActionType #X-Amz-Target=CodePipeline_20150709.UpdateActionType
		/// </summary>
		/// <returns>Success</returns>
		public async Task UpdateActionTypeAsync(UpdateActionTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.UpdateActionType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates a specified pipeline with edits or changes to its structure. Use a JSON file with the pipeline structure and <code>UpdatePipeline</code> to provide the full structure of the pipeline. Updating the pipeline increases the version number of the pipeline by 1.
		/// UpdatePipeline #X-Amz-Target=CodePipeline_20150709.UpdatePipeline
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdatePipelineOutput> UpdatePipelineAsync(UpdatePipelineInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=CodePipeline_20150709.UpdatePipeline";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdatePipelineOutput>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum AcknowledgeJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.AcknowledgeJob")]
		CodePipeline_20150709_AcknowledgeJob = 0,
	}
	
	public enum AcknowledgeThirdPartyJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.AcknowledgeThirdPartyJob")]
		CodePipeline_20150709_AcknowledgeThirdPartyJob = 0,
	}
	
	public enum CreateCustomActionTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.CreateCustomActionType")]
		CodePipeline_20150709_CreateCustomActionType = 0,
	}
	
	public enum CreatePipelineX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.CreatePipeline")]
		CodePipeline_20150709_CreatePipeline = 0,
	}
	
	public enum DeleteCustomActionTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.DeleteCustomActionType")]
		CodePipeline_20150709_DeleteCustomActionType = 0,
	}
	
	public enum DeletePipelineX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.DeletePipeline")]
		CodePipeline_20150709_DeletePipeline = 0,
	}
	
	public enum DeleteWebhookX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.DeleteWebhook")]
		CodePipeline_20150709_DeleteWebhook = 0,
	}
	
	public enum DeregisterWebhookWithThirdPartyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.DeregisterWebhookWithThirdParty")]
		CodePipeline_20150709_DeregisterWebhookWithThirdParty = 0,
	}
	
	public enum DisableStageTransitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.DisableStageTransition")]
		CodePipeline_20150709_DisableStageTransition = 0,
	}
	
	public enum EnableStageTransitionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.EnableStageTransition")]
		CodePipeline_20150709_EnableStageTransition = 0,
	}
	
	public enum GetActionTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.GetActionType")]
		CodePipeline_20150709_GetActionType = 0,
	}
	
	public enum GetJobDetailsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.GetJobDetails")]
		CodePipeline_20150709_GetJobDetails = 0,
	}
	
	public enum GetPipelineX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.GetPipeline")]
		CodePipeline_20150709_GetPipeline = 0,
	}
	
	public enum GetPipelineExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.GetPipelineExecution")]
		CodePipeline_20150709_GetPipelineExecution = 0,
	}
	
	public enum GetPipelineStateX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.GetPipelineState")]
		CodePipeline_20150709_GetPipelineState = 0,
	}
	
	public enum GetThirdPartyJobDetailsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.GetThirdPartyJobDetails")]
		CodePipeline_20150709_GetThirdPartyJobDetails = 0,
	}
	
	public enum ListActionExecutionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.ListActionExecutions")]
		CodePipeline_20150709_ListActionExecutions = 0,
	}
	
	public enum ListActionTypesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.ListActionTypes")]
		CodePipeline_20150709_ListActionTypes = 0,
	}
	
	public enum ListPipelineExecutionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.ListPipelineExecutions")]
		CodePipeline_20150709_ListPipelineExecutions = 0,
	}
	
	public enum ListPipelinesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.ListPipelines")]
		CodePipeline_20150709_ListPipelines = 0,
	}
	
	public enum ListTagsForResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.ListTagsForResource")]
		CodePipeline_20150709_ListTagsForResource = 0,
	}
	
	public enum ListWebhooksX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.ListWebhooks")]
		CodePipeline_20150709_ListWebhooks = 0,
	}
	
	public enum PollForJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.PollForJobs")]
		CodePipeline_20150709_PollForJobs = 0,
	}
	
	public enum PollForThirdPartyJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.PollForThirdPartyJobs")]
		CodePipeline_20150709_PollForThirdPartyJobs = 0,
	}
	
	public enum PutActionRevisionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.PutActionRevision")]
		CodePipeline_20150709_PutActionRevision = 0,
	}
	
	public enum PutApprovalResultX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.PutApprovalResult")]
		CodePipeline_20150709_PutApprovalResult = 0,
	}
	
	public enum PutJobFailureResultX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.PutJobFailureResult")]
		CodePipeline_20150709_PutJobFailureResult = 0,
	}
	
	public enum PutJobSuccessResultX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.PutJobSuccessResult")]
		CodePipeline_20150709_PutJobSuccessResult = 0,
	}
	
	public enum PutThirdPartyJobFailureResultX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.PutThirdPartyJobFailureResult")]
		CodePipeline_20150709_PutThirdPartyJobFailureResult = 0,
	}
	
	public enum PutThirdPartyJobSuccessResultX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.PutThirdPartyJobSuccessResult")]
		CodePipeline_20150709_PutThirdPartyJobSuccessResult = 0,
	}
	
	public enum PutWebhookX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.PutWebhook")]
		CodePipeline_20150709_PutWebhook = 0,
	}
	
	public enum RegisterWebhookWithThirdPartyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.RegisterWebhookWithThirdParty")]
		CodePipeline_20150709_RegisterWebhookWithThirdParty = 0,
	}
	
	public enum RetryStageExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.RetryStageExecution")]
		CodePipeline_20150709_RetryStageExecution = 0,
	}
	
	public enum StartPipelineExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.StartPipelineExecution")]
		CodePipeline_20150709_StartPipelineExecution = 0,
	}
	
	public enum StopPipelineExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.StopPipelineExecution")]
		CodePipeline_20150709_StopPipelineExecution = 0,
	}
	
	public enum TagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.TagResource")]
		CodePipeline_20150709_TagResource = 0,
	}
	
	public enum UntagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.UntagResource")]
		CodePipeline_20150709_UntagResource = 0,
	}
	
	public enum UpdateActionTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.UpdateActionType")]
		CodePipeline_20150709_UpdateActionType = 0,
	}
	
	public enum UpdatePipelineX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CodePipeline_20150709.UpdatePipeline")]
		CodePipeline_20150709_UpdatePipeline = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
