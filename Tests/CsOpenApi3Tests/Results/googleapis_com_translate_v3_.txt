//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An Adaptive MT Dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdaptiveMtDataset
	{
		
		/// <summary>
		/// Output only. Timestamp when this dataset was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The name of the dataset to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The number of examples in the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exampleCount")]
		public System.Nullable<System.Int32> ExampleCount { get; set; }
		
		/// <summary>
		/// Required. The resource name of the dataset, in form of `projects/{project-number-or-id}/locations/{location_id}/adaptiveMtDatasets/{dataset_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The BCP-47 language code of the source language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceLanguageCode")]
		public string SourceLanguageCode { get; set; }
		
		/// <summary>
		/// The BCP-47 language code of the target language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLanguageCode")]
		public string TargetLanguageCode { get; set; }
		
		/// <summary>
		/// Output only. Timestamp when this dataset was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// An AdaptiveMtFile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdaptiveMtFile
	{
		
		/// <summary>
		/// Output only. Timestamp when this file was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The file's display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The number of entries that the file contains.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entryCount")]
		public System.Nullable<System.Int32> EntryCount { get; set; }
		
		/// <summary>
		/// Required. The resource name of the file, in form of `projects/{project-number-or-id}/locations/{location_id}/adaptiveMtDatasets/{dataset}/files/{file}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Timestamp when this file was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// An AdaptiveMt sentence entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdaptiveMtSentence
	{
		
		/// <summary>
		/// Output only. Timestamp when this sentence was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Required. The resource name of the file, in form of `projects/{project-number-or-id}/locations/{location_id}/adaptiveMtDatasets/{dataset}/files/{file}/sentences/{sentence}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The source sentence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceSentence")]
		public string SourceSentence { get; set; }
		
		/// <summary>
		/// Required. The target sentence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetSentence")]
		public string TargetSentence { get; set; }
		
		/// <summary>
		/// Output only. Timestamp when this sentence was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// The request for sending an AdaptiveMt translation query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdaptiveMtTranslateRequest
	{
		
		/// <summary>
		/// Required. The content of the input in string format. For now only one sentence per request is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string[] Content { get; set; }
		
		/// <summary>
		/// Required. The resource name for the dataset to use for adaptive MT. `projects/{project}/locations/{location-id}/adaptiveMtDatasets/{dataset}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public string Dataset { get; set; }
	}
	
	/// <summary>
	/// An AdaptiveMtTranslate response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdaptiveMtTranslateResponse
	{
		
		/// <summary>
		/// Output only. The translation's language code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Output only. The translation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translations")]
		public AdaptiveMtTranslation[] Translations { get; set; }
	}
	
	/// <summary>
	/// An AdaptiveMt translation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdaptiveMtTranslation
	{
		
		/// <summary>
		/// Output only. The translated text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translatedText")]
		public string TranslatedText { get; set; }
	}
	
	/// <summary>
	/// Input configuration for BatchTranslateDocument request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDocumentInputConfig
	{
		
		/// <summary>
		/// The Google Cloud Storage location for the input content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsSource")]
		public GcsSource GcsSource { get; set; }
	}
	
	/// <summary>
	/// The Google Cloud Storage location for the input content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GcsSource
	{
		
		/// <summary>
		/// Required. Source data URI. For example, `gs://my_bucket/my_object`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputUri")]
		public string InputUri { get; set; }
	}
	
	/// <summary>
	/// Output configuration for BatchTranslateDocument request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDocumentOutputConfig
	{
		
		/// <summary>
		/// The Google Cloud Storage location for the output content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsDestination")]
		public GcsDestination GcsDestination { get; set; }
	}
	
	/// <summary>
	/// The Google Cloud Storage location for the output content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GcsDestination
	{
		
		/// <summary>
		/// Required. The bucket used in 'output_uri_prefix' must exist and there must be no files under 'output_uri_prefix'. 'output_uri_prefix' must end with "/" and start with "gs://". One 'output_uri_prefix' can only be used by one batch translation job at a time. Otherwise an INVALID_ARGUMENT (400) error is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUriPrefix")]
		public string OutputUriPrefix { get; set; }
	}
	
	/// <summary>
	/// The BatchTranslateDocument request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchTranslateDocumentRequest
	{
		
		/// <summary>
		/// Optional. This flag is to support user customized attribution. If not provided, the default is `Machine Translated by Google`. Customized attribution should follow rules in https://cloud.google.com/translate/attribution#attribution_and_logos
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customizedAttribution")]
		public string CustomizedAttribution { get; set; }
		
		/// <summary>
		/// Optional. If true, enable auto rotation correction in DVS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableRotationCorrection")]
		public System.Nullable<System.Boolean> EnableRotationCorrection { get; set; }
		
		/// <summary>
		/// Optional. If true, use the text removal server to remove the shadow text on background image for native pdf translation. Shadow removal feature can only be enabled when is_translate_native_pdf_only: false && pdf_native_only: false
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableShadowRemovalNativePdf")]
		public System.Nullable<System.Boolean> EnableShadowRemovalNativePdf { get; set; }
		
		/// <summary>
		/// Optional. The file format conversion map that is applied to all input files. The map key is the original mime_type. The map value is the target mime_type of translated documents. Supported file format conversion includes: - `application/pdf` to `application/vnd.openxmlformats-officedocument.wordprocessingml.document` If nothing specified, output files will be in the same format as the original file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formatConversions")]
		public System.Collections.Generic.Dictionary<string, string> FormatConversions { get; set; }
		
		/// <summary>
		/// Optional. Glossaries to be applied. It's keyed by target language code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glossaries")]
		public System.Collections.Generic.Dictionary<string, TranslateTextGlossaryConfig> Glossaries { get; set; }
		
		/// <summary>
		/// Required. Input configurations. The total number of files matched should be <= 100. The total content size to translate should be <= 100M Unicode codepoints. The files must use UTF-8 encoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputConfigs")]
		public BatchDocumentInputConfig[] InputConfigs { get; set; }
		
		/// <summary>
		/// Optional. The models to use for translation. Map's key is target language code. Map's value is the model name. Value can be a built-in general model, or an AutoML Translation model. The value format depends on model type: - AutoML Translation models: `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}` - General (built-in) models: `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`, If the map is empty or a specific model is not requested for a language pair, then default google model (nmt) is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="models")]
		public System.Collections.Generic.Dictionary<string, string> Models { get; set; }
		
		/// <summary>
		/// Output configuration for BatchTranslateDocument request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputConfig")]
		public BatchDocumentOutputConfig OutputConfig { get; set; }
		
		/// <summary>
		/// Required. The ISO-639 language code of the input document if known, for example, "en-US" or "sr-Latn". Supported language codes are listed in [Language Support](https://cloud.google.com/translate/docs/languages).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceLanguageCode")]
		public string SourceLanguageCode { get; set; }
		
		/// <summary>
		/// Required. The ISO-639 language code to use for translation of the input document. Specify up to 10 language codes here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLanguageCodes")]
		public string[] TargetLanguageCodes { get; set; }
	}
	
	/// <summary>
	/// Configures which glossary is used for a specific target language and defines options for applying that glossary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TranslateTextGlossaryConfig
	{
		
		/// <summary>
		/// Required. The `glossary` to be applied for this translation. The format depends on the glossary: - User-provided custom glossary: `projects/{project-number-or-id}/locations/{location-id}/glossaries/{glossary-id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glossary")]
		public string Glossary { get; set; }
		
		/// <summary>
		/// Optional. Indicates match is case insensitive. The default value is `false` if missing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoreCase")]
		public System.Nullable<System.Boolean> IgnoreCase { get; set; }
	}
	
	/// <summary>
	/// The batch translation request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchTranslateTextRequest
	{
		
		/// <summary>
		/// Optional. Glossaries to be applied for translation. It's keyed by target language code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glossaries")]
		public System.Collections.Generic.Dictionary<string, TranslateTextGlossaryConfig> Glossaries { get; set; }
		
		/// <summary>
		/// Required. Input configurations. The total number of files matched should be <= 100. The total content size should be <= 100M Unicode codepoints. The files must use UTF-8 encoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputConfigs")]
		public InputConfig[] InputConfigs { get; set; }
		
		/// <summary>
		/// Optional. The labels with user-defined metadata for the request. Label keys and values can be no longer than 63 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter. See https://cloud.google.com/translate/docs/advanced/labels for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Optional. The models to use for translation. Map's key is target language code. Map's value is model name. Value can be a built-in general model, or an AutoML Translation model. The value format depends on model type: - AutoML Translation models: `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}` - General (built-in) models: `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`, If the map is empty or a specific model is not requested for a language pair, then default google model (nmt) is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="models")]
		public System.Collections.Generic.Dictionary<string, string> Models { get; set; }
		
		/// <summary>
		/// Output configuration for BatchTranslateText request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputConfig")]
		public OutputConfig OutputConfig { get; set; }
		
		/// <summary>
		/// Required. Source language code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceLanguageCode")]
		public string SourceLanguageCode { get; set; }
		
		/// <summary>
		/// Required. Specify up to 10 language codes here.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLanguageCodes")]
		public string[] TargetLanguageCodes { get; set; }
	}
	
	/// <summary>
	/// Input configuration for BatchTranslateText request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputConfig
	{
		
		/// <summary>
		/// The Google Cloud Storage location for the input content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsSource")]
		public GcsSource GcsSource { get; set; }
		
		/// <summary>
		/// Optional. Can be "text/plain" or "text/html". For `.tsv`, "text/html" is used if mime_type is missing. For `.html`, this field must be "text/html" or empty. For `.txt`, this field must be "text/plain" or empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
	}
	
	/// <summary>
	/// Output configuration for BatchTranslateText request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputConfig
	{
		
		/// <summary>
		/// The Google Cloud Storage location for the output content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsDestination")]
		public GcsDestination GcsDestination { get; set; }
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// A dataset that hosts the examples (sentence pairs) used for translation models.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Dataset
	{
		
		/// <summary>
		/// Output only. Timestamp when this dataset was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The name of the dataset to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The number of examples in the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exampleCount")]
		public System.Nullable<System.Int32> ExampleCount { get; set; }
		
		/// <summary>
		/// The resource name of the dataset, in form of `projects/{project-number-or-id}/locations/{location_id}/datasets/{dataset_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The BCP-47 language code of the source language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceLanguageCode")]
		public string SourceLanguageCode { get; set; }
		
		/// <summary>
		/// The BCP-47 language code of the target language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLanguageCode")]
		public string TargetLanguageCode { get; set; }
		
		/// <summary>
		/// Output only. Number of test examples (sentence pairs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testExampleCount")]
		public System.Nullable<System.Int32> TestExampleCount { get; set; }
		
		/// <summary>
		/// Output only. Number of training examples (sentence pairs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainExampleCount")]
		public System.Nullable<System.Int32> TrainExampleCount { get; set; }
		
		/// <summary>
		/// Output only. Timestamp when this dataset was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Output only. Number of validation examples (sentence pairs).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validateExampleCount")]
		public System.Nullable<System.Int32> ValidateExampleCount { get; set; }
	}
	
	/// <summary>
	/// Input configuration for datasets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetInputConfig
	{
		
		/// <summary>
		/// Files containing the sentence pairs to be imported to the dataset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputFiles")]
		public InputFile[] InputFiles { get; set; }
	}
	
	/// <summary>
	/// An input file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputFile
	{
		
		/// <summary>
		/// The Google Cloud Storage location for the input content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsSource")]
		public GcsInputSource GcsSource { get; set; }
		
		/// <summary>
		/// Optional. Usage of the file contents. Options are TRAIN|VALIDATION|TEST, or UNASSIGNED (by default) for auto split.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public string Usage { get; set; }
	}
	
	/// <summary>
	/// The Google Cloud Storage location for the input content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GcsInputSource
	{
		
		/// <summary>
		/// Required. Source data URI. For example, `gs://my_bucket/my_object`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputUri")]
		public string InputUri { get; set; }
	}
	
	/// <summary>
	/// Output configuration for datasets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetOutputConfig
	{
		
		/// <summary>
		/// The Google Cloud Storage location for the output content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsDestination")]
		public GcsOutputDestination GcsDestination { get; set; }
	}
	
	/// <summary>
	/// The Google Cloud Storage location for the output content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GcsOutputDestination
	{
		
		/// <summary>
		/// Required. Google Cloud Storage URI to output directory. For example, `gs://bucket/directory`. The requesting user must have write permission to the bucket. The directory will be created if it doesn't exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputUriPrefix")]
		public string OutputUriPrefix { get; set; }
	}
	
	/// <summary>
	/// The request message for language detection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectLanguageRequest
	{
		
		/// <summary>
		/// The content of the input stored as a string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Optional. The labels with user-defined metadata for the request. Label keys and values can be no longer than 63 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter. See https://cloud.google.com/translate/docs/advanced/labels for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Optional. The format of the source text, for example, "text/html", "text/plain". If left blank, the MIME type defaults to "text/html".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// Optional. The language detection model to be used. Format: `projects/{project-number-or-id}/locations/{location-id}/models/language-detection/{model-id}` Only one language detection model is currently supported: `projects/{project-number-or-id}/locations/{location-id}/models/language-detection/default`. If not specified, the default model is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
	}
	
	/// <summary>
	/// The response message for language detection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectLanguageResponse
	{
		
		/// <summary>
		/// The most probable language detected by the Translation API. For each request, the Translation API will always return only one result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public DetectedLanguage[] Languages { get; set; }
	}
	
	/// <summary>
	/// The response message for language detection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectedLanguage
	{
		
		/// <summary>
		/// The confidence of the detection result for this language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="confidence")]
		public System.Nullable<System.Single> Confidence { get; set; }
		
		/// <summary>
		/// The ISO-639 language code of the source content in the request, detected automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
	}
	
	/// <summary>
	/// A document translation request input config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentInputConfig
	{
		
		/// <summary>
		/// Document's content represented as a stream of bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The Google Cloud Storage location for the input content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsSource")]
		public GcsSource GcsSource { get; set; }
		
		/// <summary>
		/// Specifies the input document's mime_type. If not specified it will be determined using the file extension for gcs_source provided files. For a file provided through bytes content the mime_type must be provided. Currently supported mime types are: - application/pdf - application/vnd.openxmlformats-officedocument.wordprocessingml.document - application/vnd.openxmlformats-officedocument.presentationml.presentation - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
	}
	
	/// <summary>
	/// A document translation request output config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentOutputConfig
	{
		
		/// <summary>
		/// The Google Cloud Storage location for the output content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsDestination")]
		public GcsDestination GcsDestination { get; set; }
		
		/// <summary>
		/// Optional. Specifies the translated document's mime_type. If not specified, the translated file's mime type will be the same as the input file's mime type. Currently only support the output mime type to be the same as input mime type. - application/pdf - application/vnd.openxmlformats-officedocument.wordprocessingml.document - application/vnd.openxmlformats-officedocument.presentationml.presentation - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
	}
	
	/// <summary>
	/// A translated document message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentTranslation
	{
		
		/// <summary>
		/// The array of translated documents. It is expected to be size 1 for now. We may produce multiple translated documents in the future for other type of file formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="byteStreamOutputs")]
		public string[] ByteStreamOutputs { get; set; }
		
		/// <summary>
		/// The detected language for the input document. If the user did not provide the source language for the input document, this field will have the language code automatically detected. If the source language was passed, auto-detection of the language does not occur and this field is empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedLanguageCode")]
		public string DetectedLanguageCode { get; set; }
		
		/// <summary>
		/// The translated document's mime type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// A sentence pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Example
	{
		
		/// <summary>
		/// Output only. The resource name of the example, in form of `projects/{project-number-or-id}/locations/{location_id}/datasets/{dataset_id}/examples/{example_id}'
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Sentence in source language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceText")]
		public string SourceText { get; set; }
		
		/// <summary>
		/// Sentence in target language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetText")]
		public string TargetText { get; set; }
		
		/// <summary>
		/// Output only. Usage of the sentence pair. Options are TRAIN|VALIDATION|TEST.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public string Usage { get; set; }
	}
	
	/// <summary>
	/// Request message for ExportData.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExportDataRequest
	{
		
		/// <summary>
		/// Output configuration for datasets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputConfig")]
		public DatasetOutputConfig OutputConfig { get; set; }
	}
	
	/// <summary>
	/// An inlined file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileInputSource
	{
		
		/// <summary>
		/// Required. The file's byte contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Required. The file's display name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required. The file's mime type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
	}
	
	/// <summary>
	/// Represents a glossary built from user-provided data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Glossary
	{
		
		/// <summary>
		/// Optional. The display name of the glossary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. When the glossary creation was finished.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. The number of entries defined in the glossary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entryCount")]
		public System.Nullable<System.Int32> EntryCount { get; set; }
		
		/// <summary>
		/// Input configuration for glossaries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputConfig")]
		public GlossaryInputConfig InputConfig { get; set; }
		
		/// <summary>
		/// Used with equivalent term set glossaries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCodesSet")]
		public LanguageCodesSet LanguageCodesSet { get; set; }
		
		/// <summary>
		/// Used with unidirectional glossaries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languagePair")]
		public LanguageCodePair LanguagePair { get; set; }
		
		/// <summary>
		/// Required. The resource name of the glossary. Glossary names have the form `projects/{project-number-or-id}/locations/{location-id}/glossaries/{glossary-id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. When CreateGlossary was called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submitTime")]
		public string SubmitTime { get; set; }
	}
	
	/// <summary>
	/// Input configuration for glossaries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlossaryInputConfig
	{
		
		/// <summary>
		/// The Google Cloud Storage location for the input content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsSource")]
		public GcsSource GcsSource { get; set; }
	}
	
	/// <summary>
	/// Used with equivalent term set glossaries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LanguageCodesSet
	{
		
		/// <summary>
		/// The ISO-639 language code(s) for terms defined in the glossary. All entries are unique. The list contains at least two entries. Expected to be an exact match for GlossaryTerm.language_code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCodes")]
		public string[] LanguageCodes { get; set; }
	}
	
	/// <summary>
	/// Used with unidirectional glossaries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LanguageCodePair
	{
		
		/// <summary>
		/// Required. The ISO-639 language code of the input text, for example, "en-US". Expected to be an exact match for GlossaryTerm.language_code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceLanguageCode")]
		public string SourceLanguageCode { get; set; }
		
		/// <summary>
		/// Required. The ISO-639 language code for translation output, for example, "zh-CN". Expected to be an exact match for GlossaryTerm.language_code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLanguageCode")]
		public string TargetLanguageCode { get; set; }
	}
	
	/// <summary>
	/// Represents a single entry in a glossary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlossaryEntry
	{
		
		/// <summary>
		/// Describes the glossary entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required. The resource name of the entry. Format: "projects/*/locations/*/glossaries/*/glossaryEntries/*"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents a single entry for an unidirectional glossary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termsPair")]
		public GlossaryTermsPair TermsPair { get; set; }
		
		/// <summary>
		/// Represents a single entry for an equivalent term set glossary. This is used for equivalent term sets where each term can be replaced by the other terms in the set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="termsSet")]
		public GlossaryTermsSet TermsSet { get; set; }
	}
	
	/// <summary>
	/// Represents a single entry for an unidirectional glossary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlossaryTermsPair
	{
		
		/// <summary>
		/// Represents a single glossary term
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceTerm")]
		public GlossaryTerm SourceTerm { get; set; }
		
		/// <summary>
		/// Represents a single glossary term
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetTerm")]
		public GlossaryTerm TargetTerm { get; set; }
	}
	
	/// <summary>
	/// Represents a single glossary term
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlossaryTerm
	{
		
		/// <summary>
		/// The language for this glossary term.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// The text for the glossary term.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Represents a single entry for an equivalent term set glossary. This is used for equivalent term sets where each term can be replaced by the other terms in the set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GlossaryTermsSet
	{
		
		/// <summary>
		/// Each term in the set represents a term that can be replaced by the other terms.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="terms")]
		public GlossaryTerm[] Terms { get; set; }
	}
	
	/// <summary>
	/// The request for importing an AdaptiveMt file along with its sentences.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportAdaptiveMtFileRequest
	{
		
		/// <summary>
		/// An inlined file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileInputSource")]
		public FileInputSource FileInputSource { get; set; }
		
		/// <summary>
		/// The Google Cloud Storage location for the input content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gcsInputSource")]
		public GcsInputSource GcsInputSource { get; set; }
	}
	
	/// <summary>
	/// The response for importing an AdaptiveMtFile
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportAdaptiveMtFileResponse
	{
		
		/// <summary>
		/// An AdaptiveMtFile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adaptiveMtFile")]
		public AdaptiveMtFile AdaptiveMtFile { get; set; }
	}
	
	/// <summary>
	/// Request message for ImportData.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportDataRequest
	{
		
		/// <summary>
		/// Input configuration for datasets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputConfig")]
		public DatasetInputConfig InputConfig { get; set; }
	}
	
	/// <summary>
	/// A list of AdaptiveMtDatasets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAdaptiveMtDatasetsResponse
	{
		
		/// <summary>
		/// Output only. A list of Adaptive MT datasets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adaptiveMtDatasets")]
		public AdaptiveMtDataset[] AdaptiveMtDatasets { get; set; }
		
		/// <summary>
		/// Optional. A token to retrieve a page of results. Pass this value in the [ListAdaptiveMtDatasetsRequest.page_token] field in the subsequent call to `ListAdaptiveMtDatasets` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response for listing all AdaptiveMt files under a given dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAdaptiveMtFilesResponse
	{
		
		/// <summary>
		/// Output only. The Adaptive MT files.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adaptiveMtFiles")]
		public AdaptiveMtFile[] AdaptiveMtFiles { get; set; }
		
		/// <summary>
		/// Optional. A token to retrieve a page of results. Pass this value in the ListAdaptiveMtFilesRequest.page_token field in the subsequent call to `ListAdaptiveMtFiles` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// List AdaptiveMt sentences response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAdaptiveMtSentencesResponse
	{
		
		/// <summary>
		/// Output only. The list of AdaptiveMtSentences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adaptiveMtSentences")]
		public AdaptiveMtSentence[] AdaptiveMtSentences { get; set; }
		
		/// <summary>
		/// Optional. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for ListDatasets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDatasetsResponse
	{
		
		/// <summary>
		/// The datasets read.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasets")]
		public Dataset[] Datasets { get; set; }
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this token to the page_token field in the ListDatasetsRequest to obtain the corresponding page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for ListExamples.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListExamplesResponse
	{
		
		/// <summary>
		/// The sentence pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="examples")]
		public Example[] Examples { get; set; }
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this token to the page_token field in the ListExamplesRequest to obtain the corresponding page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for ListGlossaries.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGlossariesResponse
	{
		
		/// <summary>
		/// The list of glossaries for a project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glossaries")]
		public Glossary[] Glossaries { get; set; }
		
		/// <summary>
		/// A token to retrieve a page of results. Pass this value in the [ListGlossariesRequest.page_token] field in the subsequent call to `ListGlossaries` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for ListGlossaryEntries
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGlossaryEntriesResponse
	{
		
		/// <summary>
		/// Optional. The Glossary Entries
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glossaryEntries")]
		public GlossaryEntry[] GlossaryEntries { get; set; }
		
		/// <summary>
		/// Optional. A token to retrieve a page of results. Pass this value in the [ListGLossaryEntriesRequest.page_token] field in the subsequent calls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for Locations.ListLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLocationsResponse
	{
		
		/// <summary>
		/// A list of locations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public Location[] Locations { get; set; }
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A resource that represents a Google Cloud location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// The friendly name for this location, typically a nearby city name. For example, "Tokyo".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The canonical id for this location. For example: `"us-east1"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		/// <summary>
		/// Service-specific metadata. For example the available capacity at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Response message for ListModels.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListModelsResponse
	{
		
		/// <summary>
		/// The models read.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="models")]
		public Model[] Models { get; set; }
		
		/// <summary>
		/// A token to retrieve next page of results. Pass this token to the page_token field in the ListModelsRequest to obtain the corresponding page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A trained translation model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Model
	{
		
		/// <summary>
		/// Output only. Timestamp when the model resource was created, which is also when the training started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The dataset from which the model is trained, in form of `projects/{project-number-or-id}/locations/{location_id}/datasets/{dataset_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public string Dataset { get; set; }
		
		/// <summary>
		/// The name of the model to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The resource name of the model, in form of `projects/{project-number-or-id}/locations/{location_id}/models/{model_id}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The BCP-47 language code of the source language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceLanguageCode")]
		public string SourceLanguageCode { get; set; }
		
		/// <summary>
		/// Output only. The BCP-47 language code of the target language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLanguageCode")]
		public string TargetLanguageCode { get; set; }
		
		/// <summary>
		/// Output only. Number of examples (sentence pairs) used to test the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testExampleCount")]
		public System.Nullable<System.Int32> TestExampleCount { get; set; }
		
		/// <summary>
		/// Output only. Number of examples (sentence pairs) used to train the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trainExampleCount")]
		public System.Nullable<System.Int32> TrainExampleCount { get; set; }
		
		/// <summary>
		/// Output only. Timestamp when this model was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Output only. Number of examples (sentence pairs) used to validate the model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validateExampleCount")]
		public System.Nullable<System.Int32> ValidateExampleCount { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// A single romanization response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Romanization
	{
		
		/// <summary>
		/// The ISO-639 language code of source text in the initial request, detected automatically, if no source language was passed within the initial request. If the source language was passed, auto-detection of the language does not occur and this field is empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedLanguageCode")]
		public string DetectedLanguageCode { get; set; }
		
		/// <summary>
		/// Romanized text. If an error occurs during romanization, this field might be excluded from the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="romanizedText")]
		public string RomanizedText { get; set; }
	}
	
	/// <summary>
	/// The request message for synchronous romanization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RomanizeTextRequest
	{
		
		/// <summary>
		/// Required. The content of the input in string format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string[] Contents { get; set; }
		
		/// <summary>
		/// Optional. The ISO-639 language code of the input text if known, for example, "hi" or "zh". If the source language isn't specified, the API attempts to identify the source language automatically and returns the source language for each content in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceLanguageCode")]
		public string SourceLanguageCode { get; set; }
	}
	
	/// <summary>
	/// The response message for synchronous romanization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RomanizeTextResponse
	{
		
		/// <summary>
		/// Text romanization responses. This field has the same length as `contents`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="romanizations")]
		public Romanization[] Romanizations { get; set; }
	}
	
	/// <summary>
	/// A single supported language response corresponds to information related to one supported language.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SupportedLanguage
	{
		
		/// <summary>
		/// Human-readable name of the language localized in the display language specified in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Supported language code, generally consisting of its ISO 639-1 identifier, for example, 'en', 'ja'. In certain cases, ISO-639 codes including language and region identifiers are returned (for example, 'zh-TW' and 'zh-CN').
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// Can be used as a source language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportSource")]
		public System.Nullable<System.Boolean> SupportSource { get; set; }
		
		/// <summary>
		/// Can be used as a target language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportTarget")]
		public System.Nullable<System.Boolean> SupportTarget { get; set; }
	}
	
	/// <summary>
	/// The response message for discovering supported languages.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SupportedLanguages
	{
		
		/// <summary>
		/// A list of supported language responses. This list contains an entry for each language the Translation API supports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public SupportedLanguage[] Languages { get; set; }
	}
	
	/// <summary>
	/// A document translation request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TranslateDocumentRequest
	{
		
		/// <summary>
		/// Optional. This flag is to support user customized attribution. If not provided, the default is `Machine Translated by Google`. Customized attribution should follow rules in https://cloud.google.com/translate/attribution#attribution_and_logos
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customizedAttribution")]
		public string CustomizedAttribution { get; set; }
		
		/// <summary>
		/// A document translation request input config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentInputConfig")]
		public DocumentInputConfig DocumentInputConfig { get; set; }
		
		/// <summary>
		/// A document translation request output config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentOutputConfig")]
		public DocumentOutputConfig DocumentOutputConfig { get; set; }
		
		/// <summary>
		/// Optional. If true, enable auto rotation correction in DVS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableRotationCorrection")]
		public System.Nullable<System.Boolean> EnableRotationCorrection { get; set; }
		
		/// <summary>
		/// Optional. If true, use the text removal server to remove the shadow text on background image for native pdf translation. Shadow removal feature can only be enabled when is_translate_native_pdf_only: false && pdf_native_only: false
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableShadowRemovalNativePdf")]
		public System.Nullable<System.Boolean> EnableShadowRemovalNativePdf { get; set; }
		
		/// <summary>
		/// Configures which glossary is used for a specific target language and defines options for applying that glossary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glossaryConfig")]
		public TranslateTextGlossaryConfig GlossaryConfig { get; set; }
		
		/// <summary>
		/// Optional. is_translate_native_pdf_only field for external customers. If true, the page limit of online native pdf translation is 300 and only native pdf pages will be translated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isTranslateNativePdfOnly")]
		public System.Nullable<System.Boolean> IsTranslateNativePdfOnly { get; set; }
		
		/// <summary>
		/// Optional. The labels with user-defined metadata for the request. Label keys and values can be no longer than 63 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter. See https://cloud.google.com/translate/docs/advanced/labels for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Optional. The `model` type requested for this translation. The format depends on model type: - AutoML Translation models: `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}` - General (built-in) models: `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`, If not provided, the default Google model (NMT) will be used for translation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// Optional. The ISO-639 language code of the input document if known, for example, "en-US" or "sr-Latn". Supported language codes are listed in Language Support. If the source language isn't specified, the API attempts to identify the source language automatically and returns the source language within the response. Source language must be specified if the request contains a glossary or a custom model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceLanguageCode")]
		public string SourceLanguageCode { get; set; }
		
		/// <summary>
		/// Required. The ISO-639 language code to use for translation of the input document, set to one of the language codes listed in Language Support.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLanguageCode")]
		public string TargetLanguageCode { get; set; }
	}
	
	/// <summary>
	/// A translated document response message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TranslateDocumentResponse
	{
		
		/// <summary>
		/// A translated document message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentTranslation")]
		public DocumentTranslation DocumentTranslation { get; set; }
		
		/// <summary>
		/// Configures which glossary is used for a specific target language and defines options for applying that glossary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glossaryConfig")]
		public TranslateTextGlossaryConfig GlossaryConfig { get; set; }
		
		/// <summary>
		/// A translated document message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glossaryDocumentTranslation")]
		public DocumentTranslation GlossaryDocumentTranslation { get; set; }
		
		/// <summary>
		/// Only present when 'model' is present in the request. 'model' is normalized to have a project number. For example: If the 'model' field in TranslateDocumentRequest is: `projects/{project-id}/locations/{location-id}/models/general/nmt` then `model` here would be normalized to `projects/{project-number}/locations/{location-id}/models/general/nmt`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
	}
	
	/// <summary>
	/// The request message for synchronous translation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TranslateTextRequest
	{
		
		/// <summary>
		/// Required. The content of the input in string format. We recommend the total content be less than 30,000 codepoints. The max length of this field is 1024. Use BatchTranslateText for larger text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public string[] Contents { get; set; }
		
		/// <summary>
		/// Configures which glossary is used for a specific target language and defines options for applying that glossary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glossaryConfig")]
		public TranslateTextGlossaryConfig GlossaryConfig { get; set; }
		
		/// <summary>
		/// Optional. The labels with user-defined metadata for the request. Label keys and values can be no longer than 63 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter. See https://cloud.google.com/translate/docs/advanced/labels for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Optional. The format of the source text, for example, "text/html", "text/plain". If left blank, the MIME type defaults to "text/html".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// Optional. The `model` type requested for this translation. The format depends on model type: - AutoML Translation models: `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}` - General (built-in) models: `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`, For global (non-regionalized) requests, use `location-id` `global`. For example, `projects/{project-number-or-id}/locations/global/models/general/nmt`. If not provided, the default Google model (NMT) will be used
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// Optional. The ISO-639 language code of the input text if known, for example, "en-US" or "sr-Latn". Supported language codes are listed in Language Support. If the source language isn't specified, the API attempts to identify the source language automatically and returns the source language within the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceLanguageCode")]
		public string SourceLanguageCode { get; set; }
		
		/// <summary>
		/// Required. The ISO-639 language code to use for translation of the input text, set to one of the language codes listed in Language Support.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetLanguageCode")]
		public string TargetLanguageCode { get; set; }
		
		/// <summary>
		/// Configures transliteration feature on top of translation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transliterationConfig")]
		public TransliterationConfig TransliterationConfig { get; set; }
	}
	
	/// <summary>
	/// Configures transliteration feature on top of translation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransliterationConfig
	{
		
		/// <summary>
		/// If true, source text in romanized form can be translated to the target language.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableTransliteration")]
		public System.Nullable<System.Boolean> EnableTransliteration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TranslateTextResponse
	{
		
		/// <summary>
		/// Text translation responses if a glossary is provided in the request. This can be the same as `translations` if no terms apply. This field has the same length as `contents`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glossaryTranslations")]
		public Translation[] GlossaryTranslations { get; set; }
		
		/// <summary>
		/// Text translation responses with no glossary applied. This field has the same length as `contents`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translations")]
		public Translation[] Translations { get; set; }
	}
	
	/// <summary>
	/// A single translation response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Translation
	{
		
		/// <summary>
		/// The ISO-639 language code of source text in the initial request, detected automatically, if no source language was passed within the initial request. If the source language was passed, auto-detection of the language does not occur and this field is empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedLanguageCode")]
		public string DetectedLanguageCode { get; set; }
		
		/// <summary>
		/// Configures which glossary is used for a specific target language and defines options for applying that glossary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glossaryConfig")]
		public TranslateTextGlossaryConfig GlossaryConfig { get; set; }
		
		/// <summary>
		/// Only present when `model` is present in the request. `model` here is normalized to have project number. For example: If the `model` requested in TranslationTextRequest is `projects/{project-id}/locations/{location-id}/models/general/nmt` then `model` here would be normalized to `projects/{project-number}/locations/{location-id}/models/general/nmt`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// Text translated into the target language. If an error occurs during translation, this field might be excluded from the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translatedText")]
		public string TranslatedText { get; set; }
	}
	
	/// <summary>
	/// The request message for Operations.WaitOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WaitOperationRequest
	{
		
		/// <summary>
		/// The maximum duration to wait before timing out. If left blank, the wait will be at most the time permitted by the underlying HTTP/RPC protocol. If RPC context deadline is also specified, the shorter one will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Exports dataset's data to the provided output location.
		/// Translate_projects_locations_datasets_exportData v3/{dataset}:exportData
		/// </summary>
		/// <param name="dataset">Required. Name of the dataset. In form of `projects/{project-number-or-id}/locations/{location-id}/datasets/{dataset-id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Translate_projects_locations_datasets_exportDataAsync(string dataset, ExportDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (dataset==null? "" : System.Uri.EscapeDataString(dataset))+":exportData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Import sentence pairs into translation Dataset.
		/// Translate_projects_locations_datasets_importData v3/{dataset}:importData
		/// </summary>
		/// <param name="dataset">Required. Name of the dataset. In form of `projects/{project-number-or-id}/locations/{location-id}/datasets/{dataset-id}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Translate_projects_locations_datasets_importDataAsync(string dataset, ImportDataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (dataset==null? "" : System.Uri.EscapeDataString(dataset))+":importData";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
		/// Translate_projects_locations_operations_delete v3/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource to be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Translate_projects_locations_operations_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Translate_projects_locations_operations_get v3/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Translate_projects_locations_operations_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a glossary entry.
		/// Translate_projects_locations_glossaries_glossaryEntries_patch v3/{name}
		/// </summary>
		/// <param name="name">Required. The resource name of the entry. Format: "projects/*/locations/*/glossaries/*/glossaryEntries/*"</param>
		/// <param name="updateMask">The list of fields to be updated. Currently only `display_name` and 'input_config'</param>
		/// <returns>Successful response</returns>
		public async Task<GlossaryEntry> Translate_projects_locations_glossaries_glossaryEntries_patchAsync(string name, string updateMask, GlossaryEntry requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GlossaryEntry>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists information about the supported locations for this service.
		/// Translate_projects_locations_list v3/{name}/locations
		/// </summary>
		/// <param name="name">The resource that owns the locations collection, if applicable.</param>
		/// <param name="filter">A filter to narrow down results to a preferred subset. The filtering language accepts strings like `"displayName=tokyo"`, and is documented in more detail in [AIP-160](https://google.aip.dev/160).</param>
		/// <param name="pageSize">The maximum number of results to return. If not set, the service selects a default.</param>
		/// <param name="pageToken">A page token received from the `next_page_token` field in the response. Send that page token to receive the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationsResponse> Translate_projects_locations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/locations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListLocationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Translate_projects_locations_operations_list v3/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Translate_projects_locations_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Translate_projects_locations_operations_cancel v3/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Translate_projects_locations_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Waits until the specified long-running operation is done or reaches at most a specified timeout, returning the latest state. If the operation is already done, the latest state is immediately returned. If the timeout specified is greater than the default HTTP/RPC timeout, the HTTP/RPC timeout is used. If the server does not support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Note that this method is on a best-effort basis. It may return the latest state before the specified timeout (including immediately), meaning even an immediate response is no guarantee that the operation is done.
		/// Translate_projects_locations_operations_wait v3/{name}:wait
		/// </summary>
		/// <param name="name">The name of the operation resource to wait on.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Translate_projects_locations_operations_waitAsync(string name, WaitOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":wait";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all Adaptive MT datasets for which the caller has read permission.
		/// Translate_projects_locations_adaptiveMtDatasets_list v3/{parent}/adaptiveMtDatasets
		/// </summary>
		/// <param name="parent">Required. The resource name of the project from which to list the Adaptive MT datasets. `projects/{project-number-or-id}/locations/{location-id}`</param>
		/// <param name="filter">Optional. An expression for filtering the results of the request. Filter is not supported yet.</param>
		/// <param name="pageSize">Optional. Requested page size. The server may return fewer results than requested. If unspecified, the server picks an appropriate default.</param>
		/// <param name="pageToken">Optional. A token identifying a page of results the server should return. Typically, this is the value of ListAdaptiveMtDatasetsResponse.next_page_token returned from the previous call to `ListAdaptiveMtDatasets` method. The first page is returned if `page_token`is empty or missing.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAdaptiveMtDatasetsResponse> Translate_projects_locations_adaptiveMtDatasets_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/adaptiveMtDatasets&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAdaptiveMtDatasetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an Adaptive MT dataset.
		/// Translate_projects_locations_adaptiveMtDatasets_create v3/{parent}/adaptiveMtDatasets
		/// </summary>
		/// <param name="parent">Required. Name of the parent project. In form of `projects/{project-number-or-id}/locations/{location-id}`</param>
		/// <returns>Successful response</returns>
		public async Task<AdaptiveMtDataset> Translate_projects_locations_adaptiveMtDatasets_createAsync(string parent, AdaptiveMtDataset requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/adaptiveMtDatasets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AdaptiveMtDataset>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all AdaptiveMtFiles associated to an AdaptiveMtDataset.
		/// Translate_projects_locations_adaptiveMtDatasets_adaptiveMtFiles_list v3/{parent}/adaptiveMtFiles
		/// </summary>
		/// <param name="parent">Required. The resource name of the project from which to list the Adaptive MT files. `projects/{project}/locations/{location}/adaptiveMtDatasets/{dataset}`</param>
		/// <param name="pageSize">Optional. </param>
		/// <param name="pageToken">Optional. A token identifying a page of results the server should return. Typically, this is the value of ListAdaptiveMtFilesResponse.next_page_token returned from the previous call to `ListAdaptiveMtFiles` method. The first page is returned if `page_token`is empty or missing.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAdaptiveMtFilesResponse> Translate_projects_locations_adaptiveMtDatasets_adaptiveMtFiles_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/adaptiveMtFiles&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAdaptiveMtFilesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all AdaptiveMtSentences under a given file/dataset.
		/// Translate_projects_locations_adaptiveMtDatasets_adaptiveMtSentences_list v3/{parent}/adaptiveMtSentences
		/// </summary>
		/// <param name="parent">Required. The resource name of the project from which to list the Adaptive MT files. The following format lists all sentences under a file. `projects/{project}/locations/{location}/adaptiveMtDatasets/{dataset}/adaptiveMtFiles/{file}` The following format lists all sentences within a dataset. `projects/{project}/locations/{location}/adaptiveMtDatasets/{dataset}`</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of ListAdaptiveMtSentencesRequest.next_page_token returned from the previous call to `ListTranslationMemories` method. The first page is returned if `page_token` is empty or missing.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAdaptiveMtSentencesResponse> Translate_projects_locations_adaptiveMtDatasets_adaptiveMtSentences_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/adaptiveMtSentences&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAdaptiveMtSentencesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists datasets.
		/// Translate_projects_locations_datasets_list v3/{parent}/datasets
		/// </summary>
		/// <param name="parent">Required. Name of the parent project. In form of `projects/{project-number-or-id}/locations/{location-id}`</param>
		/// <param name="pageSize">Optional. Requested page size. The server can return fewer results than requested.</param>
		/// <param name="pageToken">Optional. A token identifying a page of results for the server to return. Typically obtained from next_page_token field in the response of a ListDatasets call.</param>
		/// <returns>Successful response</returns>
		public async Task<ListDatasetsResponse> Translate_projects_locations_datasets_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/datasets&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDatasetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Dataset.
		/// Translate_projects_locations_datasets_create v3/{parent}/datasets
		/// </summary>
		/// <param name="parent">Required. The project name.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Translate_projects_locations_datasets_createAsync(string parent, Dataset requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/datasets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists sentence pairs in the dataset.
		/// Translate_projects_locations_datasets_examples_list v3/{parent}/examples
		/// </summary>
		/// <param name="parent">Required. Name of the parent dataset. In form of `projects/{project-number-or-id}/locations/{location-id}/datasets/{dataset-id}`</param>
		/// <param name="filter">Optional. An expression for filtering the examples that will be returned. Example filter: * `usage=TRAIN`</param>
		/// <param name="pageSize">Optional. Requested page size. The server can return fewer results than requested.</param>
		/// <param name="pageToken">Optional. A token identifying a page of results for the server to return. Typically obtained from next_page_token field in the response of a ListExamples call.</param>
		/// <returns>Successful response</returns>
		public async Task<ListExamplesResponse> Translate_projects_locations_datasets_examples_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/examples&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListExamplesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists glossaries in a project. Returns NOT_FOUND, if the project doesn't exist.
		/// Translate_projects_locations_glossaries_list v3/{parent}/glossaries
		/// </summary>
		/// <param name="parent">Required. The name of the project from which to list all of the glossaries.</param>
		/// <param name="filter">Optional. Filter specifying constraints of a list operation. Specify the constraint by the format of "key=value", where key must be "src" or "tgt", and the value must be a valid language code. For multiple restrictions, concatenate them by "AND" (uppercase only), such as: "src=en-US AND tgt=zh-CN". Notice that the exact match is used here, which means using 'en-US' and 'en' can lead to different results, which depends on the language code you used when you create the glossary. For the unidirectional glossaries, the "src" and "tgt" add restrictions on the source and target language code separately. For the equivalent term set glossaries, the "src" and/or "tgt" add restrictions on the term set. For example: "src=en-US AND tgt=zh-CN" will only pick the unidirectional glossaries which exactly match the source language code as "en-US" and the target language code "zh-CN", but all equivalent term set glossaries which contain "en-US" and "zh-CN" in their language set will be picked. If missing, no filtering is performed.</param>
		/// <param name="pageSize">Optional. Requested page size. The server may return fewer glossaries than requested. If unspecified, the server picks an appropriate default.</param>
		/// <param name="pageToken">Optional. A token identifying a page of results the server should return. Typically, this is the value of [ListGlossariesResponse.next_page_token] returned from the previous call to `ListGlossaries` method. The first page is returned if `page_token`is empty or missing.</param>
		/// <returns>Successful response</returns>
		public async Task<ListGlossariesResponse> Translate_projects_locations_glossaries_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/glossaries&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListGlossariesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a glossary and returns the long-running operation. Returns NOT_FOUND, if the project doesn't exist.
		/// Translate_projects_locations_glossaries_create v3/{parent}/glossaries
		/// </summary>
		/// <param name="parent">Required. The project name.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Translate_projects_locations_glossaries_createAsync(string parent, Glossary requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/glossaries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the entries for the glossary.
		/// Translate_projects_locations_glossaries_glossaryEntries_list v3/{parent}/glossaryEntries
		/// </summary>
		/// <param name="parent">Required. The parent glossary resource name for listing the glossary's entries.</param>
		/// <param name="pageSize">Optional. Requested page size. The server may return fewer glossary entries than requested. If unspecified, the server picks an appropriate default.</param>
		/// <param name="pageToken">Optional. A token identifying a page of results the server should return. Typically, this is the value of [ListGlossaryEntriesResponse.next_page_token] returned from the previous call. The first page is returned if `page_token`is empty or missing.</param>
		/// <returns>Successful response</returns>
		public async Task<ListGlossaryEntriesResponse> Translate_projects_locations_glossaries_glossaryEntries_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/glossaryEntries&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListGlossaryEntriesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a glossary entry.
		/// Translate_projects_locations_glossaries_glossaryEntries_create v3/{parent}/glossaryEntries
		/// </summary>
		/// <param name="parent">Required. The resource name of the glossary to create the entry under.</param>
		/// <returns>Successful response</returns>
		public async Task<GlossaryEntry> Translate_projects_locations_glossaries_glossaryEntries_createAsync(string parent, GlossaryEntry requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/glossaryEntries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GlossaryEntry>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists models.
		/// Translate_projects_locations_models_list v3/{parent}/models
		/// </summary>
		/// <param name="parent">Required. Name of the parent project. In form of `projects/{project-number-or-id}/locations/{location-id}`</param>
		/// <param name="filter">Optional. An expression for filtering the models that will be returned. Supported filter: `dataset_id=${dataset_id}`</param>
		/// <param name="pageSize">Optional. Requested page size. The server can return fewer results than requested.</param>
		/// <param name="pageToken">Optional. A token identifying a page of results for the server to return. Typically obtained from next_page_token field in the response of a ListModels call.</param>
		/// <returns>Successful response</returns>
		public async Task<ListModelsResponse> Translate_projects_locations_models_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/models&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListModelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a Model.
		/// Translate_projects_locations_models_create v3/{parent}/models
		/// </summary>
		/// <param name="parent">Required. The project name, in form of `projects/{project}/locations/{location}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Translate_projects_locations_models_createAsync(string parent, Model requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/models";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of supported languages for translation.
		/// Translate_projects_locations_getSupportedLanguages v3/{parent}/supportedLanguages
		/// </summary>
		/// <param name="parent">Required. Project or location to make a call. Must refer to a caller's project. Format: `projects/{project-number-or-id}` or `projects/{project-number-or-id}/locations/{location-id}`. For global calls, use `projects/{project-number-or-id}/locations/global` or `projects/{project-number-or-id}`. Non-global location is required for AutoML models. Only models within the same region (have same location-id) can be used, otherwise an INVALID_ARGUMENT (400) error is returned.</param>
		/// <param name="displayLanguageCode">Optional. The language to use to return localized, human readable names of supported languages. If missing, then display names are not returned in a response.</param>
		/// <param name="model">Optional. Get supported languages of this model. The format depends on model type: - AutoML Translation models: `projects/{project-number-or-id}/locations/{location-id}/models/{model-id}` - General (built-in) models: `projects/{project-number-or-id}/locations/{location-id}/models/general/nmt`, Returns languages supported by the specified model. If missing, we get supported languages of Google general NMT model.</param>
		/// <returns>Successful response</returns>
		public async Task<SupportedLanguages> Translate_projects_locations_getSupportedLanguagesAsync(string parent, string displayLanguageCode, string model, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/supportedLanguages&displayLanguageCode=" + (displayLanguageCode==null? "" : System.Uri.EscapeDataString(displayLanguageCode))+"&model=" + (model==null? "" : System.Uri.EscapeDataString(model));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SupportedLanguages>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Translate text using Adaptive MT.
		/// Translate_projects_locations_adaptiveMtTranslate v3/{parent}:adaptiveMtTranslate
		/// </summary>
		/// <param name="parent">Required. Location to make a regional call. Format: `projects/{project-number-or-id}/locations/{location-id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<AdaptiveMtTranslateResponse> Translate_projects_locations_adaptiveMtTranslateAsync(string parent, AdaptiveMtTranslateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":adaptiveMtTranslate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AdaptiveMtTranslateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Translates a large volume of document in asynchronous batch mode. This function provides real-time output as the inputs are being processed. If caller cancels a request, the partial results (for an input file, it's all or nothing) may still be available on the specified output location. This call returns immediately and you can use google.longrunning.Operation.name to poll the status of the call.
		/// Translate_projects_locations_batchTranslateDocument v3/{parent}:batchTranslateDocument
		/// </summary>
		/// <param name="parent">Required. Location to make a regional call. Format: `projects/{project-number-or-id}/locations/{location-id}`. The `global` location is not supported for batch translation. Only AutoML Translation models or glossaries within the same region (have the same location-id) can be used, otherwise an INVALID_ARGUMENT (400) error is returned.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Translate_projects_locations_batchTranslateDocumentAsync(string parent, BatchTranslateDocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":batchTranslateDocument";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Translates a large volume of text in asynchronous batch mode. This function provides real-time output as the inputs are being processed. If caller cancels a request, the partial results (for an input file, it's all or nothing) may still be available on the specified output location. This call returns immediately and you can use google.longrunning.Operation.name to poll the status of the call.
		/// Translate_projects_locations_batchTranslateText v3/{parent}:batchTranslateText
		/// </summary>
		/// <param name="parent">Required. Location to make a call. Must refer to a caller's project. Format: `projects/{project-number-or-id}/locations/{location-id}`. The `global` location is not supported for batch translation. Only AutoML Translation models or glossaries within the same region (have the same location-id) can be used, otherwise an INVALID_ARGUMENT (400) error is returned.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Translate_projects_locations_batchTranslateTextAsync(string parent, BatchTranslateTextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":batchTranslateText";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Detects the language of text within a request.
		/// Translate_projects_locations_detectLanguage v3/{parent}:detectLanguage
		/// </summary>
		/// <param name="parent">Required. Project or location to make a call. Must refer to a caller's project. Format: `projects/{project-number-or-id}/locations/{location-id}` or `projects/{project-number-or-id}`. For global calls, use `projects/{project-number-or-id}/locations/global` or `projects/{project-number-or-id}`. Only models within the same region (has same location-id) can be used. Otherwise an INVALID_ARGUMENT (400) error is returned.</param>
		/// <returns>Successful response</returns>
		public async Task<DetectLanguageResponse> Translate_projects_locations_detectLanguageAsync(string parent, DetectLanguageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":detectLanguage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DetectLanguageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Imports an AdaptiveMtFile and adds all of its sentences into the AdaptiveMtDataset.
		/// Translate_projects_locations_adaptiveMtDatasets_importAdaptiveMtFile v3/{parent}:importAdaptiveMtFile
		/// </summary>
		/// <param name="parent">Required. The resource name of the file, in form of `projects/{project-number-or-id}/locations/{location_id}/adaptiveMtDatasets/{dataset}`</param>
		/// <returns>Successful response</returns>
		public async Task<ImportAdaptiveMtFileResponse> Translate_projects_locations_adaptiveMtDatasets_importAdaptiveMtFileAsync(string parent, ImportAdaptiveMtFileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":importAdaptiveMtFile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportAdaptiveMtFileResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Romanize input text written in non-Latin scripts to Latin text.
		/// Translate_projects_locations_romanizeText v3/{parent}:romanizeText
		/// </summary>
		/// <param name="parent">Required. Project or location to make a call. Must refer to a caller's project. Format: `projects/{project-number-or-id}/locations/{location-id}` or `projects/{project-number-or-id}`. For global calls, use `projects/{project-number-or-id}/locations/global` or `projects/{project-number-or-id}`.</param>
		/// <returns>Successful response</returns>
		public async Task<RomanizeTextResponse> Translate_projects_locations_romanizeTextAsync(string parent, RomanizeTextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":romanizeText";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RomanizeTextResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Translates documents in synchronous mode.
		/// Translate_projects_locations_translateDocument v3/{parent}:translateDocument
		/// </summary>
		/// <param name="parent">Required. Location to make a regional call. Format: `projects/{project-number-or-id}/locations/{location-id}`. For global calls, use `projects/{project-number-or-id}/locations/global` or `projects/{project-number-or-id}`. Non-global location is required for requests using AutoML models or custom glossaries. Models and glossaries must be within the same region (have the same location-id), otherwise an INVALID_ARGUMENT (400) error is returned.</param>
		/// <returns>Successful response</returns>
		public async Task<TranslateDocumentResponse> Translate_projects_locations_translateDocumentAsync(string parent, TranslateDocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":translateDocument";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TranslateDocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Translates input text and returns translated text.
		/// Translate_projects_locations_translateText v3/{parent}:translateText
		/// </summary>
		/// <param name="parent">Required. Project or location to make a call. Must refer to a caller's project. Format: `projects/{project-number-or-id}` or `projects/{project-number-or-id}/locations/{location-id}`. For global calls, use `projects/{project-number-or-id}/locations/global` or `projects/{project-number-or-id}`. Non-global location is required for requests using AutoML models or custom glossaries. Models and glossaries must be within the same region (have same location-id), otherwise an INVALID_ARGUMENT (400) error is returned.</param>
		/// <returns>Successful response</returns>
		public async Task<TranslateTextResponse> Translate_projects_locations_translateTextAsync(string parent, TranslateTextRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v3/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":translateText";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TranslateTextResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
