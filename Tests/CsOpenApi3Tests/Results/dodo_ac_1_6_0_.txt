//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Bad request (often an invalid input).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error400
	{
		
		/// <summary>
		/// A more in-depth description of the issue, including parameters and/or error text when available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// A brief title describing the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Unauthorized.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error401
	{
		
		/// <summary>
		/// A more in-depth description of the issue, including parameters and/or error text when available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// A brief title describing the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Not found.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error404
	{
		
		/// <summary>
		/// A more in-depth description of the issue, including parameters and/or error text when available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// A brief title describing the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Internal server error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error500
	{
		
		/// <summary>
		/// A more in-depth description of the issue, including parameters and/or error text when available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// A brief title describing the error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NHArtwork
	{
		
		/// <summary>
		/// The name of the real-life analog to the artwork.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="art_name")]
		public string Art_name { get; set; }
		
		/// <summary>
		/// The art style of the artwork.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="art_style")]
		public string Art_style { get; set; }
		
		/// <summary>
		/// The type of artwork (either a painting or statue).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="art_type")]
		public System.Nullable<NHArtworkArt_type> Art_type { get; set; }
		
		/// <summary>
		/// The author of the real-life analog to the artwork.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		/// <summary>
		/// The availability of the artwork.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public string Availability { get; set; }
		
		/// <summary>
		/// The number of Bells the artwork may be purchased for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public System.Nullable<System.Int32> Buy { get; set; }
		
		/// <summary>
		/// Information about the fake version of the artwork. If there is no fake, `fake_info`'s value will be `null`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fake_info")]
		public NHArtworkFake_info Fake_info { get; set; }
		
		/// <summary>
		/// Whether the artwork has a fake or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="has_fake")]
		public System.Nullable<System.Boolean> Has_fake { get; set; }
		
		/// <summary>
		/// The length of the artwork.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Single> Length { get; set; }
		
		/// <summary>
		/// Name of the artwork.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Information about the genuine version of the artwork.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="real_info")]
		public NHArtworkReal_info Real_info { get; set; }
		
		/// <summary>
		/// The number of Bells the artwork can be sold to Nook's store for, when it is genuine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sell")]
		public System.Nullable<System.Int32> Sell { get; set; }
		
		/// <summary>
		/// Link to the respective Nookipedia article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The width of the artwork.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Single> Width { get; set; }
		
		/// <summary>
		/// The year that the real-life analog was made. May be an exact year, an estimate ("circa"), or a range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public string Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NHArtworkArt_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Painting = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Statue = 1,
	}
	
	public class NHArtworkFake_info
	{
		
		/// <summary>
		/// A description of how to identify the fake artwork.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Image of the fake artwork.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// The texture of the artwork. Note that statues will not have a texture (value will be empty string).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="texture_url")]
		public string Texture_url { get; set; }
	}
	
	public class NHArtworkReal_info
	{
		
		/// <summary>
		/// The description of the artwork.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Image of the real artwork.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// The texture of the artwork. Note that statues will not have a texture (value will be empty string).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="texture_url")]
		public string Texture_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NHBug
	{
		
		/// <summary>
		/// An array of possible catchphrases the player says after catching the bug. Most critters have just one, but some can have multiple.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catchphrases")]
		public string[] Catchphrases { get; set; }
		
		/// <summary>
		/// Image of the bug.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// Short descriptor of where the bug can be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Name of the bug.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// When you can catch the bug in the Northern hemisphere.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="north")]
		public NHBugNorth North { get; set; }
		
		/// <summary>
		/// In-game bug number, marking position in the Critterpedia.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		/// <summary>
		/// How rare the bug is. Note that this field is currently empty for most bugs as we do not yet know how exactly bug rarities are calculated in the game code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rarity")]
		public string Rarity { get; set; }
		
		/// <summary>
		/// Render of the bug.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="render_url")]
		public string Render_url { get; set; }
		
		/// <summary>
		/// The number of Bells the bug can be sold to Flick for. This value is always 1.5x that of `sell_nook`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sell_flick")]
		public System.Nullable<System.Int32> Sell_flick { get; set; }
		
		/// <summary>
		/// The number of Bells the bug can be sold to Nook's store for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sell_nook")]
		public System.Nullable<System.Int32> Sell_nook { get; set; }
		
		/// <summary>
		/// When you can catch the bug in the Southern hemisphere.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="south")]
		public NHBugSouth South { get; set; }
		
		/// <summary>
		/// The length of the tank when the bug is placed as a furniture item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tank_length")]
		public System.Nullable<System.Single> Tank_length { get; set; }
		
		/// <summary>
		/// The width of the tank when the bug is placed as a furniture item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tank_width")]
		public System.Nullable<System.Single> Tank_width { get; set; }
		
		/// <summary>
		/// The total number of bug the player has to have caught before this bug will start spawning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_catch")]
		public System.Nullable<System.Int32> Total_catch { get; set; }
		
		/// <summary>
		/// Link to the respective Nookipedia article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class NHBugNorth
	{
		
		/// <summary>
		/// An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the northern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability_array")]
		public NHBugNorthAvailability_array[] NHBugNorthAvailability_array { get; set; }
		
		/// <summary>
		/// The months the bug is available for in the Northern hemisphere. If all year, value will be `"All year"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="months")]
		public string Months { get; set; }
		
		/// <summary>
		/// An array of integers representing the months the bug is available in the Northern hemisphere.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="months_array")]
		public int[] Months_array { get; set; }
		
		/// <summary>
		/// An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="times_by_month")]
		public NHBugNorthTimes_by_month Times_by_month { get; set; }
	}
	
	public class NHBugNorthAvailability_array
	{
		
		[System.Runtime.Serialization.DataMember(Name="months")]
		public string Months { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	public class NHBugNorthTimes_by_month
	{
		
		[System.Runtime.Serialization.DataMember(Name="1")]
		public string _1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="2")]
		public string _2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="3")]
		public string _3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="4")]
		public string _4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="5")]
		public string _5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="6")]
		public string _6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="7")]
		public string _7 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="8")]
		public string _8 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="9")]
		public string _9 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="10")]
		public string _10 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="11")]
		public string _11 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="12")]
		public string _12 { get; set; }
	}
	
	public class NHBugSouth
	{
		
		/// <summary>
		/// An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability_array")]
		public NHBugSouthAvailability_array[] NHBugSouthAvailability_array { get; set; }
		
		/// <summary>
		/// The months the bug is available for in the Southern hemisphere. If all year, value will be `"All year"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="months")]
		public string Months { get; set; }
		
		/// <summary>
		/// An array of integers representing the months the bug is available in the Southern hemisphere.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="months_array")]
		public int[] Months_array { get; set; }
		
		/// <summary>
		/// An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="times_by_month")]
		public NHBugSouthTimes_by_month Times_by_month { get; set; }
	}
	
	public class NHBugSouthAvailability_array
	{
		
		[System.Runtime.Serialization.DataMember(Name="months")]
		public string Months { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	public class NHBugSouthTimes_by_month
	{
		
		[System.Runtime.Serialization.DataMember(Name="1")]
		public string _1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="2")]
		public string _2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="3")]
		public string _3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="4")]
		public string _4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="5")]
		public string _5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="6")]
		public string _6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="7")]
		public string _7 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="8")]
		public string _8 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="9")]
		public string _9 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="10")]
		public string _10 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="11")]
		public string _11 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="12")]
		public string _12 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NHClothing
	{
		
		/// <summary>
		/// Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public NHClothingAvailability[] NHClothingAvailability { get; set; }
		
		/// <summary>
		/// An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public NHClothingBuy[] NHClothingBuy { get; set; }
		
		/// <summary>
		/// The category of item as shown in the player's inventory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<NHClothingCategory> Category { get; set; }
		
		/// <summary>
		/// The clothing's Label theme(s). This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label_themes")]
		public string[] Label_themes { get; set; }
		
		/// <summary>
		/// The name of the clothing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Any additional miscellaneous information about the clothing, such as a name change from a past update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The time of the year that the clothing is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seasonality")]
		public string Seasonality { get; set; }
		
		/// <summary>
		/// The number of Bells the clothing can be sold to the store for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sell")]
		public System.Nullable<System.Int32> Sell { get; set; }
		
		/// <summary>
		/// The clothing's style(s). Styles are used for gifting villagers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="styles")]
		public string[] Styles { get; set; }
		
		/// <summary>
		/// Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unlocked")]
		public System.Nullable<System.Boolean> Unlocked { get; set; }
		
		/// <summary>
		/// Link to the respective Nookipedia article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The total number of variations the clothing has, between 0 and 8.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variation_total")]
		public System.Nullable<NHClothingVariation_total> Variation_total { get; set; }
		
		/// <summary>
		/// An array of objects, each object representing a variation of the clothing. Clothing that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Clothing with multiple variations will have the `variation` fields defined with the name of each variation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variations")]
		public NHClothingVariations[] NHClothingVariations { get; set; }
		
		/// <summary>
		/// The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version_added")]
		public string Version_added { get; set; }
		
		/// <summary>
		/// Whether villagers may equip this item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vill_equip")]
		public System.Nullable<System.Boolean> Vill_equip { get; set; }
	}
	
	public class NHClothingAvailability
	{
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
	}
	
	public class NHClothingBuy
	{
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NHClothingCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tops = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bottoms = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Dress-up")]
		DressMinusup = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Headwear = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accessories = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Socks = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Shoes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bags = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Umbrellas = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NHClothingVariation_total
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
	}
	
	public class NHClothingVariations
	{
		
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public string[] Colors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variation")]
		public string Variation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NHEvent
	{
		
		/// <summary>
		/// The date of the event in YYYY-MM-DD format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// The description of the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public string Event { get; set; }
		
		/// <summary>
		/// The type of event. "Event" is a festivity the player can take part in. "Nook Shopping" refers to the [seasonal events](https://nookipedia.com/wiki/Nook_Shopping_seasonal_event) in which exclusive item(s) are available via []Nook Shopping](https://nookipedia.com/wiki/Nook_Shopping). "Recipes" refers to the start or end of certain recipes being available. "Birthday" refers to the birthday of a villager or special character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<NHEventType> Type { get; set; }
		
		/// <summary>
		/// Link to the respective Nookipedia article for the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NHEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Event = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Nook Shopping")]
		Nook_Shopping = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Recipes = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Birthday = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NHFish
	{
		
		/// <summary>
		/// An array of possible catchphrases the player says after catching the fish. Most critters have just one, but some can have multiple.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catchphrases")]
		public string[] Catchphrases { get; set; }
		
		/// <summary>
		/// Image of the fish.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// Short descriptor of where the fish can be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Name of the fish.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// When you can catch the fish in the Northern hemisphere.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="north")]
		public NHFishNorth North { get; set; }
		
		/// <summary>
		/// In-game fish number, marking position in the Critterpedia.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		/// <summary>
		/// How rare the fish is. Note that this field is currently empty for most fish as we do not yet know how exactly fish rarities are calculated in the game code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rarity")]
		public string Rarity { get; set; }
		
		/// <summary>
		/// Render of the fish.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="render_url")]
		public string Render_url { get; set; }
		
		/// <summary>
		/// The number of Bells the fish can be sold to C.J. for. This value is always 1.5x that of `sell_nook`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sell_cj")]
		public System.Nullable<System.Int32> Sell_cj { get; set; }
		
		/// <summary>
		/// The number of Bells the fish can be sold to Nook's store for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sell_nook")]
		public System.Nullable<System.Int32> Sell_nook { get; set; }
		
		/// <summary>
		/// The size of the fish's shadow.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shadow_size")]
		public System.Nullable<NHFishShadow_size> Shadow_size { get; set; }
		
		/// <summary>
		/// When you can catch the fish in the Southern hemisphere.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="south")]
		public NHFishSouth South { get; set; }
		
		/// <summary>
		/// The length of the tank when the fish is placed as a furniture item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tank_length")]
		public System.Nullable<System.Single> Tank_length { get; set; }
		
		/// <summary>
		/// The width of the tank when the fish is placed as a furniture item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tank_width")]
		public System.Nullable<System.Single> Tank_width { get; set; }
		
		/// <summary>
		/// The total number of fish the player has to have caught before this fish will start spawning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_catch")]
		public System.Nullable<System.Int32> Total_catch { get; set; }
		
		/// <summary>
		/// Link to the respective Nookipedia article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class NHFishNorth
	{
		
		/// <summary>
		/// An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the northern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability_array")]
		public NHFishNorthAvailability_array[] NHFishNorthAvailability_array { get; set; }
		
		/// <summary>
		/// The months the fish is available for in the Northern hemisphere. If all year, value will be `"All year"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="months")]
		public string Months { get; set; }
		
		/// <summary>
		/// An array of integers representing the months the fish is available in the Northern hemisphere.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="months_array")]
		public int[] Months_array { get; set; }
		
		/// <summary>
		/// An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="times_by_month")]
		public NHFishNorthTimes_by_month Times_by_month { get; set; }
	}
	
	public class NHFishNorthAvailability_array
	{
		
		[System.Runtime.Serialization.DataMember(Name="months")]
		public string Months { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	public class NHFishNorthTimes_by_month
	{
		
		[System.Runtime.Serialization.DataMember(Name="1")]
		public string _1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="2")]
		public string _2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="3")]
		public string _3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="4")]
		public string _4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="5")]
		public string _5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="6")]
		public string _6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="7")]
		public string _7 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="8")]
		public string _8 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="9")]
		public string _9 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="10")]
		public string _10 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="11")]
		public string _11 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="12")]
		public string _12 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NHFishShadow_size
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="X-Small")]
		XMinusSmall = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Small = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Medium = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Medium w/Fin")]
		Medium_w_Fin = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Large = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Large w/Fin")]
		Large_w_Fin = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="X-Large")]
		XMinusLarge = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="XX-Large")]
		XXMinusLarge = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Long = 8,
	}
	
	public class NHFishSouth
	{
		
		/// <summary>
		/// An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability_array")]
		public NHFishSouthAvailability_array[] NHFishSouthAvailability_array { get; set; }
		
		/// <summary>
		/// The months the fish is available for in the Southern hemisphere. If all year, value will be `"All year"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="months")]
		public string Months { get; set; }
		
		/// <summary>
		/// An array of integers representing the months the fish is available in the Southern hemisphere.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="months_array")]
		public int[] Months_array { get; set; }
		
		/// <summary>
		/// An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="times_by_month")]
		public NHFishSouthTimes_by_month Times_by_month { get; set; }
	}
	
	public class NHFishSouthAvailability_array
	{
		
		[System.Runtime.Serialization.DataMember(Name="months")]
		public string Months { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	public class NHFishSouthTimes_by_month
	{
		
		[System.Runtime.Serialization.DataMember(Name="1")]
		public string _1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="4")]
		public string _4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="5")]
		public string _5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="6")]
		public string _6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="7")]
		public string _7 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="8")]
		public string _8 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="9")]
		public string _9 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="10")]
		public string _10 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="11")]
		public string _11 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="12")]
		public string _12 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="2'")]
		public string _2_ { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="3'")]
		public string _3_ { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NHFossilGroup
	{
		
		/// <summary>
		/// A description of the fossil group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The name of the fossil group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The room where the fossil group can be found in the museum's fossil section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="room")]
		public System.Nullable<System.Int32> Room { get; set; }
		
		/// <summary>
		/// Link to the respective Nookipedia article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NHFossilGroupWithIndividualFossils
	{
		
		/// <summary>
		/// A description of the fossil group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// An array of objects, each object representing a fossil that belongs to the given group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fossils")]
		public NHFossilGroupWithIndividualFossilsFossils[] NHFossilGroupWithIndividualFossilsFossils { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="matched")]
		public NHFossilGroupWithIndividualFossilsMatched Matched { get; set; }
		
		/// <summary>
		/// The name of the fossil group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The room where the fossil group can be found in the museum's fossil section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="room")]
		public System.Nullable<System.Int32> Room { get; set; }
		
		/// <summary>
		/// Link to the respective Nookipedia article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class NHFossilGroupWithIndividualFossilsFossils
	{
		
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public string[] Colors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fossil_group")]
		public string Fossil_group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hha_base")]
		public System.Nullable<System.Int32> Hha_base { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interactable")]
		public System.Nullable<System.Boolean> Interactable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sell")]
		public System.Nullable<System.Int32> Sell { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class NHFossilGroupWithIndividualFossilsMatched
	{
		
		/// <summary>
		/// The name of the fossil or fossil group that matched the given query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If the query given was a fossil group, `group` would be returned. Otherwise, `individual` is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NHFossilGroupWithIndividualFossilsNoMatched
	{
		
		/// <summary>
		/// A description of the fossil group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// An array of objects, each object representing a fossil that belongs to the given group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fossils")]
		public NHFossilGroupWithIndividualFossilsNoMatchedFossils[] NHFossilGroupWithIndividualFossilsNoMatchedFossils { get; set; }
		
		/// <summary>
		/// The name of the fossil group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The room where the fossil group can be found in the museum's fossil section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="room")]
		public System.Nullable<System.Int32> Room { get; set; }
		
		/// <summary>
		/// Link to the respective Nookipedia article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class NHFossilGroupWithIndividualFossilsNoMatchedFossils
	{
		
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public string[] Colors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fossil_group")]
		public string Fossil_group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hha_base")]
		public System.Nullable<System.Int32> Hha_base { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interactable")]
		public System.Nullable<System.Boolean> Interactable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sell")]
		public System.Nullable<System.Int32> Sell { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NHFurniture
	{
		
		/// <summary>
		/// Where the furniture may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public NHFurnitureAvailability[] NHFurnitureAvailability { get; set; }
		
		/// <summary>
		/// An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public NHFurnitureBuy[] NHFurnitureBuy { get; set; }
		
		/// <summary>
		/// The category of item as shown in the player's inventory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<NHFurnitureCategory> Category { get; set; }
		
		/// <summary>
		/// If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is "Bamboo" as the bamboo color is able to be customized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_body_part")]
		public string Custom_body_part { get; set; }
		
		/// <summary>
		/// The item that needs to be consumed to customize this item. The vast majority are "Customization Kit", but a small selection of items will require a different item, such as items in the Spooky Series requireing pumpkins.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_kit_type")]
		public string Custom_kit_type { get; set; }
		
		/// <summary>
		/// The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_kits")]
		public System.Nullable<System.Int32> Custom_kits { get; set; }
		
		/// <summary>
		/// If the item's pattern can be customized, this is the name of the furniture part that can have a pattern applied to it. For example, for the Baby Chair, the custom pattern part is "Cushion" as the cushion on the chair may have a pattern applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_pattern_part")]
		public string Custom_pattern_part { get; set; }
		
		/// <summary>
		/// Whether or not the item is customizable via a crafting table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customizable")]
		public System.Nullable<System.Boolean> Customizable { get; set; }
		
		/// <summary>
		/// Whether this item may be placed on the exterior door of the player's house.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="door_decor")]
		public System.Nullable<System.Boolean> Door_decor { get; set; }
		
		/// <summary>
		/// A list of functionalities (if any) that the item has. For example, furniture that items can be placed on topof will have "Table" as a function..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="functions")]
		public string[] Functions { get; set; }
		
		/// <summary>
		/// The number of lengthwise grid spaces this item takes up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grid_length")]
		public System.Nullable<System.Single> Grid_length { get; set; }
		
		/// <summary>
		/// The number of widthwise grid spaces this item takes up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grid_width")]
		public System.Nullable<System.Single> Grid_width { get; set; }
		
		/// <summary>
		/// The height of the object. One in-game block is 10 units tall, while the player is 15.1324 units tall.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Single> Height { get; set; }
		
		/// <summary>
		/// The base value that the item provides to a player's Happy Home Academy score when placed in their home.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hha_base")]
		public System.Nullable<System.Int32> Hha_base { get; set; }
		
		/// <summary>
		/// The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hha_category")]
		public string Hha_category { get; set; }
		
		/// <summary>
		/// The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_series")]
		public string Item_series { get; set; }
		
		/// <summary>
		/// The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_set")]
		public string Item_set { get; set; }
		
		/// <summary>
		/// Whether or not the item is lucky. Lucky items give a 777-point HHA bonus. Some items are only counted as lucky in certain seasons, as indicated by the `lucky_season` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lucky")]
		public System.Nullable<System.Boolean> Lucky { get; set; }
		
		/// <summary>
		/// The season in which the item is lucky (or "All year" if lucky throughout the entire year). Items that are not lucky will have this field as an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lucky_season")]
		public System.Nullable<NHFurnitureLucky_season> Lucky_season { get; set; }
		
		/// <summary>
		/// The name of the furniture.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Any additional miscellaneous information about the item, such as a name change from a past update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The number of default patterns available to customize the item with, between 0 and 8. For items with customizable patterns, the player may also customize with patterns of their own.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pattern_total")]
		public System.Nullable<NHFurniturePattern_total> Pattern_total { get; set; }
		
		/// <summary>
		/// The number of Bells the item can be sold to Nook's store for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sell")]
		public System.Nullable<System.Int32> Sell { get; set; }
		
		/// <summary>
		/// The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include "Chair", "Musical Instrument", and "Mario". If the item does not have a tag, this will be an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		/// <summary>
		/// A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="themes")]
		public string[] Themes { get; set; }
		
		/// <summary>
		/// Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unlocked")]
		public System.Nullable<System.Boolean> Unlocked { get; set; }
		
		/// <summary>
		/// Link to the respective Nookipedia article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The number of variations, between 0 and 8.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variation_total")]
		public System.Nullable<NHFurnitureVariation_total> Variation_total { get; set; }
		
		/// <summary>
		/// An array of objects, each object representing a variation of the furniture. Furniture that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` or `pattern` fields will be empty strings. Furniture with multiple variations will have the `variation` and/or `pattern` fields defined depending on whether the furniture varies by body variety, pattern, or both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variations")]
		public NHFurnitureVariations[] NHFurnitureVariations { get; set; }
		
		/// <summary>
		/// The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version_added")]
		public string Version_added { get; set; }
	}
	
	public class NHFurnitureAvailability
	{
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
	}
	
	public class NHFurnitureBuy
	{
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NHFurnitureCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Housewares = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Miscellaneous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Wall-mounted")]
		WallMinusmounted = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NHFurnitureLucky_season
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="All year")]
		All_year = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Spring = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Summer = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Autumn = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Winter = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NHFurniturePattern_total
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NHFurnitureVariation_total
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
	}
	
	public class NHFurnitureVariations
	{
		
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public string[] Colors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variation")]
		public string Variation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NHIndividualFossil
	{
		
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public string[] Colors { get; set; }
		
		/// <summary>
		/// The name of the group that the fossil belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fossil_group")]
		public string Fossil_group { get; set; }
		
		/// <summary>
		/// The base value that the item provides to a player's Happy Home Academy score when placed in their home.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hha_base")]
		public System.Nullable<System.Int32> Hha_base { get; set; }
		
		/// <summary>
		/// Image of the fossil's icon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// Whether or not the item can be interacted with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interactable")]
		public System.Nullable<System.Boolean> Interactable { get; set; }
		
		/// <summary>
		/// The length of the fossil.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// The name of the fossil.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of bells the item can be sold to Nook's store for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sell")]
		public System.Nullable<System.Int32> Sell { get; set; }
		
		/// <summary>
		/// Link to the respective Nookipedia article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The width of the fossil.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NHInterior
	{
		
		/// <summary>
		/// Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public NHInteriorAvailability[] NHInteriorAvailability { get; set; }
		
		/// <summary>
		/// An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public NHInteriorBuy[] NHInteriorBuy { get; set; }
		
		/// <summary>
		/// The category of item as shown in the player's inventory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<NHInteriorCategory> Category { get; set; }
		
		/// <summary>
		/// (WIP)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public System.Nullable<NHInteriorColors> Colors { get; set; }
		
		/// <summary>
		/// The number of lengthwise grid spaces this item takes up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grid_length")]
		public System.Nullable<System.Single> Grid_length { get; set; }
		
		/// <summary>
		/// The number of widthwise grid spaces this item takes up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grid_width")]
		public System.Nullable<System.Single> Grid_width { get; set; }
		
		/// <summary>
		/// The base value that the item provides to a player's Happy Home Academy score when placed in their home.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hha_base")]
		public System.Nullable<System.Int32> Hha_base { get; set; }
		
		/// <summary>
		/// The HHA category the item is a part of, if any. If the item does not have an HHA category, this will be an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hha_category")]
		public string Hha_category { get; set; }
		
		/// <summary>
		/// Image of the interior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// The [furniture series](https://nookipedia.com/wiki/Series_(furniture)) the item is a part of, if any. A series is a collection of furniture and interior items, all with the same theme. If the item is not part of a series, this will be an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_series")]
		public string Item_series { get; set; }
		
		/// <summary>
		/// The [furniture set](https://nookipedia.com/wiki/Set) the item is a part of, if any. A set is a smaller collection of related furniture items. If the item is not part of a set, this will be an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_set")]
		public string Item_set { get; set; }
		
		/// <summary>
		/// The name of the interior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Any additional miscellaneous information about the item, such as a name change from a past update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The number of Bells the interior can be sold to Nook's store for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sell")]
		public System.Nullable<System.Int32> Sell { get; set; }
		
		/// <summary>
		/// The tag of an item, if any, which denotes a specific use or relation to an event. Tags are determined by Nintendo. Examples include "Chair", "Musical Instrument", and "Mario". If the item does not have a tag, this will be an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		/// <summary>
		/// A list of [themes](https://nookipedia.com/wiki/Theme_(furniture)) (if any) that the item belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="themes")]
		public string[] Themes { get; set; }
		
		/// <summary>
		/// Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unlocked")]
		public System.Nullable<System.Boolean> Unlocked { get; set; }
		
		/// <summary>
		/// Link to the respective Nookipedia article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version_added")]
		public string Version_added { get; set; }
	}
	
	public class NHInteriorAvailability
	{
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
	}
	
	public class NHInteriorBuy
	{
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NHInteriorCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Floors = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wallpaper = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rugs = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NHInteriorColors
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Aqua = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Beige = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Black = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Blue = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Brown = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Colorful = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gray = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Green = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Orange = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pink = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Purple = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Red = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		White = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Yellow = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NHItem
	{
		
		/// <summary>
		/// Where the clothing may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public NHItemAvailability[] NHItemAvailability { get; set; }
		
		/// <summary>
		/// An array of prices, for when the interior may be purchased with Bells, Nook Miles, etc..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public NHItemBuy[] NHItemBuy { get; set; }
		
		/// <summary>
		/// Whether the item is edible or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="edible")]
		public System.Nullable<System.Boolean> Edible { get; set; }
		
		/// <summary>
		/// The base value that the item provides to a player's Happy Home Academy score when placed in their home.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hha_base")]
		public System.Nullable<System.Int32> Hha_base { get; set; }
		
		/// <summary>
		/// Image of the interior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// Whether or not the item is a fence or not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_fence")]
		public System.Nullable<System.Boolean> Is_fence { get; set; }
		
		/// <summary>
		/// (WIP)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="material_name_sort")]
		public System.Nullable<System.Int32> Material_name_sort { get; set; }
		
		/// <summary>
		/// (WIP)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="material_seasonality")]
		public string Material_seasonality { get; set; }
		
		/// <summary>
		/// (WIP)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="material_seasonality_sort")]
		public System.Nullable<System.Int32> Material_seasonality_sort { get; set; }
		
		/// <summary>
		/// (WIP)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="material_sort")]
		public System.Nullable<System.Int32> Material_sort { get; set; }
		
		/// <summary>
		/// (WIP)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="material_type")]
		public System.Nullable<NHItemMaterial_type> Material_type { get; set; }
		
		/// <summary>
		/// The name of the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Any additional miscellaneous information about the item, such as a name change from a past update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// (WIP)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plant_type")]
		public System.Nullable<NHItemPlant_type> Plant_type { get; set; }
		
		/// <summary>
		/// The number of bells the item can be sold to Nook's store for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sell")]
		public System.Nullable<System.Int32> Sell { get; set; }
		
		/// <summary>
		/// How much the item can stack up to in a single inventory slot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stack")]
		public System.Nullable<System.Int32> Stack { get; set; }
		
		/// <summary>
		/// Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unlocked")]
		public System.Nullable<System.Boolean> Unlocked { get; set; }
		
		/// <summary>
		/// Link to the respective Nookipedia article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version_added")]
		public string Version_added { get; set; }
	}
	
	public class NHItemAvailability
	{
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
	}
	
	public class NHItemBuy
	{
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NHItemMaterial_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bamboo = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mushroom = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Trash = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wood = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ore = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Snowflake = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tree = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ornament = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fruit = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Underwater = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Other = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Leaf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Shell = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Flower = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Star Fragment")]
		Star_Fragment = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Feather = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Egg = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Plant = 18,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NHItemPlant_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pumpkin = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Flower = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bush = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tree = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NHPhoto
	{
		
		/// <summary>
		/// Where the photo may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public NHPhotoAvailability[] NHPhotoAvailability { get; set; }
		
		/// <summary>
		/// An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public NHPhotoBuy[] NHPhotoBuy { get; set; }
		
		/// <summary>
		/// The category of item as shown in the player's inventory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<NHPhotoCategory> Category { get; set; }
		
		/// <summary>
		/// If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is "Bamboo" as the bamboo color is able to be customized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_body_part")]
		public string Custom_body_part { get; set; }
		
		/// <summary>
		/// The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_kits")]
		public System.Nullable<System.Int32> Custom_kits { get; set; }
		
		/// <summary>
		/// Whether or not the item is customizable via a crafting table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customizable")]
		public System.Nullable<System.Boolean> Customizable { get; set; }
		
		/// <summary>
		/// The number of lengthwise grid spaces this item takes up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grid_length")]
		public System.Nullable<System.Single> Grid_length { get; set; }
		
		/// <summary>
		/// The number of widthwise grid spaces this item takes up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grid_width")]
		public System.Nullable<System.Single> Grid_width { get; set; }
		
		/// <summary>
		/// Whether or not the item can be interacted with. This field is true for all photos and false for all posters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interactable")]
		public System.Nullable<System.Boolean> Interactable { get; set; }
		
		/// <summary>
		/// The name of the photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The number of Bells the photo can be sold to the store for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sell")]
		public System.Nullable<System.Int32> Sell { get; set; }
		
		/// <summary>
		/// Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unlocked")]
		public System.Nullable<System.Boolean> Unlocked { get; set; }
		
		/// <summary>
		/// Link to the respective Nookipedia article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// An array of objects, each object representing a variation of the photo or poster. Items that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Items with multiple variations will have the `variation` fields defined with the name of each variation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variations")]
		public NHPhotoVariations[] NHPhotoVariations { get; set; }
		
		/// <summary>
		/// The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version_added")]
		public string Version_added { get; set; }
	}
	
	public class NHPhotoAvailability
	{
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
	}
	
	public class NHPhotoBuy
	{
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NHPhotoCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Photos = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Posters = 1,
	}
	
	public class NHPhotoVariations
	{
		
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public NHInteriorColors[] Colors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variation")]
		public string Variation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NHRecipe
	{
		
		/// <summary>
		/// Where the recipe may be obtained from. `from` is a brief description of the source; `note`, when provided, provides additional details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public NHRecipeAvailability[] NHRecipeAvailability { get; set; }
		
		/// <summary>
		/// An array of prices, for when the recipe may be purchased with Bells, Nook Miles, etc. The majority of recipes cannot be bought (in which case this array will be empty).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public NHRecipeBuy[] NHRecipeBuy { get; set; }
		
		/// <summary>
		/// Image of the item the recipe crafts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// The list of materials required to craft the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="materials")]
		public NHRecipeMaterials[] NHRecipeMaterials { get; set; }
		
		/// <summary>
		/// The name of the recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// How many recipes the player has to have learned to unlock this one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipes_to_unlock")]
		public System.Nullable<System.Int32> Recipes_to_unlock { get; set; }
		
		/// <summary>
		/// The number of Bells the sea creature can be sold to Nook's store for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sell")]
		public System.Nullable<System.Int32> Sell { get; set; }
		
		/// <summary>
		/// The unique in-game ID of the recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serial_id")]
		public System.Nullable<System.Int32> Serial_id { get; set; }
		
		/// <summary>
		/// Link to the respective Nookipedia article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class NHRecipeAvailability
	{
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
	}
	
	public class NHRecipeBuy
	{
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
	}
	
	public class NHRecipeMaterials
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NHSeaCreature
	{
		
		/// <summary>
		/// An array of possible catchphrases the player says after catching the sea creature. Most critters have just one, but some can have multiple.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catchphrases")]
		public string[] Catchphrases { get; set; }
		
		/// <summary>
		/// Image of the sea creature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// Name of the sea creature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// When you can catch the sea creature in the Northern hemisphere.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="north")]
		public NHSeaCreatureNorth North { get; set; }
		
		/// <summary>
		/// In-game sea creature number, marking position in the Critterpedia.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public System.Nullable<System.Int32> Number { get; set; }
		
		/// <summary>
		/// How rare the sea creature is. Note that this field is currently empty for most sea creatures as we do not yet know how exactly sea creature rarities are calculated in the game code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rarity")]
		public string Rarity { get; set; }
		
		/// <summary>
		/// Render of the sea creature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="render_url")]
		public string Render_url { get; set; }
		
		/// <summary>
		/// The number of Bells the sea creature can be sold to Nook's store for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sell_nook")]
		public System.Nullable<System.Int32> Sell_nook { get; set; }
		
		/// <summary>
		/// Short descriptor of where the sea creature can be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shadow_movement")]
		public System.Nullable<NHSeaCreatureShadow_movement> Shadow_movement { get; set; }
		
		/// <summary>
		/// Short descriptor of where the sea creature can be found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shadow_size")]
		public System.Nullable<NHSeaCreatureShadow_size> Shadow_size { get; set; }
		
		/// <summary>
		/// When you can catch the sea creature in the Southern hemisphere.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="south")]
		public NHSeaCreatureSouth South { get; set; }
		
		/// <summary>
		/// The length of the tank when the sea creature is placed as a furniture item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tank_length")]
		public System.Nullable<System.Single> Tank_length { get; set; }
		
		/// <summary>
		/// The width of the tank when the sea creature is placed as a furniture item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tank_width")]
		public System.Nullable<System.Single> Tank_width { get; set; }
		
		/// <summary>
		/// The total number of sea creatures the player has to have caught before this sea creature will start spawning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_catch")]
		public System.Nullable<System.Int32> Total_catch { get; set; }
		
		/// <summary>
		/// Link to the respective Nookipedia article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class NHSeaCreatureNorth
	{
		
		/// <summary>
		/// An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the northern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability_array")]
		public NHSeaCreatureNorthAvailability_array[] NHSeaCreatureNorthAvailability_array { get; set; }
		
		/// <summary>
		/// The months the sea creature is available for in the Northern hemisphere. If all year, value will be `"All year"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="months")]
		public string Months { get; set; }
		
		/// <summary>
		/// An array of integers representing the months the sea creature is available in the Northern hemisphere.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="months_array")]
		public int[] Months_array { get; set; }
		
		/// <summary>
		/// An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="times_by_month")]
		public NHSeaCreatureNorthTimes_by_month Times_by_month { get; set; }
	}
	
	public class NHSeaCreatureNorthAvailability_array
	{
		
		[System.Runtime.Serialization.DataMember(Name="months")]
		public string Months { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	public class NHSeaCreatureNorthTimes_by_month
	{
		
		[System.Runtime.Serialization.DataMember(Name="1")]
		public string _1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="2")]
		public string _2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="3")]
		public string _3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="4")]
		public string _4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="5")]
		public string _5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="6")]
		public string _6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="7")]
		public string _7 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="8")]
		public string _8 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="9")]
		public string _9 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="10")]
		public string _10 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="11")]
		public string _11 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="12")]
		public string _12 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NHSeaCreatureShadow_movement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Stationary = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Very slow")]
		Very_slow = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Slow = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Medium = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fast = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Very fast")]
		Very_fast = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NHSeaCreatureShadow_size
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="X-Small")]
		XMinusSmall = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Small = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Medium = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Large = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="X-Large")]
		XMinusLarge = 4,
	}
	
	public class NHSeaCreatureSouth
	{
		
		/// <summary>
		/// An array of objects, each object holding a months string and the time the critter is availabile during the specified month(s) in the southern hemisphere. Most critters will have just one object. A small number of critters have variable time availability in which case this array will have multiple objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability_array")]
		public NHSeaCreatureSouthAvailability_array[] NHSeaCreatureSouthAvailability_array { get; set; }
		
		/// <summary>
		/// The months the sea creature is available for in the Southern hemisphere. If all year, value will be `"All year"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="months")]
		public string Months { get; set; }
		
		/// <summary>
		/// An array of integers representing the months the sea creature is available in the Southern hemisphere.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="months_array")]
		public int[] Months_array { get; set; }
		
		/// <summary>
		/// An object with twelve numerical keys, each representing a month (`"1"` for January, `"2"` for February, etc.). The value is the times the critter is available during that month. If the critter is unavailable in a month, the value will be `"NA"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="times_by_month")]
		public NHSeaCreatureSouthTimes_by_month Times_by_month { get; set; }
	}
	
	public class NHSeaCreatureSouthAvailability_array
	{
		
		[System.Runtime.Serialization.DataMember(Name="months")]
		public string Months { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public string Time { get; set; }
	}
	
	public class NHSeaCreatureSouthTimes_by_month
	{
		
		[System.Runtime.Serialization.DataMember(Name="1")]
		public string _1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="2")]
		public string _2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="3")]
		public string _3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="4")]
		public string _4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="5")]
		public string _5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="6")]
		public string _6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="7")]
		public string _7 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="8")]
		public string _8 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="9")]
		public string _9 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="10")]
		public string _10 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="11")]
		public string _11 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="12")]
		public string _12 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NHTool
	{
		
		/// <summary>
		/// Where the tool may be obtained from (could be multiple sources). `from` is a brief description of the source; `note`, when provided, provides additional details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public NHToolAvailability[] NHToolAvailability { get; set; }
		
		/// <summary>
		/// An array of prices, for when the item may be purchased with Bells, Nook Miles, etc..
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buy")]
		public NHToolBuy[] NHToolBuy { get; set; }
		
		/// <summary>
		/// If the item has variations, this is the name of the furniture part that changes. For example, for many bamboo items, the custom body part is "Bamboo" as the bamboo color is able to be customized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_body_part")]
		public string Custom_body_part { get; set; }
		
		/// <summary>
		/// The number of `custom_kit_type`s (e.g. Customization Kits) that are needed to customize this item. Value is 0 if the item is not customizable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom_kits")]
		public System.Nullable<System.Int32> Custom_kits { get; set; }
		
		/// <summary>
		/// Whether or not the item is customizable via a crafting table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customizable")]
		public System.Nullable<System.Boolean> Customizable { get; set; }
		
		/// <summary>
		/// The base value that the item provides to a player's Happy Home Academy score when placed in their home.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hha_base")]
		public System.Nullable<System.Int32> Hha_base { get; set; }
		
		/// <summary>
		/// The name of the tool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Any additional miscellaneous information about the item, such as a name change from a past update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// The number of bells the tool can be sold to the store for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sell")]
		public System.Nullable<System.Int32> Sell { get; set; }
		
		/// <summary>
		/// Whether the item is available through legitimate gameplay. Some items are added to the game files in an update, but aren't actually made available until a subsequent update unlocks them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unlocked")]
		public System.Nullable<System.Boolean> Unlocked { get; set; }
		
		/// <summary>
		/// Link the the respective Nookipedia article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// How many times the tool can be used before breaking.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uses")]
		public System.Nullable<System.Int32> Uses { get; set; }
		
		/// <summary>
		/// An array of objects, each object representing a variation of the tool. Tools that has no variations (only one version) will have a single variation object with the image URL and colors, but the `variation` field will be empty. Tools with multiple variations will have the `variation` fields defined with the name of each variation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variations")]
		public NHToolVariations[] NHToolVariations { get; set; }
		
		/// <summary>
		/// The version of *New Horizons* that the item was added. Items that were included at the game's launch have version "1.0.0".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version_added")]
		public string Version_added { get; set; }
	}
	
	public class NHToolAvailability
	{
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
	}
	
	public class NHToolBuy
	{
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public System.Nullable<System.Int32> Price { get; set; }
	}
	
	public class NHToolVariations
	{
		
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variation")]
		public string Variation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Villager
	{
		
		/// <summary>
		/// A previous name for the villager. A very small number of villagers changed names between earlier games, such as Sally being known as Hazel in the original game.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alt_name")]
		public string Alt_name { get; set; }
		
		/// <summary>
		/// List of official media the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appearances")]
		public string[] Appearances { get; set; }
		
		/// <summary>
		/// Birthday day of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn't appear in *Wild World* or any later games, this field will be an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birthday_day")]
		public string Birthday_day { get; set; }
		
		/// <summary>
		/// Birthday month of the villager. Note that villager birthdays were not introduced until *Wild World*. For villagers who didn't appear in *Wild World* or any later games, this field will be an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birthday_month")]
		public string Birthday_month { get; set; }
		
		/// <summary>
		/// The villager's default clothing. This will be the clothing from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* clothing).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clothing")]
		public string Clothing { get; set; }
		
		/// <summary>
		/// The first *Animal Crossing* game the villager appeared in. `DNM` is *Doubutsu no Mori* for the Nintendo 64 (Japan-exclusive); `AC` is *Animal Crossing* for GameCube; `E_PLUS` is *Doubutsu no Mori e+* for GameCube (expanded port of AC, Japan-exclusive); `WW` is *Wild World* for the DS; `CF` is *City Folk* for Wii; `NL` is *New Leaf* for 3DS; `WA` is *Welcome amiibo*, the *New Leaf* expansion; `NH` is *New Horizons* for Switch; `FILM` is the *Doubutsu no Mori* Japan-exclusive film; `HHD` is *Happy Home Designer* for the Wii; and `PC` is *Pocket Camp* for mobile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="debut")]
		public System.Nullable<VillagerDebut> Debut { get; set; }
		
		/// <summary>
		/// Gender of the villager. In *Animal Crossing*, only male and female are used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public System.Nullable<VillagerGender> Gender { get; set; }
		
		/// <summary>
		/// The game's internal identifier for the villager. Not all villagers have IDs; villagers who appeared in any game including or after *Wild World* have a consistent ID between games.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image of the villager from the latest game the villager appeared in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// Whether the villager was an island in *Animal Crossing* for GameCube. Only a small number of villagers (36) were islanders.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="islander")]
		public System.Nullable<System.Boolean> Islander { get; set; }
		
		/// <summary>
		/// Name of the villager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An object that holds villager data specific to *New Horizons*. If the villager does not appear in *New Horizons*, this field will be set to null.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nh_details")]
		public VillagerNh_details Nh_details { get; set; }
		
		/// <summary>
		/// The villager's personality. Note that there are no official in-game personality names; these are names that are commonly used by the community. In the case of 'sisterly', other common names include 'big sis' and 'uchi'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personality")]
		public System.Nullable<VillagerPersonality> Personality { get; set; }
		
		/// <summary>
		/// The villager's default phrase they use throughout conversation. This will be the phrase from the latest game (i.e. if the villager had varying phrases between *Wild World* and *New Horizons*, this will be the *New Horizons* quote).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phrase")]
		public string Phrase { get; set; }
		
		/// <summary>
		/// Any phrases used in previous *Animal Crossing* installations. May be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prev_phrases")]
		public string[] Prev_phrases { get; set; }
		
		/// <summary>
		/// The villager's quote as it appears on the back of their in-game portrait item. This will be the quote from the latest game (i.e. if the villager had varying quotes between *Wild World* and *New Horizons*, this will be the *New Horizons* quote). For villagers from older games that do not have a quote, this field will be an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quote")]
		public string Quote { get; set; }
		
		/// <summary>
		/// The villager's astrological star sign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sign")]
		public System.Nullable<VillagerSign> Sign { get; set; }
		
		/// <summary>
		/// The villager's species.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="species")]
		public System.Nullable<VillagerSpecies> Species { get; set; }
		
		/// <summary>
		/// The HTML color code of the text of the villager's name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text_color")]
		public string Text_color { get; set; }
		
		/// <summary>
		/// The HTML color code of the background of the villager's name badge that appears above their dialogue box when spoken to in-game. Note that to date, only *New Horizons* villagers have this field populated. This field may be useful for styling, such as the accent color for a Discord embed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title_color")]
		public string Title_color { get; set; }
		
		/// <summary>
		/// Link to the respective Nookipedia article.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VillagerDebut
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E_PLUS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CF = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WA = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NH = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILM = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HHD = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PC = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VillagerGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Male = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Female = 1,
	}
	
	public class VillagerNh_details
	{
		
		/// <summary>
		/// The default phrase a villager will use when speaking to the player.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="catchphrase")]
		public string Catchphrase { get; set; }
		
		/// <summary>
		/// The default clothing that the villager wears.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clothing")]
		public string Clothing { get; set; }
		
		/// <summary>
		/// The variation of the clothing (usually a color).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clothing_variation")]
		public string Clothing_variation { get; set; }
		
		/// <summary>
		/// The villager's favorite colors (giving the villager a gift with one of their favorite colors increases friendship points).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fav_colors")]
		public string[] Fav_colors { get; set; }
		
		/// <summary>
		/// The villager's favorite clothing styles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fav_styles")]
		public string[] Fav_styles { get; set; }
		
		/// <summary>
		/// The villager's primary hobby, which determines most of the activities they will do around the island (e.g. education villagers will frequently read books and visit the museum). Learn more at https://nookipedia.com/wiki/Hobbies
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hobby")]
		public System.Nullable<VillagerNh_detailsHobby> Hobby { get; set; }
		
		/// <summary>
		/// A rendered model of the villager's house exterior. Note that this is not an official Nintendo asset, but a render based of the in-game model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="house_exterior_url")]
		public string House_exterior_url { get; set; }
		
		/// <summary>
		/// The flooring in the villager's house.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="house_flooring")]
		public string House_flooring { get; set; }
		
		/// <summary>
		/// A screenshot of the villager's house interior.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="house_interior_url")]
		public string House_interior_url { get; set; }
		
		/// <summary>
		/// The music in the villager's house.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="house_music")]
		public string House_music { get; set; }
		
		/// <summary>
		/// Any notes about the villager's music. If populated, this is usually "Does not contain a stereo initially", meaning that the villager's house will not play music unless provided with a stereo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="house_music_note")]
		public string House_music_note { get; set; }
		
		/// <summary>
		/// The wallpaper in the villager's house.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="house_wallpaper")]
		public string House_wallpaper { get; set; }
		
		/// <summary>
		/// The villager's icon of their head. See https://nookipedia.com/wiki/Category:New_Horizons_character_icons for full list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon_url")]
		public string Icon_url { get; set; }
		
		/// <summary>
		/// Image of the villager from *New Horizons*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image_url")]
		public string Image_url { get; set; }
		
		/// <summary>
		/// The villager's photo, received by the player after attaining a certain friendship level. See https://nookipedia.com/wiki/Category:New_Horizons_pictures for full list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="photo_url")]
		public string Photo_url { get; set; }
		
		/// <summary>
		/// The villager's quote, as found on the back of their in-game photo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quote")]
		public string Quote { get; set; }
		
		/// <summary>
		/// Each personality in *New Horizons* has two sub-personalities, currently referred to as just A and B. The effect of a sub-personality is currently unknown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sub-personality")]
		public System.Nullable<VillagerNh_detailsSub_personality> Sub_personality { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VillagerNh_detailsHobby
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Education = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fashion = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Fitness = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Music = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Nature = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Play = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VillagerNh_detailsSub_personality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		A = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		B = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VillagerPersonality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Big sister")]
		Big_sister = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cranky = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Jock = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lazy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Normal = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Peppy = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Smug = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Snooty = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VillagerSign
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Aries = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Taurus = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gemini = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cancer = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Leo = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Virgo = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Libra = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Scorpio = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sagittarius = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Capricorn = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Aquarius = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pisces = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VillagerSpecies
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Alligator = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Anteater = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bear = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Bear cub")]
		Bear_cub = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bird = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bull = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cat = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Chicken = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Cow = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Deer = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dog = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Duck = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Eagle = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Elephant = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Frog = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Goat = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Gorilla = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hamster = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Hippo = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Horse = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Koala = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Kangaroo = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Lion = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Monkey = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Mouse = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Octopus = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Ostrich = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Penguin = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Pig = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rabbit = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Rhinoceros = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sheep = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Squirrel = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tiger = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Wolf = 34,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// All New Horizons artwork
		/// Get a list of all artwork and their details in *Animal Crossing: New Horizons*.
		/// NhArtGetByHasfakeAndExcludedetailsAndThumbsize nh/art
		/// </summary>
		/// <param name="hasfake">When set to `true`, only artwork that has a fake will be returned. When set to `false`, only artwork without fakes will be returned.</param>
		/// <param name="excludedetails">When set to `true`, only artwork names are returned. Instead of an array of objects with all details, the return will be an array of strings.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time.</param>
		/// <returns>A JSON array of artwork.</returns>
		public async Task<NHArtwork[]> NhArtGetByHasfakeAndExcludedetailsAndThumbsizeAsync(string hasfake, string excludedetails, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/art?hasfake=" + (hasfake==null? "" : System.Uri.EscapeDataString(hasfake))+"&excludedetails=" + (excludedetails==null? "" : System.Uri.EscapeDataString(excludedetails))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHArtwork[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single New Horizons artwork
		/// Retrieve information about a specific artwork in *Animal Crossing: New Horizons*.
		/// NhArt_artworkGetByThumbsize nh/art/{artwork}
		/// </summary>
		/// <param name="artwork">The name of the artwork you wish to retrieve information about.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON object describing the artwork.</returns>
		public async Task<NHArtwork> NhArt_artworkGetByThumbsizeAsync(string artwork, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/art/"+ (artwork==null? "" : System.Uri.EscapeDataString(artwork))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHArtwork>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All New Horizons bugs
		/// Get a list of all bugs and their details in *Animal Crossing: New Horizons*.
		/// NhBugsGetByMonthAndExcludedetailsAndThumbsize nh/bugs
		/// </summary>
		/// <param name="month">Retrive only the bug that are available in a specific month. Value may be the month's name (`jan`, `january`), the integer representing the month (`01`, `1`), or `current` for the current month. When `current` is specified, the return body will be an object with two arrays inside, one called `north` and the other `south` containing the bug available in each respective hemisphere. Note that the current month is calculated based off the API server's time, so it may be slightly off for you at the beginning or end of the month.</param>
		/// <param name="excludedetails">When set to `true`, only bug names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the `month` filter, for users who want just a list of bugs in a given month but not all their respective details.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time.</param>
		/// <returns>A JSON array of bugs.</returns>
		public async Task<NHBug[]> NhBugsGetByMonthAndExcludedetailsAndThumbsizeAsync(string month, string excludedetails, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/bugs?month=" + (month==null? "" : System.Uri.EscapeDataString(month))+"&excludedetails=" + (excludedetails==null? "" : System.Uri.EscapeDataString(excludedetails))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHBug[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single New Horizons bug
		/// Retrieve information about a specific bug in *Animal Crossing: New Horizons*.
		/// NhBugs_bugGetByThumbsize nh/bugs/{bug}
		/// </summary>
		/// <param name="bug">The name of the bug you wish to retrieve information about.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON object describing the bug.</returns>
		public async Task<NHBug> NhBugs_bugGetByThumbsizeAsync(string bug, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/bugs/"+ (bug==null? "" : System.Uri.EscapeDataString(bug))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHBug>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All New Horizons clothing
		/// Get a list of all clothing items and their details in *Animal Crossing: New Horizons*.
		/// NhClothingGetByCategoryAndColorAndStyleAndLabelthemeAndExcludedetails nh/clothing
		/// </summary>
		/// <param name="category">Specify the category of clothing to return.</param>
		/// <param name="color">Return clothing that matches the provided colors (may specify one or two colors). Colors are used for gifting villagers.</param>
		/// <param name="style">Return clothing that matches the provided styles (may specify one or two styles). Styles are used for gifting villagers.</param>
		/// <param name="labeltheme">Return clothing that have the specified Label theme. This is used for completing the requested outfit theme for [Label](https://nookipedia.com/wiki/Label) when she visits the player's island.</param>
		/// <param name="excludedetails">When set to `true`, only clothing names are returned. Instead of an array of objects with all details, the return will be an array of strings.</param>
		/// <returns>A JSON array of clothing.</returns>
		public async Task<NHClothing[]> NhClothingGetByCategoryAndColorAndStyleAndLabelthemeAndExcludedetailsAsync(NhClothingGetByCategoryAndColorAndStyleAndLabelthemeAndExcludedetailsCategory category, NHInteriorColors[] color, string[] style, NhClothingGetByCategoryAndColorAndStyleAndLabelthemeAndExcludedetailsLabeltheme labeltheme, string excludedetails, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/clothing?category=" + category+"&"+string.Join("&", color.Select(z => $"color={z}"))+"&"+string.Join("&", style.Select(z => $"style={System.Uri.EscapeDataString(z.ToString())}"))+"&labeltheme=" + labeltheme+"&excludedetails=" + (excludedetails==null? "" : System.Uri.EscapeDataString(excludedetails));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHClothing[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single New Horizons clothing
		/// Retrieve information about a specific clothing item in *Animal Crossing: New Horizons*.
		/// NhClothing_clothingGetByThumbsize nh/clothing/{clothing}
		/// </summary>
		/// <param name="clothing">The name of the clothing you wish to retrieve information about.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON object describing the clothing.</returns>
		public async Task<NHClothing> NhClothing_clothingGetByThumbsizeAsync(string clothing, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/clothing/"+ (clothing==null? "" : System.Uri.EscapeDataString(clothing))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHClothing>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All New Horizons events
		/// Get a list of events and dates in *Animal Crossing: New Horizons*, filterable to specific years, months, or days. Data is available for the current and next year.
		/// NhEventsGetByDateAndYearAndMonthAndDay nh/events
		/// </summary>
		/// <param name="date">Specify a specific date (in the current or next year) to retrieve events for. Accepts many date formats, such as `YYYY-MM-DD` or `Month Day, Year`, as well as `today` to retrieve the current day's events (UTC time).</param>
		/// <param name="year">Specify the year to retrieve events for. Must be the current or next year.</param>
		/// <param name="month">Specify the month to retrieve events for (accepts multiple formats, such as `Oct`, `October`, or `10`). Most likely want to use alongside `year`, otherwise events in both the current and next year are returned.</param>
		/// <param name="day">Specify the day of the month to retrieve events for.</param>
		/// <returns>A JSON array of events.</returns>
		public async Task<NHEvent[]> NhEventsGetByDateAndYearAndMonthAndDayAsync(string date, string year, string month, int day, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/events?date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&year=" + (year==null? "" : System.Uri.EscapeDataString(year))+"&month=" + (month==null? "" : System.Uri.EscapeDataString(month))+"&day="+day;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHEvent[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All New Horizons fish
		/// Get a list of all fish and their details in *New Horizons*.
		/// NhFishGetByMonthAndExcludedetailsAndThumbsize nh/fish
		/// </summary>
		/// <param name="month">Retrive only the fish that are available in a specific month. Value may be the month's name (`jan`, `january`), the integer representing the month (`01`, `1`), or `current` for the current month. When `current` is specified, the return body will be an object with two arrays inside, one called `north` and the other `south` containing the fish available in each respective hemisphere. Note that the current month is calculated based off the API server's time, so it may be slightly off for you at the beginning or end of the month.</param>
		/// <param name="excludedetails">When set to `true`, only fish names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the `month` filter, for users who want just a list of fish in a given month but not all their respective details.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time.</param>
		/// <returns>A JSON array of fish.</returns>
		public async Task<NHFish[]> NhFishGetByMonthAndExcludedetailsAndThumbsizeAsync(string month, string excludedetails, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/fish?month=" + (month==null? "" : System.Uri.EscapeDataString(month))+"&excludedetails=" + (excludedetails==null? "" : System.Uri.EscapeDataString(excludedetails))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHFish[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single New Horizons fish
		/// Retrieve information about a specific fish in *Animal Crossing: New Horizons*.
		/// NhFish_fishGetByThumbsize nh/fish/{fish}
		/// </summary>
		/// <param name="fish">The name of the fish you wish to retrieve information about.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON object describing the fish.</returns>
		public async Task<NHFish> NhFish_fishGetByThumbsizeAsync(string fish, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/fish/"+ (fish==null? "" : System.Uri.EscapeDataString(fish))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHFish>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All New Horizons fossil groups or individual fossil
		/// Get a list of all the fossil groups with their respective individual fossils in *Animal Crossing: New Horizons*.
		/// NhFossilsAllGetByThumbsize nh/fossils/all
		/// </summary>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON array of fossil groups.</returns>
		public async Task<NHFossilGroupWithIndividualFossilsNoMatched[]> NhFossilsAllGetByThumbsizeAsync(int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/fossils/all?thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHFossilGroupWithIndividualFossilsNoMatched[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single New Horizons fossil group with individual fossils
		/// Retrieve information about a specific fossil group with their respective individual fossils in *Animal Crossing: New Horizons*.
		/// NhFossilsAll_fossilGetByThumbsize nh/fossils/all/{fossil}
		/// </summary>
		/// <param name="fossil">The name of the fossil OR fossil group you wish to retrieve information about. If a fossil is provided, a fossil group that the specified fossil belongs to will be returned.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON object describing the fossil group.</returns>
		public async Task<NHFossilGroupWithIndividualFossils> NhFossilsAll_fossilGetByThumbsizeAsync(string fossil, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/fossils/all/"+ (fossil==null? "" : System.Uri.EscapeDataString(fossil))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHFossilGroupWithIndividualFossils>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All New Horizons fossil groups
		/// Get a list of all the fossil groups in *Animal Crossing: New Horizons*.
		/// NhFossilsGroupsGetByThumbsize nh/fossils/groups
		/// </summary>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON array of fossil groups.</returns>
		public async Task<NHFossilGroup[]> NhFossilsGroupsGetByThumbsizeAsync(int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/fossils/groups?thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHFossilGroup[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single New Horizons fossil group
		/// Retrieve information about a specific fossil group in *Animal Crossing: New Horizons*.
		/// NhFossilsGroups_fossil_groupGetByThumbsize nh/fossils/groups/{fossil_group}
		/// </summary>
		/// <param name="fossil_group">The name of the fossil group you wish to retrieve information about.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON object describing the fossil group.</returns>
		public async Task<NHFossilGroup> NhFossilsGroups_fossil_groupGetByThumbsizeAsync(string fossil_group, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/fossils/groups/"+ (fossil_group==null? "" : System.Uri.EscapeDataString(fossil_group))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHFossilGroup>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All New Horizons fossils
		/// Get a list of all the individual fossils in *Animal Crossing: New Horizons*.
		/// NhFossilsIndividualsGetByThumbsize nh/fossils/individuals
		/// </summary>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON array of individual fossils.</returns>
		public async Task<NHIndividualFossil[]> NhFossilsIndividualsGetByThumbsizeAsync(int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/fossils/individuals?thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHIndividualFossil[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single New Horizons fossil
		/// Retrieve information about a specific individual fossil in *Animal Crossing: New Horizons*.
		/// NhFossilsIndividuals_fossilGetByThumbsize nh/fossils/individuals/{fossil}
		/// </summary>
		/// <param name="fossil">The name of the individual fossil you wish to retrieve fossil information about.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON object describing the individual fossil.</returns>
		public async Task<NHIndividualFossil> NhFossilsIndividuals_fossilGetByThumbsizeAsync(string fossil, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/fossils/individuals/"+ (fossil==null? "" : System.Uri.EscapeDataString(fossil))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHIndividualFossil>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All New Horizons furniture
		/// Get a list of all furniture and their details in *Animal Crossing: New Horizons*.
		/// NhFurnitureGetByCategoryAndColorAndExcludedetails nh/furniture
		/// </summary>
		/// <param name="category">Specify the category of furniture to return (houswares, miscellaneous, or wall-mounted).</param>
		/// <param name="color">Return furniture that matches the provided colors (may specify one or two colors).</param>
		/// <param name="excludedetails">When set to `true`, only furniture names are returned. Instead of an array of objects with all details, the return will be an array of strings.</param>
		/// <returns>A JSON array of furniture.</returns>
		public async Task<NHFurniture[]> NhFurnitureGetByCategoryAndColorAndExcludedetailsAsync(NhFurnitureGetByCategoryAndColorAndExcludedetailsCategory category, NHInteriorColors[] color, string excludedetails, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/furniture?category=" + category+"&"+string.Join("&", color.Select(z => $"color={z}"))+"&excludedetails=" + (excludedetails==null? "" : System.Uri.EscapeDataString(excludedetails));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHFurniture[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single New Horizons furniture
		/// Retrieve information about a specific furniture in *Animal Crossing: New Horizons*.
		/// NhFurniture_furnitureGetByThumbsize nh/furniture/{furniture}
		/// </summary>
		/// <param name="furniture">The name of the furniture you wish to retrieve information about.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON object describing the furniture.</returns>
		public async Task<NHFurniture> NhFurniture_furnitureGetByThumbsizeAsync(string furniture, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/furniture/"+ (furniture==null? "" : System.Uri.EscapeDataString(furniture))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHFurniture>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All New Horizons interior items
		/// Get a list of all interior items (flooring, wallpaper, and rugs) and their details in *Animal Crossing: New Horizons*.
		/// NhInteriorGetByColorAndExcludedetails nh/interior
		/// </summary>
		/// <param name="color">Return furniture that matches the provided colors (may specify one or two colors).</param>
		/// <param name="excludedetails">When set to `true`, only interior item names are returned. Instead of an array of objects with all details, the return will be an array of strings.</param>
		/// <returns>A JSON array of interior items.</returns>
		public async Task<NHInterior[]> NhInteriorGetByColorAndExcludedetailsAsync(NHInteriorColors[] color, string excludedetails, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/interior?"+string.Join("&", color.Select(z => $"color={z}"))+"&excludedetails=" + (excludedetails==null? "" : System.Uri.EscapeDataString(excludedetails));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHInterior[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single New Horizons interior item
		/// Retrieve information about a specific interior item in *Animal Crossing: New Horizons*.
		/// NhInterior_itemGetByColorAndThumbsize nh/interior/{item}
		/// </summary>
		/// <param name="item">The name of the interior item you wish to retrieve information about.</param>
		/// <param name="color">Return furniture that matches the provided colors (may specify one or two colors).</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON object describing the interior item.</returns>
		public async Task<NHInterior> NhInterior_itemGetByColorAndThumbsizeAsync(string item, NHInteriorColors[] color, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/interior/"+ (item==null? "" : System.Uri.EscapeDataString(item))+"&"+string.Join("&", color.Select(z => $"color={z}"))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHInterior>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Miscellaneous New Horizons items
		/// Get a list of all miscellaneous items (such as materials, star fragments, fruits, fences, and plants) and their details in *Animal Crossing: New Horizons*.
		/// NhItemsGetByExcludedetails nh/items
		/// </summary>
		/// <param name="excludedetails">When set to `true`, only item names are returned. Instead of an array of objects with all details, the return will be an array of strings.</param>
		/// <returns>A JSON array of items.</returns>
		public async Task<NHItem[]> NhItemsGetByExcludedetailsAsync(string excludedetails, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/items?excludedetails=" + (excludedetails==null? "" : System.Uri.EscapeDataString(excludedetails));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHItem[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single New Horizons miscellaneous item
		/// Retrieve information about a miscellaneous item (such as materials, star fragments, fruits, fences, and plants) in *Animal Crossing: New Horizons*.
		/// NhItems_itemGetByThumbsize nh/items/{item}
		/// </summary>
		/// <param name="item">The name of the interior item you wish to retrieve information about.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON object describing the item.</returns>
		public async Task<NHItem> NhItems_itemGetByThumbsizeAsync(string item, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/items/"+ (item==null? "" : System.Uri.EscapeDataString(item))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHItem>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All New Horizons photos and posters
		/// Get a list of all character photos+posters and their details in *Animal Crossing: New Horizons*.
		/// NhPhotosGetByExcludedetails nh/photos
		/// </summary>
		/// <param name="excludedetails">When set to `true`, only item names are returned. Instead of an array of objects with all details, the return will be an array of strings.</param>
		/// <returns>A JSON array of photos and posters.</returns>
		public async Task<NHPhoto[]> NhPhotosGetByExcludedetailsAsync(string excludedetails, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/photos?excludedetails=" + (excludedetails==null? "" : System.Uri.EscapeDataString(excludedetails));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHPhoto[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single New Horizons photo or poster
		/// Retrieve information about a character photo or poster in *Animal Crossing: New Horizons*.
		/// NhPhotos_itemGetByThumbsize nh/photos/{item}
		/// </summary>
		/// <param name="item">The name of the photo or poster you wish to retrieve information about.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON object describing the photo or poster.</returns>
		public async Task<NHPhoto> NhPhotos_itemGetByThumbsizeAsync(string item, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/photos/"+ (item==null? "" : System.Uri.EscapeDataString(item))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHPhoto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All New Horizons recipes
		/// Get a list of all recipes and their details in *Animal Crossing: New Horizons*.
		/// NhRecipesGetByMaterialAndExcludedetailsAndThumbsize nh/recipes
		/// </summary>
		/// <param name="material">Specify a material to only get recipes that use that material. You can specify `material` up to six times (no recipe uses more than six materials).</param>
		/// <param name="excludedetails">When set to `true`, only recipe names are returned. Instead of an array of objects with all details, the return will be an array of strings.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time.</param>
		/// <returns>A JSON array of recipes.</returns>
		public async Task<NHRecipe[]> NhRecipesGetByMaterialAndExcludedetailsAndThumbsizeAsync(string material, string excludedetails, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/recipes?material=" + (material==null? "" : System.Uri.EscapeDataString(material))+"&excludedetails=" + (excludedetails==null? "" : System.Uri.EscapeDataString(excludedetails))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHRecipe[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single New Horizons recipe
		/// Retrieve information about a specific recipe in *Animal Crossing: New Horizons*.
		/// NhRecipes_itemGetByThumbsize nh/recipes/{item}
		/// </summary>
		/// <param name="item">The name of the item you wish to retrieve recipe information about.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON object describing the recipe.</returns>
		public async Task<NHRecipe> NhRecipes_itemGetByThumbsizeAsync(string item, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/recipes/"+ (item==null? "" : System.Uri.EscapeDataString(item))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHRecipe>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All New Horizons sea creatures
		/// Get a list of all sea creatures and their details in *Animal Crossing: New Horizons*.
		/// NhSeaGetByMonthAndExcludedetailsAndThumbsize nh/sea
		/// </summary>
		/// <param name="month">Retrive only the sea creature that are available in a specific month. Value may be the month's name (`jan`, `january`), the integer representing the month (`01`, `1`), or `current` for the current month. When `current` is specified, the return body will be an object with two arrays inside, one called `north` and the other `south` containing the sea creature available in each respective hemisphere. Note that the current month is calculated based off the API server's time, so it may be slightly off for you at the beginning or end of the month.</param>
		/// <param name="excludedetails">When set to `true`, only sea creature names are returned. Instead of an array of objects with all details, the return will be an array of strings. This is particularly useful when used with the `month` filter, for users who want just a list of sea creatures in a given month but not all their respective details.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time.</param>
		/// <returns>A JSON array of sea creatures.</returns>
		public async Task<NHSeaCreature[]> NhSeaGetByMonthAndExcludedetailsAndThumbsizeAsync(string month, string excludedetails, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/sea?month=" + (month==null? "" : System.Uri.EscapeDataString(month))+"&excludedetails=" + (excludedetails==null? "" : System.Uri.EscapeDataString(excludedetails))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHSeaCreature[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single New Horizons sea creature
		/// Retrieve information about a specific sea creature in *Animal Crossing: New Horizons*.
		/// NhSea_sea_creatureGetByThumbsize nh/sea/{sea_creature}
		/// </summary>
		/// <param name="sea_creature">The name of the sea creature you wish to retrieve information about.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON object describing the sea creature.</returns>
		public async Task<NHSeaCreature> NhSea_sea_creatureGetByThumbsizeAsync(string sea_creature, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/sea/"+ (sea_creature==null? "" : System.Uri.EscapeDataString(sea_creature))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHSeaCreature>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// All New Horizons tools
		/// Get a list of all tools and their details in *Animal Crossing: New Horizons*.
		/// NhToolsGetByExcludedetails nh/tools
		/// </summary>
		/// <param name="excludedetails">When set to `true`, only tool names are returned. Instead of an array of objects with all details, the return will be an array of strings.</param>
		/// <returns>A JSON array of interior items.</returns>
		public async Task<NHTool[]> NhToolsGetByExcludedetailsAsync(string excludedetails, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/tools?excludedetails=" + (excludedetails==null? "" : System.Uri.EscapeDataString(excludedetails));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHTool[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Single New Horizons tool
		/// Retrieve information about a specific tool in *Animal Crossing: New Horizons*.
		/// NhTools_toolGetByThumbsize nh/tools/{tool}
		/// </summary>
		/// <param name="tool">The name of the interior item you wish to retrieve information about.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL.</param>
		/// <returns>A JSON object describing the tool.</returns>
		public async Task<NHTool> NhTools_toolGetByThumbsizeAsync(string tool, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "nh/tools/"+ (tool==null? "" : System.Uri.EscapeDataString(tool))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NHTool>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Villagers
		/// This endpoint retrieves villager information from the entire *Animal Crossing* series, with the option to filter by species, personality, game, and/or birthday. Filters use the AND operator (e.g. asking for villagers who have species `frog` and personality `smug` will return all smug frogs). Note that villagers only include the animals that act as residents. Special characters, such as Tom Nook and Isabelle, are not accessed through this endpoint.
		/// VillagersGetByNameAndSpeciesAndPersonalityAndGameAndBirthmonthAndBirthdayAndNhdetailsAndExcludedetailsAndThumbsize villagers
		/// </summary>
		/// <param name="name">Villager name. For most names you will get back an array with one object, but note that names are not a unique identifier across the series, as there are 3 names that are shared by multiple villagers (Lulu, Petunia, Carmen). For those 3 names you will get back an array with 2 objects. How you disambiguate between these villagers is up to you.</param>
		/// <param name="species">Retrieve villagers of a certain species.</param>
		/// <param name="personality">Retrieve villagers with a certain personality. For 'sisterly', note that the community often also calls it 'uchi' or 'big sister'.</param>
		/// <param name="game">Retrieve villagers that appear in all listed games. For example, if you want only villagers that appear in both *New Horizons* and *Pocket Camp*, you would send in `?game=nh&game=pc`.</param>
		/// <param name="birthmonth">Retrieve villagers born in a specific month. Value may be the month's name (`jan`, `january`) or the integer representing the month (`01`, `1`).</param>
		/// <param name="birthday">Use with `birthmonth` to get villager(s) born on a specific day. Value should be an int, 1 through 31.</param>
		/// <param name="nhdetails">When set to `true`, an `nh_details` object will be included that contains *New Horizons* details about the villager. If the villager does not appear in *New Horizons*, the returned `nh_details` field will be set to null.</param>
		/// <param name="excludedetails">When set to `true`, only villager names are returned. Instead of an array of objects with all details, the return will be an array of strings.</param>
		/// <param name="thumbsize">Specify the desired width of returned image URLs. When unspecified, the linked image(s) returned by the API will be full-resolution. Note that images can only be reduced in size; specifying a width greater than than the maximum size will return the default full-size image URL. Note that requesting specific image sizes for long lists may result in a very long response time.</param>
		/// <returns>A JSON array of villagers.</returns>
		public async Task<Villager[]> VillagersGetByNameAndSpeciesAndPersonalityAndGameAndBirthmonthAndBirthdayAndNhdetailsAndExcludedetailsAndThumbsizeAsync(string name, VillagersGetByNameAndSpeciesAndPersonalityAndGameAndBirthmonthAndBirthdayAndNhdetailsAndExcludedetailsAndThumbsizeSpecies species, VillagersGetByNameAndSpeciesAndPersonalityAndGameAndBirthmonthAndBirthdayAndNhdetailsAndExcludedetailsAndThumbsizePersonality personality, VillagerDebut[] game, string birthmonth, string birthday, string nhdetails, string excludedetails, int thumbsize, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "villagers?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&species=" + species+"&personality=" + personality+"&"+string.Join("&", game.Select(z => $"game={z}"))+"&birthmonth=" + (birthmonth==null? "" : System.Uri.EscapeDataString(birthmonth))+"&birthday=" + (birthday==null? "" : System.Uri.EscapeDataString(birthday))+"&nhdetails=" + (nhdetails==null? "" : System.Uri.EscapeDataString(nhdetails))+"&excludedetails=" + (excludedetails==null? "" : System.Uri.EscapeDataString(excludedetails))+"&thumbsize="+thumbsize;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Villager[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum NhClothingGetByCategoryAndColorAndStyleAndLabelthemeAndExcludedetailsCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Tops = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bottoms = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Dress-up")]
		DressMinusup = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Headwear = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Accessories = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Socks = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Shoes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bags = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Umbrellas = 8,
	}
	
	public enum NhClothingGetByCategoryAndColorAndStyleAndLabelthemeAndExcludedetailsLabeltheme
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Comfy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Everyday = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Fairy tale")]
		Fairy_tale = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Formal = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Goth = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Outdoorsy = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Party = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Sporty = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Theatrical = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Vacation = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Work = 10,
	}
	
	public enum NhFurnitureGetByCategoryAndColorAndExcludedetailsCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Housewares = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Miscellaneous = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Wall-mounted")]
		WallMinusmounted = 2,
	}
	
	public enum VillagersGetByNameAndSpeciesAndPersonalityAndGameAndBirthmonthAndBirthdayAndNhdetailsAndExcludedetailsAndThumbsizeSpecies
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		alligator = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anteater = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bear = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="bear cub")]
		bear_cub = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bird = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bull = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cat = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cub = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		chicken = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cow = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deer = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dog = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		duck = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eagle = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		elephant = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		frog = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		goat = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gorilla = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hamster = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hippo = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		horse = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		koala = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		kangaroo = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lion = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		monkey = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mouse = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		octopus = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ostrich = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		penguin = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pig = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rabbit = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rhino = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rhinoceros = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sheep = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		squirrel = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tiger = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wolf = 36,
	}
	
	public enum VillagersGetByNameAndSpeciesAndPersonalityAndGameAndBirthmonthAndBirthdayAndNhdetailsAndExcludedetailsAndThumbsizePersonality
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="big sister")]
		big_sister = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		cranky = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		jock = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lazy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		normal = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		peppy = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sisterly = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		smug = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		snooty = 8,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
