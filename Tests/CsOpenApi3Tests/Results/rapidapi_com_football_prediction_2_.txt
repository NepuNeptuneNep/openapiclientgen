//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns an array of all the available federations.
		/// ApiV2List_federationsGet api/v2/list-federations
		/// </summary>
		/// <returns>Static response, shows available federations.</returns>
		public async Task<ApiV2List_federationsGetReturn> ApiV2List_federationsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/list-federations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiV2List_federationsGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an array of all the supported prediction markets
		/// ApiV2List_marketsGet api/v2/list-markets
		/// </summary>
		/// <returns>Static response, shows available markets for the current subscription and all available markets in general.</returns>
		public async Task<ApiV2List_marketsGetReturn> ApiV2List_marketsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/list-markets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiV2List_marketsGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns predictions accuracy in the last 1, 7, 14, 30 days.
		/// ApiV2Performance_statsGet api/v2/performance-stats
		/// </summary>
		/// <returns>Good request, returns object that contains accuracy and other datails about predictions.</returns>
		public async Task<ApiV2Performance_statsGetReturn> ApiV2Performance_statsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/performance-stats";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiV2Performance_statsGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// This endpoint returns by default the next non-expired football predictions. URL parameters can be specified to show specific date in the past or future or to filter by federation and prediction market name.
		/// ApiV2PredictionsGet api/v2/predictions
		/// </summary>
		/// <returns>Good request, returns object that contains data array with all predictions.</returns>
		public async Task ApiV2PredictionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/predictions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all predictions available for a match id.
		/// ApiV2Predictions_idGet api/v2/predictions/{id}
		/// </summary>
		/// <param name="id">ID of match</param>
		/// <returns>Good request, returns object that contains all the predictions for a certain event.</returns>
		public async Task<ApiV2Predictions_idGetReturn> ApiV2Predictions_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v2/predictions/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApiV2Predictions_idGetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class ApiV2List_federationsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	public class ApiV2List_marketsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ApiV2List_marketsGetReturnData Data { get; set; }
	}
	
	public class ApiV2List_marketsGetReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="all")]
		public string[] All { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowed_for_your_subscription")]
		public string[] Allowed_for_your_subscription { get; set; }
	}
	
	public class ApiV2Performance_statsGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ApiV2Performance_statsGetReturnData Data { get; set; }
	}
	
	public class ApiV2Performance_statsGetReturnData
	{
		
		[System.Runtime.Serialization.DataMember(Name="accuracy")]
		public ApiV2Performance_statsGetReturnDataAccuracy Accuracy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public ApiV2Performance_statsGetReturnDataDetails Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="market")]
		public string Market { get; set; }
	}
	
	public class ApiV2Performance_statsGetReturnDataAccuracy
	{
		
		[System.Runtime.Serialization.DataMember(Name="last_14_days")]
		public System.Nullable<System.Double> Last_14_days { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_30_days")]
		public System.Nullable<System.Double> Last_30_days { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_7_days")]
		public System.Nullable<System.Double> Last_7_days { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yesterday")]
		public System.Nullable<System.Double> Yesterday { get; set; }
	}
	
	public class ApiV2Performance_statsGetReturnDataDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="last_14_days")]
		public ApiV2Performance_statsGetReturnDataDetailsLast_14_days Last_14_days { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_30_days")]
		public ApiV2Performance_statsGetReturnDataDetailsLast_30_days Last_30_days { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_7_days")]
		public ApiV2Performance_statsGetReturnDataDetailsLast_7_days Last_7_days { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yesterday")]
		public ApiV2Performance_statsGetReturnDataDetailsYesterday Yesterday { get; set; }
	}
	
	public class ApiV2Performance_statsGetReturnDataDetailsLast_14_days
	{
		
		[System.Runtime.Serialization.DataMember(Name="lost")]
		public System.Nullable<System.Int32> Lost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pending")]
		public System.Nullable<System.Int32> Pending { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postponed")]
		public System.Nullable<System.Int32> Postponed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="won")]
		public System.Nullable<System.Int32> Won { get; set; }
	}
	
	public class ApiV2Performance_statsGetReturnDataDetailsLast_30_days
	{
		
		[System.Runtime.Serialization.DataMember(Name="lost")]
		public System.Nullable<System.Int32> Lost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pending")]
		public System.Nullable<System.Int32> Pending { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postponed")]
		public System.Nullable<System.Int32> Postponed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="won")]
		public System.Nullable<System.Int32> Won { get; set; }
	}
	
	public class ApiV2Performance_statsGetReturnDataDetailsLast_7_days
	{
		
		[System.Runtime.Serialization.DataMember(Name="lost")]
		public System.Nullable<System.Int32> Lost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pending")]
		public System.Nullable<System.Int32> Pending { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postponed")]
		public System.Nullable<System.Int32> Postponed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="won")]
		public System.Nullable<System.Int32> Won { get; set; }
	}
	
	public class ApiV2Performance_statsGetReturnDataDetailsYesterday
	{
		
		[System.Runtime.Serialization.DataMember(Name="lost")]
		public System.Nullable<System.Int32> Lost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pending")]
		public System.Nullable<System.Int32> Pending { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postponed")]
		public System.Nullable<System.Int32> Postponed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="won")]
		public System.Nullable<System.Int32> Won { get; set; }
	}
	
	public class ApiV2Predictions_idGetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
