//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CitiesOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="city")]
		city = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="country")]
		country = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="firstUpdated")]
		firstUpdated = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lastUpdated")]
		lastUpdated = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CitiesRow
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstUpdated")]
		public System.DateTimeOffset FirstUpdated { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.DateTimeOffset LastUpdated { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public int Locations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string[] Parameters { get; set; }
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CountriesOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="country")]
		country = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="firstUpdated")]
		firstUpdated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lastUpdated")]
		lastUpdated = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="locations")]
		locations = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="count")]
		count = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CountriesRow
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cities")]
		public int Cities { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstUpdated")]
		public System.DateTimeOffset FirstUpdated { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.DateTimeOffset LastUpdated { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public int Locations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string[] Parameters { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public int Sources { get; set; }
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntityTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="government")]
		government = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="community")]
		community = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="research")]
		research = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HTTPValidationError
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public ValidationError[] Detail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loc")]
		public string[] Loc { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msg")]
		public string Msg { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LocationsOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="city")]
		city = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="country")]
		country = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="location")]
		location = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sourceName")]
		sourceName = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="firstUpdated")]
		firstUpdated = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lastUpdated")]
		lastUpdated = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="count")]
		count = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="random")]
		random = 7,
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MeasOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="city")]
		city = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="country")]
		country = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="location")]
		location = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="datetime")]
		datetime = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Meta
	{
		
		[System.Runtime.Serialization.DataMember(Name="found")]
		public System.Nullable<System.Int32> Found { get; set; }
		
		[System.ComponentModel.DefaultValue("CC BY 4.0d")]
		[System.Runtime.Serialization.DataMember(Name="license")]
		public string License { get; set; } = "CC BY 4.0d";
		
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		[System.ComponentModel.DefaultValue("openaq-api")]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; } = "openaq-api";
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.ComponentModel.DefaultValue("/")]
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; } = "/";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OpenAQCitiesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CitiesRow[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OpenAQCountriesResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public CountriesRow[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OpenAQParametersResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ParametersRow[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParametersRow
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCore")]
		public System.Nullable<System.Boolean> IsCore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxColorValue")]
		public System.Nullable<System.Double> MaxColorValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="preferredUnit")]
		public string PreferredUnit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OpenAQProjectsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ProjectsRow[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectsRow
	{
		
		[System.Runtime.Serialization.DataMember(Name="bbox")]
		public double[] Bbox { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countries")]
		public string[] Countries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public string Entity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstUpdated")]
		public System.DateTimeOffset FirstUpdated { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public int Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAnalysis")]
		public System.Nullable<System.Boolean> IsAnalysis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isMobile")]
		public System.Nullable<System.Boolean> IsMobile { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.DateTimeOffset LastUpdated { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locationIds")]
		public int[] LocationIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public int Locations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="measurements")]
		public int Measurements { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public ProjectParameterDetails[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sensorType")]
		public string SensorType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public string[] Sources { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProjectParameterDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="average")]
		public double Average { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="firstUpdated")]
		public System.DateTimeOffset FirstUpdated { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.DateTimeOffset LastUpdated { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lastValue")]
		public double LastValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public int Locations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameterId")]
		public int ParameterId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OpenAQResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public string[] Results { get; set; }
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ProjectsOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="id")]
		id = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name")]
		name = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="subtitle")]
		subtitle = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="firstUpdated")]
		firstUpdated = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lastUpdated")]
		lastUpdated = 4,
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SensorTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="reference grade")]
		reference_grade = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="low-cost sensor")]
		lowMinuscost_sensor = 1,
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Sort
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="asc")]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="desc")]
		desc = 1,
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SourcesOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="sourceName")]
		sourceName = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="firstUpdated")]
		firstUpdated = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="lastUpdated")]
		lastUpdated = 2,
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SourcesV1Order
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name")]
		name = 0,
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Spatial
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="country")]
		country = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="location")]
		location = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="project")]
		project = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="total")]
		total = 3,
	}
	
	/// <summary>
	/// An enumeration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Temporal
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="day")]
		day = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="month")]
		month = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="year")]
		year = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="moy")]
		moy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dow")]
		dow = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hour")]
		hour = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hod")]
		hod = 6,
	}
	
	/// <summary>
	/// TileJSON model.
	///Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TileJSON
	{
		
		[System.Runtime.Serialization.DataMember(Name="attribution")]
		public string Attribution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bounds")]
		public double[] Bounds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="grids")]
		public string[] Grids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legend")]
		public string Legend { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxzoom")]
		[System.ComponentModel.DataAnnotations.Range(0, 30)]
		public System.Nullable<System.Int32> Maxzoom { get; set; }
		
		/// <summary>
		/// Minimum: 0
		/// Maximum: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minzoom")]
		[System.ComponentModel.DataAnnotations.Range(0, 30)]
		public System.Nullable<System.Int32> Minzoom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.ComponentModel.DefaultValue("xyz")]
		[System.Runtime.Serialization.DataMember(Name="scheme")]
		public string Scheme { get; set; } = "xyz";
		
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
		
		[System.ComponentModel.DefaultValue("2.2.0")]
		[System.Runtime.Serialization.DataMember(Name="tilejson")]
		public string Tilejson { get; set; } = "2.2.0";
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tiles")]
		public string[] Tiles { get; set; }
		
		[System.ComponentModel.DefaultValue("1.0.0")]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; } = "1.0.0";
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Favico
		/// Favico_favicon_ico_get favicon.ico
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<object> Favico_favicon_ico_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "favicon.ico";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Pong
		/// Sanity check.
		/// This will let the user know that the service is operational.
		/// And this path operation will:
		/// * show a lifesign
		/// Pong_ping_get ping
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<object> Pong_ping_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ping";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides a simple listing of cities within the platform
		/// Cities_getv1_v1_cities_get v1/cities
		/// </summary>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Define sort order.</param>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <param name="city">
		///        Limit results by a certain city or cities.
		///        (ex. ?city=Chicago or ?city=Chicago&city=Boston)
		///        </param>
		/// <param name="order_by">Order by a field</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQCitiesResult> Cities_getv1_v1_cities_getAsync(int limit, int page, int offset, Sort sort, string country_id, string[] country, string[] city, CitiesOrder order_by, string entity, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/cities?limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", city.Select(z => $"city={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by+"&entity=" + (entity==null? "" : System.Uri.EscapeDataString(entity));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQCitiesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Countries Getv1
		/// Countries_getv1_v1_countries_get v1/countries
		/// </summary>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Define sort order.</param>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQCountriesResult> Countries_getv1_v1_countries_getAsync(int limit, int page, int offset, Sort sort, string country_id, string[] country, CountriesOrder order_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/countries?limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQCountriesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Countries Get
		/// Countries_get_v1_countries__country_id__get v1/countries/{country_id}
		/// </summary>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Define sort order.</param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQCountriesResult> Countries_get_v1_countries__country_id__getAsync(string country_id, int limit, int page, int offset, Sort sort, string[] country, CountriesOrder order_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/countries/"+ (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQCountriesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Latest V1 Get
		/// Latest_v1_get_v1_latest_get v1/latest
		/// </summary>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Sort Direction</param>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <param name="city">
		///        Limit results by a certain city or cities.
		///        (ex. ?city=Chicago or ?city=Chicago&city=Boston)
		///        </param>
		/// <param name="order_by">Order by a field</param>
		/// <param name="isMobile">Location is mobile</param>
		/// <param name="isAnalysis">Data is the product of a previous analysis/aggregation and not raw measurements</param>
		/// <param name="sourceName">Name of the data source</param>
		/// <param name="entity">Source entity type.</param>
		/// <param name="sensorType">Type of Sensor</param>
		/// <param name="modelName">Model Name of Sensor</param>
		/// <param name="manufacturerName">Manufacturer of Sensor</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQResult> Latest_v1_get_v1_latest_getAsync(
					int limit, 
					int page, 
					int offset, 
					Sort sort, 
					bool has_geo, 
					int parameter_id, 
					string[] parameter, 
					string[] unit, 
					string coordinates, 
					int radius, 
					string country_id, 
					string[] country, 
					string[] city, 
					int location_id, 
					string[] location, 
					LocationsOrder order_by, 
					bool isMobile, 
					bool isAnalysis, 
					string[] sourceName, 
					EntityTypes entity, 
					SensorTypes sensorType, 
					string[] modelName, 
					string[] manufacturerName, 
					bool dumpRaw, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/latest?limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&has_geo="+has_geo+"&parameter_id="+parameter_id+"&"+string.Join("&", parameter.Select(z => $"parameter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", unit.Select(z => $"unit={System.Uri.EscapeDataString(z.ToString())}"))+"&coordinates=" + (coordinates==null? "" : System.Uri.EscapeDataString(coordinates))+"&radius="+radius+"&country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", city.Select(z => $"city={System.Uri.EscapeDataString(z.ToString())}"))+"&location_id="+location_id+"&"+string.Join("&", location.Select(z => $"location={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by+"&isMobile="+isMobile+"&isAnalysis="+isAnalysis+"&"+string.Join("&", sourceName.Select(z => $"sourceName={System.Uri.EscapeDataString(z.ToString())}"))+"&entity=" + entity+"&sensorType=" + sensorType+"&"+string.Join("&", modelName.Select(z => $"modelName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", manufacturerName.Select(z => $"manufacturerName={System.Uri.EscapeDataString(z.ToString())}"))+"&dumpRaw="+dumpRaw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Latest V1 Get
		/// Latest_v1_get_v1_latest__location_id__get v1/latest/{location_id}
		/// </summary>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Sort Direction</param>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <param name="city">
		///        Limit results by a certain city or cities.
		///        (ex. ?city=Chicago or ?city=Chicago&city=Boston)
		///        </param>
		/// <param name="order_by">Order by a field</param>
		/// <param name="isMobile">Location is mobile</param>
		/// <param name="isAnalysis">Data is the product of a previous analysis/aggregation and not raw measurements</param>
		/// <param name="sourceName">Name of the data source</param>
		/// <param name="entity">Source entity type.</param>
		/// <param name="sensorType">Type of Sensor</param>
		/// <param name="modelName">Model Name of Sensor</param>
		/// <param name="manufacturerName">Manufacturer of Sensor</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQResult> Latest_v1_get_v1_latest__location_id__getAsync(
					int location_id, 
					int limit, 
					int page, 
					int offset, 
					Sort sort, 
					bool has_geo, 
					int parameter_id, 
					string[] parameter, 
					string[] unit, 
					string coordinates, 
					int radius, 
					string country_id, 
					string[] country, 
					string[] city, 
					string[] location, 
					LocationsOrder order_by, 
					bool isMobile, 
					bool isAnalysis, 
					string[] sourceName, 
					EntityTypes entity, 
					SensorTypes sensorType, 
					string[] modelName, 
					string[] manufacturerName, 
					bool dumpRaw, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/latest/"+location_id+"?limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&has_geo="+has_geo+"&parameter_id="+parameter_id+"&"+string.Join("&", parameter.Select(z => $"parameter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", unit.Select(z => $"unit={System.Uri.EscapeDataString(z.ToString())}"))+"&coordinates=" + (coordinates==null? "" : System.Uri.EscapeDataString(coordinates))+"&radius="+radius+"&country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", city.Select(z => $"city={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", location.Select(z => $"location={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by+"&isMobile="+isMobile+"&isAnalysis="+isAnalysis+"&"+string.Join("&", sourceName.Select(z => $"sourceName={System.Uri.EscapeDataString(z.ToString())}"))+"&entity=" + entity+"&sensorType=" + sensorType+"&"+string.Join("&", modelName.Select(z => $"modelName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", manufacturerName.Select(z => $"manufacturerName={System.Uri.EscapeDataString(z.ToString())}"))+"&dumpRaw="+dumpRaw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Locationsv1 Get
		/// Locationsv1_get_v1_locations_get v1/locations
		/// </summary>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Sort Direction</param>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <param name="city">
		///        Limit results by a certain city or cities.
		///        (ex. ?city=Chicago or ?city=Chicago&city=Boston)
		///        </param>
		/// <param name="order_by">Order by a field</param>
		/// <param name="isMobile">Location is mobile</param>
		/// <param name="isAnalysis">Data is the product of a previous analysis/aggregation and not raw measurements</param>
		/// <param name="sourceName">Name of the data source</param>
		/// <param name="entity">Source entity type.</param>
		/// <param name="sensorType">Type of Sensor</param>
		/// <param name="modelName">Model Name of Sensor</param>
		/// <param name="manufacturerName">Manufacturer of Sensor</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQResult> Locationsv1_get_v1_locations_getAsync(
					int limit, 
					int page, 
					int offset, 
					Sort sort, 
					bool has_geo, 
					int parameter_id, 
					string[] parameter, 
					string[] unit, 
					string coordinates, 
					int radius, 
					string country_id, 
					string[] country, 
					string[] city, 
					int location_id, 
					string[] location, 
					LocationsOrder order_by, 
					bool isMobile, 
					bool isAnalysis, 
					string[] sourceName, 
					EntityTypes entity, 
					SensorTypes sensorType, 
					string[] modelName, 
					string[] manufacturerName, 
					bool dumpRaw, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/locations?limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&has_geo="+has_geo+"&parameter_id="+parameter_id+"&"+string.Join("&", parameter.Select(z => $"parameter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", unit.Select(z => $"unit={System.Uri.EscapeDataString(z.ToString())}"))+"&coordinates=" + (coordinates==null? "" : System.Uri.EscapeDataString(coordinates))+"&radius="+radius+"&country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", city.Select(z => $"city={System.Uri.EscapeDataString(z.ToString())}"))+"&location_id="+location_id+"&"+string.Join("&", location.Select(z => $"location={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by+"&isMobile="+isMobile+"&isAnalysis="+isAnalysis+"&"+string.Join("&", sourceName.Select(z => $"sourceName={System.Uri.EscapeDataString(z.ToString())}"))+"&entity=" + entity+"&sensorType=" + sensorType+"&"+string.Join("&", modelName.Select(z => $"modelName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", manufacturerName.Select(z => $"manufacturerName={System.Uri.EscapeDataString(z.ToString())}"))+"&dumpRaw="+dumpRaw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Locationsv1 Get
		/// Locationsv1_get_v1_locations__location_id__get v1/locations/{location_id}
		/// </summary>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Sort Direction</param>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <param name="city">
		///        Limit results by a certain city or cities.
		///        (ex. ?city=Chicago or ?city=Chicago&city=Boston)
		///        </param>
		/// <param name="order_by">Order by a field</param>
		/// <param name="isMobile">Location is mobile</param>
		/// <param name="isAnalysis">Data is the product of a previous analysis/aggregation and not raw measurements</param>
		/// <param name="sourceName">Name of the data source</param>
		/// <param name="entity">Source entity type.</param>
		/// <param name="sensorType">Type of Sensor</param>
		/// <param name="modelName">Model Name of Sensor</param>
		/// <param name="manufacturerName">Manufacturer of Sensor</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQResult> Locationsv1_get_v1_locations__location_id__getAsync(
					int location_id, 
					int limit, 
					int page, 
					int offset, 
					Sort sort, 
					bool has_geo, 
					int parameter_id, 
					string[] parameter, 
					string[] unit, 
					string coordinates, 
					int radius, 
					string country_id, 
					string[] country, 
					string[] city, 
					string[] location, 
					LocationsOrder order_by, 
					bool isMobile, 
					bool isAnalysis, 
					string[] sourceName, 
					EntityTypes entity, 
					SensorTypes sensorType, 
					string[] modelName, 
					string[] manufacturerName, 
					bool dumpRaw, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/locations/"+location_id+"?limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&has_geo="+has_geo+"&parameter_id="+parameter_id+"&"+string.Join("&", parameter.Select(z => $"parameter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", unit.Select(z => $"unit={System.Uri.EscapeDataString(z.ToString())}"))+"&coordinates=" + (coordinates==null? "" : System.Uri.EscapeDataString(coordinates))+"&radius="+radius+"&country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", city.Select(z => $"city={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", location.Select(z => $"location={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by+"&isMobile="+isMobile+"&isAnalysis="+isAnalysis+"&"+string.Join("&", sourceName.Select(z => $"sourceName={System.Uri.EscapeDataString(z.ToString())}"))+"&entity=" + entity+"&sensorType=" + sensorType+"&"+string.Join("&", modelName.Select(z => $"modelName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", manufacturerName.Select(z => $"manufacturerName={System.Uri.EscapeDataString(z.ToString())}"))+"&dumpRaw="+dumpRaw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Measurements Get V1
		/// Measurements_get_v1_v1_measurements_get v1/measurements
		/// </summary>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <param name="city">
		///        Limit results by a certain city or cities.
		///        (ex. ?city=Chicago or ?city=Chicago&city=Boston)
		///        </param>
		/// <returns>Successful Response</returns>
		public async Task<object> Measurements_get_v1_v1_measurements_getAsync(
					string format, 
					System.DateTimeOffset date_from, 
					System.DateTimeOffset date_to, 
					int limit, 
					int page, 
					int offset, 
					Sort sort, 
					bool has_geo, 
					int parameter_id, 
					string[] parameter, 
					string[] unit, 
					string coordinates, 
					int radius, 
					string country_id, 
					string[] country, 
					string[] city, 
					int location_id, 
					string[] location, 
					MeasOrder order_by, 
					bool isMobile, 
					bool isAnalysis, 
					int project, 
					EntityTypes entity, 
					SensorTypes sensorType, 
					double value_from, 
					double value_to, 
					string include_fields, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/measurements?format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&date_from=" + date_from+"&date_to=" + date_to+"&limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&has_geo="+has_geo+"&parameter_id="+parameter_id+"&"+string.Join("&", parameter.Select(z => $"parameter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", unit.Select(z => $"unit={System.Uri.EscapeDataString(z.ToString())}"))+"&coordinates=" + (coordinates==null? "" : System.Uri.EscapeDataString(coordinates))+"&radius="+radius+"&country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", city.Select(z => $"city={System.Uri.EscapeDataString(z.ToString())}"))+"&location_id="+location_id+"&"+string.Join("&", location.Select(z => $"location={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by+"&isMobile="+isMobile+"&isAnalysis="+isAnalysis+"&project="+project+"&entity=" + entity+"&sensorType=" + sensorType+"&value_from="+value_from+"&value_to="+value_to+"&include_fields=" + (include_fields==null? "" : System.Uri.EscapeDataString(include_fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Parameters Getv1
		/// Parameters_getv1_v1_parameters_get v1/parameters
		/// </summary>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Define sort order.</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQParametersResult> Parameters_getv1_v1_parameters_getAsync(int limit, int page, int offset, Sort sort, string[] sourceName, int[] sourceId, string[] sourceSlug, string order_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/parameters?limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&"+string.Join("&", sourceName.Select(z => $"sourceName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", sourceId.Select(z => $"sourceId={z}"))+"&"+string.Join("&", sourceSlug.Select(z => $"sourceSlug={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + (order_by==null? "" : System.Uri.EscapeDataString(order_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQParametersResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sources V1 Get
		/// Sources_v1_get_v1_sources_get v1/sources
		/// </summary>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Define sort order.</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQResult> Sources_v1_get_v1_sources_getAsync(int limit, int page, int offset, Sort sort, string name, SourcesV1Order order_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/sources?limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&order_by=" + order_by;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Averages V2 Get
		/// Averages_v2_get_v2_averages_get v2/averages
		/// </summary>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Define sort order.</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQResult> Averages_v2_get_v2_averages_getAsync(
					System.DateTimeOffset date_from, 
					System.DateTimeOffset date_to, 
					int parameter_id, 
					string[] parameter, 
					string[] unit, 
					int project_id, 
					string[] project, 
					string country_id, 
					string[] country, 
					int limit, 
					int page, 
					int offset, 
					Sort sort, 
					Spatial spatial, 
					Temporal temporal, 
					string[] location, 
					bool group, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/averages?date_from=" + date_from+"&date_to=" + date_to+"&parameter_id="+parameter_id+"&"+string.Join("&", parameter.Select(z => $"parameter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", unit.Select(z => $"unit={System.Uri.EscapeDataString(z.ToString())}"))+"&project_id="+project_id+"&"+string.Join("&", project.Select(z => $"project={System.Uri.EscapeDataString(z.ToString())}"))+"&country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&spatial=" + spatial+"&temporal=" + temporal+"&"+string.Join("&", location.Select(z => $"location={System.Uri.EscapeDataString(z.ToString())}"))+"&group="+group;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Provides a simple listing of cities within the platform
		/// Cities_get_v2_cities_get v2/cities
		/// </summary>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Define sort order.</param>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <param name="city">
		///        Limit results by a certain city or cities.
		///        (ex. ?city=Chicago or ?city=Chicago&city=Boston)
		///        </param>
		/// <param name="order_by">Order by a field</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQCitiesResult> Cities_get_v2_cities_getAsync(int limit, int page, int offset, Sort sort, string country_id, string[] country, string[] city, CitiesOrder order_by, string entity, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/cities?limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", city.Select(z => $"city={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by+"&entity=" + (entity==null? "" : System.Uri.EscapeDataString(entity));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQCitiesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Countries Get
		/// Countries_get_v2_countries_get v2/countries
		/// </summary>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Define sort order.</param>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQCountriesResult> Countries_get_v2_countries_getAsync(int limit, int page, int offset, Sort sort, string country_id, string[] country, CountriesOrder order_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/countries?limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQCountriesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Countries Get
		/// Countries_get_v2_countries__country_id__get v2/countries/{country_id}
		/// </summary>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Define sort order.</param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQCountriesResult> Countries_get_v2_countries__country_id__getAsync(string country_id, int limit, int page, int offset, Sort sort, string[] country, CountriesOrder order_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/countries/"+ (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQCountriesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Latest Get
		/// Latest_get_v2_latest_get v2/latest
		/// </summary>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Sort Direction</param>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <param name="city">
		///        Limit results by a certain city or cities.
		///        (ex. ?city=Chicago or ?city=Chicago&city=Boston)
		///        </param>
		/// <param name="order_by">Order by a field</param>
		/// <param name="isMobile">Location is mobile</param>
		/// <param name="isAnalysis">Data is the product of a previous analysis/aggregation and not raw measurements</param>
		/// <param name="sourceName">Name of the data source</param>
		/// <param name="entity">Source entity type.</param>
		/// <param name="sensorType">Type of Sensor</param>
		/// <param name="modelName">Model Name of Sensor</param>
		/// <param name="manufacturerName">Manufacturer of Sensor</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQResult> Latest_get_v2_latest_getAsync(
					int limit, 
					int page, 
					int offset, 
					Sort sort, 
					bool has_geo, 
					int parameter_id, 
					string[] parameter, 
					string[] unit, 
					string coordinates, 
					int radius, 
					string country_id, 
					string[] country, 
					string[] city, 
					int location_id, 
					string[] location, 
					LocationsOrder order_by, 
					bool isMobile, 
					bool isAnalysis, 
					string[] sourceName, 
					EntityTypes entity, 
					SensorTypes sensorType, 
					string[] modelName, 
					string[] manufacturerName, 
					bool dumpRaw, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/latest?limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&has_geo="+has_geo+"&parameter_id="+parameter_id+"&"+string.Join("&", parameter.Select(z => $"parameter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", unit.Select(z => $"unit={System.Uri.EscapeDataString(z.ToString())}"))+"&coordinates=" + (coordinates==null? "" : System.Uri.EscapeDataString(coordinates))+"&radius="+radius+"&country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", city.Select(z => $"city={System.Uri.EscapeDataString(z.ToString())}"))+"&location_id="+location_id+"&"+string.Join("&", location.Select(z => $"location={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by+"&isMobile="+isMobile+"&isAnalysis="+isAnalysis+"&"+string.Join("&", sourceName.Select(z => $"sourceName={System.Uri.EscapeDataString(z.ToString())}"))+"&entity=" + entity+"&sensorType=" + sensorType+"&"+string.Join("&", modelName.Select(z => $"modelName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", manufacturerName.Select(z => $"manufacturerName={System.Uri.EscapeDataString(z.ToString())}"))+"&dumpRaw="+dumpRaw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Latest Get
		/// Latest_get_v2_latest__location_id__get v2/latest/{location_id}
		/// </summary>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Sort Direction</param>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <param name="city">
		///        Limit results by a certain city or cities.
		///        (ex. ?city=Chicago or ?city=Chicago&city=Boston)
		///        </param>
		/// <param name="order_by">Order by a field</param>
		/// <param name="isMobile">Location is mobile</param>
		/// <param name="isAnalysis">Data is the product of a previous analysis/aggregation and not raw measurements</param>
		/// <param name="sourceName">Name of the data source</param>
		/// <param name="entity">Source entity type.</param>
		/// <param name="sensorType">Type of Sensor</param>
		/// <param name="modelName">Model Name of Sensor</param>
		/// <param name="manufacturerName">Manufacturer of Sensor</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQResult> Latest_get_v2_latest__location_id__getAsync(
					int location_id, 
					int limit, 
					int page, 
					int offset, 
					Sort sort, 
					bool has_geo, 
					int parameter_id, 
					string[] parameter, 
					string[] unit, 
					string coordinates, 
					int radius, 
					string country_id, 
					string[] country, 
					string[] city, 
					string[] location, 
					LocationsOrder order_by, 
					bool isMobile, 
					bool isAnalysis, 
					string[] sourceName, 
					EntityTypes entity, 
					SensorTypes sensorType, 
					string[] modelName, 
					string[] manufacturerName, 
					bool dumpRaw, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/latest/"+location_id+"?limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&has_geo="+has_geo+"&parameter_id="+parameter_id+"&"+string.Join("&", parameter.Select(z => $"parameter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", unit.Select(z => $"unit={System.Uri.EscapeDataString(z.ToString())}"))+"&coordinates=" + (coordinates==null? "" : System.Uri.EscapeDataString(coordinates))+"&radius="+radius+"&country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", city.Select(z => $"city={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", location.Select(z => $"location={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by+"&isMobile="+isMobile+"&isAnalysis="+isAnalysis+"&"+string.Join("&", sourceName.Select(z => $"sourceName={System.Uri.EscapeDataString(z.ToString())}"))+"&entity=" + entity+"&sensorType=" + sensorType+"&"+string.Join("&", modelName.Select(z => $"modelName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", manufacturerName.Select(z => $"manufacturerName={System.Uri.EscapeDataString(z.ToString())}"))+"&dumpRaw="+dumpRaw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Locations Get
		/// Locations_get_v2_locations_get v2/locations
		/// </summary>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Sort Direction</param>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <param name="city">
		///        Limit results by a certain city or cities.
		///        (ex. ?city=Chicago or ?city=Chicago&city=Boston)
		///        </param>
		/// <param name="order_by">Order by a field</param>
		/// <param name="isMobile">Location is mobile</param>
		/// <param name="isAnalysis">Data is the product of a previous analysis/aggregation and not raw measurements</param>
		/// <param name="sourceName">Name of the data source</param>
		/// <param name="entity">Source entity type.</param>
		/// <param name="sensorType">Type of Sensor</param>
		/// <param name="modelName">Model Name of Sensor</param>
		/// <param name="manufacturerName">Manufacturer of Sensor</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQResult> Locations_get_v2_locations_getAsync(
					int limit, 
					int page, 
					int offset, 
					Sort sort, 
					bool has_geo, 
					int parameter_id, 
					string[] parameter, 
					string[] unit, 
					string coordinates, 
					int radius, 
					string country_id, 
					string[] country, 
					string[] city, 
					int location_id, 
					string[] location, 
					LocationsOrder order_by, 
					bool isMobile, 
					bool isAnalysis, 
					string[] sourceName, 
					EntityTypes entity, 
					SensorTypes sensorType, 
					string[] modelName, 
					string[] manufacturerName, 
					bool dumpRaw, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations?limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&has_geo="+has_geo+"&parameter_id="+parameter_id+"&"+string.Join("&", parameter.Select(z => $"parameter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", unit.Select(z => $"unit={System.Uri.EscapeDataString(z.ToString())}"))+"&coordinates=" + (coordinates==null? "" : System.Uri.EscapeDataString(coordinates))+"&radius="+radius+"&country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", city.Select(z => $"city={System.Uri.EscapeDataString(z.ToString())}"))+"&location_id="+location_id+"&"+string.Join("&", location.Select(z => $"location={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by+"&isMobile="+isMobile+"&isAnalysis="+isAnalysis+"&"+string.Join("&", sourceName.Select(z => $"sourceName={System.Uri.EscapeDataString(z.ToString())}"))+"&entity=" + entity+"&sensorType=" + sensorType+"&"+string.Join("&", modelName.Select(z => $"modelName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", manufacturerName.Select(z => $"manufacturerName={System.Uri.EscapeDataString(z.ToString())}"))+"&dumpRaw="+dumpRaw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Mobilegentilejson
		/// Mobilegentilejson_v2_locations_tiles_mobile_generalized_tiles_json_get v2/locations/tiles/mobile-generalized/tiles.json
		/// </summary>
		/// <returns>Return a tilejson</returns>
		public async Task<TileJSON> Mobilegentilejson_v2_locations_tiles_mobile_generalized_tiles_json_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/tiles/mobile-generalized/tiles.json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TileJSON>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Mobilegentile
		/// Get_mobilegentile_v2_locations_tiles_mobile_generalized__z___x___y__pbf_get v2/locations/tiles/mobile-generalized/{z}/{x}/{y}.pbf
		/// </summary>
		/// <param name="location">limit data to location id</param>
		/// <returns>Successful Response</returns>
		public async Task Get_mobilegentile_v2_locations_tiles_mobile_generalized__z___x___y__pbf_getAsync(int z, int x, int y, int parameter, int[] location, System.DateTimeOffset lastUpdatedFrom, System.DateTimeOffset lastUpdatedTo, bool isMobile, int project, bool isAnalysis, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/tiles/mobile-generalized/"+z+"/"+x+"/"+y+".pbf?parameter=" + parameter+"&"+string.Join("&", location.Select(z => $"location={z}"))+"&lastUpdatedFrom=" + lastUpdatedFrom+"&lastUpdatedTo=" + lastUpdatedTo+"&isMobile="+isMobile+"&project="+project+"&isAnalysis="+isAnalysis;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Mobiletilejson
		/// Mobiletilejson_v2_locations_tiles_mobile_tiles_json_get v2/locations/tiles/mobile/tiles.json
		/// </summary>
		/// <returns>Return a tilejson</returns>
		public async Task<TileJSON> Mobiletilejson_v2_locations_tiles_mobile_tiles_json_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/tiles/mobile/tiles.json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TileJSON>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Mobiletile
		/// Get_mobiletile_v2_locations_tiles_mobile__z___x___y__pbf_get v2/locations/tiles/mobile/{z}/{x}/{y}.pbf
		/// </summary>
		/// <param name="location">limit data to location id</param>
		/// <returns>Successful Response</returns>
		public async Task Get_mobiletile_v2_locations_tiles_mobile__z___x___y__pbf_getAsync(int z, int x, int y, System.DateTimeOffset dateFrom, System.DateTimeOffset dateTo, int parameter, int[] location, System.DateTimeOffset lastUpdatedFrom, System.DateTimeOffset lastUpdatedTo, bool isMobile, int project, bool isAnalysis, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/tiles/mobile/"+z+"/"+x+"/"+y+".pbf?dateFrom=" + dateFrom+"&dateTo=" + dateTo+"&parameter=" + parameter+"&"+string.Join("&", location.Select(z => $"location={z}"))+"&lastUpdatedFrom=" + lastUpdatedFrom+"&lastUpdatedTo=" + lastUpdatedTo+"&isMobile="+isMobile+"&project="+project+"&isAnalysis="+isAnalysis;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tilejson
		/// Tilejson_v2_locations_tiles_tiles_json_get v2/locations/tiles/tiles.json
		/// </summary>
		/// <returns>Return a tilejson</returns>
		public async Task<TileJSON> Tilejson_v2_locations_tiles_tiles_json_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/tiles/tiles.json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TileJSON>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Demo
		/// Demo_v2_locations_tiles_viewer_get v2/locations/tiles/viewer
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task Demo_v2_locations_tiles_viewer_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/tiles/viewer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Tile
		/// Get_tile_v2_locations_tiles__z___x___y__pbf_get v2/locations/tiles/{z}/{x}/{y}.pbf
		/// </summary>
		/// <param name="location">limit data to location id</param>
		/// <returns>Successful Response</returns>
		public async Task Get_tile_v2_locations_tiles__z___x___y__pbf_getAsync(int z, int x, int y, int parameter, int[] location, System.DateTimeOffset lastUpdatedFrom, System.DateTimeOffset lastUpdatedTo, bool isMobile, int project, bool isAnalysis, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/tiles/"+z+"/"+x+"/"+y+".pbf?parameter=" + parameter+"&"+string.Join("&", location.Select(z => $"location={z}"))+"&lastUpdatedFrom=" + lastUpdatedFrom+"&lastUpdatedTo=" + lastUpdatedTo+"&isMobile="+isMobile+"&project="+project+"&isAnalysis="+isAnalysis;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Locations Get
		/// Locations_get_v2_locations__location_id__get v2/locations/{location_id}
		/// </summary>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Sort Direction</param>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <param name="city">
		///        Limit results by a certain city or cities.
		///        (ex. ?city=Chicago or ?city=Chicago&city=Boston)
		///        </param>
		/// <param name="order_by">Order by a field</param>
		/// <param name="isMobile">Location is mobile</param>
		/// <param name="isAnalysis">Data is the product of a previous analysis/aggregation and not raw measurements</param>
		/// <param name="sourceName">Name of the data source</param>
		/// <param name="entity">Source entity type.</param>
		/// <param name="sensorType">Type of Sensor</param>
		/// <param name="modelName">Model Name of Sensor</param>
		/// <param name="manufacturerName">Manufacturer of Sensor</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQResult> Locations_get_v2_locations__location_id__getAsync(
					int location_id, 
					int limit, 
					int page, 
					int offset, 
					Sort sort, 
					bool has_geo, 
					int parameter_id, 
					string[] parameter, 
					string[] unit, 
					string coordinates, 
					int radius, 
					string country_id, 
					string[] country, 
					string[] city, 
					string[] location, 
					LocationsOrder order_by, 
					bool isMobile, 
					bool isAnalysis, 
					string[] sourceName, 
					EntityTypes entity, 
					SensorTypes sensorType, 
					string[] modelName, 
					string[] manufacturerName, 
					bool dumpRaw, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/locations/"+location_id+"?limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&has_geo="+has_geo+"&parameter_id="+parameter_id+"&"+string.Join("&", parameter.Select(z => $"parameter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", unit.Select(z => $"unit={System.Uri.EscapeDataString(z.ToString())}"))+"&coordinates=" + (coordinates==null? "" : System.Uri.EscapeDataString(coordinates))+"&radius="+radius+"&country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", city.Select(z => $"city={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", location.Select(z => $"location={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by+"&isMobile="+isMobile+"&isAnalysis="+isAnalysis+"&"+string.Join("&", sourceName.Select(z => $"sourceName={System.Uri.EscapeDataString(z.ToString())}"))+"&entity=" + entity+"&sensorType=" + sensorType+"&"+string.Join("&", modelName.Select(z => $"modelName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", manufacturerName.Select(z => $"manufacturerName={System.Uri.EscapeDataString(z.ToString())}"))+"&dumpRaw="+dumpRaw;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Mfr Get
		/// Mfr_get_v2_manufacturers_get v2/manufacturers
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQResult> Mfr_get_v2_manufacturers_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/manufacturers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Measurements Get
		/// Measurements_get_v2_measurements_get v2/measurements
		/// </summary>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <param name="city">
		///        Limit results by a certain city or cities.
		///        (ex. ?city=Chicago or ?city=Chicago&city=Boston)
		///        </param>
		/// <returns>Successful Response</returns>
		public async Task<object> Measurements_get_v2_measurements_getAsync(
					string format, 
					System.DateTimeOffset date_from, 
					System.DateTimeOffset date_to, 
					int limit, 
					int page, 
					int offset, 
					Sort sort, 
					bool has_geo, 
					int parameter_id, 
					string[] parameter, 
					string[] unit, 
					string coordinates, 
					int radius, 
					string country_id, 
					string[] country, 
					string[] city, 
					int location_id, 
					string[] location, 
					MeasOrder order_by, 
					bool isMobile, 
					bool isAnalysis, 
					int project, 
					EntityTypes entity, 
					SensorTypes sensorType, 
					double value_from, 
					double value_to, 
					string include_fields, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/measurements?format=" + (format==null? "" : System.Uri.EscapeDataString(format))+"&date_from=" + date_from+"&date_to=" + date_to+"&limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&has_geo="+has_geo+"&parameter_id="+parameter_id+"&"+string.Join("&", parameter.Select(z => $"parameter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", unit.Select(z => $"unit={System.Uri.EscapeDataString(z.ToString())}"))+"&coordinates=" + (coordinates==null? "" : System.Uri.EscapeDataString(coordinates))+"&radius="+radius+"&country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", city.Select(z => $"city={System.Uri.EscapeDataString(z.ToString())}"))+"&location_id="+location_id+"&"+string.Join("&", location.Select(z => $"location={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by+"&isMobile="+isMobile+"&isAnalysis="+isAnalysis+"&project="+project+"&entity=" + entity+"&sensorType=" + sensorType+"&value_from="+value_from+"&value_to="+value_to+"&include_fields=" + (include_fields==null? "" : System.Uri.EscapeDataString(include_fields));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Model Get
		/// Model_get_v2_models_get v2/models
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQResult> Model_get_v2_models_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/models";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Parameters Get
		/// Parameters_get_v2_parameters_get v2/parameters
		/// </summary>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Define sort order.</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQParametersResult> Parameters_get_v2_parameters_getAsync(int limit, int page, int offset, Sort sort, string[] sourceName, int[] sourceId, string[] sourceSlug, string order_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/parameters?limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&"+string.Join("&", sourceName.Select(z => $"sourceName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", sourceId.Select(z => $"sourceId={z}"))+"&"+string.Join("&", sourceSlug.Select(z => $"sourceSlug={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + (order_by==null? "" : System.Uri.EscapeDataString(order_by));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQParametersResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Projects Get
		/// Projects_get_v2_projects_get v2/projects
		/// </summary>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Define sort order.</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQProjectsResult> Projects_get_v2_projects_getAsync(
					string country_id, 
					string[] country, 
					int limit, 
					int page, 
					int offset, 
					Sort sort, 
					int parameter_id, 
					string[] parameter, 
					string[] unit, 
					int project_id, 
					string[] project, 
					ProjectsOrder order_by, 
					bool isMobile, 
					bool isAnalysis, 
					string entity, 
					string sensorType, 
					string[] sourceName, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/projects?country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&parameter_id="+parameter_id+"&"+string.Join("&", parameter.Select(z => $"parameter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", unit.Select(z => $"unit={System.Uri.EscapeDataString(z.ToString())}"))+"&project_id="+project_id+"&"+string.Join("&", project.Select(z => $"project={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by+"&isMobile="+isMobile+"&isAnalysis="+isAnalysis+"&entity=" + (entity==null? "" : System.Uri.EscapeDataString(entity))+"&sensorType=" + (sensorType==null? "" : System.Uri.EscapeDataString(sensorType))+"&"+string.Join("&", sourceName.Select(z => $"sourceName={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQProjectsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Projects Get
		/// Projects_get_v2_projects__project_id__get v2/projects/{project_id}
		/// </summary>
		/// <param name="country_id">
		///        Limit results by a certain country using two letter country code.
		///        (ex. /US)
		///        </param>
		/// <param name="country">
		///        Limit results by a certain country using two letter country code.
		///        (ex. ?country=US or ?country=US&country=MX)
		///        </param>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Define sort order.</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQProjectsResult> Projects_get_v2_projects__project_id__getAsync(
					int project_id, 
					string country_id, 
					string[] country, 
					int limit, 
					int page, 
					int offset, 
					Sort sort, 
					int parameter_id, 
					string[] parameter, 
					string[] unit, 
					string[] project, 
					ProjectsOrder order_by, 
					bool isMobile, 
					bool isAnalysis, 
					string entity, 
					string sensorType, 
					string[] sourceName, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/projects/"+project_id+"?country_id=" + (country_id==null? "" : System.Uri.EscapeDataString(country_id))+"&"+string.Join("&", country.Select(z => $"country={System.Uri.EscapeDataString(z.ToString())}"))+"&limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&parameter_id="+parameter_id+"&"+string.Join("&", parameter.Select(z => $"parameter={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", unit.Select(z => $"unit={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", project.Select(z => $"project={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by+"&isMobile="+isMobile+"&isAnalysis="+isAnalysis+"&entity=" + (entity==null? "" : System.Uri.EscapeDataString(entity))+"&sensorType=" + (sensorType==null? "" : System.Uri.EscapeDataString(sensorType))+"&"+string.Join("&", sourceName.Select(z => $"sourceName={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQProjectsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sources Get
		/// Sources_get_v2_sources_get v2/sources
		/// </summary>
		/// <param name="limit">Change the number of results returned.</param>
		/// <param name="page">Paginate through results.</param>
		/// <param name="sort">Define sort order.</param>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQResult> Sources_get_v2_sources_getAsync(int limit, int page, int offset, Sort sort, string[] sourceName, int[] sourceId, string[] sourceSlug, SourcesOrder order_by, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/sources?limit="+limit+"&page="+page+"&offset="+offset+"&sort=" + sort+"&"+string.Join("&", sourceName.Select(z => $"sourceName={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", sourceId.Select(z => $"sourceId={z}"))+"&"+string.Join("&", sourceSlug.Select(z => $"sourceSlug={System.Uri.EscapeDataString(z.ToString())}"))+"&order_by=" + order_by;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Readme Get
		/// Readme_get_v2_sources_readme__slug__get v2/sources/readme/{slug}
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<object> Readme_get_v2_sources_readme__slug__getAsync(string slug, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/sources/readme/"+ (slug==null? "" : System.Uri.EscapeDataString(slug));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<object>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Summary Get
		/// Summary_get_v2_summary_get v2/summary
		/// </summary>
		/// <returns>Successful Response</returns>
		public async Task<OpenAQResult> Summary_get_v2_summary_getAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2/summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenAQResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
