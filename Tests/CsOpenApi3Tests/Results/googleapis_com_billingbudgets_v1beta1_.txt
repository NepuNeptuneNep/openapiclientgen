//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// AllUpdatesRule defines notifications that are sent based on budget spend and thresholds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudBillingBudgetsV1beta1AllUpdatesRule
	{
		
		/// <summary>
		/// Optional. When set to true, disables default notifications sent when a threshold is exceeded. Default notifications are sent to those with Billing Account Administrator and Billing Account User IAM roles for the target account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableDefaultIamRecipients")]
		public System.Nullable<System.Boolean> DisableDefaultIamRecipients { get; set; }
		
		/// <summary>
		/// Optional. When set to true, and when the budget has a single project configured, notifications will be sent to project level recipients of that project. This field will be ignored if the budget has multiple or no project configured. Currently, project level recipients are the users with `Owner` role on a cloud project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableProjectLevelRecipients")]
		public System.Nullable<System.Boolean> EnableProjectLevelRecipients { get; set; }
		
		/// <summary>
		/// Optional. Targets to send notifications to when a threshold is exceeded. This is in addition to default recipients who have billing account IAM roles. The value is the full REST resource name of a monitoring notification channel with the form `projects/{project_id}/notificationChannels/{channel_id}`. A maximum of 5 channels are allowed. See https://cloud.google.com/billing/docs/how-to/budgets-notification-recipients for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monitoringNotificationChannels")]
		public string[] MonitoringNotificationChannels { get; set; }
		
		/// <summary>
		/// Optional. The name of the Pub/Sub topic where budget related messages will be published, in the form `projects/{project_id}/topics/{topic_id}`. Updates are sent at regular intervals to the topic. The topic needs to be created before the budget is created; see https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications for more details. Caller is expected to have `pubsub.topics.setIamPolicy` permission on the topic when it's set for a budget, otherwise, the API call will fail with PERMISSION_DENIED. See https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#permissions_required_for_this_task for more details on Pub/Sub roles and permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubsubTopic")]
		public string PubsubTopic { get; set; }
		
		/// <summary>
		/// Optional. Required when AllUpdatesRule.pubsub_topic is set. The schema version of the notification sent to AllUpdatesRule.pubsub_topic. Only "1.0" is accepted. It represents the JSON schema as defined in https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
	}
	
	/// <summary>
	/// A budget is a plan that describes what you expect to spend on Cloud projects, plus the rules to execute as spend is tracked against that plan, (for example, send an alert when 90% of the target spend is met). The budget time period is configurable, with options such as month (default), quarter, year, or custom time period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudBillingBudgetsV1beta1Budget
	{
		
		/// <summary>
		/// AllUpdatesRule defines notifications that are sent based on budget spend and thresholds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allUpdatesRule")]
		public GoogleCloudBillingBudgetsV1beta1AllUpdatesRule AllUpdatesRule { get; set; }
		
		/// <summary>
		/// The budgeted amount for each usage period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public GoogleCloudBillingBudgetsV1beta1BudgetAmount Amount { get; set; }
		
		/// <summary>
		/// A filter for a budget, limiting the scope of the cost to calculate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budgetFilter")]
		public GoogleCloudBillingBudgetsV1beta1Filter BudgetFilter { get; set; }
		
		/// <summary>
		/// User data for display name in UI. Validation: <= 60 chars.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Optional. Etag to validate that the object is unchanged for a read-modify-write operation. An empty etag will cause an update to overwrite other changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Output only. Resource name of the budget. The resource name implies the scope of a budget. Values are of the form `billingAccounts/{billingAccountId}/budgets/{budgetId}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownershipScope")]
		public System.Nullable<GoogleCloudBillingBudgetsV1beta1BudgetOwnershipScope> OwnershipScope { get; set; }
		
		/// <summary>
		/// Optional. Rules that trigger alerts (notifications of thresholds being crossed) when spend exceeds the specified percentages of the budget. Optional for `pubsubTopic` notifications. Required if using email notifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thresholdRules")]
		public GoogleCloudBillingBudgetsV1beta1ThresholdRule[] ThresholdRules { get; set; }
	}
	
	/// <summary>
	/// The budgeted amount for each usage period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudBillingBudgetsV1beta1BudgetAmount
	{
		
		/// <summary>
		/// Describes a budget amount targeted to the last Filter.calendar_period spend. At this time, the amount is automatically 100% of the last calendar period's spend; that is, there are no other options yet. Future configuration options will be described here (for example, configuring a percentage of last period's spend). LastPeriodAmount cannot be set for a budget configured with a Filter.custom_period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastPeriodAmount")]
		public GoogleCloudBillingBudgetsV1beta1LastPeriodAmount LastPeriodAmount { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="specifiedAmount")]
		public GoogleTypeMoney SpecifiedAmount { get; set; }
	}
	
	/// <summary>
	/// Describes a budget amount targeted to the last Filter.calendar_period spend. At this time, the amount is automatically 100% of the last calendar period's spend; that is, there are no other options yet. Future configuration options will be described here (for example, configuring a percentage of last period's spend). LastPeriodAmount cannot be set for a budget configured with a Filter.custom_period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudBillingBudgetsV1beta1LastPeriodAmount
	{
	}
	
	/// <summary>
	/// Represents an amount of money with its currency type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleTypeMoney
	{
		
		/// <summary>
		/// The three-letter currency code defined in ISO 4217.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	/// <summary>
	/// A filter for a budget, limiting the scope of the cost to calculate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudBillingBudgetsV1beta1Filter
	{
		
		/// <summary>
		/// Optional. Specifies to track usage for recurring calendar period. For example, assume that CalendarPeriod.QUARTER is set. The budget will track usage from April 1 to June 30, when the current calendar month is April, May, June. After that, it will track usage from July 1 to September 30 when the current calendar month is July, August, September, so on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calendarPeriod")]
		public System.Nullable<GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod> CalendarPeriod { get; set; }
		
		/// <summary>
		/// Optional. If Filter.credit_types_treatment is INCLUDE_SPECIFIED_CREDITS, this is a list of credit types to be subtracted from gross cost to determine the spend for threshold calculations. See [a list of acceptable credit type values](https://cloud.google.com/billing/docs/how-to/export-data-bigquery-tables#credits-type). If Filter.credit_types_treatment is **not** INCLUDE_SPECIFIED_CREDITS, this field must be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditTypes")]
		public string[] CreditTypes { get; set; }
		
		/// <summary>
		/// Optional. If not set, default behavior is `INCLUDE_ALL_CREDITS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditTypesTreatment")]
		public System.Nullable<GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment> CreditTypesTreatment { get; set; }
		
		/// <summary>
		/// All date times begin at 12 AM US and Canadian Pacific Time (UTC-8).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customPeriod")]
		public GoogleCloudBillingBudgetsV1beta1CustomPeriod CustomPeriod { get; set; }
		
		/// <summary>
		/// Optional. A single label and value pair specifying that usage from only this set of labeled resources should be included in the budget. If omitted, the report will include all labeled and unlabeled usage. An object containing a single `"key": value` pair. Example: `{ "name": "wrench" }`. _Currently, multiple entries or multiple values per entry are not allowed._
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string[]> Labels { get; set; }
		
		/// <summary>
		/// Optional. A set of projects of the form `projects/{project}`, specifying that usage from only this set of projects should be included in the budget. If omitted, the report will include all usage for the billing account, regardless of which project the usage occurred on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projects")]
		public string[] Projects { get; set; }
		
		/// <summary>
		/// Optional. A set of folder and organization names of the form `folders/{folderId}` or `organizations/{organizationId}`, specifying that usage from only this set of folders and organizations should be included in the budget. If omitted, the budget includes all usage that the billing account pays for. If the folder or organization contains projects that are paid for by a different Cloud Billing account, the budget *doesn't* apply to those projects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceAncestors")]
		public string[] ResourceAncestors { get; set; }
		
		/// <summary>
		/// Optional. A set of services of the form `services/{service_id}`, specifying that usage from only this set of services should be included in the budget. If omitted, the report will include usage for all the services. The service names are available through the Catalog API: https://cloud.google.com/billing/v1/how-tos/catalog-api.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="services")]
		public string[] Services { get; set; }
		
		/// <summary>
		/// Optional. A set of subaccounts of the form `billingAccounts/{account_id}`, specifying that usage from only this set of subaccounts should be included in the budget. If a subaccount is set to the name of the parent account, usage from the parent account will be included. If omitted, the report will include usage from the parent account and all subaccounts, if they exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subaccounts")]
		public string[] Subaccounts { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleCloudBillingBudgetsV1beta1FilterCalendarPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CALENDAR_PERIOD_UNSPECIFIED")]
		CALENDAR_PERIOD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MONTH")]
		MONTH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QUARTER")]
		QUARTER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YEAR")]
		YEAR = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleCloudBillingBudgetsV1beta1FilterCreditTypesTreatment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREDIT_TYPES_TREATMENT_UNSPECIFIED")]
		CREDIT_TYPES_TREATMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUDE_ALL_CREDITS")]
		INCLUDE_ALL_CREDITS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXCLUDE_ALL_CREDITS")]
		EXCLUDE_ALL_CREDITS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCLUDE_SPECIFIED_CREDITS")]
		INCLUDE_SPECIFIED_CREDITS = 3,
	}
	
	/// <summary>
	/// All date times begin at 12 AM US and Canadian Pacific Time (UTC-8).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudBillingBudgetsV1beta1CustomPeriod
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public GoogleTypeDate EndDate { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public GoogleTypeDate StartDate { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleTypeDate
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleCloudBillingBudgetsV1beta1BudgetOwnershipScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OWNERSHIP_SCOPE_UNSPECIFIED")]
		OWNERSHIP_SCOPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL_USERS")]
		ALL_USERS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BILLING_ACCOUNT")]
		BILLING_ACCOUNT = 2,
	}
	
	/// <summary>
	/// ThresholdRule contains the definition of a threshold. Threshold rules define the triggering events used to generate a budget notification email. When a threshold is crossed (spend exceeds the specified percentages of the budget), budget alert emails are sent to the email recipients you specify in the [NotificationsRule](#notificationsrule). Threshold rules also affect the fields included in the [JSON data object](https://cloud.google.com/billing/docs/how-to/budgets-programmatic-notifications#notification_format) sent to a Pub/Sub topic. Threshold rules are _required_ if using email notifications. Threshold rules are _optional_ if only setting a [`pubsubTopic` NotificationsRule](#NotificationsRule), unless you want your JSON data object to include data about the thresholds you set. For more information, see [set budget threshold rules and actions](https://cloud.google.com/billing/docs/how-to/budgets#budget-actions).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudBillingBudgetsV1beta1ThresholdRule
	{
		
		/// <summary>
		/// Optional. The type of basis used to determine if spend has passed the threshold. Behavior defaults to CURRENT_SPEND if not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spendBasis")]
		public System.Nullable<GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis> SpendBasis { get; set; }
		
		/// <summary>
		/// Required. Send an alert when this threshold is exceeded. This is a 1.0-based percentage, so 0.5 = 50%. Validation: non-negative number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thresholdPercent")]
		public System.Nullable<System.Double> ThresholdPercent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GoogleCloudBillingBudgetsV1beta1ThresholdRuleSpendBasis
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BASIS_UNSPECIFIED")]
		BASIS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CURRENT_SPEND")]
		CURRENT_SPEND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FORECASTED_SPEND")]
		FORECASTED_SPEND = 2,
	}
	
	/// <summary>
	/// Request for CreateBudget
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudBillingBudgetsV1beta1CreateBudgetRequest
	{
		
		/// <summary>
		/// A budget is a plan that describes what you expect to spend on Cloud projects, plus the rules to execute as spend is tracked against that plan, (for example, send an alert when 90% of the target spend is met). The budget time period is configurable, with options such as month (default), quarter, year, or custom time period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budget")]
		public GoogleCloudBillingBudgetsV1beta1Budget Budget { get; set; }
	}
	
	/// <summary>
	/// Response for ListBudgets
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudBillingBudgetsV1beta1ListBudgetsResponse
	{
		
		/// <summary>
		/// List of the budgets owned by the requested billing account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budgets")]
		public GoogleCloudBillingBudgetsV1beta1Budget[] Budgets { get; set; }
		
		/// <summary>
		/// If not empty, indicates that there may be more budgets that match the request; this value should be passed in a new `ListBudgetsRequest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Request for UpdateBudget
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudBillingBudgetsV1beta1UpdateBudgetRequest
	{
		
		/// <summary>
		/// A budget is a plan that describes what you expect to spend on Cloud projects, plus the rules to execute as spend is tracked against that plan, (for example, send an alert when 90% of the target spend is met). The budget time period is configurable, with options such as month (default), quarter, year, or custom time period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budget")]
		public GoogleCloudBillingBudgetsV1beta1Budget Budget { get; set; }
		
		/// <summary>
		/// Optional. Indicates which fields in the provided budget to update. Read-only fields (such as `name`) cannot be changed. If this is not provided, then only fields with non-default values from the request are updated. See https://developers.google.com/protocol-buffers/docs/proto3#default for more details about default values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleProtobufEmpty
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes a budget. Returns successfully if already deleted.
		/// Billingbudgets_billingAccounts_budgets_delete v1beta1/{name}
		/// </summary>
		/// <param name="name">Required. Name of the budget to delete. Values are of the form `billingAccounts/{billingAccountId}/budgets/{budgetId}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleProtobufEmpty> Billingbudgets_billingAccounts_budgets_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleProtobufEmpty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a budget. WARNING: There are some fields exposed on the Google Cloud Console that aren't available on this API. When reading from the API, you will not see these fields in the return value, though they may have been set in the Cloud Console.
		/// Billingbudgets_billingAccounts_budgets_get v1beta1/{name}
		/// </summary>
		/// <param name="name">Required. Name of budget to get. Values are of the form `billingAccounts/{billingAccountId}/budgets/{budgetId}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudBillingBudgetsV1beta1Budget> Billingbudgets_billingAccounts_budgets_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleCloudBillingBudgetsV1beta1Budget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a budget and returns the updated budget. WARNING: There are some fields exposed on the Google Cloud Console that aren't available on this API. Budget fields that are not exposed in this API will not be changed by this method.
		/// Billingbudgets_billingAccounts_budgets_patch v1beta1/{name}
		/// </summary>
		/// <param name="name">Output only. Resource name of the budget. The resource name implies the scope of a budget. Values are of the form `billingAccounts/{billingAccountId}/budgets/{budgetId}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudBillingBudgetsV1beta1Budget> Billingbudgets_billingAccounts_budgets_patchAsync(string name, GoogleCloudBillingBudgetsV1beta1UpdateBudgetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleCloudBillingBudgetsV1beta1Budget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of budgets for a billing account. WARNING: There are some fields exposed on the Google Cloud Console that aren't available on this API. When reading from the API, you will not see these fields in the return value, though they may have been set in the Cloud Console.
		/// Billingbudgets_billingAccounts_budgets_list v1beta1/{parent}/budgets
		/// </summary>
		/// <param name="parent">Required. Name of billing account to list budgets under. Values are of the form `billingAccounts/{billingAccountId}`.</param>
		/// <param name="pageSize">Optional. The maximum number of budgets to return per page. The default and maximum value are 100.</param>
		/// <param name="pageToken">Optional. The value returned by the last `ListBudgetsResponse` which indicates that this is a continuation of a prior `ListBudgets` call, and that the system should return the next page of data.</param>
		/// <param name="scope">Optional. Set the scope of the budgets to be returned, in the format of the resource name. The scope of a budget is the cost that it tracks, such as costs for a single project, or the costs for all projects in a folder. Only project scope (in the format of "projects/project-id" or "projects/123") is supported in this field. When this field is set to a project's resource name, the budgets returned are tracking the costs for that project.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudBillingBudgetsV1beta1ListBudgetsResponse> Billingbudgets_billingAccounts_budgets_listAsync(string parent, int pageSize, string pageToken, string scope, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/budgets&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&scope=" + (scope==null? "" : System.Uri.EscapeDataString(scope));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleCloudBillingBudgetsV1beta1ListBudgetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new budget. See [Quotas and limits](https://cloud.google.com/billing/quotas) for more information on the limits of the number of budgets you can create.
		/// Billingbudgets_billingAccounts_budgets_create v1beta1/{parent}/budgets
		/// </summary>
		/// <param name="parent">Required. The name of the billing account to create the budget in. Values are of the form `billingAccounts/{billingAccountId}`.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleCloudBillingBudgetsV1beta1Budget> Billingbudgets_billingAccounts_budgets_createAsync(string parent, GoogleCloudBillingBudgetsV1beta1CreateBudgetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/budgets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GoogleCloudBillingBudgetsV1beta1Budget>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
