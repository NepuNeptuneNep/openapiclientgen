//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceptAttachmentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment Attachment { get; set; }
	}
	
	/// <summary>
	/// Describes a core network attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Attachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttachmentType AttachmentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttachmentState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EdgeLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AttachmentPolicyRuleNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SegmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ProposedSegmentChange ProposedSegmentChange { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AttachmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONNECT")]
		CONNECT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SITE_TO_SITE_VPN")]
		SITE_TO_SITE_VPN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VPC")]
		VPC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSIT_GATEWAY_ROUTE_TABLE")]
		TRANSIT_GATEWAY_ROUTE_TABLE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AttachmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REJECTED")]
		REJECTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_ATTACHMENT_ACCEPTANCE")]
		PENDING_ATTACHMENT_ACCEPTANCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_NETWORK_UPDATE")]
		PENDING_NETWORK_UPDATE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_TAG_ACCEPTANCE")]
		PENDING_TAG_ACCEPTANCE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 8,
	}
	
	/// <summary>
	/// Describes a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Describes a proposed segment change. In some cases, the segment change must first be evaluated and accepted. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProposedSegmentChange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AttachmentPolicyRuleNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SegmentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateConnectPeerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectPeerAssociation ConnectPeerAssociation { get; set; }
	}
	
	/// <summary>
	/// Describes a core network Connect peer association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectPeerAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectPeerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectPeerAssociationState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectPeerAssociationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateCustomerGatewayResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerGatewayAssociation CustomerGatewayAssociation { get; set; }
	}
	
	/// <summary>
	/// Describes the association between a customer gateway, a device, and a link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerGatewayAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomerGatewayArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectPeerAssociationState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateLinkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LinkAssociation LinkAssociation { get; set; }
	}
	
	/// <summary>
	/// Describes the association between a device and a link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectPeerAssociationState LinkAssociationState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateTransitGatewayConnectPeerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayConnectPeerAssociation TransitGatewayConnectPeerAssociation { get; set; }
	}
	
	/// <summary>
	/// Describes a transit gateway Connect peer association.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitGatewayConnectPeerAssociation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayConnectPeerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectPeerAssociationState State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConnectAttachmentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectAttachment ConnectAttachment { get; set; }
	}
	
	/// <summary>
	/// Describes a core network Connect attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectAttachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment Attachment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransportAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectAttachmentOptions Options { get; set; }
	}
	
	/// <summary>
	/// Describes a core network Connect attachment options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectAttachmentOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TunnelProtocol Protocol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TunnelProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GRE")]
		GRE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConnectPeerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectPeer ConnectPeer { get; set; }
	}
	
	/// <summary>
	/// Describes a core network Connect peer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectPeer
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectPeerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EdgeLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectPeerState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectPeerConfiguration Configuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectPeerState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 3,
	}
	
	/// <summary>
	/// Describes a core network Connect peer configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectPeerConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PeerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InsideCidrBlocks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TunnelProtocol Protocol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectPeerBgpConfiguration[] BgpConfigurations { get; set; }
	}
	
	/// <summary>
	/// Describes a core network BGP configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectPeerBgpConfiguration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CoreNetworkAsn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PeerAsn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PeerAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConnectionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Connection Connection { get; set; }
	}
	
	/// <summary>
	/// Describes a connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Connection
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectedDeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectedLinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectionState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCoreNetworkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetwork CoreNetwork { get; set; }
	}
	
	/// <summary>
	/// Describes a core network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CoreNetwork
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkSegment[] Segments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkEdge[] Edges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CoreNetworkState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 3,
	}
	
	/// <summary>
	/// Describes a core network segment, which are dedicated routes. Only attachments within this segment can communicate with each other.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CoreNetworkSegment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EdgeLocations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SharedSegments { get; set; }
	}
	
	/// <summary>
	/// Describes a core network edge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CoreNetworkEdge
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EdgeLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Asn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InsideCidrBlocks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CoreNetworkPolicyException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Device Device { get; set; }
	}
	
	/// <summary>
	/// Describes a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Device
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DeviceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AWSLocation AWSLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Vendor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SiteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Specifies a location in Amazon Web Services.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AWSLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Zone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetArn { get; set; }
	}
	
	/// <summary>
	/// Describes a location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateGlobalNetworkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalNetwork GlobalNetwork { get; set; }
	}
	
	/// <summary>
	/// Describes a global network. This is a single private network acting as a high-level container for your network objects, including an Amazon Web Services-managed Core Network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GlobalNetwork
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLinkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Link Link { get; set; }
	}
	
	/// <summary>
	/// Describes a link.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Link
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SiteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Bandwidth Bandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Provider { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Describes bandwidth information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Bandwidth
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UploadSpeed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DownloadSpeed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSiteResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Site Site { get; set; }
	}
	
	/// <summary>
	/// Describes a site.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Site
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SiteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SiteArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSiteToSiteVpnAttachmentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SiteToSiteVpnAttachment SiteToSiteVpnAttachment { get; set; }
	}
	
	/// <summary>
	/// Creates a site-to-site VPN attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SiteToSiteVpnAttachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment Attachment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VpnConnectionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTransitGatewayPeeringResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayPeering TransitGatewayPeering { get; set; }
	}
	
	/// <summary>
	/// Describes a transit gateway peering attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitGatewayPeering
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Peering Peering { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayPeeringAttachmentId { get; set; }
	}
	
	/// <summary>
	/// Describes a peering connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Peering
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PeeringId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PeeringType PeeringType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectPeerState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EdgeLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PeeringType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSIT_GATEWAY")]
		TRANSIT_GATEWAY = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTransitGatewayRouteTableAttachmentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRouteTableAttachment TransitGatewayRouteTableAttachment { get; set; }
	}
	
	/// <summary>
	/// Describes a transit gateway route table attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitGatewayRouteTableAttachment
	{
		
		/// <summary>
		/// Describes a core network attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Attachment Attachment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PeeringId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVpcAttachmentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VpcAttachment VpcAttachment { get; set; }
	}
	
	/// <summary>
	/// Describes a VPC attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcAttachment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment Attachment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcOptions Options { get; set; }
	}
	
	/// <summary>
	/// Describes the VPC options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VpcOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Ipv6Support { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplianceModeSupport { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAttachmentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment Attachment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConnectPeerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectPeer ConnectPeer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConnectionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Connection Connection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCoreNetworkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetwork CoreNetwork { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCoreNetworkPolicyVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkPolicy CoreNetworkPolicy { get; set; }
	}
	
	/// <summary>
	/// Describes a core network policy. You can have only one LIVE Core Policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CoreNetworkPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PolicyVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkPolicyAlias Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChangeSetState ChangeSetState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkPolicyError[] PolicyErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CoreNetworkPolicyAlias
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LIVE")]
		LIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LATEST")]
		LATEST = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChangeSetState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_GENERATION")]
		PENDING_GENERATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED_GENERATION")]
		FAILED_GENERATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="READY_TO_EXECUTE")]
		READY_TO_EXECUTE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXECUTING")]
		EXECUTING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXECUTION_SUCCEEDED")]
		EXECUTION_SUCCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OUT_OF_DATE")]
		OUT_OF_DATE = 5,
	}
	
	/// <summary>
	/// Provides details about an error in a core network policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CoreNetworkPolicyError
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Device Device { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteGlobalNetworkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalNetwork GlobalNetwork { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLinkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Link Link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePeeringResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Peering Peering { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteResourcePolicyResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSiteResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Site Site { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregisterTransitGatewayResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRegistration TransitGatewayRegistration { get; set; }
	}
	
	/// <summary>
	/// Describes the registration of a transit gateway to a global network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitGatewayRegistration
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRegistrationStateReason State { get; set; }
	}
	
	/// <summary>
	/// Describes the status of a transit gateway registration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitGatewayRegistrationStateReason
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRegistrationState Code { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransitGatewayRegistrationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeGlobalNetworksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalNetwork[] GlobalNetworks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateConnectPeerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectPeerAssociation ConnectPeerAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateCustomerGatewayResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerGatewayAssociation CustomerGatewayAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateLinkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LinkAssociation LinkAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateTransitGatewayConnectPeerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayConnectPeerAssociation TransitGatewayConnectPeerAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecuteCoreNetworkChangeSetResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConnectAttachmentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectAttachment ConnectAttachment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConnectPeerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectPeer ConnectPeer { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConnectPeerAssociationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectPeerAssociation[] ConnectPeerAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConnectionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Connection[] Connections { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCoreNetworkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetwork CoreNetwork { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCoreNetworkChangeEventsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkChangeEvent[] CoreNetworkChangeEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a core network change event. This can be a change to a segment, attachment, route, etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CoreNetworkChangeEvent
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ChangeType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChangeAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentifierPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EventTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChangeStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkChangeEventValues Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChangeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CORE_NETWORK_SEGMENT")]
		CORE_NETWORK_SEGMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CORE_NETWORK_EDGE")]
		CORE_NETWORK_EDGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATTACHMENT_MAPPING")]
		ATTACHMENT_MAPPING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATTACHMENT_ROUTE_PROPAGATION")]
		ATTACHMENT_ROUTE_PROPAGATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATTACHMENT_ROUTE_STATIC")]
		ATTACHMENT_ROUTE_STATIC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CORE_NETWORK_CONFIGURATION")]
		CORE_NETWORK_CONFIGURATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEGMENTS_CONFIGURATION")]
		SEGMENTS_CONFIGURATION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SEGMENT_ACTIONS_CONFIGURATION")]
		SEGMENT_ACTIONS_CONFIGURATION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ATTACHMENT_POLICIES_CONFIGURATION")]
		ATTACHMENT_POLICIES_CONFIGURATION = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChangeAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ADD")]
		ADD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MODIFY")]
		MODIFY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REMOVE")]
		REMOVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChangeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_STARTED")]
		NOT_STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETE")]
		COMPLETE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 3,
	}
	
	/// <summary>
	/// Describes a core network change event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CoreNetworkChangeEventValues
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EdgeLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SegmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Cidr { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCoreNetworkChangeSetResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkChange[] CoreNetworkChanges { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Details describing a core network change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CoreNetworkChange
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ChangeType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChangeAction Action { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkChangeValues PreviousValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkChangeValues NewValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IdentifierPath { get; set; }
	}
	
	/// <summary>
	/// Describes a core network change.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CoreNetworkChangeValues
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SegmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] EdgeLocations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Asn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Cidr { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] InsideCidrBlocks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SharedSegments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCoreNetworkPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkPolicy CoreNetworkPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCustomerGatewayAssociationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CustomerGatewayAssociation[] CustomerGatewayAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDevicesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Device[] Devices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLinkAssociationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public LinkAssociation[] LinkAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLinksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Link[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetNetworkResourceCountsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkResourceCount[] NetworkResourceCounts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a resource count.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkResourceCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetNetworkResourceRelationshipsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Relationship[] Relationships { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a resource relationship.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Relationship
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetNetworkResourcesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkResource[] NetworkResources { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a network resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkResource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RegisteredGatewayArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset DefinitionTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkResourceMetadataMap Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkResourceMetadataMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetNetworkRoutesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteTableArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkSegmentEdgeIdentifier CoreNetworkSegmentEdge { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteTableType RouteTableType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset RouteTableTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkRoute[] NetworkRoutes { get; set; }
	}
	
	/// <summary>
	/// Returns details about a core network edge.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CoreNetworkSegmentEdgeIdentifier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SegmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EdgeLocation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RouteTableType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSIT_GATEWAY_ROUTE_TABLE")]
		TRANSIT_GATEWAY_ROUTE_TABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CORE_NETWORK_SEGMENT")]
		CORE_NETWORK_SEGMENT = 1,
	}
	
	/// <summary>
	/// Describes a network route.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkRoute
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkRouteDestination[] Destinations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrefixListId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteType Type { get; set; }
	}
	
	/// <summary>
	/// Describes the destination of a network route.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkRouteDestination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SegmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EdgeLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RouteState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVE")]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLACKHOLE")]
		BLACKHOLE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RouteType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROPAGATED")]
		PROPAGATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STATIC")]
		STATIC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetNetworkTelemetryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkTelemetry[] NetworkTelemetry { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes the telemetry information for a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkTelemetry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RegisteredGatewayArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AwsRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionHealth Health { get; set; }
	}
	
	/// <summary>
	/// Describes connection health.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectionHealth
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BGP")]
		BGP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IPSEC")]
		IPSEC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UP")]
		UP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOWN")]
		DOWN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetResourcePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRouteAnalysisResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RouteAnalysis RouteAnalysis { get; set; }
	}
	
	/// <summary>
	/// Describes a route analysis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteAnalysis
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RouteAnalysisId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset StartTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteAnalysisStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteAnalysisEndpointOptions Source { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteAnalysisEndpointOptions Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeReturnPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseMiddleboxes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteAnalysisPath ForwardPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteAnalysisPath ReturnPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RouteAnalysisStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING")]
		RUNNING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETED")]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
	}
	
	/// <summary>
	/// Describes a source or a destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteAnalysisEndpointOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
	}
	
	/// <summary>
	/// Describes a route analysis path.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteAnalysisPath
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RouteAnalysisCompletion CompletionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PathComponent[] Path { get; set; }
	}
	
	/// <summary>
	/// Describes the status of an analysis at completion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteAnalysisCompletion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RouteAnalysisCompletionResultCode ResultCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteAnalysisCompletionReasonCode ReasonCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReasonContextMap ReasonContext { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RouteAnalysisCompletionResultCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONNECTED")]
		CONNECTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_CONNECTED")]
		NOT_CONNECTED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RouteAnalysisCompletionReasonCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSIT_GATEWAY_ATTACHMENT_NOT_FOUND")]
		TRANSIT_GATEWAY_ATTACHMENT_NOT_FOUND = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSIT_GATEWAY_ATTACHMENT_NOT_IN_TRANSIT_GATEWAY")]
		TRANSIT_GATEWAY_ATTACHMENT_NOT_IN_TRANSIT_GATEWAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CYCLIC_PATH_DETECTED")]
		CYCLIC_PATH_DETECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSIT_GATEWAY_ATTACHMENT_STABLE_ROUTE_TABLE_NOT_FOUND")]
		TRANSIT_GATEWAY_ATTACHMENT_STABLE_ROUTE_TABLE_NOT_FOUND = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ROUTE_NOT_FOUND")]
		ROUTE_NOT_FOUND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BLACKHOLE_ROUTE_FOR_DESTINATION_FOUND")]
		BLACKHOLE_ROUTE_FOR_DESTINATION_FOUND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INACTIVE_ROUTE_FOR_DESTINATION_FOUND")]
		INACTIVE_ROUTE_FOR_DESTINATION_FOUND = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSIT_GATEWAY_ATTACHMENT_ATTACH_ARN_NO_MATCH")]
		TRANSIT_GATEWAY_ATTACHMENT_ATTACH_ARN_NO_MATCH = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MAX_HOPS_EXCEEDED")]
		MAX_HOPS_EXCEEDED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POSSIBLE_MIDDLEBOX")]
		POSSIBLE_MIDDLEBOX = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_DESTINATION_ARN_PROVIDED")]
		NO_DESTINATION_ARN_PROVIDED = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReasonContextMap
	{
	}
	
	/// <summary>
	/// Describes a path component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PathComponent
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Sequence { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkResourceSummary Resource { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DestinationCidrBlock { get; set; }
	}
	
	/// <summary>
	/// Describes a network resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkResourceSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RegisteredGatewayArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Definition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NameTag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsMiddlebox { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSiteToSiteVpnAttachmentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SiteToSiteVpnAttachment SiteToSiteVpnAttachment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSitesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Site[] Sites { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTransitGatewayConnectPeerAssociationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayConnectPeerAssociation[] TransitGatewayConnectPeerAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTransitGatewayPeeringResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayPeering TransitGatewayPeering { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTransitGatewayRegistrationsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRegistration[] TransitGatewayRegistrations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTransitGatewayRouteTableAttachmentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRouteTableAttachment TransitGatewayRouteTableAttachment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVpcAttachmentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VpcAttachment VpcAttachment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAttachmentsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment[] Attachments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListConnectPeersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectPeerSummary[] ConnectPeers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Summary description of a Connect peer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectPeerSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectPeerId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EdgeLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ConnectPeerState ConnectPeerState { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCoreNetworkPolicyVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkPolicyVersion[] CoreNetworkPolicyVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes a core network policy version.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CoreNetworkPolicyVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PolicyVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkPolicyAlias Alias { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChangeSetState ChangeSetState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCoreNetworksResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkSummary[] CoreNetworks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Returns summary information about a core network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CoreNetworkSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OwnerAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkState State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOrganizationServiceAccessStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationStatus OrganizationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The status of an Amazon Web Services Organization and the accounts within that organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationAwsServiceAccessStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SLRDeploymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccountStatus[] AccountStatusList { get; set; }
	}
	
	/// <summary>
	/// Describes the current status of an account within an Amazon Web Services Organization, including service-linked roles (SLRs).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountStatus
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SLRDeploymentStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPeeringsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Peering[] Peerings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] TagList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutCoreNetworkPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkPolicy CoreNetworkPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutResourcePolicyResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterTransitGatewayResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransitGatewayRegistration TransitGatewayRegistration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RejectAttachmentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Attachment Attachment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RestoreCoreNetworkPolicyVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkPolicy CoreNetworkPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartOrganizationServiceAccessUpdateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationStatus OrganizationStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartRouteAnalysisResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public RouteAnalysis RouteAnalysis { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateConnectionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Connection Connection { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCoreNetworkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetwork CoreNetwork { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Device Device { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateGlobalNetworkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public GlobalNetwork GlobalNetwork { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateLinkResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Link Link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateNetworkResourceMetadataResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public NetworkResourceMetadataMap Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSiteResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Site Site { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVpcAttachmentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public VpcAttachment VpcAttachment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AcceptAttachmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateConnectPeerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectPeerId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateCustomerGatewayRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CustomerGatewayArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateLinkRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociateTransitGatewayConnectPeerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayConnectPeerArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
	}
	
	/// <summary>
	/// Describes the BGP options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BgpOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PeerAsn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConnectAttachmentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EdgeLocation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransportAttachmentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConnectAttachmentOptions Options { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConnectPeerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectAttachmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkAddress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PeerAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BgpOptions BgpOptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] InsideCidrBlocks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateConnectionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConnectedDeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectedLinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCoreNetworkRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GlobalNetworkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AWSLocation AWSLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Vendor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SiteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateGlobalNetworkRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLinkRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Bandwidth Bandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Provider { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SiteId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSiteRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSiteToSiteVpnAttachmentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpnConnectionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTransitGatewayPeeringRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTransitGatewayRouteTableAttachmentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PeeringId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVpcAttachmentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CoreNetworkId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VpcArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcOptions Options { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CustomerGatewayAssociationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAttachmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConnectPeerRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConnectionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCoreNetworkPolicyVersionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteCoreNetworkRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDeviceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteGlobalNetworkRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLinkRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePeeringRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteResourcePolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSiteRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeregisterTransitGatewayRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DescribeGlobalNetworksRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateConnectPeerRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateCustomerGatewayRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateLinkRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisassociateTransitGatewayConnectPeerRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecuteCoreNetworkChangeSetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilterMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConnectAttachmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConnectPeerAssociationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConnectPeerRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetConnectionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCoreNetworkChangeEventsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCoreNetworkChangeSetRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCoreNetworkPolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCoreNetworkRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCustomerGatewayAssociationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDevicesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLinkAssociationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLinksRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetNetworkResourceCountsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetNetworkResourceRelationshipsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetNetworkResourcesRequest
	{
	}
	
	/// <summary>
	/// Describes a route table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteTableIdentifier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkSegmentEdgeIdentifier CoreNetworkSegmentEdge { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetNetworkRoutesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RouteTableIdentifier RouteTableIdentifier { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ExactCidrMatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] LongestPrefixMatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetOfMatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] SupernetOfMatches { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PrefixListIds { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteState[] States { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RouteType[] Types { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FilterMap DestinationFilters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetNetworkTelemetryRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetResourcePolicyRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRouteAnalysisRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSiteToSiteVpnAttachmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSitesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTransitGatewayConnectPeerAssociationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTransitGatewayPeeringRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTransitGatewayRegistrationsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetTransitGatewayRouteTableAttachmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetVpcAttachmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GlobalNetworkState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LinkState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LinkAssociationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAttachmentsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListConnectPeersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCoreNetworkPolicyVersionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCoreNetworksRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOrganizationServiceAccessStatusRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PeeringState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPeeringsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutCoreNetworkPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LatestVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutResourcePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegisterTransitGatewayRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RejectAttachmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RestoreCoreNetworkPolicyVersionRequest
	{
	}
	
	/// <summary>
	/// Describes a source or a destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteAnalysisEndpointOptionsSpecification
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SiteState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartOrganizationServiceAccessUpdateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Action { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartRouteAnalysisRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RouteAnalysisEndpointOptionsSpecification Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RouteAnalysisEndpointOptionsSpecification Destination { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeReturnPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseMiddleboxes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransitGatewayConnectPeerAssociationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETING")]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELETED")]
		DELETED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateConnectionRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ConnectedLinkId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateCoreNetworkRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AWSLocation AWSLocation { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Vendor { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Model { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Describes a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Location Location { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SiteId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateGlobalNetworkRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateLinkRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Bandwidth Bandwidth { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Provider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateNetworkResourceMetadataRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public NetworkResourceMetadataMap Metadata { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSiteRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Location Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateVpcAttachmentRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AddSubnetArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] RemoveSubnetArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcOptions Options { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Accepts a core network attachment request. </p> <p>Once the attachment request is accepted by a core network owner, the attachment is created and connected to a core network.</p>
		/// AcceptAttachment attachments/{attachmentId}/accept
		/// </summary>
		/// <param name="attachmentId">The ID of the attachment. 
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<AcceptAttachmentResponse> AcceptAttachmentAsync(string attachmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attachments/"+ (attachmentId==null? "" : System.Uri.EscapeDataString(attachmentId))+"/accept";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AcceptAttachmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a core network Connect peer with a device and optionally, with a link. </p> <p>If you specify a link, it must be associated with the specified device. You can only associate core network Connect peers that have been created on a core network Connect attachment on a core network. </p>
		/// AssociateConnectPeer global-networks/{globalNetworkId}/connect-peer-associations
		/// </summary>
		/// <param name="globalNetworkId">The ID of your global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<AssociateConnectPeerResponse> AssociateConnectPeerAsync(string globalNetworkId, AssociateConnectPeerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/connect-peer-associations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateConnectPeerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a core network Connect peer associations.
		/// GetConnectPeerAssociations global-networks/{globalNetworkId}/connect-peer-associations
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="connectPeerIds">The IDs of the Connect peers.</param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetConnectPeerAssociationsResponse> GetConnectPeerAssociationsAsync(string globalNetworkId, string[] connectPeerIds, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/connect-peer-associations&"+string.Join("&", connectPeerIds.Select(z => $"connectPeerIds={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConnectPeerAssociationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a customer gateway with a device and optionally, with a link. If you specify a link, it must be associated with the specified device. </p> <p>You can only associate customer gateways that are connected to a VPN attachment on a transit gateway or core network registered in your global network. When you register a transit gateway or core network, customer gateways that are connected to the transit gateway are automatically included in the global network. To list customer gateways that are connected to a transit gateway, use the <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeVpnConnections.html">DescribeVpnConnections</a> EC2 API and filter by <code>transit-gateway-id</code>.</p> <p>You cannot associate a customer gateway with more than one device and link. </p>
		/// AssociateCustomerGateway global-networks/{globalNetworkId}/customer-gateway-associations
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<AssociateCustomerGatewayResponse> AssociateCustomerGatewayAsync(string globalNetworkId, AssociateCustomerGatewayPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/customer-gateway-associations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateCustomerGatewayResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the association information for customer gateways that are associated with devices and links in your global network.
		/// GetCustomerGatewayAssociations global-networks/{globalNetworkId}/customer-gateway-associations
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="customerGatewayArns">One or more customer gateway Amazon Resource Names (ARNs). The maximum is 10.</param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetCustomerGatewayAssociationsResponse> GetCustomerGatewayAssociationsAsync(string globalNetworkId, string[] customerGatewayArns, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/customer-gateway-associations&"+string.Join("&", customerGatewayArns.Select(z => $"customerGatewayArns={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCustomerGatewayAssociationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Associates a link to a device. A device can be associated to multiple links and a link can be associated to multiple devices. The device and link must be in the same global network and the same site.
		/// AssociateLink global-networks/{globalNetworkId}/link-associations
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<AssociateLinkResponse> AssociateLinkAsync(string globalNetworkId, AssociateLinkPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/link-associations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateLinkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the link associations for a device or a link. Either the device ID or the link ID must be specified.
		/// GetLinkAssociations global-networks/{globalNetworkId}/link-associations
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="deviceId">The ID of the device.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="linkId">The ID of the link.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetLinkAssociationsResponse> GetLinkAssociationsAsync(string globalNetworkId, string deviceId, string linkId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/link-associations&deviceId=" + (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"&linkId=" + (linkId==null? "" : System.Uri.EscapeDataString(linkId))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLinkAssociationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Associates a transit gateway Connect peer with a device, and optionally, with a link. If you specify a link, it must be associated with the specified device. </p> <p>You can only associate transit gateway Connect peers that have been created on a transit gateway that's registered in your global network.</p> <p>You cannot associate a transit gateway Connect peer with more than one device and link. </p>
		/// AssociateTransitGatewayConnectPeer global-networks/{globalNetworkId}/transit-gateway-connect-peer-associations
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<AssociateTransitGatewayConnectPeerResponse> AssociateTransitGatewayConnectPeerAsync(string globalNetworkId, AssociateTransitGatewayConnectPeerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/transit-gateway-connect-peer-associations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AssociateTransitGatewayConnectPeerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more of your transit gateway Connect peer associations in a global network.
		/// GetTransitGatewayConnectPeerAssociations global-networks/{globalNetworkId}/transit-gateway-connect-peer-associations
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="transitGatewayConnectPeerArns">One or more transit gateway Connect peer Amazon Resource Names (ARNs).</param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetTransitGatewayConnectPeerAssociationsResponse> GetTransitGatewayConnectPeerAssociationsAsync(string globalNetworkId, string[] transitGatewayConnectPeerArns, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/transit-gateway-connect-peer-associations&"+string.Join("&", transitGatewayConnectPeerArns.Select(z => $"transitGatewayConnectPeerArns={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTransitGatewayConnectPeerAssociationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a core network Connect attachment from a specified core network attachment. </p> <p>A core network Connect attachment is a GRE-based tunnel attachment that you can use to establish a connection between a core network and an appliance. A core network Connect attachment uses an existing VPC attachment as the underlying transport mechanism.</p>
		/// CreateConnectAttachment connect-attachments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateConnectAttachmentResponse> CreateConnectAttachmentAsync(CreateConnectAttachmentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "connect-attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateConnectAttachmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a core network Connect peer for a specified core network connect attachment between a core network and an appliance. The peer address and transit gateway address must be the same IP address family (IPv4 or IPv6).
		/// CreateConnectPeer connect-peers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateConnectPeerResponse> CreateConnectPeerAsync(CreateConnectPeerPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "connect-peers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateConnectPeerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of core network Connect peers.
		/// ListConnectPeers connect-peers
		/// </summary>
		/// <param name="coreNetworkId">The ID of a core network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="connectAttachmentId">The ID of the attachment.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListConnectPeersResponse> ListConnectPeersAsync(string coreNetworkId, string connectAttachmentId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "connect-peers?coreNetworkId=" + (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId))+"&connectAttachmentId=" + (connectAttachmentId==null? "" : System.Uri.EscapeDataString(connectAttachmentId))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListConnectPeersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a connection between two devices. The devices can be a physical or virtual appliance that connects to a third-party appliance in a VPC, or a physical appliance that connects to another physical appliance in an on-premises network.
		/// CreateConnection global-networks/{globalNetworkId}/connections
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateConnectionResponse> CreateConnectionAsync(string globalNetworkId, CreateConnectionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/connections";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateConnectionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more of your connections in a global network.
		/// GetConnections global-networks/{globalNetworkId}/connections
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="connectionIds">One or more connection IDs.</param>
		/// <param name="deviceId">The ID of the device.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetConnectionsResponse> GetConnectionsAsync(string globalNetworkId, string[] connectionIds, string deviceId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/connections&"+string.Join("&", connectionIds.Select(z => $"connectionIds={System.Uri.EscapeDataString(z.ToString())}"))+"&deviceId=" + (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConnectionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a core network as part of your global network, and optionally, with a core network policy.
		/// CreateCoreNetwork core-networks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateCoreNetworkResponse> CreateCoreNetworkAsync(CreateCoreNetworkPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "core-networks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateCoreNetworkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of owned and shared core networks.
		/// ListCoreNetworks core-networks
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListCoreNetworksResponse> ListCoreNetworksAsync(int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "core-networks?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCoreNetworksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new device in a global network. If you specify both a site ID and a location, the location of the site is used for visualization in the Network Manager console.
		/// CreateDevice global-networks/{globalNetworkId}/devices
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateDeviceResponse> CreateDeviceAsync(string globalNetworkId, CreateDevicePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/devices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more of your devices in a global network.
		/// GetDevices global-networks/{globalNetworkId}/devices
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="deviceIds">One or more device IDs. The maximum is 10.</param>
		/// <param name="siteId">The ID of the site.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetDevicesResponse> GetDevicesAsync(string globalNetworkId, string[] deviceIds, string siteId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/devices&"+string.Join("&", deviceIds.Select(z => $"deviceIds={System.Uri.EscapeDataString(z.ToString())}"))+"&siteId=" + (siteId==null? "" : System.Uri.EscapeDataString(siteId))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDevicesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new, empty global network.
		/// CreateGlobalNetwork global-networks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateGlobalNetworkResponse> CreateGlobalNetworkAsync(CreateGlobalNetworkPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateGlobalNetworkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Describes one or more global networks. By default, all global networks are described. To describe the objects in your global network, you must use the appropriate <code>Get*</code> action. For example, to list the transit gateways in your global network, use <a>GetTransitGatewayRegistrations</a>.
		/// DescribeGlobalNetworks global-networks
		/// </summary>
		/// <param name="globalNetworkIds">The IDs of one or more global networks. The maximum is 10.</param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DescribeGlobalNetworksResponse> DescribeGlobalNetworksAsync(string[] globalNetworkIds, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks?"+string.Join("&", globalNetworkIds.Select(z => $"globalNetworkIds={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeGlobalNetworksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new link for a specified site.
		/// CreateLink global-networks/{globalNetworkId}/links
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateLinkResponse> CreateLinkAsync(string globalNetworkId, CreateLinkPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/links";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateLinkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets information about one or more links in a specified global network.</p> <p>If you specify the site ID, you cannot specify the type or provider in the same request. You can specify the type and provider in the same request.</p>
		/// GetLinks global-networks/{globalNetworkId}/links
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="linkIds">One or more link IDs. The maximum is 10.</param>
		/// <param name="siteId">The ID of the site.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="type">The link type.
		/// Max length: 256
		/// Min length: 0
		// </param>
		/// <param name="provider">The link provider.
		/// Max length: 256
		/// Min length: 0
		// </param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetLinksResponse> GetLinksAsync(string globalNetworkId, string[] linkIds, string siteId, string type, string provider, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/links&"+string.Join("&", linkIds.Select(z => $"linkIds={System.Uri.EscapeDataString(z.ToString())}"))+"&siteId=" + (siteId==null? "" : System.Uri.EscapeDataString(siteId))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type))+"&provider=" + (provider==null? "" : System.Uri.EscapeDataString(provider))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLinksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new site in a global network.
		/// CreateSite global-networks/{globalNetworkId}/sites
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<CreateSiteResponse> CreateSiteAsync(string globalNetworkId, CreateSitePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/sites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateSiteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets information about one or more of your sites in a global network.
		/// GetSites global-networks/{globalNetworkId}/sites
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="siteIds">One or more site IDs. The maximum is 10.</param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetSitesResponse> GetSitesAsync(string globalNetworkId, string[] siteIds, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/sites&"+string.Join("&", siteIds.Select(z => $"siteIds={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSitesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an Amazon Web Services site-to-site VPN attachment on an edge location of a core network.
		/// CreateSiteToSiteVpnAttachment site-to-site-vpn-attachments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateSiteToSiteVpnAttachmentResponse> CreateSiteToSiteVpnAttachmentAsync(CreateSiteToSiteVpnAttachmentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "site-to-site-vpn-attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateSiteToSiteVpnAttachmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a transit gateway peering connection.
		/// CreateTransitGatewayPeering transit-gateway-peerings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTransitGatewayPeeringResponse> CreateTransitGatewayPeeringAsync(CreateTransitGatewayPeeringPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transit-gateway-peerings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateTransitGatewayPeeringResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a transit gateway route table attachment.
		/// CreateTransitGatewayRouteTableAttachment transit-gateway-route-table-attachments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateTransitGatewayRouteTableAttachmentResponse> CreateTransitGatewayRouteTableAttachmentAsync(CreateTransitGatewayRouteTableAttachmentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transit-gateway-route-table-attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateTransitGatewayRouteTableAttachmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a VPC attachment on an edge location of a core network.
		/// CreateVpcAttachment vpc-attachments
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateVpcAttachmentResponse> CreateVpcAttachmentAsync(CreateVpcAttachmentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vpc-attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateVpcAttachmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an attachment. Supports all attachment types.
		/// DeleteAttachment attachments/{attachmentId}
		/// </summary>
		/// <param name="attachmentId">The ID of the attachment to delete.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteAttachmentResponse> DeleteAttachmentAsync(string attachmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attachments/"+ (attachmentId==null? "" : System.Uri.EscapeDataString(attachmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAttachmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a Connect peer.
		/// DeleteConnectPeer connect-peers/{connectPeerId}
		/// </summary>
		/// <param name="connectPeerId">The ID of the deleted Connect peer.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteConnectPeerResponse> DeleteConnectPeerAsync(string connectPeerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "connect-peers/"+ (connectPeerId==null? "" : System.Uri.EscapeDataString(connectPeerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteConnectPeerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a core network Connect peer.
		/// GetConnectPeer connect-peers/{connectPeerId}
		/// </summary>
		/// <param name="connectPeerId">The ID of the Connect peer.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<GetConnectPeerResponse> GetConnectPeerAsync(string connectPeerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "connect-peers/"+ (connectPeerId==null? "" : System.Uri.EscapeDataString(connectPeerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConnectPeerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified connection in your global network.
		/// DeleteConnection global-networks/{globalNetworkId}/connections/{connectionId}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="connectionId">The ID of the connection.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteConnectionResponse> DeleteConnectionAsync(string globalNetworkId, string connectionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/connections/"+ (connectionId==null? "" : System.Uri.EscapeDataString(connectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteConnectionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the information for an existing connection. To remove information for any of the parameters, specify an empty string.
		/// UpdateConnection global-networks/{globalNetworkId}/connections/{connectionId}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="connectionId">The ID of the connection.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateConnectionResponse> UpdateConnectionAsync(string globalNetworkId, string connectionId, UpdateConnectionPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/connections/"+ (connectionId==null? "" : System.Uri.EscapeDataString(connectionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateConnectionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a core network along with all core network policies. This can only be done if there are no attachments on a core network.
		/// DeleteCoreNetwork core-networks/{coreNetworkId}
		/// </summary>
		/// <param name="coreNetworkId">The network ID of the deleted core network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteCoreNetworkResponse> DeleteCoreNetworkAsync(string coreNetworkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "core-networks/"+ (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteCoreNetworkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the LIVE policy for a core network.
		/// GetCoreNetwork core-networks/{coreNetworkId}
		/// </summary>
		/// <param name="coreNetworkId">The ID of a core network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<GetCoreNetworkResponse> GetCoreNetworkAsync(string coreNetworkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "core-networks/"+ (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCoreNetworkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the description of a core network.
		/// UpdateCoreNetwork core-networks/{coreNetworkId}
		/// </summary>
		/// <param name="coreNetworkId">The ID of a core network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateCoreNetworkResponse> UpdateCoreNetworkAsync(string coreNetworkId, UpdateCoreNetworkPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "core-networks/"+ (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateCoreNetworkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a policy version from a core network. You can't delete the current LIVE policy.
		/// DeleteCoreNetworkPolicyVersion core-networks/{coreNetworkId}/core-network-policy-versions/{policyVersionId}
		/// </summary>
		/// <param name="coreNetworkId">The ID of a core network for the deleted policy.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="policyVersionId">The version ID of the deleted policy.</param>
		/// <returns>Success</returns>
		public async Task<DeleteCoreNetworkPolicyVersionResponse> DeleteCoreNetworkPolicyVersionAsync(string coreNetworkId, int policyVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "core-networks/"+ (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId))+"/core-network-policy-versions/"+policyVersionId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteCoreNetworkPolicyVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing device. You must first disassociate the device from any links and customer gateways.
		/// DeleteDevice global-networks/{globalNetworkId}/devices/{deviceId}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="deviceId">The ID of the device.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteDeviceResponse> DeleteDeviceAsync(string globalNetworkId, string deviceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the details for an existing device. To remove information for any of the parameters, specify an empty string.
		/// UpdateDevice global-networks/{globalNetworkId}/devices/{deviceId}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="deviceId">The ID of the device.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateDeviceResponse> UpdateDeviceAsync(string globalNetworkId, string deviceId, UpdateDevicePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/devices/"+ (deviceId==null? "" : System.Uri.EscapeDataString(deviceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDeviceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing global network. You must first delete all global network objects (devices, links, and sites), deregister all transit gateways, and delete any core networks.
		/// DeleteGlobalNetwork global-networks/{globalNetworkId}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteGlobalNetworkResponse> DeleteGlobalNetworkAsync(string globalNetworkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteGlobalNetworkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing global network. To remove information for any of the parameters, specify an empty string.
		/// UpdateGlobalNetwork global-networks/{globalNetworkId}
		/// </summary>
		/// <param name="globalNetworkId">The ID of your global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateGlobalNetworkResponse> UpdateGlobalNetworkAsync(string globalNetworkId, UpdateGlobalNetworkPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateGlobalNetworkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing link. You must first disassociate the link from any devices and customer gateways.
		/// DeleteLink global-networks/{globalNetworkId}/links/{linkId}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="linkId">The ID of the link.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteLinkResponse> DeleteLinkAsync(string globalNetworkId, string linkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/links/"+ (linkId==null? "" : System.Uri.EscapeDataString(linkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteLinkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the details for an existing link. To remove information for any of the parameters, specify an empty string.
		/// UpdateLink global-networks/{globalNetworkId}/links/{linkId}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="linkId">The ID of the link.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateLinkResponse> UpdateLinkAsync(string globalNetworkId, string linkId, UpdateLinkPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/links/"+ (linkId==null? "" : System.Uri.EscapeDataString(linkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateLinkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing peering connection.
		/// DeletePeering peerings/{peeringId}
		/// </summary>
		/// <param name="peeringId">The ID of the peering connection to delete.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DeletePeeringResponse> DeletePeeringAsync(string peeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "peerings/"+ (peeringId==null? "" : System.Uri.EscapeDataString(peeringId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeletePeeringResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource policy for the specified resource. This revokes the access of the principals specified in the resource policy.
		/// DeleteResourcePolicy resource-policy/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The ARN of the policy to delete.
		/// Max length: 1500
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteResourcePolicyResponse> DeleteResourcePolicyAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "resource-policy/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteResourcePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a resource policy.
		/// GetResourcePolicy resource-policy/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource.
		/// Max length: 1500
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<GetResourcePolicyResponse> GetResourcePolicyAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "resource-policy/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetResourcePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates or updates a resource policy.
		/// PutResourcePolicy resource-policy/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The ARN of the resource policy. 
		/// Max length: 1500
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<PutResourcePolicyResponse> PutResourcePolicyAsync(string resourceArn, PutResourcePolicyPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "resource-policy/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutResourcePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing site. The site cannot be associated with any device or link.
		/// DeleteSite global-networks/{globalNetworkId}/sites/{siteId}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="siteId">The ID of the site.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DeleteSiteResponse> DeleteSiteAsync(string globalNetworkId, string siteId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/sites/"+ (siteId==null? "" : System.Uri.EscapeDataString(siteId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteSiteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the information for an existing site. To remove information for any of the parameters, specify an empty string.
		/// UpdateSite global-networks/{globalNetworkId}/sites/{siteId}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="siteId">The ID of your site.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateSiteResponse> UpdateSiteAsync(string globalNetworkId, string siteId, UpdateSitePatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/sites/"+ (siteId==null? "" : System.Uri.EscapeDataString(siteId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateSiteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deregisters a transit gateway from your global network. This action does not delete your transit gateway, or modify any of its attachments. This action removes any customer gateway associations.
		/// DeregisterTransitGateway global-networks/{globalNetworkId}/transit-gateway-registrations/{transitGatewayArn}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="transitGatewayArn">The Amazon Resource Name (ARN) of the transit gateway.
		/// Max length: 500
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DeregisterTransitGatewayResponse> DeregisterTransitGatewayAsync(string globalNetworkId, string transitGatewayArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/transit-gateway-registrations/"+ (transitGatewayArn==null? "" : System.Uri.EscapeDataString(transitGatewayArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeregisterTransitGatewayResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a core network Connect peer from a device and a link.
		/// DisassociateConnectPeer global-networks/{globalNetworkId}/connect-peer-associations/{connectPeerId}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="connectPeerId">The ID of the Connect peer to disassociate from a device.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DisassociateConnectPeerResponse> DisassociateConnectPeerAsync(string globalNetworkId, string connectPeerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/connect-peer-associations/"+ (connectPeerId==null? "" : System.Uri.EscapeDataString(connectPeerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateConnectPeerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a customer gateway from a device and a link.
		/// DisassociateCustomerGateway global-networks/{globalNetworkId}/customer-gateway-associations/{customerGatewayArn}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="customerGatewayArn">The Amazon Resource Name (ARN) of the customer gateway.
		/// Max length: 500
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DisassociateCustomerGatewayResponse> DisassociateCustomerGatewayAsync(string globalNetworkId, string customerGatewayArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/customer-gateway-associations/"+ (customerGatewayArn==null? "" : System.Uri.EscapeDataString(customerGatewayArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateCustomerGatewayResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates an existing device from a link. You must first disassociate any customer gateways that are associated with the link.
		/// DisassociateLink global-networks/{globalNetworkId}/link-associations#deviceId&linkId
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="deviceId">The ID of the device.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="linkId">The ID of the link.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DisassociateLinkResponse> DisassociateLinkAsync(string globalNetworkId, string deviceId, string linkId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/link-associations#deviceId&linkId&deviceId=" + (deviceId==null? "" : System.Uri.EscapeDataString(deviceId))+"&linkId=" + (linkId==null? "" : System.Uri.EscapeDataString(linkId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateLinkResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Disassociates a transit gateway Connect peer from a device and link.
		/// DisassociateTransitGatewayConnectPeer global-networks/{globalNetworkId}/transit-gateway-connect-peer-associations/{transitGatewayConnectPeerArn}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="transitGatewayConnectPeerArn">The Amazon Resource Name (ARN) of the transit gateway Connect peer.
		/// Max length: 500
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<DisassociateTransitGatewayConnectPeerResponse> DisassociateTransitGatewayConnectPeerAsync(string globalNetworkId, string transitGatewayConnectPeerArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/transit-gateway-connect-peer-associations/"+ (transitGatewayConnectPeerArn==null? "" : System.Uri.EscapeDataString(transitGatewayConnectPeerArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DisassociateTransitGatewayConnectPeerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Executes a change set on your core network. Deploys changes globally based on the policy submitted..
		/// ExecuteCoreNetworkChangeSet core-networks/{coreNetworkId}/core-network-change-sets/{policyVersionId}/execute
		/// </summary>
		/// <param name="coreNetworkId">The ID of a core network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="policyVersionId">The ID of the policy version.</param>
		/// <returns>Success</returns>
		public async Task<ExecuteCoreNetworkChangeSetResponse> ExecuteCoreNetworkChangeSetAsync(string coreNetworkId, int policyVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "core-networks/"+ (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId))+"/core-network-change-sets/"+policyVersionId+"/execute";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExecuteCoreNetworkChangeSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a core network Connect attachment.
		/// GetConnectAttachment connect-attachments/{attachmentId}
		/// </summary>
		/// <param name="attachmentId">The ID of the attachment.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<GetConnectAttachmentResponse> GetConnectAttachmentAsync(string attachmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "connect-attachments/"+ (attachmentId==null? "" : System.Uri.EscapeDataString(attachmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetConnectAttachmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a core network change event.
		/// GetCoreNetworkChangeEvents core-networks/{coreNetworkId}/core-network-change-events/{policyVersionId}
		/// </summary>
		/// <param name="coreNetworkId">The ID of a core network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="policyVersionId">The ID of the policy version.</param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetCoreNetworkChangeEventsResponse> GetCoreNetworkChangeEventsAsync(string coreNetworkId, int policyVersionId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "core-networks/"+ (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId))+"/core-network-change-events/"+policyVersionId+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCoreNetworkChangeEventsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a change set between the LIVE core network policy and a submitted policy.
		/// GetCoreNetworkChangeSet core-networks/{coreNetworkId}/core-network-change-sets/{policyVersionId}
		/// </summary>
		/// <param name="coreNetworkId">The ID of a core network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="policyVersionId">The ID of the policy version.</param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetCoreNetworkChangeSetResponse> GetCoreNetworkChangeSetAsync(string coreNetworkId, int policyVersionId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "core-networks/"+ (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId))+"/core-network-change-sets/"+policyVersionId+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCoreNetworkChangeSetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns details about a core network policy. You can get details about your current live policy or any previous policy version.
		/// GetCoreNetworkPolicy core-networks/{coreNetworkId}/core-network-policy
		/// </summary>
		/// <param name="coreNetworkId">The ID of a core network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="policyVersionId">The ID of a core network policy version.</param>
		/// <param name="alias">The alias of a core network policy </param>
		/// <returns>Success</returns>
		public async Task<GetCoreNetworkPolicyResponse> GetCoreNetworkPolicyAsync(string coreNetworkId, int policyVersionId, CoreNetworkPolicyAlias alias, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "core-networks/"+ (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId))+"/core-network-policy&policyVersionId="+policyVersionId+"&alias=" + alias;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetCoreNetworkPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new, immutable version of a core network policy. A subsequent change set is created showing the differences between the LIVE policy and the submitted policy.
		/// PutCoreNetworkPolicy core-networks/{coreNetworkId}/core-network-policy
		/// </summary>
		/// <param name="coreNetworkId">The ID of a core network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<PutCoreNetworkPolicyResponse> PutCoreNetworkPolicyAsync(string coreNetworkId, PutCoreNetworkPolicyPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "core-networks/"+ (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId))+"/core-network-policy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutCoreNetworkPolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the count of network resources, by resource type, for the specified global network.
		/// GetNetworkResourceCounts global-networks/{globalNetworkId}/network-resource-count
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="resourceType"><p>The resource type.</p> <p>The following are the supported resource types for Direct Connect:</p> <ul> <li> <p> <code>dxcon</code> </p> </li> <li> <p> <code>dx-gateway</code> </p> </li> <li> <p> <code>dx-vif</code> </p> </li> </ul> <p>The following are the supported resource types for Network Manager:</p> <ul> <li> <p> <code>connection</code> </p> </li> <li> <p> <code>device</code> </p> </li> <li> <p> <code>link</code> </p> </li> <li> <p> <code>site</code> </p> </li> </ul> <p>The following are the supported resource types for Amazon VPC:</p> <ul> <li> <p> <code>customer-gateway</code> </p> </li> <li> <p> <code>transit-gateway</code> </p> </li> <li> <p> <code>transit-gateway-attachment</code> </p> </li> <li> <p> <code>transit-gateway-connect-peer</code> </p> </li> <li> <p> <code>transit-gateway-route-table</code> </p> </li> <li> <p> <code>vpn-connection</code> </p> </li> </ul>
		/// Max length: 256
		/// Min length: 0
		// </param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetNetworkResourceCountsResponse> GetNetworkResourceCountsAsync(string globalNetworkId, string resourceType, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/network-resource-count&resourceType=" + (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetNetworkResourceCountsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the network resource relationships for the specified global network.
		/// GetNetworkResourceRelationships global-networks/{globalNetworkId}/network-resource-relationships
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="coreNetworkId">The ID of a core network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="registeredGatewayArn">The ARN of the registered gateway.
		/// Max length: 1500
		/// Min length: 0
		// </param>
		/// <param name="awsRegion">The Amazon Web Services Region.
		/// Max length: 63
		/// Min length: 1
		// </param>
		/// <param name="accountId">The Amazon Web Services account ID.
		/// Max length: 12
		/// Min length: 12
		// </param>
		/// <param name="resourceType"><p>The resource type.</p> <p>The following are the supported resource types for Direct Connect:</p> <ul> <li> <p> <code>dxcon</code> </p> </li> <li> <p> <code>dx-gateway</code> </p> </li> <li> <p> <code>dx-vif</code> </p> </li> </ul> <p>The following are the supported resource types for Network Manager:</p> <ul> <li> <p> <code>connection</code> </p> </li> <li> <p> <code>device</code> </p> </li> <li> <p> <code>link</code> </p> </li> <li> <p> <code>site</code> </p> </li> </ul> <p>The following are the supported resource types for Amazon VPC:</p> <ul> <li> <p> <code>customer-gateway</code> </p> </li> <li> <p> <code>transit-gateway</code> </p> </li> <li> <p> <code>transit-gateway-attachment</code> </p> </li> <li> <p> <code>transit-gateway-connect-peer</code> </p> </li> <li> <p> <code>transit-gateway-route-table</code> </p> </li> <li> <p> <code>vpn-connection</code> </p> </li> </ul>
		/// Max length: 256
		/// Min length: 0
		// </param>
		/// <param name="resourceArn">The ARN of the gateway.
		/// Max length: 1500
		/// Min length: 0
		// </param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetNetworkResourceRelationshipsResponse> GetNetworkResourceRelationshipsAsync(string globalNetworkId, string coreNetworkId, string registeredGatewayArn, string awsRegion, string accountId, string resourceType, string resourceArn, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/network-resource-relationships&coreNetworkId=" + (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId))+"&registeredGatewayArn=" + (registeredGatewayArn==null? "" : System.Uri.EscapeDataString(registeredGatewayArn))+"&awsRegion=" + (awsRegion==null? "" : System.Uri.EscapeDataString(awsRegion))+"&accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&resourceType=" + (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"&resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetNetworkResourceRelationshipsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Describes the network resources for the specified global network.</p> <p>The results include information from the corresponding Describe call for the resource, minus any sensitive information such as pre-shared keys.</p>
		/// GetNetworkResources global-networks/{globalNetworkId}/network-resources
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="coreNetworkId">The ID of a core network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="registeredGatewayArn">The ARN of the gateway.
		/// Max length: 1500
		/// Min length: 0
		// </param>
		/// <param name="awsRegion">The Amazon Web Services Region.
		/// Max length: 63
		/// Min length: 1
		// </param>
		/// <param name="accountId">The Amazon Web Services account ID.
		/// Max length: 12
		/// Min length: 12
		// </param>
		/// <param name="resourceType"><p>The resource type.</p> <p>The following are the supported resource types for Direct Connect:</p> <ul> <li> <p> <code>dxcon</code> - The definition model is <a href="https://docs.aws.amazon.com/directconnect/latest/APIReference/API_Connection.html">Connection</a>.</p> </li> <li> <p> <code>dx-gateway</code> - The definition model is <a href="https://docs.aws.amazon.com/directconnect/latest/APIReference/API_DirectConnectGateway.html">DirectConnectGateway</a>.</p> </li> <li> <p> <code>dx-vif</code> - The definition model is <a href="https://docs.aws.amazon.com/directconnect/latest/APIReference/API_VirtualInterface.html">VirtualInterface</a>.</p> </li> </ul> <p>The following are the supported resource types for Network Manager:</p> <ul> <li> <p> <code>connection</code> - The definition model is <a href="https://docs.aws.amazon.com/networkmanager/latest/APIReference/API_Connection.html">Connection</a>.</p> </li> <li> <p> <code>device</code> - The definition model is <a href="https://docs.aws.amazon.com/networkmanager/latest/APIReference/API_Device.html">Device</a>.</p> </li> <li> <p> <code>link</code> - The definition model is <a href="https://docs.aws.amazon.com/networkmanager/latest/APIReference/API_Link.html">Link</a>.</p> </li> <li> <p> <code>site</code> - The definition model is <a href="https://docs.aws.amazon.com/networkmanager/latest/APIReference/API_Site.html">Site</a>.</p> </li> </ul> <p>The following are the supported resource types for Amazon VPC:</p> <ul> <li> <p> <code>customer-gateway</code> - The definition model is <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CustomerGateway.html">CustomerGateway</a>.</p> </li> <li> <p> <code>transit-gateway</code> - The definition model is <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TransitGateway.html">TransitGateway</a>.</p> </li> <li> <p> <code>transit-gateway-attachment</code> - The definition model is <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TransitGatewayAttachment.html">TransitGatewayAttachment</a>.</p> </li> <li> <p> <code>transit-gateway-connect-peer</code> - The definition model is <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TransitGatewayConnectPeer.html">TransitGatewayConnectPeer</a>.</p> </li> <li> <p> <code>transit-gateway-route-table</code> - The definition model is <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TransitGatewayRouteTable.html">TransitGatewayRouteTable</a>.</p> </li> <li> <p> <code>vpn-connection</code> - The definition model is <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VpnConnection.html">VpnConnection</a>.</p> </li> </ul>
		/// Max length: 256
		/// Min length: 0
		// </param>
		/// <param name="resourceArn">The ARN of the resource.
		/// Max length: 1500
		/// Min length: 0
		// </param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetNetworkResourcesResponse> GetNetworkResourcesAsync(string globalNetworkId, string coreNetworkId, string registeredGatewayArn, string awsRegion, string accountId, string resourceType, string resourceArn, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/network-resources&coreNetworkId=" + (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId))+"&registeredGatewayArn=" + (registeredGatewayArn==null? "" : System.Uri.EscapeDataString(registeredGatewayArn))+"&awsRegion=" + (awsRegion==null? "" : System.Uri.EscapeDataString(awsRegion))+"&accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&resourceType=" + (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"&resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetNetworkResourcesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the network routes of the specified global network.
		/// GetNetworkRoutes global-networks/{globalNetworkId}/network-routes
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<GetNetworkRoutesResponse> GetNetworkRoutesAsync(string globalNetworkId, GetNetworkRoutesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/network-routes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetNetworkRoutesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the network telemetry of the specified global network.
		/// GetNetworkTelemetry global-networks/{globalNetworkId}/network-telemetry
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="coreNetworkId">The ID of a core network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="registeredGatewayArn">The ARN of the gateway.
		/// Max length: 1500
		/// Min length: 0
		// </param>
		/// <param name="awsRegion">The Amazon Web Services Region.
		/// Max length: 63
		/// Min length: 1
		// </param>
		/// <param name="accountId">The Amazon Web Services account ID.
		/// Max length: 12
		/// Min length: 12
		// </param>
		/// <param name="resourceType"><p>The resource type.</p> <p>The following are the supported resource types for Direct Connect:</p> <ul> <li> <p> <code>dxcon</code> </p> </li> <li> <p> <code>dx-gateway</code> </p> </li> <li> <p> <code>dx-vif</code> </p> </li> </ul> <p>The following are the supported resource types for Network Manager:</p> <ul> <li> <p> <code>connection</code> </p> </li> <li> <p> <code>device</code> </p> </li> <li> <p> <code>link</code> </p> </li> <li> <p> <code>site</code> </p> </li> </ul> <p>The following are the supported resource types for Amazon VPC:</p> <ul> <li> <p> <code>customer-gateway</code> </p> </li> <li> <p> <code>transit-gateway</code> </p> </li> <li> <p> <code>transit-gateway-attachment</code> </p> </li> <li> <p> <code>transit-gateway-connect-peer</code> </p> </li> <li> <p> <code>transit-gateway-route-table</code> </p> </li> <li> <p> <code>vpn-connection</code> </p> </li> </ul>
		/// Max length: 256
		/// Min length: 0
		// </param>
		/// <param name="resourceArn">The ARN of the resource.
		/// Max length: 1500
		/// Min length: 0
		// </param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetNetworkTelemetryResponse> GetNetworkTelemetryAsync(string globalNetworkId, string coreNetworkId, string registeredGatewayArn, string awsRegion, string accountId, string resourceType, string resourceArn, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/network-telemetry&coreNetworkId=" + (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId))+"&registeredGatewayArn=" + (registeredGatewayArn==null? "" : System.Uri.EscapeDataString(registeredGatewayArn))+"&awsRegion=" + (awsRegion==null? "" : System.Uri.EscapeDataString(awsRegion))+"&accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&resourceType=" + (resourceType==null? "" : System.Uri.EscapeDataString(resourceType))+"&resourceArn=" + (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetNetworkTelemetryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the specified route analysis.
		/// GetRouteAnalysis global-networks/{globalNetworkId}/route-analyses/{routeAnalysisId}
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="routeAnalysisId">The ID of the route analysis.
		/// Max length: 256
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<GetRouteAnalysisResponse> GetRouteAnalysisAsync(string globalNetworkId, string routeAnalysisId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/route-analyses/"+ (routeAnalysisId==null? "" : System.Uri.EscapeDataString(routeAnalysisId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRouteAnalysisResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a site-to-site VPN attachment.
		/// GetSiteToSiteVpnAttachment site-to-site-vpn-attachments/{attachmentId}
		/// </summary>
		/// <param name="attachmentId">The ID of the attachment.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSiteToSiteVpnAttachmentResponse> GetSiteToSiteVpnAttachmentAsync(string attachmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "site-to-site-vpn-attachments/"+ (attachmentId==null? "" : System.Uri.EscapeDataString(attachmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetSiteToSiteVpnAttachmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a transit gateway peer.
		/// GetTransitGatewayPeering transit-gateway-peerings/{peeringId}
		/// </summary>
		/// <param name="peeringId">The ID of the peering request.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<GetTransitGatewayPeeringResponse> GetTransitGatewayPeeringAsync(string peeringId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transit-gateway-peerings/"+ (peeringId==null? "" : System.Uri.EscapeDataString(peeringId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTransitGatewayPeeringResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets information about the transit gateway registrations in a specified global network.
		/// GetTransitGatewayRegistrations global-networks/{globalNetworkId}/transit-gateway-registrations
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="transitGatewayArns">The Amazon Resource Names (ARNs) of one or more transit gateways. The maximum is 10.</param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<GetTransitGatewayRegistrationsResponse> GetTransitGatewayRegistrationsAsync(string globalNetworkId, string[] transitGatewayArns, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/transit-gateway-registrations&"+string.Join("&", transitGatewayArns.Select(z => $"transitGatewayArns={System.Uri.EscapeDataString(z.ToString())}"))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTransitGatewayRegistrationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Registers a transit gateway in your global network. Not all Regions support transit gateways for global networks. For a list of the supported Regions, see <a href="https://docs.aws.amazon.com/network-manager/latest/tgwnm/what-are-global-networks.html#nm-available-regions">Region Availability</a> in the <i>Amazon Web Services Transit Gateways for Global Networks User Guide</i>. The transit gateway can be in any of the supported Amazon Web Services Regions, but it must be owned by the same Amazon Web Services account that owns the global network. You cannot register a transit gateway in more than one global network.
		/// RegisterTransitGateway global-networks/{globalNetworkId}/transit-gateway-registrations
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<RegisterTransitGatewayResponse> RegisterTransitGatewayAsync(string globalNetworkId, RegisterTransitGatewayPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/transit-gateway-registrations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RegisterTransitGatewayResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about a transit gateway route table attachment.
		/// GetTransitGatewayRouteTableAttachment transit-gateway-route-table-attachments/{attachmentId}
		/// </summary>
		/// <param name="attachmentId">The ID of the transit gateway route table attachment.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<GetTransitGatewayRouteTableAttachmentResponse> GetTransitGatewayRouteTableAttachmentAsync(string attachmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transit-gateway-route-table-attachments/"+ (attachmentId==null? "" : System.Uri.EscapeDataString(attachmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetTransitGatewayRouteTableAttachmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a VPC attachment.
		/// GetVpcAttachment vpc-attachments/{attachmentId}
		/// </summary>
		/// <param name="attachmentId">The ID of the attachment.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<GetVpcAttachmentResponse> GetVpcAttachmentAsync(string attachmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vpc-attachments/"+ (attachmentId==null? "" : System.Uri.EscapeDataString(attachmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetVpcAttachmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a VPC attachment.
		/// UpdateVpcAttachment vpc-attachments/{attachmentId}
		/// </summary>
		/// <param name="attachmentId">The ID of the attachment.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateVpcAttachmentResponse> UpdateVpcAttachmentAsync(string attachmentId, UpdateVpcAttachmentPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "vpc-attachments/"+ (attachmentId==null? "" : System.Uri.EscapeDataString(attachmentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateVpcAttachmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of core network attachments.
		/// ListAttachments attachments
		/// </summary>
		/// <param name="coreNetworkId">The ID of a core network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="attachmentType">The type of attachment.</param>
		/// <param name="edgeLocation">The Region where the edge is located.
		/// Max length: 63
		/// Min length: 1
		// </param>
		/// <param name="state">The state of the attachment.</param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListAttachmentsResponse> ListAttachmentsAsync(string coreNetworkId, AttachmentType attachmentType, string edgeLocation, AttachmentState state, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attachments?coreNetworkId=" + (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId))+"&attachmentType=" + attachmentType+"&edgeLocation=" + (edgeLocation==null? "" : System.Uri.EscapeDataString(edgeLocation))+"&state=" + state+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAttachmentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of core network policy versions.
		/// ListCoreNetworkPolicyVersions core-networks/{coreNetworkId}/core-network-policy-versions
		/// </summary>
		/// <param name="coreNetworkId">The ID of a core network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListCoreNetworkPolicyVersionsResponse> ListCoreNetworkPolicyVersionsAsync(string coreNetworkId, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "core-networks/"+ (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId))+"/core-network-policy-versions&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCoreNetworkPolicyVersionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the status of the Service Linked Role (SLR) deployment for the accounts in a given Amazon Web Services Organization.
		/// ListOrganizationServiceAccessStatus organizations/service-access
		/// </summary>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<ListOrganizationServiceAccessStatusResponse> ListOrganizationServiceAccessStatusAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/service-access?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOrganizationServiceAccessStatusResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables the Network Manager service for an Amazon Web Services Organization. This can only be called by a management account within the organization.
		/// StartOrganizationServiceAccessUpdate organizations/service-access
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartOrganizationServiceAccessUpdateResponse> StartOrganizationServiceAccessUpdateAsync(StartOrganizationServiceAccessUpdatePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "organizations/service-access";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartOrganizationServiceAccessUpdateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the peerings for a core network.
		/// ListPeerings peerings
		/// </summary>
		/// <param name="coreNetworkId">The ID of a core network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="peeringType">Returns a list of a peering requests.</param>
		/// <param name="edgeLocation">Returns a list edge locations for the 
		/// Max length: 63
		/// Min length: 1
		// </param>
		/// <param name="state">Returns a list of the peering request states.</param>
		/// <param name="maxResults">The maximum number of results to return.
		/// Minimum: 1
		/// Maximum: 500
		// </param>
		/// <param name="nextToken">The token for the next page of results.
		/// Max length: 2048
		/// Min length: 0
		// </param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPeeringsResponse> ListPeeringsAsync(string coreNetworkId, PeeringType peeringType, string edgeLocation, ConnectPeerState state, int maxResults, string nextToken, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "peerings?coreNetworkId=" + (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId))+"&peeringType=" + peeringType+"&edgeLocation=" + (edgeLocation==null? "" : System.Uri.EscapeDataString(edgeLocation))+"&state=" + state+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPeeringsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags for a specified resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.
		/// Max length: 1500
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tags a specified resource.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.
		/// Max length: 1500
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Rejects a core network attachment request.
		/// RejectAttachment attachments/{attachmentId}/reject
		/// </summary>
		/// <param name="attachmentId">The ID of the attachment.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<RejectAttachmentResponse> RejectAttachmentAsync(string attachmentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "attachments/"+ (attachmentId==null? "" : System.Uri.EscapeDataString(attachmentId))+"/reject";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RejectAttachmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Restores a previous policy version as a new, immutable version of a core network policy. A subsequent change set is created showing the differences between the LIVE policy and restored policy.
		/// RestoreCoreNetworkPolicyVersion core-networks/{coreNetworkId}/core-network-policy-versions/{policyVersionId}/restore
		/// </summary>
		/// <param name="coreNetworkId">The ID of a core network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="policyVersionId">The ID of the policy version to restore.</param>
		/// <returns>Success</returns>
		public async Task<RestoreCoreNetworkPolicyVersionResponse> RestoreCoreNetworkPolicyVersionAsync(string coreNetworkId, int policyVersionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "core-networks/"+ (coreNetworkId==null? "" : System.Uri.EscapeDataString(coreNetworkId))+"/core-network-policy-versions/"+policyVersionId+"/restore";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RestoreCoreNetworkPolicyVersionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts analyzing the routing path between the specified source and destination. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/tgw/route-analyzer.html">Route Analyzer</a>.
		/// StartRouteAnalysis global-networks/{globalNetworkId}/route-analyses
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<StartRouteAnalysisResponse> StartRouteAnalysisAsync(string globalNetworkId, StartRouteAnalysisPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/route-analyses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartRouteAnalysisResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes tags from a specified resource.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) of the resource.
		/// Max length: 1500
		/// Min length: 0
		// </param>
		/// <param name="tagKeys">The tag keys to remove from the specified resource.</param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the resource metadata for the specified global network.
		/// UpdateNetworkResourceMetadata global-networks/{globalNetworkId}/network-resources/{resourceArn}/metadata
		/// </summary>
		/// <param name="globalNetworkId">The ID of the global network.
		/// Max length: 50
		/// Min length: 0
		// </param>
		/// <param name="resourceArn">The ARN of the resource.
		/// Max length: 1500
		/// Min length: 0
		// </param>
		/// <returns>Success</returns>
		public async Task<UpdateNetworkResourceMetadataResponse> UpdateNetworkResourceMetadataAsync(string globalNetworkId, string resourceArn, UpdateNetworkResourceMetadataPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "global-networks/"+ (globalNetworkId==null? "" : System.Uri.EscapeDataString(globalNetworkId))+"/network-resources/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"/metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateNetworkResourceMetadataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class AssociateConnectPeerPostBody
	{
		
		/// <summary>
		/// The ID of the Connect peer.
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: ^connect-peer-([0-9a-f]{8,17})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^connect-peer-([0-9a-f]{8,17})$")]
		public string ConnectPeerId { get; set; }
		
		/// <summary>
		/// The ID of the device.
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// The ID of the link.
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string LinkId { get; set; }
	}
	
	public class AssociateCustomerGatewayPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the customer gateway.
		/// Required
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string CustomerGatewayArn { get; set; }
		
		/// <summary>
		/// The ID of the device.
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// The ID of the link.
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string LinkId { get; set; }
	}
	
	public class AssociateLinkPostBody
	{
		
		/// <summary>
		/// The ID of the device.
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// The ID of the link.
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string LinkId { get; set; }
	}
	
	public class AssociateTransitGatewayConnectPeerPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the Connect peer.
		/// Required
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string TransitGatewayConnectPeerArn { get; set; }
		
		/// <summary>
		/// The ID of the device.
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// The ID of the link.
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string LinkId { get; set; }
	}
	
	public class CreateConnectAttachmentPostBody
	{
		
		/// <summary>
		/// The ID of a core network where you want to create the attachment. 
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: ^core-network-([0-9a-f]{8,17})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^core-network-([0-9a-f]{8,17})$")]
		public string CoreNetworkId { get; set; }
		
		/// <summary>
		/// The Region where the edge is located.
		/// Required
		/// Max length: 63
		/// Min length: 1
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string EdgeLocation { get; set; }
		
		/// <summary>
		/// The ID of the attachment between the two connections.
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: ^attachment-([0-9a-f]{8,17})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^attachment-([0-9a-f]{8,17})$")]
		public string TransportAttachmentId { get; set; }
		
		/// <summary>
		/// Describes a core network Connect attachment options.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateConnectAttachmentPostBodyOptions Options { get; set; }
		
		/// <summary>
		/// The list of key-value tags associated with the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The client token associated with the request.
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string ClientToken { get; set; }
	}
	
	public class CreateConnectAttachmentPostBodyOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TunnelProtocol Protocol { get; set; }
	}
	
	public class CreateConnectPeerPostBody
	{
		
		/// <summary>
		/// The ID of the connection attachment.
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: ^attachment-([0-9a-f]{8,17})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^attachment-([0-9a-f]{8,17})$")]
		public string ConnectAttachmentId { get; set; }
		
		/// <summary>
		/// A Connect peer core network address.
		/// Max length: 50
		/// Min length: 1
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string CoreNetworkAddress { get; set; }
		
		/// <summary>
		/// The Connect peer address.
		/// Required
		/// Max length: 50
		/// Min length: 1
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string PeerAddress { get; set; }
		
		/// <summary>
		/// Describes the BGP options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateConnectPeerPostBodyBgpOptions BgpOptions { get; set; }
		
		/// <summary>
		/// The inside IP addresses used for BGP peering.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] InsideCidrBlocks { get; set; }
		
		/// <summary>
		/// The tags associated with the peer request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The client token associated with the request.
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string ClientToken { get; set; }
	}
	
	public class CreateConnectPeerPostBodyBgpOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PeerAsn { get; set; }
	}
	
	public class CreateConnectionPostBody
	{
		
		/// <summary>
		/// The ID of the first device in the connection.
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string DeviceId { get; set; }
		
		/// <summary>
		/// The ID of the second device in the connection.
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string ConnectedDeviceId { get; set; }
		
		/// <summary>
		/// The ID of the link for the first device.
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string LinkId { get; set; }
		
		/// <summary>
		/// The ID of the link for the second device.
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string ConnectedLinkId { get; set; }
		
		/// <summary>
		/// <p>A description of the connection.</p> <p>Length Constraints: Maximum length of 256 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The tags to apply to the resource during creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateCoreNetworkPostBody
	{
		
		/// <summary>
		/// The ID of the global network that a core network will be a part of. 
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string GlobalNetworkId { get; set; }
		
		/// <summary>
		/// The description of a core network.
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// Key-value tags associated with a core network request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The policy document for creating a core network.
		/// Max length: 10000000
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string PolicyDocument { get; set; }
		
		/// <summary>
		/// The client token associated with a core network request.
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string ClientToken { get; set; }
	}
	
	public class CreateDevicePostBody
	{
		
		/// <summary>
		/// Specifies a location in Amazon Web Services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateDevicePostBodyAWSLocation AWSLocation { get; set; }
		
		/// <summary>
		/// <p>A description of the device.</p> <p>Constraints: Maximum length of 256 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The type of the device.
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Type { get; set; }
		
		/// <summary>
		/// <p>The vendor of the device.</p> <p>Constraints: Maximum length of 128 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Vendor { get; set; }
		
		/// <summary>
		/// <p>The model of the device.</p> <p>Constraints: Maximum length of 128 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Model { get; set; }
		
		/// <summary>
		/// <p>The serial number of the device.</p> <p>Constraints: Maximum length of 128 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Describes a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateDevicePostBodyLocation Location { get; set; }
		
		/// <summary>
		/// The ID of the site.
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string SiteId { get; set; }
		
		/// <summary>
		/// The tags to apply to the resource during creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateDevicePostBodyAWSLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Zone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetArn { get; set; }
	}
	
	public class CreateDevicePostBodyLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Longitude { get; set; }
	}
	
	public class CreateGlobalNetworkPostBody
	{
		
		/// <summary>
		/// <p>A description of the global network.</p> <p>Constraints: Maximum length of 256 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The tags to apply to the resource during creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateLinkPostBody
	{
		
		/// <summary>
		/// <p>A description of the link.</p> <p>Constraints: Maximum length of 256 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>The type of the link.</p> <p>Constraints: Maximum length of 128 characters. Cannot include the following characters: | \ ^</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Type { get; set; }
		
		/// <summary>
		/// Describes bandwidth information.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CreateLinkPostBodyBandwidth Bandwidth { get; set; }
		
		/// <summary>
		/// <p>The provider of the link.</p> <p>Constraints: Maximum length of 128 characters. Cannot include the following characters: | \ ^</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Provider { get; set; }
		
		/// <summary>
		/// The ID of the site.
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string SiteId { get; set; }
		
		/// <summary>
		/// The tags to apply to the resource during creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateLinkPostBodyBandwidth
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UploadSpeed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DownloadSpeed { get; set; }
	}
	
	public class CreateSitePostBody
	{
		
		/// <summary>
		/// <p>A description of your site.</p> <p>Constraints: Maximum length of 256 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateSitePostBodyLocation Location { get; set; }
		
		/// <summary>
		/// The tags to apply to the resource during creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	public class CreateSitePostBodyLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Longitude { get; set; }
	}
	
	public class CreateSiteToSiteVpnAttachmentPostBody
	{
		
		/// <summary>
		/// The ID of a core network where you're creating a site-to-site VPN attachment.
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: ^core-network-([0-9a-f]{8,17})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^core-network-([0-9a-f]{8,17})$")]
		public string CoreNetworkId { get; set; }
		
		/// <summary>
		/// The ARN identifying the VPN attachment.
		/// Required
		/// Max length: 500
		/// Min length: 0
		/// Pattern: ^arn:[^:]{1,63}:ec2:[^:]{0,63}:[^:]{0,63}:vpn-connection\/vpn-[0-9a-f]{8,17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:[^:]{1,63}:ec2:[^:]{0,63}:[^:]{0,63}:vpn-connection\/vpn-[0-9a-f]{8,17}$")]
		public string VpnConnectionArn { get; set; }
		
		/// <summary>
		/// The tags associated with the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The client token associated with the request.
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string ClientToken { get; set; }
	}
	
	public class CreateTransitGatewayPeeringPostBody
	{
		
		/// <summary>
		/// The ID of a core network.
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: ^core-network-([0-9a-f]{8,17})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^core-network-([0-9a-f]{8,17})$")]
		public string CoreNetworkId { get; set; }
		
		/// <summary>
		/// The ARN of the transit gateway for the peering request.
		/// Required
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string TransitGatewayArn { get; set; }
		
		/// <summary>
		/// The list of key-value tags associated with the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The client token associated with the request.
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string ClientToken { get; set; }
	}
	
	public class CreateTransitGatewayRouteTableAttachmentPostBody
	{
		
		/// <summary>
		/// The ID of the peer for the 
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: ^peering-([0-9a-f]{8,17})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^peering-([0-9a-f]{8,17})$")]
		public string PeeringId { get; set; }
		
		/// <summary>
		/// The ARN of the transit gateway route table for the attachment request. For example, <code>"TransitGatewayRouteTableArn": "arn:aws:ec2:us-west-2:123456789012:transit-gateway-route-table/tgw-rtb-9876543210123456"</code>.
		/// Required
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string TransitGatewayRouteTableArn { get; set; }
		
		/// <summary>
		/// The list of key-value tags associated with the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The client token associated with the request.
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string ClientToken { get; set; }
	}
	
	public class CreateVpcAttachmentPostBody
	{
		
		/// <summary>
		/// The ID of a core network for the VPC attachment.
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// Pattern: ^core-network-([0-9a-f]{8,17})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^core-network-([0-9a-f]{8,17})$")]
		public string CoreNetworkId { get; set; }
		
		/// <summary>
		/// The ARN of the VPC.
		/// Required
		/// Max length: 500
		/// Min length: 0
		/// Pattern: ^arn:[^:]{1,63}:ec2:[^:]{0,63}:[^:]{0,63}:vpc\/vpc-[0-9a-f]{8,17}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^arn:[^:]{1,63}:ec2:[^:]{0,63}:[^:]{0,63}:vpc\/vpc-[0-9a-f]{8,17}$")]
		public string VpcArn { get; set; }
		
		/// <summary>
		/// The subnet ARN of the VPC attachment.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetArns { get; set; }
		
		/// <summary>
		/// Describes the VPC options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public CreateVpcAttachmentPostBodyOptions Options { get; set; }
		
		/// <summary>
		/// The key-value tags associated with the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// The client token associated with the request.
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string ClientToken { get; set; }
	}
	
	public class CreateVpcAttachmentPostBodyOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Ipv6Support { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplianceModeSupport { get; set; }
	}
	
	public class UpdateConnectionPatchBody
	{
		
		/// <summary>
		/// The ID of the link for the first device in the connection.
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string LinkId { get; set; }
		
		/// <summary>
		/// The ID of the link for the second device in the connection.
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string ConnectedLinkId { get; set; }
		
		/// <summary>
		/// <p>A description of the connection.</p> <p>Length Constraints: Maximum length of 256 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Description { get; set; }
	}
	
	public class UpdateCoreNetworkPatchBody
	{
		
		/// <summary>
		/// The description of the update.
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Description { get; set; }
	}
	
	public class UpdateDevicePatchBody
	{
		
		/// <summary>
		/// Specifies a location in Amazon Web Services.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateDevicePatchBodyAWSLocation AWSLocation { get; set; }
		
		/// <summary>
		/// <p>A description of the device.</p> <p>Constraints: Maximum length of 256 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The type of the device.
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Type { get; set; }
		
		/// <summary>
		/// <p>The vendor of the device.</p> <p>Constraints: Maximum length of 128 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Vendor { get; set; }
		
		/// <summary>
		/// <p>The model of the device.</p> <p>Constraints: Maximum length of 128 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Model { get; set; }
		
		/// <summary>
		/// <p>The serial number of the device.</p> <p>Constraints: Maximum length of 128 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Describes a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateDevicePatchBodyLocation Location { get; set; }
		
		/// <summary>
		/// The ID of the site.
		/// Max length: 50
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string SiteId { get; set; }
	}
	
	public class UpdateDevicePatchBodyAWSLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Zone { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SubnetArn { get; set; }
	}
	
	public class UpdateDevicePatchBodyLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Longitude { get; set; }
	}
	
	public class UpdateGlobalNetworkPatchBody
	{
		
		/// <summary>
		/// <p>A description of the global network.</p> <p>Constraints: Maximum length of 256 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Description { get; set; }
	}
	
	public class UpdateLinkPatchBody
	{
		
		/// <summary>
		/// <p>A description of the link.</p> <p>Constraints: Maximum length of 256 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// <p>The type of the link.</p> <p>Constraints: Maximum length of 128 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Type { get; set; }
		
		/// <summary>
		/// Describes bandwidth information.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateLinkPatchBodyBandwidth Bandwidth { get; set; }
		
		/// <summary>
		/// <p>The provider of the link.</p> <p>Constraints: Maximum length of 128 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Provider { get; set; }
	}
	
	public class UpdateLinkPatchBodyBandwidth
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UploadSpeed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DownloadSpeed { get; set; }
	}
	
	public class PutResourcePolicyPostBody
	{
		
		/// <summary>
		/// The JSON resource policy document.
		/// Required
		/// Max length: 10000000
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string PolicyDocument { get; set; }
	}
	
	public class UpdateSitePatchBody
	{
		
		/// <summary>
		/// <p>A description of your site.</p> <p>Constraints: Maximum length of 256 characters.</p>
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// Describes a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateSitePatchBodyLocation Location { get; set; }
	}
	
	public class UpdateSitePatchBodyLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Longitude { get; set; }
	}
	
	public class PutCoreNetworkPolicyPostBody
	{
		
		/// <summary>
		/// The policy document.
		/// Required
		/// Max length: 10000000
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10000000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string PolicyDocument { get; set; }
		
		/// <summary>
		/// a core network policy description.
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string Description { get; set; }
		
		/// <summary>
		/// The ID of a core network policy. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> LatestVersionId { get; set; }
		
		/// <summary>
		/// The client token associated with the request.
		/// Max length: 256
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string ClientToken { get; set; }
	}
	
	public class GetNetworkRoutesPostBody
	{
		
		/// <summary>
		/// Describes a route table.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GetNetworkRoutesPostBodyRouteTableIdentifier RouteTableIdentifier { get; set; }
		
		/// <summary>
		/// An exact CIDR block.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] ExactCidrMatches { get; set; }
		
		/// <summary>
		/// The most specific route that matches the traffic (longest prefix match).
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] LongestPrefixMatches { get; set; }
		
		/// <summary>
		/// The routes with a subnet that match the specified CIDR filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] SubnetOfMatches { get; set; }
		
		/// <summary>
		/// The routes with a CIDR that encompasses the CIDR filter. Example: If you specify 10.0.1.0/30, then the result returns 10.0.1.0/29.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] SupernetOfMatches { get; set; }
		
		/// <summary>
		/// The IDs of the prefix lists.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] PrefixListIds { get; set; }
		
		/// <summary>
		/// The route states.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RouteState[] States { get; set; }
		
		/// <summary>
		/// The route types.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public RouteType[] Types { get; set; }
		
		/// <summary>
		/// Filter by route table destination. Possible Values: TRANSIT_GATEWAY_ATTACHMENT_ID, RESOURCE_ID, or RESOURCE_TYPE.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string[]> DestinationFilters { get; set; }
	}
	
	public class GetNetworkRoutesPostBodyRouteTableIdentifier
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayRouteTableArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CoreNetworkSegmentEdgeIdentifier CoreNetworkSegmentEdge { get; set; }
	}
	
	public class RegisterTransitGatewayPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the transit gateway.
		/// Required
		/// Max length: 500
		/// Min length: 0
		/// Pattern: [\s\S]*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[\s\S]*")]
		public string TransitGatewayArn { get; set; }
	}
	
	public class UpdateVpcAttachmentPatchBody
	{
		
		/// <summary>
		/// Adds a subnet ARN to the VPC attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] AddSubnetArns { get; set; }
		
		/// <summary>
		/// Removes a subnet ARN from the attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] RemoveSubnetArns { get; set; }
		
		/// <summary>
		/// Describes the VPC options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public UpdateVpcAttachmentPatchBodyOptions Options { get; set; }
	}
	
	public class UpdateVpcAttachmentPatchBodyOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Ipv6Support { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ApplianceModeSupport { get; set; }
	}
	
	public class StartOrganizationServiceAccessUpdatePostBody
	{
		
		/// <summary>
		/// The action to take for the update request. This can be either <code>ENABLE</code> or <code>DISABLE</code>.
		/// Required
		/// Max length: 50
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Action { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// The tags to apply to the specified resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	public class StartRouteAnalysisPostBody
	{
		
		/// <summary>
		/// Describes a source or a destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartRouteAnalysisPostBodySource Source { get; set; }
		
		/// <summary>
		/// Describes a source or a destination.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StartRouteAnalysisPostBodyDestination Destination { get; set; }
		
		/// <summary>
		/// Indicates whether to analyze the return path. The default is <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IncludeReturnPath { get; set; }
		
		/// <summary>
		/// Indicates whether to include the location of middlebox appliances in the route analysis. The default is <code>false</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UseMiddleboxes { get; set; }
	}
	
	public class StartRouteAnalysisPostBodySource
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
	}
	
	public class StartRouteAnalysisPostBodyDestination
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string TransitGatewayAttachmentArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IpAddress { get; set; }
	}
	
	public class UpdateNetworkResourceMetadataPatchBody
	{
		
		/// <summary>
		/// The resource metadata.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.Collections.Generic.Dictionary<string, string> Metadata { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
