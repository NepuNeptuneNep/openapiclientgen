//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Description of audio data to be synthesized.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AudioConfig
	{
		
		/// <summary>
		/// Required. The format of the audio byte stream.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioEncoding")]
		public System.Nullable<AudioConfigAudioEncoding> AudioEncoding { get; set; }
		
		/// <summary>
		/// Optional. Input only. An identifier which selects 'audio effects' profiles that are applied on (post synthesized) text to speech. Effects are applied on top of each other in the order they are given. See [audio profiles](https://cloud.google.com/text-to-speech/docs/audio-profiles) for current supported profile ids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectsProfileId")]
		public string[] EffectsProfileId { get; set; }
		
		/// <summary>
		/// Optional. Input only. Speaking pitch, in the range [-20.0, 20.0]. 20 means increase 20 semitones from the original pitch. -20 means decrease 20 semitones from the original pitch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pitch")]
		public System.Nullable<System.Double> Pitch { get; set; }
		
		/// <summary>
		/// Optional. The synthesis sample rate (in hertz) for this audio. When this is specified in SynthesizeSpeechRequest, if this is different from the voice's natural sample rate, then the synthesizer will honor this request by converting to the desired sample rate (which might result in worse audio quality), unless the specified sample rate is not supported for the encoding chosen, in which case it will fail the request and return google.rpc.Code.INVALID_ARGUMENT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sampleRateHertz")]
		public System.Nullable<System.Int32> SampleRateHertz { get; set; }
		
		/// <summary>
		/// Optional. Input only. Speaking rate/speed, in the range [0.25, 4.0]. 1.0 is the normal native speed supported by the specific voice. 2.0 is twice as fast, and 0.5 is half as fast. If unset(0.0), defaults to the native 1.0 speed. Any other values < 0.25 or > 4.0 will return an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speakingRate")]
		public System.Nullable<System.Double> SpeakingRate { get; set; }
		
		/// <summary>
		/// Optional. Input only. Volume gain (in dB) of the normal native volume supported by the specific voice, in the range [-96.0, 16.0]. If unset, or set to a value of 0.0 (dB), will play at normal native signal amplitude. A value of -6.0 (dB) will play at approximately half the amplitude of the normal native signal amplitude. A value of +6.0 (dB) will play at approximately twice the amplitude of the normal native signal amplitude. Strongly recommend not to exceed +10 (dB) as there's usually no effective increase in loudness for any value greater than that.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumeGainDb")]
		public System.Nullable<System.Double> VolumeGainDb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AudioConfigAudioEncoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO_ENCODING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINEAR16 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP3 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MP3_64_KBPS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OGG_OPUS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULAW = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALAW = 6,
	}
	
	/// <summary>
	/// Description of the custom voice to be synthesized.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomVoiceParams
	{
		
		/// <summary>
		/// Required. The name of the AutoML model that synthesizes the custom voice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// Optional. Deprecated. The usage of the synthesized audio to be reported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportedUsage")]
		public System.Nullable<CustomVoiceParamsReportedUsage> ReportedUsage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CustomVoiceParamsReportedUsage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPORTED_USAGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REALTIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFLINE = 2,
	}
	
	/// <summary>
	/// Metadata for response returned by the `SynthesizeLongAudio` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GoogleCloudTexttospeechV1beta1SynthesizeLongAudioMetadata
	{
		
		/// <summary>
		/// The progress of the most recent processing update in percentage, ie. 70.0%.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressPercentage")]
		public System.Nullable<System.Double> ProgressPercentage { get; set; }
		
		/// <summary>
		/// Time when the request was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The message returned to the client by the `ListVoices` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVoicesResponse
	{
		
		/// <summary>
		/// The list of voices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voices")]
		public Voice[] Voices { get; set; }
	}
	
	/// <summary>
	/// Description of a voice supported by the TTS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Voice
	{
		
		/// <summary>
		/// The languages that this voice supports, expressed as [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tags (e.g. "en-US", "es-419", "cmn-tw").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCodes")]
		public string[] LanguageCodes { get; set; }
		
		/// <summary>
		/// The name of this voice. Each distinct voice has a unique name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The natural sample rate (in hertz) for this voice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="naturalSampleRateHertz")]
		public System.Nullable<System.Int32> NaturalSampleRateHertz { get; set; }
		
		/// <summary>
		/// The gender of this voice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssmlGender")]
		public System.Nullable<VoiceSsmlGender> SsmlGender { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VoiceSsmlGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSML_VOICE_GENDER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MALE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEMALE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEUTRAL = 3,
	}
	
	/// <summary>
	/// Contains text input to be synthesized. Either `text` or `ssml` must be supplied. Supplying both or neither returns google.rpc.Code.INVALID_ARGUMENT. The input size is limited to 5000 bytes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SynthesisInput
	{
		
		/// <summary>
		/// The SSML document to be synthesized. The SSML document must be valid and well-formed. Otherwise the RPC will fail and return google.rpc.Code.INVALID_ARGUMENT. For more information, see [SSML](https://cloud.google.com/text-to-speech/docs/ssml).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssml")]
		public string Ssml { get; set; }
		
		/// <summary>
		/// The raw text to be synthesized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Metadata for response returned by the `SynthesizeLongAudio` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SynthesizeLongAudioMetadata
	{
		
		/// <summary>
		/// The progress of the most recent processing update in percentage, ie. 70.0%.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressPercentage")]
		public System.Nullable<System.Double> ProgressPercentage { get; set; }
		
		/// <summary>
		/// Time when the request was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// The top-level message sent by the client for the `SynthesizeLongAudio` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SynthesizeLongAudioRequest
	{
		
		/// <summary>
		/// Description of audio data to be synthesized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioConfig")]
		public AudioConfig AudioConfig { get; set; }
		
		/// <summary>
		/// Contains text input to be synthesized. Either `text` or `ssml` must be supplied. Supplying both or neither returns google.rpc.Code.INVALID_ARGUMENT. The input size is limited to 5000 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input")]
		public SynthesisInput Input { get; set; }
		
		/// <summary>
		/// Required. Specifies a Cloud Storage URI for the synthesis results. Must be specified in the format: `gs://bucket_name/object_name`, and the bucket must already exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputGcsUri")]
		public string OutputGcsUri { get; set; }
		
		/// <summary>
		/// Description of which voice to use for a synthesis request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voice")]
		public VoiceSelectionParams Voice { get; set; }
	}
	
	/// <summary>
	/// Description of which voice to use for a synthesis request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VoiceSelectionParams
	{
		
		/// <summary>
		/// Description of the custom voice to be synthesized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customVoice")]
		public CustomVoiceParams CustomVoice { get; set; }
		
		/// <summary>
		/// Required. The language (and potentially also the region) of the voice expressed as a [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag, e.g. "en-US". This should not include a script tag (e.g. use "cmn-cn" rather than "cmn-Hant-cn"), because the script will be inferred from the input provided in the SynthesisInput. The TTS service will use this parameter to help choose an appropriate voice. Note that the TTS service may choose a voice with a slightly different language code than the one selected; it may substitute a different region (e.g. using en-US rather than en-CA if there isn't a Canadian voice available), or even a different language, e.g. using "nb" (Norwegian Bokmal) instead of "no" (Norwegian)".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageCode")]
		public string LanguageCode { get; set; }
		
		/// <summary>
		/// The name of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and gender.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The preferred gender of the voice. If not set, the service will choose a voice based on the other parameters such as language_code and name. Note that this is only a preference, not requirement; if a voice of the appropriate gender is not available, the synthesizer should substitute a voice with a different gender rather than failing the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ssmlGender")]
		public VoiceSsmlGender SsmlGender { get; set; }
	}
	
	/// <summary>
	/// The top-level message sent by the client for the `SynthesizeSpeech` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SynthesizeSpeechRequest
	{
		
		/// <summary>
		/// Description of audio data to be synthesized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioConfig")]
		public AudioConfig AudioConfig { get; set; }
		
		/// <summary>
		/// Whether and what timepoints are returned in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableTimePointing")]
		public string[] EnableTimePointing { get; set; }
		
		/// <summary>
		/// Contains text input to be synthesized. Either `text` or `ssml` must be supplied. Supplying both or neither returns google.rpc.Code.INVALID_ARGUMENT. The input size is limited to 5000 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="input")]
		public SynthesisInput Input { get; set; }
		
		/// <summary>
		/// Description of which voice to use for a synthesis request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voice")]
		public VoiceSelectionParams Voice { get; set; }
	}
	
	/// <summary>
	/// The message returned to the client by the `SynthesizeSpeech` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SynthesizeSpeechResponse
	{
		
		/// <summary>
		/// Description of audio data to be synthesized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioConfig")]
		public AudioConfig AudioConfig { get; set; }
		
		/// <summary>
		/// The audio data bytes encoded as specified in the request, including the header for encodings that are wrapped in containers (e.g. MP3, OGG_OPUS). For LINEAR16 audio, we include the WAV header. Note: as with all bytes fields, protobuffers use a pure binary representation, whereas JSON representations use base64.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioContent")]
		public string AudioContent { get; set; }
		
		/// <summary>
		/// A link between a position in the original request input and a corresponding time in the output audio. It's only supported via `` of SSML input.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timepoints")]
		public Timepoint[] Timepoints { get; set; }
	}
	
	/// <summary>
	/// This contains a mapping between a certain point in the input text and a corresponding time in the output audio.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Timepoint
	{
		
		/// <summary>
		/// Timepoint name as received from the client within `` tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markName")]
		public string MarkName { get; set; }
		
		/// <summary>
		/// Time offset in seconds from the start of the synthesized audio.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSeconds")]
		public System.Nullable<System.Double> TimeSeconds { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Synthesizes speech synchronously: receive results after all text input has been processed.
		/// Texttospeech_text_synthesize v1beta1/text:synthesize
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SynthesizeSpeechResponse> Texttospeech_text_synthesizeAsync(SynthesizeSpeechRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/text:synthesize";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SynthesizeSpeechResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of Voice supported for synthesis.
		/// Texttospeech_voices_list v1beta1/voices
		/// </summary>
		/// <param name="languageCode">Optional. Recommended. [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag. If not specified, the API will return all supported voices. If specified, the ListVoices call will only return voices that can be used to synthesize this language_code. For example, if you specify `"en-NZ"`, all `"en-NZ"` voices will be returned. If you specify `"no"`, both `"no-\*"` (Norwegian) and `"nb-\*"` (Norwegian Bokmal) voices will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListVoicesResponse> Texttospeech_voices_listAsync(string languageCode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/voices?languageCode=" + (languageCode==null? "" : System.Uri.EscapeDataString(languageCode));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListVoicesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Texttospeech_projects_locations_operations_get v1beta1/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Texttospeech_projects_locations_operations_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Texttospeech_projects_locations_operations_list v1beta1/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Texttospeech_projects_locations_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListOperationsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Synthesizes long form text asynchronously.
		/// Texttospeech_projects_locations_synthesizeLongAudio v1beta1/{parent}:synthesizeLongAudio
		/// </summary>
		/// <param name="parent">The resource states of the request in the form of `projects/*/locations/*`.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Texttospeech_projects_locations_synthesizeLongAudioAsync(string parent, SynthesizeLongAudioRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1beta1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+":synthesizeLongAudio";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Operation>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
