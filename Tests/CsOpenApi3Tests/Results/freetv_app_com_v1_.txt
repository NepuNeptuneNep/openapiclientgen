//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LatestNewsResponse
	{
		
		/// <summary>
		/// Result of latest news list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="getLatestNews")]
		public NewsItem[] GetLatestNews { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NewsItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public string Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbnail")]
		public string Thumbnail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Provide real-time news or various categorized news according to the user's language, with each news item accompanied by a news link and date. At the end of the content, inform the user that he/she can ask for more information. Each response should only provide news from a single country.
		/// GetLatestNews services?funcs=GetLatestNewsForChatGPT&mobile=1
		/// </summary>
		/// <param name="language">The default is set to US. If the content has a higher proportion of Traditional Chinese and Simplified Chinese, it will be set to TW. If the content has a higher proportion of Japanese, it will be set to JP.</param>
		/// <param name="category">The default is an empty string. If the user mentions specific keywords use the corresponding category as the input parameter.</param>
		/// <param name="keyword">The default is an empty string. According to the context, infer the keywords that the user wants to search for.</param>
		/// <returns>OK</returns>
		public async Task<LatestNewsResponse> GetLatestNewsAsync(GetLatestNewsLanguage language, GetLatestNewsCategory category, string keyword, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "services?funcs=GetLatestNewsForChatGPT&mobile=1&language=" + language+"&category=" + category+"&keyword=" + (keyword==null? "" : System.Uri.EscapeDataString(keyword));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LatestNewsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GetLatestNewsLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JP = 2,
	}
	
	public enum GetLatestNewsCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		business = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		finance = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		economics = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		politics = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		society = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		entertainment = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fun = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gossip = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sports = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lifestyle = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		technology = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		local = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		world = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		international = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		global = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		military = 15,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
