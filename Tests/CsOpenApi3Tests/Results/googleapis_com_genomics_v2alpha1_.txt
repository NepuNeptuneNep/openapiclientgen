//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Carries information about an accelerator that can be attached to a VM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Accelerator
	{
		
		/// <summary>
		/// How many accelerators of this type to attach.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public string Count { get; set; }
		
		/// <summary>
		/// The accelerator type string (for example, "nvidia-tesla-k80"). Only NVIDIA GPU accelerators are currently supported. If an NVIDIA GPU is attached, the required runtime libraries will be made available to all containers under `/usr/local/nvidia`. The driver version to install must be specified using the NVIDIA driver version parameter on the virtual machine specification. Note that attaching a GPU increases the worker VM startup time by a few minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Specifies a single action that runs a Docker container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Action
	{
		
		/// <summary>
		/// If specified, overrides the `CMD` specified in the container. If the container also has an `ENTRYPOINT` the values are used as entrypoint arguments. Otherwise, they are used as a command and arguments to run inside the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commands")]
		public string[] Commands { get; set; }
		
		/// <summary>
		/// Holds encrypted information that is only decrypted and stored in RAM by the worker VM when running the pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public Secret Credentials { get; set; }
		
		/// <summary>
		/// Holds encrypted information that is only decrypted and stored in RAM by the worker VM when running the pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptedEnvironment")]
		public Secret EncryptedEnvironment { get; set; }
		
		/// <summary>
		/// If specified, overrides the `ENTRYPOINT` specified in the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entrypoint")]
		public string Entrypoint { get; set; }
		
		/// <summary>
		/// The environment to pass into the container. This environment is merged with values specified in the google.genomics.v2alpha1.Pipeline message, overwriting any duplicate values. In addition to the values passed here, a few other values are automatically injected into the environment. These cannot be hidden or overwritten. `GOOGLE_PIPELINE_FAILED` will be set to "1" if the pipeline failed because an action has exited with a non-zero status (and did not have the `IGNORE_EXIT_STATUS` flag set). This can be used to determine if additional debug or logging actions should execute. `GOOGLE_LAST_EXIT_STATUS` will be set to the exit status of the last non-background action that executed. This can be used by workflow engine authors to determine whether an individual action has succeeded or failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Collections.Generic.Dictionary<string, string> Environment { get; set; }
		
		/// <summary>
		/// The set of flags to apply to this action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flags")]
		public string[] Flags { get; set; }
		
		/// <summary>
		/// Required. The URI to pull the container image from. Note that all images referenced by actions in the pipeline are pulled before the first action runs. If multiple actions reference the same image, it is only pulled once, ensuring that the same image is used for all actions in a single pipeline. The image URI can be either a complete host and image specification (e.g., quay.io/biocontainers/samtools), a library and image name (e.g., google/cloud-sdk) or a bare image name ('bash') to pull from the default library. No schema is required in any of these cases. If the specified image is not public, the service account specified for the Virtual Machine must have access to pull the images from GCR, or appropriate credentials must be specified in the google.genomics.v2alpha1.Action.credentials field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUri")]
		public string ImageUri { get; set; }
		
		/// <summary>
		/// Labels to associate with the action. This field is provided to assist workflow engine authors in identifying actions (for example, to indicate what sort of action they perform, such as localization or debugging). They are returned in the operation metadata, but are otherwise ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// A list of mounts to make available to the action. In addition to the values specified here, every action has a special virtual disk mounted under `/google` that contains log files and other operational components. - /google/logs All logs written during the pipeline execution. - /google/logs/output The combined standard output and standard error of all actions run as part of the pipeline execution. - /google/logs/action/*/stdout The complete contents of each individual action's standard output. - /google/logs/action/*/stderr The complete contents of each individual action's standard error output. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mounts")]
		public Mount[] Mounts { get; set; }
		
		/// <summary>
		/// An optional name for the container. The container hostname will be set to this name, making it useful for inter-container communication. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An optional identifier for a PID namespace to run the action inside. Multiple actions should use the same string to share a namespace. If unspecified, a separate isolated namespace is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pidNamespace")]
		public string PidNamespace { get; set; }
		
		/// <summary>
		/// A map of containers to host port mappings for this container. If the container already specifies exposed ports, use the `PUBLISH_EXPOSED_PORTS` flag instead. The host port number must be less than 65536. If it is zero, an unused random port is assigned. To determine the resulting port number, consult the `ContainerStartedEvent` in the operation metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="portMappings")]
		public System.Collections.Generic.Dictionary<string, int> PortMappings { get; set; }
		
		/// <summary>
		/// The maximum amount of time to give the action to complete. If the action fails to complete before the timeout, it will be terminated and the exit status will be non-zero. The pipeline will continue or terminate based on the rules defined by the `ALWAYS_RUN` and `IGNORE_EXIT_STATUS` flags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
	}
	
	/// <summary>
	/// Holds encrypted information that is only decrypted and stored in RAM by the worker VM when running the pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Secret
	{
		
		/// <summary>
		/// The value of the cipherText response from the `encrypt` method. This field is intentionally unaudited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cipherText")]
		public string CipherText { get; set; }
		
		/// <summary>
		/// The name of the Cloud KMS key that will be used to decrypt the secret value. The VM service account must have the required permissions and authentication scopes to invoke the `decrypt` method on the specified key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyName")]
		public string KeyName { get; set; }
	}
	
	/// <summary>
	/// Carries information about a particular disk mount inside a container.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Mount
	{
		
		/// <summary>
		/// The name of the disk to mount, as specified in the resources section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disk")]
		public string Disk { get; set; }
		
		/// <summary>
		/// The path to mount the disk inside the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// If true, the disk is mounted read-only inside the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readOnly")]
		public System.Nullable<System.Boolean> ReadOnly { get; set; }
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// The parameters to the CheckIn method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckInRequest
	{
		
		/// <summary>
		/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadlineExpired")]
		public Empty DeadlineExpired { get; set; }
		
		/// <summary>
		/// A workflow specific event occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event")]
		public System.Collections.Generic.Dictionary<string, object> Event { get; set; }
		
		/// <summary>
		/// A list of timestamped events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public TimestampedEvent[] Events { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public Status Result { get; set; }
		
		/// <summary>
		/// An SOS report for an unexpected VM failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sosReport")]
		public string SosReport { get; set; }
		
		/// <summary>
		/// The status of the worker VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerStatus")]
		public WorkerStatus WorkerStatus { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// An event that occured in the operation assigned to the worker and the time of occurance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimestampedEvent
	{
		
		/// <summary>
		/// The event data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public System.Collections.Generic.Dictionary<string, object> Data { get; set; }
		
		/// <summary>
		/// The time when the event happened.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// The status of the worker VM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerStatus
	{
		
		/// <summary>
		/// Status of attached disks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachedDisks")]
		public System.Collections.Generic.Dictionary<string, DiskStatus> AttachedDisks { get; set; }
		
		/// <summary>
		/// The status of a disk on a VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootDisk")]
		public DiskStatus BootDisk { get; set; }
		
		/// <summary>
		/// Free RAM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeRamBytes")]
		public string FreeRamBytes { get; set; }
		
		/// <summary>
		/// Total RAM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRamBytes")]
		public string TotalRamBytes { get; set; }
		
		/// <summary>
		/// System uptime.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uptimeSeconds")]
		public string UptimeSeconds { get; set; }
	}
	
	/// <summary>
	/// The status of a disk on a VM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DiskStatus
	{
		
		/// <summary>
		/// Free disk space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="freeSpaceBytes")]
		public string FreeSpaceBytes { get; set; }
		
		/// <summary>
		/// Total disk space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalSpaceBytes")]
		public string TotalSpaceBytes { get; set; }
	}
	
	/// <summary>
	/// The response to the CheckIn method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckInResponse
	{
		
		/// <summary>
		/// The deadline by which the worker must request an extension. The backend will allow for network transmission time and other delays, but the worker must attempt to transmit the extension request no later than the deadline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deadline")]
		public string Deadline { get; set; }
		
		/// <summary>
		/// Feature configuration for the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="features")]
		public System.Collections.Generic.Dictionary<string, object> Features { get; set; }
		
		/// <summary>
		/// The metadata that describes the operation assigned to the worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
	}
	
	/// <summary>
	/// An event generated when a container is forcibly terminated by the worker. Currently, this only occurs when the container outlives the timeout specified by the user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContainerKilledEvent
	{
		
		/// <summary>
		/// The numeric ID of the action that started the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionId")]
		public System.Nullable<System.Int32> ActionId { get; set; }
	}
	
	/// <summary>
	/// An event generated when a container starts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContainerStartedEvent
	{
		
		/// <summary>
		/// The numeric ID of the action that started this container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionId")]
		public System.Nullable<System.Int32> ActionId { get; set; }
		
		/// <summary>
		/// The public IP address that can be used to connect to the container. This field is only populated when at least one port mapping is present. If the instance was created with a private address, this field will be empty even if port mappings exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// The container-to-host port mappings installed for this container. This set will contain any ports exposed using the `PUBLISH_EXPOSED_PORTS` flag as well as any specified in the `Action` definition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="portMappings")]
		public System.Collections.Generic.Dictionary<string, int> PortMappings { get; set; }
	}
	
	/// <summary>
	/// An event generated when a container exits.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContainerStoppedEvent
	{
		
		/// <summary>
		/// The numeric ID of the action that started this container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionId")]
		public System.Nullable<System.Int32> ActionId { get; set; }
		
		/// <summary>
		/// The exit status of the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitStatus")]
		public System.Nullable<System.Int32> ExitStatus { get; set; }
		
		/// <summary>
		/// The tail end of any content written to standard error by the container. If the content emits large amounts of debugging noise or contains sensitive information, you can prevent the content from being printed by setting the `DISABLE_STANDARD_ERROR_CAPTURE` flag. Note that only a small amount of the end of the stream is captured here. The entire stream is stored in the `/google/logs` directory mounted into each action, and can be copied off the machine as described elsewhere.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stderr")]
		public string Stderr { get; set; }
	}
	
	/// <summary>
	/// An event generated whenever a resource limitation or transient error delays execution of a pipeline that was otherwise ready to run.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DelayedEvent
	{
		
		/// <summary>
		/// A textual description of the cause of the delay. The string can change without notice because it is often generated by another service (such as Compute Engine).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public string Cause { get; set; }
		
		/// <summary>
		/// If the delay was caused by a resource shortage, this field lists the Compute Engine metrics that are preventing this operation from running (for example, `CPUS` or `INSTANCES`). If the particular metric is not known, a single `UNKNOWN` metric will be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public string[] Metrics { get; set; }
	}
	
	/// <summary>
	/// Carries information about a disk that can be attached to a VM. See https://cloud.google.com/compute/docs/disks/performance for more information about disk type, size, and performance considerations. Specify either `Volume` or `Disk`, but not both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Disk
	{
		
		/// <summary>
		/// A user-supplied name for the disk. Used when mounting the disk into actions. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The size, in GB, of the disk to attach. If the size is not specified, a default is chosen to ensure reasonable I/O performance. If the disk type is specified as `local-ssd`, multiple local drives are automatically combined to provide the requested size. Note, however, that each physical SSD is 375GB in size, and no more than 8 drives can be attached to a single instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeGb")]
		public System.Nullable<System.Int32> SizeGb { get; set; }
		
		/// <summary>
		/// An optional image to put on the disk before attaching it to the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceImage")]
		public string SourceImage { get; set; }
		
		/// <summary>
		/// The Compute Engine disk type. If unspecified, `pd-standard` is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Carries information about events that occur during pipeline execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event
	{
		
		/// <summary>
		/// A human-readable description of the event. Note that these strings can change at any time without notice. Any application logic must use the information in the `details` field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Machine-readable details about the event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public System.Collections.Generic.Dictionary<string, object> Details { get; set; }
		
		/// <summary>
		/// The time at which the event occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
	}
	
	/// <summary>
	/// Configuration for an existing disk to be attached to the VM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExistingDisk
	{
		
		/// <summary>
		/// If `disk` contains slashes, the Cloud Life Sciences API assumes that it is a complete URL for the disk. If `disk` does not contain slashes, the Cloud Life Sciences API assumes that the disk is a zonal disk and a URL will be generated of the form `zones//disks/`, where `` is the zone in which the instance is allocated. The disk must be ext4 formatted. If all `Mount` references to this disk have the `read_only` flag set to true, the disk will be attached in `read-only` mode and can be shared with other instances. Otherwise, the disk will be available for writing but cannot be shared.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disk")]
		public string Disk { get; set; }
	}
	
	/// <summary>
	/// An event generated when the execution of a pipeline has failed. Note that other events can continue to occur after this event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FailedEvent
	{
		
		/// <summary>
		/// The human-readable description of the cause of the failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public string Cause { get; set; }
		
		/// <summary>
		/// The Google standard error code that best describes this failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<FailedEventCode> Code { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FailedEventCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ARGUMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEADLINE_EXCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_FOUND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALREADY_EXISTS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMISSION_DENIED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAUTHENTICATED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESOURCE_EXHAUSTED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED_PRECONDITION = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABORTED = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUT_OF_RANGE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIMPLEMENTED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNAVAILABLE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_LOSS = 16,
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// An OperationMetadata or Metadata object. This will always be returned with the Operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. For example: `operations/CJHU7Oi_ChDrveSpBRjfuL-qzoWAgEw`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// An Empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// Carries information about the pipeline execution that is returned in the long running operation's metadata field.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metadata
	{
		
		/// <summary>
		/// The time at which the operation was created by the API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The time at which execution was completed and resources were cleaned up.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The list of events that have happened so far during the execution of this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="events")]
		public Event[] Events { get; set; }
		
		/// <summary>
		/// The user-defined labels associated with this operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Specifies a series of actions to execute, expressed as Docker containers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipeline")]
		public Pipeline Pipeline { get; set; }
		
		/// <summary>
		/// The first time at which resources were allocated to execute the pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// Specifies a series of actions to execute, expressed as Docker containers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pipeline
	{
		
		/// <summary>
		/// The list of actions to execute, in the order they are specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public Action[] Actions { get; set; }
		
		/// <summary>
		/// Holds encrypted information that is only decrypted and stored in RAM by the worker VM when running the pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptedEnvironment")]
		public Secret EncryptedEnvironment { get; set; }
		
		/// <summary>
		/// The environment to pass into every action. Each action can also specify additional environment variables but cannot delete an entry from this map (though they can overwrite it with a different value).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Collections.Generic.Dictionary<string, string> Environment { get; set; }
		
		/// <summary>
		/// The system resources for the pipeline run. At least one zone or region must be specified or the pipeline run will fail.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public Resources Resources { get; set; }
		
		/// <summary>
		/// The maximum amount of time to give the pipeline to complete. This includes the time spent waiting for a worker to be allocated. If the pipeline fails to complete before the timeout, it will be cancelled and the error code will be set to DEADLINE_EXCEEDED. If unspecified, it will default to 7 days.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
	}
	
	/// <summary>
	/// The system resources for the pipeline run. At least one zone or region must be specified or the pipeline run will fail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Resources
	{
		
		/// <summary>
		/// The project ID to allocate resources in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// The list of regions allowed for VM allocation. If set, the `zones` field must not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regions")]
		public string[] Regions { get; set; }
		
		/// <summary>
		/// Carries information about a Compute Engine VM resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="virtualMachine")]
		public VirtualMachine VirtualMachine { get; set; }
		
		/// <summary>
		/// The list of zones allowed for VM allocation. If set, the `regions` field must not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zones")]
		public string[] Zones { get; set; }
	}
	
	/// <summary>
	/// Carries information about a Compute Engine VM resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VirtualMachine
	{
		
		/// <summary>
		/// The list of accelerators to attach to the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accelerators")]
		public Accelerator[] Accelerators { get; set; }
		
		/// <summary>
		/// The size of the boot disk, in GB. The boot disk must be large enough to accommodate all of the Docker images from each action in the pipeline at the same time. If not specified, a small but reasonable default value is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootDiskSizeGb")]
		public System.Nullable<System.Int32> BootDiskSizeGb { get; set; }
		
		/// <summary>
		/// The host operating system image to use. Currently, only Container-Optimized OS images can be used. The default value is `projects/cos-cloud/global/images/family/cos-stable`, which selects the latest stable release of Container-Optimized OS. This option is provided to allow testing against the beta release of the operating system to ensure that the new version does not interact negatively with production pipelines. To test a pipeline against the beta release of Container-Optimized OS, use the value `projects/cos-cloud/global/images/family/cos-beta`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bootImage")]
		public string BootImage { get; set; }
		
		/// <summary>
		/// The CPU platform to request. An instance based on a newer platform can be allocated, but never one with fewer capabilities. The value of this parameter must be a valid Compute Engine CPU platform name (such as "Intel Skylake"). This parameter is only useful for carefully optimized work loads where the CPU platform has a significant impact. For more information about the effect of this parameter, see https://cloud.google.com/compute/docs/instances/specify-min-cpu-platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpuPlatform")]
		public string CpuPlatform { get; set; }
		
		/// <summary>
		/// The list of disks to create and attach to the VM. Specify either the `volumes[]` field or the `disks[]` field, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disks")]
		public Disk[] Disks { get; set; }
		
		/// <summary>
		/// The Compute Engine Disk Images to use as a Docker cache. The disks will be mounted into the Docker folder in a way that the images present in the cache will not need to be pulled. The digests of the cached images must match those of the tags used or the latest version will still be pulled. The root directory of the ext4 image must contain `image` and `overlay2` directories copied from the Docker directory of a VM where the desired Docker images have already been pulled. Any images pulled that are not cached will be stored on the first cache disk instead of the boot disk. Only a single image is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dockerCacheImages")]
		public string[] DockerCacheImages { get; set; }
		
		/// <summary>
		/// Whether Stackdriver monitoring should be enabled on the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableStackdriverMonitoring")]
		public System.Nullable<System.Boolean> EnableStackdriverMonitoring { get; set; }
		
		/// <summary>
		/// Optional set of labels to apply to the VM and any attached disk resources. These labels must adhere to the [name and value restrictions](https://cloud.google.com/compute/docs/labeling-resources) on VM labels imposed by Compute Engine. Labels keys with the prefix 'google-' are reserved for use by Google. Labels applied at creation time to the VM. Applied on a best-effort basis to attached disk resources shortly after VM creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Required. The machine type of the virtual machine to create. Must be the short name of a standard machine type (such as "n1-standard-1") or a custom machine type (such as "custom-1-4096", where "1" indicates the number of vCPUs and "4096" indicates the memory in MB). See [Creating an instance with a custom machine type](https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type#create) for more specifications on creating a custom machine type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// VM networking options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public Network Network { get; set; }
		
		/// <summary>
		/// The NVIDIA driver version to use when attaching an NVIDIA GPU accelerator. The version specified here must be compatible with the GPU libraries contained in the container being executed, and must be one of the drivers hosted in the `nvidia-drivers-us-public` bucket on Google Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nvidiaDriverVersion")]
		public string NvidiaDriverVersion { get; set; }
		
		/// <summary>
		/// If true, allocate a preemptible VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preemptible")]
		public System.Nullable<System.Boolean> Preemptible { get; set; }
		
		/// <summary>
		/// If specified, the VM will only be allocated inside the matching reservation. It will fail if the VM parameters don't match the reservation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservation")]
		public string Reservation { get; set; }
		
		/// <summary>
		/// Carries information about a Google Cloud service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public ServiceAccount ServiceAccount { get; set; }
		
		/// <summary>
		/// The list of disks and other storage to create or attach to the VM. Specify either the `volumes[]` field or the `disks[]` field, but not both.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public Volume[] Volumes { get; set; }
	}
	
	/// <summary>
	/// VM networking options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Network
	{
		
		/// <summary>
		/// The network name to attach the VM's network interface to. The value will be prefixed with `global/networks/` unless it contains a `/`, in which case it is assumed to be a fully specified network resource URL. If unspecified, the global default network is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If the specified network is configured for custom subnet creation, the name of the subnetwork to attach the instance to must be specified here. The value is prefixed with `regions/*/subnetworks/` unless it contains a `/`, in which case it is assumed to be a fully specified subnetwork resource URL. If the `*` character appears in the value, it is replaced with the region that the virtual machine has been allocated in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetwork")]
		public string Subnetwork { get; set; }
		
		/// <summary>
		/// If set to true, do not attach a public IP address to the VM. Note that without a public IP address, additional configuration is required to allow the VM to access Google services. See https://cloud.google.com/vpc/docs/configure-private-google-access for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usePrivateAddress")]
		public System.Nullable<System.Boolean> UsePrivateAddress { get; set; }
	}
	
	/// <summary>
	/// Carries information about a Google Cloud service account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceAccount
	{
		
		/// <summary>
		/// Email address of the service account. If not specified, the default Compute Engine service account for the project will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// List of scopes to be enabled for this service account on the VM, in addition to the cloud-platform API scope that will be added by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scopes")]
		public string[] Scopes { get; set; }
	}
	
	/// <summary>
	/// Carries information about storage that can be attached to a VM. Specify either `Volume` or `Disk`, but not both.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Volume
	{
		
		/// <summary>
		/// Configuration for an existing disk to be attached to the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="existingDisk")]
		public ExistingDisk ExistingDisk { get; set; }
		
		/// <summary>
		/// Configuration for an `NFSMount` to be attached to the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nfsMount")]
		public NFSMount NfsMount { get; set; }
		
		/// <summary>
		/// Configuration for a persistent disk to be attached to the VM. See https://cloud.google.com/compute/docs/disks/performance for more information about disk type, size, and performance considerations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="persistentDisk")]
		public PersistentDisk PersistentDisk { get; set; }
		
		/// <summary>
		/// A user-supplied name for the volume. Used when mounting the volume into `Actions`. The name must contain only upper and lowercase alphanumeric characters and hyphens and cannot start with a hyphen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volume")]
		public string Volume1 { get; set; }
	}
	
	/// <summary>
	/// Configuration for an `NFSMount` to be attached to the VM.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NFSMount
	{
		
		/// <summary>
		/// A target NFS mount. The target must be specified as `address:/mount".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
	}
	
	/// <summary>
	/// Configuration for a persistent disk to be attached to the VM. See https://cloud.google.com/compute/docs/disks/performance for more information about disk type, size, and performance considerations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PersistentDisk
	{
		
		/// <summary>
		/// The size, in GB, of the disk to attach. If the size is not specified, a default is chosen to ensure reasonable I/O performance. If the disk type is specified as `local-ssd`, multiple local drives are automatically combined to provide the requested size. Note, however, that each physical SSD is 375GB in size, and no more than 8 drives can be attached to a single instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeGb")]
		public System.Nullable<System.Int32> SizeGb { get; set; }
		
		/// <summary>
		/// An image to put on the disk before attaching it to the VM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceImage")]
		public string SourceImage { get; set; }
		
		/// <summary>
		/// The Compute Engine disk type. If unspecified, `pd-standard` is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// An event generated when the worker starts pulling an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PullStartedEvent
	{
		
		/// <summary>
		/// The URI of the image that was pulled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUri")]
		public string ImageUri { get; set; }
	}
	
	/// <summary>
	/// An event generated when the worker stops pulling an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PullStoppedEvent
	{
		
		/// <summary>
		/// The URI of the image that was pulled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageUri")]
		public string ImageUri { get; set; }
	}
	
	/// <summary>
	/// The arguments to the `RunPipeline` method. The requesting user must have the `iam.serviceAccounts.actAs` permission for the Cloud Genomics service account or the request will fail.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunPipelineRequest
	{
		
		/// <summary>
		/// User-defined labels to associate with the returned operation. These labels are not propagated to any Google Cloud Platform resources used by the operation, and can be modified at any time. To associate labels with resources created while executing the operation, see the appropriate resource message (for example, `VirtualMachine`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// Specifies a series of actions to execute, expressed as Docker containers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pipeline")]
		public Pipeline Pipeline { get; set; }
		
		/// <summary>
		/// The name of an existing Pub/Sub topic. The server will publish messages to this topic whenever the status of the operation changes. The Genomics Service Agent account must have publisher permissions to the specified topic or notifications will not be sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubSubTopic")]
		public string PubSubTopic { get; set; }
	}
	
	/// <summary>
	/// The response to the RunPipeline method, returned in the operation's result field on success.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunPipelineResponse
	{
	}
	
	/// <summary>
	/// An event generated when the execution of a container results in a non-zero exit status that was not otherwise ignored. Execution will continue, but only actions that are flagged as `ALWAYS_RUN` will be executed. Other actions will be skipped.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnexpectedExitStatusEvent
	{
		
		/// <summary>
		/// The numeric ID of the action that started the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="actionId")]
		public System.Nullable<System.Int32> ActionId { get; set; }
		
		/// <summary>
		/// The exit status of the container.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitStatus")]
		public System.Nullable<System.Int32> ExitStatus { get; set; }
	}
	
	/// <summary>
	/// An event generated after a worker VM has been assigned to run the pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerAssignedEvent
	{
		
		/// <summary>
		/// The worker's instance name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// The machine type that was assigned for the worker.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// The zone the worker is running in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// An event generated when the worker VM that was assigned to the pipeline has been released (deleted).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerReleasedEvent
	{
		
		/// <summary>
		/// The worker's instance name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// The zone the worker was running in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Runs a pipeline. The returned Operation's metadata field will contain a google.genomics.v2alpha1.Metadata object describing the status of the pipeline execution. The [response] field will contain a google.genomics.v2alpha1.RunPipelineResponse object if the pipeline completes successfully. **Note:** Before you can use this method, the Genomics Service Agent must have access to your project. This is done automatically when the Cloud Genomics API is first enabled, but if you delete this permission, or if you enabled the Cloud Genomics API before the v2alpha1 API launch, you must disable and re-enable the API to grant the Genomics Service Agent the required permissions. Authorization requires the following [Google IAM](https://cloud.google.com/iam/) permission: * `genomics.operations.create` [1]: /genomics/gsa
		/// Genomics_pipelines_run v2alpha1/pipelines:run
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Operation> Genomics_pipelines_runAsync(RunPipelineRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2alpha1/pipelines:run";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The worker uses this method to retrieve the assigned operation and provide periodic status updates.
		/// Genomics_workers_checkIn v2alpha1/workers/{id}:checkIn
		/// </summary>
		/// <param name="id">The VM identity token for authenticating the VM instance. https://cloud.google.com/compute/docs/instances/verifying-instance-identity</param>
		/// <returns>Successful response</returns>
		public async Task<CheckInResponse> Genomics_workers_checkInAsync(string id, CheckInRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2alpha1/workers/"+ (id==null? "" : System.Uri.EscapeDataString(id))+":checkIn";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckInResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The worker uses this method to retrieve the assigned operation and provide periodic status updates.
		/// Genomics_projects_workers_checkIn v2alpha1/{id}:checkIn
		/// </summary>
		/// <param name="id">The VM identity token for authenticating the VM instance. https://cloud.google.com/compute/docs/instances/verifying-instance-identity</param>
		/// <returns>Successful response</returns>
		public async Task<CheckInResponse> Genomics_projects_workers_checkInAsync(string id, CheckInRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2alpha1/"+ (id==null? "" : System.Uri.EscapeDataString(id))+":checkIn";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CheckInResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: * `genomics.operations.list`
		/// Genomics_projects_operations_list v2alpha1/{name}
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">A string for filtering Operations. In v2alpha1, the following filter fields are supported: * createTime: The time this job was created * events: The set of event (names) that have occurred while running the pipeline. The : operator can be used to determine if a particular event has occurred. * error: If the pipeline is running, this value is NULL. Once the pipeline finishes, the value is the standard Google error code. * labels.key or labels."key with space" where key is a label key. * done: If the pipeline is running, this value is false. Once the pipeline finishes, the value is true. Examples: * `projectId = my-project AND createTime >= 1432140000` * `projectId = my-project AND createTime >= 1432140000 AND createTime <= 1432150000 AND status = RUNNING` * `projectId = my-project AND labels.color = *` * `projectId = my-project AND labels.color = red`</param>
		/// <param name="pageSize">The maximum number of results to return. The maximum value is 256.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Genomics_projects_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2alpha1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListOperationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. Clients may use Operations.GetOperation or Operations.ListOperations to check whether the cancellation succeeded or the operation completed despite cancellation. Authorization requires the following [Google IAM](https://cloud.google.com/iam) permission: * `genomics.operations.cancel`
		/// Genomics_projects_operations_cancel v2alpha1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Genomics_projects_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v2alpha1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
