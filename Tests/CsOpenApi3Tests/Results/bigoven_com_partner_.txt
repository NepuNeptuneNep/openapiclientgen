//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ControllersWebAPIGroceryListControllerDepartmentModel
	{
		
		/// <summary>
		/// Gets or sets the items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public string Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest
	{
		
		/// <summary>
		/// Gets or sets the text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest
	{
		
		/// <summary>
		/// Gets or sets the mark as pending.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markAsPending")]
		public System.Nullable<System.Boolean> MarkAsPending { get; set; }
		
		/// <summary>
		/// Gets or sets the recipe identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recipeId")]
		public System.Nullable<System.Int32> RecipeId { get; set; }
		
		/// <summary>
		/// Gets or sets the scale.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scale")]
		public System.Nullable<System.Double> Scale { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="list")]
		public BigOvenModelAPIGroceryGroceryList List { get; set; }
		
		/// <summary>
		/// Gets or sets the since.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="since")]
		public string Since { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPIGroceryGroceryList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIGroceryItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIRecipeInfo[] Recipes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPIGroceryItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BigOvenObject { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Department { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GUID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsChecked { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> ItemID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LocalStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecipeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThirdPartyURL { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPIRecipeInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BookmarkURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Cuisine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasVideos { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HeroPhotoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HideFromPublicSearch { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageURL120 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsBookmark { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsPrivate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxImageSquare { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Microcategory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIUserInfo Poster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> QualityScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecipeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReviewCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> StarRating { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string StarRatingIMG { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Subcategory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalTries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WebURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> YieldNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPIUserInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageUrl48 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsKitchenHelper { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsPremium { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsUsingRecurly { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> MemberSince { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhotoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhotoUrl48 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PremiumExpiryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WebUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest
	{
		
		/// <summary>
		/// Gets or sets the department.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="department")]
		public string Department { get; set; }
		
		/// <summary>
		/// Gets or sets the name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets the notes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Gets or sets the quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// Gets or sets the unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest
	{
		
		/// <summary>
		/// Gets or sets the department.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="department")]
		public string Department { get; set; }
		
		/// <summary>
		/// Gets or sets the unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guid")]
		public string Guid { get; set; }
		
		/// <summary>
		/// Gets or sets the ischecked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ischecked")]
		public System.Nullable<System.Boolean> Ischecked { get; set; }
		
		/// <summary>
		/// Gets or sets the name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gets or sets the notes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// Gets or sets the quantity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
		
		/// <summary>
		/// Gets or sets the unit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ControllersWebAPIImagesControllerRecipePhotosResponse
	{
		
		/// <summary>
		/// Gets or sets the result count.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ResultCount { get; set; }
		
		/// <summary>
		/// Gets or sets the results.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPI2Photo[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPI2Photo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Caption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> ImageID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsPrimary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxImageSquare { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhotoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPI2UserInfoTinyx Poster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPI2UserInfoTinyx
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhotoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ControllersWebAPIMeControllerEatingStyle
	{
		
		/// <summary>
		/// Gets or sets the options.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public API2ControllersWebAPIMeControllerOption[] Options { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ControllersWebAPIMeControllerOption
	{
		
		/// <summary>
		/// Gets or sets the description.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Gets or sets the key.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ControllersWebAPIMeControllerPreferenceOptions
	{
		
		[System.Runtime.Serialization.DataMember()]
		public API2ControllersWebAPIMeControllerEatingStyle EatingStyle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ControllersWebAPINoteControllerNoteRequest
	{
		
		/// <summary>
		/// Gets or sets the creation date.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		/// <summary>
		/// Gets or sets the date.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Gets or sets the date dt.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string DateDT { get; set; }
		
		/// <summary>
		/// Gets or sets the unique identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GUID { get; set; }
		
		/// <summary>
		/// Gets or sets the identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
		
		/// <summary>
		/// Gets or sets the notes.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		/// <summary>
		/// Gets or sets the people.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string People { get; set; }
		
		/// <summary>
		/// Gets or sets the recipe identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecipeID { get; set; }
		
		/// <summary>
		/// Gets or sets the user identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
		
		/// <summary>
		/// Gets or sets the variations.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Variations { get; set; }
	}
	
	/// <summary>
	/// Reply request parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ControllersWebAPIReviewControllerPostReplyReq
	{
		
		/// <summary>
		/// The comment. If mentioning any user(s) (optional), include them as @username in the text body. Do not use @ symbol for anything but mentioning @usernames.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Comment { get; set; }
	}
	
	/// <summary>
	/// Payload for reviews
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ControllersWebAPIReviewControllerReviewRequest
	{
		
		/// <summary>
		/// How many minutes of ACTIVE time (i.e., actively working on the recipe, not waiting for rising, baking, etc.) did it 
		///            demand of the cook? Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActiveMinutes { get; set; }
		
		/// <summary>
		/// The notes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string Comment { get; set; }
		
		/// <summary>
		/// "yes" or "no"
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MakeAgain { get; set; }
		
		/// <summary>
		/// 1, 2, 3, 4, or 5
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StarRating { get; set; }
		
		/// <summary>
		/// How long, start to finish, in minutes (integer) did it take? Optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalMinutes { get; set; }
	}
	
	/// <summary>
	/// Legacy -- This object here is deprecated. Please use the new "ReviewRequest" structure for all future development
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ControllersWebAPIReviewControllerReviewRequestLegacy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActiveMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GUID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MakeAgain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ParentID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StarRating { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2GroceryListDepartmentResult
	{
		
		/// <summary>
		/// Gets or sets the dept.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dept")]
		public string Dept { get; set; }
		
		/// <summary>
		/// Gets or sets the item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item")]
		public string Item { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ModelsAccounting
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CreditBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> MemberSince { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> PremiumExpiryDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserLevel { get; set; }
	}
	
	/// <summary>
	/// An API2 wrapper object for a user
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ModelsBigOvenUser
	{
		
		[System.Runtime.Serialization.DataMember()]
		public API2ModelsAccounting Accounting { get; set; }
		
		/// <summary>
		/// The user-specific authentication token
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string BOAuthToken { get; set; }
		
		/// <summary>
		/// Last change log
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string LastChangeLogID { get; set; }
		
		/// <summary>
		/// Personal level info -- email, location, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public API2ModelsPersonal Personal { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public API2ModelsPreference Preferences { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public API2ModelsProfile Profile { get; set; }
	}
	
	/// <summary>
	/// Personal level info -- email, location, etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ModelsPersonal
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public API2ModelsLocation Location { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ModelsLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DMA { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ModelsPreference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EatingStyle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ModelsProfile
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string AboutMe { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BackgroundUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public API2ModelsCounts Counts { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FullName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HomeUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhotoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> UserID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ModelsCounts
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> AddedCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> FollowersCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> FollowingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> PrivateRecipeCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> PublicRecipeCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> TotalRecipes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ModelsRecipesFeedbackDTO
	{
		
		[System.Runtime.Serialization.DataMember(Name="feedback")]
		public string Feedback { get; set; }
	}
	
	/// <summary>
	/// DTO used to return a recipe with videos
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ModelsRecipesRecipeResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActiveMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AdminBoost { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllCategoriesText { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BookmarkImageURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BookmarkSiteLogo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BookmarkURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Collection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CollectionID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Cuisine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FavoriteCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public int[] ImageSquares { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIIngredient[] Ingredients { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IngredientsTextBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Instructions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsBookmark { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsPrivate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsRecipeScan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsSponsored { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxImageSquare { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MedalCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MenuCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Microcategory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NotesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPINutritionInfo NutritionInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhotoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIUserInfo Poster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryIngredient { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecipeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReviewCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> StarRating { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelInstructionStep[] Steps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Subcategory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VariantOfRecipeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VerifiedByClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> VerifiedDateTime { get; set; }
		
		/// <summary>
		/// Gets or sets the recipe videos, i.e. a list of type {API2.Models.Recipes.RecipeVideoResponse}
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public API2ModelsRecipesRecipeVideoResponse[] Videos { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WebURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> YieldNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string YieldUnit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPIIngredient
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DisplayIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DisplayQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HTMLName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> IngredientID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIIngredientInfo IngredientInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsHeading { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsLinked { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricDisplayQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MetricQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetricUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PreparationNotes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPIIngredientInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Department { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MasterIngredientID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> UsuallyOnHand { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPINutritionInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CaloriesFromFat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Cholesterol { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> CholesterolPct { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DietaryFiber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> DietaryFiberPct { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MonoFat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PolyFat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Potassium { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> PotassiumPct { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Protein { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> ProteinPct { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SatFat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SatFatPct { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SingularYieldUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Sodium { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> SodiumPct { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Sugar { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalCalories { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalCarbs { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalCarbsPct { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalFat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TotalFatPct { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> TransFat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelInstructionStep
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndGantt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StartGantt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// DTO used to return the details of a recipe video
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2ModelsRecipesRecipeVideoResponse
	{
		
		/// <summary>
		/// Gets or sets the date the video was added.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> InsertedOn { get; set; }
		
		/// <summary>
		/// Gets or sets a value indicating whether the video is the primary video of the recipe.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsPrimaryVideo { get; set; }
		
		/// <summary>
		/// Gets or sets the JWPlayer media id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MediaId { get; set; }
		
		/// <summary>
		/// Gets or sets the video id.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VidId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class API2Result
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SystemObject Data { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StatusCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SystemObject
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPIImage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Caption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> ImageID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public int[] ImageSquares { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageURL120 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageURL128 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageURL200 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageURL256 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageURL48 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageURL64 { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsPrimary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxImageSquare { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIUserInfo Poster { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPIRecipe
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActiveMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AdminBoost { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllCategoriesText { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BookmarkImageURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BookmarkSiteLogo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BookmarkURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Collection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CollectionID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Cuisine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FavoriteCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HeroPhotoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public int[] ImageSquares { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIIngredient[] Ingredients { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IngredientsTextBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Instructions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsBookmark { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsPrivate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsRecipeScan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsSponsored { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxImageSquare { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MedalCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MenuCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Microcategory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NotesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPINutritionInfo NutritionInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIUserInfo Poster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryIngredient { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecipeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReviewCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> StarRating { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Subcategory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VariantOfRecipeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VerifiedByClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> VerifiedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WebURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> YieldNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string YieldUnit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPIRecipeNote
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateDT { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GUID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string People { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecipeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Variations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPIRecipeNoteList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ResultCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIRecipeNote[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPIReply
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIUserInfoTiny Poster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ReviewID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPIUserInfoTiny
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FirstName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhotoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPIReview
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActiveMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Comment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIReply FeaturedReply { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GUID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> ParentID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIUserInfo Poster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIReview[] Replies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReplyCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> ReviewID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> StarRating { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalMinutes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPI2CollectionInfo
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsFiltered { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsSponsored { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MobileUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PRO { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhotoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPI2RecipeInfox[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WebUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPI2RecipeInfox
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Cuisine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HasVideos { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsBookmark { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsPrivate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsRecipeScan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Microcategory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhotoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPI2UserInfoTinyx Poster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecipeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReviewCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Servings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> StarRating { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Subcategory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalTries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WebURL { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPI2GroceryList
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIGroceryItem[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPI2RecipeInfox[] Recipes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionGuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPI2Recipe
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ActiveMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AdTags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AdminBoost { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AllCategoriesText { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BookmarkImageURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BookmarkSiteLogo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string BookmarkURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Collection { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CollectionID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Cuisine { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> FavoriteCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public int[] ImageSquares { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIIngredient[] Ingredients { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string IngredientsTextBlock { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Instructions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsBookmark { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsPrivate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsRecipeScan { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsSponsored { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxImageSquare { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MedalCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MenuCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Microcategory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NotesCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPINutritionInfo NutritionInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PhotoUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIUserInfo Poster { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryIngredient { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecipeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ReviewCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> StarRating { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelInstructionStep[] Steps { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Subcategory { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> VariantOfRecipeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VerifiedByClass { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> VerifiedDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WebURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> YieldNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string YieldUnit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPI2RecipeNote
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateDT { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GUID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string People { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecipeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> UserID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Variations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelAPI2RecipeSearchResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ResultCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPI2RecipeInfox[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SpellSuggest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelRecipeCategory
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultActiveMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DefaultTotalMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ParentID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PrimaryImage { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ShortDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelRecipeInfoDateTuple2
	{
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recipeInfo")]
		public BigOvenModelAPI2RecipeInfox RecipeInfo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelRecipeInfoReviewTuple2
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPI2RecipeInfox RecipeInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BigOvenModelAPIReview Review { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelRecipeInfoTiny
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ImageURL { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> QualityScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecipeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Servings { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenModelShoppingListLine
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> DateAdded { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Dept { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GUID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string HTMLItemName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsChecked { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ItemName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> ListID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MealPlanID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MealPlanObjectType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PendingAddition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> RecipeID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int64> ShoppingListLineID { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Store { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TextAmt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThirdPartyHost { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThirdPartyTitle { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ThirdPartyURL { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BigOvenResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SystemObject Data { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> StatusCode { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets a recipe collection. A recipe collection is a curated set of recipes.
		/// Collection_idGetByRppAndPgAndTestAndSessionForLogging collection/{id}
		/// </summary>
		/// <param name="id">the collection identifier</param>
		/// <param name="rpp">results per page</param>
		/// <param name="pg">page number (starting with 1)</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPI2RecipeSearchResult> Collection_idGetByRppAndPgAndTestAndSessionForLoggingAsync(int id, int rpp, int pg, bool test, string sessionForLogging, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collection/"+id+"?rpp="+rpp+"&pg="+pg+"&test="+test+"&sessionForLogging=" + (sessionForLogging==null? "" : System.Uri.EscapeDataString(sessionForLogging));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPI2RecipeSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a recipe collection metadata. A recipe collection is a curated set of recipes.
		/// Collection_idMetaGet collection/{id}/meta
		/// </summary>
		/// <param name="id">the collection identifier</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPI2CollectionInfo> Collection_idMetaGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collection/"+id+"/meta";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPI2CollectionInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of current, seasonal recipe collections. From here, you can use the /collection/{id} endpoint to retrieve the recipes in those collections.
		/// CollectionsGetByTest collections
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPI2CollectionInfo[]> CollectionsGetByTestAsync(string test, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "collections?test=" + (test==null? "" : System.Uri.EscapeDataString(test));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPI2CollectionInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete all the items on a grocery list; faster operation than a sync with deleted items.
		/// GrocerylistDelete grocerylist
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SystemObject> GrocerylistDeleteAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "grocerylist";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the user's grocery list.  User is determined by Basic Authentication.
		/// GrocerylistGet grocerylist
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPI2GroceryList> GrocerylistGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "grocerylist";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPI2GroceryList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Clears the checked lines.
		/// GrocerylistClearcheckedlinesPost grocerylist/clearcheckedlines
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPI2GroceryList> GrocerylistClearcheckedlinesPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "grocerylist/clearcheckedlines";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPI2GroceryList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Departmentalize a list of strings -- used for ad-hoc grocery list item addition
		/// GrocerylistDepartmentPost grocerylist/department
		/// </summary>
		/// <param name="requestBody">see DepartmentModel for the request payload</param>
		/// <returns>OK</returns>
		public async Task<API2GroceryListDepartmentResult[]> GrocerylistDepartmentPostAsync(API2ControllersWebAPIGroceryListControllerDepartmentModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "grocerylist/department";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<API2GroceryListDepartmentResult[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a single line item to the grocery list
		/// GrocerylistItemPost grocerylist/item
		/// </summary>
		/// <param name="requestBody">name, quantity, unit, notes, department</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelShoppingListLine> GrocerylistItemPostAsync(API2ControllersWebAPIGroceryListControllerPostToGroceryListRecipeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "grocerylist/item";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelShoppingListLine>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// /grocerylist/item/{guid}  DELETE will delete this item assuming you own it.
		/// GrocerylistItem_guidDelete grocerylist/item/{guid}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SystemObject> GrocerylistItem_guidDeleteAsync(string guid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "grocerylist/item/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a grocery item by GUID
		/// GrocerylistItem_guidPut grocerylist/item/{guid}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SystemObject> GrocerylistItem_guidPutAsync(string guid, API2ControllersWebAPIGroceryListControllerUpdateItemByGuidRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "grocerylist/item/"+ (guid==null? "" : System.Uri.EscapeDataString(guid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a single line item to the grocery list
		/// GrocerylistLinePost grocerylist/line
		/// </summary>
		/// <param name="requestBody">name, quantity, unit, notes, department</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelShoppingListLine> GrocerylistLinePostAsync(API2ControllersWebAPIGroceryListControllerPostGroceryListAddLineRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "grocerylist/line";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelShoppingListLine>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Add a Recipe to the grocery list.  In the request data, pass in recipeId, scale (scale=1.0 says to keep the recipe the same size as originally posted), markAsPending (true/false) to indicate that
		/// the lines in the recipe should be marked in a "pending" (unconfirmed by user) state.
		/// GrocerylistRecipePost grocerylist/recipe
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SystemObject> GrocerylistRecipePostAsync(API2ControllersWebAPIGroceryListControllerPostGroceryListRecipeRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "grocerylist/recipe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Synchronize the grocery list.  Call this with a POST to /grocerylist/sync
		/// GrocerylistSyncPost grocerylist/sync
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SystemObject> GrocerylistSyncPostAsync(API2ControllersWebAPIGroceryListControllerPostGroceryListSyncRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "grocerylist/sync";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// POST: /image/avatar
		/// 
		/// Testing with Postman (validated 11/20/2015):
		/// 1) Remove the Content-Type header; add authentication information
		/// 2) On the request, click Body and choose "form-data", then add a line item with "key" column set to "file" and on the right,
		/// change the type of the input from Text to File.  Browse and choose a JPG.
		/// ImageAvatarPost image/avatar
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SystemObject> ImageAvatarPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "image/avatar";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Indexes this instance.
		/// MeGet me
		/// </summary>
		/// <returns>OK</returns>
		public async Task<API2ModelsBigOvenUser> MeGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<API2ModelsBigOvenUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Puts me.
		/// MePut me
		/// </summary>
		/// <param name="requestBody">The req.</param>
		/// <returns>OK</returns>
		public async Task<API2ModelsBigOvenUser> MePutAsync(API2ModelsBigOvenUser requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<API2ModelsBigOvenUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Puts me personal.
		/// MePersonalPut me/personal
		/// </summary>
		/// <param name="requestBody">The req.</param>
		/// <returns>OK</returns>
		public async Task<API2ModelsBigOvenUser> MePersonalPutAsync(API2ModelsPersonal requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/personal";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<API2ModelsBigOvenUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Puts me preferences.
		/// MePreferencesPut me/preferences
		/// </summary>
		/// <param name="requestBody">The req.</param>
		/// <returns>OK</returns>
		public async Task<API2ModelsBigOvenUser> MePreferencesPutAsync(API2ModelsPreference requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/preferences";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<API2ModelsBigOvenUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the options.
		/// MePreferencesOptionsGet me/preferences/options
		/// </summary>
		/// <returns>OK</returns>
		public async Task<API2ControllersWebAPIMeControllerPreferenceOptions> MePreferencesOptionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/preferences/options";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<API2ControllersWebAPIMeControllerPreferenceOptions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Puts me.
		/// MeProfilePut me/profile
		/// </summary>
		/// <param name="requestBody">The req.</param>
		/// <returns>OK</returns>
		public async Task<API2ModelsBigOvenUser> MeProfilePutAsync(API2ModelsProfile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/profile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<API2ModelsBigOvenUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Skinnies this instance.
		/// MeSkinnyGet me/skinny
		/// </summary>
		/// <returns>OK</returns>
		public async Task<API2ModelsBigOvenUser> MeSkinnyGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/skinny";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<API2ModelsBigOvenUser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new recipe
		/// RecipePost recipe
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIRecipe> RecipePostAsync(BigOvenModelAPIRecipe requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIRecipe>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a recipe
		/// RecipePut recipe
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIRecipe> RecipePutAsync(BigOvenModelAPIRecipe requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIRecipe>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Given a query, return recipe titles starting with query. Query must be at least 3 chars in length.
		/// RecipeAutocompleteGetByQueryAndLimit recipe/autocomplete
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string[]> RecipeAutocompleteGetByQueryAndLimitAsync(string query, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/autocomplete?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Automatics the complete all recipes.
		/// RecipeAutocompleteAllGetByQueryAndLimit recipe/autocomplete/all
		/// </summary>
		/// <param name="query">The query.</param>
		/// <param name="limit">The limit.</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelRecipeInfoTiny[]> RecipeAutocompleteAllGetByQueryAndLimitAsync(string query, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/autocomplete/all?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelRecipeInfoTiny[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Automatics the complete my recipes.
		/// RecipeAutocompleteMineGetByQueryAndLimit recipe/autocomplete/mine
		/// </summary>
		/// <param name="query">The query.</param>
		/// <param name="limit">The limit.</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelRecipeInfoTiny[]> RecipeAutocompleteMineGetByQueryAndLimitAsync(string query, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/autocomplete/mine?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelRecipeInfoTiny[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of recipe categories (the ID field can be used for include_cat in search parameters)
		/// RecipeCategoriesGet recipe/categories
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BigOvenModelRecipeCategory[]> RecipeCategoriesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelRecipeCategory[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns last active recipe for the user
		/// RecipeGetActiveRecipeGetByUserName recipe/get/active/recipe
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BigOvenResult> RecipeGetActiveRecipeGetByUserNameAsync(string userName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/get/active/recipe?userName=" + (userName==null? "" : System.Uri.EscapeDataString(userName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets recipe single step as text
		/// RecipeGetSavedStepPostByUserNameAndRecipeIdAndStepId recipe/get/saved/step
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> RecipeGetSavedStepPostByUserNameAndRecipeIdAndStepIdAsync(string userName, int recipeId, int stepId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/get/saved/step?userName=" + (userName==null? "" : System.Uri.EscapeDataString(userName))+"&recipeId="+recipeId+"&stepId="+stepId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns stored step number and number of steps in recipe
		/// RecipeGetStepNumberPostByUserNameAndRecipeId recipe/get/step/number
		/// </summary>
		/// <returns>OK</returns>
		public async Task<API2Result> RecipeGetStepNumberPostByUserNameAndRecipeIdAsync(string userName, int recipeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/get/step/number?userName=" + (userName==null? "" : System.Uri.EscapeDataString(userName))+"&recipeId="+recipeId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<API2Result>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the pending by user.
		/// RecipePhotosPendingGet recipe/photos/pending
		/// </summary>
		/// <returns>OK</returns>
		public async Task<API2ControllersWebAPIImagesControllerRecipePhotosResponse> RecipePhotosPendingGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/photos/pending";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<API2ControllersWebAPIImagesControllerRecipePhotosResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Stores recipe step number and returns saved step data
		/// RecipePostStepPostByUserNameAndRecipeIdAndStepId recipe/post/step
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BigOvenResult> RecipePostStepPostByUserNameAndRecipeIdAndStepIdAsync(string userName, int recipeId, int stepId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/post/step?userName=" + (userName==null? "" : System.Uri.EscapeDataString(userName))+"&recipeId="+recipeId+"&stepId="+stepId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DELETE a reply to a given review. Authenticated user must be the one who originally posted the reply.
		/// RecipeReviewReplies_replyIdDelete recipe/review/replies/{replyId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SystemObject> RecipeReviewReplies_replyIdDeleteAsync(string replyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/review/replies/"+ (replyId==null? "" : System.Uri.EscapeDataString(replyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update (PUT) a reply to a given review. Authenticated user must be the original one that posted the reply.
		/// RecipeReviewReplies_replyIdPut recipe/review/replies/{replyId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIReply> RecipeReviewReplies_replyIdPutAsync(string replyId, API2ControllersWebAPIReviewControllerPostReplyReq requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/review/replies/"+ (replyId==null? "" : System.Uri.EscapeDataString(replyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIReply>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a given review by string-style ID. This will return a payload with FeaturedReply, ReplyCount.
		/// Recommended display is to list top-level reviews with one featured reply underneath.
		/// Currently, the FeaturedReply is the most recent one for that rating.
		/// RecipeReview_reviewIdGet recipe/review/{reviewId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIReview> RecipeReview_reviewIdGetAsync(string reviewId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/review/"+ (reviewId==null? "" : System.Uri.EscapeDataString(reviewId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIReview>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a given top-level review.
		/// RecipeReview_reviewIdPut recipe/review/{reviewId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIReview> RecipeReview_reviewIdPutAsync(string reviewId, API2ControllersWebAPIReviewControllerReviewRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/review/"+ (reviewId==null? "" : System.Uri.EscapeDataString(reviewId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIReview>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a paged list of replies for a given review.
		/// RecipeReview_reviewIdRepliesGetByPgAndRpp recipe/review/{reviewId}/replies
		/// </summary>
		/// <param name="pg">the page (int), starting with 1</param>
		/// <param name="rpp">results per page (int)</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIReply[]> RecipeReview_reviewIdRepliesGetByPgAndRppAsync(string reviewId, int pg, int rpp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/review/"+ (reviewId==null? "" : System.Uri.EscapeDataString(reviewId))+"/replies&pg="+pg+"&rpp="+rpp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIReply[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// POST a reply to a given review. The date will be set by server. Note that replies no longer have star ratings, only top-level reviews do.
		/// RecipeReview_reviewIdRepliesPost recipe/review/{reviewId}/replies
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIReply> RecipeReview_reviewIdRepliesPostAsync(string reviewId, API2ControllersWebAPIReviewControllerPostReplyReq requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/review/"+ (reviewId==null? "" : System.Uri.EscapeDataString(reviewId))+"/replies";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIReply>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// POST an image as a new RecipeScan request
		/// 1)  Fetch the filename -- DONE
		/// 2)  Copy it to the pics/scan folder - ENSURE NO NAMING COLLISIONS -- DONE
		/// 3)  Create 120 thumbnail size  in pics/scan/120 -- DONE
		/// 4)  Insert the CloudTasks record
		/// 5)  Create the HIT
		/// 6)  Update the CloudTasks record with the HIT ID
		/// 7)  Email the requesing user
		/// 8)  Call out to www.bigoven.com to fetch the image and re-create the thumbnail
		/// RecipeScanPostByTestAndDevicetypeAndLatAndLng recipe/scan
		/// </summary>
		public async Task RecipeScanPostByTestAndDevicetypeAndLatAndLngAsync(bool test, string devicetype, double lat, double lng, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/scan?test="+test+"&devicetype=" + (devicetype==null? "" : System.Uri.EscapeDataString(devicetype))+"&lat="+lat+"&lng="+lng;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return full Recipe detail with steps. Returns 403 if the recipe is owned by someone else.
		/// RecipeSteps_idGetByPrefetch recipe/steps/{id}
		/// </summary>
		/// <param name="id">the Recipe ID to retrieve</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPI2Recipe> RecipeSteps_idGetByPrefetchAsync(int id, bool prefetch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/steps/"+id+"?prefetch="+prefetch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPI2Recipe>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete a Recipe (you must be authenticated as an owner of the recipe)
		/// Recipe_idDelete recipe/{id}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SystemObject> Recipe_idDeleteAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return full Recipe detail. Returns 403 if the recipe is owned by someone else.
		/// Recipe_idGetByPrefetch recipe/{id}
		/// </summary>
		/// <param name="id">The Recipe ID to retrieve</param>
		/// <param name="prefetch">The prefetch.</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPI2Recipe> Recipe_idGetByPrefetchAsync(int id, bool prefetch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+id+"?prefetch="+prefetch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPI2Recipe>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Zaps the recipe.
		/// Recipe_idZapGet recipe/{id}/zap
		/// </summary>
		/// <param name="id">The identifier.</param>
		/// <returns>OK</returns>
		public async Task<SystemObject> Recipe_idZapGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+id+"/zap";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Feedback on a Recipe -- for internal BigOven editors
		/// Recipe_recipeIdFeedbackPost recipe/{recipeId}/feedback
		/// </summary>
		/// <param name="requestBody">The payload for feedback, which includes the field "feedback"</param>
		/// <returns>OK</returns>
		public async Task<SystemObject> Recipe_recipeIdFeedbackPostAsync(int recipeId, API2ModelsRecipesFeedbackDTO requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+recipeId+"/feedback";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// POST: /recipe/{recipeId}/image?lat=42&amp;lng=21&amp;caption=this%20is%20my%20caption
		/// 
		/// Note that caption, lng and lat are all optional, but must go on the request URI as params because this endpoint
		/// needs a multipart/mime content header and will not parse JSON in the body along with it.
		/// 
		/// Testing with Postman (validated 11/20/2015):
		/// 1) Remove the Content-Type header; add authentication information
		/// 2) On the request, click Body and choose "form-data", then add a line item with "key" column set to "file" and on the right,
		/// change the type of the input from Text to File.  Browse and choose a JPG.
		/// Recipe_recipeIdImagePostByCaptionAndLatAndLng recipe/{recipeId}/image
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SystemObject> Recipe_recipeIdImagePostByCaptionAndLatAndLngAsync(string recipeId, string caption, double lat, double lng, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+ (recipeId==null? "" : System.Uri.EscapeDataString(recipeId))+"/image&caption=" + (caption==null? "" : System.Uri.EscapeDataString(caption))+"&lat="+lat+"&lng="+lng;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the images for a recipe. DEPRECATED. Please use /recipe/{recipeId}/photos.
		/// Recipe_recipeIdImagesGet recipe/{recipeId}/images
		/// </summary>
		/// <param name="recipeId">Recipe ID (required)</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIImage[]> Recipe_recipeIdImagesGetAsync(int recipeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+recipeId+"/images";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIImage[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// HTTP POST a new note into the system.
		/// Recipe_recipeIdNotePost recipe/{recipeId}/note
		/// </summary>
		/// <param name="recipeId">recipeId (int)</param>
		/// <param name="requestBody">a recipe note, with fields: Date (YYYY-MM-DD string), Notes (string), People (string), Variations (string), RecipeID (int?)</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPI2RecipeNote> Recipe_recipeIdNotePostAsync(int recipeId, API2ControllersWebAPINoteControllerNoteRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+recipeId+"/note";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPI2RecipeNote>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a review
		/// do a DELETE Http request of /note/{ID}
		/// Recipe_recipeIdNote_noteIdDelete recipe/{recipeId}/note/{noteId}
		/// </summary>
		/// <param name="recipeId">recipeId (int)</param>
		/// <param name="noteId">noteId (int)</param>
		/// <returns>OK</returns>
		public async Task<SystemObject> Recipe_recipeIdNote_noteIdDeleteAsync(int recipeId, int noteId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+recipeId+"/note/"+noteId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a given note. Make sure you're passing authentication information in the header for the user who owns the note.
		/// Recipe_recipeIdNote_noteIdGet recipe/{recipeId}/note/{noteId}
		/// </summary>
		/// <param name="recipeId">recipe identifier (integer)</param>
		/// <param name="noteId">The note ID (note -- it's not the RecipeID)</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIRecipeNote> Recipe_recipeIdNote_noteIdGetAsync(int recipeId, int noteId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+recipeId+"/note/"+noteId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIRecipeNote>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// HTTP PUT (update) a Recipe note (RecipeNote).
		/// Recipe_recipeIdNote_noteIdPut recipe/{recipeId}/note/{noteId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIRecipeNote> Recipe_recipeIdNote_noteIdPutAsync(int recipeId, int noteId, API2ControllersWebAPINoteControllerNoteRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+recipeId+"/note/"+noteId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIRecipeNote>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// recipe/100/notes
		/// Recipe_recipeIdNotesGetByPgAndRpp recipe/{recipeId}/notes
		/// </summary>
		/// <param name="recipeId">recipeId (int)</param>
		/// <param name="pg">page (int, starting from 1)</param>
		/// <param name="rpp">recipeId</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIRecipeNoteList> Recipe_recipeIdNotesGetByPgAndRppAsync(int recipeId, int pg, int rpp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+recipeId+"/notes?pg="+pg+"&rpp="+rpp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIRecipeNoteList>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the photos for a recipe
		/// Recipe_recipeIdPhotosGetByPgAndRpp recipe/{recipeId}/photos
		/// </summary>
		/// <param name="recipeId">Recipe ID (required)</param>
		/// <returns>OK</returns>
		public async Task<API2ControllersWebAPIImagesControllerRecipePhotosResponse> Recipe_recipeIdPhotosGetByPgAndRppAsync(int recipeId, int pg, int rpp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+recipeId+"/photos?pg="+pg+"&rpp="+rpp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<API2ControllersWebAPIImagesControllerRecipePhotosResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get recipes related to the given recipeId
		/// Recipe_recipeIdRelatedGetByPgAndRpp recipe/{recipeId}/related
		/// </summary>
		/// <param name="recipeId">The recipe id</param>
		/// <param name="pg">The page</param>
		/// <param name="rpp">The results per page</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPI2RecipeSearchResult> Recipe_recipeIdRelatedGetByPgAndRppAsync(int recipeId, int pg, int rpp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+recipeId+"/related?pg="+pg+"&rpp="+rpp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPI2RecipeSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get *my* review for the recipe {recipeId}, where "me" is determined by standard authentication headers
		/// Recipe_recipeIdReviewGet recipe/{recipeId}/review
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIReview> Recipe_recipeIdReviewGetAsync(int recipeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+recipeId+"/review";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIReview>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a new review. Only one review can be provided per {userId, recipeId} pair. Otherwise your review will be updated.
		/// Recipe_recipeIdReviewPost recipe/{recipeId}/review
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SystemObject> Recipe_recipeIdReviewPostAsync(int recipeId, API2ControllersWebAPIReviewControllerReviewRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+recipeId+"/review";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// DEPRECATED! - Deletes a review by recipeId and reviewId. Please use recipe/review/{reviewId} instead.
		/// Recipe_recipeIdReview_reviewIdDelete recipe/{recipeId}/review/{reviewId}
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SystemObject> Recipe_recipeIdReview_reviewIdDeleteAsync(int recipeId, long reviewId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+recipeId+"/review/"+reviewId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SystemObject>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a given review - DEPRECATED. See recipe/review/{reviewId} for the current usage.
		/// Beginning in January 2017, BigOven moded from an integer-based ID system to a GUID-style string-based ID system for reviews and replies.
		/// We are also supporting more of a "Google Play" style model for Reviews and Replies. That is, there are top-level Reviews and then
		/// an unlimited list of replies (which do not carry star ratings) underneath existing reviews. Also, a given user can only have one review
		/// per recipe. Existing legacy endpoints will continue to work, but we strongly recommend you migrate to using the newer endpoints listed
		/// which do NOT carry the "DEPRECATED" flag.
		/// Recipe_recipeIdReview_reviewIdGet recipe/{recipeId}/review/{reviewId}
		/// </summary>
		/// <param name="reviewId">int</param>
		/// <param name="recipeId">int</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIReview> Recipe_recipeIdReview_reviewIdGetAsync(int reviewId, int recipeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+recipeId+"/review/"+reviewId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIReview>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// HTTP PUT (update) a recipe review. DEPRECATED. Please see recipe/review/{reviewId} PUT for the new endpoint.
		/// We are moving to a string-based primary key system, no longer integers, for reviews and replies.
		/// Recipe_recipeIdReview_reviewIdPut recipe/{recipeId}/review/{reviewId}
		/// </summary>
		/// <param name="reviewId">reviewId (int)</param>
		/// <param name="recipeId">recipeId (int)</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIReview> Recipe_recipeIdReview_reviewIdPutAsync(int reviewId, int recipeId, API2ControllersWebAPIReviewControllerReviewRequestLegacy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+recipeId+"/review/"+reviewId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIReview>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get paged list of reviews for a recipe. Each review will have at most one FeaturedReply, as well as a ReplyCount.
		/// Recipe_recipeIdReviewsGetByPgAndRpp recipe/{recipeId}/reviews
		/// </summary>
		/// <param name="recipeId">recipe id (int)</param>
		/// <param name="pg">the page (int), starting with 1</param>
		/// <param name="rpp">results per page (int)</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIReview[]> Recipe_recipeIdReviewsGetByPgAndRppAsync(int recipeId, int pg, int rpp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+recipeId+"/reviews?pg="+pg+"&rpp="+rpp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIReview[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a list of RecipeScan images for the recipe. There will be at most 3 per recipe.
		/// Recipe_recipeIdScansGet recipe/{recipeId}/scans
		/// </summary>
		/// <param name="recipeId">the recipe identifier (int)</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIImage[]> Recipe_recipeIdScansGetAsync(int recipeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipe/"+recipeId+"/scans";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIImage[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for recipes. There are many parameters that you can apply. Starting with the most common, use title_kw to search within a title.
		/// Use any_kw to search across the entire recipe.
		/// If you'd like to limit by course, set the parameter "include_primarycat" to one of (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup,marinades,other).
		/// If you'd like to exclude a category, set exclude_cat to one or more (comma-separated) list of those categories to exclude.
		/// If you'd like to include a category, set include_cat to one or more (comma-separated) of those categories to include.
		/// To explicitly include an ingredient in your search, set the parameter "include_ing" to a CSV of up to three ingredients, e.g.:include_ing=mustard,chicken,beef%20tips
		/// To explicitly exclude an ingredient in your search, set the parameter "exclude_ing" to a CSV of up to three ingredients.
		/// All searches must contain the paging parameters pg and rpp, which are integers, and represent the page number (1-based) and results per page (rpp).
		/// So, to get the third page of a result set paged with 25 recipes per page, you'd pass pg=3&amp;rpp=25
		/// If you'd like to target searches to just a single target user's recipes, set userId=the target userId (number).
		/// Or, you can set username=theirusername
		/// vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps
		/// cuisine
		/// photos
		/// filter=added,try,favorites,myrecipes\r\n\r\n
		/// folder=FolderNameCaseSensitive
		/// coll=ID of Collection
		/// RecipesGetByAny_kwAndFolderAndCollAndFilterAndTitle_kwAndUserIdAndUsernameAndTokenAndPhotosAndBoostmineAndInclude_catAndExclude_catAndInclude_primarycatAndExclude_primarycatAndInclude_ingAndExclude_ingAndCuisineAndDbAndUsersetAndServingsMinAndTotalMinsAndMaxIngredientsAndMinIngredientsAndRppAndPgAndVtnAndVgnAndChsAndGlfAndNtfAndDyfAndSffAndSlfAndTnfAndWmfAndRmfAndCpsAndChampionAndSynonyms recipes
		/// </summary>
		/// <param name="any_kw">Search anywhere in the recipe for the keyword</param>
		/// <param name="folder">Search in a specific folder name for the authenticated user</param>
		/// <param name="coll">Limit to a collection ID number</param>
		/// <param name="filter">optionally set to either "myrecipes", "try", "favorites","added" to filter to just the authenticated user's recipe set</param>
		/// <param name="title_kw">Search just in the recipe title for the keyword</param>
		/// <param name="userId">Set the target userid to search their public recipes</param>
		/// <param name="username">Set the target username to search their public recipes</param>
		/// <param name="photos">if set to true, limit search results to photos only</param>
		/// <param name="boostmine">if set to true, boost my own recipes in my folders so they show up high in the list (at the expense of other sort orders)</param>
		/// <param name="include_cat">integer of the subcategory you'd like to limit searches to (see the /recipe/categories endpoint for available id numbers). For instance, 58 is "Main Dish &gt; Casseroles".</param>
		/// <param name="exclude_cat">like include_cat, set this to an integer to exclude a specific category</param>
		/// <param name="include_primarycat">csv indicating up to three top-level categories -- valid values are [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other]</param>
		/// <param name="exclude_primarycat">csv indicating integer values for up to 3 top-level categories -- valid values are 1...11 [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other]</param>
		/// <param name="include_ing">A CSV representing up to 3 ingredients to include, e.g., tomatoes,corn%20%starch,chicken</param>
		/// <param name="exclude_ing">A CSV representing up to 3 ingredients to exclude  (Powersearch-capable plan required)</param>
		/// <param name="cuisine">Limit to a specific cuisine. Cooks can enter anything free-form, but the few dozen preconfigured values are Afghan,African,American,American-South,Asian,Australian,Brazilian,Cajun,Canadian,Caribbean,Chinese,Croatian,Cuban,Dessert,Eastern European,English,French,German,Greek,Hawaiian,Hungarian,India,Indian,Irish,Italian,Japanese,Jewish,Korean,Latin,Mediterranean,Mexican,Middle Eastern,Moroccan,Polish,Russian,Scandanavian,Seafood,Southern,Southwestern,Spanish,Tex-Mex,Thai,Vegan,Vegetarian,Vietnamese</param>
		/// <param name="userset">If set to a given username, it'll force the search to filter to just that username</param>
		/// <param name="servingsMin">Limit to yield of a given number size or greater. Note that cooks usually enter recipes by Servings, but sometimes they are posted by "dozen", etc. This parameter simply specifies the minimum number for that value entered in "yield."</param>
		/// <param name="totalMins">Optional. If supplied, will restrict results to recipes that can be made in {totalMins} or less. (Convert "1 hour, 15 minutes" to 75 before passing in.)</param>
		/// <param name="maxIngredients">Optional. If supplied, will restrict results to recipes that can be made with {maxIngredients} ingredients or less</param>
		/// <param name="minIngredients">Optional. If supplied, will restrict results to recipes that have at least {minIngredients}</param>
		/// <param name="rpp">integer; results per page</param>
		/// <param name="pg">integer: the page number</param>
		/// <param name="vtn">when set to 1, limit to vegetarian (Powersearch-capable plan required)</param>
		/// <param name="vgn">when set to 1, limit to vegan (Powersearch-capable plan required)</param>
		/// <param name="chs">when set to 1, limit to contains-cheese (Powersearch-capable plan required)</param>
		/// <param name="glf">when set to 1, limit to gluten-free (Powersearch-capable plan required)</param>
		/// <param name="ntf">when set to 1, limit to nut-free (Powersearch-capable plan required)</param>
		/// <param name="dyf">when set to 1, limit to dairy-free (Powersearch-capable plan required)</param>
		/// <param name="sff">when set to 1, limit to seafood-free (Powersearch-capable plan required)</param>
		/// <param name="slf">when set to 1, limit to shellfish-free (Powersearch-capable plan required)</param>
		/// <param name="tnf">when set to 1, limit to tree-nut free (Powersearch-capable plan required)</param>
		/// <param name="wmf">when set to 1, limit to white-meat free (Powersearch-capable plan required)</param>
		/// <param name="rmf">when set to 1, limit to red-meat free (Powersearch-capable plan required)</param>
		/// <param name="cps">when set to 1, recipe contains pasta, set to 0 means contains no pasta (Powersearch-capable plan required)</param>
		/// <param name="champion">optional. When set to 1, this will limit search results to "best of" recipes as determined by various internal editorial and programmatic algorithms. For the most comprehensive results, don't include this parameter.</param>
		/// <param name="synonyms">optional, default is false. When set to true, BigOven will attempt to apply synonyms in search (e.g., excluding pork will also exclude bacon)</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPI2RecipeSearchResult> RecipesGetByAny_kwAndFolderAndCollAndFilterAndTitle_kwAndUserIdAndUsernameAndTokenAndPhotosAndBoostmineAndInclude_catAndExclude_catAndInclude_primarycatAndExclude_primarycatAndInclude_ingAndExclude_ingAndCuisineAndDbAndUsersetAndServingsMinAndTotalMinsAndMaxIngredientsAndMinIngredientsAndRppAndPgAndVtnAndVgnAndChsAndGlfAndNtfAndDyfAndSffAndSlfAndTnfAndWmfAndRmfAndCpsAndChampionAndSynonymsAsync(
					string any_kw, 
					string folder, 
					int coll, 
					string filter, 
					string title_kw, 
					int userId, 
					string username, 
					string token, 
					bool photos, 
					bool boostmine, 
					string include_cat, 
					string exclude_cat, 
					string include_primarycat, 
					string exclude_primarycat, 
					string include_ing, 
					string exclude_ing, 
					string cuisine, 
					string db, 
					string userset, 
					double servingsMin, 
					int totalMins, 
					int maxIngredients, 
					int minIngredients, 
					int rpp, 
					int pg, 
					int vtn, 
					int vgn, 
					int chs, 
					int glf, 
					int ntf, 
					int dyf, 
					int sff, 
					int slf, 
					int tnf, 
					int wmf, 
					int rmf, 
					int cps, 
					int champion, 
					bool synonyms, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipes?any_kw=" + (any_kw==null? "" : System.Uri.EscapeDataString(any_kw))+"&folder=" + (folder==null? "" : System.Uri.EscapeDataString(folder))+"&coll="+coll+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&title_kw=" + (title_kw==null? "" : System.Uri.EscapeDataString(title_kw))+"&userId="+userId+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&photos="+photos+"&boostmine="+boostmine+"&include_cat=" + (include_cat==null? "" : System.Uri.EscapeDataString(include_cat))+"&exclude_cat=" + (exclude_cat==null? "" : System.Uri.EscapeDataString(exclude_cat))+"&include_primarycat=" + (include_primarycat==null? "" : System.Uri.EscapeDataString(include_primarycat))+"&exclude_primarycat=" + (exclude_primarycat==null? "" : System.Uri.EscapeDataString(exclude_primarycat))+"&include_ing=" + (include_ing==null? "" : System.Uri.EscapeDataString(include_ing))+"&exclude_ing=" + (exclude_ing==null? "" : System.Uri.EscapeDataString(exclude_ing))+"&cuisine=" + (cuisine==null? "" : System.Uri.EscapeDataString(cuisine))+"&db=" + (db==null? "" : System.Uri.EscapeDataString(db))+"&userset=" + (userset==null? "" : System.Uri.EscapeDataString(userset))+"&servingsMin="+servingsMin+"&totalMins="+totalMins+"&maxIngredients="+maxIngredients+"&minIngredients="+minIngredients+"&rpp="+rpp+"&pg="+pg+"&vtn="+vtn+"&vgn="+vgn+"&chs="+chs+"&glf="+glf+"&ntf="+ntf+"&dyf="+dyf+"&sff="+sff+"&slf="+slf+"&tnf="+tnf+"&wmf="+wmf+"&rmf="+rmf+"&cps="+cps+"&champion="+champion+"&synonyms="+synonyms;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPI2RecipeSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a random, home-page-quality Recipe.
		/// RecipesRandomGet recipes/random
		/// </summary>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPIRecipe> RecipesRandomGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipes/random";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPIRecipe>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the recipe/comment tuples for those recipes with 4 or 5 star ratings
		/// RecipesRavesGetByPgAndRpp recipes/raves
		/// </summary>
		/// <param name="pg">page, starting with 1</param>
		/// <param name="rpp">results per page</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelRecipeInfoReviewTuple2[]> RecipesRavesGetByPgAndRppAsync(int pg, int rpp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipes/raves?pg="+pg+"&rpp="+rpp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelRecipeInfoReviewTuple2[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of recipes that the authenticated user has most recently viewed
		/// RecipesRecentviewsGetByPgAndRpp recipes/recentviews
		/// </summary>
		/// <param name="pg">Page number starting with 1</param>
		/// <param name="rpp">results per page</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelRecipeInfoDateTuple2[]> RecipesRecentviewsGetByPgAndRppAsync(int pg, int rpp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipes/recentviews?pg="+pg+"&rpp="+rpp;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelRecipeInfoDateTuple2[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for recipes. There are many parameters that you can apply. Starting with the most common, use title_kw to search within a title.
		/// Use any_kw to search across the entire recipe.
		/// If you'd like to limit by course, set the parameter "include_primarycat" to one of (appetizers,bread,breakfast,dessert,drinks,maindish,salad,sidedish,soup,marinades,other).
		/// If you'd like to exclude a category, set exclude_cat to one or more (comma-separated) list of those categories to exclude.
		/// If you'd like to include a category, set include_cat to one or more (comma-separated) of those categories to include.
		/// To explicitly include an ingredient in your search, set the parameter "include_ing" to a CSV of up to three ingredients, e.g.:include_ing=mustard,chicken,beef%20tips
		/// To explicitly exclude an ingredient in your search, set the parameter "exclude_ing" to a CSV of up to three ingredients.
		/// All searches must contain the paging parameters pg and rpp, which are integers, and represent the page number (1-based) and results per page (rpp).
		/// So, to get the third page of a result set paged with 25 recipes per page, you'd pass pg=3&amp;rpp=25
		/// If you'd like to target searches to just a single target user's recipes, set userId=the target userId (number).
		/// Or, you can set username=theirusername
		/// vtn;vgn;chs;glf;ntf;dyf;sff;slf;tnf;wmf;rmf;cps
		/// cuisine
		/// photos
		/// filter=added,try,favorites,myrecipes\r\n\r\n
		/// folder=FolderNameCaseSensitive
		/// coll=ID of Collection
		/// RecipesTop25randomGetByAny_kwAndFolderAndCollAndFilterAndTitle_kwAndUserIdAndUsernameAndTokenAndPhotosAndBoostmineAndInclude_catAndExclude_catAndInclude_primarycatAndExclude_primarycatAndInclude_ingAndExclude_ingAndCuisineAndDbAndUsersetAndServingsMinAndTotalMinsAndMaxIngredientsAndMinIngredientsAndVtnAndVgnAndChsAndGlfAndNtfAndDyfAndSffAndSlfAndTnfAndWmfAndRmfAndCpsAndChampionAndSynonyms recipes/top25random
		/// </summary>
		/// <param name="any_kw">Search anywhere in the recipe for the keyword</param>
		/// <param name="folder">Search in a specific folder name for the authenticated user</param>
		/// <param name="coll">Limit to a collection ID number</param>
		/// <param name="filter">optionally set to either "myrecipes", "try", "favorites","added" to filter to just the authenticated user's recipe set</param>
		/// <param name="title_kw">Search just in the recipe title for the keyword</param>
		/// <param name="userId">Set the target userid to search their public recipes</param>
		/// <param name="username">Set the target username to search their public recipes</param>
		/// <param name="photos">if set to true, limit search results to photos only</param>
		/// <param name="boostmine">if set to true, boost my own recipes in my folders so they show up high in the list (at the expense of other sort orders)</param>
		/// <param name="include_cat">integer of the subcategory you'd like to limit searches to (see the /recipe/categories endpoint for available id numbers). For instance, 58 is "Main Dish &gt; Casseroles".</param>
		/// <param name="exclude_cat">like include_cat, set this to an integer to exclude a specific category</param>
		/// <param name="include_primarycat">csv indicating up to three top-level categories -- valid values are [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other]</param>
		/// <param name="exclude_primarycat">csv indicating integer values for up to 3 top-level categories -- valid values are 1...11 [appetizers,bread,breakfast,desserts,drinks,maindish,salads,sidedish,soups,marinades,other]</param>
		/// <param name="include_ing">A CSV representing up to 3 ingredients to include, e.g., tomatoes,corn%20%starch,chicken</param>
		/// <param name="exclude_ing">A CSV representing up to 3 ingredients to exclude  (Powersearch-capable plan required)</param>
		/// <param name="cuisine">Limit to a specific cuisine. Cooks can enter anything free-form, but the few dozen preconfigured values are Afghan,African,American,American-South,Asian,Australian,Brazilian,Cajun,Canadian,Caribbean,Chinese,Croatian,Cuban,Dessert,Eastern European,English,French,German,Greek,Hawaiian,Hungarian,India,Indian,Irish,Italian,Japanese,Jewish,Korean,Latin,Mediterranean,Mexican,Middle Eastern,Moroccan,Polish,Russian,Scandanavian,Seafood,Southern,Southwestern,Spanish,Tex-Mex,Thai,Vegan,Vegetarian,Vietnamese</param>
		/// <param name="userset">If set to a given username, it'll force the search to filter to just that username</param>
		/// <param name="servingsMin">Limit to yield of a given number size or greater. Note that cooks usually enter recipes by Servings, but sometimes they are posted by "dozen", etc. This parameter simply specifies the minimum number for that value entered in "yield."</param>
		/// <param name="totalMins">Optional. If supplied, will restrict results to recipes that can be made in {totalMins} or less. (Convert "1 hour, 15 minutes" to 75 before passing in.)</param>
		/// <param name="maxIngredients">Optional. If supplied, will restrict results to recipes that can be made with {maxIngredients} ingredients or less</param>
		/// <param name="minIngredients">Optional. If supplied, will restrict results to recipes that have at least {minIngredients}</param>
		/// <param name="vtn">when set to 1, limit to vegetarian (Powersearch-capable plan required)</param>
		/// <param name="vgn">when set to 1, limit to vegan (Powersearch-capable plan required)</param>
		/// <param name="chs">when set to 1, limit to contains-cheese (Powersearch-capable plan required)</param>
		/// <param name="glf">when set to 1, limit to gluten-free (Powersearch-capable plan required)</param>
		/// <param name="ntf">when set to 1, limit to nut-free (Powersearch-capable plan required)</param>
		/// <param name="dyf">when set to 1, limit to dairy-free (Powersearch-capable plan required)</param>
		/// <param name="sff">when set to 1, limit to seafood-free (Powersearch-capable plan required)</param>
		/// <param name="slf">when set to 1, limit to shellfish-free (Powersearch-capable plan required)</param>
		/// <param name="tnf">when set to 1, limit to tree-nut free (Powersearch-capable plan required)</param>
		/// <param name="wmf">when set to 1, limit to white-meat free (Powersearch-capable plan required)</param>
		/// <param name="rmf">when set to 1, limit to red-meat free (Powersearch-capable plan required)</param>
		/// <param name="cps">when set to 1, recipe contains pasta, set to 0 means contains no pasta (Powersearch-capable plan required)</param>
		/// <param name="champion">optional. When set to 1, this will limit search results to "best of" recipes as determined by various internal editorial and programmatic algorithms. For the most comprehensive results, don't include this parameter.</param>
		/// <param name="synonyms">optional, default is false. When set to true, BigOven will attempt to apply synonyms in search (e.g., excluding pork will also exclude bacon)</param>
		/// <returns>OK</returns>
		public async Task<BigOvenModelAPI2RecipeSearchResult> RecipesTop25randomGetByAny_kwAndFolderAndCollAndFilterAndTitle_kwAndUserIdAndUsernameAndTokenAndPhotosAndBoostmineAndInclude_catAndExclude_catAndInclude_primarycatAndExclude_primarycatAndInclude_ingAndExclude_ingAndCuisineAndDbAndUsersetAndServingsMinAndTotalMinsAndMaxIngredientsAndMinIngredientsAndVtnAndVgnAndChsAndGlfAndNtfAndDyfAndSffAndSlfAndTnfAndWmfAndRmfAndCpsAndChampionAndSynonymsAsync(
					string any_kw, 
					string folder, 
					int coll, 
					string filter, 
					string title_kw, 
					int userId, 
					string username, 
					string token, 
					bool photos, 
					bool boostmine, 
					string include_cat, 
					string exclude_cat, 
					string include_primarycat, 
					string exclude_primarycat, 
					string include_ing, 
					string exclude_ing, 
					string cuisine, 
					string db, 
					string userset, 
					double servingsMin, 
					int totalMins, 
					int maxIngredients, 
					int minIngredients, 
					int vtn, 
					int vgn, 
					int chs, 
					int glf, 
					int ntf, 
					int dyf, 
					int sff, 
					int slf, 
					int tnf, 
					int wmf, 
					int rmf, 
					int cps, 
					int champion, 
					bool synonyms, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipes/top25random?any_kw=" + (any_kw==null? "" : System.Uri.EscapeDataString(any_kw))+"&folder=" + (folder==null? "" : System.Uri.EscapeDataString(folder))+"&coll="+coll+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&title_kw=" + (title_kw==null? "" : System.Uri.EscapeDataString(title_kw))+"&userId="+userId+"&username=" + (username==null? "" : System.Uri.EscapeDataString(username))+"&token=" + (token==null? "" : System.Uri.EscapeDataString(token))+"&photos="+photos+"&boostmine="+boostmine+"&include_cat=" + (include_cat==null? "" : System.Uri.EscapeDataString(include_cat))+"&exclude_cat=" + (exclude_cat==null? "" : System.Uri.EscapeDataString(exclude_cat))+"&include_primarycat=" + (include_primarycat==null? "" : System.Uri.EscapeDataString(include_primarycat))+"&exclude_primarycat=" + (exclude_primarycat==null? "" : System.Uri.EscapeDataString(exclude_primarycat))+"&include_ing=" + (include_ing==null? "" : System.Uri.EscapeDataString(include_ing))+"&exclude_ing=" + (exclude_ing==null? "" : System.Uri.EscapeDataString(exclude_ing))+"&cuisine=" + (cuisine==null? "" : System.Uri.EscapeDataString(cuisine))+"&db=" + (db==null? "" : System.Uri.EscapeDataString(db))+"&userset=" + (userset==null? "" : System.Uri.EscapeDataString(userset))+"&servingsMin="+servingsMin+"&totalMins="+totalMins+"&maxIngredients="+maxIngredients+"&minIngredients="+minIngredients+"&vtn="+vtn+"&vgn="+vgn+"&chs="+chs+"&glf="+glf+"&ntf="+ntf+"&dyf="+dyf+"&sff="+sff+"&slf="+slf+"&tnf="+tnf+"&wmf="+wmf+"&rmf="+rmf+"&cps="+cps+"&champion="+champion+"&synonyms="+synonyms;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BigOvenModelAPI2RecipeSearchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Same as GET recipe but also includes the recipe videos (if any)
		/// Recipes_idGetByPrefetch recipes/{id}
		/// </summary>
		/// <param name="id">The Recipe ID to retrieve</param>
		/// <param name="prefetch">The prefetch.</param>
		/// <returns>OK</returns>
		public async Task<API2ModelsRecipesRecipeResponse> Recipes_idGetByPrefetchAsync(int id, bool prefetch, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "recipes/"+id+"?prefetch="+prefetch;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<API2ModelsRecipesRecipeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
