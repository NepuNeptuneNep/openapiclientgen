//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectDominantLanguageResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchDetectDominantLanguageItemResult[] ResultList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchItemError[] ErrorList { get; set; }
	}
	
	/// <summary>
	/// The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectDominantLanguageItemResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DominantLanguage[] Languages { get; set; }
	}
	
	/// <summary>
	/// Returns the code for the dominant language in the input text and the level of confidence that Amazon Comprehend has in the accuracy of the detection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DominantLanguage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
	}
	
	/// <summary>
	/// Describes an error that occurred while processing a document in a batch. The operation returns on <code>BatchItemError</code> object for each document that contained an error.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchItemError
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectDominantLanguageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TextList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextSizeLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchSizeLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectEntitiesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchDetectEntitiesItemResult[] ResultList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchItemError[] ErrorList { get; set; }
	}
	
	/// <summary>
	/// The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectEntitiesItemResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Entity[] Entities { get; set; }
	}
	
	/// <summary>
	/// <p>Provides information about an entity. </p> <p> </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Entity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BlockReference[] BlockReferences { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORGANIZATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMERCIAL_ITEM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUANTITY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TITLE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 8,
	}
	
	/// <summary>
	/// A reference to a block. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BlockReference
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string BlockId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ChildBlock[] ChildBlocks { get; set; }
	}
	
	/// <summary>
	/// Nested block contained within a block.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChildBlock
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ChildBlockId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectEntitiesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TextList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ar = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ja = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ko = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="zh-TW")]
		zhMinusTW = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnsupportedLanguageException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectKeyPhrasesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchDetectKeyPhrasesItemResult[] ResultList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchItemError[] ErrorList { get; set; }
	}
	
	/// <summary>
	/// The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectKeyPhrasesItemResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public KeyPhrase[] KeyPhrases { get; set; }
	}
	
	/// <summary>
	/// Describes a key noun phrase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeyPhrase
	{
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectKeyPhrasesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TextList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectSentimentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchDetectSentimentItemResult[] ResultList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchItemError[] ErrorList { get; set; }
	}
	
	/// <summary>
	/// The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectSentimentItemResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SentimentType Sentiment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SentimentScore SentimentScore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SentimentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSITIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEGATIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEUTRAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIXED = 3,
	}
	
	/// <summary>
	/// Describes the level of confidence that Amazon Comprehend has in the accuracy of its detection of sentiments.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SentimentScore
	{
		
		[System.Runtime.Serialization.DataMember()]
		public float Positive { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Negative { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Neutral { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Mixed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectSentimentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TextList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectSyntaxResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchDetectSyntaxItemResult[] ResultList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchItemError[] ErrorList { get; set; }
	}
	
	/// <summary>
	/// The result of calling the operation. The operation returns one object that is successfully processed by the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectSyntaxItemResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SyntaxToken[] SyntaxTokens { get; set; }
	}
	
	/// <summary>
	/// Represents a work in the input text that was recognized and assigned a part of speech. There is one syntax token record for each word in the source text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SyntaxToken
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TokenId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PartOfSpeechTag PartOfSpeech { get; set; }
	}
	
	/// <summary>
	/// Identifies the part of speech represented by the token and gives the confidence that Amazon Comprehend has that the part of speech was correctly identified. For more information about the parts of speech that Amazon Comprehend can identify, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-syntax.html">Syntax</a> in the Comprehend Developer Guide. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartOfSpeechTag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PartOfSpeechTagType Tag { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PartOfSpeechTagType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADJ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUX = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONJ = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CCONJ = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DET = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTJ = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOUN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUM = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		O = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PART = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRON = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROPN = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUNCT = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCONJ = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYM = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERB = 17,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectSyntaxRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TextList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SyntaxLanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SyntaxLanguageCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		es = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		de = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		it = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pt = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectTargetedSentimentResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchDetectTargetedSentimentItemResult[] ResultList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BatchItemError[] ErrorList { get; set; }
	}
	
	/// <summary>
	/// Analysis results for one of the documents in the batch.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectTargetedSentimentItemResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Index { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetedSentimentEntity[] Entities { get; set; }
	}
	
	/// <summary>
	/// <p>Information about one of the entities found by targeted sentiment analysis.</p> <p>For more information about targeted sentiment, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html">Targeted sentiment</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetedSentimentEntity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DescriptiveMentionIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetedSentimentMention[] Mentions { get; set; }
	}
	
	/// <summary>
	/// <p>Information about one mention of an entity. The mention information includes the location of the mention in the text and the sentiment of the mention.</p> <p>For more information about targeted sentiment, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html">Targeted sentiment</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetedSentimentMention
	{
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float GroupScore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TargetedSentimentEntityType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public MentionSentiment MentionSentiment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TargetedSentimentEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOCATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORGANIZATION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FACILITY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRAND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMERCIAL_ITEM = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOVIE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUSIC = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOK = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOFTWARE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GAME = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL_TITLE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUANTITY = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATTRIBUTE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 16,
	}
	
	/// <summary>
	/// <p>Contains the sentiment and sentiment score for one mention of an entity.</p> <p>For more information about targeted sentiment, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html">Targeted sentiment</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MentionSentiment
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SentimentType Sentiment { get; set; }
		
		/// <summary>
		/// Describes the level of confidence that Amazon Comprehend has in the accuracy of its detection of sentiments.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SentimentScore SentimentScore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDetectTargetedSentimentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TextList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClassifyDocumentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentClass[] Classes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentLabel[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentMetadata DocumentMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentTypeListItem[] DocumentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ErrorsListItem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public WarningsListItem[] Warnings { get; set; }
	}
	
	/// <summary>
	/// Specifies the class that categorizes the document being analyzed
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentClass
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Page { get; set; }
	}
	
	/// <summary>
	/// Specifies one of the label or labels that categorize the document being analyzed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentLabel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Page { get; set; }
	}
	
	/// <summary>
	/// Information about the document, discovered during text extraction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Pages { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ExtractedCharactersListItem[] ExtractedCharacters { get; set; }
	}
	
	/// <summary>
	/// Array of the number of characters extracted from each page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExtractedCharactersListItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	/// <summary>
	/// Document type for each page in the document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentTypeListItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DocumentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_PDF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCANNED_PDF = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MS_WORD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMAGE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAIN_TEXT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXTRACT_DETECT_DOCUMENT_TEXT_JSON = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXTRACT_ANALYZE_DOCUMENT_JSON = 6,
	}
	
	/// <summary>
	/// <p>Text extraction encountered one or more page-level errors in the input document.</p> <p>The <code>ErrorCode</code> contains one of the following values:</p> <ul> <li> <p>TEXTRACT_BAD_PAGE - Amazon Textract cannot read the page. For more information about page limits in Amazon Textract, see <a href="https://docs.aws.amazon.com/textract/latest/dg/limits-document.html"> Page Quotas in Amazon Textract</a>.</p> </li> <li> <p>TEXTRACT_PROVISIONED_THROUGHPUT_EXCEEDED - The number of requests exceeded your throughput limit. For more information about throughput quotas in Amazon Textract, see <a href="https://docs.aws.amazon.com/textract/latest/dg/limits-quotas-explained.html"> Default quotas in Amazon Textract</a>.</p> </li> <li> <p>PAGE_CHARACTERS_EXCEEDED - Too many text characters on the page (10,000 characters maximum).</p> </li> <li> <p>PAGE_SIZE_EXCEEDED - The maximum page size is 10 MB.</p> </li> <li> <p>INTERNAL_SERVER_ERROR - The request encountered a service issue. Try the API request again.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorsListItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PageBasedErrorCode ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ErrorMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PageBasedErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXTRACT_BAD_PAGE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXTRACT_PROVISIONED_THROUGHPUT_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAGE_CHARACTERS_EXCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAGE_SIZE_EXCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_SERVER_ERROR = 4,
	}
	
	/// <summary>
	/// <p>The system identified one of the following warnings while processing the input document:</p> <ul> <li> <p>The document to classify is plain text, but the classifier is a native model.</p> </li> <li> <p>The document to classify is semi-structured, but the classifier is a plain-text model.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WarningsListItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PageBasedWarningCode WarnCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string WarnMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PageBasedWarningCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFERENCING_PLAINTEXT_WITH_NATIVE_TRAINED_MODEL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFERENCING_NATIVE_DOCUMENT_WITH_PLAINTEXT_TRAINED_MODEL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClassifyDocumentRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Bytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentReaderConfig DocumentReaderConfig { get; set; }
	}
	
	/// <summary>
	/// <p>Provides configuration parameters to override the default actions for extracting text from PDF documents and image files. </p> <p> By default, Amazon Comprehend performs the following actions to extract text from files, based on the input file type: </p> <ul> <li> <p> <b>Word files</b> - Amazon Comprehend parser extracts the text. </p> </li> <li> <p> <b>Digital PDF files</b> - Amazon Comprehend parser extracts the text. </p> </li> <li> <p> <b>Image files and scanned PDF files</b> - Amazon Comprehend uses the Amazon Textract <code>DetectDocumentText</code> API to extract the text. </p> </li> </ul> <p> <code>DocumentReaderConfig</code> does not apply to plain text files or Word files.</p> <p> For image files and PDF documents, you can override these default actions using the fields listed below. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/idp-set-textract-options.html"> Setting text extraction options</a> in the Comprehend Developer Guide. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentReaderConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DocumentReadAction DocumentReadAction { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentReadMode DocumentReadMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentReadFeatureTypes[] FeatureTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DocumentReadAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXTRACT_DETECT_DOCUMENT_TEXT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXTRACT_ANALYZE_DOCUMENT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DocumentReadMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORCE_DOCUMENT_READ_ACTION = 1,
	}
	
	/// <summary>
	/// <p>Specifies the type of Amazon Textract features to apply. If you chose <code>TEXTRACT_ANALYZE_DOCUMENT</code> as the read action, you must specify one or both of the following values:</p> <ul> <li> <p> <code>TABLES</code> - Returns additional information about any tables that are detected in the input document. </p> </li> <li> <p> <code>FORMS</code> - Returns additional information about any forms that are detected in the input document. </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DocumentReadFeatureTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TABLES = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORMS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContainsPiiEntitiesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EntityLabel[] Labels { get; set; }
	}
	
	/// <summary>
	/// Specifies one of the label or labels that categorize the personally identifiable information (PII) entity being analyzed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityLabel
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PiiEntityType Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PiiEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK_ACCOUNT_NUMBER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK_ROUTING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDIT_DEBIT_NUMBER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDIT_DEBIT_CVV = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDIT_DEBIT_EXPIRY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EMAIL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDRESS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PHONE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSN = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_TIME = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSPORT_NUMBER = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRIVER_ID = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		URL = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USERNAME = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASSWORD = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_ACCESS_KEY = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS_SECRET_KEY = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IP_ADDRESS = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAC_ADDRESS = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LICENSE_PLATE = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VEHICLE_IDENTIFICATION_NUMBER = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UK_NATIONAL_INSURANCE_NUMBER = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_SOCIAL_INSURANCE_NUMBER = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PERMANENT_ACCOUNT_NUMBER = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_NREGA = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNATIONAL_BANK_ACCOUNT_NUMBER = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SWIFT_CODE = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UK_NATIONAL_HEALTH_SERVICE_NUMBER = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CA_HEALTH_NUMBER = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_AADHAAR = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_VOTER_NUMBER = 36,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContainsPiiEntitiesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDatasetResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DatasetArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDatasetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetType DatasetType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DatasetInputDataConfig InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatasetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST = 1,
	}
	
	/// <summary>
	/// Specifies the format and location of the input data for the dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetInputDataConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetAugmentedManifestsListItem[] AugmentedManifests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetDataFormat DataFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetDocumentClassifierInputDataConfig DocumentClassifierInputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetEntityRecognizerInputDataConfig EntityRecognizerInputDataConfig { get; set; }
	}
	
	/// <summary>
	/// An augmented manifest file that provides training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetAugmentedManifestsListItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AttributeNames { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AnnotationDataS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceDocumentsS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AugmentedManifestsDocumentTypeFormat DocumentType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AugmentedManifestsDocumentTypeFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAIN_TEXT_DOCUMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEMI_STRUCTURED_DOCUMENT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatasetDataFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPREHEND_CSV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUGMENTED_MANIFEST = 1,
	}
	
	/// <summary>
	/// <p>Describes the dataset input data configuration for a document classifier model.</p> <p>For more information on how the input file is formatted, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/prep-classifier-data.html">Preparing training data</a> in the Comprehend Developer Guide. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetDocumentClassifierInputDataConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LabelDelimiter { get; set; }
	}
	
	/// <summary>
	/// Specifies the format and location of the input data. You must provide either the <code>Annotations</code> parameter or the <code>EntityList</code> parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetEntityRecognizerInputDataConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetEntityRecognizerAnnotations Annotations { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DatasetEntityRecognizerDocuments Documents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetEntityRecognizerEntityList EntityList { get; set; }
	}
	
	/// <summary>
	/// Describes the annotations associated with a entity recognizer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetEntityRecognizerAnnotations
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
	}
	
	/// <summary>
	/// Describes the documents submitted with a dataset for an entity recognizer model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetEntityRecognizerDocuments
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputFormat InputFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_DOC_PER_FILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_DOC_PER_LINE = 1,
	}
	
	/// <summary>
	/// <p>Describes the dataset entity list for an entity recognizer model.</p> <p>For more information on how the input file is formatted, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/prep-training-data-cer.html">Preparing training data</a> in the Comprehend Developer Guide. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetEntityRecognizerEntityList
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
	}
	
	/// <summary>
	/// A key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with the key-value pair ‘Department’:’Sales’ might be added to a resource to indicate its use by a particular department. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceInUseException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TooManyTagsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TooManyRequestsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDocumentClassifierResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DocumentClassifierArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDocumentClassifierRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DocumentClassifierName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DocumentClassifierInputDataConfig InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentClassifierOutputDataConfig OutputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentClassifierMode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPolicy { get; set; }
	}
	
	/// <summary>
	/// <p>The input properties for training a document classifier. </p> <p>For more information on how the input file is formatted, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/prep-classifier-data.html">Preparing training data</a> in the Comprehend Developer Guide. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentClassifierInputDataConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetDataFormat DataFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TestS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LabelDelimiter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AugmentedManifestsListItem[] AugmentedManifests { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AugmentedManifestsDocumentTypeFormat DocumentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentClassifierDocuments Documents { get; set; }
		
		/// <summary>
		/// <p>Provides configuration parameters to override the default actions for extracting text from PDF documents and image files. </p> <p> By default, Amazon Comprehend performs the following actions to extract text from files, based on the input file type: </p> <ul> <li> <p> <b>Word files</b> - Amazon Comprehend parser extracts the text. </p> </li> <li> <p> <b>Digital PDF files</b> - Amazon Comprehend parser extracts the text. </p> </li> <li> <p> <b>Image files and scanned PDF files</b> - Amazon Comprehend uses the Amazon Textract <code>DetectDocumentText</code> API to extract the text. </p> </li> </ul> <p> <code>DocumentReaderConfig</code> does not apply to plain text files or Word files.</p> <p> For image files and PDF documents, you can override these default actions using the fields listed below. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/idp-set-textract-options.html"> Setting text extraction options</a> in the Comprehend Developer Guide. </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public DocumentReaderConfig DocumentReaderConfig { get; set; }
	}
	
	/// <summary>
	/// An augmented manifest file that provides training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AugmentedManifestsListItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetType Split { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AttributeNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AnnotationDataS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceDocumentsS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AugmentedManifestsDocumentTypeFormat DocumentType { get; set; }
	}
	
	/// <summary>
	/// The location of the training documents. This parameter is required in a request to create a native classifier model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentClassifierDocuments
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TestS3Uri { get; set; }
	}
	
	/// <summary>
	/// Provide the location for output data from a custom classifier job. This field is mandatory if you are training a native classifier model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentClassifierOutputDataConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelStatsS3Prefix { get; set; }
	}
	
	/// <summary>
	///  Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for the job. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon VPC</a>. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VpcConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] SecurityGroupIds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Subnets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DocumentClassifierMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_CLASS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MULTI_LABEL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KmsKeyValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateEndpointRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int DesiredInferenceUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateEntityRecognizerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EntityRecognizerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateEntityRecognizerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecognizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EntityRecognizerInputDataConfig InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelPolicy { get; set; }
	}
	
	/// <summary>
	/// Specifies the format and location of the input data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityRecognizerInputDataConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetDataFormat DataFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EntityTypesListItem[] EntityTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityRecognizerDocuments Documents { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityRecognizerAnnotations Annotations { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityRecognizerEntityList EntityList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AugmentedManifestsListItem[] AugmentedManifests { get; set; }
	}
	
	/// <summary>
	/// An entity type within a labeled training dataset that Amazon Comprehend uses to train a custom entity recognizer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityTypesListItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Describes the training documents submitted with an entity recognizer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityRecognizerDocuments
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TestS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputFormat InputFormat { get; set; }
	}
	
	/// <summary>
	/// Describes the annotations associated with a entity recognizer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityRecognizerAnnotations
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TestS3Uri { get; set; }
	}
	
	/// <summary>
	/// Describes the entity list submitted with an entity recognizer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityRecognizerEntityList
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFlywheelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActiveModelArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFlywheelRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActiveModelArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaskConfig TaskConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelType ModelType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataLakeS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSecurityConfig DataSecurityConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Configuration about the custom classifier associated with the flywheel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentClassificationConfig DocumentClassificationConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityRecognitionConfig EntityRecognitionConfig { get; set; }
	}
	
	/// <summary>
	/// Configuration required for a custom classification model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentClassificationConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DocumentClassifierMode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Labels { get; set; }
	}
	
	/// <summary>
	/// Configuration required for an entity recognition model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityRecognitionConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EntityTypesListItem[] EntityTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ModelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT_CLASSIFIER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_RECOGNIZER = 1,
	}
	
	/// <summary>
	/// Data security configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSecurityConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataLakeKmsKeyId { get; set; }
		
		/// <summary>
		///  Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for the job. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon VPC</a>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDocumentClassifierResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDocumentClassifierRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DocumentClassifierArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteEndpointResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteEndpointRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteEntityRecognizerResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteEntityRecognizerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EntityRecognizerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFlywheelResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFlywheelRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResourcePolicyResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteResourcePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyRevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDatasetResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetProperties DatasetProperties { get; set; }
	}
	
	/// <summary>
	/// Properties associated with the dataset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DatasetArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatasetName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetType DatasetType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DatasetS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfDocuments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DatasetStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDatasetRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DatasetArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDocumentClassificationJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentClassificationJobProperties DocumentClassificationJobProperties { get; set; }
	}
	
	/// <summary>
	/// Provides information about a document classification job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentClassificationJobProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DocumentClassifierArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP_REQUESTED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 5,
	}
	
	/// <summary>
	/// The input properties for an inference job. The document reader config field applies only to non-text inputs for custom analysis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InputDataConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputFormat InputFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentReaderConfig DocumentReaderConfig { get; set; }
	}
	
	/// <summary>
	/// <p>Provides configuration parameters for the output of inference jobs.</p> <p/>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OutputDataConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDocumentClassificationJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class JobNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDocumentClassifierResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentClassifierProperties DocumentClassifierProperties { get; set; }
	}
	
	/// <summary>
	/// Provides information about a document classifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentClassifierProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DocumentClassifierArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TrainingStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TrainingEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentClassifierInputDataConfig InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentClassifierOutputDataConfig OutputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClassifierMetadata ClassifierMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentClassifierMode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceModelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ModelStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBMITTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAINING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP_REQUESTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_ERROR = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAINED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAINED_WITH_WARNING = 7,
	}
	
	/// <summary>
	/// Provides information about a document classifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClassifierMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfLabels { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfTrainedDocuments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfTestDocuments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ClassifierEvaluationMetrics EvaluationMetrics { get; set; }
	}
	
	/// <summary>
	/// Describes the result metrics for the test data associated with an documentation classifier.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClassifierEvaluationMetrics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Accuracy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Precision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Recall { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> F1Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MicroPrecision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MicroRecall { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> MicroF1Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> HammingLoss { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDocumentClassifierRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DocumentClassifierArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDominantLanguageDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DominantLanguageDetectionJobProperties DominantLanguageDetectionJobProperties { get; set; }
	}
	
	/// <summary>
	/// Provides information about a dominant language detection job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DominantLanguageDetectionJobProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDominantLanguageDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointProperties EndpointProperties { get; set; }
	}
	
	/// <summary>
	/// Specifies information about the specified endpoint. For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DesiredModelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DesiredInferenceUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> CurrentInferenceUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DesiredDataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EndpointStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_SERVICE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeEndpointRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeEntitiesDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EntitiesDetectionJobProperties EntitiesDetectionJobProperties { get; set; }
	}
	
	/// <summary>
	/// Provides information about an entities detection job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntitiesDetectionJobProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EntityRecognizerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeEntitiesDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeEntityRecognizerResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EntityRecognizerProperties EntityRecognizerProperties { get; set; }
	}
	
	/// <summary>
	/// Describes information about an entity recognizer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityRecognizerProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string EntityRecognizerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TrainingStartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset TrainingEndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityRecognizerInputDataConfig InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityRecognizerMetadata RecognizerMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string SourceModelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityRecognizerOutputDataConfig OutputDataConfig { get; set; }
	}
	
	/// <summary>
	/// Detailed information about an entity recognizer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityRecognizerMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfTrainedDocuments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfTestDocuments { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityRecognizerEvaluationMetrics EvaluationMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityRecognizerMetadataEntityTypesListItem[] EntityTypes { get; set; }
	}
	
	/// <summary>
	/// Detailed information about the accuracy of an entity recognizer. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityRecognizerEvaluationMetrics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Precision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Recall { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> F1Score { get; set; }
	}
	
	/// <summary>
	/// Individual item from the list of entity types in the metadata of an entity recognizer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityRecognizerMetadataEntityTypesListItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityTypesEvaluationMetrics EvaluationMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfTrainMentions { get; set; }
	}
	
	/// <summary>
	/// Detailed information about the accuracy of an entity recognizer for a specific entity type. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityTypesEvaluationMetrics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Precision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> Recall { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> F1Score { get; set; }
	}
	
	/// <summary>
	/// Output data configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityRecognizerOutputDataConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelStatsS3Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeEntityRecognizerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EntityRecognizerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeEventsDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventsDetectionJobProperties EventsDetectionJobProperties { get; set; }
	}
	
	/// <summary>
	/// Provides information about an events detection job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventsDetectionJobProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] TargetEventTypes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeEventsDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeFlywheelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FlywheelProperties FlywheelProperties { get; set; }
	}
	
	/// <summary>
	/// The flywheel properties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FlywheelProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActiveModelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TaskConfig TaskConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataLakeS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DataSecurityConfig DataSecurityConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FlywheelStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelType ModelType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestFlywheelIteration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FlywheelStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeFlywheelRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeFlywheelIterationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FlywheelIterationProperties FlywheelIterationProperties { get; set; }
	}
	
	/// <summary>
	/// The configuration properties of a flywheel iteration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FlywheelIterationProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelIterationId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FlywheelIterationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EvaluatedModelArn { get; set; }
		
		/// <summary>
		/// The evaluation metrics associated with the evaluated model.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public FlywheelModelEvaluationMetrics EvaluatedModelMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string TrainedModelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FlywheelModelEvaluationMetrics TrainedModelMetrics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EvaluationManifestS3Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FlywheelIterationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAINING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVALUATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP_REQUESTED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOPPED = 5,
	}
	
	/// <summary>
	/// The evaluation metrics associated with the evaluated model.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FlywheelModelEvaluationMetrics
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AverageF1Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AveragePrecision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AverageRecall { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Double> AverageAccuracy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeFlywheelIterationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelIterationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeKeyPhrasesDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public KeyPhrasesDetectionJobProperties KeyPhrasesDetectionJobProperties { get; set; }
	}
	
	/// <summary>
	/// Provides information about a key phrases detection job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeyPhrasesDetectionJobProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeKeyPhrasesDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePiiEntitiesDetectionJobResponse
	{
		
		/// <summary>
		/// Provides information about a PII entities detection job.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public PiiEntitiesDetectionJobProperties PiiEntitiesDetectionJobProperties { get; set; }
	}
	
	/// <summary>
	/// Provides information about a PII entities detection job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PiiEntitiesDetectionJobProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PiiOutputDataConfig OutputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RedactionConfig RedactionConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PiiEntitiesDetectionMode Mode { get; set; }
	}
	
	/// <summary>
	/// Provides configuration parameters for the output of PII entity detection jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PiiOutputDataConfig
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string KmsKeyId { get; set; }
	}
	
	/// <summary>
	/// Provides configuration parameters for PII entity redaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RedactionConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PiiEntityType[] PiiEntityTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PiiEntitiesDetectionMaskMode MaskMode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MaskCharacter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PiiEntitiesDetectionMaskMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MASK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPLACE_WITH_PII_ENTITY_TYPE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PiiEntitiesDetectionMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLY_REDACTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLY_OFFSETS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribePiiEntitiesDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeResourcePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourcePolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyRevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeResourcePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSentimentDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SentimentDetectionJobProperties SentimentDetectionJobProperties { get; set; }
	}
	
	/// <summary>
	/// Provides information about a sentiment detection job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SentimentDetectionJobProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSentimentDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTargetedSentimentDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetedSentimentDetectionJobProperties TargetedSentimentDetectionJobProperties { get; set; }
	}
	
	/// <summary>
	/// Provides information about a targeted sentiment detection job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetedSentimentDetectionJobProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// The input properties for an inference job. The document reader config field applies only to non-text inputs for custom analysis.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// <p>Provides configuration parameters for the output of inference jobs.</p> <p/>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		/// <summary>
		///  Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for the job. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon VPC</a>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTargetedSentimentDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTopicsDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TopicsDetectionJobProperties TopicsDetectionJobProperties { get; set; }
	}
	
	/// <summary>
	/// Provides information about a topic detection job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TopicsDetectionJobProperties
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfTopics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeTopicsDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectDominantLanguageResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DominantLanguage[] Languages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectDominantLanguageRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectEntitiesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Entity[] Entities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentMetadata DocumentMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentTypeListItem[] DocumentType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Block[] Blocks { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ErrorsListItem[] Errors { get; set; }
	}
	
	/// <summary>
	/// <p>Information about each word or line of text in the input document.</p> <p>For additional information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/API_Block.html">Block</a> in the Amazon Textract API reference.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Block
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public BlockType BlockType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Geometry Geometry { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RelationshipsListItem[] Relationships { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BlockType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORD = 1,
	}
	
	/// <summary>
	/// <p>Information about the location of items on a document page.</p> <p>For additional information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/API_Geometry.html">Geometry</a> in the Amazon Textract API reference.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Geometry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public BoundingBox BoundingBox { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Point[] Polygon { get; set; }
	}
	
	/// <summary>
	/// <p>The bounding box around the detected page or around an element on a document page. The left (x-coordinate) and top (y-coordinate) are coordinates that represent the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). </p> <p>For additional information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/API_BoundingBox.html">BoundingBox</a> in the Amazon Textract API reference.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BoundingBox
	{
		
		[System.Runtime.Serialization.DataMember()]
		public float Height { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Left { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Top { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Width { get; set; }
	}
	
	/// <summary>
	/// <p>The X and Y coordinates of a point on a document page.</p> <p>For additional information, see <a href="https://docs.aws.amazon.com/textract/latest/dg/API_Point.html">Point</a> in the Amazon Textract API reference.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Point
	{
		
		[System.Runtime.Serialization.DataMember()]
		public float X { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public float Y { get; set; }
	}
	
	/// <summary>
	/// List of child blocks for the current block.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RelationshipsListItem
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Ids { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RelationshipType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RelationshipType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectEntitiesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Bytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentReaderConfig DocumentReaderConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectKeyPhrasesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public KeyPhrase[] KeyPhrases { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectKeyPhrasesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectPiiEntitiesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PiiEntity[] Entities { get; set; }
	}
	
	/// <summary>
	/// Provides information about a PII entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PiiEntity
	{
		
		[System.Runtime.Serialization.DataMember()]
		public float Score { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PiiEntityType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> BeginOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> EndOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectPiiEntitiesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectSentimentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SentimentType Sentiment { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SentimentScore SentimentScore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectSentimentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectSyntaxResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SyntaxToken[] SyntaxTokens { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectSyntaxRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SyntaxLanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectTargetedSentimentResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetedSentimentEntity[] Entities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetectTargetedSentimentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportModelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImportModelRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SourceModelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDatasetsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetProperties[] DatasetPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDatasetsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Filter the datasets based on creation time or dataset status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatasetFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DatasetType DatasetType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidFilterException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDocumentClassificationJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentClassificationJobProperties[] DocumentClassificationJobPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDocumentClassificationJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentClassificationJobFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Provides information for filtering a list of document classification jobs. For more information, see the operation. You can provide only one filter parameter in each request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentClassificationJobFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDocumentClassifierSummariesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentClassifierSummary[] DocumentClassifierSummariesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Describes information about a document classifier and its versions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentClassifierSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DocumentClassifierName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LatestVersionCreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelStatus LatestVersionStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDocumentClassifierSummariesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDocumentClassifiersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentClassifierProperties[] DocumentClassifierPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDocumentClassifiersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DocumentClassifierFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Provides information for filtering a list of document classifiers. You can only specify one filtering parameter in a request. For more information, see the <code>ListDocumentClassifiers</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentClassifierFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ModelStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DocumentClassifierName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDominantLanguageDetectionJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DominantLanguageDetectionJobProperties[] DominantLanguageDetectionJobPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDominantLanguageDetectionJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public DominantLanguageDetectionJobFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DominantLanguageDetectionJobFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEndpointsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointProperties[] EndpointPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEndpointsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// The filter used to determine which endpoints are returned. You can filter jobs on their name, model, status, or the date and time that they were created. You can only set one filter at a time. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndpointFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EndpointStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEntitiesDetectionJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EntitiesDetectionJobProperties[] EntitiesDetectionJobPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEntitiesDetectionJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EntitiesDetectionJobFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntitiesDetectionJobFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEntityRecognizerSummariesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EntityRecognizerSummary[] EntityRecognizerSummariesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Describes the information about an entity recognizer and its versions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityRecognizerSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RecognizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfVersions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LatestVersionCreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestVersionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelStatus LatestVersionStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEntityRecognizerSummariesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEntityRecognizersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EntityRecognizerProperties[] EntityRecognizerPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEntityRecognizersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EntityRecognizerFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Provides information for filtering a list of entity recognizers. You can only specify one filtering parameter in a request. For more information, see the <code>ListEntityRecognizers</code> operation./&gt;
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EntityRecognizerFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ModelStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RecognizerName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEventsDetectionJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventsDetectionJobProperties[] EventsDetectionJobPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEventsDetectionJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EventsDetectionJobFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Provides information for filtering a list of event detection jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventsDetectionJobFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFlywheelIterationHistoryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FlywheelIterationProperties[] FlywheelIterationPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFlywheelIterationHistoryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FlywheelIterationFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Filter the flywheel iterations based on creation time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FlywheelIterationFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFlywheelsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FlywheelSummary[] FlywheelSummaryList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Flywheel summary information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FlywheelSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActiveModelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataLakeS3Uri { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public FlywheelStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ModelType ModelType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastModifiedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LatestFlywheelIteration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFlywheelsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FlywheelFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Filter the flywheels based on creation time or flywheel status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FlywheelFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FlywheelStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreationTimeBefore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListKeyPhrasesDetectionJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public KeyPhrasesDetectionJobProperties[] KeyPhrasesDetectionJobPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListKeyPhrasesDetectionJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public KeyPhrasesDetectionJobFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeyPhrasesDetectionJobFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPiiEntitiesDetectionJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PiiEntitiesDetectionJobProperties[] PiiEntitiesDetectionJobPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPiiEntitiesDetectionJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PiiEntitiesDetectionJobFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Provides information for filtering a list of PII entity detection jobs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PiiEntitiesDetectionJobFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSentimentDetectionJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SentimentDetectionJobProperties[] SentimentDetectionJobPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSentimentDetectionJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SentimentDetectionJobFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SentimentDetectionJobFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTargetedSentimentDetectionJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetedSentimentDetectionJobProperties[] TargetedSentimentDetectionJobPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTargetedSentimentDetectionJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TargetedSentimentDetectionJobFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Provides information for filtering a list of dominant language detection jobs. For more information, see the <code>ListTargetedSentimentDetectionJobs</code> operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetedSentimentDetectionJobFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTopicsDetectionJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TopicsDetectionJobProperties[] TopicsDetectionJobPropertiesList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTopicsDetectionJobsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TopicsDetectionJobFilter Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxResults { get; set; }
	}
	
	/// <summary>
	/// Provides information for filtering topic detection jobs. For more information, see .
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TopicsDetectionJobFilter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset SubmitTimeAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutResourcePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyRevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutResourcePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourcePolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyRevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartDocumentClassificationJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DocumentClassifierArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartDocumentClassificationJobRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DocumentClassifierArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartDominantLanguageDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartDominantLanguageDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartEntitiesDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EntityRecognizerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartEntitiesDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EntityRecognizerArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartEventsDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartEventsDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TargetEventTypes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartFlywheelIterationResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelIterationId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartFlywheelIterationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartKeyPhrasesDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartKeyPhrasesDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartPiiEntitiesDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartPiiEntitiesDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PiiEntitiesDetectionMode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RedactionConfig RedactionConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSentimentDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSentimentDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartTargetedSentimentDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartTargetedSentimentDetectionJobRequest
	{
		
		/// <summary>
		/// The input properties for an inference job. The document reader config field applies only to non-text inputs for custom analysis.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LanguageCode LanguageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		/// <summary>
		///  Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for the job. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon VPC</a>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartTopicsDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartTopicsDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InputDataConfig InputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public OutputDataConfig OutputDataConfig { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string JobName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfTopics { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopDominantLanguageDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopDominantLanguageDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopEntitiesDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopEntitiesDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopEventsDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopEventsDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopKeyPhrasesDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopKeyPhrasesDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopPiiEntitiesDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopPiiEntitiesDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopSentimentDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopSentimentDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopTargetedSentimentDetectionJobResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public JobStatus JobStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopTargetedSentimentDetectionJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopTrainingDocumentClassifierResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopTrainingDocumentClassifierRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DocumentClassifierArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopTrainingEntityRecognizerResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopTrainingEntityRecognizerRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EntityRecognizerArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConcurrentModificationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TooManyTagKeysException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateEndpointResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string DesiredModelArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateEndpointRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EndpointArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DesiredModelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> DesiredInferenceUnits { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DesiredDataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFlywheelResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public FlywheelProperties FlywheelProperties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFlywheelRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FlywheelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ActiveModelArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DataAccessRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateDataSecurityConfig DataSecurityConfig { get; set; }
	}
	
	/// <summary>
	/// Data security configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDataSecurityConfig
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ModelKmsKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VolumeKmsKeyId { get; set; }
		
		/// <summary>
		///  Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for the job. For more information, see <a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">Amazon VPC</a>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public VpcConfig VpcConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Split
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAIN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEST = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DocumentClassifierDataFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPREHEND_CSV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUGMENTED_MANIFEST = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DocumentClassifierDocumentTypeFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAIN_TEXT_DOCUMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEMI_STRUCTURED_DOCUMENT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EntityRecognizerDataFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPREHEND_CSV = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUGMENTED_MANIFEST = 1,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Determines the dominant language of the input text for a batch of documents. For a list of languages that Amazon Comprehend can detect, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html">Amazon Comprehend Supported Languages</a>.
		/// BatchDetectDominantLanguage #X-Amz-Target=Comprehend_20171127.BatchDetectDominantLanguage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDetectDominantLanguageResponse> BatchDetectDominantLanguageAsync(BatchDetectDominantLanguageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.BatchDetectDominantLanguage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDetectDominantLanguageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Inspects the text of a batch of documents for named entities and returns information about them. For more information about named entities, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-entities.html">Entities</a> in the Comprehend Developer Guide.
		/// BatchDetectEntities #X-Amz-Target=Comprehend_20171127.BatchDetectEntities
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDetectEntitiesResponse> BatchDetectEntitiesAsync(BatchDetectEntitiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.BatchDetectEntities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDetectEntitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Detects the key noun phrases found in a batch of documents.
		/// BatchDetectKeyPhrases #X-Amz-Target=Comprehend_20171127.BatchDetectKeyPhrases
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDetectKeyPhrasesResponse> BatchDetectKeyPhrasesAsync(BatchDetectKeyPhrasesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.BatchDetectKeyPhrases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDetectKeyPhrasesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Inspects a batch of documents and returns an inference of the prevailing sentiment, <code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>, in each one.
		/// BatchDetectSentiment #X-Amz-Target=Comprehend_20171127.BatchDetectSentiment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDetectSentimentResponse> BatchDetectSentimentAsync(BatchDetectSentimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.BatchDetectSentiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDetectSentimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Inspects the text of a batch of documents for the syntax and part of speech of the words in the document and returns information about them. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-syntax.html">Syntax</a> in the Comprehend Developer Guide.
		/// BatchDetectSyntax #X-Amz-Target=Comprehend_20171127.BatchDetectSyntax
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDetectSyntaxResponse> BatchDetectSyntaxAsync(BatchDetectSyntaxRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.BatchDetectSyntax";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDetectSyntaxResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Inspects a batch of documents and returns a sentiment analysis for each entity identified in the documents.</p> <p>For more information about targeted sentiment, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html">Targeted sentiment</a>.</p>
		/// BatchDetectTargetedSentiment #X-Amz-Target=Comprehend_20171127.BatchDetectTargetedSentiment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchDetectTargetedSentimentResponse> BatchDetectTargetedSentimentAsync(BatchDetectTargetedSentimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.BatchDetectTargetedSentiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchDetectTargetedSentimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new document classification request to analyze a single document in real-time, using a previously created and trained custom model and an endpoint.</p> <p>You can input plain text or you can upload a single-page input document (text, PDF, Word, or image). </p> <p>If the system detects errors while processing a page in the input document, the API response includes an entry in <code>Errors</code> that describes the errors.</p> <p>If the system detects a document-level error in your input document, the API returns an <code>InvalidRequestException</code> error response. For details about this exception, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/idp-inputs-sync-err.html"> Errors in semi-structured documents</a> in the Comprehend Developer Guide. </p>
		/// ClassifyDocument #X-Amz-Target=Comprehend_20171127.ClassifyDocument
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ClassifyDocumentResponse> ClassifyDocumentAsync(ClassifyDocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ClassifyDocument";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClassifyDocumentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Analyzes input text for the presence of personally identifiable information (PII) and returns the labels of identified PII entity types such as name, address, bank account number, or phone number.
		/// ContainsPiiEntities #X-Amz-Target=Comprehend_20171127.ContainsPiiEntities
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ContainsPiiEntitiesResponse> ContainsPiiEntitiesAsync(ContainsPiiEntitiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ContainsPiiEntities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ContainsPiiEntitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a dataset to upload training or test data for a model associated with a flywheel. For more information about datasets, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>.
		/// CreateDataset #X-Amz-Target=Comprehend_20171127.CreateDataset
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDatasetResponse> CreateDatasetAsync(CreateDatasetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.CreateDataset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDatasetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new document classifier that you can use to categorize documents. To create a classifier, you provide a set of training documents that are labeled with the categories that you want to use. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/training-classifier-model.html">Training classifier models</a> in the Comprehend Developer Guide.
		/// CreateDocumentClassifier #X-Amz-Target=Comprehend_20171127.CreateDocumentClassifier
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateDocumentClassifierResponse> CreateDocumentClassifierAsync(CreateDocumentClassifierRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.CreateDocumentClassifier";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDocumentClassifierResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a model-specific endpoint for synchronous inference for a previously trained custom model For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.
		/// CreateEndpoint #X-Amz-Target=Comprehend_20171127.CreateEndpoint
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateEndpointResponse> CreateEndpointAsync(CreateEndpointRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.CreateEndpoint";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateEndpointResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates an entity recognizer using submitted files. After your <code>CreateEntityRecognizer</code> request is submitted, you can check job status using the <code>DescribeEntityRecognizer</code> API.
		/// CreateEntityRecognizer #X-Amz-Target=Comprehend_20171127.CreateEntityRecognizer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateEntityRecognizerResponse> CreateEntityRecognizerAsync(CreateEntityRecognizerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.CreateEntityRecognizer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateEntityRecognizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>A flywheel is an Amazon Web Services resource that orchestrates the ongoing training of a model for custom classification or custom entity recognition. You can create a flywheel to start with an existing trained model, or Comprehend can create and train a new model.</p> <p>When you create the flywheel, Comprehend creates a data lake in your account. The data lake holds the training data and test data for all versions of the model.</p> <p>To use a flywheel with an existing trained model, you specify the active model version. Comprehend copies the model's training data and test data into the flywheel's data lake.</p> <p>To use the flywheel with a new model, you need to provide a dataset for training data (and optional test data) when you create the flywheel.</p> <p>For more information about flywheels, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>.</p>
		/// CreateFlywheel #X-Amz-Target=Comprehend_20171127.CreateFlywheel
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateFlywheelResponse> CreateFlywheelAsync(CreateFlywheelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.CreateFlywheel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateFlywheelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a previously created document classifier</p> <p>Only those classifiers that are in terminated states (IN_ERROR, TRAINED) will be deleted. If an active inference job is using the model, a <code>ResourceInUseException</code> will be returned.</p> <p>This is an asynchronous action that puts the classifier into a DELETING state, and it is then removed by a background job. Once removed, the classifier disappears from your account and is no longer available for use. </p>
		/// DeleteDocumentClassifier #X-Amz-Target=Comprehend_20171127.DeleteDocumentClassifier
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteDocumentClassifierResponse> DeleteDocumentClassifierAsync(DeleteDocumentClassifierRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DeleteDocumentClassifier";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDocumentClassifierResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a model-specific endpoint for a previously-trained custom model. All endpoints must be deleted in order for the model to be deleted. For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.
		/// DeleteEndpoint #X-Amz-Target=Comprehend_20171127.DeleteEndpoint
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteEndpointResponse> DeleteEndpointAsync(DeleteEndpointRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DeleteEndpoint";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteEndpointResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an entity recognizer.</p> <p>Only those recognizers that are in terminated states (IN_ERROR, TRAINED) will be deleted. If an active inference job is using the model, a <code>ResourceInUseException</code> will be returned.</p> <p>This is an asynchronous action that puts the recognizer into a DELETING state, and it is then removed by a background job. Once removed, the recognizer disappears from your account and is no longer available for use. </p>
		/// DeleteEntityRecognizer #X-Amz-Target=Comprehend_20171127.DeleteEntityRecognizer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteEntityRecognizerResponse> DeleteEntityRecognizerAsync(DeleteEntityRecognizerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DeleteEntityRecognizer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteEntityRecognizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a flywheel. When you delete the flywheel, Amazon Comprehend does not delete the data lake or the model associated with the flywheel.</p> <p>For more information about flywheels, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>.</p>
		/// DeleteFlywheel #X-Amz-Target=Comprehend_20171127.DeleteFlywheel
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteFlywheelResponse> DeleteFlywheelAsync(DeleteFlywheelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DeleteFlywheel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteFlywheelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a resource-based policy that is attached to a custom model.
		/// DeleteResourcePolicy #X-Amz-Target=Comprehend_20171127.DeleteResourcePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DeleteResourcePolicyResponse> DeleteResourcePolicyAsync(DeleteResourcePolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DeleteResourcePolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteResourcePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about the dataset that you specify. For more information about datasets, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>.
		/// DescribeDataset #X-Amz-Target=Comprehend_20171127.DescribeDataset
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDatasetResponse> DescribeDatasetAsync(DescribeDatasetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DescribeDataset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDatasetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with a document classification job. Use this operation to get the status of a classification job.
		/// DescribeDocumentClassificationJob #X-Amz-Target=Comprehend_20171127.DescribeDocumentClassificationJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDocumentClassificationJobResponse> DescribeDocumentClassificationJobAsync(DescribeDocumentClassificationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DescribeDocumentClassificationJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDocumentClassificationJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with a document classifier.
		/// DescribeDocumentClassifier #X-Amz-Target=Comprehend_20171127.DescribeDocumentClassifier
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDocumentClassifierResponse> DescribeDocumentClassifierAsync(DescribeDocumentClassifierRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DescribeDocumentClassifier";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDocumentClassifierResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with a dominant language detection job. Use this operation to get the status of a detection job.
		/// DescribeDominantLanguageDetectionJob #X-Amz-Target=Comprehend_20171127.DescribeDominantLanguageDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeDominantLanguageDetectionJobResponse> DescribeDominantLanguageDetectionJobAsync(DescribeDominantLanguageDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DescribeDominantLanguageDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeDominantLanguageDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with a specific endpoint. Use this operation to get the status of an endpoint. For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.
		/// DescribeEndpoint #X-Amz-Target=Comprehend_20171127.DescribeEndpoint
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeEndpointResponse> DescribeEndpointAsync(DescribeEndpointRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DescribeEndpoint";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeEndpointResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with an entities detection job. Use this operation to get the status of a detection job.
		/// DescribeEntitiesDetectionJob #X-Amz-Target=Comprehend_20171127.DescribeEntitiesDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeEntitiesDetectionJobResponse> DescribeEntitiesDetectionJobAsync(DescribeEntitiesDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DescribeEntitiesDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeEntitiesDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides details about an entity recognizer including status, S3 buckets containing training data, recognizer metadata, metrics, and so on.
		/// DescribeEntityRecognizer #X-Amz-Target=Comprehend_20171127.DescribeEntityRecognizer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeEntityRecognizerResponse> DescribeEntityRecognizerAsync(DescribeEntityRecognizerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DescribeEntityRecognizer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeEntityRecognizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the status and details of an events detection job.
		/// DescribeEventsDetectionJob #X-Amz-Target=Comprehend_20171127.DescribeEventsDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeEventsDetectionJobResponse> DescribeEventsDetectionJobAsync(DescribeEventsDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DescribeEventsDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeEventsDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Provides configuration information about the flywheel. For more information about flywheels, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>.
		/// DescribeFlywheel #X-Amz-Target=Comprehend_20171127.DescribeFlywheel
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeFlywheelResponse> DescribeFlywheelAsync(DescribeFlywheelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DescribeFlywheel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeFlywheelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve the configuration properties of a flywheel iteration. For more information about flywheels, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>.
		/// DescribeFlywheelIteration #X-Amz-Target=Comprehend_20171127.DescribeFlywheelIteration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeFlywheelIterationResponse> DescribeFlywheelIterationAsync(DescribeFlywheelIterationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DescribeFlywheelIteration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeFlywheelIterationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with a key phrases detection job. Use this operation to get the status of a detection job.
		/// DescribeKeyPhrasesDetectionJob #X-Amz-Target=Comprehend_20171127.DescribeKeyPhrasesDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeKeyPhrasesDetectionJobResponse> DescribeKeyPhrasesDetectionJobAsync(DescribeKeyPhrasesDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DescribeKeyPhrasesDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeKeyPhrasesDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with a PII entities detection job. For example, you can use this operation to get the job status.
		/// DescribePiiEntitiesDetectionJob #X-Amz-Target=Comprehend_20171127.DescribePiiEntitiesDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribePiiEntitiesDetectionJobResponse> DescribePiiEntitiesDetectionJobAsync(DescribePiiEntitiesDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DescribePiiEntitiesDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribePiiEntitiesDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the details of a resource-based policy that is attached to a custom model, including the JSON body of the policy.
		/// DescribeResourcePolicy #X-Amz-Target=Comprehend_20171127.DescribeResourcePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeResourcePolicyResponse> DescribeResourcePolicyAsync(DescribeResourcePolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DescribeResourcePolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeResourcePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with a sentiment detection job. Use this operation to get the status of a detection job.
		/// DescribeSentimentDetectionJob #X-Amz-Target=Comprehend_20171127.DescribeSentimentDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeSentimentDetectionJobResponse> DescribeSentimentDetectionJobAsync(DescribeSentimentDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DescribeSentimentDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeSentimentDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with a targeted sentiment detection job. Use this operation to get the status of the job.
		/// DescribeTargetedSentimentDetectionJob #X-Amz-Target=Comprehend_20171127.DescribeTargetedSentimentDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeTargetedSentimentDetectionJobResponse> DescribeTargetedSentimentDetectionJobAsync(DescribeTargetedSentimentDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DescribeTargetedSentimentDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeTargetedSentimentDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the properties associated with a topic detection job. Use this operation to get the status of a detection job.
		/// DescribeTopicsDetectionJob #X-Amz-Target=Comprehend_20171127.DescribeTopicsDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DescribeTopicsDetectionJobResponse> DescribeTopicsDetectionJobAsync(DescribeTopicsDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DescribeTopicsDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DescribeTopicsDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Determines the dominant language of the input text. For a list of languages that Amazon Comprehend can detect, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html">Amazon Comprehend Supported Languages</a>.
		/// DetectDominantLanguage #X-Amz-Target=Comprehend_20171127.DetectDominantLanguage
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetectDominantLanguageResponse> DetectDominantLanguageAsync(DetectDominantLanguageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DetectDominantLanguage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DetectDominantLanguageResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Detects named entities in input text when you use the pre-trained model. Detects custom entities if you have a custom entity recognition model. </p> <p> When detecting named entities using the pre-trained model, use plain text as the input. For more information about named entities, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-entities.html">Entities</a> in the Comprehend Developer Guide.</p> <p>When you use a custom entity recognition model, you can input plain text or you can upload a single-page input document (text, PDF, Word, or image). </p> <p>If the system detects errors while processing a page in the input document, the API response includes an entry in <code>Errors</code> for each error. </p> <p>If the system detects a document-level error in your input document, the API returns an <code>InvalidRequestException</code> error response. For details about this exception, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/idp-inputs-sync-err.html"> Errors in semi-structured documents</a> in the Comprehend Developer Guide. </p>
		/// DetectEntities #X-Amz-Target=Comprehend_20171127.DetectEntities
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetectEntitiesResponse> DetectEntitiesAsync(DetectEntitiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DetectEntities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DetectEntitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Detects the key noun phrases found in the text.
		/// DetectKeyPhrases #X-Amz-Target=Comprehend_20171127.DetectKeyPhrases
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetectKeyPhrasesResponse> DetectKeyPhrasesAsync(DetectKeyPhrasesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DetectKeyPhrases";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DetectKeyPhrasesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Inspects the input text for entities that contain personally identifiable information (PII) and returns information about them.
		/// DetectPiiEntities #X-Amz-Target=Comprehend_20171127.DetectPiiEntities
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetectPiiEntitiesResponse> DetectPiiEntitiesAsync(DetectPiiEntitiesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DetectPiiEntities";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DetectPiiEntitiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Inspects text and returns an inference of the prevailing sentiment (<code>POSITIVE</code>, <code>NEUTRAL</code>, <code>MIXED</code>, or <code>NEGATIVE</code>).
		/// DetectSentiment #X-Amz-Target=Comprehend_20171127.DetectSentiment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetectSentimentResponse> DetectSentimentAsync(DetectSentimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DetectSentiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DetectSentimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Inspects text for syntax and the part of speech of words in the document. For more information, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-syntax.html">Syntax</a> in the Comprehend Developer Guide.
		/// DetectSyntax #X-Amz-Target=Comprehend_20171127.DetectSyntax
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetectSyntaxResponse> DetectSyntaxAsync(DetectSyntaxRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DetectSyntax";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DetectSyntaxResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Inspects the input text and returns a sentiment analysis for each entity identified in the text.</p> <p>For more information about targeted sentiment, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html">Targeted sentiment</a>.</p>
		/// DetectTargetedSentiment #X-Amz-Target=Comprehend_20171127.DetectTargetedSentiment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DetectTargetedSentimentResponse> DetectTargetedSentimentAsync(DetectTargetedSentimentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.DetectTargetedSentiment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DetectTargetedSentimentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new custom model that replicates a source custom model that you import. The source model can be in your Amazon Web Services account or another one.</p> <p>If the source model is in another Amazon Web Services account, then it must have a resource-based policy that authorizes you to import it.</p> <p>The source model must be in the same Amazon Web Services Region that you're using when you import. You can't import a model that's in a different Region.</p>
		/// ImportModel #X-Amz-Target=Comprehend_20171127.ImportModel
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ImportModelResponse> ImportModelAsync(ImportModelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ImportModel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImportModelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List the datasets that you have configured in this Region. For more information about datasets, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>.
		/// ListDatasets #X-Amz-Target=Comprehend_20171127.ListDatasets
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDatasetsResponse> ListDatasetsAsync(string MaxResults, string NextToken, ListDatasetsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListDatasets?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDatasetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the documentation classification jobs that you have submitted.
		/// ListDocumentClassificationJobs #X-Amz-Target=Comprehend_20171127.ListDocumentClassificationJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDocumentClassificationJobsResponse> ListDocumentClassificationJobsAsync(string MaxResults, string NextToken, ListDocumentClassificationJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListDocumentClassificationJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDocumentClassificationJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of summaries of the document classifiers that you have created
		/// ListDocumentClassifierSummaries #X-Amz-Target=Comprehend_20171127.ListDocumentClassifierSummaries
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDocumentClassifierSummariesResponse> ListDocumentClassifierSummariesAsync(string MaxResults, string NextToken, ListDocumentClassifierSummariesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListDocumentClassifierSummaries?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDocumentClassifierSummariesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the document classifiers that you have created.
		/// ListDocumentClassifiers #X-Amz-Target=Comprehend_20171127.ListDocumentClassifiers
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDocumentClassifiersResponse> ListDocumentClassifiersAsync(string MaxResults, string NextToken, ListDocumentClassifiersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListDocumentClassifiers?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDocumentClassifiersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the dominant language detection jobs that you have submitted.
		/// ListDominantLanguageDetectionJobs #X-Amz-Target=Comprehend_20171127.ListDominantLanguageDetectionJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListDominantLanguageDetectionJobsResponse> ListDominantLanguageDetectionJobsAsync(string MaxResults, string NextToken, ListDominantLanguageDetectionJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListDominantLanguageDetectionJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDominantLanguageDetectionJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of all existing endpoints that you've created. For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.
		/// ListEndpoints #X-Amz-Target=Comprehend_20171127.ListEndpoints
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListEndpointsResponse> ListEndpointsAsync(string MaxResults, string NextToken, ListEndpointsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListEndpoints?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEndpointsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the entity detection jobs that you have submitted.
		/// ListEntitiesDetectionJobs #X-Amz-Target=Comprehend_20171127.ListEntitiesDetectionJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListEntitiesDetectionJobsResponse> ListEntitiesDetectionJobsAsync(string MaxResults, string NextToken, ListEntitiesDetectionJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListEntitiesDetectionJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEntitiesDetectionJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of summaries for the entity recognizers that you have created.
		/// ListEntityRecognizerSummaries #X-Amz-Target=Comprehend_20171127.ListEntityRecognizerSummaries
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListEntityRecognizerSummariesResponse> ListEntityRecognizerSummariesAsync(string MaxResults, string NextToken, ListEntityRecognizerSummariesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListEntityRecognizerSummaries?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEntityRecognizerSummariesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a list of the properties of all entity recognizers that you created, including recognizers currently in training. Allows you to filter the list of recognizers based on criteria such as status and submission time. This call returns up to 500 entity recognizers in the list, with a default number of 100 recognizers in the list.</p> <p>The results of this list are not in any particular order. Please get the list and sort locally if needed.</p>
		/// ListEntityRecognizers #X-Amz-Target=Comprehend_20171127.ListEntityRecognizers
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListEntityRecognizersResponse> ListEntityRecognizersAsync(string MaxResults, string NextToken, ListEntityRecognizersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListEntityRecognizers?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEntityRecognizersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the events detection jobs that you have submitted.
		/// ListEventsDetectionJobs #X-Amz-Target=Comprehend_20171127.ListEventsDetectionJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListEventsDetectionJobsResponse> ListEventsDetectionJobsAsync(string MaxResults, string NextToken, ListEventsDetectionJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListEventsDetectionJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListEventsDetectionJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Information about the history of a flywheel iteration. For more information about flywheels, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>.
		/// ListFlywheelIterationHistory #X-Amz-Target=Comprehend_20171127.ListFlywheelIterationHistory
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListFlywheelIterationHistoryResponse> ListFlywheelIterationHistoryAsync(string MaxResults, string NextToken, ListFlywheelIterationHistoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListFlywheelIterationHistory?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFlywheelIterationHistoryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the flywheels that you have created.
		/// ListFlywheels #X-Amz-Target=Comprehend_20171127.ListFlywheels
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListFlywheelsResponse> ListFlywheelsAsync(string MaxResults, string NextToken, ListFlywheelsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListFlywheels?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFlywheelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a list of key phrase detection jobs that you have submitted.
		/// ListKeyPhrasesDetectionJobs #X-Amz-Target=Comprehend_20171127.ListKeyPhrasesDetectionJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListKeyPhrasesDetectionJobsResponse> ListKeyPhrasesDetectionJobsAsync(string MaxResults, string NextToken, ListKeyPhrasesDetectionJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListKeyPhrasesDetectionJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListKeyPhrasesDetectionJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the PII entity detection jobs that you have submitted.
		/// ListPiiEntitiesDetectionJobs #X-Amz-Target=Comprehend_20171127.ListPiiEntitiesDetectionJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListPiiEntitiesDetectionJobsResponse> ListPiiEntitiesDetectionJobsAsync(string MaxResults, string NextToken, ListPiiEntitiesDetectionJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListPiiEntitiesDetectionJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPiiEntitiesDetectionJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of sentiment detection jobs that you have submitted.
		/// ListSentimentDetectionJobs #X-Amz-Target=Comprehend_20171127.ListSentimentDetectionJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListSentimentDetectionJobsResponse> ListSentimentDetectionJobsAsync(string MaxResults, string NextToken, ListSentimentDetectionJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListSentimentDetectionJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListSentimentDetectionJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists all tags associated with a given Amazon Comprehend resource.
		/// ListTagsForResource #X-Amz-Target=Comprehend_20171127.ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(ListTagsForResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListTagsForResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of targeted sentiment detection jobs that you have submitted.
		/// ListTargetedSentimentDetectionJobs #X-Amz-Target=Comprehend_20171127.ListTargetedSentimentDetectionJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTargetedSentimentDetectionJobsResponse> ListTargetedSentimentDetectionJobsAsync(string MaxResults, string NextToken, ListTargetedSentimentDetectionJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListTargetedSentimentDetectionJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTargetedSentimentDetectionJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets a list of the topic detection jobs that you have submitted.
		/// ListTopicsDetectionJobs #X-Amz-Target=Comprehend_20171127.ListTopicsDetectionJobs
		/// </summary>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListTopicsDetectionJobsResponse> ListTopicsDetectionJobsAsync(string MaxResults, string NextToken, ListTopicsDetectionJobsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.ListTopicsDetectionJobs?MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTopicsDetectionJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Attaches a resource-based policy to a custom model. You can use this policy to authorize an entity in another Amazon Web Services account to import the custom model, which replicates it in Amazon Comprehend in their account.
		/// PutResourcePolicy #X-Amz-Target=Comprehend_20171127.PutResourcePolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutResourcePolicyResponse> PutResourcePolicyAsync(PutResourcePolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.PutResourcePolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutResourcePolicyResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous document classification job. Use the <code>DescribeDocumentClassificationJob</code> operation to track the progress of the job.
		/// StartDocumentClassificationJob #X-Amz-Target=Comprehend_20171127.StartDocumentClassificationJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartDocumentClassificationJobResponse> StartDocumentClassificationJobAsync(StartDocumentClassificationJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StartDocumentClassificationJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartDocumentClassificationJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous dominant language detection job for a collection of documents. Use the operation to track the status of a job.
		/// StartDominantLanguageDetectionJob #X-Amz-Target=Comprehend_20171127.StartDominantLanguageDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartDominantLanguageDetectionJobResponse> StartDominantLanguageDetectionJobAsync(StartDominantLanguageDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StartDominantLanguageDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartDominantLanguageDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts an asynchronous entity detection job for a collection of documents. Use the operation to track the status of a job.</p> <p>This API can be used for either standard entity detection or custom entity recognition. In order to be used for custom entity recognition, the optional <code>EntityRecognizerArn</code> must be used in order to provide access to the recognizer being used to detect the custom entity.</p>
		/// StartEntitiesDetectionJob #X-Amz-Target=Comprehend_20171127.StartEntitiesDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartEntitiesDetectionJobResponse> StartEntitiesDetectionJobAsync(StartEntitiesDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StartEntitiesDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartEntitiesDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous event detection job for a collection of documents.
		/// StartEventsDetectionJob #X-Amz-Target=Comprehend_20171127.StartEventsDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartEventsDetectionJobResponse> StartEventsDetectionJobAsync(StartEventsDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StartEventsDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartEventsDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Start the flywheel iteration.This operation uses any new datasets to train a new model version. For more information about flywheels, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/flywheels-about.html"> Flywheel overview</a> in the <i>Amazon Comprehend Developer Guide</i>.
		/// StartFlywheelIteration #X-Amz-Target=Comprehend_20171127.StartFlywheelIteration
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartFlywheelIterationResponse> StartFlywheelIterationAsync(StartFlywheelIterationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StartFlywheelIteration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartFlywheelIterationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous key phrase detection job for a collection of documents. Use the operation to track the status of a job.
		/// StartKeyPhrasesDetectionJob #X-Amz-Target=Comprehend_20171127.StartKeyPhrasesDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartKeyPhrasesDetectionJobResponse> StartKeyPhrasesDetectionJobAsync(StartKeyPhrasesDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StartKeyPhrasesDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartKeyPhrasesDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous PII entity detection job for a collection of documents.
		/// StartPiiEntitiesDetectionJob #X-Amz-Target=Comprehend_20171127.StartPiiEntitiesDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartPiiEntitiesDetectionJobResponse> StartPiiEntitiesDetectionJobAsync(StartPiiEntitiesDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StartPiiEntitiesDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartPiiEntitiesDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous sentiment detection job for a collection of documents. Use the operation to track the status of a job.
		/// StartSentimentDetectionJob #X-Amz-Target=Comprehend_20171127.StartSentimentDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartSentimentDetectionJobResponse> StartSentimentDetectionJobAsync(StartSentimentDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StartSentimentDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartSentimentDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous targeted sentiment detection job for a collection of documents. Use the <code>DescribeTargetedSentimentDetectionJob</code> operation to track the status of a job.
		/// StartTargetedSentimentDetectionJob #X-Amz-Target=Comprehend_20171127.StartTargetedSentimentDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartTargetedSentimentDetectionJobResponse> StartTargetedSentimentDetectionJobAsync(StartTargetedSentimentDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StartTargetedSentimentDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartTargetedSentimentDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts an asynchronous topic detection job. Use the <code>DescribeTopicDetectionJob</code> operation to track the status of a job.
		/// StartTopicsDetectionJob #X-Amz-Target=Comprehend_20171127.StartTopicsDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartTopicsDetectionJobResponse> StartTopicsDetectionJobAsync(StartTopicsDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StartTopicsDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartTopicsDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops a dominant language detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p>
		/// StopDominantLanguageDetectionJob #X-Amz-Target=Comprehend_20171127.StopDominantLanguageDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopDominantLanguageDetectionJobResponse> StopDominantLanguageDetectionJobAsync(StopDominantLanguageDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StopDominantLanguageDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopDominantLanguageDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops an entities detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p>
		/// StopEntitiesDetectionJob #X-Amz-Target=Comprehend_20171127.StopEntitiesDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopEntitiesDetectionJobResponse> StopEntitiesDetectionJobAsync(StopEntitiesDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StopEntitiesDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopEntitiesDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops an events detection job in progress.
		/// StopEventsDetectionJob #X-Amz-Target=Comprehend_20171127.StopEventsDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopEventsDetectionJobResponse> StopEventsDetectionJobAsync(StopEventsDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StopEventsDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopEventsDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops a key phrases detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code> the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p>
		/// StopKeyPhrasesDetectionJob #X-Amz-Target=Comprehend_20171127.StopKeyPhrasesDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopKeyPhrasesDetectionJobResponse> StopKeyPhrasesDetectionJobAsync(StopKeyPhrasesDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StopKeyPhrasesDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopKeyPhrasesDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops a PII entities detection job in progress.
		/// StopPiiEntitiesDetectionJob #X-Amz-Target=Comprehend_20171127.StopPiiEntitiesDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopPiiEntitiesDetectionJobResponse> StopPiiEntitiesDetectionJobAsync(StopPiiEntitiesDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StopPiiEntitiesDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopPiiEntitiesDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops a sentiment detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code>, the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is be stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p>
		/// StopSentimentDetectionJob #X-Amz-Target=Comprehend_20171127.StopSentimentDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopSentimentDetectionJobResponse> StopSentimentDetectionJobAsync(StopSentimentDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StopSentimentDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopSentimentDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops a targeted sentiment detection job in progress.</p> <p>If the job state is <code>IN_PROGRESS</code>, the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the job completes before it can be stopped, it is put into the <code>COMPLETED</code> state; otherwise the job is be stopped and put into the <code>STOPPED</code> state.</p> <p>If the job is in the <code>COMPLETED</code> or <code>FAILED</code> state when you call the <code>StopDominantLanguageDetectionJob</code> operation, the operation returns a 400 Internal Request Exception. </p> <p>When a job is stopped, any documents already processed are written to the output location.</p>
		/// StopTargetedSentimentDetectionJob #X-Amz-Target=Comprehend_20171127.StopTargetedSentimentDetectionJob
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopTargetedSentimentDetectionJobResponse> StopTargetedSentimentDetectionJobAsync(StopTargetedSentimentDetectionJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StopTargetedSentimentDetectionJob";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopTargetedSentimentDetectionJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops a document classifier training job while in progress.</p> <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and put into the <code>STOPPED</code> state and the service sends back an HTTP 200 response with an empty HTTP body. </p>
		/// StopTrainingDocumentClassifier #X-Amz-Target=Comprehend_20171127.StopTrainingDocumentClassifier
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopTrainingDocumentClassifierResponse> StopTrainingDocumentClassifierAsync(StopTrainingDocumentClassifierRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StopTrainingDocumentClassifier";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopTrainingDocumentClassifierResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Stops an entity recognizer training job while in progress.</p> <p>If the training job state is <code>TRAINING</code>, the job is marked for termination and put into the <code>STOP_REQUESTED</code> state. If the training job completes before it can be stopped, it is put into the <code>TRAINED</code>; otherwise the training job is stopped and putted into the <code>STOPPED</code> state and the service sends back an HTTP 200 response with an empty HTTP body.</p>
		/// StopTrainingEntityRecognizer #X-Amz-Target=Comprehend_20171127.StopTrainingEntityRecognizer
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopTrainingEntityRecognizerResponse> StopTrainingEntityRecognizerAsync(StopTrainingEntityRecognizerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.StopTrainingEntityRecognizer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopTrainingEntityRecognizerResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Associates a specific tag with an Amazon Comprehend resource. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
		/// TagResource #X-Amz-Target=Comprehend_20171127.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(TagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.TagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a specific tag associated with an Amazon Comprehend resource.
		/// UntagResource #X-Amz-Target=Comprehend_20171127.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(UntagResourceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.UntagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates information about the specified endpoint. For information about endpoints, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html">Managing endpoints</a>.
		/// UpdateEndpoint #X-Amz-Target=Comprehend_20171127.UpdateEndpoint
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateEndpointResponse> UpdateEndpointAsync(UpdateEndpointRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.UpdateEndpoint";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateEndpointResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update the configuration information for an existing flywheel.
		/// UpdateFlywheel #X-Amz-Target=Comprehend_20171127.UpdateFlywheel
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateFlywheelResponse> UpdateFlywheelAsync(UpdateFlywheelRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=Comprehend_20171127.UpdateFlywheel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateFlywheelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum BatchDetectDominantLanguageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.BatchDetectDominantLanguage")]
		Comprehend_20171127_BatchDetectDominantLanguage = 0,
	}
	
	public enum BatchDetectEntitiesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.BatchDetectEntities")]
		Comprehend_20171127_BatchDetectEntities = 0,
	}
	
	public enum BatchDetectKeyPhrasesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.BatchDetectKeyPhrases")]
		Comprehend_20171127_BatchDetectKeyPhrases = 0,
	}
	
	public enum BatchDetectSentimentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.BatchDetectSentiment")]
		Comprehend_20171127_BatchDetectSentiment = 0,
	}
	
	public enum BatchDetectSyntaxX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.BatchDetectSyntax")]
		Comprehend_20171127_BatchDetectSyntax = 0,
	}
	
	public enum BatchDetectTargetedSentimentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.BatchDetectTargetedSentiment")]
		Comprehend_20171127_BatchDetectTargetedSentiment = 0,
	}
	
	public enum ClassifyDocumentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ClassifyDocument")]
		Comprehend_20171127_ClassifyDocument = 0,
	}
	
	public enum ContainsPiiEntitiesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ContainsPiiEntities")]
		Comprehend_20171127_ContainsPiiEntities = 0,
	}
	
	public enum CreateDatasetX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.CreateDataset")]
		Comprehend_20171127_CreateDataset = 0,
	}
	
	public enum CreateDocumentClassifierX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.CreateDocumentClassifier")]
		Comprehend_20171127_CreateDocumentClassifier = 0,
	}
	
	public enum CreateEndpointX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.CreateEndpoint")]
		Comprehend_20171127_CreateEndpoint = 0,
	}
	
	public enum CreateEntityRecognizerX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.CreateEntityRecognizer")]
		Comprehend_20171127_CreateEntityRecognizer = 0,
	}
	
	public enum CreateFlywheelX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.CreateFlywheel")]
		Comprehend_20171127_CreateFlywheel = 0,
	}
	
	public enum DeleteDocumentClassifierX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DeleteDocumentClassifier")]
		Comprehend_20171127_DeleteDocumentClassifier = 0,
	}
	
	public enum DeleteEndpointX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DeleteEndpoint")]
		Comprehend_20171127_DeleteEndpoint = 0,
	}
	
	public enum DeleteEntityRecognizerX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DeleteEntityRecognizer")]
		Comprehend_20171127_DeleteEntityRecognizer = 0,
	}
	
	public enum DeleteFlywheelX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DeleteFlywheel")]
		Comprehend_20171127_DeleteFlywheel = 0,
	}
	
	public enum DeleteResourcePolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DeleteResourcePolicy")]
		Comprehend_20171127_DeleteResourcePolicy = 0,
	}
	
	public enum DescribeDatasetX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DescribeDataset")]
		Comprehend_20171127_DescribeDataset = 0,
	}
	
	public enum DescribeDocumentClassificationJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DescribeDocumentClassificationJob")]
		Comprehend_20171127_DescribeDocumentClassificationJob = 0,
	}
	
	public enum DescribeDocumentClassifierX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DescribeDocumentClassifier")]
		Comprehend_20171127_DescribeDocumentClassifier = 0,
	}
	
	public enum DescribeDominantLanguageDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DescribeDominantLanguageDetectionJob")]
		Comprehend_20171127_DescribeDominantLanguageDetectionJob = 0,
	}
	
	public enum DescribeEndpointX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DescribeEndpoint")]
		Comprehend_20171127_DescribeEndpoint = 0,
	}
	
	public enum DescribeEntitiesDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DescribeEntitiesDetectionJob")]
		Comprehend_20171127_DescribeEntitiesDetectionJob = 0,
	}
	
	public enum DescribeEntityRecognizerX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DescribeEntityRecognizer")]
		Comprehend_20171127_DescribeEntityRecognizer = 0,
	}
	
	public enum DescribeEventsDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DescribeEventsDetectionJob")]
		Comprehend_20171127_DescribeEventsDetectionJob = 0,
	}
	
	public enum DescribeFlywheelX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DescribeFlywheel")]
		Comprehend_20171127_DescribeFlywheel = 0,
	}
	
	public enum DescribeFlywheelIterationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DescribeFlywheelIteration")]
		Comprehend_20171127_DescribeFlywheelIteration = 0,
	}
	
	public enum DescribeKeyPhrasesDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DescribeKeyPhrasesDetectionJob")]
		Comprehend_20171127_DescribeKeyPhrasesDetectionJob = 0,
	}
	
	public enum DescribePiiEntitiesDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DescribePiiEntitiesDetectionJob")]
		Comprehend_20171127_DescribePiiEntitiesDetectionJob = 0,
	}
	
	public enum DescribeResourcePolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DescribeResourcePolicy")]
		Comprehend_20171127_DescribeResourcePolicy = 0,
	}
	
	public enum DescribeSentimentDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DescribeSentimentDetectionJob")]
		Comprehend_20171127_DescribeSentimentDetectionJob = 0,
	}
	
	public enum DescribeTargetedSentimentDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DescribeTargetedSentimentDetectionJob")]
		Comprehend_20171127_DescribeTargetedSentimentDetectionJob = 0,
	}
	
	public enum DescribeTopicsDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DescribeTopicsDetectionJob")]
		Comprehend_20171127_DescribeTopicsDetectionJob = 0,
	}
	
	public enum DetectDominantLanguageX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DetectDominantLanguage")]
		Comprehend_20171127_DetectDominantLanguage = 0,
	}
	
	public enum DetectEntitiesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DetectEntities")]
		Comprehend_20171127_DetectEntities = 0,
	}
	
	public enum DetectKeyPhrasesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DetectKeyPhrases")]
		Comprehend_20171127_DetectKeyPhrases = 0,
	}
	
	public enum DetectPiiEntitiesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DetectPiiEntities")]
		Comprehend_20171127_DetectPiiEntities = 0,
	}
	
	public enum DetectSentimentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DetectSentiment")]
		Comprehend_20171127_DetectSentiment = 0,
	}
	
	public enum DetectSyntaxX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DetectSyntax")]
		Comprehend_20171127_DetectSyntax = 0,
	}
	
	public enum DetectTargetedSentimentX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.DetectTargetedSentiment")]
		Comprehend_20171127_DetectTargetedSentiment = 0,
	}
	
	public enum ImportModelX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ImportModel")]
		Comprehend_20171127_ImportModel = 0,
	}
	
	public enum ListDatasetsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListDatasets")]
		Comprehend_20171127_ListDatasets = 0,
	}
	
	public enum ListDocumentClassificationJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListDocumentClassificationJobs")]
		Comprehend_20171127_ListDocumentClassificationJobs = 0,
	}
	
	public enum ListDocumentClassifierSummariesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListDocumentClassifierSummaries")]
		Comprehend_20171127_ListDocumentClassifierSummaries = 0,
	}
	
	public enum ListDocumentClassifiersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListDocumentClassifiers")]
		Comprehend_20171127_ListDocumentClassifiers = 0,
	}
	
	public enum ListDominantLanguageDetectionJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListDominantLanguageDetectionJobs")]
		Comprehend_20171127_ListDominantLanguageDetectionJobs = 0,
	}
	
	public enum ListEndpointsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListEndpoints")]
		Comprehend_20171127_ListEndpoints = 0,
	}
	
	public enum ListEntitiesDetectionJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListEntitiesDetectionJobs")]
		Comprehend_20171127_ListEntitiesDetectionJobs = 0,
	}
	
	public enum ListEntityRecognizerSummariesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListEntityRecognizerSummaries")]
		Comprehend_20171127_ListEntityRecognizerSummaries = 0,
	}
	
	public enum ListEntityRecognizersX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListEntityRecognizers")]
		Comprehend_20171127_ListEntityRecognizers = 0,
	}
	
	public enum ListEventsDetectionJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListEventsDetectionJobs")]
		Comprehend_20171127_ListEventsDetectionJobs = 0,
	}
	
	public enum ListFlywheelIterationHistoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListFlywheelIterationHistory")]
		Comprehend_20171127_ListFlywheelIterationHistory = 0,
	}
	
	public enum ListFlywheelsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListFlywheels")]
		Comprehend_20171127_ListFlywheels = 0,
	}
	
	public enum ListKeyPhrasesDetectionJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListKeyPhrasesDetectionJobs")]
		Comprehend_20171127_ListKeyPhrasesDetectionJobs = 0,
	}
	
	public enum ListPiiEntitiesDetectionJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListPiiEntitiesDetectionJobs")]
		Comprehend_20171127_ListPiiEntitiesDetectionJobs = 0,
	}
	
	public enum ListSentimentDetectionJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListSentimentDetectionJobs")]
		Comprehend_20171127_ListSentimentDetectionJobs = 0,
	}
	
	public enum ListTagsForResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListTagsForResource")]
		Comprehend_20171127_ListTagsForResource = 0,
	}
	
	public enum ListTargetedSentimentDetectionJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListTargetedSentimentDetectionJobs")]
		Comprehend_20171127_ListTargetedSentimentDetectionJobs = 0,
	}
	
	public enum ListTopicsDetectionJobsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.ListTopicsDetectionJobs")]
		Comprehend_20171127_ListTopicsDetectionJobs = 0,
	}
	
	public enum PutResourcePolicyX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.PutResourcePolicy")]
		Comprehend_20171127_PutResourcePolicy = 0,
	}
	
	public enum StartDocumentClassificationJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StartDocumentClassificationJob")]
		Comprehend_20171127_StartDocumentClassificationJob = 0,
	}
	
	public enum StartDominantLanguageDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StartDominantLanguageDetectionJob")]
		Comprehend_20171127_StartDominantLanguageDetectionJob = 0,
	}
	
	public enum StartEntitiesDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StartEntitiesDetectionJob")]
		Comprehend_20171127_StartEntitiesDetectionJob = 0,
	}
	
	public enum StartEventsDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StartEventsDetectionJob")]
		Comprehend_20171127_StartEventsDetectionJob = 0,
	}
	
	public enum StartFlywheelIterationX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StartFlywheelIteration")]
		Comprehend_20171127_StartFlywheelIteration = 0,
	}
	
	public enum StartKeyPhrasesDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StartKeyPhrasesDetectionJob")]
		Comprehend_20171127_StartKeyPhrasesDetectionJob = 0,
	}
	
	public enum StartPiiEntitiesDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StartPiiEntitiesDetectionJob")]
		Comprehend_20171127_StartPiiEntitiesDetectionJob = 0,
	}
	
	public enum StartSentimentDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StartSentimentDetectionJob")]
		Comprehend_20171127_StartSentimentDetectionJob = 0,
	}
	
	public enum StartTargetedSentimentDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StartTargetedSentimentDetectionJob")]
		Comprehend_20171127_StartTargetedSentimentDetectionJob = 0,
	}
	
	public enum StartTopicsDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StartTopicsDetectionJob")]
		Comprehend_20171127_StartTopicsDetectionJob = 0,
	}
	
	public enum StopDominantLanguageDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StopDominantLanguageDetectionJob")]
		Comprehend_20171127_StopDominantLanguageDetectionJob = 0,
	}
	
	public enum StopEntitiesDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StopEntitiesDetectionJob")]
		Comprehend_20171127_StopEntitiesDetectionJob = 0,
	}
	
	public enum StopEventsDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StopEventsDetectionJob")]
		Comprehend_20171127_StopEventsDetectionJob = 0,
	}
	
	public enum StopKeyPhrasesDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StopKeyPhrasesDetectionJob")]
		Comprehend_20171127_StopKeyPhrasesDetectionJob = 0,
	}
	
	public enum StopPiiEntitiesDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StopPiiEntitiesDetectionJob")]
		Comprehend_20171127_StopPiiEntitiesDetectionJob = 0,
	}
	
	public enum StopSentimentDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StopSentimentDetectionJob")]
		Comprehend_20171127_StopSentimentDetectionJob = 0,
	}
	
	public enum StopTargetedSentimentDetectionJobX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StopTargetedSentimentDetectionJob")]
		Comprehend_20171127_StopTargetedSentimentDetectionJob = 0,
	}
	
	public enum StopTrainingDocumentClassifierX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StopTrainingDocumentClassifier")]
		Comprehend_20171127_StopTrainingDocumentClassifier = 0,
	}
	
	public enum StopTrainingEntityRecognizerX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.StopTrainingEntityRecognizer")]
		Comprehend_20171127_StopTrainingEntityRecognizer = 0,
	}
	
	public enum TagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.TagResource")]
		Comprehend_20171127_TagResource = 0,
	}
	
	public enum UntagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.UntagResource")]
		Comprehend_20171127_UntagResource = 0,
	}
	
	public enum UpdateEndpointX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.UpdateEndpoint")]
		Comprehend_20171127_UpdateEndpoint = 0,
	}
	
	public enum UpdateFlywheelX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Comprehend_20171127.UpdateFlywheel")]
		Comprehend_20171127_UpdateFlywheel = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
