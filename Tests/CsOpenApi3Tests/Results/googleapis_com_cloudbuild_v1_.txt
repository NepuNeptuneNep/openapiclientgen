//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// ApprovalConfig describes configuration for manual approval of a build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApprovalConfig
	{
		
		/// <summary>
		/// Whether or not approval is needed. If this is set on a build, it will become pending when created, and will need to be explicitly approved to start.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalRequired")]
		public System.Nullable<System.Boolean> ApprovalRequired { get; set; }
	}
	
	/// <summary>
	/// ApprovalResult describes the decision and associated metadata of a manual approval of a build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApprovalResult
	{
		
		/// <summary>
		/// Output only. The time when the approval decision was made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalTime")]
		public string ApprovalTime { get; set; }
		
		/// <summary>
		/// Output only. Email of the user that called the ApproveBuild API to approve or reject a build at the time that the API was called.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approverAccount")]
		public string ApproverAccount { get; set; }
		
		/// <summary>
		/// Optional. An optional comment for this manual approval result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public string Comment { get; set; }
		
		/// <summary>
		/// Required. The decision of this manual approval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="decision")]
		public System.Nullable<ApprovalResultDecision> Decision { get; set; }
		
		/// <summary>
		/// Optional. An optional URL tied to this manual approval result. This field is essentially the same as comment, except that it will be rendered by the UI differently. An example use case is a link to an external job that approved this Build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ApprovalResultDecision
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECISION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 2,
	}
	
	/// <summary>
	/// Request to approve or reject a pending build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApproveBuildRequest
	{
		
		/// <summary>
		/// ApprovalResult describes the decision and associated metadata of a manual approval of a build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalResult")]
		public ApprovalResult ApprovalResult { get; set; }
	}
	
	/// <summary>
	/// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArtifactObjects
	{
		
		/// <summary>
		/// Cloud Storage bucket and optional object path, in the form "gs://bucket/path/to/somewhere/". (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Files in the workspace matching any path pattern will be uploaded to Cloud Storage with this location as a prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Path globs used to match files in the build's workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public string[] Paths { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timing")]
		public TimeSpan Timing { get; set; }
	}
	
	/// <summary>
	/// Start and end times for a build execution phase.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeSpan
	{
		
		/// <summary>
		/// End of time span.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Start of time span.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// An artifact that was uploaded during a build. This is a single record in the artifact manifest JSON file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArtifactResult
	{
		
		/// <summary>
		/// The file hash of the artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHash")]
		public FileHashes[] FileHash { get; set; }
		
		/// <summary>
		/// The path of an artifact in a Cloud Storage bucket, with the generation number. For example, `gs://mybucket/path/to/output.jar#generation`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
	}
	
	/// <summary>
	/// Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FileHashes
	{
		
		/// <summary>
		/// Collection of file hashes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHash")]
		public Hash[] FileHash { get; set; }
	}
	
	/// <summary>
	/// Container message for hash values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Hash
	{
		
		/// <summary>
		/// The type of hash that was performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<HashType> Type { get; set; }
		
		/// <summary>
		/// The hash value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HashType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA256 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MD5 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA512 = 3,
	}
	
	/// <summary>
	/// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Artifacts
	{
		
		/// <summary>
		/// A list of images to be pushed upon the successful completion of all build steps. The images will be pushed using the builder service account's credentials. The digests of the pushed images will be stored in the Build resource's results field. If any of the images fail to be pushed, the build is marked FAILURE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public string[] Images { get; set; }
		
		/// <summary>
		/// A list of Maven artifacts to be uploaded to Artifact Registry upon successful completion of all build steps. Artifacts in the workspace matching specified paths globs will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any artifacts fail to be pushed, the build is marked FAILURE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mavenArtifacts")]
		public MavenArtifact[] MavenArtifacts { get; set; }
		
		/// <summary>
		/// A list of npm packages to be uploaded to Artifact Registry upon successful completion of all build steps. Npm packages in the specified paths will be uploaded to the specified Artifact Registry repository using the builder service account's credentials. If any packages fail to be pushed, the build is marked FAILURE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="npmPackages")]
		public NpmPackage[] NpmPackages { get; set; }
		
		/// <summary>
		/// Files in the workspace to upload to Cloud Storage upon successful completion of all build steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objects")]
		public ArtifactObjects Objects { get; set; }
		
		/// <summary>
		/// A list of Python packages to be uploaded to Artifact Registry upon successful completion of all build steps. The build service account credentials will be used to perform the upload. If any objects fail to be pushed, the build is marked FAILURE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonPackages")]
		public PythonPackage[] PythonPackages { get; set; }
	}
	
	/// <summary>
	/// A Maven artifact to upload to Artifact Registry upon successful completion of all build steps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MavenArtifact
	{
		
		/// <summary>
		/// Maven `artifactId` value used when uploading the artifact to Artifact Registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactId")]
		public string ArtifactId { get; set; }
		
		/// <summary>
		/// Maven `groupId` value used when uploading the artifact to Artifact Registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		/// <summary>
		/// Path to an artifact in the build's workspace to be uploaded to Artifact Registry. This can be either an absolute path, e.g. /workspace/my-app/target/my-app-1.0.SNAPSHOT.jar or a relative path from /workspace, e.g. my-app/target/my-app-1.0.SNAPSHOT.jar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Artifact Registry repository, in the form "https://$REGION-maven.pkg.dev/$PROJECT/$REPOSITORY" Artifact in the workspace specified by path will be uploaded to Artifact Registry with this location as a prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		/// <summary>
		/// Maven `version` value used when uploading the artifact to Artifact Registry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Npm package to upload to Artifact Registry upon successful completion of all build steps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NpmPackage
	{
		
		/// <summary>
		/// Path to the package.json. e.g. workspace/path/to/package
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packagePath")]
		public string PackagePath { get; set; }
		
		/// <summary>
		/// Artifact Registry repository, in the form "https://$REGION-npm.pkg.dev/$PROJECT/$REPOSITORY" Npm package in the workspace specified by path will be zipped and uploaded to Artifact Registry with this location as a prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
	}
	
	/// <summary>
	/// Python package to upload to Artifact Registry upon successful completion of all build steps. A package can encapsulate multiple objects to be uploaded to a single repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PythonPackage
	{
		
		/// <summary>
		/// Path globs used to match files in the build's workspace. For Python/ Twine, this is usually `dist/*`, and sometimes additionally an `.asc` file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paths")]
		public string[] Paths { get; set; }
		
		/// <summary>
		/// Artifact Registry repository, in the form "https://$REGION-python.pkg.dev/$PROJECT/$REPOSITORY" Files in the workspace matching any path pattern will be uploaded to Artifact Registry with this location as a prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
	}
	
	/// <summary>
	/// RPC request object accepted by BatchCreateBitbucketServerConnectedRepositories RPC method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateBitbucketServerConnectedRepositoriesRequest
	{
		
		/// <summary>
		/// Required. Requests to connect Bitbucket Server repositories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public CreateBitbucketServerConnectedRepositoryRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request to connect a repository from a connected Bitbucket Server host.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBitbucketServerConnectedRepositoryRequest
	{
		
		/// <summary>
		/// / BitbucketServerConnectedRepository represents a connected Bitbucket Server / repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitbucketServerConnectedRepository")]
		public BitbucketServerConnectedRepository BitbucketServerConnectedRepository { get; set; }
		
		/// <summary>
		/// Required. The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
	}
	
	/// <summary>
	/// / BitbucketServerConnectedRepository represents a connected Bitbucket Server / repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BitbucketServerConnectedRepository
	{
		
		/// <summary>
		/// The name of the `BitbucketServerConfig` that added connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		/// <summary>
		/// BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repo")]
		public BitbucketServerRepositoryId Repo { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
	}
	
	/// <summary>
	/// BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BitbucketServerRepositoryId
	{
		
		/// <summary>
		/// Required. Identifier for the project storing the repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectKey")]
		public string ProjectKey { get; set; }
		
		/// <summary>
		/// Required. Identifier for the repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoSlug")]
		public string RepoSlug { get; set; }
		
		/// <summary>
		/// Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookId")]
		public System.Nullable<System.Int32> WebhookId { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Response of BatchCreateBitbucketServerConnectedRepositories RPC method including all successfully connected Bitbucket Server repositories.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateBitbucketServerConnectedRepositoriesResponse
	{
		
		/// <summary>
		/// The connected Bitbucket Server repositories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitbucketServerConnectedRepositories")]
		public BitbucketServerConnectedRepository[] BitbucketServerConnectedRepositories { get; set; }
	}
	
	/// <summary>
	/// Metadata for `BatchCreateBitbucketServerConnectedRepositories` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateBitbucketServerConnectedRepositoriesResponseMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// The name of the `BitbucketServerConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
	}
	
	/// <summary>
	/// RPC request object accepted by BatchCreateGitLabConnectedRepositories RPC method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateGitLabConnectedRepositoriesRequest
	{
		
		/// <summary>
		/// Required. Requests to connect GitLab repositories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public CreateGitLabConnectedRepositoryRequest[] Requests { get; set; }
	}
	
	/// <summary>
	/// Request to connect a repository from a connected GitLab host.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGitLabConnectedRepositoryRequest
	{
		
		/// <summary>
		/// GitLabConnectedRepository represents a GitLab connected repository request response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitlabConnectedRepository")]
		public GitLabConnectedRepository GitlabConnectedRepository { get; set; }
		
		/// <summary>
		/// Required. The name of the `GitLabConfig` that adds connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
	}
	
	/// <summary>
	/// GitLabConnectedRepository represents a GitLab connected repository request response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitLabConnectedRepository
	{
		
		/// <summary>
		/// The name of the `GitLabConfig` that added connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public string Parent { get; set; }
		
		/// <summary>
		/// GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repo")]
		public GitLabRepositoryId Repo { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public Status Status { get; set; }
	}
	
	/// <summary>
	/// GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitLabRepositoryId
	{
		
		/// <summary>
		/// Required. Identifier for the repository. example: "namespace/project-slug", namespace is usually the username or group ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Output only. The ID of the webhook that was created for receiving events from this repo. We only create and manage a single webhook for each repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookId")]
		public System.Nullable<System.Int32> WebhookId { get; set; }
	}
	
	/// <summary>
	/// Response of BatchCreateGitLabConnectedRepositories RPC method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateGitLabConnectedRepositoriesResponse
	{
		
		/// <summary>
		/// The GitLab connected repository requests' responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitlabConnectedRepositories")]
		public GitLabConnectedRepository[] GitlabConnectedRepositories { get; set; }
	}
	
	/// <summary>
	/// Metadata for `BatchCreateGitLabConnectedRepositories` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchCreateGitLabConnectedRepositoriesResponseMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// The name of the `GitLabConfig` that added connected repositories. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
	}
	
	/// <summary>
	/// BitbucketServerConfig represents the configuration for a Bitbucket Server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BitbucketServerConfig
	{
		
		/// <summary>
		/// Required. Immutable. API Key that will be attached to webhook. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public string ApiKey { get; set; }
		
		/// <summary>
		/// Output only. Connected Bitbucket Server repositories for this config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectedRepositories")]
		public BitbucketServerRepositoryId[] ConnectedRepositories { get; set; }
		
		/// <summary>
		/// Time when the config was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Required. Immutable. The URI of the Bitbucket Server host. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostUri")]
		public string HostUri { get; set; }
		
		/// <summary>
		/// The resource name for the config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. The network to be used when reaching out to the Bitbucket Server instance. The VPC network must be enabled for private service connection. This should be set if the Bitbucket Server instance is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the Bitbucket Server instance will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peeredNetwork")]
		public string PeeredNetwork { get; set; }
		
		/// <summary>
		/// Immutable. IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a 29 bit prefix size. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used. The field only has an effect if peered_network is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peeredNetworkIpRange")]
		public string PeeredNetworkIpRange { get; set; }
		
		/// <summary>
		/// BitbucketServerSecrets represents the secrets in Secret Manager for a Bitbucket Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secrets")]
		public BitbucketServerSecrets Secrets { get; set; }
		
		/// <summary>
		/// Optional. SSL certificate to use for requests to Bitbucket Server. The format should be PEM format but the extension can be one of .pem, .cer, or .crt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslCa")]
		public string SslCa { get; set; }
		
		/// <summary>
		/// Username of the account Cloud Build will use on Bitbucket Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		/// <summary>
		/// Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookKey")]
		public string WebhookKey { get; set; }
	}
	
	/// <summary>
	/// BitbucketServerSecrets represents the secrets in Secret Manager for a Bitbucket Server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BitbucketServerSecrets
	{
		
		/// <summary>
		/// Required. The resource name for the admin access token's secret version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminAccessTokenVersionName")]
		public string AdminAccessTokenVersionName { get; set; }
		
		/// <summary>
		/// Required. The resource name for the read access token's secret version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readAccessTokenVersionName")]
		public string ReadAccessTokenVersionName { get; set; }
		
		/// <summary>
		/// Required. Immutable. The resource name for the webhook secret's secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another BitbucketServerConfig.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookSecretVersionName")]
		public string WebhookSecretVersionName { get; set; }
	}
	
	/// <summary>
	/// BitbucketServerRepository represents a repository hosted on a Bitbucket Server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BitbucketServerRepository
	{
		
		/// <summary>
		/// Link to the browse repo page on the Bitbucket Server instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="browseUri")]
		public string BrowseUri { get; set; }
		
		/// <summary>
		/// Description of the repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Display name of the repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The resource name of the repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoId")]
		public BitbucketServerRepositoryId RepoId { get; set; }
	}
	
	/// <summary>
	/// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BitbucketServerTriggerConfig
	{
		
		/// <summary>
		/// BitbucketServerConfig represents the configuration for a Bitbucket Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitbucketServerConfig")]
		public BitbucketServerConfig BitbucketServerConfig { get; set; }
		
		/// <summary>
		/// Required. The Bitbucket server config resource that this trigger config maps to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitbucketServerConfigResource")]
		public string BitbucketServerConfigResource { get; set; }
		
		/// <summary>
		/// Required. Key of the project that the repo is in. For example: The key for https://mybitbucket.server/projects/TEST/repos/test-repo is "TEST".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectKey")]
		public string ProjectKey { get; set; }
		
		/// <summary>
		/// PullRequestFilter contains filter properties for matching GitHub Pull Requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequest")]
		public PullRequestFilter PullRequest { get; set; }
		
		/// <summary>
		/// Push contains filter properties for matching GitHub git pushes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="push")]
		public PushFilter Push { get; set; }
		
		/// <summary>
		/// Required. Slug of the repository. A repository slug is a URL-friendly version of a repository name, automatically generated by Bitbucket for use in the URL. For example, if the repository name is 'test repo', in the URL it would become 'test-repo' as in https://mybitbucket.server/projects/TEST/repos/test-repo.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoSlug")]
		public string RepoSlug { get; set; }
	}
	
	/// <summary>
	/// PullRequestFilter contains filter properties for matching GitHub Pull Requests.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PullRequestFilter
	{
		
		/// <summary>
		/// Regex of branches to match. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public string Branch { get; set; }
		
		/// <summary>
		/// Configure builds to run whether a repository owner or collaborator need to comment `/gcbrun`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commentControl")]
		public System.Nullable<PullRequestFilterCommentControl> CommentControl { get; set; }
		
		/// <summary>
		/// If true, branches that do NOT match the git_ref will trigger a build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invertRegex")]
		public System.Nullable<System.Boolean> InvertRegex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PullRequestFilterCommentControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMENTS_DISABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMENTS_ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMENTS_ENABLED_FOR_EXTERNAL_CONTRIBUTORS_ONLY = 2,
	}
	
	/// <summary>
	/// Push contains filter properties for matching GitHub git pushes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PushFilter
	{
		
		/// <summary>
		/// Regexes matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public string Branch { get; set; }
		
		/// <summary>
		/// When true, only trigger a build if the revision regex does NOT match the git_ref regex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invertRegex")]
		public System.Nullable<System.Boolean> InvertRegex { get; set; }
		
		/// <summary>
		/// Regexes matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Build
	{
		
		/// <summary>
		/// BuildApproval describes a build's approval configuration, state, and result.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approval")]
		public BuildApproval Approval { get; set; }
		
		/// <summary>
		/// Artifacts produced by a build that should be uploaded upon successful completion of all build steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public Artifacts Artifacts { get; set; }
		
		/// <summary>
		/// Secrets and secret environment variables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableSecrets")]
		public Secrets AvailableSecrets { get; set; }
		
		/// <summary>
		/// Output only. The ID of the `BuildTrigger` that triggered this build, if it was triggered automatically.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildTriggerId")]
		public string BuildTriggerId { get; set; }
		
		/// <summary>
		/// Output only. Time at which the request to create the build was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// A fatal problem encountered during the execution of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="failureInfo")]
		public FailureInfo FailureInfo { get; set; }
		
		/// <summary>
		/// Output only. Time at which execution of the build was finished. The difference between finish_time and start_time is the duration of the build's execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finishTime")]
		public string FinishTime { get; set; }
		
		/// <summary>
		/// Output only. Unique identifier of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A list of images to be pushed upon the successful completion of all build steps. The images are pushed using the builder service account's credentials. The digests of the pushed images will be stored in the `Build` resource's results field. If any of the images fail to be pushed, the build status is marked `FAILURE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public string[] Images { get; set; }
		
		/// <summary>
		/// Output only. URL to logs for this build in Google Cloud Console.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logUrl")]
		public string LogUrl { get; set; }
		
		/// <summary>
		/// Cloud Storage bucket where logs should be written (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)). Logs file names will be of the format `${logs_bucket}/log-${build_id}.txt`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logsBucket")]
		public string LogsBucket { get; set; }
		
		/// <summary>
		/// Output only. The 'Build' name with format: `projects/{project}/locations/{location}/builds/{build}`, where {build} is a unique identifier generated by the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional arguments to enable specific features of builds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public BuildOptions Options { get; set; }
		
		/// <summary>
		/// Output only. ID of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// TTL in queue for this build. If provided and the build is enqueued longer than this value, the build will expire and the build status will be `EXPIRED`. The TTL starts ticking from create_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queueTtl")]
		public string QueueTtl { get; set; }
		
		/// <summary>
		/// Artifacts created by the build pipeline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Results Results { get; set; }
		
		/// <summary>
		/// Secrets to decrypt using Cloud Key Management Service. Note: Secret Manager is the recommended technique for managing sensitive data with Cloud Build. Use `available_secrets` to configure builds to access secrets from Secret Manager. For instructions, see: https://cloud.google.com/cloud-build/docs/securing-builds/use-secrets
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secrets")]
		public Secret[] Secrets { get; set; }
		
		/// <summary>
		/// IAM service account whose credentials will be used at build runtime. Must be of the format `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}`. ACCOUNT can be email address or uniqueId of the service account. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public string ServiceAccount { get; set; }
		
		/// <summary>
		/// Location of the source in a supported storage service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
		
		/// <summary>
		/// Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceProvenance")]
		public SourceProvenance SourceProvenance { get; set; }
		
		/// <summary>
		/// Output only. Time at which execution of the build was started.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Output only. Status of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<BuildStatus> Status { get; set; }
		
		/// <summary>
		/// Output only. Customer-readable message about the current status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusDetail")]
		public string StatusDetail { get; set; }
		
		/// <summary>
		/// Required. The operations to be performed on the workspace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public BuildStep[] Steps { get; set; }
		
		/// <summary>
		/// Substitutions data for `Build` resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="substitutions")]
		public System.Collections.Generic.Dictionary<string, string> Substitutions { get; set; }
		
		/// <summary>
		/// Tags for annotation of a `Build`. These are not docker tags.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Amount of time that this build should be allowed to run, to second granularity. If this amount of time elapses, work on the build will cease and the build status will be `TIMEOUT`. `timeout` starts ticking from `startTime`. Default time is 60 minutes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
		
		/// <summary>
		/// Output only. Stores timing information for phases of the build. Valid keys are: * BUILD: time to execute all build steps. * PUSH: time to push all artifacts including docker images and non docker artifacts. * FETCHSOURCE: time to fetch source. * SETUPBUILD: time to set up build. If the build does not specify source or images, these keys will not be included.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timing")]
		public System.Collections.Generic.Dictionary<string, TimeSpan> Timing { get; set; }
		
		/// <summary>
		/// Output only. Non-fatal problems encountered during the execution of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public Warning[] Warnings { get; set; }
	}
	
	/// <summary>
	/// BuildApproval describes a build's approval configuration, state, and result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildApproval
	{
		
		/// <summary>
		/// ApprovalConfig describes configuration for manual approval of a build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public ApprovalConfig Config { get; set; }
		
		/// <summary>
		/// ApprovalResult describes the decision and associated metadata of a manual approval of a build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public ApprovalResult Result { get; set; }
		
		/// <summary>
		/// Output only. The state of this build's approval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<BuildApprovalState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildApprovalState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 4,
	}
	
	/// <summary>
	/// Secrets and secret environment variables.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Secrets
	{
		
		/// <summary>
		/// Secrets encrypted with KMS key and the associated secret environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inline")]
		public InlineSecret[] Inline { get; set; }
		
		/// <summary>
		/// Secrets in Secret Manager and associated secret environment variable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretManager")]
		public SecretManagerSecret[] SecretManager { get; set; }
	}
	
	/// <summary>
	/// Pairs a set of secret environment variables mapped to encrypted values with the Cloud KMS key to use to decrypt the value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InlineSecret
	{
		
		/// <summary>
		/// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="envMap")]
		public System.Collections.Generic.Dictionary<string, string> EnvMap { get; set; }
		
		/// <summary>
		/// Resource name of Cloud KMS crypto key to decrypt the encrypted value. In format: projects/*/locations/*/keyRings/*/cryptoKeys/*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
	}
	
	/// <summary>
	/// Pairs a secret environment variable with a SecretVersion in Secret Manager.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecretManagerSecret
	{
		
		/// <summary>
		/// Environment variable name to associate with the secret. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public string Env { get; set; }
		
		/// <summary>
		/// Resource name of the SecretVersion. In format: projects/*/secrets/*/versions/*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionName")]
		public string VersionName { get; set; }
	}
	
	/// <summary>
	/// A fatal problem encountered during the execution of the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FailureInfo
	{
		
		/// <summary>
		/// Explains the failure issue in more detail using hard-coded text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The name of the failure.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<FailureInfoType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FailureInfoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUSH_FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUSH_IMAGE_NOT_FOUND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUSH_NOT_AUTHORIZED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOGGING_FAILURE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_BUILD_STEP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FETCH_SOURCE_FAILED = 6,
	}
	
	/// <summary>
	/// Optional arguments to enable specific features of builds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildOptions
	{
		
		/// <summary>
		/// Option to include built-in and custom substitutions as env variables for all build steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="automapSubstitutions")]
		public System.Nullable<System.Boolean> AutomapSubstitutions { get; set; }
		
		/// <summary>
		/// Optional. Option to specify how default logs buckets are setup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultLogsBucketBehavior")]
		public System.Nullable<BuildOptionsDefaultLogsBucketBehavior> DefaultLogsBucketBehavior { get; set; }
		
		/// <summary>
		/// Requested disk size for the VM that runs the build. Note that this is *NOT* "disk free"; some of the space will be used by the operating system and build utilities. Also note that this is the minimum disk size that will be allocated for the build -- the build may run with a larger disk than requested. At present, the maximum disk size is 2000GB; builds that request more than the maximum are rejected with an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGb")]
		public string DiskSizeGb { get; set; }
		
		/// <summary>
		/// Option to specify whether or not to apply bash style string operations to the substitutions. NOTE: this is always enabled for triggered builds and cannot be overridden in the build configuration file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicSubstitutions")]
		public System.Nullable<System.Boolean> DynamicSubstitutions { get; set; }
		
		/// <summary>
		/// A list of global environment variable definitions that will exist for all build steps in this build. If a variable is defined in both globally and in a build step, the variable will use the build step value. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public string[] Env { get; set; }
		
		/// <summary>
		/// Option to define build log streaming behavior to Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logStreamingOption")]
		public System.Nullable<BuildOptionsLogStreamingOption> LogStreamingOption { get; set; }
		
		/// <summary>
		/// Option to specify the logging mode, which determines if and where build logs are stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logging")]
		public System.Nullable<BuildOptionsLogging> Logging { get; set; }
		
		/// <summary>
		/// Compute Engine machine type on which to run the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public System.Nullable<BuildOptionsMachineType> MachineType { get; set; }
		
		/// <summary>
		/// Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pool")]
		public PoolOption Pool { get; set; }
		
		/// <summary>
		/// Requested verifiability options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedVerifyOption")]
		public System.Nullable<BuildOptionsRequestedVerifyOption> RequestedVerifyOption { get; set; }
		
		/// <summary>
		/// A list of global environment variables, which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`. These variables will be available to all build steps in this build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretEnv")]
		public string[] SecretEnv { get; set; }
		
		/// <summary>
		/// Requested hash for SourceProvenance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceProvenanceHash")]
		public HashType[] SourceProvenanceHash { get; set; }
		
		/// <summary>
		/// Option to specify behavior when there is an error in the substitution checks. NOTE: this is always set to ALLOW_LOOSE for triggered builds and cannot be overridden in the build configuration file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="substitutionOption")]
		public System.Nullable<BuildOptionsSubstitutionOption> SubstitutionOption { get; set; }
		
		/// <summary>
		/// Global list of volumes to mount for ALL build steps Each volume is created as an empty volume prior to starting the build process. Upon completion of the build, volumes and their contents are discarded. Global volume names and paths cannot conflict with the volumes defined a build step. Using a global volume in a build with only one step is not valid as it is indicative of a build request with an incorrect configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public Volume[] Volumes { get; set; }
		
		/// <summary>
		/// This field deprecated; please use `pool.name` instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerPool")]
		public string WorkerPool { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildOptionsDefaultLogsBucketBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_LOGS_BUCKET_BEHAVIOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGIONAL_USER_OWNED_BUCKET = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildOptionsLogStreamingOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAM_DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAM_ON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STREAM_OFF = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildOptionsLogging
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOGGING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGACY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GCS_ONLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STACKDRIVER_ONLY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_LOGGING_ONLY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildOptionsMachineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		N1_HIGHCPU_8 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		N1_HIGHCPU_32 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E2_HIGHCPU_8 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E2_HIGHCPU_32 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		E2_MEDIUM = 5,
	}
	
	/// <summary>
	/// Details about how a build should be executed on a `WorkerPool`. See [running builds in a private pool](https://cloud.google.com/build/docs/private-pools/run-builds-in-private-pool) for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PoolOption
	{
		
		/// <summary>
		/// The `WorkerPool` resource to execute the build on. You must have `cloudbuild.workerpools.use` on the project hosting the WorkerPool. Format projects/{project}/locations/{location}/workerPools/{workerPoolId}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildOptionsRequestedVerifyOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_VERIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERIFIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildOptionsSubstitutionOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MUST_MATCH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_LOOSE = 1,
	}
	
	/// <summary>
	/// Volume describes a Docker container volume which is mounted into build steps in order to persist files across build step execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Volume
	{
		
		/// <summary>
		/// Name of the volume to mount. Volume names must be unique per build step and must be valid names for Docker volumes. Each named volume must be used by at least two build steps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Path at which to mount the volume. Paths must be absolute and cannot conflict with other volume paths on the same build step or with certain reserved volume paths.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
	}
	
	/// <summary>
	/// Artifacts created by the build pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Results
	{
		
		/// <summary>
		/// Path to the artifact manifest for non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactManifest")]
		public string ArtifactManifest { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="artifactTiming")]
		public TimeSpan ArtifactTiming { get; set; }
		
		/// <summary>
		/// List of build step digests, in the order corresponding to build step indices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildStepImages")]
		public string[] BuildStepImages { get; set; }
		
		/// <summary>
		/// List of build step outputs, produced by builder images, in the order corresponding to build step indices. [Cloud Builders](https://cloud.google.com/cloud-build/docs/cloud-builders) can produce this output by writing to `$BUILDER_OUTPUT/output`. Only the first 50KB of data is stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildStepOutputs")]
		public string[] BuildStepOutputs { get; set; }
		
		/// <summary>
		/// Container images that were built as a part of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		public BuiltImage[] Images { get; set; }
		
		/// <summary>
		/// Maven artifacts uploaded to Artifact Registry at the end of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mavenArtifacts")]
		public UploadedMavenArtifact[] MavenArtifacts { get; set; }
		
		/// <summary>
		/// Npm packages uploaded to Artifact Registry at the end of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="npmPackages")]
		public UploadedNpmPackage[] NpmPackages { get; set; }
		
		/// <summary>
		/// Number of non-container artifacts uploaded to Cloud Storage. Only populated when artifacts are uploaded to Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numArtifacts")]
		public string NumArtifacts { get; set; }
		
		/// <summary>
		/// Python artifacts uploaded to Artifact Registry at the end of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonPackages")]
		public UploadedPythonPackage[] PythonPackages { get; set; }
	}
	
	/// <summary>
	/// An image built by the pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuiltImage
	{
		
		/// <summary>
		/// Docker Registry 2.0 digest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public string Digest { get; set; }
		
		/// <summary>
		/// Name used to push the container image to Google Container Registry, as presented to `docker push`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushTiming")]
		public TimeSpan PushTiming { get; set; }
	}
	
	/// <summary>
	/// A Maven artifact uploaded using the MavenArtifact directive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadedMavenArtifact
	{
		
		/// <summary>
		/// Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHashes")]
		public FileHashes FileHashes { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushTiming")]
		public TimeSpan PushTiming { get; set; }
		
		/// <summary>
		/// URI of the uploaded artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// An npm package uploaded to Artifact Registry using the NpmPackage directive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadedNpmPackage
	{
		
		/// <summary>
		/// Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHashes")]
		public FileHashes FileHashes { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushTiming")]
		public TimeSpan PushTiming { get; set; }
		
		/// <summary>
		/// URI of the uploaded npm package.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Artifact uploaded using the PythonPackage directive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UploadedPythonPackage
	{
		
		/// <summary>
		/// Container message for hashes of byte content of files, used in SourceProvenance messages to verify integrity of source input to the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHashes")]
		public FileHashes FileHashes { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pushTiming")]
		public TimeSpan PushTiming { get; set; }
		
		/// <summary>
		/// URI of the uploaded artifact.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// Pairs a set of secret environment variables containing encrypted values with the Cloud KMS key to use to decrypt the value. Note: Use `kmsKeyName` with `available_secrets` instead of using `kmsKeyName` with `secret`. For instructions see: https://cloud.google.com/cloud-build/docs/securing-builds/use-encrypted-credentials.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Secret
	{
		
		/// <summary>
		/// Cloud KMS key name to use to decrypt these envs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
		
		/// <summary>
		/// Map of environment variable name to its encrypted value. Secret environment variables must be unique across all of a build's secrets, and must be used by at least one build step. Values can be at most 64 KB in size. There can be at most 100 secret values across all of a build's secrets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretEnv")]
		public System.Collections.Generic.Dictionary<string, string> SecretEnv { get; set; }
	}
	
	/// <summary>
	/// Location of the source in a supported storage service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Source
	{
		
		/// <summary>
		/// Location of the source in a 2nd-gen Google Cloud Build repository resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectedRepository")]
		public ConnectedRepository ConnectedRepository { get; set; }
		
		/// <summary>
		/// Location of the source in any accessible Git repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitSource")]
		public GitSource GitSource { get; set; }
		
		/// <summary>
		/// Location of the source in a Google Cloud Source Repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoSource")]
		public RepoSource RepoSource { get; set; }
		
		/// <summary>
		/// Location of the source in an archive file in Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageSource")]
		public StorageSource StorageSource { get; set; }
		
		/// <summary>
		/// Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageSourceManifest")]
		public StorageSourceManifest StorageSourceManifest { get; set; }
	}
	
	/// <summary>
	/// Location of the source in a 2nd-gen Google Cloud Build repository resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConnectedRepository
	{
		
		/// <summary>
		/// Directory, relative to the source root, in which to run the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Required. Name of the Google Cloud Build repository, formatted as `projects/*/locations/*/connections/*/repositories/*`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		/// <summary>
		/// The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
	}
	
	/// <summary>
	/// Location of the source in any accessible Git repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitSource
	{
		
		/// <summary>
		/// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// The revision to fetch from the Git repository such as a branch, a tag, a commit SHA, or any Git ref. Cloud Build uses `git fetch` to fetch the revision from the Git repository; therefore make sure that the string you provide for `revision` is parsable by the command. For information on string values accepted by `git fetch`, see https://git-scm.com/docs/gitrevisions#_specifying_revisions. For information on `git fetch`, see https://git-scm.com/docs/git-fetch.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
		
		/// <summary>
		/// Location of the Git repo to build. This will be used as a `git remote`, see https://git-scm.com/docs/git-remote.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Location of the source in a Google Cloud Source Repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepoSource
	{
		
		/// <summary>
		/// Regex matching branches to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		/// <summary>
		/// Explicit commit SHA to build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitSha")]
		public string CommitSha { get; set; }
		
		/// <summary>
		/// Directory, relative to the source root, in which to run the build. This must be a relative path. If a step's `dir` is specified and is an absolute path, this value is ignored for that step's execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Only trigger a build if the revision regex does NOT match the revision regex.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invertRegex")]
		public System.Nullable<System.Boolean> InvertRegex { get; set; }
		
		/// <summary>
		/// ID of the project that owns the Cloud Source Repository. If omitted, the project ID requesting the build is assumed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Name of the Cloud Source Repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoName")]
		public string RepoName { get; set; }
		
		/// <summary>
		/// Substitutions to use in a triggered build. Should only be used with RunBuildTrigger
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="substitutions")]
		public System.Collections.Generic.Dictionary<string, string> Substitutions { get; set; }
		
		/// <summary>
		/// Regex matching tags to build. The syntax of the regular expressions accepted is the syntax accepted by RE2 and described at https://github.com/google/re2/wiki/Syntax
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagName")]
		public string TagName { get; set; }
	}
	
	/// <summary>
	/// Location of the source in an archive file in Cloud Storage.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageSource
	{
		
		/// <summary>
		/// Cloud Storage bucket containing the source (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generation")]
		public string Generation { get; set; }
		
		/// <summary>
		/// Cloud Storage object containing the source. This object must be a zipped (`.zip`) or gzipped archive file (`.tar.gz`) containing source to build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		/// <summary>
		/// Optional. Option to specify the tool to fetch the source file for the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceFetcher")]
		public System.Nullable<StorageSourceSourceFetcher> SourceFetcher { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StorageSourceSourceFetcher
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOURCE_FETCHER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GSUTIL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GCS_FETCHER = 2,
	}
	
	/// <summary>
	/// Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageSourceManifest
	{
		
		/// <summary>
		/// Cloud Storage bucket containing the source manifest (see [Bucket Name Requirements](https://cloud.google.com/storage/docs/bucket-naming#requirements)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Cloud Storage generation for the object. If the generation is omitted, the latest generation will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generation")]
		public string Generation { get; set; }
		
		/// <summary>
		/// Cloud Storage object containing the source manifest. This object must be a JSON file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	/// <summary>
	/// Provenance of the source. Ways to find the original source, or verify that some source was used for this build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceProvenance
	{
		
		/// <summary>
		/// Output only. Hash(es) of the build source, which can be used to verify that the original source integrity was maintained in the build. Note that `FileHashes` will only be populated if `BuildOptions` has requested a `SourceProvenanceHash`. The keys to this map are file paths used as build source and the values contain the hash values for those files. If the build source came in a single package such as a gzipped tarfile (`.tar.gz`), the `FileHash` will be for the single path to that file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileHashes")]
		public System.Collections.Generic.Dictionary<string, FileHashes> FileHashes { get; set; }
		
		/// <summary>
		/// Location of the source in a 2nd-gen Google Cloud Build repository resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedConnectedRepository")]
		public ConnectedRepository ResolvedConnectedRepository { get; set; }
		
		/// <summary>
		/// Location of the source in any accessible Git repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedGitSource")]
		public GitSource ResolvedGitSource { get; set; }
		
		/// <summary>
		/// Location of the source in a Google Cloud Source Repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedRepoSource")]
		public RepoSource ResolvedRepoSource { get; set; }
		
		/// <summary>
		/// Location of the source in an archive file in Cloud Storage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedStorageSource")]
		public StorageSource ResolvedStorageSource { get; set; }
		
		/// <summary>
		/// Location of the source manifest in Cloud Storage. This feature is in Preview; see description [here](https://github.com/GoogleCloudPlatform/cloud-builders/tree/master/gcs-fetcher).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resolvedStorageSourceManifest")]
		public StorageSourceManifest ResolvedStorageSourceManifest { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATUS_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILURE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMEOUT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELLED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 9,
	}
	
	/// <summary>
	/// A step in the build pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildStep
	{
		
		/// <summary>
		/// Allow this build step to fail without failing the entire build if and only if the exit code is one of the specified codes. If allow_failure is also specified, this field will take precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowExitCodes")]
		public int[] AllowExitCodes { get; set; }
		
		/// <summary>
		/// Allow this build step to fail without failing the entire build. If false, the entire build will fail if this step fails. Otherwise, the build will succeed, but this step will still have a failure status. Error information will be reported in the failure_detail field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowFailure")]
		public System.Nullable<System.Boolean> AllowFailure { get; set; }
		
		/// <summary>
		/// A list of arguments that will be presented to the step when it is started. If the image used to run the step's container has an entrypoint, the `args` are used as arguments to that entrypoint. If the image does not define an entrypoint, the first element in args is used as the entrypoint, and the remainder will be used as arguments.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public string[] Args { get; set; }
		
		/// <summary>
		/// Option to include built-in and custom substitutions as env variables for this build step. This option will override the global option in BuildOption.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="automapSubstitutions")]
		public System.Nullable<System.Boolean> AutomapSubstitutions { get; set; }
		
		/// <summary>
		/// Working directory to use when running this step's container. If this value is a relative path, it is relative to the build's working directory. If this value is absolute, it may be outside the build's working directory, in which case the contents of the path may not be persisted across build step executions, unless a `volume` for that path is specified. If the build specifies a `RepoSource` with `dir` and a step with a `dir`, which specifies an absolute path, the `RepoSource` `dir` is ignored for the step's execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dir")]
		public string Dir { get; set; }
		
		/// <summary>
		/// Entrypoint to be used instead of the build step image's default entrypoint. If unset, the image's default entrypoint is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entrypoint")]
		public string Entrypoint { get; set; }
		
		/// <summary>
		/// A list of environment variable definitions to be used when running a step. The elements are of the form "KEY=VALUE" for the environment variable "KEY" being given the value "VALUE".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="env")]
		public string[] Env { get; set; }
		
		/// <summary>
		/// Output only. Return code from running the step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
		
		/// <summary>
		/// Unique identifier for this build step, used in `wait_for` to reference this build step as a dependency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required. The name of the container image that will run this particular build step. If the image is available in the host's Docker daemon's cache, it will be run directly. If not, the host will attempt to pull the image first, using the builder service account's credentials if necessary. The Docker daemon's cache will already have the latest versions of all of the officially supported build steps ([https://github.com/GoogleCloudPlatform/cloud-builders](https://github.com/GoogleCloudPlatform/cloud-builders)). The Docker daemon will also have cached many of the layers for some popular images, like "ubuntu", "debian", but they will be refreshed at the time you attempt to use them. If you built an image in a previous build step, it will be stored in the host's Docker daemon's cache and is available to use as the name for a later build step.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullTiming")]
		public TimeSpan PullTiming { get; set; }
		
		/// <summary>
		/// A shell script to be executed in the step. When script is provided, the user cannot specify the entrypoint or args.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// A list of environment variables which are encrypted using a Cloud Key Management Service crypto key. These values must be specified in the build's `Secret`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretEnv")]
		public string[] SecretEnv { get; set; }
		
		/// <summary>
		/// Output only. Status of the build step. At this time, build step status is only updated on build completion; step status is not updated in real-time as the build progresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public BuildStatus Status { get; set; }
		
		/// <summary>
		/// Time limit for executing this build step. If not defined, the step has no time limit and will be allowed to continue to run until either it completes or the build itself times out.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeout")]
		public string Timeout { get; set; }
		
		/// <summary>
		/// Start and end times for a build execution phase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timing")]
		public TimeSpan Timing { get; set; }
		
		/// <summary>
		/// List of volumes to mount into the build step. Each volume is created as an empty volume prior to execution of the build step. Upon completion of the build, volumes and their contents are discarded. Using a named volume in only one step is not valid as it is indicative of a build request with an incorrect configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public Volume[] Volumes { get; set; }
		
		/// <summary>
		/// The ID(s) of the step(s) that this build step depends on. This build step will not start until all the build steps in `wait_for` have completed successfully. If `wait_for` is empty, this build step will start when all previous build steps in the `Build.Steps` list have completed successfully.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitFor")]
		public string[] WaitFor { get; set; }
	}
	
	/// <summary>
	/// A non-fatal problem encountered during the execution of the build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Warning
	{
		
		/// <summary>
		/// The priority for this warning.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<WarningPriority> Priority { get; set; }
		
		/// <summary>
		/// Explanation of the warning generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WarningPriority
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIORITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALERT = 3,
	}
	
	/// <summary>
	/// Metadata for build operations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildOperationMetadata
	{
		
		/// <summary>
		/// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="build")]
		public Build Build { get; set; }
	}
	
	/// <summary>
	/// Configuration for an automated build in response to source repository changes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BuildTrigger
	{
		
		/// <summary>
		/// ApprovalConfig describes configuration for manual approval of a build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalConfig")]
		public ApprovalConfig ApprovalConfig { get; set; }
		
		/// <summary>
		/// Autodetect build configuration. The following precedence is used (case insensitive): 1. cloudbuild.yaml 2. cloudbuild.yml 3. cloudbuild.json 4. Dockerfile Currently only available for GitHub App Triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autodetect")]
		public System.Nullable<System.Boolean> Autodetect { get; set; }
		
		/// <summary>
		/// BitbucketServerTriggerConfig describes the configuration of a trigger that creates a build whenever a Bitbucket Server event is received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitbucketServerTriggerConfig")]
		public BitbucketServerTriggerConfig BitbucketServerTriggerConfig { get; set; }
		
		/// <summary>
		/// A build resource in the Cloud Build API. At a high level, a `Build` describes where to find source code, how to build it (for example, the builder image to run on the source), and where to store the built artifacts. Fields can include the following variables, which will be expanded when the build is created: - $PROJECT_ID: the project ID of the build. - $PROJECT_NUMBER: the project number of the build. - $LOCATION: the location/region of the build. - $BUILD_ID: the autogenerated ID of the build. - $REPO_NAME: the source repository name specified by RepoSource. - $BRANCH_NAME: the branch name specified by RepoSource. - $TAG_NAME: the tag name specified by RepoSource. - $REVISION_ID or $COMMIT_SHA: the commit SHA specified by RepoSource or resolved from the specified branch or tag. - $SHORT_SHA: first 7 characters of $REVISION_ID or $COMMIT_SHA.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="build")]
		public Build Build { get; set; }
		
		/// <summary>
		/// Output only. Time when the trigger was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Human-readable description of this trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// If true, the trigger will never automatically execute a build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		/// <summary>
		/// EventType allows the user to explicitly set the type of event to which this BuildTrigger should respond. This field will be validated against the rest of the configuration if it is set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public System.Nullable<BuildTriggerEventType> EventType { get; set; }
		
		/// <summary>
		/// Path, from the source root, to the build configuration file (i.e. cloudbuild.yaml).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
		
		/// <summary>
		/// A Common Expression Language string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
		
		/// <summary>
		/// GitFileSource describes a file within a (possibly remote) code repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitFileSource")]
		public GitFileSource GitFileSource { get; set; }
		
		/// <summary>
		/// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="github")]
		public GitHubEventsConfig Github { get; set; }
		
		/// <summary>
		/// GitLabEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab event is received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitlabEnterpriseEventsConfig")]
		public GitLabEventsConfig GitlabEnterpriseEventsConfig { get; set; }
		
		/// <summary>
		/// Output only. Unique identifier of the trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// ignored_files and included_files are file glob matches using https://golang.org/pkg/path/filepath/#Match extended with support for "**". If ignored_files and changed files are both empty, then they are not used to determine whether or not to trigger a build. If ignored_files is not empty, then we ignore any files that match any of the ignored_file globs. If the change has no files that are outside of the ignored_files globs, then we do not trigger a build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ignoredFiles")]
		public string[] IgnoredFiles { get; set; }
		
		/// <summary>
		/// If set to INCLUDE_BUILD_LOGS_WITH_STATUS, log url will be shown on GitHub page when build status is final. Setting this field to INCLUDE_BUILD_LOGS_WITH_STATUS for non GitHub triggers results in INVALID_ARGUMENT error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeBuildLogs")]
		public System.Nullable<BuildTriggerIncludeBuildLogs> IncludeBuildLogs { get; set; }
		
		/// <summary>
		/// If any of the files altered in the commit pass the ignored_files filter and included_files is empty, then as far as this filter is concerned, we should trigger the build. If any of the files altered in the commit pass the ignored_files filter and included_files is not empty, then we make sure that at least one of those files matches a included_files glob. If not, then we do not trigger a build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedFiles")]
		public string[] IncludedFiles { get; set; }
		
		/// <summary>
		/// User-assigned name of the trigger. Must be unique within the project. Trigger names must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pubsubConfig")]
		public PubsubConfig PubsubConfig { get; set; }
		
		/// <summary>
		/// The configuration of a trigger that creates a build whenever an event from Repo API is received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositoryEventConfig")]
		public RepositoryEventConfig RepositoryEventConfig { get; set; }
		
		/// <summary>
		/// The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		/// <summary>
		/// The service account used for all user-controlled operations including UpdateBuildTrigger, RunBuildTrigger, CreateBuild, and CancelBuild. If no service account is set, then the standard Cloud Build service account ([PROJECT_NUM]@system.gserviceaccount.com) will be used instead. Format: `projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT_ID_OR_EMAIL}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public string ServiceAccount { get; set; }
		
		/// <summary>
		/// GitRepoSource describes a repo and ref of a code repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceToBuild")]
		public GitRepoSource SourceToBuild { get; set; }
		
		/// <summary>
		/// Substitutions for Build resource. The keys must match the following regular expression: `^_[A-Z0-9_]+$`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="substitutions")]
		public System.Collections.Generic.Dictionary<string, string> Substitutions { get; set; }
		
		/// <summary>
		/// Tags for annotation of a `BuildTrigger`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
		
		/// <summary>
		/// Location of the source in a Google Cloud Source Repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerTemplate")]
		public RepoSource TriggerTemplate { get; set; }
		
		/// <summary>
		/// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookConfig")]
		public WebhookConfig WebhookConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildTriggerEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEBHOOK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBSUB = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 4,
	}
	
	/// <summary>
	/// GitFileSource describes a file within a (possibly remote) code repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitFileSource
	{
		
		/// <summary>
		/// The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitbucketServerConfig")]
		public string BitbucketServerConfig { get; set; }
		
		/// <summary>
		/// The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="githubEnterpriseConfig")]
		public string GithubEnterpriseConfig { get; set; }
		
		/// <summary>
		/// The path of the file, with the repo root as the root of the path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// See RepoType above.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoType")]
		public System.Nullable<GitFileSourceRepoType> RepoType { get; set; }
		
		/// <summary>
		/// The fully qualified resource name of the Repos API repository. Either URI or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		/// <summary>
		/// The branch, tag, arbitrary ref, or SHA version of the repo to use when resolving the filename (optional). This field respects the same syntax/resolution as described here: https://git-scm.com/docs/gitrevisions If unspecified, the revision from which the trigger invocation originated is assumed to be the revision from which to read the specified path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revision")]
		public string Revision { get; set; }
		
		/// <summary>
		/// The URI of the repo. Either uri or repository can be specified. If unspecified, the repo from which the trigger invocation originated is assumed to be the repo from which to read the specified path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GitFileSourceRepoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_SOURCE_REPOSITORIES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITBUCKET_SERVER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITLAB = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITBUCKET_CLOUD = 5,
	}
	
	/// <summary>
	/// GitHubEventsConfig describes the configuration of a trigger that creates a build whenever a GitHub event is received.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitHubEventsConfig
	{
		
		/// <summary>
		/// Optional. The resource name of the github enterprise config that should be applied to this installation. For example: "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enterpriseConfigResourceName")]
		public string EnterpriseConfigResourceName { get; set; }
		
		/// <summary>
		/// The installationID that emits the GitHub event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="installationId")]
		public string InstallationId { get; set; }
		
		/// <summary>
		/// Name of the repository. For example: The name for https://github.com/googlecloudplatform/cloud-builders is "cloud-builders".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Owner of the repository. For example: The owner for https://github.com/googlecloudplatform/cloud-builders is "googlecloudplatform".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		/// <summary>
		/// PullRequestFilter contains filter properties for matching GitHub Pull Requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequest")]
		public PullRequestFilter PullRequest { get; set; }
		
		/// <summary>
		/// Push contains filter properties for matching GitHub git pushes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="push")]
		public PushFilter Push { get; set; }
	}
	
	/// <summary>
	/// GitLabEventsConfig describes the configuration of a trigger that creates a build whenever a GitLab event is received.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitLabEventsConfig
	{
		
		/// <summary>
		/// GitLabConfig represents the configuration for a GitLab integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitlabConfig")]
		public GitLabConfig GitlabConfig { get; set; }
		
		/// <summary>
		/// The GitLab config resource that this trigger config maps to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitlabConfigResource")]
		public string GitlabConfigResource { get; set; }
		
		/// <summary>
		/// Namespace of the GitLab project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectNamespace")]
		public string ProjectNamespace { get; set; }
		
		/// <summary>
		/// PullRequestFilter contains filter properties for matching GitHub Pull Requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequest")]
		public PullRequestFilter PullRequest { get; set; }
		
		/// <summary>
		/// Push contains filter properties for matching GitHub git pushes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="push")]
		public PushFilter Push { get; set; }
	}
	
	/// <summary>
	/// GitLabConfig represents the configuration for a GitLab integration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitLabConfig
	{
		
		/// <summary>
		/// Connected GitLab.com or GitLabEnterprise repositories for this config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectedRepositories")]
		public GitLabRepositoryId[] ConnectedRepositories { get; set; }
		
		/// <summary>
		/// Output only. Time when the config was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// GitLabEnterpriseConfig represents the configuration for a GitLabEnterprise integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enterpriseConfig")]
		public GitLabEnterpriseConfig EnterpriseConfig { get; set; }
		
		/// <summary>
		/// The resource name for the config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// GitLabSecrets represents the secrets in Secret Manager for a GitLab integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secrets")]
		public GitLabSecrets Secrets { get; set; }
		
		/// <summary>
		/// Username of the GitLab.com or GitLab Enterprise account Cloud Build will use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
		
		/// <summary>
		/// Output only. UUID included in webhook requests. The UUID is used to look up the corresponding config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookKey")]
		public string WebhookKey { get; set; }
	}
	
	/// <summary>
	/// GitLabEnterpriseConfig represents the configuration for a GitLabEnterprise integration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitLabEnterpriseConfig
	{
		
		/// <summary>
		/// Immutable. The URI of the GitlabEnterprise host.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostUri")]
		public string HostUri { get; set; }
		
		/// <summary>
		/// ServiceDirectoryConfig represents Service Directory configuration for a SCM host connection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceDirectoryConfig")]
		public ServiceDirectoryConfig ServiceDirectoryConfig { get; set; }
		
		/// <summary>
		/// The SSL certificate to use in requests to GitLab Enterprise instances.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslCa")]
		public string SslCa { get; set; }
	}
	
	/// <summary>
	/// ServiceDirectoryConfig represents Service Directory configuration for a SCM host connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceDirectoryConfig
	{
		
		/// <summary>
		/// The Service Directory service name. Format: projects/{project}/locations/{location}/namespaces/{namespace}/services/{service}.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	/// <summary>
	/// GitLabSecrets represents the secrets in Secret Manager for a GitLab integration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitLabSecrets
	{
		
		/// <summary>
		/// Required. The resource name for the api access token’s secret version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiAccessTokenVersion")]
		public string ApiAccessTokenVersion { get; set; }
		
		/// <summary>
		/// Required. Immutable. API Key that will be attached to webhook requests from GitLab to Cloud Build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiKeyVersion")]
		public string ApiKeyVersion { get; set; }
		
		/// <summary>
		/// Required. The resource name for the read access token’s secret version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readAccessTokenVersion")]
		public string ReadAccessTokenVersion { get; set; }
		
		/// <summary>
		/// Required. Immutable. The resource name for the webhook secret’s secret version. Once this field has been set, it cannot be changed. If you need to change it, please create another GitLabConfig.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookSecretVersion")]
		public string WebhookSecretVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BuildTriggerIncludeBuildLogs
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE_BUILD_LOGS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCLUDE_BUILD_LOGS_WITH_STATUS = 1,
	}
	
	/// <summary>
	/// PubsubConfig describes the configuration of a trigger that creates a build whenever a Pub/Sub message is published.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PubsubConfig
	{
		
		/// <summary>
		/// Service account that will make the push request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccountEmail")]
		public string ServiceAccountEmail { get; set; }
		
		/// <summary>
		/// Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<PubsubConfigState> State { get; set; }
		
		/// <summary>
		/// Output only. Name of the subscription. Format is `projects/{project}/subscriptions/{subscription}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscription")]
		public string Subscription { get; set; }
		
		/// <summary>
		/// The name of the topic from which this subscription is receiving messages. Format is `projects/{project}/topics/{topic}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public string Topic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PubsubConfigState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_DELETED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOPIC_DELETED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPTION_MISCONFIGURED = 4,
	}
	
	/// <summary>
	/// The configuration of a trigger that creates a build whenever an event from Repo API is received.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepositoryEventConfig
	{
		
		/// <summary>
		/// PullRequestFilter contains filter properties for matching GitHub Pull Requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequest")]
		public PullRequestFilter PullRequest { get; set; }
		
		/// <summary>
		/// Push contains filter properties for matching GitHub git pushes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="push")]
		public PushFilter Push { get; set; }
		
		/// <summary>
		/// The resource name of the Repo API resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		/// <summary>
		/// Output only. The type of the SCM vendor the repository points to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositoryType")]
		public System.Nullable<RepositoryEventConfigRepositoryType> RepositoryType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RepositoryEventConfigRepositoryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPOSITORY_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITHUB_ENTERPRISE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GITLAB_ENTERPRISE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITBUCKET_DATA_CENTER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BITBUCKET_CLOUD = 5,
	}
	
	/// <summary>
	/// GitRepoSource describes a repo and ref of a code repository.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitRepoSource
	{
		
		/// <summary>
		/// The full resource name of the bitbucket server config. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitbucketServerConfig")]
		public string BitbucketServerConfig { get; set; }
		
		/// <summary>
		/// The full resource name of the github enterprise config. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`. `projects/{project}/githubEnterpriseConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="githubEnterpriseConfig")]
		public string GithubEnterpriseConfig { get; set; }
		
		/// <summary>
		/// The branch or tag to use. Must start with "refs/" (required).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ref")]
		public string Ref { get; set; }
		
		/// <summary>
		/// See RepoType below.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repoType")]
		public GitFileSourceRepoType RepoType { get; set; }
		
		/// <summary>
		/// The connected repository resource name, in the format `projects/*/locations/*/connections/*/repositories/*`. Either `uri` or `repository` can be specified and is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		/// <summary>
		/// The URI of the repo (e.g. https://github.com/user/repo.git). Either `uri` or `repository` can be specified and is required.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// WebhookConfig describes the configuration of a trigger that creates a build whenever a webhook is sent to a trigger's webhook URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WebhookConfig
	{
		
		/// <summary>
		/// Required. Resource name for the secret required as a URL parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
		
		/// <summary>
		/// Potential issues with the underlying Pub/Sub subscription configuration. Only populated on get requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<WebhookConfigState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WebhookConfigState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECRET_DELETED = 2,
	}
	
	/// <summary>
	/// Request to cancel an ongoing build.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelBuildRequest
	{
		
		/// <summary>
		/// Required. ID of the build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the `Build` to cancel. Format: `projects/{project}/locations/{location}/builds/{build}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. ID of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	/// <summary>
	/// The request message for Operations.CancelOperation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelOperationRequest
	{
	}
	
	/// <summary>
	/// Metadata for `CreateBitbucketServerConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateBitbucketServerConfigOperationMetadata
	{
		
		/// <summary>
		/// The resource name of the BitbucketServerConfig to be created. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitbucketServerConfig")]
		public string BitbucketServerConfig { get; set; }
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
	}
	
	/// <summary>
	/// Metadata for `CreateGithubEnterpriseConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGitHubEnterpriseConfigOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="githubEnterpriseConfig")]
		public string GithubEnterpriseConfig { get; set; }
	}
	
	/// <summary>
	/// Metadata for `CreateGitLabConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateGitLabConfigOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitlabConfig")]
		public string GitlabConfig { get; set; }
	}
	
	/// <summary>
	/// Metadata for the `CreateWorkerPool` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateWorkerPoolOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the `WorkerPool` to create. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerPool")]
		public string WorkerPool { get; set; }
	}
	
	/// <summary>
	/// Metadata for `DeleteBitbucketServerConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBitbucketServerConfigOperationMetadata
	{
		
		/// <summary>
		/// The resource name of the BitbucketServerConfig to be deleted. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitbucketServerConfig")]
		public string BitbucketServerConfig { get; set; }
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
	}
	
	/// <summary>
	/// Metadata for `DeleteGitHubEnterpriseConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteGitHubEnterpriseConfigOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the GitHubEnterprise to be deleted. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="githubEnterpriseConfig")]
		public string GithubEnterpriseConfig { get; set; }
	}
	
	/// <summary>
	/// Metadata for `DeleteGitLabConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteGitLabConfigOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitlabConfig")]
		public string GitlabConfig { get; set; }
	}
	
	/// <summary>
	/// Metadata for the `DeleteWorkerPool` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteWorkerPoolOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the `WorkerPool` being deleted. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerPool")]
		public string WorkerPool { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// GitHubEnterpriseConfig represents a configuration for a GitHub Enterprise server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitHubEnterpriseConfig
	{
		
		/// <summary>
		/// Required. The GitHub app id of the Cloud Build app on the GitHub Enterprise server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Output only. Time when the installation was associated with the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Name to display for this config.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The URL of the github enterprise host the configuration is for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostUrl")]
		public string HostUrl { get; set; }
		
		/// <summary>
		/// Optional. The full resource name for the GitHubEnterpriseConfig For example: "projects/{$project_id}/locations/{$location_id}/githubEnterpriseConfigs/{$config_id}"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional. The network to be used when reaching out to the GitHub Enterprise server. The VPC network must be enabled for private service connection. This should be set if the GitHub Enterprise server is hosted on-premises and not reachable by public internet. If this field is left empty, no network peering will occur and calls to the GitHub Enterprise server will be made over the public internet. Must be in the format `projects/{project}/global/networks/{network}`, where {project} is a project number or id and {network} is the name of a VPC network in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peeredNetwork")]
		public string PeeredNetwork { get; set; }
		
		/// <summary>
		/// GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects//secrets/.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secrets")]
		public GitHubEnterpriseSecrets Secrets { get; set; }
		
		/// <summary>
		/// Optional. SSL certificate to use for requests to GitHub Enterprise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sslCa")]
		public string SslCa { get; set; }
		
		/// <summary>
		/// The key that should be attached to webhook calls to the ReceiveWebhook endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookKey")]
		public string WebhookKey { get; set; }
	}
	
	/// <summary>
	/// GitHubEnterpriseSecrets represents the names of all necessary secrets in Secret Manager for a GitHub Enterprise server. Format is: projects//secrets/.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitHubEnterpriseSecrets
	{
		
		/// <summary>
		/// The resource name for the OAuth client ID secret in Secret Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthClientIdName")]
		public string OauthClientIdName { get; set; }
		
		/// <summary>
		/// The resource name for the OAuth client ID secret version in Secret Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthClientIdVersionName")]
		public string OauthClientIdVersionName { get; set; }
		
		/// <summary>
		/// The resource name for the OAuth secret in Secret Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthSecretName")]
		public string OauthSecretName { get; set; }
		
		/// <summary>
		/// The resource name for the OAuth secret secret version in Secret Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthSecretVersionName")]
		public string OauthSecretVersionName { get; set; }
		
		/// <summary>
		/// The resource name for the private key secret.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateKeyName")]
		public string PrivateKeyName { get; set; }
		
		/// <summary>
		/// The resource name for the private key secret version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateKeyVersionName")]
		public string PrivateKeyVersionName { get; set; }
		
		/// <summary>
		/// The resource name for the webhook secret in Secret Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookSecretName")]
		public string WebhookSecretName { get; set; }
		
		/// <summary>
		/// The resource name for the webhook secret secret version in Secret Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhookSecretVersionName")]
		public string WebhookSecretVersionName { get; set; }
	}
	
	/// <summary>
	/// Proto Representing a GitLabRepository
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GitLabRepository
	{
		
		/// <summary>
		/// Link to the browse repo page on the GitLab instance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="browseUri")]
		public string BrowseUri { get; set; }
		
		/// <summary>
		/// Description of the repository
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Display name of the repository
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The resource name of the repository
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repositoryId")]
		public GitLabRepositoryId RepositoryId { get; set; }
	}
	
	/// <summary>
	/// Message that represents an arbitrary HTTP body. It should only be used for payload formats that can't be represented as JSON, such as raw binary or an HTML page. This message can be used both in streaming and non-streaming API methods in the request as well as the response. It can be used as a top-level request field, which is convenient if one wants to extract parameters from either the URL or HTTP template into the request fields and also want access to the raw HTTP body. Example: message GetResourceRequest { // A unique request id. string request_id = 1; // The raw HTTP body is bound to this field. google.api.HttpBody http_body = 2; } service ResourceService { rpc GetResource(GetResourceRequest) returns (google.api.HttpBody); rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty); } Example with streaming methods: service CaldavService { rpc GetCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); rpc UpdateCalendar(stream google.api.HttpBody) returns (stream google.api.HttpBody); } Use of this type only changes how the request and response bodies are handled, all other features will continue to work unchanged.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HttpBody
	{
		
		/// <summary>
		/// The HTTP Content-Type header value specifying the content type of the body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// The HTTP request/response body as raw binary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// Application specific response metadata. Must be set in the first response for streaming APIs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extensions")]
		public string[] Extensions { get; set; }
	}
	
	/// <summary>
	/// RPC response object returned by ListBitbucketServerConfigs RPC method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBitbucketServerConfigsResponse
	{
		
		/// <summary>
		/// A list of BitbucketServerConfigs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitbucketServerConfigs")]
		public BitbucketServerConfig[] BitbucketServerConfigs { get; set; }
		
		/// <summary>
		/// A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// RPC response object returned by the ListBitbucketServerRepositories RPC method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBitbucketServerRepositoriesResponse
	{
		
		/// <summary>
		/// List of Bitbucket Server repositories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitbucketServerRepositories")]
		public BitbucketServerRepository[] BitbucketServerRepositories { get; set; }
		
		/// <summary>
		/// A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response containing existing `BuildTriggers`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBuildTriggersResponse
	{
		
		/// <summary>
		/// Token to receive the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// `BuildTriggers` for the project, sorted by `create_time` descending.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggers")]
		public BuildTrigger[] Triggers { get; set; }
	}
	
	/// <summary>
	/// Response including listed builds.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListBuildsResponse
	{
		
		/// <summary>
		/// Builds will be sorted by `create_time`, descending.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="builds")]
		public Build[] Builds { get; set; }
		
		/// <summary>
		/// Token to receive the next page of results. This will be absent if the end of the response list has been reached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// RPC response object returned by ListGitLabConfigs RPC method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGitLabConfigsResponse
	{
		
		/// <summary>
		/// A list of GitLabConfigs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitlabConfigs")]
		public GitLabConfig[] GitlabConfigs { get; set; }
		
		/// <summary>
		/// A token that can be sent as `page_token` to retrieve the next page If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// RPC response object returned by the ListGitLabRepositories RPC method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGitLabRepositoriesResponse
	{
		
		/// <summary>
		/// List of GitLab repositories
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitlabRepositories")]
		public GitLabRepository[] GitlabRepositories { get; set; }
		
		/// <summary>
		/// A token that can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// RPC response object returned by ListGithubEnterpriseConfigs RPC method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGithubEnterpriseConfigsResponse
	{
		
		/// <summary>
		/// A list of GitHubEnterpriseConfigs
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configs")]
		public GitHubEnterpriseConfig[] Configs { get; set; }
	}
	
	/// <summary>
	/// Response containing existing `WorkerPools`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWorkerPoolsResponse
	{
		
		/// <summary>
		/// Continuation token used to page through large result sets. Provide this value in a subsequent ListWorkerPoolsRequest to return the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// `WorkerPools` for the specified project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerPools")]
		public WorkerPool[] WorkerPools { get; set; }
	}
	
	/// <summary>
	/// Configuration for a `WorkerPool`. Cloud Build owns and maintains a pool of workers for general use and have no access to a project's private network. By default, builds submitted to Cloud Build will use a worker from this pool. If your build needs access to resources on a private network, create and use a `WorkerPool` to run your builds. Private `WorkerPool`s give your builds access to any single VPC network that you administer, including any on-prem resources connected to that VPC network. For an overview of private pools, see [Private pools overview](https://cloud.google.com/build/docs/private-pools/private-pools-overview).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerPool
	{
		
		/// <summary>
		/// User specified annotations. See https://google.aip.dev/128#annotations for more details such as format and size limitations.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public System.Collections.Generic.Dictionary<string, string> Annotations { get; set; }
		
		/// <summary>
		/// Output only. Time at which the request to create the `WorkerPool` was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. Time at which the request to delete the `WorkerPool` was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTime")]
		public string DeleteTime { get; set; }
		
		/// <summary>
		/// A user-specified, human-readable name for the `WorkerPool`. If provided, this value must be 1-63 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. Checksum computed by the server. May be sent on update and delete requests to ensure that the client has an up-to-date value before proceeding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Configuration for a V1 `PrivatePool`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privatePoolV1Config")]
		public PrivatePoolV1Config PrivatePoolV1Config { get; set; }
		
		/// <summary>
		/// Output only. `WorkerPool` state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<WorkerPoolState> State { get; set; }
		
		/// <summary>
		/// Output only. A unique identifier for the `WorkerPool`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// Output only. Time at which the request to update the `WorkerPool` was received.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Configuration for a V1 `PrivatePool`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrivatePoolV1Config
	{
		
		/// <summary>
		/// Defines the network configuration for the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkConfig")]
		public NetworkConfig NetworkConfig { get; set; }
		
		/// <summary>
		/// Defines the configuration to be used for creating workers in the pool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerConfig")]
		public WorkerConfig WorkerConfig { get; set; }
	}
	
	/// <summary>
	/// Defines the network configuration for the pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkConfig
	{
		
		/// <summary>
		/// Option to configure network egress for the workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="egressOption")]
		public System.Nullable<NetworkConfigEgressOption> EgressOption { get; set; }
		
		/// <summary>
		/// Required. Immutable. The network definition that the workers are peered to. If this section is left empty, the workers will be peered to `WorkerPool.project_id` on the service producer network. Must be in the format `projects/{project}/global/networks/{network}`, where `{project}` is a project number, such as `12345`, and `{network}` is the name of a VPC network in the project. See [Understanding network configuration options](https://cloud.google.com/build/docs/private-pools/set-up-private-pool-environment)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peeredNetwork")]
		public string PeeredNetwork { get; set; }
		
		/// <summary>
		/// Immutable. Subnet IP range within the peered network. This is specified in CIDR notation with a slash and the subnet prefix size. You can optionally specify an IP address before the subnet prefix value. e.g. `192.168.0.0/29` would specify an IP range starting at 192.168.0.0 with a prefix size of 29 bits. `/16` would specify a prefix size of 16 bits, with an automatically determined IP within the peered VPC. If unspecified, a value of `/24` will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peeredNetworkIpRange")]
		public string PeeredNetworkIpRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkConfigEgressOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EGRESS_OPTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_PUBLIC_EGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC_EGRESS = 2,
	}
	
	/// <summary>
	/// Defines the configuration to be used for creating workers in the pool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerConfig
	{
		
		/// <summary>
		/// Size of the disk attached to the worker, in GB. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). Specify a value of up to 2000. If `0` is specified, Cloud Build will use a standard disk size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGb")]
		public string DiskSizeGb { get; set; }
		
		/// <summary>
		/// Machine type of a worker, such as `e2-medium`. See [Worker pool config file](https://cloud.google.com/build/docs/private-pools/worker-pool-config-file-schema). If left blank, Cloud Build will use a sensible default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WorkerPoolState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 5,
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// Represents the metadata of the long-running operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationMetadata
	{
		
		/// <summary>
		/// Output only. API version used to start the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		/// <summary>
		/// Output only. Identifies whether the user has requested cancellation of the operation. Operations that have been cancelled successfully have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cancelRequested")]
		public System.Nullable<System.Boolean> CancelRequested { get; set; }
		
		/// <summary>
		/// Output only. The time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time the operation finished running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. Human-readable status of the operation, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusDetail")]
		public string StatusDetail { get; set; }
		
		/// <summary>
		/// Output only. Server-defined resource path for the target of the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		/// <summary>
		/// Output only. Name of the verb executed by the operation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verb")]
		public string Verb { get; set; }
	}
	
	/// <summary>
	/// Metadata for `ProcessAppManifestCallback` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProcessAppManifestCallbackOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the GitHubEnterprise to be created. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="githubEnterpriseConfig")]
		public string GithubEnterpriseConfig { get; set; }
	}
	
	/// <summary>
	/// ReceiveTriggerWebhookResponse [Experimental] is the response object for the ReceiveTriggerWebhook method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReceiveTriggerWebhookResponse
	{
	}
	
	/// <summary>
	/// RPC request object accepted by RemoveBitbucketServerConnectedRepository RPC method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveBitbucketServerConnectedRepositoryRequest
	{
		
		/// <summary>
		/// BitbucketServerRepositoryId identifies a specific repository hosted on a Bitbucket Server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectedRepository")]
		public BitbucketServerRepositoryId ConnectedRepository { get; set; }
	}
	
	/// <summary>
	/// RPC request object accepted by RemoveGitLabConnectedRepository RPC method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveGitLabConnectedRepositoryRequest
	{
		
		/// <summary>
		/// GitLabRepositoryId identifies a specific repository hosted on GitLab.com or GitLabEnterprise
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectedRepository")]
		public GitLabRepositoryId ConnectedRepository { get; set; }
	}
	
	/// <summary>
	/// Specifies a build to retry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RetryBuildRequest
	{
		
		/// <summary>
		/// Required. Build ID of the original build.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. ID of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
	}
	
	/// <summary>
	/// Specifies a build trigger to run and the source to use.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunBuildTriggerRequest
	{
		
		/// <summary>
		/// Required. ID of the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Location of the source in a Google Cloud Source Repository.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public RepoSource Source { get; set; }
		
		/// <summary>
		/// Required. ID of the trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerId")]
		public string TriggerId { get; set; }
	}
	
	/// <summary>
	/// Metadata for `UpdateBitbucketServerConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBitbucketServerConfigOperationMetadata
	{
		
		/// <summary>
		/// The resource name of the BitbucketServerConfig to be updated. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitbucketServerConfig")]
		public string BitbucketServerConfig { get; set; }
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
	}
	
	/// <summary>
	/// Metadata for `UpdateGitHubEnterpriseConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGitHubEnterpriseConfigOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the GitHubEnterprise to be updated. Format: `projects/{project}/locations/{location}/githubEnterpriseConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="githubEnterpriseConfig")]
		public string GithubEnterpriseConfig { get; set; }
	}
	
	/// <summary>
	/// Metadata for `UpdateGitLabConfig` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateGitLabConfigOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the GitLabConfig to be created. Format: `projects/{project}/locations/{location}/gitlabConfigs/{id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gitlabConfig")]
		public string GitlabConfig { get; set; }
	}
	
	/// <summary>
	/// Metadata for the `UpdateWorkerPool` operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateWorkerPoolOperationMetadata
	{
		
		/// <summary>
		/// Time the operation was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeTime")]
		public string CompleteTime { get; set; }
		
		/// <summary>
		/// Time the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The resource name of the `WorkerPool` being updated. Format: `projects/{project}/locations/{location}/workerPools/{worker_pool}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workerPool")]
		public string WorkerPool { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// ReceiveGitHubDotComWebhook is called when the API receives a github.com webhook.
		/// Cloudbuild_githubDotComWebhook_receive v1/githubDotComWebhook:receive
		/// </summary>
		/// <param name="webhookKey">For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Cloudbuild_githubDotComWebhook_receiveAsync(string webhookKey, HttpBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/githubDotComWebhook:receive?webhookKey=" + (webhookKey==null? "" : System.Uri.EscapeDataString(webhookKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.
		/// Cloudbuild_projects_builds_list v1/projects/{projectId}/builds
		/// </summary>
		/// <param name="projectId">Required. ID of the project.</param>
		/// <param name="filter">The raw filter text to constrain the results.</param>
		/// <param name="pageSize">Number of results to return in the list.</param>
		/// <param name="pageToken">The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more.</param>
		/// <param name="parent">The parent of the collection of `Builds`. Format: `projects/{project}/locations/{location}`</param>
		/// <returns>Successful response</returns>
		public async Task<ListBuildsResponse> Cloudbuild_projects_builds_listAsync(string projectId, string filter, int pageSize, string pageToken, string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/builds&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBuildsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).
		/// Cloudbuild_projects_builds_create v1/projects/{projectId}/builds
		/// </summary>
		/// <param name="projectId">Required. ID of the project.</param>
		/// <param name="parent">The parent resource where this build will be created. Format: `projects/{project}/locations/{location}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_builds_createAsync(string projectId, string parent, Build requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/builds&parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a previously requested build. The `Build` that is returned includes its status (such as `SUCCESS`, `FAILURE`, or `WORKING`), and timing information.
		/// Cloudbuild_projects_builds_get v1/projects/{projectId}/builds/{id}
		/// </summary>
		/// <param name="projectId">Required. ID of the project.</param>
		/// <param name="id">Required. ID of the build.</param>
		/// <param name="name">The name of the `Build` to retrieve. Format: `projects/{project}/locations/{location}/builds/{build}`</param>
		/// <returns>Successful response</returns>
		public async Task<Build> Cloudbuild_projects_builds_getAsync(string projectId, string id, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/builds/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Build>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Cancels a build in progress.
		/// Cloudbuild_projects_builds_cancel v1/projects/{projectId}/builds/{id}:cancel
		/// </summary>
		/// <param name="projectId">Required. ID of the project.</param>
		/// <param name="id">Required. ID of the build.</param>
		/// <returns>Successful response</returns>
		public async Task<Build> Cloudbuild_projects_builds_cancelAsync(string projectId, string id, CancelBuildRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/builds/"+ (id==null? "" : System.Uri.EscapeDataString(id))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Build>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings.
		/// Cloudbuild_projects_builds_retry v1/projects/{projectId}/builds/{id}:retry
		/// </summary>
		/// <param name="projectId">Required. ID of the project.</param>
		/// <param name="id">Required. Build ID of the original build.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_builds_retryAsync(string projectId, string id, RetryBuildRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/builds/"+ (id==null? "" : System.Uri.EscapeDataString(id))+":retry";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists existing `BuildTrigger`s.
		/// Cloudbuild_projects_triggers_list v1/projects/{projectId}/triggers
		/// </summary>
		/// <param name="projectId">Required. ID of the project for which to list BuildTriggers.</param>
		/// <param name="pageSize">Number of results to return in the list.</param>
		/// <param name="pageToken">Token to provide to skip to a particular spot in the list.</param>
		/// <param name="parent">The parent of the collection of `Triggers`. Format: `projects/{project}/locations/{location}`</param>
		/// <returns>Successful response</returns>
		public async Task<ListBuildTriggersResponse> Cloudbuild_projects_triggers_listAsync(string projectId, int pageSize, string pageToken, string parent, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/triggers&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBuildTriggersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new `BuildTrigger`.
		/// Cloudbuild_projects_triggers_create v1/projects/{projectId}/triggers
		/// </summary>
		/// <param name="projectId">Required. ID of the project for which to configure automatic builds.</param>
		/// <param name="parent">The parent resource where this trigger will be created. Format: `projects/{project}/locations/{location}`</param>
		/// <returns>Successful response</returns>
		public async Task<BuildTrigger> Cloudbuild_projects_triggers_createAsync(string projectId, string parent, BuildTrigger requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/triggers&parent=" + (parent==null? "" : System.Uri.EscapeDataString(parent));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BuildTrigger>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a `BuildTrigger` by its project ID and trigger ID.
		/// Cloudbuild_projects_triggers_delete v1/projects/{projectId}/triggers/{triggerId}
		/// </summary>
		/// <param name="projectId">Required. ID of the project that owns the trigger.</param>
		/// <param name="triggerId">Required. ID of the `BuildTrigger` to delete.</param>
		/// <param name="name">The name of the `Trigger` to delete. Format: `projects/{project}/locations/{location}/triggers/{trigger}`</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Cloudbuild_projects_triggers_deleteAsync(string projectId, string triggerId, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/triggers/"+ (triggerId==null? "" : System.Uri.EscapeDataString(triggerId))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a `BuildTrigger`.
		/// Cloudbuild_projects_triggers_get v1/projects/{projectId}/triggers/{triggerId}
		/// </summary>
		/// <param name="projectId">Required. ID of the project that owns the trigger.</param>
		/// <param name="triggerId">Required. Identifier (`id` or `name`) of the `BuildTrigger` to get.</param>
		/// <param name="name">The name of the `Trigger` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`</param>
		/// <returns>Successful response</returns>
		public async Task<BuildTrigger> Cloudbuild_projects_triggers_getAsync(string projectId, string triggerId, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/triggers/"+ (triggerId==null? "" : System.Uri.EscapeDataString(triggerId))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BuildTrigger>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a `BuildTrigger` by its project ID and trigger ID.
		/// Cloudbuild_projects_triggers_patch v1/projects/{projectId}/triggers/{triggerId}
		/// </summary>
		/// <param name="projectId">Required. ID of the project that owns the trigger.</param>
		/// <param name="triggerId">Required. ID of the `BuildTrigger` to update.</param>
		/// <param name="updateMask">Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.</param>
		/// <returns>Successful response</returns>
		public async Task<BuildTrigger> Cloudbuild_projects_triggers_patchAsync(string projectId, string triggerId, string updateMask, BuildTrigger requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/triggers/"+ (triggerId==null? "" : System.Uri.EscapeDataString(triggerId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BuildTrigger>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs a `BuildTrigger` at a particular source revision. To run a regional or global trigger, use the POST request that includes the location endpoint in the path (ex. v1/projects/{projectId}/locations/{region}/triggers/{triggerId}:run). The POST request that does not include the location endpoint in the path can only be used when running global triggers.
		/// Cloudbuild_projects_triggers_run v1/projects/{projectId}/triggers/{triggerId}:run
		/// </summary>
		/// <param name="projectId">Required. ID of the project.</param>
		/// <param name="triggerId">Required. ID of the trigger.</param>
		/// <param name="name">The name of the `Trigger` to run. Format: `projects/{project}/locations/{location}/triggers/{trigger}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_triggers_runAsync(string projectId, string triggerId, string name, RepoSource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/triggers/"+ (triggerId==null? "" : System.Uri.EscapeDataString(triggerId))+":run&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger.
		/// Cloudbuild_projects_triggers_webhook v1/projects/{projectId}/triggers/{trigger}:webhook
		/// </summary>
		/// <param name="projectId">Project in which the specified trigger lives</param>
		/// <param name="trigger">Name of the trigger to run the payload against</param>
		/// <param name="name">The name of the `ReceiveTriggerWebhook` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`</param>
		/// <param name="secret">Secret token used for authorization if an OAuth token isn't provided.</param>
		/// <returns>Successful response</returns>
		public async Task<ReceiveTriggerWebhookResponse> Cloudbuild_projects_triggers_webhookAsync(string projectId, string trigger, string name, string secret, HttpBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/projects/"+ (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"/triggers/"+ (trigger==null? "" : System.Uri.EscapeDataString(trigger))+":webhook&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&secret=" + (secret==null? "" : System.Uri.EscapeDataString(secret));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReceiveTriggerWebhookResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ReceiveWebhook is called when the API receives a GitHub webhook.
		/// Cloudbuild_webhook v1/webhook
		/// </summary>
		/// <param name="webhookKey">For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Cloudbuild_webhookAsync(string webhookKey, HttpBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/webhook?webhookKey=" + (webhookKey==null? "" : System.Uri.EscapeDataString(webhookKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a Bitbucket Server repository from a given BitbucketServerConfig's connected repositories. This API is experimental.
		/// Cloudbuild_projects_locations_bitbucketServerConfigs_removeBitbucketServerConnectedRepository v1/{config}:removeBitbucketServerConnectedRepository
		/// </summary>
		/// <param name="config">Required. The name of the `BitbucketServerConfig` to remove a connected repository. Format: `projects/{project}/locations/{location}/bitbucketServerConfigs/{config}`</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Cloudbuild_projects_locations_bitbucketServerConfigs_removeBitbucketServerConnectedRepositoryAsync(string config, RemoveBitbucketServerConnectedRepositoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (config==null? "" : System.Uri.EscapeDataString(config))+":removeBitbucketServerConnectedRepository";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a GitLab repository from a given GitLabConfig's connected repositories. This API is experimental.
		/// Cloudbuild_projects_locations_gitLabConfigs_removeGitLabConnectedRepository v1/{config}:removeGitLabConnectedRepository
		/// </summary>
		/// <param name="config">Required. The name of the `GitLabConfig` to remove a connected repository. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Cloudbuild_projects_locations_gitLabConfigs_removeGitLabConnectedRepositoryAsync(string config, RemoveGitLabConnectedRepositoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (config==null? "" : System.Uri.EscapeDataString(config))+":removeGitLabConnectedRepository";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ReceiveRegionalWebhook is called when the API receives a regional GitHub webhook.
		/// Cloudbuild_locations_regionalWebhook v1/{location}/regionalWebhook
		/// </summary>
		/// <param name="location">Required. The location where the webhook should be sent.</param>
		/// <param name="webhookKey">For GitHub Enterprise webhooks, this key is used to associate the webhook request with the GitHubEnterpriseConfig to use for validation.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Cloudbuild_locations_regionalWebhookAsync(string location, string webhookKey, HttpBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/regionalWebhook&webhookKey=" + (webhookKey==null? "" : System.Uri.EscapeDataString(webhookKey));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a `WorkerPool`.
		/// Cloudbuild_projects_locations_workerPools_delete v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the `WorkerPool` to delete. Format: `projects/{project}/locations/{location}/workerPools/{workerPool}`.</param>
		/// <param name="allowMissing">If set to true, and the `WorkerPool` is not found, the request will succeed but no action will be taken on the server.</param>
		/// <param name="etag">Optional. If provided, it must match the server's etag on the workerpool for the request to be processed.</param>
		/// <param name="validateOnly">If set, validate the request and preview the response, but do not actually post it.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_workerPools_deleteAsync(string name, bool allowMissing, string etag, bool validateOnly, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&allowMissing="+allowMissing+"&etag=" + (etag==null? "" : System.Uri.EscapeDataString(etag))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns details of a `WorkerPool`.
		/// Cloudbuild_projects_locations_workerPools_get v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the `WorkerPool` to retrieve. Format: `projects/{project}/locations/{location}/workerPools/{workerPool}`.</param>
		/// <param name="projectId">Required. ID of the project that owns the trigger.</param>
		/// <param name="triggerId">Required. Identifier (`id` or `name`) of the `BuildTrigger` to get.</param>
		/// <returns>Successful response</returns>
		public async Task<WorkerPool> Cloudbuild_projects_locations_workerPools_getAsync(string name, string projectId, string triggerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&triggerId=" + (triggerId==null? "" : System.Uri.EscapeDataString(triggerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WorkerPool>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a `WorkerPool`.
		/// Cloudbuild_projects_locations_workerPools_patch v1/{name}
		/// </summary>
		/// <param name="name">Output only. The resource name of the `WorkerPool`, with format `projects/{project}/locations/{location}/workerPools/{worker_pool}`. The value of `{worker_pool}` is provided by `worker_pool_id` in `CreateWorkerPool` request and the value of `{location}` is determined by the endpoint accessed.</param>
		/// <param name="updateMask">A mask specifying which fields in `worker_pool` to update.</param>
		/// <param name="validateOnly">If set, validate the request and preview the response, but do not actually post it.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_workerPools_patchAsync(string name, string updateMask, bool validateOnly, WorkerPool requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask))+"&validateOnly="+validateOnly;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Approves or rejects a pending build. If approved, the returned LRO will be analogous to the LRO returned from a CreateBuild call. If rejected, the returned LRO will be immediately done.
		/// Cloudbuild_projects_locations_builds_approve v1/{name}:approve
		/// </summary>
		/// <param name="name">Required. Name of the target build. For example: "projects/{$project_id}/builds/{$build_id}"</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_builds_approveAsync(string name, ApproveBuildRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":approve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.
		/// Cloudbuild_projects_locations_operations_cancel v1/{name}:cancel
		/// </summary>
		/// <param name="name">The name of the operation resource to be cancelled.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Cloudbuild_projects_locations_operations_cancelAsync(string name, CancelOperationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new build based on the specified build. This method creates a new build using the original build request, which may or may not result in an identical build. For triggered builds: * Triggered builds resolve to a precise revision; therefore a retry of a triggered build will result in a build that uses the same revision. For non-triggered builds that specify `RepoSource`: * If the original build built from the tip of a branch, the retried build will build from the tip of that branch, which may not be the same revision as the original build. * If the original build specified a commit sha or revision ID, the retried build will use the identical source. For builds that specify `StorageSource`: * If the original build pulled source from Cloud Storage without specifying the generation of the object, the new build will use the current object, which may be different from the original build source. * If the original build pulled source from Cloud Storage and specified the generation of the object, the new build will attempt to use the same object, which may or may not be available depending on the bucket's lifecycle management settings.
		/// Cloudbuild_projects_locations_builds_retry v1/{name}:retry
		/// </summary>
		/// <param name="name">The name of the `Build` to retry. Format: `projects/{project}/locations/{location}/builds/{build}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_builds_retryAsync(string name, RetryBuildRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":retry";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs a `BuildTrigger` at a particular source revision. To run a regional or global trigger, use the POST request that includes the location endpoint in the path (ex. v1/projects/{projectId}/locations/{region}/triggers/{triggerId}:run). The POST request that does not include the location endpoint in the path can only be used when running global triggers.
		/// Cloudbuild_projects_locations_triggers_run v1/{name}:run
		/// </summary>
		/// <param name="name">The name of the `Trigger` to run. Format: `projects/{project}/locations/{location}/triggers/{trigger}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_triggers_runAsync(string name, RunBuildTriggerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":run";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ReceiveTriggerWebhook [Experimental] is called when the API receives a webhook request targeted at a specific trigger.
		/// Cloudbuild_projects_locations_triggers_webhook v1/{name}:webhook
		/// </summary>
		/// <param name="name">The name of the `ReceiveTriggerWebhook` to retrieve. Format: `projects/{project}/locations/{location}/triggers/{trigger}`</param>
		/// <param name="projectId">Project in which the specified trigger lives</param>
		/// <param name="secret">Secret token used for authorization if an OAuth token isn't provided.</param>
		/// <param name="trigger">Name of the trigger to run the payload against</param>
		/// <returns>Successful response</returns>
		public async Task<ReceiveTriggerWebhookResponse> Cloudbuild_projects_locations_triggers_webhookAsync(string name, string projectId, string secret, string trigger, HttpBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":webhook&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&secret=" + (secret==null? "" : System.Uri.EscapeDataString(secret))+"&trigger=" + (trigger==null? "" : System.Uri.EscapeDataString(trigger));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReceiveTriggerWebhookResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all `BitbucketServerConfigs` for a given project. This API is experimental.
		/// Cloudbuild_projects_locations_bitbucketServerConfigs_list v1/{parent}/bitbucketServerConfigs
		/// </summary>
		/// <param name="parent">Required. Name of the parent resource.</param>
		/// <param name="pageSize">The maximum number of configs to return. The service may return fewer than this value. If unspecified, at most 50 configs will be returned. The maximum value is 1000; values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous `ListBitbucketServerConfigsRequest` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListBitbucketServerConfigsRequest` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBitbucketServerConfigsResponse> Cloudbuild_projects_locations_bitbucketServerConfigs_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/bitbucketServerConfigs&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBitbucketServerConfigsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new `BitbucketServerConfig`. This API is experimental.
		/// Cloudbuild_projects_locations_bitbucketServerConfigs_create v1/{parent}/bitbucketServerConfigs
		/// </summary>
		/// <param name="parent">Required. Name of the parent resource.</param>
		/// <param name="bitbucketServerConfigId">Optional. The ID to use for the BitbucketServerConfig, which will become the final component of the BitbucketServerConfig's resource name. bitbucket_server_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_bitbucketServerConfigs_createAsync(string parent, string bitbucketServerConfigId, BitbucketServerConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/bitbucketServerConfigs&bitbucketServerConfigId=" + (bitbucketServerConfigId==null? "" : System.Uri.EscapeDataString(bitbucketServerConfigId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists previously requested builds. Previously requested builds may still be in-progress, or may have finished successfully or unsuccessfully.
		/// Cloudbuild_projects_locations_builds_list v1/{parent}/builds
		/// </summary>
		/// <param name="parent">The parent of the collection of `Builds`. Format: `projects/{project}/locations/{location}`</param>
		/// <param name="filter">The raw filter text to constrain the results.</param>
		/// <param name="pageSize">Number of results to return in the list.</param>
		/// <param name="pageToken">The page token for the next page of Builds. If unspecified, the first page of results is returned. If the token is rejected for any reason, INVALID_ARGUMENT will be thrown. In this case, the token should be discarded, and pagination should be restarted from the first page of results. See https://google.aip.dev/158 for more.</param>
		/// <param name="projectId">Required. ID of the project.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBuildsResponse> Cloudbuild_projects_locations_builds_listAsync(string parent, string filter, int pageSize, string pageToken, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/builds&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBuildsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a build with the specified configuration. This method returns a long-running `Operation`, which includes the build ID. Pass the build ID to `GetBuild` to determine the build status (such as `SUCCESS` or `FAILURE`).
		/// Cloudbuild_projects_locations_builds_create v1/{parent}/builds
		/// </summary>
		/// <param name="parent">The parent resource where this build will be created. Format: `projects/{project}/locations/{location}`</param>
		/// <param name="projectId">Required. ID of the project.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_builds_createAsync(string parent, string projectId, Build requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/builds&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Batch connecting GitLab repositories to Cloud Build. This API is experimental.
		/// Cloudbuild_projects_locations_gitLabConfigs_connectedRepositories_batchCreate v1/{parent}/connectedRepositories:batchCreate
		/// </summary>
		/// <param name="parent">The name of the `GitLabConfig` that adds connected repositories. Format: `projects/{project}/locations/{location}/gitLabConfigs/{config}`</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_gitLabConfigs_connectedRepositories_batchCreateAsync(string parent, BatchCreateGitLabConnectedRepositoriesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/connectedRepositories:batchCreate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all `GitLabConfigs` for a given project. This API is experimental
		/// Cloudbuild_projects_locations_gitLabConfigs_list v1/{parent}/gitLabConfigs
		/// </summary>
		/// <param name="parent">Required. Name of the parent resource</param>
		/// <param name="pageSize">The maximum number of configs to return. The service may return fewer than this value. If unspecified, at most 50 configs will be returned. The maximum value is 1000;, values above 1000 will be coerced to 1000.</param>
		/// <param name="pageToken">A page token, received from a previous ‘ListGitlabConfigsRequest’ call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to ‘ListGitlabConfigsRequest’ must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListGitLabConfigsResponse> Cloudbuild_projects_locations_gitLabConfigs_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/gitLabConfigs&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListGitLabConfigsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new `GitLabConfig`. This API is experimental
		/// Cloudbuild_projects_locations_gitLabConfigs_create v1/{parent}/gitLabConfigs
		/// </summary>
		/// <param name="parent">Required. Name of the parent resource.</param>
		/// <param name="gitlabConfigId">Optional. The ID to use for the GitLabConfig, which will become the final component of the GitLabConfig’s resource name. gitlab_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_gitLabConfigs_createAsync(string parent, string gitlabConfigId, GitLabConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/gitLabConfigs&gitlabConfigId=" + (gitlabConfigId==null? "" : System.Uri.EscapeDataString(gitlabConfigId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all GitHubEnterpriseConfigs for a given project.
		/// Cloudbuild_projects_locations_githubEnterpriseConfigs_list v1/{parent}/githubEnterpriseConfigs
		/// </summary>
		/// <param name="parent">Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}</param>
		/// <param name="projectId">ID of the project</param>
		/// <returns>Successful response</returns>
		public async Task<ListGithubEnterpriseConfigsResponse> Cloudbuild_projects_locations_githubEnterpriseConfigs_listAsync(string parent, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/githubEnterpriseConfigs&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListGithubEnterpriseConfigsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an association between a GCP project and a GitHub Enterprise server.
		/// Cloudbuild_projects_locations_githubEnterpriseConfigs_create v1/{parent}/githubEnterpriseConfigs
		/// </summary>
		/// <param name="parent">Name of the parent project. For example: projects/{$project_number} or projects/{$project_id}</param>
		/// <param name="gheConfigId">Optional. The ID to use for the GithubEnterpriseConfig, which will become the final component of the GithubEnterpriseConfig's resource name. ghe_config_id must meet the following requirements: + They must contain only alphanumeric characters and dashes. + They can be 1-64 characters long. + They must begin and end with an alphanumeric character</param>
		/// <param name="projectId">ID of the project.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_githubEnterpriseConfigs_createAsync(string parent, string gheConfigId, string projectId, GitHubEnterpriseConfig requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/githubEnterpriseConfigs&gheConfigId=" + (gheConfigId==null? "" : System.Uri.EscapeDataString(gheConfigId))+"&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all repositories for a given `GitLabConfig`. This API is experimental
		/// Cloudbuild_projects_locations_gitLabConfigs_repos_list v1/{parent}/repos
		/// </summary>
		/// <param name="parent">Required. Name of the parent resource.</param>
		/// <param name="pageSize">The maximum number of repositories to return. The service may return fewer than this value.</param>
		/// <param name="pageToken">A page token, received from a previous ListGitLabRepositoriesRequest` call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to `ListGitLabRepositoriesRequest` must match the call that provided the page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListGitLabRepositoriesResponse> Cloudbuild_projects_locations_gitLabConfigs_repos_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/repos&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListGitLabRepositoriesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists existing `BuildTrigger`s.
		/// Cloudbuild_projects_locations_triggers_list v1/{parent}/triggers
		/// </summary>
		/// <param name="parent">The parent of the collection of `Triggers`. Format: `projects/{project}/locations/{location}`</param>
		/// <param name="pageSize">Number of results to return in the list.</param>
		/// <param name="pageToken">Token to provide to skip to a particular spot in the list.</param>
		/// <param name="projectId">Required. ID of the project for which to list BuildTriggers.</param>
		/// <returns>Successful response</returns>
		public async Task<ListBuildTriggersResponse> Cloudbuild_projects_locations_triggers_listAsync(string parent, int pageSize, string pageToken, string projectId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/triggers&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBuildTriggersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new `BuildTrigger`.
		/// Cloudbuild_projects_locations_triggers_create v1/{parent}/triggers
		/// </summary>
		/// <param name="parent">The parent resource where this trigger will be created. Format: `projects/{project}/locations/{location}`</param>
		/// <param name="projectId">Required. ID of the project for which to configure automatic builds.</param>
		/// <returns>Successful response</returns>
		public async Task<BuildTrigger> Cloudbuild_projects_locations_triggers_createAsync(string parent, string projectId, BuildTrigger requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/triggers&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BuildTrigger>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists `WorkerPool`s.
		/// Cloudbuild_projects_locations_workerPools_list v1/{parent}/workerPools
		/// </summary>
		/// <param name="parent">Required. The parent of the collection of `WorkerPools`. Format: `projects/{project}/locations/{location}`.</param>
		/// <param name="pageSize">The maximum number of `WorkerPool`s to return. The service may return fewer than this value. If omitted, the server will use a sensible default.</param>
		/// <param name="pageToken">A page token, received from a previous `ListWorkerPools` call. Provide this to retrieve the subsequent page.</param>
		/// <returns>Successful response</returns>
		public async Task<ListWorkerPoolsResponse> Cloudbuild_projects_locations_workerPools_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/workerPools&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListWorkerPoolsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a `WorkerPool`.
		/// Cloudbuild_projects_locations_workerPools_create v1/{parent}/workerPools
		/// </summary>
		/// <param name="parent">Required. The parent resource where this worker pool will be created. Format: `projects/{project}/locations/{location}`.</param>
		/// <param name="validateOnly">If set, validate the request and preview the response, but do not actually post it.</param>
		/// <param name="workerPoolId">Required. Immutable. The ID to use for the `WorkerPool`, which will become the final component of the resource name. This value should be 1-63 characters, and valid characters are /a-z-/.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Cloudbuild_projects_locations_workerPools_createAsync(string parent, bool validateOnly, string workerPoolId, WorkerPool requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/workerPools&validateOnly="+validateOnly+"&workerPoolId=" + (workerPoolId==null? "" : System.Uri.EscapeDataString(workerPoolId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a `BuildTrigger` by its project ID and trigger ID.
		/// Cloudbuild_projects_locations_triggers_patch v1/{resourceName}
		/// </summary>
		/// <param name="resourceName">The `Trigger` name with format: `projects/{project}/locations/{location}/triggers/{trigger}`, where {trigger} is a unique identifier generated by the service.</param>
		/// <param name="projectId">Required. ID of the project that owns the trigger.</param>
		/// <param name="triggerId">Required. ID of the `BuildTrigger` to update.</param>
		/// <param name="updateMask">Update mask for the resource. If this is set, the server will only update the fields specified in the field mask. Otherwise, a full update of the mutable resource fields will be performed.</param>
		/// <returns>Successful response</returns>
		public async Task<BuildTrigger> Cloudbuild_projects_locations_triggers_patchAsync(string resourceName, string projectId, string triggerId, string updateMask, BuildTrigger requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName))+"&projectId=" + (projectId==null? "" : System.Uri.EscapeDataString(projectId))+"&triggerId=" + (triggerId==null? "" : System.Uri.EscapeDataString(triggerId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BuildTrigger>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
