//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A Change represents a set of ResourceRecordSet additions and deletions applied atomically to a ManagedZone. ResourceRecordSets within a ManagedZone are modified by creating a new Change element in the Changes collection. In turn the Changes collection also records the past modifications to the ResourceRecordSets in a ManagedZone. The current state of the ManagedZone is the sum effect of applying all Change elements in the Changes collection in sequence.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Change
	{
		
		/// <summary>
		/// Which ResourceRecordSets to add?
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additions")]
		public ResourceRecordSet[] Additions { get; set; }
		
		/// <summary>
		/// Which ResourceRecordSets to remove? Must match existing data exactly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletions")]
		public ResourceRecordSet[] Deletions { get; set; }
		
		/// <summary>
		/// Unique identifier for the resource; defined by the server (output only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// If the DNS queries for the zone will be served.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isServing")]
		public System.Nullable<System.Boolean> IsServing { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#change")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#change";
		
		/// <summary>
		/// The time that this operation was started by the server (output only). This is in RFC3339 text format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Status of the operation (output only). A status of "done" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ChangeStatus> Status { get; set; }
	}
	
	/// <summary>
	/// A unit of data that is returned by the DNS servers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceRecordSet
	{
		
		[System.ComponentModel.DefaultValue("dns#resourceRecordSet")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#resourceRecordSet";
		
		/// <summary>
		/// For example, www.example.com.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routingPolicy")]
		public RRSetRoutingPolicy RoutingPolicy { get; set; }
		
		/// <summary>
		/// As defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1) -- see examples.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rrdatas")]
		public string[] Rrdatas { get; set; }
		
		/// <summary>
		/// As defined in RFC 4034 (section 3.2).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signatureRrdatas")]
		public string[] SignatureRrdatas { get; set; }
		
		/// <summary>
		/// Number of seconds that this ResourceRecordSet can be cached by resolvers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public System.Nullable<System.Int32> Ttl { get; set; }
		
		/// <summary>
		/// The identifier of a supported record type. See the list of Supported DNS record types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A RRSetRoutingPolicy represents ResourceRecordSet data that is returned dynamically with the response varying based on configured properties such as geolocation or by weighted random selection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RRSetRoutingPolicy
	{
		
		/// <summary>
		/// Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geo")]
		public RRSetRoutingPolicyGeoPolicy Geo { get; set; }
		
		/// <summary>
		/// The selfLink attribute of the HealthCheck resource to use for this RRSetRoutingPolicy. https://cloud.google.com/compute/docs/reference/rest/v1/healthChecks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthCheck")]
		public string HealthCheck { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#rRSetRoutingPolicy")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#rRSetRoutingPolicy";
		
		/// <summary>
		/// Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryBackup")]
		public RRSetRoutingPolicyPrimaryBackupPolicy PrimaryBackup { get; set; }
		
		/// <summary>
		/// Configures a RRSetRoutingPolicy that routes in a weighted round robin fashion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wrr")]
		public RRSetRoutingPolicyWrrPolicy Wrr { get; set; }
	}
	
	/// <summary>
	/// Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RRSetRoutingPolicyGeoPolicy
	{
		
		/// <summary>
		/// Without fencing, if health check fails for all configured items in the current geo bucket, we failover to the next nearest geo bucket. With fencing, if health checking is enabled, as long as some targets in the current geo bucket are healthy, we return only the healthy targets. However, if all targets are unhealthy, we don't failover to the next nearest bucket; instead, we return all the items in the current bucket even when all targets are unhealthy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableFencing")]
		public System.Nullable<System.Boolean> EnableFencing { get; set; }
		
		/// <summary>
		/// The primary geo routing configuration. If there are multiple items with the same location, an error is returned instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RRSetRoutingPolicyGeoPolicyGeoPolicyItem[] Items { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#rRSetRoutingPolicyGeoPolicy")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#rRSetRoutingPolicyGeoPolicy";
	}
	
	/// <summary>
	/// ResourceRecordSet data for one geo location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RRSetRoutingPolicyGeoPolicyGeoPolicyItem
	{
		
		/// <summary>
		/// HealthCheckTargets describes endpoints to health-check when responding to Routing Policy queries. Only the healthy endpoints will be included in the response. Only one of internal_load_balancer and external_endpoints should be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthCheckedTargets")]
		public RRSetRoutingPolicyHealthCheckTargets HealthCheckedTargets { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#rRSetRoutingPolicyGeoPolicyGeoPolicyItem")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#rRSetRoutingPolicyGeoPolicyGeoPolicyItem";
		
		/// <summary>
		/// The geo-location granularity is a GCP region. This location string should correspond to a GCP region. e.g. "us-east1", "southamerica-east1", "asia-east1", etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rrdatas")]
		public string[] Rrdatas { get; set; }
		
		/// <summary>
		/// DNSSEC generated signatures for all the rrdata within this item. If health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 IP address per item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signatureRrdatas")]
		public string[] SignatureRrdatas { get; set; }
	}
	
	/// <summary>
	/// HealthCheckTargets describes endpoints to health-check when responding to Routing Policy queries. Only the healthy endpoints will be included in the response. Only one of internal_load_balancer and external_endpoints should be set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RRSetRoutingPolicyHealthCheckTargets
	{
		
		/// <summary>
		/// The Internet IP addresses to be health checked. The format matches the format of ResourceRecordSet.rrdata as defined in RFC 1035 (section 5) and RFC 1034 (section 3.6.1)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalEndpoints")]
		public string[] ExternalEndpoints { get; set; }
		
		/// <summary>
		/// Configuration for internal load balancers to be health checked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalLoadBalancers")]
		public RRSetRoutingPolicyLoadBalancerTarget[] InternalLoadBalancers { get; set; }
	}
	
	/// <summary>
	/// The configuration for an individual load balancer to health check.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RRSetRoutingPolicyLoadBalancerTarget
	{
		
		/// <summary>
		/// The frontend IP address of the load balancer to health check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// The protocol of the load balancer to health check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipProtocol")]
		public System.Nullable<RRSetRoutingPolicyLoadBalancerTargetIpProtocol> IpProtocol { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#rRSetRoutingPolicyLoadBalancerTarget")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#rRSetRoutingPolicyLoadBalancerTarget";
		
		/// <summary>
		/// The type of load balancer specified by this target. This value must match the configuration of the load balancer located at the LoadBalancerTarget's IP address, port, and region. Use the following: - *regionalL4ilb*: for a regional internal passthrough Network Load Balancer. - *regionalL7ilb*: for a regional internal Application Load Balancer. - *globalL7ilb*: for a global internal Application Load Balancer. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loadBalancerType")]
		public System.Nullable<RRSetRoutingPolicyLoadBalancerTargetLoadBalancerType> LoadBalancerType { get; set; }
		
		/// <summary>
		/// The fully qualified URL of the network that the load balancer is attached to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network} .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkUrl")]
		public string NetworkUrl { get; set; }
		
		/// <summary>
		/// The configured port of the load balancer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="port")]
		public string Port { get; set; }
		
		/// <summary>
		/// The project ID in which the load balancer is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="project")]
		public string Project { get; set; }
		
		/// <summary>
		/// The region in which the load balancer is located.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RRSetRoutingPolicyLoadBalancerTargetIpProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNDEFINED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TCP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UDP = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RRSetRoutingPolicyLoadBalancerTargetLoadBalancerType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLOBAL_L7ILB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGIONAL_L4ILB = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGIONAL_L7ILB = 3,
	}
	
	/// <summary>
	/// Configures a RRSetRoutingPolicy such that all queries are responded with the primary_targets if they are healthy. And if all of them are unhealthy, then we fallback to a geo localized policy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RRSetRoutingPolicyPrimaryBackupPolicy
	{
		
		/// <summary>
		/// Configures a RRSetRoutingPolicy that routes based on the geo location of the querying user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backupGeoTargets")]
		public RRSetRoutingPolicyGeoPolicy BackupGeoTargets { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#rRSetRoutingPolicyPrimaryBackupPolicy")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#rRSetRoutingPolicyPrimaryBackupPolicy";
		
		/// <summary>
		/// HealthCheckTargets describes endpoints to health-check when responding to Routing Policy queries. Only the healthy endpoints will be included in the response. Only one of internal_load_balancer and external_endpoints should be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryTargets")]
		public RRSetRoutingPolicyHealthCheckTargets PrimaryTargets { get; set; }
		
		/// <summary>
		/// When serving state is PRIMARY, this field provides the option of sending a small percentage of the traffic to the backup targets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trickleTraffic")]
		public System.Nullable<System.Double> TrickleTraffic { get; set; }
	}
	
	/// <summary>
	/// Configures a RRSetRoutingPolicy that routes in a weighted round robin fashion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RRSetRoutingPolicyWrrPolicy
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public RRSetRoutingPolicyWrrPolicyWrrPolicyItem[] Items { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#rRSetRoutingPolicyWrrPolicy")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#rRSetRoutingPolicyWrrPolicy";
	}
	
	/// <summary>
	/// A routing block which contains the routing information for one WRR item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RRSetRoutingPolicyWrrPolicyWrrPolicyItem
	{
		
		/// <summary>
		/// HealthCheckTargets describes endpoints to health-check when responding to Routing Policy queries. Only the healthy endpoints will be included in the response. Only one of internal_load_balancer and external_endpoints should be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="healthCheckedTargets")]
		public RRSetRoutingPolicyHealthCheckTargets HealthCheckedTargets { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#rRSetRoutingPolicyWrrPolicyWrrPolicyItem")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#rRSetRoutingPolicyWrrPolicyWrrPolicyItem";
		
		[System.Runtime.Serialization.DataMember(Name="rrdatas")]
		public string[] Rrdatas { get; set; }
		
		/// <summary>
		/// DNSSEC generated signatures for all the rrdata within this item. Note that if health checked targets are provided for DNSSEC enabled zones, there's a restriction of 1 IP address per item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signatureRrdatas")]
		public string[] SignatureRrdatas { get; set; }
		
		/// <summary>
		/// The weight corresponding to this WrrPolicyItem object. When multiple WrrPolicyItem objects are configured, the probability of returning an WrrPolicyItem object's data is proportional to its weight relative to the sum of weights configured for all items. This weight must be non-negative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Double> Weight { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ChangeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONE = 1,
	}
	
	/// <summary>
	/// The response to a request to enumerate Changes to a ResourceRecordSets collection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChangesListResponse
	{
		
		/// <summary>
		/// The requested changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="changes")]
		public Change[] Changes { get; set; }
		
		/// <summary>
		/// Elements common to every response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public ResponseHeader Header { get; set; }
		
		/// <summary>
		/// Type of resource.
		/// </summary>
		[System.ComponentModel.DefaultValue("dns#changesListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#changesListResponse";
		
		/// <summary>
		/// The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your pagination token. This lets you retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a "snapshot" of collections larger than the maximum page size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Elements common to every response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponseHeader
	{
		
		/// <summary>
		/// For mutating operation requests that completed successfully. This is the client_operation_id if the client specified it, otherwise it is generated by the server (output only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationId")]
		public string OperationId { get; set; }
	}
	
	/// <summary>
	/// A DNSSEC key pair.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DnsKey
	{
		
		/// <summary>
		/// String mnemonic specifying the DNSSEC algorithm of this key. Immutable after creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public System.Nullable<DnsKeyAlgorithm> Algorithm { get; set; }
		
		/// <summary>
		/// The time that this resource was created in the control plane. This is in RFC3339 text format. Output only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the resource's function.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Cryptographic hashes of the DNSKEY resource record associated with this DnsKey. These digests are needed to construct a DS record that points at this DNS key. Output only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digests")]
		public DnsKeyDigest[] Digests { get; set; }
		
		/// <summary>
		/// Unique identifier for the resource; defined by the server (output only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Active keys are used to sign subsequent changes to the ManagedZone. Inactive keys are still present as DNSKEY Resource Records for the use of resolvers validating existing signatures.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Length of the key in bits. Specified at creation time, and then immutable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyLength")]
		public System.Nullable<System.UInt32> KeyLength { get; set; }
		
		/// <summary>
		/// The key tag is a non-cryptographic hash of the a DNSKEY resource record associated with this DnsKey. The key tag can be used to identify a DNSKEY more quickly (but it is not a unique identifier). In particular, the key tag is used in a parent zone's DS record to point at the DNSKEY in this child ManagedZone. The key tag is a number in the range [0, 65535] and the algorithm to calculate it is specified in RFC4034 Appendix B. Output only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyTag")]
		public System.Nullable<System.Int32> KeyTag { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#dnsKey")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#dnsKey";
		
		/// <summary>
		/// Base64 encoded public half of this key. Output only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		public string PublicKey { get; set; }
		
		/// <summary>
		/// One of "KEY_SIGNING" or "ZONE_SIGNING". Keys of type KEY_SIGNING have the Secure Entry Point flag set and, when active, are used to sign only resource record sets of type DNSKEY. Otherwise, the Secure Entry Point flag is cleared, and this key is used to sign only resource record sets of other types. Immutable after creation time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DnsKeyType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DnsKeyAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSASHA1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSASHA256 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSASHA512 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECDSAP256SHA256 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECDSAP384SHA384 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DnsKeyDigest
	{
		
		/// <summary>
		/// The base-16 encoded bytes of this digest. Suitable for use in a DS resource record.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digest")]
		public string Digest { get; set; }
		
		/// <summary>
		/// Specifies the algorithm used to calculate this digest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DnsKeyDigestType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DnsKeyDigestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA256 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA384 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DnsKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KEY_SIGNING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZONE_SIGNING = 1,
	}
	
	/// <summary>
	/// Parameters for DnsKey key generation. Used for generating initial keys for a new ManagedZone and as default when adding a new DnsKey.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DnsKeySpec
	{
		
		/// <summary>
		/// String mnemonic specifying the DNSSEC algorithm of this key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="algorithm")]
		public DnsKeyAlgorithm Algorithm { get; set; }
		
		/// <summary>
		/// Length of the keys in bits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyLength")]
		public System.Nullable<System.UInt32> KeyLength { get; set; }
		
		/// <summary>
		/// Specifies whether this is a key signing key (KSK) or a zone signing key (ZSK). Key signing keys have the Secure Entry Point flag set and, when active, are only used to sign resource record sets of type DNSKEY. Zone signing keys do not have the Secure Entry Point flag set and are used to sign all other types of resource record sets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyType")]
		public DnsKeyType KeyType { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#dnsKeySpec")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#dnsKeySpec";
	}
	
	/// <summary>
	/// The response to a request to enumerate DnsKeys in a ManagedZone.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DnsKeysListResponse
	{
		
		/// <summary>
		/// The requested resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsKeys")]
		public DnsKey[] DnsKeys { get; set; }
		
		/// <summary>
		/// Elements common to every response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public ResponseHeader Header { get; set; }
		
		/// <summary>
		/// Type of resource.
		/// </summary>
		[System.ComponentModel.DefaultValue("dns#dnsKeysListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#dnsKeysListResponse";
		
		/// <summary>
		/// The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your pagination token. In this way you can retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. There is no way to retrieve a "snapshot" of collections larger than the maximum page size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Expr
	{
		
		/// <summary>
		/// Optional. Description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Textual representation of an expression in Common Expression Language syntax.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		/// <summary>
		/// Optional. String indicating the location of the expression for error reporting, e.g. a file name and a position in the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. Title for the expression, i.e. a short string describing its purpose. This can be used e.g. in UIs which allow to enter the expression.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both `allServices` and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { "audit_configs": [ { "service": "allServices", "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" }, { "log_type": "ADMIN_READ" } ] }, { "service": "sampleservice.googleapis.com", "audit_log_configs": [ { "log_type": "DATA_READ" }, { "log_type": "DATA_WRITE", "exempted_members": [ "user:aliya@example.com" ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts `jose@example.com` from DATA_READ logging, and `aliya@example.com` from DATA_WRITE logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleIamV1AuditConfig
	{
		
		/// <summary>
		/// The configuration for logging of each type of permission.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditLogConfigs")]
		public GoogleIamV1AuditLogConfig[] AuditLogConfigs { get; set; }
		
		/// <summary>
		/// Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service")]
		public string Service { get; set; }
	}
	
	/// <summary>
	/// Provides the configuration for logging a type of permissions. Example: { "audit_log_configs": [ { "log_type": "DATA_READ", "exempted_members": [ "user:jose@example.com" ] }, { "log_type": "DATA_WRITE" } ] } This enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting jose@example.com from DATA_READ logging.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleIamV1AuditLogConfig
	{
		
		/// <summary>
		/// Specifies the identities that do not cause logging for this type of permission. Follows the same format of Binding.members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptedMembers")]
		public string[] ExemptedMembers { get; set; }
		
		/// <summary>
		/// The log type that this config enables.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logType")]
		public System.Nullable<GoogleIamV1AuditLogConfigLogType> LogType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleIamV1AuditLogConfigLogType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOG_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_READ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_WRITE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_READ = 3,
	}
	
	/// <summary>
	/// Associates `members`, or principals, with a `role`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleIamV1Binding
	{
		
		/// <summary>
		/// Represents a textual expression in the Common Expression Language (CEL) syntax. CEL is a C-like expression language. The syntax and semantics of CEL are documented at https://github.com/google/cel-spec. Example (Comparison): title: "Summary size limit" description: "Determines if a summary is less than 100 chars" expression: "document.summary.size() < 100" Example (Equality): title: "Requestor is owner" description: "Determines if requestor is the document owner" expression: "document.owner == request.auth.claims.email" Example (Logic): title: "Public documents" description: "Determine whether the document should be publicly visible" expression: "document.type != 'private' && document.type != 'internal'" Example (Data Manipulation): title: "Notification string" description: "Create a notification string with a timestamp." expression: "'New message received at ' + string(document.create_time)" The exact variables and functions that may be referenced within an expression are determined by the service that evaluates it. See the service documentation for additional information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Expr Condition { get; set; }
		
		/// <summary>
		/// Specifies the principals requesting access for a Google Cloud resource. `members` can have the following values: * `allUsers`: A special identifier that represents anyone who is on the internet; with or without a Google account. * `allAuthenticatedUsers`: A special identifier that represents anyone who is authenticated with a Google account or a service account. Does not include identities that come from external identity providers (IdPs) through identity federation. * `user:{emailid}`: An email address that represents a specific Google account. For example, `alice@example.com` . * `serviceAccount:{emailid}`: An email address that represents a Google service account. For example, `my-other-app@appspot.gserviceaccount.com`. * `serviceAccount:{projectid}.svc.id.goog[{namespace}/{kubernetes-sa}]`: An identifier for a [Kubernetes service account](https://cloud.google.com/kubernetes-engine/docs/how-to/kubernetes-service-accounts). For example, `my-project.svc.id.goog[my-namespace/my-kubernetes-sa]`. * `group:{emailid}`: An email address that represents a Google group. For example, `admins@example.com`. * `domain:{domain}`: The G Suite domain (primary) that represents all the users of that domain. For example, `google.com` or `example.com`. * `principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workforce identity pool. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/group/{group_id}`: All workforce identities in a group. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All workforce identities with a specific attribute value. * `principalSet://iam.googleapis.com/locations/global/workforcePools/{pool_id}/*`: All identities in a workforce identity pool. * `principal://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/subject/{subject_attribute_value}`: A single identity in a workload identity pool. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/group/{group_id}`: A workload identity pool group. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/attribute.{attribute_name}/{attribute_value}`: All identities in a workload identity pool with a certain attribute. * `principalSet://iam.googleapis.com/projects/{project_number}/locations/global/workloadIdentityPools/{pool_id}/*`: All identities in a workload identity pool. * `deleted:user:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a user that has been recently deleted. For example, `alice@example.com?uid=123456789012345678901`. If the user is recovered, this value reverts to `user:{emailid}` and the recovered user retains the role in the binding. * `deleted:serviceAccount:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a service account that has been recently deleted. For example, `my-other-app@appspot.gserviceaccount.com?uid=123456789012345678901`. If the service account is undeleted, this value reverts to `serviceAccount:{emailid}` and the undeleted service account retains the role in the binding. * `deleted:group:{emailid}?uid={uniqueid}`: An email address (plus unique identifier) representing a Google group that has been recently deleted. For example, `admins@example.com?uid=123456789012345678901`. If the group is recovered, this value reverts to `group:{emailid}` and the recovered group retains the role in the binding. * `deleted:principal://iam.googleapis.com/locations/global/workforcePools/{pool_id}/subject/{subject_attribute_value}`: Deleted single identity in a workforce identity pool. For example, `deleted:principal://iam.googleapis.com/locations/global/workforcePools/my-pool-id/subject/my-subject-attribute-value`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Role that is assigned to the list of `members`, or principals. For example, `roles/viewer`, `roles/editor`, or `roles/owner`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
	}
	
	/// <summary>
	/// Request message for `GetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleIamV1GetIamPolicyRequest
	{
		
		/// <summary>
		/// Encapsulates settings provided to GetIamPolicy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public GoogleIamV1GetPolicyOptions Options { get; set; }
	}
	
	/// <summary>
	/// Encapsulates settings provided to GetIamPolicy.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleIamV1GetPolicyOptions
	{
		
		/// <summary>
		/// Optional. The maximum policy version that will be used to format the policy. Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected. Requests for policies with any conditional role bindings must specify version 3. Policies with no conditional role bindings may specify any valid value or leave the field unset. The policy in the response might use the policy version that you specified, or it might use a lower policy version. For example, if you specify version 3, but the policy has no conditional role bindings, the response uses version 1. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedPolicyVersion")]
		public System.Nullable<System.Int32> RequestedPolicyVersion { get; set; }
	}
	
	/// <summary>
	/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleIamV1Policy
	{
		
		/// <summary>
		/// Specifies cloud audit logging configuration for this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auditConfigs")]
		public GoogleIamV1AuditConfig[] AuditConfigs { get; set; }
		
		/// <summary>
		/// Associates a list of `members`, or principals, with a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one principal. The `bindings` in a `Policy` can refer to up to 1,500 principals; up to 250 of these principals can be Google groups. Each occurrence of a principal counts towards these limits. For example, if the `bindings` grant 50 different roles to `user:alice@example.com`, and not to any other principal, then you can add another 1,450 principals to the `bindings` in the `Policy`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bindings")]
		public GoogleIamV1Binding[] Bindings { get; set; }
		
		/// <summary>
		/// `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy. **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="etag")]
		public string Etag { get; set; }
		
		/// <summary>
		/// Specifies the format of the policy. Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected. Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations: * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy that includes conditions **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost. If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// Request message for `SetIamPolicy` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleIamV1SetIamPolicyRequest
	{
		
		/// <summary>
		/// An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources. A `Policy` is a collection of `bindings`. A `binding` binds one or more `members`, or principals, to a single `role`. Principals can be user accounts, service accounts, Google groups, and domains (such as G Suite). A `role` is a named list of permissions; each `role` can be an IAM predefined role or a user-created custom role. For some types of Google Cloud resources, a `binding` can also specify a `condition`, which is a logical expression that allows access to a resource only if the expression evaluates to `true`. A condition can add constraints based on attributes of the request, the resource, or both. To learn which resources support conditions in their IAM policies, see the [IAM documentation](https://cloud.google.com/iam/help/conditions/resource-policies). **JSON example:** ``` { "bindings": [ { "role": "roles/resourcemanager.organizationAdmin", "members": [ "user:mike@example.com", "group:admins@example.com", "domain:google.com", "serviceAccount:my-project-id@appspot.gserviceaccount.com" ] }, { "role": "roles/resourcemanager.organizationViewer", "members": [ "user:eve@example.com" ], "condition": { "title": "expirable access", "description": "Does not grant access after Sep 2020", "expression": "request.time < timestamp('2020-10-01T00:00:00.000Z')", } } ], "etag": "BwWWja0YfJA=", "version": 3 } ``` **YAML example:** ``` bindings: - members: - user:mike@example.com - group:admins@example.com - domain:google.com - serviceAccount:my-project-id@appspot.gserviceaccount.com role: roles/resourcemanager.organizationAdmin - members: - user:eve@example.com role: roles/resourcemanager.organizationViewer condition: title: expirable access description: Does not grant access after Sep 2020 expression: request.time < timestamp('2020-10-01T00:00:00.000Z') etag: BwWWja0YfJA= version: 3 ``` For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public GoogleIamV1Policy Policy { get; set; }
		
		/// <summary>
		/// OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only the fields in the mask will be modified. If no mask is provided, the following default mask is used: `paths: "bindings, etag"`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateMask")]
		public string UpdateMask { get; set; }
	}
	
	/// <summary>
	/// Request message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleIamV1TestIamPermissionsRequest
	{
		
		/// <summary>
		/// The set of permissions to check for the `resource`. Permissions with wildcards (such as `*` or `storage.*`) are not allowed. For more information see [IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// Response message for `TestIamPermissions` method.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleIamV1TestIamPermissionsResponse
	{
		
		/// <summary>
		/// A subset of `TestPermissionsRequest.permissions` that the caller is allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
	}
	
	/// <summary>
	/// A zone is a subtree of the DNS namespace under one administrative responsibility. A ManagedZone is a resource that represents a DNS zone hosted by the Cloud DNS service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedZone
	{
		
		/// <summary>
		/// Cloud Logging configurations for publicly visible zones.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudLoggingConfig")]
		public ManagedZoneCloudLoggingConfig CloudLoggingConfig { get; set; }
		
		/// <summary>
		/// The time that this resource was created on the server. This is in RFC3339 text format. Output only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public string CreationTime { get; set; }
		
		/// <summary>
		/// A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the managed zone's function.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The DNS name of this managed zone, for instance "example.com.".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsName")]
		public string DnsName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dnssecConfig")]
		public ManagedZoneDnsSecConfig DnssecConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="forwardingConfig")]
		public ManagedZoneForwardingConfig ForwardingConfig { get; set; }
		
		/// <summary>
		/// Unique identifier for the resource; defined by the server (output only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#managedZone")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#managedZone";
		
		/// <summary>
		/// User labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// User assigned name for this resource. Must be unique within the project. The name must be 1-63 characters long, must begin with a letter, end with a letter or digit, and only contain lowercase letters, digits or dashes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optionally specifies the NameServerSet for this ManagedZone. A NameServerSet is a set of DNS name servers that all host the same ManagedZones. Most users leave this field unset. If you need to use this field, contact your account team.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameServerSet")]
		public string NameServerSet { get; set; }
		
		/// <summary>
		/// Delegate your managed_zone to these virtual name servers; defined by the server (output only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nameServers")]
		public string[] NameServers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="peeringConfig")]
		public ManagedZonePeeringConfig PeeringConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privateVisibilityConfig")]
		public ManagedZonePrivateVisibilityConfig PrivateVisibilityConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reverseLookupConfig")]
		public ManagedZoneReverseLookupConfig ReverseLookupConfig { get; set; }
		
		/// <summary>
		/// Contains information about Service Directory-backed zones.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceDirectoryConfig")]
		public ManagedZoneServiceDirectoryConfig ServiceDirectoryConfig { get; set; }
		
		/// <summary>
		/// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<ManagedZoneVisibility> Visibility { get; set; }
	}
	
	/// <summary>
	/// Cloud Logging configurations for publicly visible zones.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedZoneCloudLoggingConfig
	{
		
		/// <summary>
		/// If set, enable query logging for this ManagedZone. False by default, making logging opt-in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableLogging")]
		public System.Nullable<System.Boolean> EnableLogging { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#managedZoneCloudLoggingConfig")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#managedZoneCloudLoggingConfig";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedZoneDnsSecConfig
	{
		
		/// <summary>
		/// Specifies parameters for generating initial DnsKeys for this ManagedZone. Can only be changed while the state is OFF.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultKeySpecs")]
		public DnsKeySpec[] DefaultKeySpecs { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#managedZoneDnsSecConfig")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#managedZoneDnsSecConfig";
		
		/// <summary>
		/// Specifies the mechanism for authenticated denial-of-existence responses. Can only be changed while the state is OFF.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonExistence")]
		public System.Nullable<ManagedZoneDnsSecConfigNonExistence> NonExistence { get; set; }
		
		/// <summary>
		/// Specifies whether DNSSEC is enabled, and what mode it is in.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ManagedZoneDnsSecConfigState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ManagedZoneDnsSecConfigNonExistence
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSEC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSEC3 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ManagedZoneDnsSecConfigState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFF = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedZoneForwardingConfig
	{
		
		[System.ComponentModel.DefaultValue("dns#managedZoneForwardingConfig")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#managedZoneForwardingConfig";
		
		/// <summary>
		/// List of target name servers to forward to. Cloud DNS selects the best available name server if more than one target is given.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetNameServers")]
		public ManagedZoneForwardingConfigNameServerTarget[] TargetNameServers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedZoneForwardingConfigNameServerTarget
	{
		
		/// <summary>
		/// Forwarding path for this NameServerTarget. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on IP address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forwardingPath")]
		public System.Nullable<ManagedZoneForwardingConfigNameServerTargetForwardingPath> ForwardingPath { get; set; }
		
		/// <summary>
		/// IPv4 address of a target name server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv4Address")]
		public string Ipv4Address { get; set; }
		
		/// <summary>
		/// IPv6 address of a target name server. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv6Address")]
		public string Ipv6Address { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#managedZoneForwardingConfigNameServerTarget")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#managedZoneForwardingConfigNameServerTarget";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ManagedZoneForwardingConfigNameServerTargetForwardingPath
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedZonePeeringConfig
	{
		
		[System.ComponentModel.DefaultValue("dns#managedZonePeeringConfig")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#managedZonePeeringConfig";
		
		[System.Runtime.Serialization.DataMember(Name="targetNetwork")]
		public ManagedZonePeeringConfigTargetNetwork TargetNetwork { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedZonePeeringConfigTargetNetwork
	{
		
		/// <summary>
		/// The time at which the zone was deactivated, in RFC 3339 date-time format. An empty string indicates that the peering connection is active. The producer network can deactivate a zone. The zone is automatically deactivated if the producer network that the zone targeted is deleted. Output only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deactivateTime")]
		public string DeactivateTime { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#managedZonePeeringConfigTargetNetwork")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#managedZonePeeringConfigTargetNetwork";
		
		/// <summary>
		/// The fully qualified URL of the VPC network to forward queries to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkUrl")]
		public string NetworkUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedZonePrivateVisibilityConfig
	{
		
		/// <summary>
		/// The list of Google Kubernetes Engine clusters that can see this zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gkeClusters")]
		public ManagedZonePrivateVisibilityConfigGKECluster[] GkeClusters { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#managedZonePrivateVisibilityConfig")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#managedZonePrivateVisibilityConfig";
		
		/// <summary>
		/// The list of VPC networks that can see this zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networks")]
		public ManagedZonePrivateVisibilityConfigNetwork[] Networks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedZonePrivateVisibilityConfigGKECluster
	{
		
		/// <summary>
		/// The resource name of the cluster to bind this ManagedZone to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gkeClusterName")]
		public string GkeClusterName { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#managedZonePrivateVisibilityConfigGKECluster")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#managedZonePrivateVisibilityConfigGKECluster";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedZonePrivateVisibilityConfigNetwork
	{
		
		[System.ComponentModel.DefaultValue("dns#managedZonePrivateVisibilityConfigNetwork")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#managedZonePrivateVisibilityConfigNetwork";
		
		/// <summary>
		/// The fully qualified URL of the VPC network to bind to. Format this URL like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkUrl")]
		public string NetworkUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedZoneReverseLookupConfig
	{
		
		[System.ComponentModel.DefaultValue("dns#managedZoneReverseLookupConfig")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#managedZoneReverseLookupConfig";
	}
	
	/// <summary>
	/// Contains information about Service Directory-backed zones.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedZoneServiceDirectoryConfig
	{
		
		[System.ComponentModel.DefaultValue("dns#managedZoneServiceDirectoryConfig")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#managedZoneServiceDirectoryConfig";
		
		[System.Runtime.Serialization.DataMember(Name="namespace")]
		public ManagedZoneServiceDirectoryConfigNamespace Namespace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedZoneServiceDirectoryConfigNamespace
	{
		
		/// <summary>
		/// The time that the namespace backing this zone was deleted; an empty string if it still exists. This is in RFC3339 text format. Output only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletionTime")]
		public string DeletionTime { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#managedZoneServiceDirectoryConfigNamespace")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#managedZoneServiceDirectoryConfigNamespace";
		
		/// <summary>
		/// The fully qualified URL of the namespace associated with the zone. Format must be https://servicedirectory.googleapis.com/v1/projects/{project}/locations/{location}/namespaces/{namespace}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namespaceUrl")]
		public string NamespaceUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ManagedZoneVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUBLIC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedZoneOperationsListResponse
	{
		
		/// <summary>
		/// Elements common to every response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public ResponseHeader Header { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#managedZoneOperationsListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#managedZoneOperationsListResponse";
		
		/// <summary>
		/// The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your page token. This lets you retrieve the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The operation resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// An operation represents a successful mutation performed on a Cloud DNS resource. Operations provide: - An audit log of server resource mutations. - A way to recover/retry API calls in the case where the response is never received by the caller. Use the caller specified client_operation_id.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		[System.Runtime.Serialization.DataMember(Name="dnsKeyContext")]
		public OperationDnsKeyContext DnsKeyContext { get; set; }
		
		/// <summary>
		/// Unique identifier for the resource. This is the client_operation_id if the client specified it when the mutation was initiated, otherwise, it is generated by the server. The name must be 1-63 characters long and match the regular expression [-a-z0-9]? (output only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#operation")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#operation";
		
		/// <summary>
		/// The time that this operation was started by the server. This is in RFC3339 text format (output only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
		
		/// <summary>
		/// Status of the operation. Can be one of the following: "PENDING" or "DONE" (output only). A status of "DONE" means that the request to update the authoritative servers has been sent, but the servers might not be updated yet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ChangeStatus Status { get; set; }
		
		/// <summary>
		/// Type of the operation. Operations include insert, update, and delete (output only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// User who requested the operation, for example: user@example.com. cloud-dns-system for operations automatically done by the system. (output only)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zoneContext")]
		public OperationManagedZoneContext ZoneContext { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationDnsKeyContext
	{
		
		/// <summary>
		/// A DNSSEC key pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newValue")]
		public DnsKey NewValue { get; set; }
		
		/// <summary>
		/// A DNSSEC key pair.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldValue")]
		public DnsKey OldValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationManagedZoneContext
	{
		
		/// <summary>
		/// A zone is a subtree of the DNS namespace under one administrative responsibility. A ManagedZone is a resource that represents a DNS zone hosted by the Cloud DNS service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newValue")]
		public ManagedZone NewValue { get; set; }
		
		/// <summary>
		/// A zone is a subtree of the DNS namespace under one administrative responsibility. A ManagedZone is a resource that represents a DNS zone hosted by the Cloud DNS service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldValue")]
		public ManagedZone OldValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManagedZonesListResponse
	{
		
		/// <summary>
		/// Elements common to every response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public ResponseHeader Header { get; set; }
		
		/// <summary>
		/// Type of resource.
		/// </summary>
		[System.ComponentModel.DefaultValue("dns#managedZonesListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#managedZonesListResponse";
		
		/// <summary>
		/// The managed zone resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedZones")]
		public ManagedZone[] ManagedZones { get; set; }
		
		/// <summary>
		/// The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your page token. This lets you the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PoliciesListResponse
	{
		
		/// <summary>
		/// Elements common to every response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public ResponseHeader Header { get; set; }
		
		/// <summary>
		/// Type of resource.
		/// </summary>
		[System.ComponentModel.DefaultValue("dns#policiesListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#policiesListResponse";
		
		/// <summary>
		/// The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your page token. This lets you the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The policy resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public Policy[] Policies { get; set; }
	}
	
	/// <summary>
	/// A policy is a collection of DNS rules applied to one or more Virtual Private Cloud resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Policy
	{
		
		[System.Runtime.Serialization.DataMember(Name="alternativeNameServerConfig")]
		public PolicyAlternativeNameServerConfig AlternativeNameServerConfig { get; set; }
		
		/// <summary>
		/// A mutable string of at most 1024 characters associated with this resource for the user's convenience. Has no effect on the policy's function.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Allows networks bound to this policy to receive DNS queries sent by VMs or applications over VPN connections. When enabled, a virtual IP address is allocated from each of the subnetworks that are bound to this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableInboundForwarding")]
		public System.Nullable<System.Boolean> EnableInboundForwarding { get; set; }
		
		/// <summary>
		/// Controls whether logging is enabled for the networks bound to this policy. Defaults to no logging if not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableLogging")]
		public System.Nullable<System.Boolean> EnableLogging { get; set; }
		
		/// <summary>
		/// Unique identifier for the resource; defined by the server (output only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#policy")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#policy";
		
		/// <summary>
		/// User-assigned name for this policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// List of network names specifying networks to which this policy is applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networks")]
		public PolicyNetwork[] Networks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PolicyAlternativeNameServerConfig
	{
		
		[System.ComponentModel.DefaultValue("dns#policyAlternativeNameServerConfig")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#policyAlternativeNameServerConfig";
		
		/// <summary>
		/// Sets an alternative name server for the associated networks. When specified, all DNS queries are forwarded to a name server that you choose. Names such as .internal are not available when an alternative name server is specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetNameServers")]
		public PolicyAlternativeNameServerConfigTargetNameServer[] TargetNameServers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PolicyAlternativeNameServerConfigTargetNameServer
	{
		
		/// <summary>
		/// Forwarding path for this TargetNameServer. If unset or set to DEFAULT, Cloud DNS makes forwarding decisions based on address ranges; that is, RFC1918 addresses go to the VPC network, non-RFC1918 addresses go to the internet. When set to PRIVATE, Cloud DNS always sends queries through the VPC network for this target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forwardingPath")]
		public ManagedZoneForwardingConfigNameServerTargetForwardingPath ForwardingPath { get; set; }
		
		/// <summary>
		/// IPv4 address to forward queries to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv4Address")]
		public string Ipv4Address { get; set; }
		
		/// <summary>
		/// IPv6 address to forward to. Does not accept both fields (ipv4 & ipv6) being populated. Public preview as of November 2022.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipv6Address")]
		public string Ipv6Address { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#policyAlternativeNameServerConfigTargetNameServer")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#policyAlternativeNameServerConfigTargetNameServer";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PolicyNetwork
	{
		
		[System.ComponentModel.DefaultValue("dns#policyNetwork")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#policyNetwork";
		
		/// <summary>
		/// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkUrl")]
		public string NetworkUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PoliciesPatchResponse
	{
		
		/// <summary>
		/// Elements common to every response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public ResponseHeader Header { get; set; }
		
		/// <summary>
		/// A policy is a collection of DNS rules applied to one or more Virtual Private Cloud resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PoliciesUpdateResponse
	{
		
		/// <summary>
		/// Elements common to every response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public ResponseHeader Header { get; set; }
		
		/// <summary>
		/// A policy is a collection of DNS rules applied to one or more Virtual Private Cloud resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy")]
		public Policy Policy { get; set; }
	}
	
	/// <summary>
	/// A project resource. The project is a top level container for resources including Cloud DNS ManagedZones. Projects can be created only in the APIs console. Next tag: 7.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Project
	{
		
		/// <summary>
		/// User assigned unique identifier for the resource (output only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#project")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#project";
		
		/// <summary>
		/// Unique numeric identifier for the resource; defined by the server (output only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="number")]
		public string Number { get; set; }
		
		/// <summary>
		/// Limits associated with a Project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quota")]
		public Quota Quota { get; set; }
	}
	
	/// <summary>
	/// Limits associated with a Project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Quota
	{
		
		/// <summary>
		/// Maximum allowed number of DnsKeys per ManagedZone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsKeysPerManagedZone")]
		public System.Nullable<System.Int32> DnsKeysPerManagedZone { get; set; }
		
		/// <summary>
		/// Maximum allowed number of GKE clusters to which a privately scoped zone can be attached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gkeClustersPerManagedZone")]
		public System.Nullable<System.Int32> GkeClustersPerManagedZone { get; set; }
		
		/// <summary>
		/// Maximum allowed number of GKE clusters per policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gkeClustersPerPolicy")]
		public System.Nullable<System.Int32> GkeClustersPerPolicy { get; set; }
		
		/// <summary>
		/// Maximum allowed number of GKE clusters per response policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gkeClustersPerResponsePolicy")]
		public System.Nullable<System.Int32> GkeClustersPerResponsePolicy { get; set; }
		
		/// <summary>
		/// Maximum allowed number of items per routing policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itemsPerRoutingPolicy")]
		public System.Nullable<System.Int32> ItemsPerRoutingPolicy { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#quota")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#quota";
		
		/// <summary>
		/// Maximum allowed number of managed zones in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedZones")]
		public System.Nullable<System.Int32> ManagedZones { get; set; }
		
		/// <summary>
		/// Maximum allowed number of managed zones which can be attached to a GKE cluster.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedZonesPerGkeCluster")]
		public System.Nullable<System.Int32> ManagedZonesPerGkeCluster { get; set; }
		
		/// <summary>
		/// Maximum allowed number of managed zones which can be attached to a network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="managedZonesPerNetwork")]
		public System.Nullable<System.Int32> ManagedZonesPerNetwork { get; set; }
		
		/// <summary>
		/// Maximum allowed number of networks to which a privately scoped zone can be attached.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networksPerManagedZone")]
		public System.Nullable<System.Int32> NetworksPerManagedZone { get; set; }
		
		/// <summary>
		/// Maximum allowed number of networks per policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networksPerPolicy")]
		public System.Nullable<System.Int32> NetworksPerPolicy { get; set; }
		
		/// <summary>
		/// Maximum allowed number of networks per response policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networksPerResponsePolicy")]
		public System.Nullable<System.Int32> NetworksPerResponsePolicy { get; set; }
		
		/// <summary>
		/// Maximum allowed number of consumer peering zones per target network owned by this producer project
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="peeringZonesPerTargetNetwork")]
		public System.Nullable<System.Int32> PeeringZonesPerTargetNetwork { get; set; }
		
		/// <summary>
		/// Maximum allowed number of policies per project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policies")]
		public System.Nullable<System.Int32> Policies { get; set; }
		
		/// <summary>
		/// Maximum allowed number of ResourceRecords per ResourceRecordSet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceRecordsPerRrset")]
		public System.Nullable<System.Int32> ResourceRecordsPerRrset { get; set; }
		
		/// <summary>
		/// Maximum allowed number of response policies per project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsePolicies")]
		public System.Nullable<System.Int32> ResponsePolicies { get; set; }
		
		/// <summary>
		/// Maximum allowed number of rules per response policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsePolicyRulesPerResponsePolicy")]
		public System.Nullable<System.Int32> ResponsePolicyRulesPerResponsePolicy { get; set; }
		
		/// <summary>
		/// Maximum allowed number of ResourceRecordSets to add per ChangesCreateRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rrsetAdditionsPerChange")]
		public System.Nullable<System.Int32> RrsetAdditionsPerChange { get; set; }
		
		/// <summary>
		/// Maximum allowed number of ResourceRecordSets to delete per ChangesCreateRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rrsetDeletionsPerChange")]
		public System.Nullable<System.Int32> RrsetDeletionsPerChange { get; set; }
		
		/// <summary>
		/// Maximum allowed number of ResourceRecordSets per zone in the project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rrsetsPerManagedZone")]
		public System.Nullable<System.Int32> RrsetsPerManagedZone { get; set; }
		
		/// <summary>
		/// Maximum allowed number of target name servers per managed forwarding zone.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetNameServersPerManagedZone")]
		public System.Nullable<System.Int32> TargetNameServersPerManagedZone { get; set; }
		
		/// <summary>
		/// Maximum allowed number of alternative target name servers per policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetNameServersPerPolicy")]
		public System.Nullable<System.Int32> TargetNameServersPerPolicy { get; set; }
		
		/// <summary>
		/// Maximum allowed size for total rrdata in one ChangesCreateRequest in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalRrdataSizePerChange")]
		public System.Nullable<System.Int32> TotalRrdataSizePerChange { get; set; }
		
		/// <summary>
		/// DNSSEC algorithm and key length types that can be used for DnsKeys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whitelistedKeySpecs")]
		public DnsKeySpec[] WhitelistedKeySpecs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceRecordSetsListResponse
	{
		
		/// <summary>
		/// Elements common to every response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public ResponseHeader Header { get; set; }
		
		/// <summary>
		/// Type of resource.
		/// </summary>
		[System.ComponentModel.DefaultValue("dns#resourceRecordSetsListResponse")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#resourceRecordSetsListResponse";
		
		/// <summary>
		/// The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your pagination token. This lets you retrieve the complete contents of even larger collections, one page at a time. However, if the collection changes between paginated list requests, the set of elements returned is an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The resource record set resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rrsets")]
		public ResourceRecordSet[] Rrsets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponsePoliciesListResponse
	{
		
		/// <summary>
		/// Elements common to every response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public ResponseHeader Header { get; set; }
		
		/// <summary>
		/// The presence of this field indicates that more results exist following your last page of results in pagination order. To fetch them, make another list request by using this value as your page token. This lets you view the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The Response Policy resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsePolicies")]
		public ResponsePolicy[] ResponsePolicies { get; set; }
	}
	
	/// <summary>
	/// A Response Policy is a collection of selectors that apply to queries made against one or more Virtual Private Cloud networks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponsePolicy
	{
		
		/// <summary>
		/// User-provided description for this Response Policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The list of Google Kubernetes Engine clusters to which this response policy is applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gkeClusters")]
		public ResponsePolicyGKECluster[] GkeClusters { get; set; }
		
		/// <summary>
		/// Unique identifier for the resource; defined by the server (output only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#responsePolicy")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#responsePolicy";
		
		/// <summary>
		/// User labels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// List of network names specifying networks to which this policy is applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networks")]
		public ResponsePolicyNetwork[] Networks { get; set; }
		
		/// <summary>
		/// User assigned name for this Response Policy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsePolicyName")]
		public string ResponsePolicyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponsePolicyGKECluster
	{
		
		/// <summary>
		/// The resource name of the cluster to bind this response policy to. This should be specified in the format like: projects/*/locations/*/clusters/*. This is referenced from GKE projects.locations.clusters.get API: https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/get
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gkeClusterName")]
		public string GkeClusterName { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#responsePolicyGKECluster")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#responsePolicyGKECluster";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponsePolicyNetwork
	{
		
		[System.ComponentModel.DefaultValue("dns#responsePolicyNetwork")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#responsePolicyNetwork";
		
		/// <summary>
		/// The fully qualified URL of the VPC network to bind to. This should be formatted like https://www.googleapis.com/compute/v1/projects/{project}/global/networks/{network}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkUrl")]
		public string NetworkUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponsePoliciesPatchResponse
	{
		
		/// <summary>
		/// Elements common to every response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public ResponseHeader Header { get; set; }
		
		/// <summary>
		/// A Response Policy is a collection of selectors that apply to queries made against one or more Virtual Private Cloud networks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsePolicy")]
		public ResponsePolicy ResponsePolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponsePoliciesUpdateResponse
	{
		
		/// <summary>
		/// Elements common to every response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public ResponseHeader Header { get; set; }
		
		/// <summary>
		/// A Response Policy is a collection of selectors that apply to queries made against one or more Virtual Private Cloud networks.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsePolicy")]
		public ResponsePolicy ResponsePolicy { get; set; }
	}
	
	/// <summary>
	/// A Response Policy Rule is a selector that applies its behavior to queries that match the selector. Selectors are DNS names, which may be wildcards or exact matches. Each DNS query subject to a Response Policy matches at most one ResponsePolicyRule, as identified by the dns_name field with the longest matching suffix.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponsePolicyRule
	{
		
		/// <summary>
		/// Answer this query with a behavior rather than DNS data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="behavior")]
		public System.Nullable<ResponsePolicyRuleBehavior> Behavior { get; set; }
		
		/// <summary>
		/// The DNS name (wildcard or exact) to apply this rule to. Must be unique within the Response Policy Rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dnsName")]
		public string DnsName { get; set; }
		
		[System.ComponentModel.DefaultValue("dns#responsePolicyRule")]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; } = "dns#responsePolicyRule";
		
		[System.Runtime.Serialization.DataMember(Name="localData")]
		public ResponsePolicyRuleLocalData LocalData { get; set; }
		
		/// <summary>
		/// An identifier for this rule. Must be unique with the ResponsePolicy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleName")]
		public string RuleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ResponsePolicyRuleBehavior
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEHAVIOR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BYPASS_RESPONSE_POLICY = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponsePolicyRuleLocalData
	{
		
		/// <summary>
		/// All resource record sets for this selector, one per resource record type. The name must match the dns_name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="localDatas")]
		public ResourceRecordSet[] LocalDatas { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponsePolicyRulesListResponse
	{
		
		/// <summary>
		/// Elements common to every response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public ResponseHeader Header { get; set; }
		
		/// <summary>
		/// The presence of this field indicates that there exist more results following your last page of results in pagination order. To fetch them, make another list request using this value as your page token. This lets you the complete contents of even very large collections one page at a time. However, if the contents of the collection change between the first and last paginated list request, the set of all elements returned are an inconsistent view of the collection. You cannot retrieve a consistent snapshot of a collection larger than the maximum page size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The Response Policy Rule resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsePolicyRules")]
		public ResponsePolicyRule[] ResponsePolicyRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponsePolicyRulesPatchResponse
	{
		
		/// <summary>
		/// Elements common to every response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public ResponseHeader Header { get; set; }
		
		/// <summary>
		/// A Response Policy Rule is a selector that applies its behavior to queries that match the selector. Selectors are DNS names, which may be wildcards or exact matches. Each DNS query subject to a Response Policy matches at most one ResponsePolicyRule, as identified by the dns_name field with the longest matching suffix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsePolicyRule")]
		public ResponsePolicyRule ResponsePolicyRule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResponsePolicyRulesUpdateResponse
	{
		
		/// <summary>
		/// Elements common to every response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public ResponseHeader Header { get; set; }
		
		/// <summary>
		/// A Response Policy Rule is a selector that applies its behavior to queries that match the selector. Selectors are DNS names, which may be wildcards or exact matches. Each DNS query subject to a Response Policy matches at most one ResponsePolicyRule, as identified by the dns_name field with the longest matching suffix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responsePolicyRule")]
		public ResponsePolicyRule ResponsePolicyRule { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Fetches the representation of an existing Project.
		/// Dns_projects_get dns/v2/projects/{project}/locations/{location}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<Project> Dns_projects_getAsync(string project, string location, string clientOperationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Project>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enumerates ManagedZones that have been created but not yet deleted.
		/// Dns_managedZones_list dns/v2/projects/{project}/locations/{location}/managedZones
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="dnsName">Restricts the list to return only zones with this domain name.</param>
		/// <param name="maxResults">Optional. Maximum number of results to be returned. If unspecified, the server decides how many results to return.</param>
		/// <param name="pageToken">Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.</param>
		/// <returns>Successful response</returns>
		public async Task<ManagedZonesListResponse> Dns_managedZones_listAsync(string project, string location, string dnsName, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones&dnsName=" + (dnsName==null? "" : System.Uri.EscapeDataString(dnsName))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ManagedZonesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new ManagedZone.
		/// Dns_managedZones_create dns/v2/projects/{project}/locations/{location}/managedZones
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<ManagedZone> Dns_managedZones_createAsync(string project, string location, string clientOperationId, ManagedZone requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ManagedZone>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a previously created ManagedZone.
		/// Dns_managedZones_delete dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="managedZone">Identifies the managed zone addressed by this request. Can be the managed zone name or ID.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task Dns_managedZones_deleteAsync(string project, string location, string managedZone, string clientOperationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones/"+ (managedZone==null? "" : System.Uri.EscapeDataString(managedZone))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches the representation of an existing ManagedZone.
		/// Dns_managedZones_get dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="managedZone">Identifies the managed zone addressed by this request. Can be the managed zone name or ID.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<ManagedZone> Dns_managedZones_getAsync(string project, string location, string managedZone, string clientOperationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones/"+ (managedZone==null? "" : System.Uri.EscapeDataString(managedZone))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ManagedZone>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies a partial update to an existing ManagedZone.
		/// Dns_managedZones_patch dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="managedZone">Identifies the managed zone addressed by this request. Can be the managed zone name or ID.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dns_managedZones_patchAsync(string project, string location, string managedZone, string clientOperationId, ManagedZone requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones/"+ (managedZone==null? "" : System.Uri.EscapeDataString(managedZone))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing ManagedZone.
		/// Dns_managedZones_update dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="managedZone">Identifies the managed zone addressed by this request. Can be the managed zone name or ID.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dns_managedZones_updateAsync(string project, string location, string managedZone, string clientOperationId, ManagedZone requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones/"+ (managedZone==null? "" : System.Uri.EscapeDataString(managedZone))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enumerates Changes to a ResourceRecordSet collection.
		/// Dns_changes_list dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/changes
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="managedZone">Identifies the managed zone addressed by this request. Can be the managed zone name or ID.</param>
		/// <param name="maxResults">Optional. Maximum number of results to be returned. If unspecified, the server decides how many results to return.</param>
		/// <param name="pageToken">Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.</param>
		/// <param name="sortBy">Sorting criterion. The only supported value is change sequence.</param>
		/// <param name="sortOrder">Sorting order direction: 'ascending' or 'descending'.</param>
		/// <returns>Successful response</returns>
		public async Task<ChangesListResponse> Dns_changes_listAsync(string project, string location, string managedZone, int maxResults, string pageToken, Dns_changes_listSortBy sortBy, string sortOrder, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones/"+ (managedZone==null? "" : System.Uri.EscapeDataString(managedZone))+"/changes&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&sortBy=" + sortBy+"&sortOrder=" + (sortOrder==null? "" : System.Uri.EscapeDataString(sortOrder));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChangesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Atomically updates the ResourceRecordSet collection.
		/// Dns_changes_create dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/changes
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="managedZone">Identifies the managed zone addressed by this request. Can be the managed zone name or ID.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<Change> Dns_changes_createAsync(string project, string location, string managedZone, string clientOperationId, Change requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones/"+ (managedZone==null? "" : System.Uri.EscapeDataString(managedZone))+"/changes&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Change>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches the representation of an existing Change.
		/// Dns_changes_get dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/changes/{changeId}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="managedZone">Identifies the managed zone addressed by this request. Can be the managed zone name or ID.</param>
		/// <param name="changeId">The identifier of the requested change, from a previous ResourceRecordSetsChangeResponse.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<Change> Dns_changes_getAsync(string project, string location, string managedZone, string changeId, string clientOperationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones/"+ (managedZone==null? "" : System.Uri.EscapeDataString(managedZone))+"/changes/"+ (changeId==null? "" : System.Uri.EscapeDataString(changeId))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Change>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enumerates DnsKeys to a ResourceRecordSet collection.
		/// Dns_dnsKeys_list dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/dnsKeys
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="managedZone">Identifies the managed zone addressed by this request. Can be the managed zone name or ID.</param>
		/// <param name="digestType">An optional comma-separated list of digest types to compute and display for key signing keys. If omitted, the recommended digest type is computed and displayed.</param>
		/// <param name="maxResults">Optional. Maximum number of results to be returned. If unspecified, the server decides how many results to return.</param>
		/// <param name="pageToken">Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.</param>
		/// <returns>Successful response</returns>
		public async Task<DnsKeysListResponse> Dns_dnsKeys_listAsync(string project, string location, string managedZone, string digestType, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones/"+ (managedZone==null? "" : System.Uri.EscapeDataString(managedZone))+"/dnsKeys&digestType=" + (digestType==null? "" : System.Uri.EscapeDataString(digestType))+"&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DnsKeysListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches the representation of an existing DnsKey.
		/// Dns_dnsKeys_get dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/dnsKeys/{dnsKeyId}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="managedZone">Identifies the managed zone addressed by this request. Can be the managed zone name or ID.</param>
		/// <param name="dnsKeyId">The identifier of the requested DnsKey.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <param name="digestType">An optional comma-separated list of digest types to compute and display for key signing keys. If omitted, the recommended digest type is computed and displayed.</param>
		/// <returns>Successful response</returns>
		public async Task<DnsKey> Dns_dnsKeys_getAsync(string project, string location, string managedZone, string dnsKeyId, string clientOperationId, string digestType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones/"+ (managedZone==null? "" : System.Uri.EscapeDataString(managedZone))+"/dnsKeys/"+ (dnsKeyId==null? "" : System.Uri.EscapeDataString(dnsKeyId))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId))+"&digestType=" + (digestType==null? "" : System.Uri.EscapeDataString(digestType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DnsKey>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enumerates Operations for the given ManagedZone.
		/// Dns_managedZoneOperations_list dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/operations
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="managedZone">Identifies the managed zone addressed by this request.</param>
		/// <param name="maxResults">Optional. Maximum number of results to be returned. If unspecified, the server decides how many results to return.</param>
		/// <param name="pageToken">Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.</param>
		/// <param name="sortBy">Sorting criterion. The only supported values are START_TIME and ID.</param>
		/// <returns>Successful response</returns>
		public async Task<ManagedZoneOperationsListResponse> Dns_managedZoneOperations_listAsync(string project, string location, string managedZone, int maxResults, string pageToken, Dns_managedZoneOperations_listSortBy sortBy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones/"+ (managedZone==null? "" : System.Uri.EscapeDataString(managedZone))+"/operations&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&sortBy=" + sortBy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ManagedZoneOperationsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches the representation of an existing Operation.
		/// Dns_managedZoneOperations_get dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/operations/{operation}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="managedZone">Identifies the managed zone addressed by this request.</param>
		/// <param name="operation">Identifies the operation addressed by this request (ID of the operation).</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Dns_managedZoneOperations_getAsync(string project, string location, string managedZone, string operation, string clientOperationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones/"+ (managedZone==null? "" : System.Uri.EscapeDataString(managedZone))+"/operations/"+ (operation==null? "" : System.Uri.EscapeDataString(operation))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enumerates ResourceRecordSets that you have created but not yet deleted.
		/// Dns_resourceRecordSets_list dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information is used for routing and is part of the resource name.</param>
		/// <param name="managedZone">Identifies the managed zone addressed by this request. Can be the managed zone name or ID.</param>
		/// <param name="maxResults">Optional. Maximum number of results to be returned. If unspecified, the server decides how many results to return.</param>
		/// <param name="name">Restricts the list to return only records with this fully qualified domain name.</param>
		/// <param name="pageToken">Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.</param>
		/// <param name="type">Restricts the list to return only records of this type. If present, the "name" parameter must also be present.</param>
		/// <returns>Successful response</returns>
		public async Task<ResourceRecordSetsListResponse> Dns_resourceRecordSets_listAsync(string project, string location, string managedZone, int maxResults, string name, string pageToken, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones/"+ (managedZone==null? "" : System.Uri.EscapeDataString(managedZone))+"/rrsets&maxResults="+maxResults+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResourceRecordSetsListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new ResourceRecordSet.
		/// Dns_resourceRecordSets_create dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information is used for routing and is part of the resource name.</param>
		/// <param name="managedZone">Identifies the managed zone addressed by this request. Can be the managed zone name or ID.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<ResourceRecordSet> Dns_resourceRecordSets_createAsync(string project, string location, string managedZone, string clientOperationId, ResourceRecordSet requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones/"+ (managedZone==null? "" : System.Uri.EscapeDataString(managedZone))+"/rrsets&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResourceRecordSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a previously created ResourceRecordSet.
		/// Dns_resourceRecordSets_delete dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets/{name}/{type}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information is used for routing and is part of the resource name.</param>
		/// <param name="managedZone">Identifies the managed zone addressed by this request. Can be the managed zone name or ID.</param>
		/// <param name="name">Fully qualified domain name.</param>
		/// <param name="type">RRSet type.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task Dns_resourceRecordSets_deleteAsync(string project, string location, string managedZone, string name, string type, string clientOperationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones/"+ (managedZone==null? "" : System.Uri.EscapeDataString(managedZone))+"/rrsets/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches the representation of an existing ResourceRecordSet.
		/// Dns_resourceRecordSets_get dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets/{name}/{type}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information is used for routing and is part of the resource name.</param>
		/// <param name="managedZone">Identifies the managed zone addressed by this request. Can be the managed zone name or ID.</param>
		/// <param name="name">Fully qualified domain name.</param>
		/// <param name="type">RRSet type.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<ResourceRecordSet> Dns_resourceRecordSets_getAsync(string project, string location, string managedZone, string name, string type, string clientOperationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones/"+ (managedZone==null? "" : System.Uri.EscapeDataString(managedZone))+"/rrsets/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResourceRecordSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies a partial update to an existing ResourceRecordSet.
		/// Dns_resourceRecordSets_patch dns/v2/projects/{project}/locations/{location}/managedZones/{managedZone}/rrsets/{name}/{type}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="managedZone">Identifies the managed zone addressed by this request. Can be the managed zone name or ID.</param>
		/// <param name="name">Fully qualified domain name.</param>
		/// <param name="type">RRSet type.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<ResourceRecordSet> Dns_resourceRecordSets_patchAsync(string project, string location, string managedZone, string name, string type, string clientOperationId, ResourceRecordSet requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/managedZones/"+ (managedZone==null? "" : System.Uri.EscapeDataString(managedZone))+"/rrsets/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/"+ (type==null? "" : System.Uri.EscapeDataString(type))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResourceRecordSet>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enumerates all Policies associated with a project.
		/// Dns_policies_list dns/v2/projects/{project}/locations/{location}/policies
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="maxResults">Optional. Maximum number of results to be returned. If unspecified, the server decides how many results to return.</param>
		/// <param name="pageToken">Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.</param>
		/// <returns>Successful response</returns>
		public async Task<PoliciesListResponse> Dns_policies_listAsync(string project, string location, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/policies&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PoliciesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Policy.
		/// Dns_policies_create dns/v2/projects/{project}/locations/{location}/policies
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Dns_policies_createAsync(string project, string location, string clientOperationId, Policy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/policies&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a previously created Policy. Fails if the policy is still being referenced by a network.
		/// Dns_policies_delete dns/v2/projects/{project}/locations/{location}/policies/{policy}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="policy">User given friendly name of the policy addressed by this request.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task Dns_policies_deleteAsync(string project, string location, string policy, string clientOperationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/policies/"+ (policy==null? "" : System.Uri.EscapeDataString(policy))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches the representation of an existing Policy.
		/// Dns_policies_get dns/v2/projects/{project}/locations/{location}/policies/{policy}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="policy">User given friendly name of the policy addressed by this request.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<Policy> Dns_policies_getAsync(string project, string location, string policy, string clientOperationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/policies/"+ (policy==null? "" : System.Uri.EscapeDataString(policy))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies a partial update to an existing Policy.
		/// Dns_policies_patch dns/v2/projects/{project}/locations/{location}/policies/{policy}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="policy">User given friendly name of the policy addressed by this request.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<PoliciesPatchResponse> Dns_policies_patchAsync(string project, string location, string policy, string clientOperationId, Policy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/policies/"+ (policy==null? "" : System.Uri.EscapeDataString(policy))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PoliciesPatchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Policy.
		/// Dns_policies_update dns/v2/projects/{project}/locations/{location}/policies/{policy}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="policy">User given friendly name of the policy addressed by this request.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<PoliciesUpdateResponse> Dns_policies_updateAsync(string project, string location, string policy, string clientOperationId, Policy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/policies/"+ (policy==null? "" : System.Uri.EscapeDataString(policy))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PoliciesUpdateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enumerates all Response Policies associated with a project.
		/// Dns_responsePolicies_list dns/v2/projects/{project}/locations/{location}/responsePolicies
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="maxResults">Optional. Maximum number of results to be returned. If unspecified, the server decides how many results to return.</param>
		/// <param name="pageToken">Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.</param>
		/// <returns>Successful response</returns>
		public async Task<ResponsePoliciesListResponse> Dns_responsePolicies_listAsync(string project, string location, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/responsePolicies&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResponsePoliciesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Response Policy
		/// Dns_responsePolicies_create dns/v2/projects/{project}/locations/{location}/responsePolicies
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource, only applicable in the v APIs. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<ResponsePolicy> Dns_responsePolicies_createAsync(string project, string location, string clientOperationId, ResponsePolicy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/responsePolicies&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResponsePolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a previously created Response Policy. Fails if the response policy is non-empty or still being referenced by a network.
		/// Dns_responsePolicies_delete dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="responsePolicy">User assigned name of the Response Policy addressed by this request.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task Dns_responsePolicies_deleteAsync(string project, string location, string responsePolicy, string clientOperationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/responsePolicies/"+ (responsePolicy==null? "" : System.Uri.EscapeDataString(responsePolicy))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches the representation of an existing Response Policy.
		/// Dns_responsePolicies_get dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="responsePolicy">User assigned name of the Response Policy addressed by this request.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<ResponsePolicy> Dns_responsePolicies_getAsync(string project, string location, string responsePolicy, string clientOperationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/responsePolicies/"+ (responsePolicy==null? "" : System.Uri.EscapeDataString(responsePolicy))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResponsePolicy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies a partial update to an existing Response Policy.
		/// Dns_responsePolicies_patch dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="responsePolicy">User assigned name of the response policy addressed by this request.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<ResponsePoliciesPatchResponse> Dns_responsePolicies_patchAsync(string project, string location, string responsePolicy, string clientOperationId, ResponsePolicy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/responsePolicies/"+ (responsePolicy==null? "" : System.Uri.EscapeDataString(responsePolicy))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResponsePoliciesPatchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Response Policy.
		/// Dns_responsePolicies_update dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="responsePolicy">User assigned name of the Response Policy addressed by this request.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<ResponsePoliciesUpdateResponse> Dns_responsePolicies_updateAsync(string project, string location, string responsePolicy, string clientOperationId, ResponsePolicy requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/responsePolicies/"+ (responsePolicy==null? "" : System.Uri.EscapeDataString(responsePolicy))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResponsePoliciesUpdateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enumerates all Response Policy Rules associated with a project.
		/// Dns_responsePolicyRules_list dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="responsePolicy">User assigned name of the Response Policy to list.</param>
		/// <param name="maxResults">Optional. Maximum number of results to be returned. If unspecified, the server decides how many results to return.</param>
		/// <param name="pageToken">Optional. A tag returned by a previous list request that was truncated. Use this parameter to continue a previous list request.</param>
		/// <returns>Successful response</returns>
		public async Task<ResponsePolicyRulesListResponse> Dns_responsePolicyRules_listAsync(string project, string location, string responsePolicy, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/responsePolicies/"+ (responsePolicy==null? "" : System.Uri.EscapeDataString(responsePolicy))+"/rules&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResponsePolicyRulesListResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new Response Policy Rule.
		/// Dns_responsePolicyRules_create dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="responsePolicy">User assigned name of the Response Policy containing the Response Policy Rule.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<ResponsePolicyRule> Dns_responsePolicyRules_createAsync(string project, string location, string responsePolicy, string clientOperationId, ResponsePolicyRule requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/responsePolicies/"+ (responsePolicy==null? "" : System.Uri.EscapeDataString(responsePolicy))+"/rules&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResponsePolicyRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a previously created Response Policy Rule.
		/// Dns_responsePolicyRules_delete dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="responsePolicy">User assigned name of the Response Policy containing the Response Policy Rule.</param>
		/// <param name="responsePolicyRule">User assigned name of the Response Policy Rule addressed by this request.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task Dns_responsePolicyRules_deleteAsync(string project, string location, string responsePolicy, string responsePolicyRule, string clientOperationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/responsePolicies/"+ (responsePolicy==null? "" : System.Uri.EscapeDataString(responsePolicy))+"/rules/"+ (responsePolicyRule==null? "" : System.Uri.EscapeDataString(responsePolicyRule))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches the representation of an existing Response Policy Rule.
		/// Dns_responsePolicyRules_get dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="responsePolicy">User assigned name of the Response Policy containing the Response Policy Rule.</param>
		/// <param name="responsePolicyRule">User assigned name of the Response Policy Rule addressed by this request.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<ResponsePolicyRule> Dns_responsePolicyRules_getAsync(string project, string location, string responsePolicy, string responsePolicyRule, string clientOperationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/responsePolicies/"+ (responsePolicy==null? "" : System.Uri.EscapeDataString(responsePolicy))+"/rules/"+ (responsePolicyRule==null? "" : System.Uri.EscapeDataString(responsePolicyRule))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResponsePolicyRule>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies a partial update to an existing Response Policy Rule.
		/// Dns_responsePolicyRules_patch dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="responsePolicy">User assigned name of the Response Policy containing the Response Policy Rule.</param>
		/// <param name="responsePolicyRule">User assigned name of the Response Policy Rule addressed by this request.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<ResponsePolicyRulesPatchResponse> Dns_responsePolicyRules_patchAsync(string project, string location, string responsePolicy, string responsePolicyRule, string clientOperationId, ResponsePolicyRule requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/responsePolicies/"+ (responsePolicy==null? "" : System.Uri.EscapeDataString(responsePolicy))+"/rules/"+ (responsePolicyRule==null? "" : System.Uri.EscapeDataString(responsePolicyRule))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResponsePolicyRulesPatchResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Response Policy Rule.
		/// Dns_responsePolicyRules_update dns/v2/projects/{project}/locations/{location}/responsePolicies/{responsePolicy}/rules/{responsePolicyRule}
		/// </summary>
		/// <param name="project">Identifies the project addressed by this request.</param>
		/// <param name="location">Specifies the location of the resource. This information will be used for routing and will be part of the resource name.</param>
		/// <param name="responsePolicy">User assigned name of the Response Policy containing the Response Policy Rule.</param>
		/// <param name="responsePolicyRule">User assigned name of the Response Policy Rule addressed by this request.</param>
		/// <param name="clientOperationId">For mutating operation requests only. An optional identifier specified by the client. Must be unique for operation resources in the Operations collection.</param>
		/// <returns>Successful response</returns>
		public async Task<ResponsePolicyRulesUpdateResponse> Dns_responsePolicyRules_updateAsync(string project, string location, string responsePolicy, string responsePolicyRule, string clientOperationId, ResponsePolicyRule requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/projects/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/locations/"+ (location==null? "" : System.Uri.EscapeDataString(location))+"/responsePolicies/"+ (responsePolicy==null? "" : System.Uri.EscapeDataString(responsePolicy))+"/rules/"+ (responsePolicyRule==null? "" : System.Uri.EscapeDataString(responsePolicyRule))+"&clientOperationId=" + (clientOperationId==null? "" : System.Uri.EscapeDataString(clientOperationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ResponsePolicyRulesUpdateResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
		/// Dns_managedZones_getIamPolicy dns/v2/{resource}:getIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleIamV1Policy> Dns_managedZones_getIamPolicyAsync(string resource, GoogleIamV1GetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":getIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleIamV1Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the access control policy on the specified resource. Replaces any existing policy. Can return `NOT_FOUND`, `INVALID_ARGUMENT`, and `PERMISSION_DENIED` errors.
		/// Dns_managedZones_setIamPolicy dns/v2/{resource}:setIamPolicy
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy is being specified. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleIamV1Policy> Dns_managedZones_setIamPolicyAsync(string resource, GoogleIamV1SetIamPolicyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":setIamPolicy";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleIamV1Policy>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns permissions that a caller has on the specified resource. If the resource does not exist, this returns an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may "fail open" without warning.
		/// Dns_managedZones_testIamPermissions dns/v2/{resource}:testIamPermissions
		/// </summary>
		/// <param name="resource">REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleIamV1TestIamPermissionsResponse> Dns_managedZones_testIamPermissionsAsync(string resource, GoogleIamV1TestIamPermissionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dns/v2/"+ (resource==null? "" : System.Uri.EscapeDataString(resource))+":testIamPermissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleIamV1TestIamPermissionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Dns_changes_listSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHANGE_SEQUENCE = 0,
	}
	
	public enum Dns_managedZoneOperations_listSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_TIME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
