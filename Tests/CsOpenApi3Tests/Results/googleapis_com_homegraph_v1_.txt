//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Third-party device ID for one device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentDeviceId
	{
		
		/// <summary>
		/// Third-party device ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Alternate third-party device ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgentOtherDeviceId
	{
		
		/// <summary>
		/// Project ID for your smart home Action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentId")]
		public string AgentId { get; set; }
		
		/// <summary>
		/// Unique third-party device ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
	}
	
	/// <summary>
	/// Third-party device definition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Device
	{
		
		/// <summary>
		/// Attributes for the traits supported by the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public System.Collections.Generic.Dictionary<string, object> Attributes { get; set; }
		
		/// <summary>
		/// Custom device attributes stored in Home Graph and provided to your smart home Action in each [QUERY](https://developers.home.google.com/cloud-to-cloud/intents/query) and [EXECUTE](https://developers.home.google.com/cloud-to-cloud/intents/execute) intent. Data in this object has a few constraints: No sensitive information, including but not limited to Personally Identifiable Information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customData")]
		public System.Collections.Generic.Dictionary<string, object> CustomData { get; set; }
		
		/// <summary>
		/// Device information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceInfo")]
		public DeviceInfo DeviceInfo { get; set; }
		
		/// <summary>
		/// Third-party device ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Identifiers used to describe the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public DeviceNames Name { get; set; }
		
		/// <summary>
		/// Indicates whether your smart home Action will report notifications to Google for this device via ReportStateAndNotification. If your smart home Action enables users to control device notifications, you should update this field and call RequestSyncDevices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationSupportedByAgent")]
		public System.Nullable<System.Boolean> NotificationSupportedByAgent { get; set; }
		
		/// <summary>
		/// Alternate IDs associated with this device. This is used to identify cloud synced devices enabled for [local fulfillment](https://developers.home.google.com/local-home/overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherDeviceIds")]
		public AgentOtherDeviceId[] OtherDeviceIds { get; set; }
		
		/// <summary>
		/// Suggested name for the room where this device is installed. Google attempts to use this value during user setup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="roomHint")]
		public string RoomHint { get; set; }
		
		/// <summary>
		/// Suggested name for the structure where this device is installed. Google attempts to use this value during user setup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="structureHint")]
		public string StructureHint { get; set; }
		
		/// <summary>
		/// Traits supported by the device. See [device traits](https://developers.home.google.com/cloud-to-cloud/traits).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traits")]
		public string[] Traits { get; set; }
		
		/// <summary>
		/// Hardware type of the device. See [device types](https://developers.home.google.com/cloud-to-cloud/guides).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Indicates whether your smart home Action will report state of this device to Google via ReportStateAndNotification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="willReportState")]
		public System.Nullable<System.Boolean> WillReportState { get; set; }
	}
	
	/// <summary>
	/// Device information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceInfo
	{
		
		/// <summary>
		/// Device hardware version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hwVersion")]
		public string HwVersion { get; set; }
		
		/// <summary>
		/// Device manufacturer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturer")]
		public string Manufacturer { get; set; }
		
		/// <summary>
		/// Device model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// Device software version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="swVersion")]
		public string SwVersion { get; set; }
	}
	
	/// <summary>
	/// Identifiers used to describe the device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceNames
	{
		
		/// <summary>
		/// List of names provided by the manufacturer rather than the user, such as serial numbers, SKUs, etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultNames")]
		public string[] DefaultNames { get; set; }
		
		/// <summary>
		/// Primary name of the device, generally provided by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Additional names provided by the user for the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nicknames")]
		public string[] Nicknames { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Request type for the [`Query`](#google.home.graph.v1.HomeGraphApiService.Query) call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryRequest
	{
		
		/// <summary>
		/// Required. Third-party user ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentUserId")]
		public string AgentUserId { get; set; }
		
		/// <summary>
		/// Required. Inputs containing third-party device IDs for which to get the device states.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputs")]
		public QueryRequestInput[] Inputs { get; set; }
		
		/// <summary>
		/// Request ID used for debugging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Device ID inputs to QueryRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryRequestInput
	{
		
		/// <summary>
		/// Payload containing device IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public QueryRequestPayload Payload { get; set; }
	}
	
	/// <summary>
	/// Payload containing device IDs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryRequestPayload
	{
		
		/// <summary>
		/// Third-party device IDs for which to get the device states.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public AgentDeviceId[] Devices { get; set; }
	}
	
	/// <summary>
	/// Response type for the [`Query`](#google.home.graph.v1.HomeGraphApiService.Query) call. This should follow the same format as the Google smart home `action.devices.QUERY` [response](https://developers.home.google.com/cloud-to-cloud/intents/query). Example: ```json { "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf", "payload": { "devices": { "123": { "on": true, "online": true }, "456": { "on": true, "online": true, "brightness": 80, "color": { "name": "cerulean", "spectrumRGB": 31655 } } } } } ```
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryResponse
	{
		
		/// <summary>
		/// Payload containing device states information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public QueryResponsePayload Payload { get; set; }
		
		/// <summary>
		/// Request ID used for debugging. Copied from the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Payload containing device states information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryResponsePayload
	{
		
		/// <summary>
		/// States of the devices. Map of third-party device ID to struct of device states.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public System.Collections.Generic.Dictionary<string, object> Devices { get; set; }
	}
	
	/// <summary>
	/// The states and notifications specific to a device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportStateAndNotificationDevice
	{
		
		/// <summary>
		/// Notifications metadata for devices. See the **Device NOTIFICATIONS** section of the individual trait [reference guides](https://developers.home.google.com/cloud-to-cloud/traits).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifications")]
		public System.Collections.Generic.Dictionary<string, object> Notifications { get; set; }
		
		/// <summary>
		/// States of devices to update. See the **Device STATES** section of the individual trait [reference guides](https://developers.home.google.com/cloud-to-cloud/traits).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="states")]
		public System.Collections.Generic.Dictionary<string, object> States { get; set; }
	}
	
	/// <summary>
	/// Request type for the [`ReportStateAndNotification`](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification) call. It may include states, notifications, or both. States and notifications are defined per `device_id` (for example, "123" and "456" in the following example). Example: ```json { "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf", "agentUserId": "1234", "payload": { "devices": { "states": { "123": { "on": true }, "456": { "on": true, "brightness": 10 } }, } } } ```
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportStateAndNotificationRequest
	{
		
		/// <summary>
		/// Required. Third-party user ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentUserId")]
		public string AgentUserId { get; set; }
		
		/// <summary>
		/// Unique identifier per event (for example, a doorbell press).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		/// <summary>
		/// Deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="followUpToken")]
		public string FollowUpToken { get; set; }
		
		/// <summary>
		/// Payload containing the state and notification information for devices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public StateAndNotificationPayload Payload { get; set; }
		
		/// <summary>
		/// Request ID used for debugging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Payload containing the state and notification information for devices.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StateAndNotificationPayload
	{
		
		/// <summary>
		/// The states and notifications specific to a device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public ReportStateAndNotificationDevice Devices { get; set; }
	}
	
	/// <summary>
	/// Response type for the [`ReportStateAndNotification`](#google.home.graph.v1.HomeGraphApiService.ReportStateAndNotification) call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportStateAndNotificationResponse
	{
		
		/// <summary>
		/// Request ID copied from ReportStateAndNotificationRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Request type for the [`RequestSyncDevices`](#google.home.graph.v1.HomeGraphApiService.RequestSyncDevices) call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestSyncDevicesRequest
	{
		
		/// <summary>
		/// Required. Third-party user ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentUserId")]
		public string AgentUserId { get; set; }
		
		/// <summary>
		/// Optional. If set, the request will be added to a queue and a response will be returned immediately. This enables concurrent requests for the given `agent_user_id`, but the caller will not receive any error responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="async")]
		public System.Nullable<System.Boolean> Async { get; set; }
	}
	
	/// <summary>
	/// Response type for the [`RequestSyncDevices`](#google.home.graph.v1.HomeGraphApiService.RequestSyncDevices) call. Intentionally empty upon success. An HTTP response code is returned with more details upon failure.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestSyncDevicesResponse
	{
	}
	
	/// <summary>
	/// Request type for the [`Sync`](#google.home.graph.v1.HomeGraphApiService.Sync) call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SyncRequest
	{
		
		/// <summary>
		/// Required. Third-party user ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentUserId")]
		public string AgentUserId { get; set; }
		
		/// <summary>
		/// Request ID used for debugging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Response type for the [`Sync`](#google.home.graph.v1.HomeGraphApiService.Sync) call. This should follow the same format as the Google smart home `action.devices.SYNC` [response](https://developers.home.google.com/cloud-to-cloud/intents/sync). Example: ```json { "requestId": "ff36a3cc-ec34-11e6-b1a0-64510650abcf", "payload": { "agentUserId": "1836.15267389", "devices": [{ "id": "123", "type": "action.devices.types.OUTLET", "traits": [ "action.devices.traits.OnOff" ], "name": { "defaultNames": ["My Outlet 1234"], "name": "Night light", "nicknames": ["wall plug"] }, "willReportState": false, "deviceInfo": { "manufacturer": "lights-out-inc", "model": "hs1234", "hwVersion": "3.2", "swVersion": "11.4" }, "customData": { "fooValue": 74, "barValue": true, "bazValue": "foo" } }] } } ```
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SyncResponse
	{
		
		/// <summary>
		/// Payload containing device information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public SyncResponsePayload Payload { get; set; }
		
		/// <summary>
		/// Request ID used for debugging. Copied from the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	/// <summary>
	/// Payload containing device information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SyncResponsePayload
	{
		
		/// <summary>
		/// Third-party user ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agentUserId")]
		public string AgentUserId { get; set; }
		
		/// <summary>
		/// Devices associated with the third-party user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="devices")]
		public Device[] Devices { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Gets the current states in Home Graph for the given set of the third-party user's devices. The third-party user's identity is passed in via the `agent_user_id` (see QueryRequest). This request must be authorized using service account credentials from your Actions console project.
		/// Homegraph_devices_query v1/devices:query
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<QueryResponse> Homegraph_devices_queryAsync(QueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/devices:query";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<QueryResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Reports device state and optionally sends device notifications. Called by your smart home Action when the state of a third-party device changes or you need to send a notification about the device. See [Implement Report State](https://developers.home.google.com/cloud-to-cloud/integration/report-state) for more information. This method updates the device state according to its declared [traits](https://developers.home.google.com/cloud-to-cloud/primer/device-types-and-traits). Publishing a new state value outside of these traits will result in an `INVALID_ARGUMENT` error response. The third-party user's identity is passed in via the `agent_user_id` (see ReportStateAndNotificationRequest). This request must be authorized using service account credentials from your Actions console project.
		/// Homegraph_devices_reportStateAndNotification v1/devices:reportStateAndNotification
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ReportStateAndNotificationResponse> Homegraph_devices_reportStateAndNotificationAsync(ReportStateAndNotificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/devices:reportStateAndNotification";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ReportStateAndNotificationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Requests Google to send an `action.devices.SYNC` [intent](https://developers.home.google.com/cloud-to-cloud/intents/sync) to your smart home Action to update device metadata for the given user. The third-party user's identity is passed via the `agent_user_id` (see RequestSyncDevicesRequest). This request must be authorized using service account credentials from your Actions console project.
		/// Homegraph_devices_requestSync v1/devices:requestSync
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<RequestSyncDevicesResponse> Homegraph_devices_requestSyncAsync(RequestSyncDevicesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/devices:requestSync";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<RequestSyncDevicesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets all the devices associated with the given third-party user. The third-party user's identity is passed in via the `agent_user_id` (see SyncRequest). This request must be authorized using service account credentials from your Actions console project.
		/// Homegraph_devices_sync v1/devices:sync
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SyncResponse> Homegraph_devices_syncAsync(SyncRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/devices:sync";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<SyncResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Unlinks the given third-party user from your smart home Action. All data related to this user will be deleted. For more details on how users link their accounts, see [fulfillment and authentication](https://developers.home.google.com/cloud-to-cloud/primer/fulfillment). The third-party user's identity is passed in via the `agent_user_id` (see DeleteAgentUserRequest). This request must be authorized using service account credentials from your Actions console project.
		/// Homegraph_agentUsers_delete v1/{agentUserId}
		/// </summary>
		/// <param name="agentUserId">Required. Third-party user ID.</param>
		/// <param name="requestId">Request ID used for debugging.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Homegraph_agentUsers_deleteAsync(string agentUserId, string requestId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (agentUserId==null? "" : System.Uri.EscapeDataString(agentUserId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
