//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Baudrate to use for the communication - valid values 300, 600, 1200, 2400, 4800, 9600
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Baudrate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_300 = 300,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_600 = 600,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1200 = 1200,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2400 = 2400,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4800 = 4800,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_9600 = 9600,
	}
	
	/// <summary>
	/// Raspberry Pi Hat Information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Hat
	{
		
		/// <summary>
		/// Product
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product")]
		public string Product { get; set; }
		
		/// <summary>
		/// Product ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Product Version
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productVer")]
		public string ProductVer { get; set; }
		
		/// <summary>
		/// Hat UUID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
		
		/// <summary>
		/// Hat Vendor
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vendor")]
		public string Vendor { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns this API specification
		/// Mbus_api mbus/api
		/// </summary>
		/// <returns>OK</returns>
		public async Task Mbus_apiAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mbus/api";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets data from the slave identified by {address}
		/// Get mbus/get/{device}/{baudrate}/{address}
		/// </summary>
		/// <param name="device">The serial device to scan - /dev/ is pre-pended to {device} by M-Bus HTTPD before scanning</param>
		/// <param name="baudrate">Baudrate to communicate with M-Bus devices</param>
		/// <param name="address">The slave device to get data from
		/// Min length: 1
		/// Max length: 16
		// </param>
		/// <returns>OK</returns>
		public async Task GetAsync(string device, Baudrate baudrate, string address, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mbus/get/"+ (device==null? "" : System.Uri.EscapeDataString(device))+"/"+baudrate+"/"+ (address==null? "" : System.Uri.EscapeDataString(address));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets data from the slave identified by {address}, and supports multiple responses from the slave
		/// GetMulti mbus/getMulti/{device}/{baudrate}/{address}/{maxframes}
		/// </summary>
		/// <param name="device">The serial device to scan - /dev/ is pre-pended to {device} by M-Bus HTTPD before scanning</param>
		/// <param name="baudrate">Baudrate to communicate with M-Bus devices</param>
		/// <param name="address">The slave device to get data from
		/// Min length: 1
		/// Max length: 16
		// </param>
		/// <param name="maxframes">The slave device to get data from
		/// Minimum: 1
		/// Maximum: 250
		// </param>
		/// <returns>OK</returns>
		public async Task GetMultiAsync(string device, Baudrate baudrate, string address, int maxframes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mbus/getMulti/"+ (device==null? "" : System.Uri.EscapeDataString(device))+"/"+baudrate+"/"+ (address==null? "" : System.Uri.EscapeDataString(address))+"/"+maxframes;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets Raspberry Pi Hat information
		/// Hat mbus/hat
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Hat> HatAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mbus/hat";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Hat>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Turns off power to the M-Bus
		/// HatOff mbus/hat/off
		/// </summary>
		/// <returns>OK</returns>
		public async Task HatOffAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mbus/hat/off";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Turns on power to the M-Bus
		/// HatOn mbus/hat/on
		/// </summary>
		/// <returns>OK</returns>
		public async Task HatOnAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mbus/hat/on";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Scan the specified device for slaves
		/// Scan mbus/scan/{device}/{baudrate}
		/// </summary>
		/// <param name="device">The serial device to scan - /dev/ is pre-pended to {device} by M-Bus HTTPD before scanning</param>
		/// <param name="baudrate">Baudrate to communicate with M-Bus devices</param>
		/// <returns>OK</returns>
		public async Task<string> ScanAsync(string device, Baudrate baudrate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "mbus/scan/"+ (device==null? "" : System.Uri.EscapeDataString(device))+"/"+baudrate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (System.IO.StreamReader streamReader = new System.IO.StreamReader(responseMessageStream))
				{
				return streamReader.ReadToEnd();;
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
