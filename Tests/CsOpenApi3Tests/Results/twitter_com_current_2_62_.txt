//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddOrDeleteRulesRequest
	{
	}
	
	/// <summary>
	/// A response from modifying user-specified stream filtering rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddOrDeleteRulesResponse
	{
		
		/// <summary>
		/// All user-specified stream filtering rules that were created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Rule[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public RulesResponseMetadata Meta { get; set; }
	}
	
	/// <summary>
	/// A user-provided stream filtering rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Rule
	{
		
		/// <summary>
		/// Unique identifier of this rule.
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
		
		/// <summary>
		/// A tag meant for the labeling of user provided rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		/// <summary>
		/// The filterlang value of the rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// An HTTP Problem Details object, as defined in IETF RFC 7807 (https://tools.ietf.org/html/rfc7807).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Problem
	{
		
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RulesResponseMetadata
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// Number of Rules in result set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sent")]
		public string Sent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public RulesRequestSummary Summary { get; set; }
	}
	
	/// <summary>
	/// A request to add a user-specified stream filtering rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddRulesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="add")]
		public RuleNoId[] Add { get; set; }
	}
	
	/// <summary>
	/// A user-provided stream filtering rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RuleNoId
	{
		
		/// <summary>
		/// A tag meant for the labeling of user provided rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		/// <summary>
		/// The filterlang value of the rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnimatedGif : Media
	{
		
		[System.Runtime.Serialization.DataMember(Name="preview_image_url")]
		public string Preview_image_url { get; set; }
		
		/// <summary>
		/// An array of all available variants of the media.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public Variant[] Variants { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Variant
	{
		
		/// <summary>
		/// The bit rate of the media.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bit_rate")]
		public System.Nullable<System.Int32> Bit_rate { get; set; }
		
		/// <summary>
		/// The content type of the media.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content_type")]
		public string Content_type { get; set; }
		
		/// <summary>
		/// The url to the media.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlockUserMutationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BlockUserMutationResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class BlockUserMutationResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="blocking")]
		public System.Nullable<System.Boolean> Blocking { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BlockUserRequest
	{
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target_user_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Target_user_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BookmarkAddRequest
	{
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tweet_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Tweet_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BookmarkMutationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public BookmarkMutationResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class BookmarkMutationResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="bookmarked")]
		public System.Nullable<System.Boolean> Bookmarked { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CashtagEntity : EntityIndicesInclusiveExclusive
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// Represent the portion of text recognized as a Cashtag, and its start and end position within the text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CashtagFields
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// Your client has gone away.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientDisconnectedProblem
	{
	}
	
	/// <summary>
	/// A problem that indicates your client is forbidden from making this request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ClientForbiddenProblem : Problem
	{
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<ClientForbiddenProblemReason> Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registration_url")]
		public string Registration_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ClientForbiddenProblemReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="official-client-forbidden")]
		officialMinusclientMinusforbidden = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="client-not-enrolled")]
		clientMinusnotMinusenrolled = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ComplianceJob
	{
		
		/// <summary>
		/// Creation time of the compliance job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.DateTimeOffset Created_at { get; set; }
		
		/// <summary>
		/// Expiration time of the download URL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="download_expires_at")]
		public System.DateTimeOffset Download_expires_at { get; set; }
		
		/// <summary>
		/// URL from which the user will retrieve their compliance results.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="download_url")]
		public string Download_url { get; set; }
		
		/// <summary>
		/// Compliance Job ID.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
		
		/// <summary>
		/// User-provided name for a compliance job.
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Name { get; set; }
		
		/// <summary>
		/// Status of a compliance job.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ComplianceJobStatus Status { get; set; }
		
		/// <summary>
		/// Type of compliance job to list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ComplianceJobType Type { get; set; }
		
		/// <summary>
		/// Expiration time of the upload URL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="upload_expires_at")]
		public System.DateTimeOffset Upload_expires_at { get; set; }
		
		/// <summary>
		/// URL to which the user will upload their Tweet or user IDs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="upload_url")]
		public string Upload_url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ComplianceJobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="created")]
		created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in_progress")]
		in_progress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="expired")]
		expired = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ComplianceJobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tweets")]
		tweets = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="users")]
		users = 1,
	}
	
	/// <summary>
	/// You cannot create a new job if one is already in progress.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictProblem
	{
	}
	
	/// <summary>
	/// A problem that indicates something is wrong with the connection.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConnectionExceptionProblem : Problem
	{
		
		[System.Runtime.Serialization.DataMember(Name="connection_issue")]
		public System.Nullable<ConnectionExceptionProblemConnection_issue> Connection_issue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConnectionExceptionProblemConnection_issue
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TooManyConnections")]
		TooManyConnections = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ProvisioningSubscription")]
		ProvisioningSubscription = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RuleConfigurationIssue")]
		RuleConfigurationIssue = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RulesInvalidIssue")]
		RulesInvalidIssue = 3,
	}
	
	/// <summary>
	/// Annotation inferred from the Tweet text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContextAnnotation
	{
		
		/// <summary>
		/// Represents the data for the context annotation domain.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public ContextAnnotationDomainFields Domain { get; set; }
		
		/// <summary>
		/// Represents the data for the context annotation entity.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entity")]
		public ContextAnnotationEntityFields Entity { get; set; }
	}
	
	/// <summary>
	/// Represents the data for the context annotation domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContextAnnotationDomainFields
	{
		
		/// <summary>
		/// Description of the context annotation domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The unique id for a context annotation domain.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the context annotation domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Represents the data for the context annotation entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContextAnnotationEntityFields
	{
		
		/// <summary>
		/// Description of the context annotation entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The unique id for a context annotation entity.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the context annotation entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAttachmentsMessageRequest
	{
		
		/// <summary>
		/// Attachments to a DM Event.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public DmMediaAttachment[] Attachments { get; set; }
		
		/// <summary>
		/// Text of the message.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DmMediaAttachment
	{
		
		/// <summary>
		/// The unique identifier of this Media.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="media_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Media_id { get; set; }
	}
	
	/// <summary>
	/// A request to create a new batch compliance job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateComplianceJobRequest
	{
		
		/// <summary>
		/// User-provided name for a compliance job.
		/// Max length: 64
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Name { get; set; }
		
		/// <summary>
		/// If true, this endpoint will return a pre-signed URL with resumable uploads enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resumable")]
		public System.Nullable<System.Boolean> Resumable { get; set; }
		
		/// <summary>
		/// Type of compliance job to list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ComplianceJobType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateComplianceJobResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ComplianceJob Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDmConversationRequest
	{
		
		/// <summary>
		/// The conversation type that is being created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="conversation_type")]
		public CreateDmConversationRequestConversation_type Conversation_type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public CreateMessageRequest Message { get; set; }
		
		/// <summary>
		/// Participants for the DM Conversation.
		/// Required
		/// Minimum items: 2
		/// Maximum items: 49
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="participant_ids")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(49)]
		public string[] Participant_ids { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CreateDmConversationRequestConversation_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Group")]
		Group = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDmEventResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CreateDmEventResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class CreateDmEventResponseData
	{
		
		/// <summary>
		/// Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a '-' character in the case of one-on-one DM Conversations.
		/// Required
		/// Pattern: ^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dm_conversation_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$")]
		public string Dm_conversation_id { get; set; }
		
		/// <summary>
		/// Unique identifier of a DM Event.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dm_event_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Dm_event_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateMessageRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateTextMessageRequest
	{
		
		/// <summary>
		/// Attachments to a DM Event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public DmMediaAttachment[] Attachments { get; set; }
		
		/// <summary>
		/// Text of the message.
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// A response from deleting user-specified stream filtering rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRulesRequest
	{
		
		/// <summary>
		/// IDs and values of all deleted user-specified stream filtering rules.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="delete")]
		public DeleteRulesRequestDelete Delete { get; set; }
	}
	
	public class DeleteRulesRequestDelete
	{
		
		/// <summary>
		/// IDs of all deleted user-specified stream filtering rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ids")]
		public string[] Ids { get; set; }
		
		/// <summary>
		/// Values of all deleted user-specified stream filtering rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// A problem that indicates that the resource requested violates the precepts of this API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisallowedResourceProblem : Problem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_id")]
		public string Resource_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_type")]
		public DisallowedResourceProblemResource_type Resource_type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="section")]
		public DisallowedResourceProblemSection Section { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DisallowedResourceProblemResource_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user")]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tweet")]
		tweet = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="media")]
		media = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="list")]
		list = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="space")]
		space = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DisallowedResourceProblemSection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="data")]
		data = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="includes")]
		includes = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DmEvent
	{
		
		/// <summary>
		/// Specifies the type of attachments (if any) present in this DM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public DmEventAttachments Attachments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// Unique identifier of a DM conversation. This can either be a numeric string, or a pair of numeric strings separated by a '-' character in the case of one-on-one DM Conversations.
		/// Pattern: ^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dm_conversation_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9]{1,19}-[0-9]{1,19}|[0-9]{15,19})$")]
		public string Dm_conversation_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_type")]
		public string Event_type { get; set; }
		
		/// <summary>
		/// Unique identifier of a DM Event.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
		
		/// <summary>
		/// A list of participants for a ParticipantsJoin or ParticipantsLeave event_type.
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="participant_ids")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Participant_ids { get; set; }
		
		/// <summary>
		/// A list of Tweets this DM refers to.
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenced_tweets")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DmEventReferenced_tweets[] DmEventReferenced_tweets { get; set; }
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sender_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Sender_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	public class DmEventAttachments
	{
		
		/// <summary>
		/// A list of card IDs (if cards are attached).
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_ids")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Card_ids { get; set; }
		
		/// <summary>
		/// A list of Media Keys for each one of the media attachments (if media are attached).
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media_keys")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Media_keys { get; set; }
	}
	
	public class DmEventReferenced_tweets
	{
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// The rule you have submitted is a duplicate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DuplicateRuleProblem : Problem
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Represent a boundary range (start and end index) for a recognized entity (for example a hashtag or a mention). `start` must be smaller than `end`.  The start index is inclusive, the end index is exclusive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntityIndicesInclusiveExclusive
	{
		
		/// <summary>
		/// Index (zero-based) at which position this entity ends.  The index is exclusive.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int End { get; set; }
		
		/// <summary>
		/// Index (zero-based) at which position this entity starts.  The index is inclusive.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int Start { get; set; }
	}
	
	/// <summary>
	/// Represent a boundary range (start and end index) for a recognized entity (for example a hashtag or a mention). `start` must be smaller than `end`.  The start index is inclusive, the end index is inclusive.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntityIndicesInclusiveInclusive
	{
		
		/// <summary>
		/// Index (zero-based) at which position this entity ends.  The index is inclusive.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int End { get; set; }
		
		/// <summary>
		/// Index (zero-based) at which position this entity starts.  The index is inclusive.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public int Start { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public int Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Expansions
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Media[] Media { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="places")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Place[] Places { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="polls")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Poll[] Polls { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topics")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Topic[] Topics { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tweets")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tweet[] Tweets { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="users")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public User[] Users { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Media
	{
		
		/// <summary>
		/// The height of the media in pixels.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// The Media Key identifier for this attachment.
		/// Pattern: ^([0-9]+)_([0-9]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media_key")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9]+)_([0-9]+)$")]
		public string Media_key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The width of the media in pixels.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Place
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contained_within")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Contained_within { get; set; }
		
		/// <summary>
		/// The full name of the county in which this place exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// A two-letter ISO 3166-1 alpha-2 country code.
		/// Pattern: ^[A-Z]{2}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Z]{2}$")]
		public string Country_code { get; set; }
		
		/// <summary>
		/// The full name of this place.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="full_name")]
		public string Full_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="geo")]
		public Geo Geo { get; set; }
		
		/// <summary>
		/// The identifier for this place.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The human readable name of this place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="place_type")]
		public System.Nullable<PlacePlace_type> Place_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Geo
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 4
		/// Maximum items: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bbox")]
		[System.ComponentModel.DataAnnotations.MinLength(4)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public double[] Bbox { get; set; }
		
		/// <summary>
		/// A [GeoJson Point](https://tools.ietf.org/html/rfc7946#section-3.1.2) geometry object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geometry")]
		public Point Geometry { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public string Properties { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GeoType Type { get; set; }
	}
	
	/// <summary>
	/// A [GeoJson Point](https://tools.ietf.org/html/rfc7946#section-3.1.2) geometry object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Point
	{
		
		/// <summary>
		/// A [GeoJson Position](https://tools.ietf.org/html/rfc7946#section-3.1.1) in the format `[longitude,latitude]`.
		/// Required
		/// Minimum items: 2
		/// Maximum items: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="coordinates")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public double[] Coordinates { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PointType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Point")]
		Point = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GeoType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Feature")]
		Feature = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PlacePlace_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="poi")]
		poi = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="neighborhood")]
		neighborhood = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="city")]
		city = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="admin")]
		admin = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="country")]
		country = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 5,
	}
	
	/// <summary>
	/// Represent a Poll attached to a Tweet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Poll
	{
		
		/// <summary>
		/// Minimum: 5
		/// Maximum: 10080
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration_minutes")]
		[System.ComponentModel.DataAnnotations.Range(5, 10080)]
		public System.Nullable<System.Int32> Duration_minutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end_datetime")]
		public System.Nullable<System.DateTimeOffset> End_datetime { get; set; }
		
		/// <summary>
		/// Unique identifier of this poll.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 2
		/// Maximum items: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public PollOption[] Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voting_status")]
		public System.Nullable<PollVoting_status> Voting_status { get; set; }
	}
	
	/// <summary>
	/// Describes a choice in a Poll object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PollOption
	{
		
		/// <summary>
		/// The text of a poll choice.
		/// Required
		/// Max length: 25
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="label")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Label { get; set; }
		
		/// <summary>
		/// Position of this choice in the poll.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="position")]
		public int Position { get; set; }
		
		/// <summary>
		/// Number of users who voted for this choice.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="votes")]
		public int Votes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PollVoting_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="open")]
		open = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="closed")]
		closed = 1,
	}
	
	/// <summary>
	/// The topic of a Space, as selected by its creator.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Topic
	{
		
		/// <summary>
		/// The description of the given topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Unique identifier of this Topic.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the given topic.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tweet
	{
		
		/// <summary>
		/// Specifies the type of attachments (if any) present in this Tweet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public TweetAttachments Attachments { get; set; }
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Author_id { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context_annotations")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ContextAnnotation[] Context_annotations { get; set; }
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversation_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Conversation_id { get; set; }
		
		/// <summary>
		/// Creation time of the Tweet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="edit_controls")]
		public TweetEdit_controls Edit_controls { get; set; }
		
		/// <summary>
		/// A list of Tweet Ids in this Tweet chain.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="edit_history_tweet_ids")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Edit_history_tweet_ids { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public FullTextEntities Entities { get; set; }
		
		/// <summary>
		/// The location tagged on the Tweet, if the user provided one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geo")]
		public TweetGeo Geo { get; set; }
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="in_reply_to_user_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string In_reply_to_user_id { get; set; }
		
		/// <summary>
		/// Language of the Tweet, if detected by Twitter. Returned as a BCP47 language tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lang")]
		public string Lang { get; set; }
		
		/// <summary>
		/// Nonpublic engagement metrics for the Tweet at the time of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="non_public_metrics")]
		public TweetNon_public_metrics Non_public_metrics { get; set; }
		
		/// <summary>
		/// Organic nonpublic engagement metrics for the Tweet at the time of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organic_metrics")]
		public TweetOrganic_metrics Organic_metrics { get; set; }
		
		/// <summary>
		/// Indicates if this Tweet contains URLs marked as sensitive, for example content suitable for mature audiences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="possibly_sensitive")]
		public System.Nullable<System.Boolean> Possibly_sensitive { get; set; }
		
		/// <summary>
		/// Promoted nonpublic engagement metrics for the Tweet at the time of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promoted_metrics")]
		public TweetPromoted_metrics Promoted_metrics { get; set; }
		
		/// <summary>
		/// Engagement metrics for the Tweet at the time of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public_metrics")]
		public TweetPublic_metrics Public_metrics { get; set; }
		
		/// <summary>
		/// A list of Tweets this Tweet refers to. For example, if the parent Tweet is a Retweet, a Quoted Tweet or a Reply, it will include the related Tweet referenced to by its parent.
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="referenced_tweets")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public TweetReferenced_tweets[] TweetReferenced_tweets { get; set; }
		
		/// <summary>
		/// Shows who can reply a Tweet. Fields returned are everyone, mentioned_users, and following.
		/// Pattern: ^[A-Za-z]{1,12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reply_settings")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z]{1,12}$")]
		public System.Nullable<TweetReply_settings> Reply_settings { get; set; }
		
		/// <summary>
		/// This is deprecated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// The content of the Tweet.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Indicates withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withheld")]
		public TweetWithheld Withheld { get; set; }
	}
	
	public class TweetAttachments
	{
		
		/// <summary>
		/// A list of Media Keys for each one of the media attachments (if media are attached).
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media_keys")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Media_keys { get; set; }
		
		/// <summary>
		/// A list of poll IDs (if polls are attached).
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poll_ids")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Poll_ids { get; set; }
	}
	
	public class TweetEdit_controls
	{
		
		/// <summary>
		/// Time when Tweet is no longer editable.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="editable_until")]
		public System.DateTimeOffset Editable_until { get; set; }
		
		/// <summary>
		/// Number of times this Tweet can be edited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="edits_remaining")]
		public int Edits_remaining { get; set; }
		
		/// <summary>
		/// Indicates if this Tweet is eligible to be edited.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="is_edit_eligible")]
		public bool Is_edit_eligible { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FullTextEntities
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Annotations { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashtags")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public CashtagEntity[] Cashtags { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashtags")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public HashtagEntity[] Hashtags { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mentions")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public MentionEntity[] Mentions { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urls")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public UrlEntity[] Urls { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HashtagEntity : EntityIndicesInclusiveExclusive
	{
		
		/// <summary>
		/// The text of the Hashtag.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MentionEntity : EntityIndicesInclusiveExclusive
	{
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
		
		/// <summary>
		/// The Twitter handle (screen name) of this user.
		/// Required
		/// Pattern: ^[A-Za-z0-9_]{1,15}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9_]{1,15}$")]
		public string Username { get; set; }
	}
	
	/// <summary>
	/// Represent the portion of text recognized as a URL, and its start and end position within the text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UrlEntity : EntityIndicesInclusiveExclusive
	{
		
		/// <summary>
		/// Description of the URL landing page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The URL as displayed in the Twitter client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_url")]
		public string Display_url { get; set; }
		
		/// <summary>
		/// A validly formatted URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expanded_url")]
		public string Expanded_url { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public UrlImage[] Images { get; set; }
		
		/// <summary>
		/// The Media Key identifier for this attachment.
		/// Pattern: ^([0-9]+)_([0-9]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media_key")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9]+)_([0-9]+)$")]
		public string Media_key { get; set; }
		
		/// <summary>
		/// HTTP Status Code.
		/// Minimum: 100
		/// Maximum: 599
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.Range(100, 599)]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// Title of the page the URL points to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Fully resolved url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unwound_url")]
		public string Unwound_url { get; set; }
		
		/// <summary>
		/// A validly formatted URL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Represent the information for the URL image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UrlImage
	{
		
		/// <summary>
		/// The height of the media in pixels.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// A validly formatted URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The width of the media in pixels.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	public class TweetGeo
	{
		
		/// <summary>
		/// A [GeoJson Point](https://tools.ietf.org/html/rfc7946#section-3.1.2) geometry object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coordinates")]
		public Point Coordinates { get; set; }
		
		/// <summary>
		/// The identifier for this place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="place_id")]
		public string Place_id { get; set; }
	}
	
	public class TweetNon_public_metrics
	{
		
		/// <summary>
		/// Number of times this Tweet has been viewed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impression_count")]
		public System.Nullable<System.Int32> Impression_count { get; set; }
	}
	
	public class TweetOrganic_metrics
	{
		
		/// <summary>
		/// Number of times this Tweet has been viewed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="impression_count")]
		public int Impression_count { get; set; }
		
		/// <summary>
		/// Number of times this Tweet has been liked.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="like_count")]
		public int Like_count { get; set; }
		
		/// <summary>
		/// Number of times this Tweet has been replied to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reply_count")]
		public int Reply_count { get; set; }
		
		/// <summary>
		/// Number of times this Tweet has been Retweeted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="retweet_count")]
		public int Retweet_count { get; set; }
	}
	
	public class TweetPromoted_metrics
	{
		
		/// <summary>
		/// Number of times this Tweet has been viewed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impression_count")]
		public System.Nullable<System.Int32> Impression_count { get; set; }
		
		/// <summary>
		/// Number of times this Tweet has been liked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="like_count")]
		public System.Nullable<System.Int32> Like_count { get; set; }
		
		/// <summary>
		/// Number of times this Tweet has been replied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reply_count")]
		public System.Nullable<System.Int32> Reply_count { get; set; }
		
		/// <summary>
		/// Number of times this Tweet has been Retweeted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retweet_count")]
		public System.Nullable<System.Int32> Retweet_count { get; set; }
	}
	
	public class TweetPublic_metrics
	{
		
		/// <summary>
		/// Number of times this Tweet has been viewed.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="impression_count")]
		public int Impression_count { get; set; }
		
		/// <summary>
		/// Number of times this Tweet has been liked.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="like_count")]
		public int Like_count { get; set; }
		
		/// <summary>
		/// Number of times this Tweet has been quoted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quote_count")]
		public System.Nullable<System.Int32> Quote_count { get; set; }
		
		/// <summary>
		/// Number of times this Tweet has been replied to.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reply_count")]
		public int Reply_count { get; set; }
		
		/// <summary>
		/// Number of times this Tweet has been Retweeted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="retweet_count")]
		public int Retweet_count { get; set; }
	}
	
	public class TweetReferenced_tweets
	{
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TweetReferenced_tweetsType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TweetReferenced_tweetsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="retweeted")]
		retweeted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="quoted")]
		quoted = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="replied_to")]
		replied_to = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TweetReply_settings
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="everyone")]
		everyone = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mentionedUsers")]
		mentionedUsers = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="following")]
		following = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 3,
	}
	
	/// <summary>
	/// Indicates withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetWithheld
	{
		
		/// <summary>
		/// Indicates if the content is being withheld for on the basis of copyright infringement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="copyright")]
		public bool Copyright { get; set; }
		
		/// <summary>
		/// Provides a list of countries where this content is not available.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country_codes")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Country_codes { get; set; }
		
		/// <summary>
		/// Indicates whether the content being withheld is the `tweet` or a `user`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<TweetWithheldScope> Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TweetWithheldScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="tweet")]
		tweet = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user")]
		user = 1,
	}
	
	/// <summary>
	/// The Twitter User object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// Creation time of this User.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// The text of this User's profile description (also known as bio), if the User provided one.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A list of metadata found in the User's profile description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entities")]
		public UserEntities Entities { get; set; }
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
		
		/// <summary>
		/// The location specified in the User's profile, if the User provided one. As this is a freeform value, it may not indicate a valid location, but it may be fuzzily evaluated when performing searches with location queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// The friendly name of this User, as shown on their profile.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pinned_tweet_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Pinned_tweet_id { get; set; }
		
		/// <summary>
		/// The URL to the profile image for this User.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile_image_url")]
		public string Profile_image_url { get; set; }
		
		/// <summary>
		/// Indicates if this User has chosen to protect their Tweets (in other words, if this User's Tweets are private).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protected")]
		public System.Nullable<System.Boolean> Protected { get; set; }
		
		/// <summary>
		/// A list of metrics for this User.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public_metrics")]
		public UserPublic_metrics Public_metrics { get; set; }
		
		/// <summary>
		/// The URL specified in the User's profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The Twitter handle (screen name) of this user.
		/// Required
		/// Pattern: ^[A-Za-z0-9_]{1,15}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9_]{1,15}$")]
		public string Username { get; set; }
		
		/// <summary>
		/// Indicate if this User is a verified Twitter User.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verified")]
		public System.Nullable<System.Boolean> Verified { get; set; }
		
		/// <summary>
		/// The Twitter Blue verified type of the user, eg: blue, government, business or none.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verified_type")]
		public string Verified_type { get; set; }
		
		/// <summary>
		/// Indicates withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="withheld")]
		public UserWithheld Withheld { get; set; }
	}
	
	public class UserEntities
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public FullTextEntities Description { get; set; }
		
		/// <summary>
		/// Expanded details for the URL specified in the User's profile, with start and end indices.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public UserEntitiesUrl Url { get; set; }
	}
	
	public class UserEntitiesUrl
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urls")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public UrlEntity[] Urls { get; set; }
	}
	
	public class UserPublic_metrics
	{
		
		/// <summary>
		/// Number of Users who are following this User.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="followers_count")]
		public int Followers_count { get; set; }
		
		/// <summary>
		/// Number of Users this User is following.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="following_count")]
		public int Following_count { get; set; }
		
		/// <summary>
		/// The number of lists that include this User.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="listed_count")]
		public int Listed_count { get; set; }
		
		/// <summary>
		/// The number of Tweets (including Retweets) posted by this User.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tweet_count")]
		public int Tweet_count { get; set; }
	}
	
	/// <summary>
	/// Indicates withholding details for [withheld content](https://help.twitter.com/en/rules-and-policies/tweet-withheld-by-country).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserWithheld
	{
		
		/// <summary>
		/// Provides a list of countries where this content is not available.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="country_codes")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Country_codes { get; set; }
		
		/// <summary>
		/// Indicates that the content being withheld is a `user`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<UserWithheldScope> Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserWithheldScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user")]
		user = 0,
	}
	
	/// <summary>
	/// A problem that indicates that you are not allowed to see a particular field on a Tweet, User, etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FieldUnauthorizedProblem : Problem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="field")]
		public string Field { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_type")]
		public DisallowedResourceProblemResource_type Resource_type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="section")]
		public DisallowedResourceProblemSection Section { get; set; }
	}
	
	/// <summary>
	/// A Tweet or error that can be returned by the streaming Tweet API. The values returned with a successful streamed Tweet includes the user provided rules that the Tweet matched.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FilteredStreamingTweetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Tweet Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		/// <summary>
		/// The list of rules which matched the Tweet
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matching_rules")]
		public FilteredStreamingTweetResponseMatching_rules[] FilteredStreamingTweetResponseMatching_rules { get; set; }
	}
	
	public class FilteredStreamingTweetResponseMatching_rules
	{
		
		/// <summary>
		/// Unique identifier of this rule.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
		
		/// <summary>
		/// A tag meant for the labeling of user provided rules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// A generic problem with no additional information beyond that provided by the HTTP status code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenericProblem
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2ComplianceJobsIdResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ComplianceJob Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2ComplianceJobsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public ComplianceJob[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2ComplianceJobsResponseMeta Meta { get; set; }
	}
	
	public class Get2ComplianceJobsResponseMeta
	{
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2DmConversationsIdDmEventsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DmEvent[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2DmConversationsIdDmEventsResponseMeta Meta { get; set; }
	}
	
	public class Get2DmConversationsIdDmEventsResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2DmConversationsWithParticipantIdDmEventsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DmEvent[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2DmConversationsWithParticipantIdDmEventsResponseMeta Meta { get; set; }
	}
	
	public class Get2DmConversationsWithParticipantIdDmEventsResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2DmEventsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public DmEvent[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2DmEventsResponseMeta Meta { get; set; }
	}
	
	public class Get2DmEventsResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2ListsIdFollowersResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public User[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2ListsIdFollowersResponseMeta Meta { get; set; }
	}
	
	public class Get2ListsIdFollowersResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2ListsIdMembersResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public User[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2ListsIdMembersResponseMeta Meta { get; set; }
	}
	
	public class Get2ListsIdMembersResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2ListsIdResponse
	{
		
		/// <summary>
		/// A Twitter List is a curated group of accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public List Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
	}
	
	/// <summary>
	/// A Twitter List is a curated group of accounts.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class List
	{
		
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="follower_count")]
		public System.Nullable<System.Int32> Follower_count { get; set; }
		
		/// <summary>
		/// The unique identifier of this List.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="member_count")]
		public System.Nullable<System.Int32> Member_count { get; set; }
		
		/// <summary>
		/// The name of this List.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owner_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Owner_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="private")]
		public System.Nullable<System.Boolean> Private { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2ListsIdTweetsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tweet[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2ListsIdTweetsResponseMeta Meta { get; set; }
	}
	
	public class Get2ListsIdTweetsResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2SpacesByCreatorIdsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Space[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2SpacesByCreatorIdsResponseMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Space
	{
		
		/// <summary>
		/// Creation time of the Space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_at")]
		public System.Nullable<System.DateTimeOffset> Created_at { get; set; }
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creator_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Creator_id { get; set; }
		
		/// <summary>
		/// End time of the Space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ended_at")]
		public System.Nullable<System.DateTimeOffset> Ended_at { get; set; }
		
		/// <summary>
		/// The user ids for the hosts of the Space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="host_ids")]
		public string[] Host_ids { get; set; }
		
		/// <summary>
		/// The unique identifier of this Space.
		/// Required
		/// Pattern: ^[a-zA-Z0-9]{1,13}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9]{1,13}$")]
		public string Id { get; set; }
		
		/// <summary>
		/// An array of user ids for people who were invited to a Space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invited_user_ids")]
		public string[] Invited_user_ids { get; set; }
		
		/// <summary>
		/// Denotes if the Space is a ticketed Space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_ticketed")]
		public System.Nullable<System.Boolean> Is_ticketed { get; set; }
		
		/// <summary>
		/// The language of the Space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lang")]
		public string Lang { get; set; }
		
		/// <summary>
		/// The number of participants in a Space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="participant_count")]
		public System.Nullable<System.Int32> Participant_count { get; set; }
		
		/// <summary>
		/// A date time stamp for when a Space is scheduled to begin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduled_start")]
		public System.Nullable<System.DateTimeOffset> Scheduled_start { get; set; }
		
		/// <summary>
		/// An array of user ids for people who were speakers in a Space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speaker_ids")]
		public string[] Speaker_ids { get; set; }
		
		/// <summary>
		/// When the Space was started as a date string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="started_at")]
		public System.Nullable<System.DateTimeOffset> Started_at { get; set; }
		
		/// <summary>
		/// The current state of the Space.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="state")]
		public SpaceState State { get; set; }
		
		/// <summary>
		/// The number of people who have either purchased a ticket or set a reminder for this Space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subscriber_count")]
		public System.Nullable<System.Int32> Subscriber_count { get; set; }
		
		/// <summary>
		/// The title of the Space.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The topics of a Space, as selected by its creator.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topics")]
		public SpaceTopics[] SpaceTopics { get; set; }
		
		/// <summary>
		/// When the Space was last updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.DateTimeOffset> Updated_at { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SpaceState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="live")]
		live = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scheduled")]
		scheduled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ended")]
		ended = 2,
	}
	
	public class SpaceTopics
	{
		
		/// <summary>
		/// The description of the given topic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// An ID suitable for use in the REST API.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the given topic.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class Get2SpacesByCreatorIdsResponseMeta
	{
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2SpacesIdBuyersResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public User[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2SpacesIdBuyersResponseMeta Meta { get; set; }
	}
	
	public class Get2SpacesIdBuyersResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2SpacesIdResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Space Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2SpacesIdTweetsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tweet[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2SpacesIdTweetsResponseMeta Meta { get; set; }
	}
	
	public class Get2SpacesIdTweetsResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2SpacesResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Space[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2SpacesSearchResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Space[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2SpacesSearchResponseMeta Meta { get; set; }
	}
	
	public class Get2SpacesSearchResponseMeta
	{
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2TweetsCountsAllResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public SearchCount[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2TweetsCountsAllResponseMeta Meta { get; set; }
	}
	
	/// <summary>
	/// Represent a Search Count Result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchCount
	{
		
		/// <summary>
		/// The end time of the bucket.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.DateTimeOffset End { get; set; }
		
		/// <summary>
		/// The start time of the bucket.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.DateTimeOffset Start { get; set; }
		
		/// <summary>
		/// The count for the bucket.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tweet_count")]
		public int Tweet_count { get; set; }
	}
	
	public class Get2TweetsCountsAllResponseMeta
	{
		
		/// <summary>
		/// The newest id in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newest_id")]
		public string Newest_id { get; set; }
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The oldest id in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldest_id")]
		public string Oldest_id { get; set; }
		
		/// <summary>
		/// The sum of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_tweet_count")]
		public System.Nullable<System.Int32> Total_tweet_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2TweetsCountsRecentResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public SearchCount[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2TweetsCountsRecentResponseMeta Meta { get; set; }
	}
	
	public class Get2TweetsCountsRecentResponseMeta
	{
		
		/// <summary>
		/// The newest id in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newest_id")]
		public string Newest_id { get; set; }
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The oldest id in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldest_id")]
		public string Oldest_id { get; set; }
		
		/// <summary>
		/// The sum of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_tweet_count")]
		public System.Nullable<System.Int32> Total_tweet_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2TweetsFirehoseStreamResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Tweet Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2TweetsIdLikingUsersResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public User[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2TweetsIdLikingUsersResponseMeta Meta { get; set; }
	}
	
	public class Get2TweetsIdLikingUsersResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2TweetsIdQuoteTweetsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tweet[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2TweetsIdQuoteTweetsResponseMeta Meta { get; set; }
	}
	
	public class Get2TweetsIdQuoteTweetsResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2TweetsIdResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Tweet Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2TweetsIdRetweetedByResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public User[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2TweetsIdRetweetedByResponseMeta Meta { get; set; }
	}
	
	public class Get2TweetsIdRetweetedByResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2TweetsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tweet[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2TweetsSample10StreamResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Tweet Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2TweetsSampleStreamResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Tweet Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2TweetsSearchAllResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tweet[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2TweetsSearchAllResponseMeta Meta { get; set; }
	}
	
	public class Get2TweetsSearchAllResponseMeta
	{
		
		/// <summary>
		/// The newest id in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newest_id")]
		public string Newest_id { get; set; }
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The oldest id in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldest_id")]
		public string Oldest_id { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2TweetsSearchRecentResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tweet[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2TweetsSearchRecentResponseMeta Meta { get; set; }
	}
	
	public class Get2TweetsSearchRecentResponseMeta
	{
		
		/// <summary>
		/// The newest id in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newest_id")]
		public string Newest_id { get; set; }
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The oldest id in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldest_id")]
		public string Oldest_id { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2TweetsSearchStreamResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Tweet Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersByResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public User[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersByUsernameUsernameResponse
	{
		
		/// <summary>
		/// The Twitter User object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public User Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersIdBlockingResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public User[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2UsersIdBlockingResponseMeta Meta { get; set; }
	}
	
	public class Get2UsersIdBlockingResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersIdBookmarksResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tweet[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2UsersIdBookmarksResponseMeta Meta { get; set; }
	}
	
	public class Get2UsersIdBookmarksResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersIdFollowedListsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public List[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2UsersIdFollowedListsResponseMeta Meta { get; set; }
	}
	
	public class Get2UsersIdFollowedListsResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersIdFollowersResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public User[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2UsersIdFollowersResponseMeta Meta { get; set; }
	}
	
	public class Get2UsersIdFollowersResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersIdFollowingResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public User[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2UsersIdFollowingResponseMeta Meta { get; set; }
	}
	
	public class Get2UsersIdFollowingResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersIdLikedTweetsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tweet[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2UsersIdLikedTweetsResponseMeta Meta { get; set; }
	}
	
	public class Get2UsersIdLikedTweetsResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersIdListMembershipsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public List[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2UsersIdListMembershipsResponseMeta Meta { get; set; }
	}
	
	public class Get2UsersIdListMembershipsResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersIdMentionsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tweet[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2UsersIdMentionsResponseMeta Meta { get; set; }
	}
	
	public class Get2UsersIdMentionsResponseMeta
	{
		
		/// <summary>
		/// The newest id in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newest_id")]
		public string Newest_id { get; set; }
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The oldest id in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldest_id")]
		public string Oldest_id { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersIdMutingResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public User[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2UsersIdMutingResponseMeta Meta { get; set; }
	}
	
	public class Get2UsersIdMutingResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersIdOwnedListsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public List[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2UsersIdOwnedListsResponseMeta Meta { get; set; }
	}
	
	public class Get2UsersIdOwnedListsResponseMeta
	{
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersIdPinnedListsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public List[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2UsersIdPinnedListsResponseMeta Meta { get; set; }
	}
	
	public class Get2UsersIdPinnedListsResponseMeta
	{
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersIdResponse
	{
		
		/// <summary>
		/// The Twitter User object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public User Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersIdTimelinesReverseChronologicalResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tweet[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2UsersIdTimelinesReverseChronologicalResponseMeta Meta { get; set; }
	}
	
	public class Get2UsersIdTimelinesReverseChronologicalResponseMeta
	{
		
		/// <summary>
		/// The newest id in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newest_id")]
		public string Newest_id { get; set; }
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The oldest id in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldest_id")]
		public string Oldest_id { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersIdTweetsResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Tweet[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Get2UsersIdTweetsResponseMeta Meta { get; set; }
	}
	
	public class Get2UsersIdTweetsResponseMeta
	{
		
		/// <summary>
		/// The newest id in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newest_id")]
		public string Newest_id { get; set; }
		
		/// <summary>
		/// The next token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Next_token { get; set; }
		
		/// <summary>
		/// The oldest id in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldest_id")]
		public string Oldest_id { get; set; }
		
		/// <summary>
		/// The previous token.
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previous_token")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Previous_token { get; set; }
		
		/// <summary>
		/// The number of results returned in this response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result_count")]
		public System.Nullable<System.Int32> Result_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersMeResponse
	{
		
		/// <summary>
		/// The Twitter User object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public User Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Get2UsersResponse
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public User[] Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
	}
	
	/// <summary>
	/// Represent the portion of text recognized as a Hashtag, and its start and end position within the text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HashtagFields
	{
		
		/// <summary>
		/// The text of the Hashtag.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// A problem that indicates this request is invalid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRequestProblem : Problem
	{
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public InvalidRequestProblemErrors[] InvalidRequestProblemErrors { get; set; }
	}
	
	public class InvalidRequestProblemErrors
	{
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public System.Collections.Generic.Dictionary<string, string[]> Parameters { get; set; }
	}
	
	/// <summary>
	/// The rule you have submitted is invalid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidRuleProblem
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAddUserRequest
	{
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCreateRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// Max length: 25
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="private")]
		public System.Nullable<System.Boolean> Private { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCreateResponse
	{
		
		/// <summary>
		/// A Twitter List is a curated group of accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListCreateResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class ListCreateResponseData
	{
		
		/// <summary>
		/// The unique identifier of this List.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of this List.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDeleteResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListDeleteResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class ListDeleteResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public System.Nullable<System.Boolean> Deleted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFollowedRequest
	{
		
		/// <summary>
		/// The unique identifier of this List.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string List_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListFollowedResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListFollowedResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class ListFollowedResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="following")]
		public System.Nullable<System.Boolean> Following { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMutateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListMutateResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class ListMutateResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="is_member")]
		public System.Nullable<System.Boolean> Is_member { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPinnedRequest
	{
		
		/// <summary>
		/// The unique identifier of this List.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="list_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string List_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPinnedResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListPinnedResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class ListPinnedResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="pinned")]
		public System.Nullable<System.Boolean> Pinned { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUnpinResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListUnpinResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class ListUnpinResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="pinned")]
		public System.Nullable<System.Boolean> Pinned { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUpdateRequest
	{
		
		/// <summary>
		/// Max length: 100
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string Description { get; set; }
		
		/// <summary>
		/// Max length: 25
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25)]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="private")]
		public System.Nullable<System.Boolean> Private { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUpdateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListUpdateResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class ListUpdateResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="updated")]
		public System.Nullable<System.Boolean> Updated { get; set; }
	}
	
	/// <summary>
	/// Represent the portion of text recognized as a User mention, and its start and end position within the text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MentionFields
	{
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
		
		/// <summary>
		/// The Twitter handle (screen name) of this user.
		/// Required
		/// Pattern: ^[A-Za-z0-9_]{1,15}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[A-Za-z0-9_]{1,15}$")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MuteUserMutationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public MuteUserMutationResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class MuteUserMutationResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="muting")]
		public System.Nullable<System.Boolean> Muting { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MuteUserRequest
	{
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target_user_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Target_user_id { get; set; }
	}
	
	/// <summary>
	/// A problem that indicates the user's rule set is not compliant.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NonCompliantRulesProblem
	{
	}
	
	/// <summary>
	/// A problem that indicates your client application does not have the required OAuth1 permissions for the requested endpoint.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Oauth1PermissionsProblem
	{
	}
	
	/// <summary>
	/// You have been disconnected for operational reasons.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OperationalDisconnectProblem : Problem
	{
		
		[System.Runtime.Serialization.DataMember(Name="disconnect_type")]
		public System.Nullable<OperationalDisconnectProblemDisconnect_type> Disconnect_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OperationalDisconnectProblemDisconnect_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OperationalDisconnect")]
		OperationalDisconnect = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UpstreamOperationalDisconnect")]
		UpstreamOperationalDisconnect = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ForceDisconnect")]
		ForceDisconnect = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UpstreamUncleanDisconnect")]
		UpstreamUncleanDisconnect = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SlowReader")]
		SlowReader = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InternalError")]
		InternalError = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ClientApplicationStateDegraded")]
		ClientApplicationStateDegraded = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="InvalidRules")]
		InvalidRules = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Photo : Media
	{
		
		[System.Runtime.Serialization.DataMember(Name="alt_text")]
		public string Alt_text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PlaceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="poi")]
		poi = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="neighborhood")]
		neighborhood = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="city")]
		city = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="admin")]
		admin = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="country")]
		country = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unknown")]
		unknown = 5,
	}
	
	/// <summary>
	/// Shows who can reply a Tweet. Fields returned are everyone, mentioned_users, and following.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReplySettings
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="everyone")]
		everyone = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mentionedUsers")]
		mentionedUsers = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="following")]
		following = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="other")]
		other = 3,
	}
	
	/// <summary>
	/// A problem that indicates that a given Tweet, User, etc. does not exist.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundProblem : Problem
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Parameter { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_id")]
		public string Resource_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_type")]
		public DisallowedResourceProblemResource_type Resource_type { get; set; }
		
		/// <summary>
		/// Value will match the schema of the field.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A problem that indicates you are not allowed to see a particular Tweet, User, etc.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceUnauthorizedProblem : Problem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		public string Parameter { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_id")]
		public string Resource_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_type")]
		public DisallowedResourceProblemResource_type Resource_type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="section")]
		public DisallowedResourceProblemSection Section { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// A problem that indicates a particular Tweet, User, etc. is not available to you.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceUnavailableProblem : Problem
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameter")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string Parameter { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_id")]
		public string Resource_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource_type")]
		public DisallowedResourceProblemResource_type Resource_type { get; set; }
	}
	
	/// <summary>
	/// You have exceeded the maximum number of rules.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RulesCapProblem
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RulesLookupResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Rule[] Data { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public RulesResponseMetadata Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RulesRequestSummary
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StreamingTweetResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public Tweet Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includes")]
		public Expansions Includes { get; set; }
	}
	
	/// <summary>
	/// Tweet compliance data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetComplianceData
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetComplianceSchema
	{
		
		/// <summary>
		/// Event time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_at")]
		public System.DateTimeOffset Event_at { get; set; }
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quote_tweet_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Quote_tweet_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tweet")]
		public TweetComplianceSchemaTweet Tweet { get; set; }
	}
	
	public class TweetComplianceSchemaTweet
	{
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="author_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Author_id { get; set; }
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Tweet compliance stream events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetComplianceStreamResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetCreateRequest
	{
		
		/// <summary>
		/// Card Uri Parameter. This is mutually exclusive from Quote Tweet Id, Poll, Media, and Direct Message Deep Link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="card_uri")]
		public string Card_uri { get; set; }
		
		/// <summary>
		/// Link to take the conversation from the public timeline to a private Direct Message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direct_message_deep_link")]
		public string Direct_message_deep_link { get; set; }
		
		/// <summary>
		/// Exclusive Tweet for super followers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="for_super_followers_only")]
		public System.Nullable<System.Boolean> For_super_followers_only { get; set; }
		
		/// <summary>
		/// Place ID being attached to the Tweet for geo location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geo")]
		public TweetCreateRequestGeo Geo { get; set; }
		
		/// <summary>
		/// Media information being attached to created Tweet. This is mutually exclusive from Quote Tweet Id, Poll, and Card URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media")]
		public TweetCreateRequestMedia Media { get; set; }
		
		/// <summary>
		/// Nullcasted (promoted-only) Tweets do not appear in the public timeline and are not served to followers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nullcast")]
		public System.Nullable<System.Boolean> Nullcast { get; set; }
		
		/// <summary>
		/// Poll options for a Tweet with a poll. This is mutually exclusive from Media, Quote Tweet Id, and Card URI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poll")]
		public TweetCreateRequestPoll Poll { get; set; }
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quote_tweet_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Quote_tweet_id { get; set; }
		
		/// <summary>
		/// Tweet information of the Tweet being replied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reply")]
		public TweetCreateRequestReply Reply { get; set; }
		
		/// <summary>
		/// Settings to indicate who can reply to the Tweet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reply_settings")]
		public TweetCreateRequestPollReply_settings Reply_settings { get; set; }
		
		/// <summary>
		/// The content of the Tweet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	public class TweetCreateRequestGeo
	{
		
		[System.Runtime.Serialization.DataMember(Name="place_id")]
		public string Place_id { get; set; }
	}
	
	public class TweetCreateRequestMedia
	{
		
		/// <summary>
		/// A list of Media Ids to be attached to a created Tweet.
		/// Required
		/// Minimum items: 1
		/// Maximum items: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="media_ids")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string[] Media_ids { get; set; }
		
		/// <summary>
		/// A list of User Ids to be tagged in the media for created Tweet.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagged_user_ids")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public string[] Tagged_user_ids { get; set; }
	}
	
	public class TweetCreateRequestPoll
	{
		
		/// <summary>
		/// Duration of the poll in minutes.
		/// Required
		/// Minimum: 5
		/// Maximum: 10080
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="duration_minutes")]
		[System.ComponentModel.DataAnnotations.Range(5, 10080)]
		public int Duration_minutes { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 2
		/// Maximum items: 4
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="options")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(4)]
		public string[] Options { get; set; }
		
		/// <summary>
		/// Settings to indicate who can reply to the Tweet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reply_settings")]
		public System.Nullable<TweetCreateRequestPollReply_settings> Reply_settings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TweetCreateRequestPollReply_settings
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="following")]
		following = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mentionedUsers")]
		mentionedUsers = 1,
	}
	
	public class TweetCreateRequestReply
	{
		
		/// <summary>
		/// A list of User Ids to be excluded from the reply Tweet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exclude_reply_user_ids")]
		public string[] Exclude_reply_user_ids { get; set; }
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="in_reply_to_tweet_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string In_reply_to_tweet_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetCreateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TweetCreateResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class TweetCreateResponseData
	{
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
		
		/// <summary>
		/// The content of the Tweet.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetDeleteComplianceSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="delete")]
		public TweetComplianceSchema Delete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetDeleteResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TweetDeleteResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class TweetDeleteResponseData
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="deleted")]
		public bool Deleted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetDropComplianceSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="drop")]
		public TweetComplianceSchema Drop { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetEditComplianceObjectSchema
	{
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="edit_tweet_ids")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Edit_tweet_ids { get; set; }
		
		/// <summary>
		/// Event time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_at")]
		public System.DateTimeOffset Event_at { get; set; }
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="initial_tweet_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Initial_tweet_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tweet")]
		public TweetEditComplianceObjectSchemaTweet Tweet { get; set; }
	}
	
	public class TweetEditComplianceObjectSchemaTweet
	{
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetEditComplianceSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tweet_edit")]
		public TweetEditComplianceObjectSchema Tweet_edit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetHideRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public bool Hidden { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetHideResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TweetHideResponseData Data { get; set; }
	}
	
	public class TweetHideResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
	}
	
	/// <summary>
	/// Tweet label data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetLabelData
	{
	}
	
	/// <summary>
	/// Tweet label stream events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetLabelStreamResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetNotice
	{
		
		/// <summary>
		/// If the label is being applied or removed. Possible values are ‘apply’ or ‘remove’.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="application")]
		public string Application { get; set; }
		
		/// <summary>
		/// Information shown on the Tweet label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Event time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_at")]
		public System.DateTimeOffset Event_at { get; set; }
		
		/// <summary>
		/// The type of label on the Tweet
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_type")]
		public string Event_type { get; set; }
		
		/// <summary>
		/// Link to more information about this kind of label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extended_details_url")]
		public string Extended_details_url { get; set; }
		
		/// <summary>
		/// Title/header of the Tweet label
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label_title")]
		public string Label_title { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tweet")]
		public TweetNoticeTweet Tweet { get; set; }
	}
	
	public class TweetNoticeTweet
	{
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="author_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Author_id { get; set; }
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetNoticeSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="public_tweet_notice")]
		public TweetNotice Public_tweet_notice { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetTakedownComplianceSchema
	{
		
		/// <summary>
		/// Event time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_at")]
		public System.DateTimeOffset Event_at { get; set; }
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quote_tweet_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Quote_tweet_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tweet")]
		public TweetTakedownComplianceSchemaTweet Tweet { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="withheld_in_countries")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Withheld_in_countries { get; set; }
	}
	
	public class TweetTakedownComplianceSchemaTweet
	{
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="author_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Author_id { get; set; }
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetUndropComplianceSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="undrop")]
		public TweetComplianceSchema Undrop { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetUnviewable
	{
		
		/// <summary>
		/// If the label is being applied or removed. Possible values are ‘apply’ or ‘remove’.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="application")]
		public string Application { get; set; }
		
		/// <summary>
		/// Event time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_at")]
		public System.DateTimeOffset Event_at { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tweet")]
		public TweetUnviewableTweet Tweet { get; set; }
	}
	
	public class TweetUnviewableTweet
	{
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="author_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Author_id { get; set; }
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetUnviewableSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="public_tweet_unviewable")]
		public TweetUnviewable Public_tweet_unviewable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TweetWithheldComplianceSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="withheld")]
		public TweetTakedownComplianceSchema Withheld { get; set; }
	}
	
	/// <summary>
	/// A problem that indicates that the authentication used is not supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnsupportedAuthenticationProblem
	{
	}
	
	/// <summary>
	/// Represent the portion of text recognized as a URL.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UrlFields
	{
		
		/// <summary>
		/// Description of the URL landing page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The URL as displayed in the Twitter client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="display_url")]
		public string Display_url { get; set; }
		
		/// <summary>
		/// A validly formatted URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expanded_url")]
		public string Expanded_url { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="images")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public UrlImage[] Images { get; set; }
		
		/// <summary>
		/// The Media Key identifier for this attachment.
		/// Pattern: ^([0-9]+)_([0-9]+)$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="media_key")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^([0-9]+)_([0-9]+)$")]
		public string Media_key { get; set; }
		
		/// <summary>
		/// HTTP Status Code.
		/// Minimum: 100
		/// Maximum: 599
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		[System.ComponentModel.DataAnnotations.Range(100, 599)]
		public System.Nullable<System.Int32> Status { get; set; }
		
		/// <summary>
		/// Title of the page the URL points to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Fully resolved url.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unwound_url")]
		public string Unwound_url { get; set; }
		
		/// <summary>
		/// A validly formatted URL.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A problem that indicates that a usage cap has been exceeded.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsageCapExceededProblem : Problem
	{
		
		[System.Runtime.Serialization.DataMember(Name="period")]
		public System.Nullable<UsageCapExceededProblemPeriod> Period { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public System.Nullable<UsageCapExceededProblemScope> Scope { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UsageCapExceededProblemPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Daily")]
		Daily = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Monthly")]
		Monthly = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UsageCapExceededProblemScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Account")]
		Account = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Product")]
		Product = 1,
	}
	
	/// <summary>
	/// User compliance data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserComplianceData
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserComplianceSchema
	{
		
		/// <summary>
		/// Event time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_at")]
		public System.DateTimeOffset Event_at { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserComplianceSchemaUser User { get; set; }
	}
	
	public class UserComplianceSchemaUser
	{
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// User compliance stream events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserComplianceStreamResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserDeleteComplianceSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_delete")]
		public UserComplianceSchema User_delete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserProfileModificationComplianceSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_profile_modification")]
		public UserProfileModificationObjectSchema User_profile_modification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserProfileModificationObjectSchema
	{
		
		/// <summary>
		/// Event time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_at")]
		public System.DateTimeOffset Event_at { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="new_value")]
		public string New_value { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profile_field")]
		public string Profile_field { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserProfileModificationObjectSchemaUser User { get; set; }
	}
	
	public class UserProfileModificationObjectSchemaUser
	{
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserProtectComplianceSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_protect")]
		public UserComplianceSchema User_protect { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserScrubGeoObjectSchema
	{
		
		/// <summary>
		/// Event time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_at")]
		public System.DateTimeOffset Event_at { get; set; }
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="up_to_tweet_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Up_to_tweet_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserScrubGeoObjectSchemaUser User { get; set; }
	}
	
	public class UserScrubGeoObjectSchemaUser
	{
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserScrubGeoSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scrub_geo")]
		public UserScrubGeoObjectSchema Scrub_geo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserSuspendComplianceSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_suspend")]
		public UserComplianceSchema User_suspend { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserTakedownComplianceSchema
	{
		
		/// <summary>
		/// Event time.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event_at")]
		public System.DateTimeOffset Event_at { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserTakedownComplianceSchemaUser User { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="withheld_in_countries")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public string[] Withheld_in_countries { get; set; }
	}
	
	public class UserTakedownComplianceSchemaUser
	{
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserUndeleteComplianceSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_undelete")]
		public UserComplianceSchema User_undelete { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserUnprotectComplianceSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_unprotect")]
		public UserComplianceSchema User_unprotect { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserUnsuspendComplianceSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_unsuspend")]
		public UserComplianceSchema User_unsuspend { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserWithheldComplianceSchema
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user_withheld")]
		public UserTakedownComplianceSchema User_withheld { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsersFollowingCreateRequest
	{
		
		/// <summary>
		/// Unique identifier of this User. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target_user_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Target_user_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsersFollowingCreateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UsersFollowingCreateResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class UsersFollowingCreateResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="following")]
		public System.Nullable<System.Boolean> Following { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pending_follow")]
		public System.Nullable<System.Boolean> Pending_follow { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsersFollowingDeleteResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UsersFollowingDeleteResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class UsersFollowingDeleteResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="following")]
		public System.Nullable<System.Boolean> Following { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsersLikesCreateRequest
	{
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tweet_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Tweet_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsersLikesCreateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UsersLikesCreateResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class UsersLikesCreateResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="liked")]
		public System.Nullable<System.Boolean> Liked { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsersLikesDeleteResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UsersLikesDeleteResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class UsersLikesDeleteResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="liked")]
		public System.Nullable<System.Boolean> Liked { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsersRetweetsCreateRequest
	{
		
		/// <summary>
		/// Unique identifier of this Tweet. This is returned as a string in order to avoid complications with languages and tools that cannot handle large integers.
		/// Required
		/// Pattern: ^[0-9]{1,19}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tweet_id")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{1,19}$")]
		public string Tweet_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsersRetweetsCreateResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UsersRetweetsCreateResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class UsersRetweetsCreateResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="retweeted")]
		public System.Nullable<System.Boolean> Retweeted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsersRetweetsDeleteResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public UsersRetweetsDeleteResponseData Data { get; set; }
		
		/// <summary>
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Problem[] Errors { get; set; }
	}
	
	public class UsersRetweetsDeleteResponseData
	{
		
		[System.Runtime.Serialization.DataMember(Name="retweeted")]
		public System.Nullable<System.Boolean> Retweeted { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Video : Media
	{
		
		[System.Runtime.Serialization.DataMember(Name="duration_ms")]
		public System.Nullable<System.Int32> Duration_ms { get; set; }
		
		/// <summary>
		/// Nonpublic engagement metrics for the Media at the time of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="non_public_metrics")]
		public VideoNon_public_metrics Non_public_metrics { get; set; }
		
		/// <summary>
		/// Organic nonpublic engagement metrics for the Media at the time of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="organic_metrics")]
		public VideoOrganic_metrics Organic_metrics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preview_image_url")]
		public string Preview_image_url { get; set; }
		
		/// <summary>
		/// Promoted nonpublic engagement metrics for the Media at the time of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="promoted_metrics")]
		public VideoPromoted_metrics Promoted_metrics { get; set; }
		
		/// <summary>
		/// Engagement metrics for the Media at the time of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="public_metrics")]
		public VideoPublic_metrics Public_metrics { get; set; }
		
		/// <summary>
		/// An array of all available variants of the media.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public Variant[] Variants { get; set; }
	}
	
	public class VideoNon_public_metrics
	{
		
		/// <summary>
		/// Number of users who made it through 0% of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playback_0_count")]
		public System.Nullable<System.Int32> Playback_0_count { get; set; }
		
		/// <summary>
		/// Number of users who made it through 100% of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playback_100_count")]
		public System.Nullable<System.Int32> Playback_100_count { get; set; }
		
		/// <summary>
		/// Number of users who made it through 25% of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playback_25_count")]
		public System.Nullable<System.Int32> Playback_25_count { get; set; }
		
		/// <summary>
		/// Number of users who made it through 50% of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playback_50_count")]
		public System.Nullable<System.Int32> Playback_50_count { get; set; }
		
		/// <summary>
		/// Number of users who made it through 75% of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playback_75_count")]
		public System.Nullable<System.Int32> Playback_75_count { get; set; }
	}
	
	public class VideoOrganic_metrics
	{
		
		/// <summary>
		/// Number of users who made it through 0% of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playback_0_count")]
		public System.Nullable<System.Int32> Playback_0_count { get; set; }
		
		/// <summary>
		/// Number of users who made it through 100% of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playback_100_count")]
		public System.Nullable<System.Int32> Playback_100_count { get; set; }
		
		/// <summary>
		/// Number of users who made it through 25% of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playback_25_count")]
		public System.Nullable<System.Int32> Playback_25_count { get; set; }
		
		/// <summary>
		/// Number of users who made it through 50% of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playback_50_count")]
		public System.Nullable<System.Int32> Playback_50_count { get; set; }
		
		/// <summary>
		/// Number of users who made it through 75% of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playback_75_count")]
		public System.Nullable<System.Int32> Playback_75_count { get; set; }
		
		/// <summary>
		/// Number of times this video has been viewed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="view_count")]
		public System.Nullable<System.Int32> View_count { get; set; }
	}
	
	public class VideoPromoted_metrics
	{
		
		/// <summary>
		/// Number of users who made it through 0% of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playback_0_count")]
		public System.Nullable<System.Int32> Playback_0_count { get; set; }
		
		/// <summary>
		/// Number of users who made it through 100% of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playback_100_count")]
		public System.Nullable<System.Int32> Playback_100_count { get; set; }
		
		/// <summary>
		/// Number of users who made it through 25% of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playback_25_count")]
		public System.Nullable<System.Int32> Playback_25_count { get; set; }
		
		/// <summary>
		/// Number of users who made it through 50% of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playback_50_count")]
		public System.Nullable<System.Int32> Playback_50_count { get; set; }
		
		/// <summary>
		/// Number of users who made it through 75% of the video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playback_75_count")]
		public System.Nullable<System.Int32> Playback_75_count { get; set; }
		
		/// <summary>
		/// Number of times this video has been viewed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="view_count")]
		public System.Nullable<System.Int32> View_count { get; set; }
	}
	
	public class VideoPublic_metrics
	{
		
		/// <summary>
		/// Number of times this video has been viewed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="view_count")]
		public System.Nullable<System.Int32> View_count { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List Compliance Jobs
		/// Returns recent Compliance Jobs for a given job type and optional job status
		/// ListBatchComplianceJobs 2/compliance/jobs
		/// </summary>
		/// <param name="type">Type of Compliance Job to list.</param>
		/// <param name="status">Status of Compliance Job to list.</param>
		/// <param name="compliance_job_fields">A comma separated list of ComplianceJob fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2ComplianceJobsResponse> ListBatchComplianceJobsAsync(ComplianceJobType type, ListBatchComplianceJobsStatus status, string[] compliance_job_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/compliance/jobs?type=" + type+"&status=" + status+"&"+string.Join("&", compliance_job_fields.Select(z => $"compliance_job.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2ComplianceJobsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create compliance job
		/// Creates a compliance for the given job type
		/// CreateBatchComplianceJob 2/compliance/jobs
		/// </summary>
		/// <returns>The request has succeeded.</returns>
		public async Task<CreateComplianceJobResponse> CreateBatchComplianceJobAsync(CreateComplianceJobRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/compliance/jobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateComplianceJobResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Compliance Job
		/// Returns a single Compliance Job by ID
		/// GetBatchComplianceJob 2/compliance/jobs/{id}
		/// </summary>
		/// <param name="id">The ID of the Compliance Job to retrieve.</param>
		/// <param name="compliance_job_fields">A comma separated list of ComplianceJob fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2ComplianceJobsIdResponse> GetBatchComplianceJobAsync(string id, string[] compliance_job_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/compliance/jobs/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&"+string.Join("&", compliance_job_fields.Select(z => $"compliance_job.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2ComplianceJobsIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new DM Conversation
		/// Creates a new DM Conversation.
		/// DmConversationIdCreate 2/dm_conversations
		/// </summary>
		public async Task DmConversationIdCreateAsync(CreateDmConversationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/dm_conversations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get DM Events for a DM Conversation
		/// Returns DM Events for a DM Conversation
		/// GetDmConversationsWithParticipantIdDmEvents 2/dm_conversations/with/{participant_id}/dm_events
		/// </summary>
		/// <param name="participant_id">The ID of the participant user for the One to One DM conversation.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get a specified 'page' of results.
		/// Min length: 16
		// </param>
		/// <param name="event_types">The set of event_types to include in the results.
		/// Minimum items: 1
		// </param>
		/// <param name="dm_event_fields">A comma separated list of DmEvent fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2DmConversationsWithParticipantIdDmEventsResponse> GetDmConversationsWithParticipantIdDmEventsAsync(string participant_id, int max_results, string pagination_token, string[] event_types, string[] dm_event_fields, string[] expansions, string[] media_fields, string[] user_fields, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/dm_conversations/with/"+ (participant_id==null? "" : System.Uri.EscapeDataString(participant_id))+"/dm_events&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", event_types.Select(z => $"event_types={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", dm_event_fields.Select(z => $"dm_event.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2DmConversationsWithParticipantIdDmEventsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Send a new message to a user
		/// Creates a new message for a DM Conversation with a participant user by ID
		/// DmConversationWithUserEventIdCreate 2/dm_conversations/with/{participant_id}/messages
		/// </summary>
		/// <param name="participant_id">The ID of the recipient user that will receive the DM.</param>
		public async Task DmConversationWithUserEventIdCreateAsync(string participant_id, CreateMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/dm_conversations/with/"+ (participant_id==null? "" : System.Uri.EscapeDataString(participant_id))+"/messages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Send a new message to a DM Conversation
		/// Creates a new message for a DM Conversation specified by DM Conversation ID
		/// DmConversationByIdEventIdCreate 2/dm_conversations/{dm_conversation_id}/messages
		/// </summary>
		/// <param name="dm_conversation_id">The DM Conversation ID.</param>
		public async Task DmConversationByIdEventIdCreateAsync(string dm_conversation_id, CreateMessageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/dm_conversations/"+ (dm_conversation_id==null? "" : System.Uri.EscapeDataString(dm_conversation_id))+"/messages";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get DM Events for a DM Conversation
		/// Returns DM Events for a DM Conversation
		/// GetDmConversationsIdDmEvents 2/dm_conversations/{id}/dm_events
		/// </summary>
		/// <param name="id">The DM Conversation ID.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get a specified 'page' of results.
		/// Min length: 16
		// </param>
		/// <param name="event_types">The set of event_types to include in the results.
		/// Minimum items: 1
		// </param>
		/// <param name="dm_event_fields">A comma separated list of DmEvent fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2DmConversationsIdDmEventsResponse> GetDmConversationsIdDmEventsAsync(string id, int max_results, string pagination_token, string[] event_types, string[] dm_event_fields, string[] expansions, string[] media_fields, string[] user_fields, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/dm_conversations/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/dm_events&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", event_types.Select(z => $"event_types={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", dm_event_fields.Select(z => $"dm_event.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2DmConversationsIdDmEventsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get recent DM Events
		/// Returns recent DM Events across DM conversations
		/// GetDmEvents 2/dm_events
		/// </summary>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get a specified 'page' of results.
		/// Min length: 16
		// </param>
		/// <param name="event_types">The set of event_types to include in the results.
		/// Minimum items: 1
		// </param>
		/// <param name="dm_event_fields">A comma separated list of DmEvent fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2DmEventsResponse> GetDmEventsAsync(int max_results, string pagination_token, string[] event_types, string[] dm_event_fields, string[] expansions, string[] media_fields, string[] user_fields, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/dm_events?max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", event_types.Select(z => $"event_types={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", dm_event_fields.Select(z => $"dm_event.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2DmEventsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create List
		/// Creates a new List.
		/// ListIdCreate 2/lists
		/// </summary>
		/// <returns>The request has succeeded.</returns>
		public async Task<ListCreateResponse> ListIdCreateAsync(ListCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/lists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCreateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete List
		/// Delete a List that you own.
		/// ListIdDelete 2/lists/{id}
		/// </summary>
		/// <param name="id">The ID of the List to delete.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<ListDeleteResponse> ListIdDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/lists/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDeleteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List lookup by List ID.
		/// Returns a List.
		/// ListIdGet 2/lists/{id}
		/// </summary>
		/// <param name="id">The ID of the List.</param>
		/// <param name="list_fields">A comma separated list of List fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2ListsIdResponse> ListIdGetAsync(string id, string[] list_fields, string[] expansions, string[] user_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/lists/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&"+string.Join("&", list_fields.Select(z => $"list.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2ListsIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update List.
		/// Update a List that you own.
		/// ListIdUpdate 2/lists/{id}
		/// </summary>
		/// <param name="id">The ID of the List to modify.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<ListUpdateResponse> ListIdUpdateAsync(string id, ListUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/lists/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListUpdateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns User objects that follow a List by the provided List ID
		/// Returns a list of Users that follow a List by the provided List ID
		/// ListGetFollowers 2/lists/{id}/followers
		/// </summary>
		/// <param name="id">The ID of the List.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get a specified 'page' of results.
		/// Max length: 19
		/// Min length: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2ListsIdFollowersResponse> ListGetFollowersAsync(string id, int max_results, string pagination_token, string[] user_fields, string[] expansions, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/lists/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/followers&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2ListsIdFollowersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns User objects that are members of a List by the provided List ID.
		/// Returns a list of Users that are members of a List by the provided List ID.
		/// ListGetMembers 2/lists/{id}/members
		/// </summary>
		/// <param name="id">The ID of the List.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get a specified 'page' of results.
		/// Max length: 19
		/// Min length: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2ListsIdMembersResponse> ListGetMembersAsync(string id, int max_results, string pagination_token, string[] user_fields, string[] expansions, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/lists/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/members&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2ListsIdMembersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a List member
		/// Causes a User to become a member of a List.
		/// ListAddMember 2/lists/{id}/members
		/// </summary>
		/// <param name="id">The ID of the List for which to add a member.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<ListMutateResponse> ListAddMemberAsync(string id, ListAddUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/lists/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMutateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a List member
		/// Causes a User to be removed from the members of a List.
		/// ListRemoveMember 2/lists/{id}/members/{user_id}
		/// </summary>
		/// <param name="id">The ID of the List to remove a member.</param>
		/// <param name="user_id">The ID of User that will be removed from the List.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<ListMutateResponse> ListRemoveMemberAsync(string id, string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/lists/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/members/"+ (user_id==null? "" : System.Uri.EscapeDataString(user_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMutateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Tweets timeline by List ID.
		/// Returns a list of Tweets associated with the provided List ID.
		/// ListsIdTweets 2/lists/{id}/tweets
		/// </summary>
		/// <param name="id">The ID of the List.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get the next 'page' of results.
		/// Min length: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="poll_fields">A comma separated list of Poll fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="place_fields">A comma separated list of Place fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2ListsIdTweetsResponse> ListsIdTweetsAsync(string id, int max_results, string pagination_token, string[] tweet_fields, string[] expansions, string[] media_fields, string[] poll_fields, string[] user_fields, string[] place_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/lists/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/tweets&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", poll_fields.Select(z => $"poll.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", place_fields.Select(z => $"place.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2ListsIdTweetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the OpenAPI Specification document.
		/// Full OpenAPI Specification in JSON format. (See https://github.com/OAI/OpenAPI-Specification/blob/master/README.md)
		/// GetOpenApiSpec 2/openapi.json
		/// </summary>
		/// <returns>The request was successful</returns>
		public async Task<string> GetOpenApiSpecAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/openapi.json";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Space lookup up Space IDs
		/// Returns a variety of information about the Spaces specified by the requested IDs
		/// FindSpacesByIds 2/spaces
		/// </summary>
		/// <param name="ids">The list of Space IDs to return.
		/// Minimum items: 1
		/// Maximum items: 100
		// </param>
		/// <param name="space_fields">A comma separated list of Space fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="topic_fields">A comma separated list of Topic fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2SpacesResponse> FindSpacesByIdsAsync(string[] ids, string[] space_fields, string[] expansions, string[] user_fields, string[] topic_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/spaces?"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", space_fields.Select(z => $"space.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", topic_fields.Select(z => $"topic.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2SpacesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Space lookup by their creators
		/// Returns a variety of information about the Spaces created by the provided User IDs
		/// FindSpacesByCreatorIds 2/spaces/by/creator_ids
		/// </summary>
		/// <param name="user_ids">The IDs of Users to search through.
		/// Minimum items: 1
		/// Maximum items: 100
		// </param>
		/// <param name="space_fields">A comma separated list of Space fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="topic_fields">A comma separated list of Topic fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2SpacesByCreatorIdsResponse> FindSpacesByCreatorIdsAsync(string[] user_ids, string[] space_fields, string[] expansions, string[] user_fields, string[] topic_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/spaces/by/creator_ids?"+string.Join("&", user_ids.Select(z => $"user_ids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", space_fields.Select(z => $"space.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", topic_fields.Select(z => $"topic.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2SpacesByCreatorIdsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for Spaces
		/// Returns Spaces that match the provided query.
		/// SearchSpaces 2/spaces/search
		/// </summary>
		/// <param name="query">The search query.
		/// Max length: 2048
		/// Min length: 1
		// </param>
		/// <param name="state">The state of Spaces to search for.</param>
		/// <param name="max_results">The number of results to return.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="space_fields">A comma separated list of Space fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="topic_fields">A comma separated list of Topic fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2SpacesSearchResponse> SearchSpacesAsync(string query, SearchSpacesState state, int max_results, string[] space_fields, string[] expansions, string[] user_fields, string[] topic_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/spaces/search?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&state=" + state+"&max_results="+max_results+"&"+string.Join("&", space_fields.Select(z => $"space.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", topic_fields.Select(z => $"topic.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2SpacesSearchResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Space lookup by Space ID
		/// Returns a variety of information about the Space specified by the requested ID
		/// FindSpaceById 2/spaces/{id}
		/// </summary>
		/// <param name="id">The ID of the Space to be retrieved.</param>
		/// <param name="space_fields">A comma separated list of Space fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="topic_fields">A comma separated list of Topic fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2SpacesIdResponse> FindSpaceByIdAsync(string id, string[] space_fields, string[] expansions, string[] user_fields, string[] topic_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/spaces/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&"+string.Join("&", space_fields.Select(z => $"space.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", topic_fields.Select(z => $"topic.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2SpacesIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the list of Users who purchased a ticket to the given space
		/// Retrieves the list of Users who purchased a ticket to the given space
		/// SpaceBuyers 2/spaces/{id}/buyers
		/// </summary>
		/// <param name="id">The ID of the Space to be retrieved.</param>
		/// <param name="pagination_token">This parameter is used to get a specified 'page' of results.
		/// Min length: 16
		// </param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2SpacesIdBuyersResponse> SpaceBuyersAsync(string id, string pagination_token, int max_results, string[] user_fields, string[] expansions, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/spaces/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/buyers&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&max_results="+max_results+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2SpacesIdBuyersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve Tweets from a Space.
		/// Retrieves Tweets shared in the specified Space.
		/// SpaceTweets 2/spaces/{id}/tweets
		/// </summary>
		/// <param name="id">The ID of the Space to be retrieved.</param>
		/// <param name="max_results">The number of Tweets to fetch from the provided space. If not provided, the value will default to the maximum of 100.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="poll_fields">A comma separated list of Poll fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="place_fields">A comma separated list of Place fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2SpacesIdTweetsResponse> SpaceTweetsAsync(string id, int max_results, string[] tweet_fields, string[] expansions, string[] media_fields, string[] poll_fields, string[] user_fields, string[] place_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/spaces/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/tweets&max_results="+max_results+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", poll_fields.Select(z => $"poll.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", place_fields.Select(z => $"place.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2SpacesIdTweetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tweet lookup by Tweet IDs
		/// Returns a variety of information about the Tweet specified by the requested ID.
		/// FindTweetsById 2/tweets
		/// </summary>
		/// <param name="ids">A comma separated list of Tweet IDs. Up to 100 are allowed in a single request.
		/// Minimum items: 1
		/// Maximum items: 100
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="poll_fields">A comma separated list of Poll fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="place_fields">A comma separated list of Place fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2TweetsResponse> FindTweetsByIdAsync(string[] ids, string[] tweet_fields, string[] expansions, string[] media_fields, string[] poll_fields, string[] user_fields, string[] place_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets?"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", poll_fields.Select(z => $"poll.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", place_fields.Select(z => $"place.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2TweetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creation of a Tweet
		/// Causes the User to create a Tweet under the authorized account.
		/// CreateTweet 2/tweets
		/// </summary>
		public async Task CreateTweetAsync(TweetCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Tweets Compliance stream
		/// Streams 100% of compliance data for Tweets
		/// GetTweetsComplianceStream 2/tweets/compliance/stream
		/// </summary>
		/// <param name="backfill_minutes">The number of minutes of backfill requested.
		/// Minimum: 0
		/// Maximum: 5
		// </param>
		/// <param name="partition">The partition number.
		/// Minimum: 1
		/// Maximum: 4
		// </param>
		/// <param name="start_time">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet Compliance events will be provided.</param>
		/// <param name="end_time">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweet Compliance events will be provided.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<TweetComplianceStreamResponse> GetTweetsComplianceStreamAsync(int backfill_minutes, int partition, System.DateTimeOffset start_time, System.DateTimeOffset end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/compliance/stream?backfill_minutes="+backfill_minutes+"&partition="+partition+"&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TweetComplianceStreamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Full archive search counts
		/// Returns Tweet Counts that match a search query.
		/// TweetCountsFullArchiveSearch 2/tweets/counts/all
		/// </summary>
		/// <param name="query">One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
		/// Max length: 4096
		/// Min length: 1
		// </param>
		/// <param name="start_time">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).</param>
		/// <param name="end_time">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).</param>
		/// <param name="since_id">Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.</param>
		/// <param name="until_id">Returns results with a Tweet ID less than (that is, older than) the specified ID.</param>
		/// <param name="next_token">This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
		/// Min length: 1
		// </param>
		/// <param name="pagination_token">This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
		/// Min length: 1
		// </param>
		/// <param name="granularity">The granularity for the search counts results.</param>
		/// <param name="search_count_fields">A comma separated list of SearchCount fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2TweetsCountsAllResponse> TweetCountsFullArchiveSearchAsync(string query, System.DateTimeOffset start_time, System.DateTimeOffset end_time, string since_id, string until_id, string next_token, string pagination_token, TweetCountsFullArchiveSearchGranularity granularity, string[] search_count_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/counts/all?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&since_id=" + (since_id==null? "" : System.Uri.EscapeDataString(since_id))+"&until_id=" + (until_id==null? "" : System.Uri.EscapeDataString(until_id))+"&next_token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&granularity=" + granularity+"&"+string.Join("&", search_count_fields.Select(z => $"search_count.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2TweetsCountsAllResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recent search counts
		/// Returns Tweet Counts from the last 7 days that match a search query.
		/// TweetCountsRecentSearch 2/tweets/counts/recent
		/// </summary>
		/// <param name="query">One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
		/// Max length: 4096
		/// Min length: 1
		// </param>
		/// <param name="start_time">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp (from most recent 7 days) from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).</param>
		/// <param name="end_time">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).</param>
		/// <param name="since_id">Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.</param>
		/// <param name="until_id">Returns results with a Tweet ID less than (that is, older than) the specified ID.</param>
		/// <param name="next_token">This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
		/// Min length: 1
		// </param>
		/// <param name="pagination_token">This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
		/// Min length: 1
		// </param>
		/// <param name="granularity">The granularity for the search counts results.</param>
		/// <param name="search_count_fields">A comma separated list of SearchCount fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2TweetsCountsRecentResponse> TweetCountsRecentSearchAsync(string query, System.DateTimeOffset start_time, System.DateTimeOffset end_time, string since_id, string until_id, string next_token, string pagination_token, TweetCountsFullArchiveSearchGranularity granularity, string[] search_count_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/counts/recent?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&since_id=" + (since_id==null? "" : System.Uri.EscapeDataString(since_id))+"&until_id=" + (until_id==null? "" : System.Uri.EscapeDataString(until_id))+"&next_token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&granularity=" + granularity+"&"+string.Join("&", search_count_fields.Select(z => $"search_count.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2TweetsCountsRecentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Firehose stream
		/// Streams 100% of public Tweets.
		/// GetTweetsFirehoseStream 2/tweets/firehose/stream
		/// </summary>
		/// <param name="backfill_minutes">The number of minutes of backfill requested.
		/// Minimum: 0
		/// Maximum: 5
		// </param>
		/// <param name="partition">The partition number.
		/// Minimum: 1
		/// Maximum: 20
		// </param>
		/// <param name="start_time">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Tweets will be provided.</param>
		/// <param name="end_time">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided.</param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="poll_fields">A comma separated list of Poll fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="place_fields">A comma separated list of Place fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<StreamingTweetResponse> GetTweetsFirehoseStreamAsync(int backfill_minutes, int partition, System.DateTimeOffset start_time, System.DateTimeOffset end_time, string[] tweet_fields, string[] expansions, string[] media_fields, string[] poll_fields, string[] user_fields, string[] place_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/firehose/stream?backfill_minutes="+backfill_minutes+"&partition="+partition+"&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", poll_fields.Select(z => $"poll.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", place_fields.Select(z => $"place.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StreamingTweetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tweets Label stream
		/// Streams 100% of labeling events applied to Tweets
		/// GetTweetsLabelStream 2/tweets/label/stream
		/// </summary>
		/// <param name="backfill_minutes">The number of minutes of backfill requested.
		/// Minimum: 0
		/// Maximum: 5
		// </param>
		/// <param name="start_time">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweet labels will be provided.</param>
		/// <param name="end_time">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the Tweet labels will be provided.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<TweetLabelStreamResponse> GetTweetsLabelStreamAsync(int backfill_minutes, System.DateTimeOffset start_time, System.DateTimeOffset end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/label/stream?backfill_minutes="+backfill_minutes+"&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TweetLabelStreamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sample stream
		/// Streams a deterministic 1% of public Tweets.
		/// SampleStream 2/tweets/sample/stream
		/// </summary>
		/// <param name="backfill_minutes">The number of minutes of backfill requested.
		/// Minimum: 0
		/// Maximum: 5
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="poll_fields">A comma separated list of Poll fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="place_fields">A comma separated list of Place fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<StreamingTweetResponse> SampleStreamAsync(int backfill_minutes, string[] tweet_fields, string[] expansions, string[] media_fields, string[] poll_fields, string[] user_fields, string[] place_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/sample/stream?backfill_minutes="+backfill_minutes+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", poll_fields.Select(z => $"poll.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", place_fields.Select(z => $"place.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StreamingTweetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sample 10% stream
		/// Streams a deterministic 10% of public Tweets.
		/// GetTweetsSample10Stream 2/tweets/sample10/stream
		/// </summary>
		/// <param name="backfill_minutes">The number of minutes of backfill requested.
		/// Minimum: 0
		/// Maximum: 5
		// </param>
		/// <param name="partition">The partition number.
		/// Minimum: 1
		/// Maximum: 2
		// </param>
		/// <param name="start_time">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp to which the Tweets will be provided.</param>
		/// <param name="end_time">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided.</param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="poll_fields">A comma separated list of Poll fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="place_fields">A comma separated list of Place fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2TweetsSample10StreamResponse> GetTweetsSample10StreamAsync(int backfill_minutes, int partition, System.DateTimeOffset start_time, System.DateTimeOffset end_time, string[] tweet_fields, string[] expansions, string[] media_fields, string[] poll_fields, string[] user_fields, string[] place_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/sample10/stream?backfill_minutes="+backfill_minutes+"&partition="+partition+"&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", poll_fields.Select(z => $"poll.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", place_fields.Select(z => $"place.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2TweetsSample10StreamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Full-archive search
		/// Returns Tweets that match a search query.
		/// TweetsFullarchiveSearch 2/tweets/search/all
		/// </summary>
		/// <param name="query">One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
		/// Max length: 4096
		/// Min length: 1
		// </param>
		/// <param name="start_time">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).</param>
		/// <param name="end_time">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).</param>
		/// <param name="since_id">Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.</param>
		/// <param name="until_id">Returns results with a Tweet ID less than (that is, older than) the specified ID.</param>
		/// <param name="max_results">The maximum number of search results to be returned by a request.
		/// Minimum: 10
		/// Maximum: 500
		// </param>
		/// <param name="next_token">This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
		/// Min length: 1
		// </param>
		/// <param name="pagination_token">This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
		/// Min length: 1
		// </param>
		/// <param name="sort_order">This order in which to return results.</param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="poll_fields">A comma separated list of Poll fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="place_fields">A comma separated list of Place fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2TweetsSearchAllResponse> TweetsFullarchiveSearchAsync(
					string query, 
					System.DateTimeOffset start_time, 
					System.DateTimeOffset end_time, 
					string since_id, 
					string until_id, 
					int max_results, 
					string next_token, 
					string pagination_token, 
					TweetsFullarchiveSearchSort_order sort_order, 
					string[] tweet_fields, 
					string[] expansions, 
					string[] media_fields, 
					string[] poll_fields, 
					string[] user_fields, 
					string[] place_fields, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/search/all?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&since_id=" + (since_id==null? "" : System.Uri.EscapeDataString(since_id))+"&until_id=" + (until_id==null? "" : System.Uri.EscapeDataString(until_id))+"&max_results="+max_results+"&next_token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&sort_order=" + sort_order+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", poll_fields.Select(z => $"poll.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", place_fields.Select(z => $"place.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2TweetsSearchAllResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Recent search
		/// Returns Tweets from the last 7 days that match a search query.
		/// TweetsRecentSearch 2/tweets/search/recent
		/// </summary>
		/// <param name="query">One query/rule/filter for matching Tweets. Refer to https://t.co/rulelength to identify the max query length.
		/// Max length: 4096
		/// Min length: 1
		// </param>
		/// <param name="start_time">YYYY-MM-DDTHH:mm:ssZ. The oldest UTC timestamp from which the Tweets will be provided. Timestamp is in second granularity and is inclusive (i.e. 12:00:01 includes the first second of the minute).</param>
		/// <param name="end_time">YYYY-MM-DDTHH:mm:ssZ. The newest, most recent UTC timestamp to which the Tweets will be provided. Timestamp is in second granularity and is exclusive (i.e. 12:00:01 excludes the first second of the minute).</param>
		/// <param name="since_id">Returns results with a Tweet ID greater than (that is, more recent than) the specified ID.</param>
		/// <param name="until_id">Returns results with a Tweet ID less than (that is, older than) the specified ID.</param>
		/// <param name="max_results">The maximum number of search results to be returned by a request.
		/// Minimum: 10
		/// Maximum: 100
		// </param>
		/// <param name="next_token">This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
		/// Min length: 1
		// </param>
		/// <param name="pagination_token">This parameter is used to get the next 'page' of results. The value used with the parameter is pulled directly from the response provided by the API, and should not be modified.
		/// Min length: 1
		// </param>
		/// <param name="sort_order">This order in which to return results.</param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="poll_fields">A comma separated list of Poll fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="place_fields">A comma separated list of Place fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2TweetsSearchRecentResponse> TweetsRecentSearchAsync(
					string query, 
					System.DateTimeOffset start_time, 
					System.DateTimeOffset end_time, 
					string since_id, 
					string until_id, 
					int max_results, 
					string next_token, 
					string pagination_token, 
					TweetsFullarchiveSearchSort_order sort_order, 
					string[] tweet_fields, 
					string[] expansions, 
					string[] media_fields, 
					string[] poll_fields, 
					string[] user_fields, 
					string[] place_fields, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/search/recent?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&since_id=" + (since_id==null? "" : System.Uri.EscapeDataString(since_id))+"&until_id=" + (until_id==null? "" : System.Uri.EscapeDataString(until_id))+"&max_results="+max_results+"&next_token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&sort_order=" + sort_order+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", poll_fields.Select(z => $"poll.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", place_fields.Select(z => $"place.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2TweetsSearchRecentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Filtered stream
		/// Streams Tweets matching the stream's active rule set.
		/// SearchStream 2/tweets/search/stream
		/// </summary>
		/// <param name="backfill_minutes">The number of minutes of backfill requested.
		/// Minimum: 0
		/// Maximum: 5
		// </param>
		/// <param name="start_time">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided.</param>
		/// <param name="end_time">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided.</param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="poll_fields">A comma separated list of Poll fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="place_fields">A comma separated list of Place fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<FilteredStreamingTweetResponse> SearchStreamAsync(int backfill_minutes, System.DateTimeOffset start_time, System.DateTimeOffset end_time, string[] tweet_fields, string[] expansions, string[] media_fields, string[] poll_fields, string[] user_fields, string[] place_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/search/stream?backfill_minutes="+backfill_minutes+"&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", poll_fields.Select(z => $"poll.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", place_fields.Select(z => $"place.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FilteredStreamingTweetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Rules lookup
		/// Returns rules from a User's active rule set. Users can fetch all of their rules or a subset, specified by the provided rule ids.
		/// GetRules 2/tweets/search/stream/rules
		/// </summary>
		/// <param name="ids">A comma-separated list of Rule IDs.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="pagination_token">This value is populated by passing the 'next_token' returned in a request to paginate through results.
		/// Max length: 16
		/// Min length: 16
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<RulesLookupResponse> GetRulesAsync(string[] ids, int max_results, string pagination_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/search/stream/rules?"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RulesLookupResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add/Delete rules
		/// Add or delete rules from a User's active rule set. Users can provide unique, optionally tagged rules to add. Users can delete their entire rule set or a subset specified by rule ids or values.
		/// AddOrDeleteRules 2/tweets/search/stream/rules
		/// </summary>
		/// <param name="dry_run">Dry Run can be used with both the add and delete action, with the expected result given, but without actually taking any action in the system (meaning the end state will always be as it was when the request was submitted). This is particularly useful to validate rule changes.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<AddOrDeleteRulesResponse> AddOrDeleteRulesAsync(bool dry_run, AddOrDeleteRulesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/search/stream/rules?dry_run="+dry_run;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AddOrDeleteRulesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Tweet delete by Tweet ID
		/// Delete specified Tweet (in the path) by ID.
		/// DeleteTweetById 2/tweets/{id}
		/// </summary>
		/// <param name="id">The ID of the Tweet to be deleted.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<TweetDeleteResponse> DeleteTweetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TweetDeleteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tweet lookup by Tweet ID
		/// Returns a variety of information about the Tweet specified by the requested ID.
		/// FindTweetById 2/tweets/{id}
		/// </summary>
		/// <param name="id">A single Tweet ID.</param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="poll_fields">A comma separated list of Poll fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="place_fields">A comma separated list of Place fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2TweetsIdResponse> FindTweetByIdAsync(string id, string[] tweet_fields, string[] expansions, string[] media_fields, string[] poll_fields, string[] user_fields, string[] place_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", poll_fields.Select(z => $"poll.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", place_fields.Select(z => $"place.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2TweetsIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns User objects that have liked the provided Tweet ID
		/// Returns a list of Users that have liked the provided Tweet ID
		/// TweetsIdLikingUsers 2/tweets/{id}/liking_users
		/// </summary>
		/// <param name="id">A single Tweet ID.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get the next 'page' of results.
		/// Min length: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2TweetsIdLikingUsersResponse> TweetsIdLikingUsersAsync(string id, int max_results, string pagination_token, string[] user_fields, string[] expansions, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/liking_users&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2TweetsIdLikingUsersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve Tweets that quote a Tweet.
		/// Returns a variety of information about each Tweet that quotes the Tweet specified by the requested ID.
		/// FindTweetsThatQuoteATweet 2/tweets/{id}/quote_tweets
		/// </summary>
		/// <param name="id">A single Tweet ID.</param>
		/// <param name="max_results">The maximum number of results to be returned.
		/// Minimum: 10
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get a specified 'page' of results.
		/// Min length: 1
		// </param>
		/// <param name="exclude">The set of entities to exclude (e.g. 'replies' or 'retweets').
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="poll_fields">A comma separated list of Poll fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="place_fields">A comma separated list of Place fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2TweetsIdQuoteTweetsResponse> FindTweetsThatQuoteATweetAsync(string id, int max_results, string pagination_token, string[] exclude, string[] tweet_fields, string[] expansions, string[] media_fields, string[] poll_fields, string[] user_fields, string[] place_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/quote_tweets&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", poll_fields.Select(z => $"poll.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", place_fields.Select(z => $"place.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2TweetsIdQuoteTweetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns User objects that have retweeted the provided Tweet ID
		/// Returns a list of Users that have retweeted the provided Tweet ID
		/// TweetsIdRetweetingUsers 2/tweets/{id}/retweeted_by
		/// </summary>
		/// <param name="id">A single Tweet ID.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get the next 'page' of results.
		/// Min length: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2TweetsIdRetweetedByResponse> TweetsIdRetweetingUsersAsync(string id, int max_results, string pagination_token, string[] user_fields, string[] expansions, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/retweeted_by&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2TweetsIdRetweetedByResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Hide replies
		/// Hides or unhides a reply to an owned conversation.
		/// HideReplyById 2/tweets/{tweet_id}/hidden
		/// </summary>
		/// <param name="tweet_id">The ID of the reply that you want to hide or unhide.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<TweetHideResponse> HideReplyByIdAsync(string tweet_id, TweetHideRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/tweets/"+ (tweet_id==null? "" : System.Uri.EscapeDataString(tweet_id))+"/hidden";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TweetHideResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// User lookup by IDs
		/// This endpoint returns information about Users. Specify Users by their ID.
		/// FindUsersById 2/users
		/// </summary>
		/// <param name="ids">A list of User IDs, comma-separated. You can specify up to 100 IDs.
		/// Minimum items: 1
		/// Maximum items: 100
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersResponse> FindUsersByIdAsync(string[] ids, string[] user_fields, string[] expansions, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users?"+string.Join("&", ids.Select(z => $"ids={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// User lookup by usernames
		/// This endpoint returns information about Users. Specify Users by their username.
		/// FindUsersByUsername 2/users/by
		/// </summary>
		/// <param name="usernames">A list of usernames, comma-separated.
		/// Minimum items: 1
		/// Maximum items: 100
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersByResponse> FindUsersByUsernameAsync(string[] usernames, string[] user_fields, string[] expansions, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/by?"+string.Join("&", usernames.Select(z => $"usernames={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersByResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// User lookup by username
		/// This endpoint returns information about a User. Specify User by username.
		/// FindUserByUsername 2/users/by/username/{username}
		/// </summary>
		/// <param name="username">A username.</param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersByUsernameUsernameResponse> FindUserByUsernameAsync(string username, string[] user_fields, string[] expansions, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/by/username/"+ (username==null? "" : System.Uri.EscapeDataString(username))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersByUsernameUsernameResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Users Compliance stream
		/// Streams 100% of compliance data for Users
		/// GetUsersComplianceStream 2/users/compliance/stream
		/// </summary>
		/// <param name="backfill_minutes">The number of minutes of backfill requested.
		/// Minimum: 0
		/// Maximum: 5
		// </param>
		/// <param name="partition">The partition number.
		/// Minimum: 1
		/// Maximum: 4
		// </param>
		/// <param name="start_time">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the User Compliance events will be provided.</param>
		/// <param name="end_time">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp from which the User Compliance events will be provided.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<UserComplianceStreamResponse> GetUsersComplianceStreamAsync(int backfill_minutes, int partition, System.DateTimeOffset start_time, System.DateTimeOffset end_time, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/compliance/stream?backfill_minutes="+backfill_minutes+"&partition="+partition+"&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserComplianceStreamResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// User lookup me
		/// This endpoint returns information about the requesting User.
		/// FindMyUser 2/users/me
		/// </summary>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersMeResponse> FindMyUserAsync(string[] user_fields, string[] expansions, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/me?"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersMeResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// User lookup by ID
		/// This endpoint returns information about a User. Specify User by ID.
		/// FindUserById 2/users/{id}
		/// </summary>
		/// <param name="id">The ID of the User to lookup.</param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersIdResponse> FindUserByIdAsync(string id, string[] user_fields, string[] expansions, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns User objects that are blocked by provided User ID
		/// Returns a list of Users that are blocked by the provided User ID
		/// UsersIdBlocking 2/users/{id}/blocking
		/// </summary>
		/// <param name="id">The ID of the authenticated source User for whom to return results.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="pagination_token">This parameter is used to get a specified 'page' of results.
		/// Min length: 16
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersIdBlockingResponse> UsersIdBlockingAsync(string id, int max_results, string pagination_token, string[] user_fields, string[] expansions, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/blocking&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersIdBlockingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Block User by User ID
		/// Causes the User (in the path) to block the target User. The User (in the path) must match the User context authorizing the request
		/// UsersIdBlock 2/users/{id}/blocking
		/// </summary>
		/// <param name="id">The ID of the authenticated source User that is requesting to block the target User.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<BlockUserMutationResponse> UsersIdBlockAsync(string id, BlockUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/blocking";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BlockUserMutationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Bookmarks by User
		/// Returns Tweet objects that have been bookmarked by the requesting User
		/// GetUsersIdBookmarks 2/users/{id}/bookmarks
		/// </summary>
		/// <param name="id">The ID of the authenticated source User for whom to return results.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get the next 'page' of results.
		/// Min length: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="poll_fields">A comma separated list of Poll fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="place_fields">A comma separated list of Place fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersIdBookmarksResponse> GetUsersIdBookmarksAsync(string id, int max_results, string pagination_token, string[] tweet_fields, string[] expansions, string[] media_fields, string[] poll_fields, string[] user_fields, string[] place_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/bookmarks&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", poll_fields.Select(z => $"poll.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", place_fields.Select(z => $"place.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersIdBookmarksResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add Tweet to Bookmarks
		/// Adds a Tweet (ID in the body) to the requesting User's (in the path) bookmarks
		/// PostUsersIdBookmarks 2/users/{id}/bookmarks
		/// </summary>
		/// <param name="id">The ID of the authenticated source User for whom to add bookmarks.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<BookmarkMutationResponse> PostUsersIdBookmarksAsync(string id, BookmarkAddRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/bookmarks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BookmarkMutationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a bookmarked Tweet
		/// Removes a Tweet from the requesting User's bookmarked Tweets.
		/// UsersIdBookmarksDelete 2/users/{id}/bookmarks/{tweet_id}
		/// </summary>
		/// <param name="id">The ID of the authenticated source User whose bookmark is to be removed.</param>
		/// <param name="tweet_id">The ID of the Tweet that the source User is removing from bookmarks.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<BookmarkMutationResponse> UsersIdBookmarksDeleteAsync(string id, string tweet_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/bookmarks/"+ (tweet_id==null? "" : System.Uri.EscapeDataString(tweet_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BookmarkMutationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User's Followed Lists
		/// Returns a User's followed Lists.
		/// UserFollowedLists 2/users/{id}/followed_lists
		/// </summary>
		/// <param name="id">The ID of the User to lookup.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get a specified 'page' of results.
		/// Max length: 19
		/// Min length: 1
		// </param>
		/// <param name="list_fields">A comma separated list of List fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersIdFollowedListsResponse> UserFollowedListsAsync(string id, int max_results, string pagination_token, string[] list_fields, string[] expansions, string[] user_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/followed_lists&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", list_fields.Select(z => $"list.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersIdFollowedListsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Follow a List
		/// Causes a User to follow a List.
		/// ListUserFollow 2/users/{id}/followed_lists
		/// </summary>
		/// <param name="id">The ID of the authenticated source User that will follow the List.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<ListFollowedResponse> ListUserFollowAsync(string id, ListFollowedRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/followed_lists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFollowedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unfollow a List
		/// Causes a User to unfollow a List.
		/// ListUserUnfollow 2/users/{id}/followed_lists/{list_id}
		/// </summary>
		/// <param name="id">The ID of the authenticated source User that will unfollow the List.</param>
		/// <param name="list_id">The ID of the List to unfollow.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<ListFollowedResponse> ListUserUnfollowAsync(string id, string list_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/followed_lists/"+ (list_id==null? "" : System.Uri.EscapeDataString(list_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListFollowedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Followers by User ID
		/// Returns a list of Users who are followers of the specified User ID.
		/// UsersIdFollowers 2/users/{id}/followers
		/// </summary>
		/// <param name="id">The ID of the User to lookup.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="pagination_token">This parameter is used to get a specified 'page' of results.
		/// Min length: 16
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersIdFollowersResponse> UsersIdFollowersAsync(string id, int max_results, string pagination_token, string[] user_fields, string[] expansions, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/followers&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersIdFollowersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Following by User ID
		/// Returns a list of Users that are being followed by the provided User ID
		/// UsersIdFollowing 2/users/{id}/following
		/// </summary>
		/// <param name="id">The ID of the User to lookup.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="pagination_token">This parameter is used to get a specified 'page' of results.
		/// Min length: 16
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersIdFollowingResponse> UsersIdFollowingAsync(string id, int max_results, string pagination_token, string[] user_fields, string[] expansions, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/following&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersIdFollowingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Follow User
		/// Causes the User(in the path) to follow, or “request to follow” for protected Users, the target User. The User(in the path) must match the User context authorizing the request
		/// UsersIdFollow 2/users/{id}/following
		/// </summary>
		/// <param name="id">The ID of the authenticated source User that is requesting to follow the target User.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<UsersFollowingCreateResponse> UsersIdFollowAsync(string id, UsersFollowingCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/following";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsersFollowingCreateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns Tweet objects liked by the provided User ID
		/// Returns a list of Tweets liked by the provided User ID
		/// UsersIdLikedTweets 2/users/{id}/liked_tweets
		/// </summary>
		/// <param name="id">The ID of the User to lookup.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 5
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get the next 'page' of results.
		/// Min length: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="poll_fields">A comma separated list of Poll fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="place_fields">A comma separated list of Place fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersIdLikedTweetsResponse> UsersIdLikedTweetsAsync(string id, int max_results, string pagination_token, string[] tweet_fields, string[] expansions, string[] media_fields, string[] poll_fields, string[] user_fields, string[] place_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/liked_tweets&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", poll_fields.Select(z => $"poll.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", place_fields.Select(z => $"place.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersIdLikedTweetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Causes the User (in the path) to like the specified Tweet
		/// Causes the User (in the path) to like the specified Tweet. The User in the path must match the User context authorizing the request.
		/// UsersIdLike 2/users/{id}/likes
		/// </summary>
		/// <param name="id">The ID of the authenticated source User that is requesting to like the Tweet.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<UsersLikesCreateResponse> UsersIdLikeAsync(string id, UsersLikesCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/likes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsersLikesCreateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Causes the User (in the path) to unlike the specified Tweet
		/// Causes the User (in the path) to unlike the specified Tweet. The User must match the User context authorizing the request
		/// UsersIdUnlike 2/users/{id}/likes/{tweet_id}
		/// </summary>
		/// <param name="id">The ID of the authenticated source User that is requesting to unlike the Tweet.</param>
		/// <param name="tweet_id">The ID of the Tweet that the User is requesting to unlike.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<UsersLikesDeleteResponse> UsersIdUnlikeAsync(string id, string tweet_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/likes/"+ (tweet_id==null? "" : System.Uri.EscapeDataString(tweet_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsersLikesDeleteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a User's List Memberships
		/// Get a User's List Memberships.
		/// GetUserListMemberships 2/users/{id}/list_memberships
		/// </summary>
		/// <param name="id">The ID of the User to lookup.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get a specified 'page' of results.
		/// Max length: 19
		/// Min length: 1
		// </param>
		/// <param name="list_fields">A comma separated list of List fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersIdListMembershipsResponse> GetUserListMembershipsAsync(string id, int max_results, string pagination_token, string[] list_fields, string[] expansions, string[] user_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/list_memberships&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", list_fields.Select(z => $"list.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersIdListMembershipsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// User mention timeline by User ID
		/// Returns Tweet objects that mention username associated to the provided User ID
		/// UsersIdMentions 2/users/{id}/mentions
		/// </summary>
		/// <param name="id">The ID of the User to lookup.</param>
		/// <param name="since_id">The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified.</param>
		/// <param name="until_id">The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 5
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get the next 'page' of results.
		/// Min length: 1
		// </param>
		/// <param name="start_time">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified.</param>
		/// <param name="end_time">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified.</param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="poll_fields">A comma separated list of Poll fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="place_fields">A comma separated list of Place fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersIdMentionsResponse> UsersIdMentionsAsync(string id, string since_id, string until_id, int max_results, string pagination_token, System.DateTimeOffset start_time, System.DateTimeOffset end_time, string[] tweet_fields, string[] expansions, string[] media_fields, string[] poll_fields, string[] user_fields, string[] place_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/mentions&since_id=" + (since_id==null? "" : System.Uri.EscapeDataString(since_id))+"&until_id=" + (until_id==null? "" : System.Uri.EscapeDataString(until_id))+"&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", poll_fields.Select(z => $"poll.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", place_fields.Select(z => $"place.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersIdMentionsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns User objects that are muted by the provided User ID
		/// Returns a list of Users that are muted by the provided User ID
		/// UsersIdMuting 2/users/{id}/muting
		/// </summary>
		/// <param name="id">The ID of the authenticated source User for whom to return results.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 1000
		// </param>
		/// <param name="pagination_token">This parameter is used to get the next 'page' of results.
		/// Max length: 19
		/// Min length: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersIdMutingResponse> UsersIdMutingAsync(string id, int max_results, string pagination_token, string[] user_fields, string[] expansions, string[] tweet_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/muting&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersIdMutingResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Mute User by User ID.
		/// Causes the User (in the path) to mute the target User. The User (in the path) must match the User context authorizing the request.
		/// UsersIdMute 2/users/{id}/muting
		/// </summary>
		/// <param name="id">The ID of the authenticated source User that is requesting to mute the target User.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<MuteUserMutationResponse> UsersIdMuteAsync(string id, MuteUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/muting";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MuteUserMutationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a User's Owned Lists.
		/// Get a User's Owned Lists.
		/// ListUserOwnedLists 2/users/{id}/owned_lists
		/// </summary>
		/// <param name="id">The ID of the User to lookup.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get a specified 'page' of results.
		/// Max length: 19
		/// Min length: 1
		// </param>
		/// <param name="list_fields">A comma separated list of List fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersIdOwnedListsResponse> ListUserOwnedListsAsync(string id, int max_results, string pagination_token, string[] list_fields, string[] expansions, string[] user_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/owned_lists&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", list_fields.Select(z => $"list.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersIdOwnedListsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a User's Pinned Lists
		/// Get a User's Pinned Lists.
		/// ListUserPinnedLists 2/users/{id}/pinned_lists
		/// </summary>
		/// <param name="id">The ID of the authenticated source User for whom to return results.</param>
		/// <param name="list_fields">A comma separated list of List fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersIdPinnedListsResponse> ListUserPinnedListsAsync(string id, string[] list_fields, string[] expansions, string[] user_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/pinned_lists&"+string.Join("&", list_fields.Select(z => $"list.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersIdPinnedListsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Pin a List
		/// Causes a User to pin a List.
		/// ListUserPin 2/users/{id}/pinned_lists
		/// </summary>
		/// <param name="id">The ID of the authenticated source User that will pin the List.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<ListPinnedResponse> ListUserPinAsync(string id, ListPinnedRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/pinned_lists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListPinnedResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Unpin a List
		/// Causes a User to remove a pinned List.
		/// ListUserUnpin 2/users/{id}/pinned_lists/{list_id}
		/// </summary>
		/// <param name="id">The ID of the authenticated source User for whom to return results.</param>
		/// <param name="list_id">The ID of the List to unpin.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<ListUnpinResponse> ListUserUnpinAsync(string id, string list_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/pinned_lists/"+ (list_id==null? "" : System.Uri.EscapeDataString(list_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListUnpinResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Causes the User (in the path) to retweet the specified Tweet.
		/// Causes the User (in the path) to retweet the specified Tweet. The User in the path must match the User context authorizing the request.
		/// UsersIdRetweets 2/users/{id}/retweets
		/// </summary>
		/// <param name="id">The ID of the authenticated source User that is requesting to retweet the Tweet.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<UsersRetweetsCreateResponse> UsersIdRetweetsAsync(string id, UsersRetweetsCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/retweets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsersRetweetsCreateResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Causes the User (in the path) to unretweet the specified Tweet
		/// Causes the User (in the path) to unretweet the specified Tweet. The User must match the User context authorizing the request
		/// UsersIdUnretweets 2/users/{id}/retweets/{source_tweet_id}
		/// </summary>
		/// <param name="id">The ID of the authenticated source User that is requesting to retweet the Tweet.</param>
		/// <param name="source_tweet_id">The ID of the Tweet that the User is requesting to unretweet.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<UsersRetweetsDeleteResponse> UsersIdUnretweetsAsync(string id, string source_tweet_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/retweets/"+ (source_tweet_id==null? "" : System.Uri.EscapeDataString(source_tweet_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsersRetweetsDeleteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// User home timeline by User ID
		/// Returns Tweet objects that appears in the provided User ID's home timeline
		/// UsersIdTimeline 2/users/{id}/timelines/reverse_chronological
		/// </summary>
		/// <param name="id">The ID of the authenticated source User to list Reverse Chronological Timeline Tweets of.</param>
		/// <param name="since_id">The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified.</param>
		/// <param name="until_id">The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get the next 'page' of results.
		/// Min length: 1
		// </param>
		/// <param name="exclude">The set of entities to exclude (e.g. 'replies' or 'retweets').</param>
		/// <param name="start_time">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified.</param>
		/// <param name="end_time">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified.</param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="poll_fields">A comma separated list of Poll fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="place_fields">A comma separated list of Place fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersIdTimelinesReverseChronologicalResponse> UsersIdTimelineAsync(string id, string since_id, string until_id, int max_results, string pagination_token, string[] exclude, System.DateTimeOffset start_time, System.DateTimeOffset end_time, string[] tweet_fields, string[] expansions, string[] media_fields, string[] poll_fields, string[] user_fields, string[] place_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/timelines/reverse_chronological&since_id=" + (since_id==null? "" : System.Uri.EscapeDataString(since_id))+"&until_id=" + (until_id==null? "" : System.Uri.EscapeDataString(until_id))+"&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", poll_fields.Select(z => $"poll.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", place_fields.Select(z => $"place.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersIdTimelinesReverseChronologicalResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// User Tweets timeline by User ID
		/// Returns a list of Tweets authored by the provided User ID
		/// UsersIdTweets 2/users/{id}/tweets
		/// </summary>
		/// <param name="id">The ID of the User to lookup.</param>
		/// <param name="since_id">The minimum Tweet ID to be included in the result set. This parameter takes precedence over start_time if both are specified.</param>
		/// <param name="until_id">The maximum Tweet ID to be included in the result set. This parameter takes precedence over end_time if both are specified.</param>
		/// <param name="max_results">The maximum number of results.
		/// Minimum: 5
		/// Maximum: 100
		// </param>
		/// <param name="pagination_token">This parameter is used to get the next 'page' of results.
		/// Min length: 1
		// </param>
		/// <param name="exclude">The set of entities to exclude (e.g. 'replies' or 'retweets').
		/// Minimum items: 1
		// </param>
		/// <param name="start_time">YYYY-MM-DDTHH:mm:ssZ. The earliest UTC timestamp from which the Tweets will be provided. The since_id parameter takes precedence if it is also specified.</param>
		/// <param name="end_time">YYYY-MM-DDTHH:mm:ssZ. The latest UTC timestamp to which the Tweets will be provided. The until_id parameter takes precedence if it is also specified.</param>
		/// <param name="tweet_fields">A comma separated list of Tweet fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="expansions">A comma separated list of fields to expand.
		/// Minimum items: 1
		// </param>
		/// <param name="media_fields">A comma separated list of Media fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="poll_fields">A comma separated list of Poll fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="user_fields">A comma separated list of User fields to display.
		/// Minimum items: 1
		// </param>
		/// <param name="place_fields">A comma separated list of Place fields to display.
		/// Minimum items: 1
		// </param>
		/// <returns>The request has succeeded.</returns>
		public async Task<Get2UsersIdTweetsResponse> UsersIdTweetsAsync(string id, string since_id, string until_id, int max_results, string pagination_token, string[] exclude, System.DateTimeOffset start_time, System.DateTimeOffset end_time, string[] tweet_fields, string[] expansions, string[] media_fields, string[] poll_fields, string[] user_fields, string[] place_fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/tweets&since_id=" + (since_id==null? "" : System.Uri.EscapeDataString(since_id))+"&until_id=" + (until_id==null? "" : System.Uri.EscapeDataString(until_id))+"&max_results="+max_results+"&pagination_token=" + (pagination_token==null? "" : System.Uri.EscapeDataString(pagination_token))+"&"+string.Join("&", exclude.Select(z => $"exclude={System.Uri.EscapeDataString(z.ToString())}"))+"&start_time=" + start_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&end_time=" + end_time.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&"+string.Join("&", tweet_fields.Select(z => $"tweet.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", expansions.Select(z => $"expansions={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", media_fields.Select(z => $"media.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", poll_fields.Select(z => $"poll.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", user_fields.Select(z => $"user.fields={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", place_fields.Select(z => $"place.fields={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Get2UsersIdTweetsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unblock User by User ID
		/// Causes the source User to unblock the target User. The source User must match the User context authorizing the request
		/// UsersIdUnblock 2/users/{source_user_id}/blocking/{target_user_id}
		/// </summary>
		/// <param name="source_user_id">The ID of the authenticated source User that is requesting to unblock the target User.</param>
		/// <param name="target_user_id">The ID of the User that the source User is requesting to unblock.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<BlockUserMutationResponse> UsersIdUnblockAsync(string source_user_id, string target_user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (source_user_id==null? "" : System.Uri.EscapeDataString(source_user_id))+"/blocking/"+ (target_user_id==null? "" : System.Uri.EscapeDataString(target_user_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BlockUserMutationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unfollow User
		/// Causes the source User to unfollow the target User. The source User must match the User context authorizing the request
		/// UsersIdUnfollow 2/users/{source_user_id}/following/{target_user_id}
		/// </summary>
		/// <param name="source_user_id">The ID of the authenticated source User that is requesting to unfollow the target User.</param>
		/// <param name="target_user_id">The ID of the User that the source User is requesting to unfollow.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<UsersFollowingDeleteResponse> UsersIdUnfollowAsync(string source_user_id, string target_user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (source_user_id==null? "" : System.Uri.EscapeDataString(source_user_id))+"/following/"+ (target_user_id==null? "" : System.Uri.EscapeDataString(target_user_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UsersFollowingDeleteResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unmute User by User ID
		/// Causes the source User to unmute the target User. The source User must match the User context authorizing the request
		/// UsersIdUnmute 2/users/{source_user_id}/muting/{target_user_id}
		/// </summary>
		/// <param name="source_user_id">The ID of the authenticated source User that is requesting to unmute the target User.</param>
		/// <param name="target_user_id">The ID of the User that the source User is requesting to unmute.</param>
		/// <returns>The request has succeeded.</returns>
		public async Task<MuteUserMutationResponse> UsersIdUnmuteAsync(string source_user_id, string target_user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "2/users/"+ (source_user_id==null? "" : System.Uri.EscapeDataString(source_user_id))+"/muting/"+ (target_user_id==null? "" : System.Uri.EscapeDataString(target_user_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MuteUserMutationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ListBatchComplianceJobsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="created")]
		created = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in_progress")]
		in_progress = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="failed")]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="complete")]
		complete = 3,
	}
	
	public enum SearchSpacesState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="live")]
		live = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scheduled")]
		scheduled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 2,
	}
	
	public enum TweetCountsFullArchiveSearchGranularity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="minute")]
		minute = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="hour")]
		hour = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="day")]
		day = 2,
	}
	
	public enum TweetsFullarchiveSearchSort_order
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="recency")]
		recency = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="relevancy")]
		relevancy = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
