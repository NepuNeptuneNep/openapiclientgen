//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessTokens
	{
		
		/// <summary>
		/// The identifier of the application for which the access token is generated.<br><br><b>Endpoints</b>:<ul><li>GET user/accessTokens</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Base URL using which the application is accessed.<br><br><b>Endpoints</b>:<ul><li>GET user/accessTokens</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Access token value used to invoke the widgets/apps.<br><br><b>Endpoints</b>:<ul><li>GET user/accessTokens</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Account
	{
		
		[System.Runtime.Serialization.DataMember(Name="401kLoan")]
		public Money _401kLoan { get; set; }
		
		/// <summary>
		/// The type of service. E.g., Bank, Credit Card, Investment, Insurance, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<AccountCONTAINER> CONTAINER { get; set; }
		
		/// <summary>
		/// The account name as it appears at the site.<br>(The POST accounts service response return this field as name)<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The account number as it appears on the site. (The POST accounts service response return this field as number)<br><b>Additional Details</b>:<b> Bank/ Loan/ Insurance/ Investment</b>:<br> The account number for the bank account as it appears at the site.<br><b>Credit Card</b>: The account number of the card account as it appears at the site,<br>i.e., the card number.The account number can be full or partial based on how it is displayed in the account summary page of the site.In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The status of the account that is updated by the consumer through an application or an API. Valid Values: AccountStatus<br><b>Additional Details:</b><br><b>ACTIVE:</b> All the added manual and aggregated accounts status will be made "ACTIVE" by default. <br><b>TO_BE_CLOSED:</b> If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED<br><b>INACTIVE:</b> Users can update the status as INACTIVE to stop updating and to stop considering the account in other services<br><b>CLOSED:</b> Users can update the status as CLOSED, if the account is closed with the provider. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountStatus")]
		public System.Nullable<AccountAccountStatus> AccountStatus { get; set; }
		
		/// <summary>
		/// The type of account that is aggregated, i.e., savings, checking, credit card, charge, HELOC, etc. The account type is derived based on the attributes of the account. <br><b>Valid Values:</b><br><b>Aggregated Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PPF</li><li>RECURRING_DEPOSIT</li><li>FSA</li><li>MONEY_MARKET</li><li>IRA</li><li>PREPAID</li></ul><b>creditCard</b><ul><li>OTHER</li><li>CREDIT</li><li>STORE</li><li>CHARGE</li><li>OTHER</li></ul><b>investment (SN 1.0)</b><ul><li>BROKERAGE_MARGIN</li><li>HSA</li><li>IRA</li><li>BROKERAGE_CASH</li><li>401K</li><li>403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE</li><li>CUSTODIAL</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE</li><li>JTTIC</li><li>JTWROS</li><li>COMMUNITY_PROPERTY</li><li>JOINT_BY_ENTIRETY</li><li>CONSERVATORSHIP</li><li>ROTH</li><li>ROTH_CONVERSION</li><li>ROLLOVER</li><li>EDUCATIONAL</li><li>529_PLAN</li><li>457_DEFERRED_COMPENSATION</li><li>401A</li><li>PSP</li><li>MPP</li><li>STOCK_BASKET</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER</li><li>CHARITABLE_LEAD</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP</li><li>UTMA</li><li>UGMA</li><li>ESOPP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>SOLE_PROPRIETORSHIP</li><li>CHURCH</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CMA</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET</li><li>SUPER_ANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN</li><li>DEFERRED_PROFIT_SHARING_PLAN</li><li>NON_REGISTERED_SAVINGS_PLAN</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN</li><li>GROUP_RETIREMENT_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_ACCOUNT</li><li>REGISTERED_PENSION_PLAN</li><li>TAX_FREE_SAVINGS_ACCOUNT</li><li>LIFE_INCOME_FUND</li><li>REGISTERED_RETIREMENT_INCOME_FUND</li><li>SPOUSAL_RETIREMENT_INCOME_FUND</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND</li><li>GUARANTEED_INVESTMENT_CERTIFICATES</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN</li><li>OTHER</li></ul><b>investment (SN 2.0)</b><ul><li>BROKERAGE_CASH</li><li>BROKERAGE_MARGIN</li><li>INDIVIDUAL_RETIREMENT_ACCOUNT_IRA</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_401K</li><li>EMPLOYEE_RETIREMENT_SAVINGS_PLAN_403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE_IRA</li><li>CUSTODIAL_ACCOUNT</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE_INVESTMENT_ACCOUNT</li><li>JOINT_TENANTS_TENANCY_IN_COMMON_JTIC</li><li>JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP_JTWROS</li><li>JOINT_TENANTS_COMMUNITY_PROPERTY</li><li>JOINT_TENANTS_TENANTS_BY_ENTIRETY</li><li>CONSERVATOR</li><li>ROTH_IRA</li><li>ROTH_CONVERSION</li><li>ROLLOVER_IRA</li><li>EDUCATIONAL</li><li>EDUCATIONAL_SAVINGS_PLAN_529</li><li>DEFERRED_COMPENSATION_PLAN_457</li><li>MONEY_PURCHASE_RETIREMENT_PLAN_401A</li><li>PROFIT_SHARING_PLAN</li><li>MONEY_PURCHASE_PLAN</li><li>STOCK_BASKET_ACCOUNT</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER_TRUST</li><li>CHARITABLE_LEAD_TRUST</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP_IRA</li><li>UNIFORM_TRANSFER_TO_MINORS_ACT_UTMA</li><li>UNIFORM_GIFT_TO_MINORS_ACT_UGMA</li><li>EMPLOYEE_STOCK_OWNERSHIP_PLAN_ESOP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>PROPRIETORSHIP</li><li>CHURCH_ACCOUNT</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CASH_MANAGEMENT_ACCOUNT</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN_ESPP</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET_ACCOUNT</li><li>SUPERANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN_RRSP</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN_SRSP</li><li>DEFERRED_PROFIT_SHARING_PLAN_DPSP</li><li>NON_REGISTERED_SAVINGS_PLAN_NRSP</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN_RESP</li><li>GROUP_RETIREMENT_SAVINGS_PLAN_GRSP</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN_LRSP</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN_RLSP</li><li>LOCKED_IN_RETIREMENT_ACCOUNT_LIRA</li><li>REGISTERED_PENSION_PLAN_RPP</li><li>TAX_FREE_SAVINGS_ACCOUNT_TFSA</li><li>LIFE_INCOME_FUND_LIF</li><li>REGISTERED_RETIREMENT_INCOME_FUND_RIF</li><li>SPOUSAL_RETIREMENT_INCOME_FUND_SRIF</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND_LRIF</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND_PRIF</li><li>GUARANTEED_INVESTMENT_CERTIFICATES_GIC</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN_RDSP</li><li>DEFINED_CONTRIBUTION_PLAN</li><li>DEFINED_BENEFIT_PLAN</li><li>EMPLOYEE_STOCK_OPTION_PLAN</li><li>NONQUALIFIED_DEFERRED_COMPENSATION_PLAN_409A</li><li>KEOGH_PLAN</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_ROTH_401K</li><li>DEFERRED_CONTINGENT_CAPITAL_PLAN_DCCP</li><li>EMPLOYEE_BENEFIT_PLAN</li><li>EMPLOYEE_SAVINGS_PLAN</li><li>HEALTH_SAVINGS_ACCOUNT_HSA</li><li>COVERDELL_EDUCATION_SAVINGS_ACCOUNT_ESA</li><li>TESTAMENTARY_TRUST</li><li>ESTATE</li><li>GRANTOR_RETAINED_ANNUITY_TRUST_GRAT</li><li>ADVISORY_ACCOUNT</li><li>NON_PROFIT_ORGANIZATION_501C</li><li>HEALTH_REIMBURSEMENT_ARRANGEMENT_HRA</li><li>INDIVIDUAL_SAVINGS_ACCOUNT_ISA</li><li>CASH_ISA</li><li>STOCKS_AND_SHARES_ISA</li><li>INNOVATIVE_FINANCE_ISA</li><li>JUNIOR_ISA</li><li>EMPLOYEES_PROVIDENT_FUND_ORGANIZATION_EPFO</li><li>PUBLIC_PROVIDENT_FUND_PPF</li><li>EMPLOYEES_PENSION_SCHEME_EPS</li><li>NATIONAL_PENSION_SYSTEM_NPS</li><li>INDEXED_ANNUITY</li><li>ANNUITIZED_ANNUITY</li><li>VARIABLE_ANNUITY</li><li>ROTH_403B</li><li>SPOUSAL_IRA</li><li>SPOUSAL_ROTH_IRA</li><li>SARSEP_IRA</li><li>SUBSTANTIALLY_EQUAL_PERIODIC_PAYMENTS_SEPP</li><li>OFFSHORE_TRUST</li><li>IRREVOCABLE_LIFE_INSURANCE_TRUST</li><li>INTERNATIONAL_TRUST</li><li>LIFE_INTEREST_TRUST</li><li>EMPLOYEE_BENEFIT_TRUST</li><li>PRECIOUS_METAL_ACCOUNT</li><li>INVESTMENT_LOAN_ACCOUNT</li><li>GRANTOR_RETAINED_INCOME_TRUST</li><li>PENSION_PLAN</li><li>OTHER</li></ul><b>loan</b><ul><li>MORTGAGE</li><li>INSTALLMENT_LOAN</li><li>PERSONAL_LOAN</li><li>HOME_EQUITY_LINE_OF_CREDIT</li><li>LINE_OF_CREDIT</li><li>AUTO_LOAN</li><li>STUDENT_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>AUTO_INSURANCE</li><li>HEALTH_INSURANCE</li><li>HOME_INSURANCE</li><li>LIFE_INSURANCE</li><li>ANNUITY</li><li>TRAVEL_INSURANCE</li><li>INSURANCE</li></ul><b>realEstate</b><ul> <li>REAL_ESTATE</li></ul><b>reward</b><ul><li>REWARD_POINTS</li></ul><b>Manual Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PREPAID</li></ul><b>credit</b><ul>  <li>CREDIT</li></ul><b>loan</b><ul>  <li>PERSONAL_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>INSURANCE</li><li>ANNUITY</li></ul><b>investment</b><ul><li>BROKERAGE_CASH</li></ul><br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public string AccountType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AccountAddress Address { get; set; }
		
		/// <summary>
		/// The source through which the account(s) are added in the system.<br><b>Valid Values</b>: SYSTEM, USER<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationSource")]
		public System.Nullable<AccountAggregationSource> AggregationSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountDue")]
		public Money AmountDue { get; set; }
		
		/// <summary>
		/// Annual percentage yield (APY) is a normalized representation of an interest rate, based on a compounding period of one year. APY generally refers to the rate paid to a depositor by a financial institution on an account.<br><b>Applicable containers</b>: bank<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annualPercentageYield")]
		public System.Nullable<System.Double> AnnualPercentageYield { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="annuityBalance")]
		public Money AnnuityBalance { get; set; }
		
		/// <summary>
		/// The annual percentage rate (APR) is the yearly rate of interest on the credit card account.<br><b>Additional Details:</b> The yearly percentage rate charged when a balance is held on a credit card. This rate of interest is applied every month on the outstanding credit card balance.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apr")]
		public System.Nullable<System.Double> Apr { get; set; }
		
		/// <summary>
		/// The providerAccountIds that share the account with the primary providerAccountId that was created when the user had added the account for the first time.<br><b>Additional Details</b>: This attribute is returned in the response only if the account deduplication feature is enabled and the same account is mapped to more than one provider account IDs indicating the account is owned by more than one user, for example, joint accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associatedProviderAccountId")]
		public int[] AssociatedProviderAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoRefresh")]
		public AutoRefresh AutoRefresh { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availableBalance")]
		public Money AvailableBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availableCash")]
		public Money AvailableCash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availableCredit")]
		public Money AvailableCredit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public Money Balance { get; set; }
		
		/// <summary>
		/// Bank and branch identification information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment, loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bankTransferCode")]
		public BankTransferCode[] BankTransferCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash")]
		public Money Cash { get; set; }
		
		/// <summary>
		/// Annual percentage rate applied to cash withdrawals on the card.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashApr")]
		public System.Nullable<System.Double> CashApr { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cashValue")]
		public Money CashValue { get; set; }
		
		/// <summary>
		/// The classification of the account such as personal, corporate, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, reward, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public System.Nullable<AccountClassification> Classification { get; set; }
		
		/// <summary>
		/// Property or possession offered to support a loan that can be seized on a default.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collateral")]
		public string Collateral { get; set; }
		
		/// <summary>
		/// The coverage-related details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage")]
		public Coverage[] Coverage { get; set; }
		
		/// <summary>
		/// The date on which the account is created in the Yodlee system.<br><b>Additional Details:</b> It is the date when the user links or aggregates the account(s) that are held with the provider to the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public string CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentBalance")]
		public Money CurrentBalance { get; set; }
		
		/// <summary>
		/// Current level of the reward program the user is associated with. E.g. Silver, Jade etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentLevel")]
		public string CurrentLevel { get; set; }
		
		/// <summary>
		/// Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public AccountDataset[] Dataset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deathBenefit")]
		public Money DeathBenefit { get; set; }
		
		/// <summary>
		/// Derived APR will be an estimated purchase APR based on consumers credit card transactions and credit card purchase.<br><b>Aggregated / Manual / Derived</b>: Derived<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="derivedApr")]
		public System.Nullable<System.Double> DerivedApr { get; set; }
		
		/// <summary>
		/// The name or identification of the account owner, as it appears at the FI site. <br><b>Note:</b> The account holder name can be full or partial based on how it is displayed in the account summary page of the FI site. In most cases, the FI site does not display the full account holder name in the account summary page.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan,  reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayedName")]
		public string DisplayedName { get; set; }
		
		/// <summary>
		/// The date on which the due amount has to be paid. <br><b>Additional Details:</b><br><b>Credit Card:</b> The monthly date by when the minimum payment is due to be paid on the credit card account. <br><b>Loan:</b> The date on or before which the due amount should be paid.<br><b>Note:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public string DueDate { get; set; }
		
		/// <summary>
		/// Date on which the user is enrolled on the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrollmentDate")]
		public string EnrollmentDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="escrowBalance")]
		public Money EscrowBalance { get; set; }
		
		/// <summary>
		/// The date on which the home value was estimated.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedDate")]
		public string EstimatedDate { get; set; }
		
		/// <summary>
		/// The date on which the insurance policy expires or matures.<br><b>Additional Details:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public string ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="faceAmount")]
		public Money FaceAmount { get; set; }
		
		/// <summary>
		/// The frequency of the billing cycle of the account in case of card. The frequency in which premiums are paid in an insurance policy such as monthly, quarterly, and annually. The frequency in which due amounts are paid in a loan  account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>:  creditCard, insurance, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public System.Nullable<AccountFrequency> Frequency { get; set; }
		
		/// <summary>
		/// Full account number of the account that is included only when include = fullAccountNumber is provided in the request. For student loan account the account number that will be used for ACH or fund transfer<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan, reward,  otherAssets, otherLiabilities <br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><b> Note : </b> fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.</ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fullAccountNumber")]
		public string FullAccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullAccountNumberList")]
		public FullAccountNumberList FullAccountNumberList { get; set; }
		
		/// <summary>
		/// A nonprofit or state organization that works with lender, servicer, school, and the Department of Education to help successfully repay Federal Family Education Loan Program (FFELP) loans. If FFELP student loans default, the guarantor takes ownership of them.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guarantor")]
		public string Guarantor { get; set; }
		
		/// <summary>
		/// Holder details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="holder")]
		public AccountHolder[] Holder { get; set; }
		
		/// <summary>
		/// Type of home insurance, like -<ul><li>HOME_OWNER</li><li>RENTAL</li><li>RENTER</li><li>etc..</li></ul><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeInsuranceType")]
		public System.Nullable<AccountHomeInsuranceType> HomeInsuranceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homeValue")]
		public Money HomeValue { get; set; }
		
		/// <summary>
		/// The primary key of the account resource and the unique identifier for the account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>GET investmentOptions</li><li>GET accounts/historicalBalances</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Used to determine  whether an account to be considered in the networth calculation.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank,creditCard,loan,investment,insurance,realEstate,otherAssets,otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeInNetWorth")]
		public System.Nullable<System.Boolean> IncludeInNetWorth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interestPaidLastYear")]
		public Money InterestPaidLastYear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interestPaidYTD")]
		public Money InterestPaidYTD { get; set; }
		
		/// <summary>
		/// <br><b>Bank:</b> The interest rate offered by a FI to its depositors on a bank account.<br><b>Loan:</b> Interest rate applied on the loan.<br><b>Additional Details:</b><br><b>Note:</b> The Interest Rate field is only applicable for the following account types: savings, checking, money market, and certificate of deposit.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interestRate")]
		public System.Nullable<System.Double> InterestRate { get; set; }
		
		/// <summary>
		/// The type of the interest rate, for example, fixed or variable.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interestRateType")]
		public System.Nullable<AccountInterestRateType> InterestRateType { get; set; }
		
		/// <summary>
		/// The account to be considered as an asset or liability.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAsset")]
		public System.Nullable<System.Boolean> IsAsset { get; set; }
		
		/// <summary>
		/// Indicates if an account is aggregated from a site or it is a manual account i.e. account information manually provided by the user.<br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isManual")]
		public System.Nullable<System.Boolean> IsManual { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastEmployeeContributionAmount")]
		public Money LastEmployeeContributionAmount { get; set; }
		
		/// <summary>
		/// The date on which the last employee contribution was made to the 401k account.<br><b>Note:</b> The last employee contribution date field is derived from the transaction data and not aggregated from the FI site. The field is only applicable to the 401k account type.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastEmployeeContributionDate")]
		public string LastEmployeeContributionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastPayment")]
		public Money LastPayment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastPaymentAmount")]
		public Money LastPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the payment for the previous or current billing cycle is done.<br><b>Additional Details:</b> If the payment is already done for the current billing cycle, then the field indicates the payment date of the current billing cycle. If payment is yet to be done for the current billing cycle, then the field indicates the date on which the payment was made for any of the previous billing cycles. The last payment date at the account-level can differ from the last payment date at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastPaymentDate")]
		public string LastPaymentDate { get; set; }
		
		/// <summary>
		/// The date time the account information was last retrieved from the provider site and updated in the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// The financial institution that provides the loan.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lender")]
		public string Lender { get; set; }
		
		/// <summary>
		/// Type of life insurance.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifeInsuranceType")]
		public System.Nullable<AccountLifeInsuranceType> LifeInsuranceType { get; set; }
		
		/// <summary>
		/// The date by which the payoff amount should be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loanPayByDate")]
		public string LoanPayByDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loanPayoffAmount")]
		public Money LoanPayoffAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loanPayoffDetails")]
		public LoanPayoffDetails LoanPayoffDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marginBalance")]
		public Money MarginBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maturityAmount")]
		public Money MaturityAmount { get; set; }
		
		/// <summary>
		/// The date when a certificate of deposit (CD/FD) matures or the final payment date of a loan at which point the principal amount (including pending interest) is due to be paid.<br><b>Additional Details:</b> The date when a certificate of deposit (CD) matures, i.e., the money in the CD can be withdrawn without paying an early withdrawal penalty.The final payment date of a loan, i.e., the principal amount (including pending interest) is due to be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maturityDate")]
		public string MaturityDate { get; set; }
		
		/// <summary>
		/// The additional description or notes given by the user.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo")]
		public string Memo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimumAmountDue")]
		public Money MinimumAmountDue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moneyMarketBalance")]
		public Money MoneyMarketBalance { get; set; }
		
		/// <summary>
		/// The eligible next level of the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLevel")]
		public string NextLevel { get; set; }
		
		/// <summary>
		/// The nickname of the account as provided by the consumer to identify an account. The account nickname can be used instead of the account name.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		/// <summary>
		/// Indicates the migration status of the account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthMigrationStatus")]
		public System.Nullable<AccountOauthMigrationStatus> OauthMigrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalLoanAmount")]
		public Money OriginalLoanAmount { get; set; }
		
		/// <summary>
		/// The date on which the loan is disbursed.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originationDate")]
		public string OriginationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overDraftLimit")]
		public Money OverDraftLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentProfile")]
		public PaymentProfile PaymentProfile { get; set; }
		
		/// <summary>
		/// The date on which the insurance policy coverage commences.<br><b>Applicable containers</b>: insurance<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyEffectiveDate")]
		public string PolicyEffectiveDate { get; set; }
		
		/// <summary>
		/// The date the insurance policy began.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyFromDate")]
		public string PolicyFromDate { get; set; }
		
		/// <summary>
		/// The status of the policy.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyStatus")]
		public System.Nullable<AccountPolicyStatus> PolicyStatus { get; set; }
		
		/// <summary>
		/// The duration for which the policy is valid or in effect. For example, one year, five years, etc.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyTerm")]
		public string PolicyTerm { get; set; }
		
		/// <summary>
		/// The date to which the policy exists.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyToDate")]
		public string PolicyToDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="premium")]
		public Money Premium { get; set; }
		
		/// <summary>
		/// The number of years for which premium payments have to be made in a policy.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="premiumPaymentTerm")]
		public string PremiumPaymentTerm { get; set; }
		
		/// <summary>
		/// Primary reward unit for this reward program. E.g. miles, points, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryRewardUnit")]
		public string PrimaryRewardUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principalBalance")]
		public Money PrincipalBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public AccountProfile Profile { get; set; }
		
		/// <summary>
		/// The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerAccountId")]
		public System.Nullable<System.Int64> ProviderAccountId { get; set; }
		
		/// <summary>
		/// Identifier of the provider site. The primary key of provider resource. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
		
		/// <summary>
		/// Service provider or institution name where the account originates. This belongs to the provider resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerName")]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurringPayment")]
		public Money RecurringPayment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remainingBalance")]
		public Money RemainingBalance { get; set; }
		
		/// <summary>
		/// The type of repayment plan that the borrower prefers to repay the loan. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repaymentPlanType")]
		public System.Nullable<AccountRepaymentPlanType> RepaymentPlanType { get; set; }
		
		/// <summary>
		/// Information of different reward balances associated with the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardBalance")]
		public RewardBalance[] RewardBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runningBalance")]
		public Money RunningBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shortBalance")]
		public Money ShortBalance { get; set; }
		
		/// <summary>
		/// Indicates the status of the loan account. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceAccountStatus")]
		public System.Nullable<AccountSourceAccountStatus> SourceAccountStatus { get; set; }
		
		/// <summary>
		/// A unique ID that the provider site has assigned to the account. The source ID is only available for the HELD accounts.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan,  reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceId")]
		public string SourceId { get; set; }
		
		/// <summary>
		/// The tenure for which the CD account is valid  or in case of loan, the number of years/months over which the loan amount  has to be repaid. <br><b>Additional Details:</b><br>  Bank: The Term field is only applicable for the account type CD.Loan: The period for which the loan agreement is in force. The period, before or at the end of which, the loan should either be repaid or renegotiated for another term.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCashLimit")]
		public Money TotalCashLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCreditLimit")]
		public Money TotalCreditLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCreditLine")]
		public Money TotalCreditLine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalUnvestedBalance")]
		public Money TotalUnvestedBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalVestedBalance")]
		public Money TotalVestedBalance { get; set; }
		
		/// <summary>
		/// <b>Applicable containers</b>: reward, bank, creditCard, investment, loan, insurance, realEstate,  otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>POST accounts</ul><li>GET dataExtracts/userData</li><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userClassification")]
		public System.Nullable<AccountUserClassification> UserClassification { get; set; }
		
		/// <summary>
		/// The valuation type indicates whether the home value is calculated either manually or by Yodlee Partners.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valuationType")]
		public System.Nullable<AccountValuationType> ValuationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Money
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public MoneyCurrency Currency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MoneyCurrency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BRL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GBP = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HKD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IDR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JPY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NZD = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SGD = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USD = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZAR = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CNY = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VND = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MYR = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHF = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountCONTAINER
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bank = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		creditCard = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		investment = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		insurance = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		loan = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reward = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		realEstate = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		otherAssets = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		otherLiabilities = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountAccountStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TO_BE_CLOSED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="address1")]
		public string Address1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address3")]
		public string Address3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AccountAddressType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountAddressType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POBOX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETAIL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFICE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMALL_BUSINESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMUNICATION = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMANENT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATEMENT_ADDRESS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYOFF = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountAggregationSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoRefresh
	{
		
		/// <summary>
		/// Indicates the reason for the status.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalStatus")]
		public System.Nullable<AutoRefreshAdditionalStatus> AdditionalStatus { get; set; }
		
		/// <summary>
		/// Date on which the auto refresh status is determined.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asOfDate")]
		public string AsOfDate { get; set; }
		
		/// <summary>
		/// Indicates whether auto refresh is enabled or disabled.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<AutoRefreshStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutoRefreshAdditionalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEMP_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SITE_BLOCKING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SITE_NOT_SUPPORTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REAL_TIME_MFA_REQUIRED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_ACTION_REQUIRED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUBSCRIBED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL_ACCOUNT = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutoRefreshStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BankTransferCode
	{
		
		/// <summary>
		/// The FI's branch identification number.Additional Details: The routing number of the bank account in the United States. For non-United States accounts, it is the IFSC code (India), BSB number (Australia), and sort code (United Kingdom). <br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The bank transfer code type varies depending on the region of the account origination. <br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST verification</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<BankTransferCodeType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BankTransferCodeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BSB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IFSC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUTING_NUMBER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SORT_CODE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountClassification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CORPORATE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMALL_BUSINESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRUST = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADD_ON_CARD = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIRTUAL_CARD = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Coverage
	{
		
		/// <summary>
		/// The coverage amount-related details.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public CoverageAmount[] Amount { get; set; }
		
		/// <summary>
		/// The date on which the coverage for the account ends or expires.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// The plan type for an insurance provided to an individual or an entity.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="planType")]
		public System.Nullable<CoveragePlanType> PlanType { get; set; }
		
		/// <summary>
		/// The date on which the coverage for the account starts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		/// <summary>
		/// The type of coverage provided to an individual or an entity.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CoverageType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CoverageAmount
	{
		
		[System.Runtime.Serialization.DataMember(Name="cover")]
		public Money Cover { get; set; }
		
		/// <summary>
		/// The type of coverage limit indicates if the coverage is in-network or out-of-network.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitType")]
		public System.Nullable<CoverageAmountLimitType> LimitType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="met")]
		public Money Met { get; set; }
		
		/// <summary>
		/// The type of coverage provided to an individual or an entity.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CoverageAmountType> Type { get; set; }
		
		/// <summary>
		/// The type of coverage unit indicates if the coverage is for an individual or a family.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values:</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitType")]
		public System.Nullable<CoverageAmountUnitType> UnitType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CoverageAmountLimitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_NETWORK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUT_NETWORK = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CoverageAmountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEDUCTIBLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUT_OF_POCKET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNUAL_BENEFIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX_BENEFIT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COVERAGE_AMOUNT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY_BENEFIT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CoverageAmountUnitType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PER_FAMILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PER_MEMBER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CoveragePlanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PPO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HMO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CoverageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VISION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DENTAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDICAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEALTH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEATH_COVER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOTAL_PERMANENT_DISABILITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCIDENTAL_DEATH_COVER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOME_PROTECTION = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEATH_TOTAL_PERMANENT_DISABILITY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountDataset
	{
		
		/// <summary>
		/// The status of last update attempted for the dataset. <br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalStatus")]
		public System.Nullable<AccountDatasetAdditionalStatus> AdditionalStatus { get; set; }
		
		/// <summary>
		/// Indicate when the last attempt was performed to update the dataset for the given provider account<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateAttempt")]
		public string LastUpdateAttempt { get; set; }
		
		/// <summary>
		/// Indicate when the dataset is last updated successfully for the given provider account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// The name of the dataset requested from the provider site<br><br><b>Account Type</b>: Manual<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public System.Nullable<AccountDatasetName> Name { get; set; }
		
		/// <summary>
		/// Indicates when the next attempt to update the dataset is scheduled.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextUpdateScheduled")]
		public string NextUpdateScheduled { get; set; }
		
		/// <summary>
		/// Indicate whether the dataset is eligible for update or not.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateEligibility")]
		public System.Nullable<AccountDatasetUpdateEligibility> UpdateEligibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountDatasetAdditionalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOGIN_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_RETRIEVAL_IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCT_SUMMARY_RECEIVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVAILABLE_DATA_RETRIEVED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL_DATA_RETRIEVED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_RETRIEVAL_FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_NOT_AVAILABLE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_LOCKED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADDL_AUTHENTICATION_REQUIRED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETA_SITE_DEV_IN_PROGRESS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDENTIALS_UPDATE_NEEDED = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCORRECT_CREDENTIALS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROPERTY_VALUE_NOT_AVAILABLE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVALID_ADDL_INFO_PROVIDED = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_TIME_OUT = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SITE_BLOCKING_ERROR = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNEXPECTED_SITE_ERROR = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SITE_NOT_SUPPORTED = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SITE_UNAVAILABLE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TECH_ERROR = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_ACTION_NEEDED_AT_SITE = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SITE_SESSION_INVALIDATED = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEW_AUTHENTICATION_REQUIRED = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATASET_NOT_SUPPORTED = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENROLLMENT_REQUIRED_FOR_DATASET = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSENT_REQUIRED = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSENT_EXPIRED = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSENT_REVOKED = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCORRECT_OAUTH_TOKEN = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIGRATION_IN_PROGRESS = 29,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountDatasetName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC_AGG_DATA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADVANCE_AGG_DATA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCT_PROFILE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountDatasetUpdateEligibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_UPDATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALLOW_UPDATE_WITH_CREDENTIALS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISALLOW_UPDATE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_TIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVERY_2_WEEKS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEMI_MONTHLY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUARTERLY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEMI_ANNUALLY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNUALLY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVERY_2_MONTHS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBILL = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST_DAY_MONTHLY = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_DAY_MONTHLY = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVERY_4_WEEKS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 15,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FullAccountNumberList
	{
		
		/// <summary>
		/// Payment Account Number of given account.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentAccountNumber")]
		public string PaymentAccountNumber { get; set; }
		
		/// <summary>
		/// Unmasked account number of given account.<br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unmaskedAccountNumber")]
		public string UnmaskedAccountNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountHolder
	{
		
		/// <summary>
		/// Identifiers of the account holder.<br><br><b>Aggregated / Manual</b>: Aggregated <br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		/// <summary>
		/// Identifiers of the account holder.<br><br><b>Aggregated / Manual</b>: Aggregated <br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public Identifier[] Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Name Name { get; set; }
		
		/// <summary>
		/// Indicates the ownership of the account.<br><br><b>Aggregated / Manual</b>: Aggregated <br><b>Applicable containers</b>: bank<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownership")]
		public System.Nullable<AccountHolderOwnership> Ownership { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Identifier
	{
		
		/// <summary>
		/// Type of Identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<IdentifierType> Type { get; set; }
		
		/// <summary>
		/// Value of the identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IdentifierType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NIE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DNI = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EIN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AADHAR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NIN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NRIC = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Name
	{
		
		[System.Runtime.Serialization.DataMember(Name="first")]
		public string First { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullName")]
		public string FullName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last")]
		public string Last { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="middle")]
		public string Middle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountHolderOwnership
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIMARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDARY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTODIAN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHERS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POWER_OF_ATTORNEY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRUSTEE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JOINT_OWNER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BENEFICIARY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AAS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DBA = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRUST = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountHomeInsuranceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOME_OWNER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RENTAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RENTER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountInterestRateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountLifeInsuranceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERM_LIFE_INSURANCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIVERSAL_LIFE_INSURANCE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WHOLE_LIFE_INSURANCE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARIABLE_LIFE_INSURANCE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ULIP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENDOWMENT = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoanPayoffDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="outstandingBalance")]
		public Money OutstandingBalance { get; set; }
		
		/// <summary>
		/// The date by which the payoff amount should be paid.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payByDate")]
		public string PayByDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="payoffAmount")]
		public Money PayoffAmount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountOauthMigrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TO_BE_MIGRATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PaymentProfile
	{
		
		/// <summary>
		/// The address of the lender to which the monthly payments or the loan payoff amount should be paid. <br><b>Additional Details:</b>The address field applies only to the student loan account type.<br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AccountAddress[] Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public PaymentIdentifier Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentBankTransferCode")]
		public PaymentBankTransferCode PaymentBankTransferCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PaymentIdentifier
	{
		
		/// <summary>
		/// Type of Identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PaymentIdentifierType> Type { get; set; }
		
		/// <summary>
		/// Value of the identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PaymentIdentifierType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFERENCE_NUMBER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM_CODE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PaymentBankTransferCode
	{
		
		/// <summary>
		/// Value of the identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Type of BankTransferCode
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PaymentBankTransferCodeType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PaymentBankTransferCodeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROUTING_NUMBER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BSB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IFSC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SORT_CODE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountPolicyStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountProfile
	{
		
		/// <summary>
		/// Address available in the profile page of the account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AccountAddress[] Address { get; set; }
		
		/// <summary>
		/// Email Id available in the profile page of the account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public Email[] Email { get; set; }
		
		/// <summary>
		/// Identifiers available in the profile page of the account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public Identifier[] Identifier { get; set; }
		
		/// <summary>
		/// Phone number available in the profile page of the account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public PhoneNumber[] PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Email
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<EmailType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmailType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIMARY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECONDARY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHERS = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PhoneNumber
	{
		
		/// <summary>
		/// type of phone number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<PhoneNumberType> Type { get; set; }
		
		/// <summary>
		/// Phone Number
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PhoneNumberType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOME = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LANDLINE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOBILE = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountRepaymentPlanType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRADUATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTENDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOME_BASED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOME_CONTINGENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOME_SENSITIVE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAY_AS_YOU_EARN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVISED_PAY_AS_YOU_EARN = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RewardBalance
	{
		
		/// <summary>
		/// The actual reward balance.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Double> Balance { get; set; }
		
		/// <summary>
		/// The balance required to reach a reward level.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balanceToLevel")]
		public string BalanceToLevel { get; set; }
		
		/// <summary>
		/// The balance required to qualify for a reward such as retaining membership, business reward, etc.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balanceToReward")]
		public string BalanceToReward { get; set; }
		
		/// <summary>
		/// The type of reward balance.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="balanceType")]
		public System.Nullable<RewardBalanceBalanceType> BalanceType { get; set; }
		
		/// <summary>
		/// The description for the reward balance as available at provider source.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The date on which the balance expires.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiryDate")]
		public string ExpiryDate { get; set; }
		
		/// <summary>
		/// Unit of reward balance - miles, points, segments, dollars, credits.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RewardBalanceBalanceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRING_BALANCE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BALANCE_TO_LEVEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BALANCE_TO_REWARD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BALANCE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOTAL_BALANCE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountSourceAccountStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_REPAYMENT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_SCHOOL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_GRACE_PERIOD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELINQUENCY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFERMENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORBEARANCE = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountUserClassification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AccountValuationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYSTEM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountHistoricalBalancesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public AccountHistory[] Account { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountHistory
	{
		
		[System.Runtime.Serialization.DataMember(Name="historicalBalances")]
		public HistoricalBalance[] HistoricalBalances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HistoricalBalance
	{
		
		/// <summary>
		/// Date as of when the balance is last updated due to the auto account updates or user triggered updates. This balance will be carry forward for the days where there is no balance available in the system. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asOfDate")]
		public string AsOfDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public Money Balance { get; set; }
		
		/// <summary>
		/// The source of balance information.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceType")]
		public System.Nullable<HistoricalBalanceDataSourceType> DataSourceType { get; set; }
		
		/// <summary>
		/// Date for which the account balance was provided.  This balance could be a carryforward, calculated or a scraped balance.<br><b>Additional Details</b>:<br><b>Scraped</b>: Balance shown in the provider site. This balance gets stored in Yodlee system during system/user account updates.<br><b>CarryForward</b>: Balance carried forward from the scraped balance to the days for which the balance was not available in the system. Balance may not be available for all the days in the system due to MFA information required, error in the site, credential changes, etc.<br><b>calculated</b>: Balances that gets calculated for the days that are prior to the account added date.  <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li><li>GET derived/networth</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Indicates whether the balance is an asset or liability.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAsset")]
		public System.Nullable<System.Boolean> IsAsset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HistoricalBalanceDataSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		S = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		C = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CF = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public Account[] Account { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiKeyOutput
	{
		
		/// <summary>
		/// The date on which the apiKey was created for the customer.<br><br><b>Endpoints</b>:<ul><li>GET /auth/apiKey</li><li>POST /auth/apiKey</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public string CreatedDate { get; set; }
		
		/// <summary>
		/// Time in seconds after which the JWT token created for users expires.<br><br><b>Endpoints</b>:<ul><li>GET /auth/apiKey</li><li>POST /auth/apiKey</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresIn")]
		public System.Nullable<System.Int64> ExpiresIn { get; set; }
		
		/// <summary>
		/// ApiKey or the issuer key used to generate the JWT token for authentication.<br><br><b>Endpoints</b>:<ul><li>GET /auth/apiKey</li><li>POST /auth/apiKey</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Public key uploaded by the customer while generating ApiKey.<br><br><b>Endpoints</b>:<ul><li>GET /auth/apiKey</li><li>POST /auth/apiKey</li></ul>
		/// Min length: 1
		/// Max length: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
		public string PublicKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiKeyRequest
	{
		
		/// <summary>
		/// Public key uploaded by the customer while generating ApiKey.<br><br><b>Endpoints</b>:<ul><li>GET /auth/apiKey</li><li>POST /auth/apiKey</li></ul>
		/// Min length: 1
		/// Max length: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
		public string PublicKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApiKeyResponse
	{
		
		/// <summary>
		/// ApiKey customer details.<br><br><b>Endpoints</b>:<ul><li>GET /auth/apiKey</li><li>POST /auth/apiKey</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apiKey")]
		public ApiKeyOutput[] ApiKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssetClassification
	{
		
		/// <summary>
		/// The allocation percentage of the holding.<br><br><b>Required Feature Enablement</b>: Asset classification feature<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allocation")]
		public System.Nullable<System.Double> Allocation { get; set; }
		
		/// <summary>
		/// The type of classification to which the investment belongs (assetClass, country, sector, and style).<br><b>Required Feature Enablement</b>: Asset classification feature<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classificationType")]
		public string ClassificationType { get; set; }
		
		/// <summary>
		/// The value for each classificationType.<br><b>Required Feature Enablement</b>: Asset classification feature<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classificationValue")]
		public string ClassificationValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssetClassificationList
	{
		
		/// <summary>
		/// The type of classification to which the investment belongs (assetClass, country, sector, and style).<br><b>Required Feature Enablement</b>: Asset classification feature<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classificationType")]
		public string ClassificationType { get; set; }
		
		/// <summary>
		/// The value for each classificationType.<br><b>Required Feature Enablement</b>: Asset classification feature<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classificationValue")]
		public string[] ClassificationValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Attribute
	{
		
		/// <summary>
		/// Containers for which the attributes are supported.<br><br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="container")]
		public AccountCONTAINER[] Container { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="containerAttributes")]
		public ContainerAttributes ContainerAttributes { get; set; }
		
		/// <summary>
		/// Applicable only to EBILLS and STATEMENTS attributes of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromDate")]
		public string FromDate { get; set; }
		
		/// <summary>
		/// Applicable only to TAX attribute of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fromFinYear")]
		public string FromFinYear { get; set; }
		
		/// <summary>
		/// Attributes that are supported for a dataset.<br><br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public System.Nullable<AttributeName> Name { get; set; }
		
		/// <summary>
		/// Applicable only to EBILLS and STATEMENTS attributes of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toDate")]
		public string ToDate { get; set; }
		
		/// <summary>
		/// Applicable only to TAX attribute of DOCUMENT dataset.<br><br><b>Endpoints</b>:<ul><li>POST providerAccounts</li><li>PUT providerAccounts</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="toFinYear")]
		public string ToFinYear { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContainerAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransactionDays BANK { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransactionDays CREDITCARD { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransactionDays INSURANCE { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransactionDays INVESTMENT { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TransactionDays LOAN { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionDays
	{
		
		[System.Runtime.Serialization.DataMember(Name="fullAccountNumberFields")]
		public string[] FullAccountNumberFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfTransactionDays")]
		public System.Nullable<System.Int32> NumberOfTransactionDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AttributeName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC_ACCOUNT_INFO = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSACTIONS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATEMENTS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOLDINGS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_DETAILS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBILLS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL_ACCT_NUMBER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK_TRANSFER_CODE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOLDER_NAME = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOLDER_DETAILS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT_PROFILE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT_DETAILS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEREST_DETAILS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COVERAGE = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Capability
	{
		
		[System.Runtime.Serialization.DataMember(Name="container")]
		public AccountCONTAINER[] Container { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClientCredentialToken
	{
		
		/// <summary>
		/// Access Token to access YSL 1.1 services.<br><br><b>Endpoints</b>:<ul><li>POST /auth/token</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Time in seconds after which the issued accessToken expires.<br><br><b>Endpoints</b>:<ul><li>POST /auth/token</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresIn")]
		public System.Nullable<System.Int32> ExpiresIn { get; set; }
		
		/// <summary>
		/// The date and time on which accessToken was created for the customer.<br><br><b>Endpoints</b>:<ul><li>POST /auth/token</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issuedAt")]
		public string IssuedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClientCredentialTokenResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public ClientCredentialToken Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Cobrand
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 2147483647
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cobrandLogin")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
		public string CobrandLogin { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 2147483647
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cobrandPassword")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
		public string CobrandPassword { get; set; }
		
		/// <summary>
		/// The customer's locale that will be considered for the localization functionality.<br><br><b>Endpoints</b>:<ul><li>POST cobrand/login</li></ul>
		/// Pattern: [a-z]{2}_[A-Z]{2}
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-z]{2}_[A-Z]{2}")]
		public string Locale { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CobrandLoginRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cobrand")]
		public Cobrand Cobrand { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CobrandLoginResponse
	{
		
		/// <summary>
		/// The application identifier.<br><br><b>Endpoints</b>:<ul><li>POST cobrand/login</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationId")]
		public string ApplicationId { get; set; }
		
		/// <summary>
		/// Unique identifier of the cobrand (customer) in the system.<br><br><b>Endpoints</b>:<ul><li>POST cobrand/login</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cobrandId")]
		public System.Nullable<System.Int64> CobrandId { get; set; }
		
		/// <summary>
		/// The customer's locale that will be considered for the localization functionality.<br><br><b>Endpoints</b>:<ul><li>POST cobrand/login</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="session")]
		public CobrandSession Session { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CobrandSession
	{
		
		[System.Runtime.Serialization.DataMember(Name="cobSession")]
		public string CobSession { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CobrandNotificationEvent
	{
		
		/// <summary>
		/// URL to which the notification should be posted.<br><br><b>Endpoints</b>:<ul><li>GET cobrand/config/notifications/events</li></ul>
		/// Min length: 1
		/// Max length: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callbackUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
		public string CallbackUrl { get; set; }
		
		/// <summary>
		/// Name of the event for which the customers must subscribe to receive notifications.<br><b>Valid Value:</b> Notification Events Name<br><br><b>Endpoints</b>:<ul><li>GET cobrand/config/notifications/events</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public System.Nullable<CobrandNotificationEventName> Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CobrandNotificationEventName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFRESH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_UPDATES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO_REFRESH_UPDATES = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CobrandNotificationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="event")]
		public CobrandNotificationEvent[] Event { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CobrandPublicKeyResponse
	{
		
		/// <summary>
		/// The key name used for encryption.<br><br><b>Endpoints</b>:<ul><li>GET cobrand/publicKey</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyAlias")]
		public string KeyAlias { get; set; }
		
		/// <summary>
		/// Public key that the customer should be using to encrypt the credentials and answers before sending to the add & update providerAccounts APIs.<br><br><b>Endpoints</b>:<ul><li>GET cobrand/publicKey</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyAsPemString")]
		public string KeyAsPemString { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigsNotificationEvent
	{
		
		/// <summary>
		/// URL to which the notification should be posted.<br><br><b>Endpoints</b>:<ul><li>GET configs/notifications/events</li></ul>
		/// Min length: 1
		/// Max length: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callbackUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
		public string CallbackUrl { get; set; }
		
		/// <summary>
		/// Name of the event for which the customers must subscribe to receive notifications.<br><b>Valid Value:</b> Notification Events Name<br><br><b>Endpoints</b>:<ul><li>GET configs/notifications/events</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public CobrandNotificationEventName Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigsNotificationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="event")]
		public ConfigsNotificationEvent[] Event { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigsPublicKey
	{
		
		/// <summary>
		/// The key name used for encryption.<br><br><b>Endpoints</b>:<ul><li>GET configs/publicKey</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// Public key that the customer should be using to encrypt the credentials and answers before sending to the add and update providerAccounts APIs.<br><br><b>Endpoints</b>:<ul><li>GET configs/publicKey</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConfigsPublicKeyResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="publicKey")]
		public ConfigsPublicKey PublicKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Contact
	{
		
		/// <summary>
		/// Email Id of the merchant<br><br><b>Applicable containers</b>: bank,creditCard,investment,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Phone number of the merchant<br><br><b>Applicable containers</b>: bank,creditCard,investment,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Coordinates
	{
		
		/// <summary>
		/// Latitude of the merchant<br><br><b>Applicable containers</b>: bank,creditCard,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// Longitude of the merchant<br><br><b>Applicable containers</b>: bank,creditCard,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAccountInfo
	{
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 100
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 100
		/// Pattern: ^[a-zA-Z0-9]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9]+$")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 1
		/// Max length: 2147483647
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
		public string AccountType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AccountAddress Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountDue")]
		public Money AmountDue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public Money Balance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public string DueDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public AccountFrequency Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homeValue")]
		public Money HomeValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeInNetWorth")]
		public string IncludeInNetWorth { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Memo { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Nickname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valuationType")]
		public AccountValuationType ValuationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAccountRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account")]
		public CreateAccountInfo Account { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCobrandNotificationEvent
	{
		
		/// <summary>
		/// URL to which the notification should be posted.<br><br><b>Endpoints</b>:<ul><li>GET cobrand/config/notifications/events</li></ul>
		/// Min length: 1
		/// Max length: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callbackUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
		public string CallbackUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateCobrandNotificationEventRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event")]
		public CreateCobrandNotificationEvent Event { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateConfigsNotificationEvent
	{
		
		/// <summary>
		/// URL to which the notification should be posted.<br><br><b>Endpoints</b>:<ul><li>GET configs/notifications/events</li></ul>
		/// Min length: 1
		/// Max length: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callbackUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
		public string CallbackUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateConfigsNotificationEventRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event")]
		public CreateConfigsNotificationEvent Event { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatedAccountInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreatedAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public CreatedAccountInfo[] Account { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataExtractsAccount
	{
		
		[System.Runtime.Serialization.DataMember(Name="401kLoan")]
		public Money _401kLoan { get; set; }
		
		/// <summary>
		/// The type of service. E.g., Bank, Credit Card, Investment, Insurance, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountCONTAINER CONTAINER { get; set; }
		
		/// <summary>
		/// The account name as it appears at the site.<br>(The POST accounts service response return this field as name)<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// The account number as it appears on the site. (The POST accounts service response return this field as number)<br><b>Additional Details</b>:<b> Bank/ Loan/ Insurance/ Investment</b>:<br> The account number for the bank account as it appears at the site.<br><b>Credit Card</b>: The account number of the card account as it appears at the site,<br>i.e., the card number.The account number can be full or partial based on how it is displayed in the account summary page of the site.In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The status of the account that is updated by the consumer through an application or an API. Valid Values: AccountStatus<br><b>Additional Details:</b><br><b>ACTIVE:</b> All the added manual and aggregated accounts status will be made "ACTIVE" by default. <br><b>TO_BE_CLOSED:</b> If the aggregated accounts are not found or closed in the data provider site, Yodlee system marks the status as TO_BE_CLOSED<br><b>INACTIVE:</b> Users can update the status as INACTIVE to stop updating and to stop considering the account in other services<br><b>CLOSED:</b> Users can update the status as CLOSED, if the account is closed with the provider. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountStatus")]
		public AccountAccountStatus AccountStatus { get; set; }
		
		/// <summary>
		/// The type of account that is aggregated, i.e., savings, checking, credit card, charge, HELOC, etc. The account type is derived based on the attributes of the account. <br><b>Valid Values:</b><br><b>Aggregated Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PPF</li><li>RECURRING_DEPOSIT</li><li>FSA</li><li>MONEY_MARKET</li><li>IRA</li><li>PREPAID</li></ul><b>creditCard</b><ul><li>OTHER</li><li>CREDIT</li><li>STORE</li><li>CHARGE</li><li>OTHER</li></ul><b>investment (SN 1.0)</b><ul><li>BROKERAGE_MARGIN</li><li>HSA</li><li>IRA</li><li>BROKERAGE_CASH</li><li>401K</li><li>403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE</li><li>CUSTODIAL</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE</li><li>JTTIC</li><li>JTWROS</li><li>COMMUNITY_PROPERTY</li><li>JOINT_BY_ENTIRETY</li><li>CONSERVATORSHIP</li><li>ROTH</li><li>ROTH_CONVERSION</li><li>ROLLOVER</li><li>EDUCATIONAL</li><li>529_PLAN</li><li>457_DEFERRED_COMPENSATION</li><li>401A</li><li>PSP</li><li>MPP</li><li>STOCK_BASKET</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER</li><li>CHARITABLE_LEAD</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP</li><li>UTMA</li><li>UGMA</li><li>ESOPP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>SOLE_PROPRIETORSHIP</li><li>CHURCH</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CMA</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET</li><li>SUPER_ANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN</li><li>DEFERRED_PROFIT_SHARING_PLAN</li><li>NON_REGISTERED_SAVINGS_PLAN</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN</li><li>GROUP_RETIREMENT_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_ACCOUNT</li><li>REGISTERED_PENSION_PLAN</li><li>TAX_FREE_SAVINGS_ACCOUNT</li><li>LIFE_INCOME_FUND</li><li>REGISTERED_RETIREMENT_INCOME_FUND</li><li>SPOUSAL_RETIREMENT_INCOME_FUND</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND</li><li>GUARANTEED_INVESTMENT_CERTIFICATES</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN</li><li>OTHER</li></ul><b>investment (SN 2.0)</b><ul><li>BROKERAGE_CASH</li><li>BROKERAGE_MARGIN</li><li>INDIVIDUAL_RETIREMENT_ACCOUNT_IRA</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_401K</li><li>EMPLOYEE_RETIREMENT_SAVINGS_PLAN_403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE_IRA</li><li>CUSTODIAL_ACCOUNT</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE_INVESTMENT_ACCOUNT</li><li>JOINT_TENANTS_TENANCY_IN_COMMON_JTIC</li><li>JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP_JTWROS</li><li>JOINT_TENANTS_COMMUNITY_PROPERTY</li><li>JOINT_TENANTS_TENANTS_BY_ENTIRETY</li><li>CONSERVATOR</li><li>ROTH_IRA</li><li>ROTH_CONVERSION</li><li>ROLLOVER_IRA</li><li>EDUCATIONAL</li><li>EDUCATIONAL_SAVINGS_PLAN_529</li><li>DEFERRED_COMPENSATION_PLAN_457</li><li>MONEY_PURCHASE_RETIREMENT_PLAN_401A</li><li>PROFIT_SHARING_PLAN</li><li>MONEY_PURCHASE_PLAN</li><li>STOCK_BASKET_ACCOUNT</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER_TRUST</li><li>CHARITABLE_LEAD_TRUST</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP_IRA</li><li>UNIFORM_TRANSFER_TO_MINORS_ACT_UTMA</li><li>UNIFORM_GIFT_TO_MINORS_ACT_UGMA</li><li>EMPLOYEE_STOCK_OWNERSHIP_PLAN_ESOP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>PROPRIETORSHIP</li><li>CHURCH_ACCOUNT</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CASH_MANAGEMENT_ACCOUNT</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN_ESPP</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET_ACCOUNT</li><li>SUPERANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN_RRSP</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN_SRSP</li><li>DEFERRED_PROFIT_SHARING_PLAN_DPSP</li><li>NON_REGISTERED_SAVINGS_PLAN_NRSP</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN_RESP</li><li>GROUP_RETIREMENT_SAVINGS_PLAN_GRSP</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN_LRSP</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN_RLSP</li><li>LOCKED_IN_RETIREMENT_ACCOUNT_LIRA</li><li>REGISTERED_PENSION_PLAN_RPP</li><li>TAX_FREE_SAVINGS_ACCOUNT_TFSA</li><li>LIFE_INCOME_FUND_LIF</li><li>REGISTERED_RETIREMENT_INCOME_FUND_RIF</li><li>SPOUSAL_RETIREMENT_INCOME_FUND_SRIF</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND_LRIF</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND_PRIF</li><li>GUARANTEED_INVESTMENT_CERTIFICATES_GIC</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN_RDSP</li><li>DEFINED_CONTRIBUTION_PLAN</li><li>DEFINED_BENEFIT_PLAN</li><li>EMPLOYEE_STOCK_OPTION_PLAN</li><li>NONQUALIFIED_DEFERRED_COMPENSATION_PLAN_409A</li><li>KEOGH_PLAN</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_ROTH_401K</li><li>DEFERRED_CONTINGENT_CAPITAL_PLAN_DCCP</li><li>EMPLOYEE_BENEFIT_PLAN</li><li>EMPLOYEE_SAVINGS_PLAN</li><li>HEALTH_SAVINGS_ACCOUNT_HSA</li><li>COVERDELL_EDUCATION_SAVINGS_ACCOUNT_ESA</li><li>TESTAMENTARY_TRUST</li><li>ESTATE</li><li>GRANTOR_RETAINED_ANNUITY_TRUST_GRAT</li><li>ADVISORY_ACCOUNT</li><li>NON_PROFIT_ORGANIZATION_501C</li><li>HEALTH_REIMBURSEMENT_ARRANGEMENT_HRA</li><li>INDIVIDUAL_SAVINGS_ACCOUNT_ISA</li><li>CASH_ISA</li><li>STOCKS_AND_SHARES_ISA</li><li>INNOVATIVE_FINANCE_ISA</li><li>JUNIOR_ISA</li><li>EMPLOYEES_PROVIDENT_FUND_ORGANIZATION_EPFO</li><li>PUBLIC_PROVIDENT_FUND_PPF</li><li>EMPLOYEES_PENSION_SCHEME_EPS</li><li>NATIONAL_PENSION_SYSTEM_NPS</li><li>INDEXED_ANNUITY</li><li>ANNUITIZED_ANNUITY</li><li>VARIABLE_ANNUITY</li><li>ROTH_403B</li><li>SPOUSAL_IRA</li><li>SPOUSAL_ROTH_IRA</li><li>SARSEP_IRA</li><li>SUBSTANTIALLY_EQUAL_PERIODIC_PAYMENTS_SEPP</li><li>OFFSHORE_TRUST</li><li>IRREVOCABLE_LIFE_INSURANCE_TRUST</li><li>INTERNATIONAL_TRUST</li><li>LIFE_INTEREST_TRUST</li><li>EMPLOYEE_BENEFIT_TRUST</li><li>PRECIOUS_METAL_ACCOUNT</li><li>INVESTMENT_LOAN_ACCOUNT</li><li>GRANTOR_RETAINED_INCOME_TRUST</li><li>PENSION_PLAN</li><li>OTHER</li></ul><b>loan</b><ul><li>MORTGAGE</li><li>INSTALLMENT_LOAN</li><li>PERSONAL_LOAN</li><li>HOME_EQUITY_LINE_OF_CREDIT</li><li>LINE_OF_CREDIT</li><li>AUTO_LOAN</li><li>STUDENT_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>AUTO_INSURANCE</li><li>HEALTH_INSURANCE</li><li>HOME_INSURANCE</li><li>LIFE_INSURANCE</li><li>ANNUITY</li><li>TRAVEL_INSURANCE</li><li>INSURANCE</li></ul><b>realEstate</b><ul> <li>REAL_ESTATE</li></ul><b>reward</b><ul><li>REWARD_POINTS</li></ul><b>Manual Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PREPAID</li></ul><b>credit</b><ul>  <li>CREDIT</li></ul><b>loan</b><ul>  <li>PERSONAL_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>INSURANCE</li><li>ANNUITY</li></ul><b>investment</b><ul><li>BROKERAGE_CASH</li></ul><br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public string AccountType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AccountAddress Address { get; set; }
		
		/// <summary>
		/// The source through which the account(s) are added in the system.<br><b>Valid Values</b>: SYSTEM, USER<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationSource")]
		public AccountAggregationSource AggregationSource { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountDue")]
		public Money AmountDue { get; set; }
		
		/// <summary>
		/// Annual percentage yield (APY) is a normalized representation of an interest rate, based on a compounding period of one year. APY generally refers to the rate paid to a depositor by a financial institution on an account.<br><b>Applicable containers</b>: bank<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annualPercentageYield")]
		public System.Nullable<System.Double> AnnualPercentageYield { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="annuityBalance")]
		public Money AnnuityBalance { get; set; }
		
		/// <summary>
		/// The annual percentage rate (APR) is the yearly rate of interest on the credit card account.<br><b>Additional Details:</b> The yearly percentage rate charged when a balance is held on a credit card. This rate of interest is applied every month on the outstanding credit card balance.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apr")]
		public System.Nullable<System.Double> Apr { get; set; }
		
		/// <summary>
		/// The providerAccountIds that share the account with the primary providerAccountId that was created when the user had added the account for the first time.<br><b>Additional Details</b>: This attribute is returned in the response only if the account deduplication feature is enabled and the same account is mapped to more than one provider account IDs indicating the account is owned by more than one user, for example, joint accounts.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associatedProviderAccountId")]
		public int[] AssociatedProviderAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availableBalance")]
		public Money AvailableBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availableCash")]
		public Money AvailableCash { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availableCredit")]
		public Money AvailableCredit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public Money Balance { get; set; }
		
		/// <summary>
		/// Bank and branch identification information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment, loan<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bankTransferCode")]
		public BankTransferCode[] BankTransferCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cash")]
		public Money Cash { get; set; }
		
		/// <summary>
		/// Annual percentage rate applied to cash withdrawals on the card.<br><br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashApr")]
		public System.Nullable<System.Double> CashApr { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cashValue")]
		public Money CashValue { get; set; }
		
		/// <summary>
		/// The classification of the account such as personal, corporate, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, reward, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public AccountClassification Classification { get; set; }
		
		/// <summary>
		/// Property or possession offered to support a loan that can be seized on a default.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collateral")]
		public string Collateral { get; set; }
		
		/// <summary>
		/// The coverage-related details of the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance,investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coverage")]
		public Coverage[] Coverage { get; set; }
		
		/// <summary>
		/// The date on which the account is created in the Yodlee system.<br><b>Additional Details:</b> It is the date when the user links or aggregates the account(s) that are held with the provider to the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public string CreatedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currentBalance")]
		public Money CurrentBalance { get; set; }
		
		/// <summary>
		/// Current level of the reward program the user is associated with. E.g. Silver, Jade etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentLevel")]
		public string CurrentLevel { get; set; }
		
		/// <summary>
		/// Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public AccountDataset[] Dataset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deathBenefit")]
		public Money DeathBenefit { get; set; }
		
		/// <summary>
		/// Derived APR will be an estimated purchase APR based on consumers credit card transactions and credit card purchase.<br><b>Aggregated / Manual / Derived</b>: Derived<br><b>Applicable containers</b>: creditCard<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="derivedApr")]
		public System.Nullable<System.Double> DerivedApr { get; set; }
		
		/// <summary>
		/// The name or identification of the account owner, as it appears at the FI site. <br><b>Note:</b> The account holder name can be full or partial based on how it is displayed in the account summary page of the FI site. In most cases, the FI site does not display the full account holder name in the account summary page.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan,  reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayedName")]
		public string DisplayedName { get; set; }
		
		/// <summary>
		/// The date on which the due amount has to be paid. <br><b>Additional Details:</b><br><b>Credit Card:</b> The monthly date by when the minimum payment is due to be paid on the credit card account. <br><b>Loan:</b> The date on or before which the due amount should be paid.<br><b>Note:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public string DueDate { get; set; }
		
		/// <summary>
		/// Date on which the user is enrolled on the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrollmentDate")]
		public string EnrollmentDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="escrowBalance")]
		public Money EscrowBalance { get; set; }
		
		/// <summary>
		/// The date on which the home value was estimated.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="estimatedDate")]
		public string EstimatedDate { get; set; }
		
		/// <summary>
		/// The date on which the insurance policy expires or matures.<br><b>Additional Details:</b> The due date at the account-level can differ from the due date field at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public string ExpirationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="faceAmount")]
		public Money FaceAmount { get; set; }
		
		/// <summary>
		/// The frequency of the billing cycle of the account in case of card. The frequency in which premiums are paid in an insurance policy such as monthly, quarterly, and annually. The frequency in which due amounts are paid in a loan  account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>:  creditCard, insurance, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public AccountFrequency Frequency { get; set; }
		
		/// <summary>
		/// A nonprofit or state organization that works with lender, servicer, school, and the Department of Education to help successfully repay Federal Family Education Loan Program (FFELP) loans. If FFELP student loans default, the guarantor takes ownership of them.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guarantor")]
		public string Guarantor { get; set; }
		
		/// <summary>
		/// Type of home insurance, like -<ul><li>HOME_OWNER</li><li>RENTAL</li><li>RENTER</li><li>etc..</li></ul><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="homeInsuranceType")]
		public AccountHomeInsuranceType HomeInsuranceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homeValue")]
		public Money HomeValue { get; set; }
		
		/// <summary>
		/// The primary key of the account resource and the unique identifier for the account.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>GET investmentOptions</li><li>GET accounts/historicalBalances</li><li>POST accounts</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Used to determine  whether an account to be considered in the networth calculation.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank,creditCard,loan,investment,insurance,realEstate,otherAssets,otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeInNetWorth")]
		public System.Nullable<System.Boolean> IncludeInNetWorth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interestPaidLastYear")]
		public Money InterestPaidLastYear { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interestPaidYTD")]
		public Money InterestPaidYTD { get; set; }
		
		/// <summary>
		/// <br><b>Bank:</b> The interest rate offered by a FI to its depositors on a bank account.<br><b>Loan:</b> Interest rate applied on the loan.<br><b>Additional Details:</b><br><b>Note:</b> The Interest Rate field is only applicable for the following account types: savings, checking, money market, and certificate of deposit.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interestRate")]
		public System.Nullable<System.Double> InterestRate { get; set; }
		
		/// <summary>
		/// The type of the interest rate, for example, fixed or variable.<br><b>Applicable containers</b>: loan<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interestRateType")]
		public AccountInterestRateType InterestRateType { get; set; }
		
		/// <summary>
		/// The account to be considered as an asset or liability.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAsset")]
		public System.Nullable<System.Boolean> IsAsset { get; set; }
		
		/// <summary>
		/// Indicates if the account is marked as deleted.<b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDeleted")]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// Indicates if an account is aggregated from a site or it is a manual account i.e. account information manually provided by the user.<br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isManual")]
		public System.Nullable<System.Boolean> IsManual { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastEmployeeContributionAmount")]
		public Money LastEmployeeContributionAmount { get; set; }
		
		/// <summary>
		/// The date on which the last employee contribution was made to the 401k account.<br><b>Note:</b> The last employee contribution date field is derived from the transaction data and not aggregated from the FI site. The field is only applicable to the 401k account type.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: investment<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastEmployeeContributionDate")]
		public string LastEmployeeContributionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastPayment")]
		public Money LastPayment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastPaymentAmount")]
		public Money LastPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the payment for the previous or current billing cycle is done.<br><b>Additional Details:</b> If the payment is already done for the current billing cycle, then the field indicates the payment date of the current billing cycle. If payment is yet to be done for the current billing cycle, then the field indicates the date on which the payment was made for any of the previous billing cycles. The last payment date at the account-level can differ from the last payment date at the statement-level, as the information in the aggregated card account data provides an up-to-date information to the consumer.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: creditCard, loan, insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastPaymentDate")]
		public string LastPaymentDate { get; set; }
		
		/// <summary>
		/// The date time the account information was last retrieved from the provider site and updated in the Yodlee system.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// The financial institution that provides the loan.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lender")]
		public string Lender { get; set; }
		
		/// <summary>
		/// Type of life insurance.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lifeInsuranceType")]
		public AccountLifeInsuranceType LifeInsuranceType { get; set; }
		
		/// <summary>
		/// The date by which the payoff amount should be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loanPayByDate")]
		public string LoanPayByDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loanPayoffAmount")]
		public Money LoanPayoffAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loanPayoffDetails")]
		public LoanPayoffDetails LoanPayoffDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="marginBalance")]
		public Money MarginBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maturityAmount")]
		public Money MaturityAmount { get; set; }
		
		/// <summary>
		/// The date when a certificate of deposit (CD/FD) matures or the final payment date of a loan at which point the principal amount (including pending interest) is due to be paid.<br><b>Additional Details:</b> The date when a certificate of deposit (CD) matures, i.e., the money in the CD can be withdrawn without paying an early withdrawal penalty.The final payment date of a loan, i.e., the principal amount (including pending interest) is due to be paid.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maturityDate")]
		public string MaturityDate { get; set; }
		
		/// <summary>
		/// The additional description or notes given by the user.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo")]
		public string Memo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimumAmountDue")]
		public Money MinimumAmountDue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moneyMarketBalance")]
		public Money MoneyMarketBalance { get; set; }
		
		/// <summary>
		/// The eligible next level of the rewards program.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLevel")]
		public string NextLevel { get; set; }
		
		/// <summary>
		/// The nickname of the account as provided by the consumer to identify an account. The account nickname can be used instead of the account name.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		/// <summary>
		/// Indicates the migration status of the account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthMigrationStatus")]
		public AccountOauthMigrationStatus OauthMigrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalLoanAmount")]
		public Money OriginalLoanAmount { get; set; }
		
		/// <summary>
		/// The date on which the loan is disbursed.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originationDate")]
		public string OriginationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overDraftLimit")]
		public Money OverDraftLimit { get; set; }
		
		/// <summary>
		/// The date on which the insurance policy coverage commences.<br><b>Applicable containers</b>: insurance<br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyEffectiveDate")]
		public string PolicyEffectiveDate { get; set; }
		
		/// <summary>
		/// The date the insurance policy began.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyFromDate")]
		public string PolicyFromDate { get; set; }
		
		/// <summary>
		/// The status of the policy.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyStatus")]
		public AccountPolicyStatus PolicyStatus { get; set; }
		
		/// <summary>
		/// The duration for which the policy is valid or in effect. For example, one year, five years, etc.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyTerm")]
		public string PolicyTerm { get; set; }
		
		/// <summary>
		/// The date to which the policy exists.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policyToDate")]
		public string PolicyToDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="premium")]
		public Money Premium { get; set; }
		
		/// <summary>
		/// The number of years for which premium payments have to be made in a policy.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: insurance<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="premiumPaymentTerm")]
		public string PremiumPaymentTerm { get; set; }
		
		/// <summary>
		/// Primary reward unit for this reward program. E.g. miles, points, etc.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryRewardUnit")]
		public string PrimaryRewardUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principalBalance")]
		public Money PrincipalBalance { get; set; }
		
		/// <summary>
		/// The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerAccountId")]
		public System.Nullable<System.Int64> ProviderAccountId { get; set; }
		
		/// <summary>
		/// Identifier of the provider site. The primary key of provider resource. <br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public string ProviderId { get; set; }
		
		/// <summary>
		/// Service provider or institution name where the account originates. This belongs to the provider resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerName")]
		public string ProviderName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurringPayment")]
		public Money RecurringPayment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remainingBalance")]
		public Money RemainingBalance { get; set; }
		
		/// <summary>
		/// The type of repayment plan that the borrower prefers to repay the loan. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repaymentPlanType")]
		public AccountRepaymentPlanType RepaymentPlanType { get; set; }
		
		/// <summary>
		/// Information of different reward balances associated with the account.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rewardBalance")]
		public RewardBalance[] RewardBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runningBalance")]
		public Money RunningBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shortBalance")]
		public Money ShortBalance { get; set; }
		
		/// <summary>
		/// Indicates the status of the loan account. <br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values:</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceAccountStatus")]
		public AccountSourceAccountStatus SourceAccountStatus { get; set; }
		
		/// <summary>
		/// A unique ID that the provider site has assigned to the account. The source ID is only available for the HELD accounts.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan,  reward<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceId")]
		public string SourceId { get; set; }
		
		/// <summary>
		/// The tenure for which the CD account is valid  or in case of loan, the number of years/months over which the loan amount  has to be repaid. <br><b>Additional Details:</b><br>  Bank: The Term field is only applicable for the account type CD.Loan: The period for which the loan agreement is in force. The period, before or at the end of which, the loan should either be repaid or renegotiated for another term.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, loan<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCashLimit")]
		public Money TotalCashLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCreditLimit")]
		public Money TotalCreditLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalCreditLine")]
		public Money TotalCreditLine { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalUnvestedBalance")]
		public Money TotalUnvestedBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalVestedBalance")]
		public Money TotalVestedBalance { get; set; }
		
		/// <summary>
		/// <b>Applicable containers</b>: reward, bank, creditCard, investment, loan, insurance, realEstate,  otherLiabilities<br><b>Endpoints</b>:<ul><li>GET accounts </li><li>GET accounts/{accountId}</li><li>POST accounts</ul><li>GET dataExtracts/userData</li><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userClassification")]
		public AccountUserClassification UserClassification { get; set; }
		
		/// <summary>
		/// The valuation type indicates whether the home value is calculated either manually or by Yodlee Partners.<br><br><b>Aggregated / Manual</b>: Manual<br><b>Applicable containers</b>: realEstate<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valuationType")]
		public AccountValuationType ValuationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataExtractsEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DataExtractsEventData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="info")]
		public string Info { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataExtractsEventData
	{
		
		[System.Runtime.Serialization.DataMember(Name="fromDate")]
		public string FromDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toDate")]
		public string ToDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userCount")]
		public System.Nullable<System.Int32> UserCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userData")]
		public DataExtractsEventUserData[] UserData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataExtractsEventUserData
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public DataExtractsEventLinks[] Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public DataExtractsUser User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataExtractsEventLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="href")]
		public string Href { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="methodType")]
		public string MethodType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rel")]
		public string Rel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataExtractsUser
	{
		
		[System.Runtime.Serialization.DataMember(Name="loginName")]
		public string LoginName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataExtractsEventResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="event")]
		public DataExtractsEvent Event { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataExtractsHolding
	{
		
		/// <summary>
		/// Unique identifier of the account to which the security is linked.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int64> AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accruedIncome")]
		public Money AccruedIncome { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accruedInterest")]
		public Money AccruedInterest { get; set; }
		
		/// <summary>
		/// The quantity of tradeable units in a contract.<br><b>Note</b>: The contract quantity field is only applicable to commodity and currency.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contractQuantity")]
		public System.Nullable<System.Double> ContractQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costBasis")]
		public Money CostBasis { get; set; }
		
		/// <summary>
		/// The stated interest rate for a bond.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="couponRate")]
		public System.Nullable<System.Double> CouponRate { get; set; }
		
		/// <summary>
		/// The date on which the holding is created in the Yodlee system.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public string CreatedDate { get; set; }
		
		/// <summary>
		/// The CUSIP (Committee on Uniform Securities Identification Procedures) identifies most the financial instruments in the United States and Canada.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cusipNumber")]
		public string CusipNumber { get; set; }
		
		/// <summary>
		/// The description (name) for the holding (E.g., Cisco Systems)<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types. <br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The enrichedDescription is the security description of the normalized holding<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrichedDescription")]
		public string EnrichedDescription { get; set; }
		
		/// <summary>
		/// The quantity of the employee stock options that are already exercised or bought by the employee.<br><b>Note</b>: Once the employee stock options is exercised, they are either converted to cash value or equity positions depending on the FI. The exercised quantity field is only applicable to employee stock options.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exercisedQuantity")]
		public System.Nullable<System.Double> ExercisedQuantity { get; set; }
		
		/// <summary>
		/// The date on which an option, right or warrant expires.<br><b>Note</b>: The expiration date field is only applicable to options and employee stock options.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public string ExpirationDate { get; set; }
		
		/// <summary>
		/// The date on which equity awards like ESOP, RSU, etc., are issued or granted.<br><b>Note</b>: The grant date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grantDate")]
		public string GrantDate { get; set; }
		
		/// <summary>
		/// Type of holding<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="holdingType")]
		public System.Nullable<DataExtractsHoldingHoldingType> HoldingType { get; set; }
		
		/// <summary>
		/// Unique identifier for the security added in the system. This is the primary key of the holding resource.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// The interest rate on a CD.<br><b>Note</b>: The interest rate field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interestRate")]
		public System.Nullable<System.Double> InterestRate { get; set; }
		
		/// <summary>
		/// Indicates that the holding is a short trading.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isShort")]
		public System.Nullable<System.Boolean> IsShort { get; set; }
		
		/// <summary>
		/// The ISIN (International Securities Identification Number) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Note</b>: The ISIN field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isin")]
		public string Isin { get; set; }
		
		/// <summary>
		/// The date when the information was last updated in the system.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// Indicates the security match status id of the investment option identified during security normalization.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchStatus")]
		public string MatchStatus { get; set; }
		
		/// <summary>
		/// The stated maturity date of a bond or CD.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maturityDate")]
		public string MaturityDate { get; set; }
		
		/// <summary>
		/// The type of the option position (i.e., put or call).<br><b>Note</b>: The option type field is only applicable to options.<br><br><b>Applicable containers</b>: investment<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optionType")]
		public System.Nullable<DataExtractsHoldingOptionType> OptionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Money Price { get; set; }
		
		/// <summary>
		/// Unique identifier for the user's association with the provider.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerAccountId")]
		public System.Nullable<System.Int64> ProviderAccountId { get; set; }
		
		/// <summary>
		/// The quantity held for the holding.<br><b>Note</b>: Only for bonds the quantity field indicates the normalized quantity and not the quantity aggregated from the site. The quantity field is only applicable to restricted stock units/awards, performance units, currency, and commodity.<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		/// <summary>
		/// Indicates the security style of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityStyle")]
		public string SecurityStyle { get; set; }
		
		/// <summary>
		/// Indicates the security type of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityType")]
		public string SecurityType { get; set; }
		
		/// <summary>
		/// The SEDOL (Stock Exchange Daily Official List) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sedol")]
		public string Sedol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spread")]
		public Money Spread { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strikePrice")]
		public Money StrikePrice { get; set; }
		
		/// <summary>
		/// The symbol of the security.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		/// <summary>
		/// The fixed duration for which the bond or CD is issued.<br><b>Note</b>: The term field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		/// <summary>
		/// Indicates the number of unvested quantity or units.<br><b>Note</b>: The unvested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unvestedQuantity")]
		public System.Nullable<System.Double> UnvestedQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unvestedValue")]
		public Money UnvestedValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Money Value { get; set; }
		
		/// <summary>
		/// The quantity of units or shares that are already vested on a vest date.<br><b>Note</b>: The vested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vestedQuantity")]
		public System.Nullable<System.Double> VestedQuantity { get; set; }
		
		/// <summary>
		/// The number of vested shares that can be exercised by the employee. It is usually equal to the vested quantity.<br><b>Note</b>: The vested shares exercisable field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vestedSharesExercisable")]
		public System.Nullable<System.Double> VestedSharesExercisable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vestedValue")]
		public Money VestedValue { get; set; }
		
		/// <summary>
		/// The date on which a RSU, RSA, or an employee stock options become vested.<br><b>Note</b>: The vesting date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vestingDate")]
		public string VestingDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataExtractsHoldingHoldingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stock = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mutualFund = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bond = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		option = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		moneyMarketFund = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		remic = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		future = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		commodity = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		currency = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unitInvestmentTrust = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		employeeStockOption = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		insuranceAnnuity = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		preferredStock = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ETF = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		warrants = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ETN = 18,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataExtractsHoldingOptionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		put = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		call = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		other = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataExtractsProviderAccount
	{
		
		/// <summary>
		/// The source through which the providerAccount is added in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationSource")]
		public AccountAggregationSource AggregationSource { get; set; }
		
		/// <summary>
		/// The date on when the provider account is created in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public string CreatedDate { get; set; }
		
		/// <summary>
		/// Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public AccountDataset[] Dataset { get; set; }
		
		/// <summary>
		/// Unique identifier for the provider account resource. This is created during account addition.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Indicates if the provider account is deleted from the system.<b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDeleted")]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// Indicates whether account is a manual or aggregated provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isManual")]
		public System.Nullable<System.Boolean> IsManual { get; set; }
		
		/// <summary>
		/// Indicate when the providerAccount is last updated successfully.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// Indicates the migration status of the provider account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>GET providerAccounts/{providerAccountId}</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthMigrationStatus")]
		public AccountOauthMigrationStatus OauthMigrationStatus { get; set; }
		
		/// <summary>
		/// Unique identifier for the provider resource. This denotes the provider for which the provider account id is generated by the user.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public System.Nullable<System.Int64> ProviderId { get; set; }
		
		/// <summary>
		/// Unique id generated to indicate the request.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// The status of last update attempted for the account. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<DataExtractsProviderAccountStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataExtractsProviderAccountStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOGIN_IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_INPUT_REQUIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL_SUCCESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIGRATION_IN_PROGRESS = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataExtractsTransaction
	{
		
		/// <summary>
		/// The account's container.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountCONTAINER CONTAINER { get; set; }
		
		/// <summary>
		/// The account from which the transaction was made. This is basically the primary key of the account resource. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int64> AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Money Amount { get; set; }
		
		/// <summary>
		/// Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseType")]
		public System.Nullable<DataExtractsTransactionBaseType> BaseType { get; set; }
		
		/// <summary>
		/// The name of the category assigned to the transaction. This is the category field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// The id of the category assigned to the transaction. This is the id field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public System.Nullable<System.Int64> CategoryId { get; set; }
		
		/// <summary>
		/// Indicates the source of the category, i.e., categories derived by the system or assigned/provided by the consumer. This is the source field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categorySource")]
		public AccountAggregationSource CategorySource { get; set; }
		
		/// <summary>
		/// The categoryType of the category assigned to the transaction. This is the type field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryType")]
		public System.Nullable<DataExtractsTransactionCategoryType> CategoryType { get; set; }
		
		/// <summary>
		/// The checkNumber of the transaction.<br><br><b>Applicable containers</b>: bank<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkNumber")]
		public string CheckNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commission")]
		public Money Commission { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public string CreatedDate { get; set; }
		
		/// <summary>
		/// The CUSIP (Committee on Uniform Securities Identification Procedures) identifies the financial instruments in the United States and Canada.<br><b><br><b>Note</b></b>: The CUSIP number field applies only to trade related transactions.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cusipNumber")]
		public string CusipNumber { get; set; }
		
		/// <summary>
		/// The value provided will be either postDate or transactionDate. postDate takes higher priority than transactionDate, except for the investment container as only transactionDate is available. The availability of postDate or transactionDate depends on the provider site.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public Description Description { get; set; }
		
		/// <summary>
		/// The id of the detail category that is assigned to the transaction. The supported values are provided by GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailCategoryId")]
		public System.Nullable<System.Int64> DetailCategoryId { get; set; }
		
		/// <summary>
		/// The high level category assigned to the transaction. The supported values are provided by the GET transactions/categories. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highLevelCategoryId")]
		public System.Nullable<System.Int64> HighLevelCategoryId { get; set; }
		
		/// <summary>
		/// For transactions involving securities, this captures the securities description.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="holdingDescription")]
		public string HoldingDescription { get; set; }
		
		/// <summary>
		/// An unique identifier for the transaction. The combination of the id and account container are unique in the system. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interest")]
		public Money Interest { get; set; }
		
		/// <summary>
		/// Indicates if the transaction is marked as deleted.<b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDeleted")]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		/// <summary>
		/// Indicates if the transaction is aggregated from the FI site or the consumer has manually created the transaction using the application or an API. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isManual")]
		public System.Nullable<System.Boolean> IsManual { get; set; }
		
		/// <summary>
		/// International Securities Identification Number (ISIN) standard is used worldwide to identify specific securities.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isin")]
		public string Isin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// Additional notes provided by the user for a particular  transaction through application or API services. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo")]
		public string Memo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchant")]
		public Merchant Merchant { get; set; }
		
		/// <summary>
		/// The parentCategoryId of the category assigned to the transaction.<br><b>Note</b>: This field will be provided in the response if the transaction is assigned to a user-created category. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentCategoryId")]
		public System.Nullable<System.Int64> ParentCategoryId { get; set; }
		
		/// <summary>
		/// The date on which the transaction is posted to the account.<br><br><b>Applicable containers</b>: bank,creditCard,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postDate")]
		public string PostDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Money Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public Money Principal { get; set; }
		
		/// <summary>
		/// The quantity associated with the transaction.<br><b>Note</b>: The quantity field applies only to trade-related transactions.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runningBalance")]
		public Money RunningBalance { get; set; }
		
		/// <summary>
		/// SEDOL stands for Stock Exchange Daily Official List, a list of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sedol")]
		public string Sedol { get; set; }
		
		/// <summary>
		/// It is the date on which the transaction is finalized, that is, the date the ownership of the security is transferred to the buyer. The settlement date is usually few days after the transaction date.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settleDate")]
		public string SettleDate { get; set; }
		
		/// <summary>
		/// A unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts.<br>Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceId")]
		public string SourceId { get; set; }
		
		/// <summary>
		/// The source through which the transaction is added to the Yodlee system.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loann<br><b>Applicable Values:</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public System.Nullable<DataExtractsTransactionSourceType> SourceType { get; set; }
		
		/// <summary>
		/// The status of the transaction: pending or posted.<br><b>Note</b>: Most FI sites only display posted transactions. If the FI site displays transaction status, same will be aggregated.  <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<DataExtractsTransactionStatus> Status { get; set; }
		
		/// <summary>
		/// The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.<br><b>Note</b>: The transaction subtype field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subType")]
		public System.Nullable<DataExtractsTransactionSubType> SubType { get; set; }
		
		/// <summary>
		/// The symbol of the security being traded.<br><b>Note</b>: The settle date field applies only to trade-related transactions. <br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		/// <summary>
		/// The date the transaction happens in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionDate")]
		public string TransactionDate { get; set; }
		
		/// <summary>
		/// The nature of the transaction, i.e., deposit, refund, payment, etc.<br><b>Note</b>: The transaction type field is available only for the United States, Canada, United Kingdom, and India based provider sites. <br><br><b>Applicable containers</b>: bank,creditCard,investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// It is an identification number that is assigned to financial instruments such as stocks and bonds trading in Switzerland.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valoren")]
		public string Valoren { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataExtractsTransactionBaseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataExtractsTransactionCategoryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFERRED_COMPENSATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNCATEGORIZE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INCOME = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPENSE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Description
	{
		
		/// <summary>
		/// The description of the transaction as defined by the consumer. The consumer can define or provide more details of the transaction in this field.<br><br><b>Applicable containers</b>:  creditCard, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumer")]
		public string Consumer { get; set; }
		
		/// <summary>
		/// Original transaction description as it appears at the FI site.<br><br><b>Applicable containers</b>:  creditCard, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="original")]
		public string Original { get; set; }
		
		/// <summary>
		/// The description will provide the actual name of the security.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="security")]
		public string Security { get; set; }
		
		/// <summary>
		/// The transaction description that appears at the FI site may not be self-explanatory, i.e., the source, purpose of the transaction may not be evident. Yodlee attempts to simplify and make the transaction meaningful to the consumer, and this simplified transaction description is provided in the simple description field.Note: The simple description field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>:  creditCard, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="simple")]
		public string Simple { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Merchant
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AccountAddress Address { get; set; }
		
		/// <summary>
		/// The business categories of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryLabel")]
		public string[] CategoryLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public Contact Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coordinates")]
		public Coordinates Coordinates { get; set; }
		
		/// <summary>
		/// Identifier of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The name of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The source through which merchant information is retrieved.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public System.Nullable<MerchantSource> Source { get; set; }
		
		/// <summary>
		/// The website of the merchant.<br><br><b>Applicable containers</b>: bank,creditCard,investment,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MerchantSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YODLEE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FACTUAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataExtractsTransactionSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGGREGATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANUAL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataExtractsTransactionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLEARED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataExtractsTransactionSubType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTH_HOLD = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTH_REQUEST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERDRAFT_CHARGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDIT_ADJUSTMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIN_DEBIT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK_DIRECT_DEPOSIT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIVIDEND_DEPOSIT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEREST_SAVINGS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEREST_ADJUSTMENT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONLINE_PURCHASE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PURCHASED_WITH_CHECK = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECURRING_BILLING = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX_PAYMENT = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT_BY_CHECK = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT_PLAN = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEE_REFUND = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WIRE_TRANSFER_CHARGE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_TO_ACCOUNT_TRANSFER = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK_TO_BANK_TRANSACTION = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK_TO_NON_BANK_ACCOUNT_TRANSFER = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CASH_WITHDRAWAL_AT_FI = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATM_CASH_WITHDRAWAL = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTH_PROCESSING = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTH_RELEASE = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRE_AUTH = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTH_COMPLETE = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTH_VOID = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BALANCE_ENQUIRY = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_VERIFICATION = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRE_AUTH_COMPLETION = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_CHARGE = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_CHARGE_FEE_REFUND = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETURNED_CHECK_CHARGE = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RETURNED_CHECK_REIMBURSEMENT = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CASH_ADVANCE = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILL_PAY_CHARGE = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECK_IMAGE_SERVICE_CHARGE = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERDRAFT_PROTECTION_CHARGE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STOP_PAYMENT_CHARGE = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECKS_ORDERING_CHARGE = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY_MAINTENANCE_CHARGE = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIT_CARD_FEE = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONVENIENCE_FEE = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL_LOAN_CREDIT = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDIT_CARD_CREDIT = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTO_LOAN = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOME_LOAN_MORTGAGE = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHORT_TERM_CREDIT = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNATURE_DEBIT = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTACT_LESS_DEBIT = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFERRED_DEPOSIT = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFERRED_BILL_PAY = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTALLMENT_PAYMENT = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECURRING_SUBSCRIPTION_PAYMENT = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOLD_CHECK_PAYMENT = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAPITAL_GAINS_DISTIBUTION = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CG_LONG_TERM_DEPOSIT = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_SALE_DEPOSIT = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEREST__CHECK = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PURCHASE_VOID = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PURCHASE_WITH_CREDIT_CARD = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PURCHASE_WITH_DEBIT_CARD = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHARGE_A_REPEAT_CUSTOMER = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOWN_PAYMENT_OR_ANNUITY_PAYMENT_OR_DIRECT_PAYMENT = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEE_PAYMENT = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINANCE_CHARGE_REFUND = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSACTION_VOID = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FEE_VOID = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIT_CARD_WITHDRAWAL_AT_STORE = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ELECTRONIC_PAYMENT = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACH_DEBIT = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ATM_TELLER_DEPOSIT = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POS_DEBIT = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK_ADJUSTMENT = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHARGES_FEES = 74,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTEREST = 75,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPOSITS_CREDITS = 76,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAYMENT = 77,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PURCHASE = 78,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REFUND = 79,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSFER = 80,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WITHDRAWAL = 81,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER_DEPOSITS = 82,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER_WITHDRAWALS = 83,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADJUSTMENT = 84,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FINANCE_CHARGE = 85,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER_CHARGES_FEES = 86,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANNUAL_FEE = 87,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPOSIT = 88,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIRECT_DEPOSIT_SALARY = 89,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVESTMENT_INCOME_CASH = 90,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSA = 91,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REWARDS = 92,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECK_DEPOSIT = 93,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOBILE_REMOTE_DEPOSIT = 94,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TELLER_DEPOSIT = 95,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX_REFUND = 96,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDIT_CARD_PAYMENT = 97,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSURANCE_PAYMENT = 98,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UTILITIES_PAYMENT = 99,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD_SUPPORT = 100,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOAN = 101,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL_LOAN = 102,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STUDENT_LOAN = 103,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SALES_TAX = 104,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REIMBURSEMENT = 105,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BALANCE_TRANSFER = 106,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WIRE_TRANSFER = 107,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERDRAFT_PROTECTION = 108,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEBIT = 109,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDIT = 110,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NSF_FEES = 111,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataExtractsUserData
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public DataExtractsAccount[] Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="holding")]
		public DataExtractsHolding[] Holding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="providerAccount")]
		public DataExtractsProviderAccount[] ProviderAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="totalTransactionsCount")]
		public System.Nullable<System.Int64> TotalTransactionsCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public DataExtractsTransaction[] Transaction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public DataExtractsUser User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataExtractsUserDataResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="userData")]
		public DataExtractsUserData[] UserData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DerivedCategorySummary
	{
		
		/// <summary>
		/// Id of the category. This information is provided by transactions/categories service.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public System.Nullable<System.Int64> CategoryId { get; set; }
		
		/// <summary>
		/// The name of the category.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryName")]
		public string CategoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creditTotal")]
		public Money CreditTotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debitTotal")]
		public Money DebitTotal { get; set; }
		
		/// <summary>
		/// Credit and debit summary per date.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public DerivedCategorySummaryDetails[] Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public DerivedTransactionsLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DerivedCategorySummaryDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="creditTotal")]
		public Money CreditTotal { get; set; }
		
		/// <summary>
		/// Date on which the credit and debit transactions had occured.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debitTotal")]
		public Money DebitTotal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DerivedTransactionsLinks
	{
		
		/// <summary>
		/// Link of the transaction API service that corresponds to the value derivation.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactions")]
		public string Transactions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DerivedHolding
	{
		
		/// <summary>
		/// Unique identifier of the account to which the security is linked.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int64> AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accruedIncome")]
		public Money AccruedIncome { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accruedInterest")]
		public Money AccruedInterest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="assetClassification")]
		public AssetClassification AssetClassification { get; set; }
		
		/// <summary>
		/// The quantity of tradeable units in a contract.<br><b>Note</b>: The contract quantity field is only applicable to commodity and currency.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contractQuantity")]
		public System.Nullable<System.Double> ContractQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costBasis")]
		public Money CostBasis { get; set; }
		
		/// <summary>
		/// The stated interest rate for a bond.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="couponRate")]
		public System.Nullable<System.Double> CouponRate { get; set; }
		
		/// <summary>
		/// The date on which the holding is created in the Yodlee system.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public string CreatedDate { get; set; }
		
		/// <summary>
		/// The CUSIP (Committee on Uniform Securities Identification Procedures) identifies most the financial instruments in the United States and Canada.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cusipNumber")]
		public string CusipNumber { get; set; }
		
		/// <summary>
		/// The description (name) for the holding (E.g., Cisco Systems)<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types. <br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The enrichedDescription is the security description of the normalized holding<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrichedDescription")]
		public string EnrichedDescription { get; set; }
		
		/// <summary>
		/// The quantity of the employee stock options that are already exercised or bought by the employee.<br><b>Note</b>: Once the employee stock options is exercised, they are either converted to cash value or equity positions depending on the FI. The exercised quantity field is only applicable to employee stock options.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exercisedQuantity")]
		public System.Nullable<System.Double> ExercisedQuantity { get; set; }
		
		/// <summary>
		/// The date on which an option, right or warrant expires.<br><b>Note</b>: The expiration date field is only applicable to options and employee stock options.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public string ExpirationDate { get; set; }
		
		/// <summary>
		/// The date on which equity awards like ESOP, RSU, etc., are issued or granted.<br><b>Note</b>: The grant date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grantDate")]
		public string GrantDate { get; set; }
		
		/// <summary>
		/// Type of holding<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="holdingType")]
		public DataExtractsHoldingHoldingType HoldingType { get; set; }
		
		/// <summary>
		/// Unique identifier for the security added in the system. This is the primary key of the holding resource.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// The interest rate on a CD.<br><b>Note</b>: The interest rate field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interestRate")]
		public System.Nullable<System.Double> InterestRate { get; set; }
		
		/// <summary>
		/// Indicates that the holding is a short trading.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isShort")]
		public System.Nullable<System.Boolean> IsShort { get; set; }
		
		/// <summary>
		/// The ISIN (International Securities Identification Number) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Note</b>: The ISIN field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isin")]
		public string Isin { get; set; }
		
		/// <summary>
		/// The date when the information was last updated in the system.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// Indicates the security match status id of the investment option identified during security normalization.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchStatus")]
		public string MatchStatus { get; set; }
		
		/// <summary>
		/// The stated maturity date of a bond or CD.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maturityDate")]
		public string MaturityDate { get; set; }
		
		/// <summary>
		/// The type of the option position (i.e., put or call).<br><b>Note</b>: The option type field is only applicable to options.<br><br><b>Applicable containers</b>: investment<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optionType")]
		public DataExtractsHoldingOptionType OptionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Money Price { get; set; }
		
		/// <summary>
		/// Unique identifier for the user's association with the provider.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerAccountId")]
		public System.Nullable<System.Int64> ProviderAccountId { get; set; }
		
		/// <summary>
		/// The quantity held for the holding.<br><b>Note</b>: Only for bonds the quantity field indicates the normalized quantity and not the quantity aggregated from the site. The quantity field is only applicable to restricted stock units/awards, performance units, currency, and commodity.<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		/// <summary>
		/// Indicates the security style of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityStyle")]
		public string SecurityStyle { get; set; }
		
		/// <summary>
		/// Indicates the security type of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityType")]
		public string SecurityType { get; set; }
		
		/// <summary>
		/// The SEDOL (Stock Exchange Daily Official List) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sedol")]
		public string Sedol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spread")]
		public Money Spread { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strikePrice")]
		public Money StrikePrice { get; set; }
		
		/// <summary>
		/// The symbol of the security.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		/// <summary>
		/// The fixed duration for which the bond or CD is issued.<br><b>Note</b>: The term field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		/// <summary>
		/// Indicates the number of unvested quantity or units.<br><b>Note</b>: The unvested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unvestedQuantity")]
		public System.Nullable<System.Double> UnvestedQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unvestedValue")]
		public Money UnvestedValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Money Value { get; set; }
		
		/// <summary>
		/// The quantity of units or shares that are already vested on a vest date.<br><b>Note</b>: The vested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vestedQuantity")]
		public System.Nullable<System.Double> VestedQuantity { get; set; }
		
		/// <summary>
		/// The number of vested shares that can be exercised by the employee. It is usually equal to the vested quantity.<br><b>Note</b>: The vested shares exercisable field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vestedSharesExercisable")]
		public System.Nullable<System.Double> VestedSharesExercisable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vestedValue")]
		public Money VestedValue { get; set; }
		
		/// <summary>
		/// The date on which a RSU, RSA, or an employee stock options become vested.<br><b>Note</b>: The vesting date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vestingDate")]
		public string VestingDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DerivedHoldingSummaryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="holdingSummary")]
		public DerivedHoldingsSummary[] HoldingSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public DerivedHoldingsLinks Link { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DerivedHoldingsSummary
	{
		
		/// <summary>
		/// Accounts that contribute to the classification. <br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account")]
		public DerivedHoldingsAccount[] Account { get; set; }
		
		/// <summary>
		/// The classification type of the security. The supported asset classification type and the values are provided in the /holdings/assetClassificationList.<br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classificationType")]
		public string ClassificationType { get; set; }
		
		/// <summary>
		/// The classification value that corresponds to the classification type of the holding. The supported asset classification type and the values are provided in the /holdings/assetClassificationList.<br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classificationValue")]
		public string ClassificationValue { get; set; }
		
		/// <summary>
		/// Securities that belong to the asset classification type and contributed to the summary value.<br><b>Required Feature Enablement</b>: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="holding")]
		public DerivedHolding[] Holding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Money Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DerivedHoldingsAccount
	{
		
		/// <summary>
		/// The primary key of the account resource and the unique identifier for the account.<br>Required Feature Enablement: Asset classification feature.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Money Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DerivedHoldingsLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="holdings")]
		public string Holdings { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DerivedNetworth
	{
		
		[System.Runtime.Serialization.DataMember(Name="asset")]
		public Money Asset { get; set; }
		
		/// <summary>
		/// The date as of when the networth information is provided.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Balances of the accounts over the period of time.<br><br><b>Applicable containers</b>: bank, creditcard, investment, insurance, realEstate, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="historicalBalances")]
		public DerivedNetworthHistoricalBalance[] HistoricalBalances { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="liability")]
		public Money Liability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networth")]
		public Money Networth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DerivedNetworthHistoricalBalance
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int64> AccountId { get; set; }
		
		/// <summary>
		/// Date as of when the balance is last  updated due to the auto account updates or user triggered updates. This balance will be carry forward for the days where there is no balance available in the system. <br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asOfDate")]
		public string AsOfDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public Money Balance { get; set; }
		
		/// <summary>
		/// The source of balance information.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceType")]
		public HistoricalBalanceDataSourceType DataSourceType { get; set; }
		
		/// <summary>
		/// Date for which the account balance was provided.  This balance could be a carryforward, calculated or a scraped balance. AdditIonal Details: scraped: Balance shown in the provider site. This balance gets stored in Yodlee system during system/user account updates. carryForward : Balance carried forward from the scraped balance to the days for which the balance was not available in the system. Balance may not be available for all the days in the system due to MFA information required, error in the site, credential changes, etc. calculated: Balances that gets calculated for the days that are prior to the account added date.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li><li>GET derived/networth</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		/// <summary>
		/// Indicates whether the balance is an asset or liability.<br><br><b>Account Type</b>: Aggregated and Manual<br><b>Applicable containers</b>: bank, creditCard, investment, insurance, realEstate, loan<br><b>Endpoints</b>:<ul><li>GET accounts/historicalBalances</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAsset")]
		public System.Nullable<System.Boolean> IsAsset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DerivedNetworthResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="networth")]
		public DerivedNetworth[] Networth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DerivedTransactionSummaryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public DerivedTransactionsLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionSummary")]
		public DerivedTransactionsSummary[] TransactionSummary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DerivedTransactionsSummary
	{
		
		/// <summary>
		/// Summary of transaction amouts at category level.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categorySummary")]
		public DerivedCategorySummary[] CategorySummary { get; set; }
		
		/// <summary>
		/// Type of categories provided by transactions/categories service.<br><br><b>Applicable containers</b>: creditCard, bank, investment<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryType")]
		public DataExtractsTransactionCategoryType CategoryType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creditTotal")]
		public Money CreditTotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="debitTotal")]
		public Money DebitTotal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public DerivedTransactionsLinks Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DetailCategory
	{
		
		/// <summary>
		/// The unique identifier of the detail category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// The name of the detail category<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Document
	{
		
		/// <summary>
		/// The unique identifier for the account. The account ID to which the document is linked.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountID")]
		public System.Nullable<System.Int64> AccountID { get; set; }
		
		/// <summary>
		/// Indicates the type of the document.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="docType")]
		public System.Nullable<DocumentDocType> DocType { get; set; }
		
		/// <summary>
		/// Indicates the type of the tax form.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formType")]
		public string FormType { get; set; }
		
		/// <summary>
		/// The document's primary key and unique identifier.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Indicates the date and time the document was last updated.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// Indicates the name of the document.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates the source of the document download.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Indicates the status of the document download.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DocumentDocType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STMT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EBILL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentDownload
	{
		
		/// <summary>
		/// Contents of the document in Base64 format.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="docContent")]
		public string DocContent { get; set; }
		
		/// <summary>
		/// The document's primary key and unique identifier.<br><br><b>Applicable containers</b>: bank, investment, creditCard, loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentDownloadResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public DocumentDownload[] Document { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="document")]
		public Document[] Document { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EvaluateAccountAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="address1")]
		public string Address1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address3")]
		public string Address3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public string SourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="street")]
		public string Street { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AccountAddressType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EvaluateAddressRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="address")]
		public EvaluateAccountAddress Address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EvaluateAddressResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AccountAddress[] Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isValidAddress")]
		public System.Nullable<System.Boolean> IsValidAddress { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Field
	{
		
		/// <summary>
		/// Identifier for the field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// Min length: 1
		/// Max length: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
		public string Id { get; set; }
		
		/// <summary>
		/// Image displayed at the endsite.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// Indicates if a field is an optional field or a mandatory field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isOptional")]
		public System.Nullable<System.Boolean> IsOptional { get; set; }
		
		/// <summary>
		/// Indicates that the answer to the security question already exists in the Yodlee system.Persuading the user to provide the answer to the security question again during the edit-credential flow can be avoided.<br><br><br><b>Endpoints</b>:<ul><li>GET providerAccounts?include=questions</li><li>GET providerAccounts/{providerAccountId}? include=questions</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isValueProvided")]
		public System.Nullable<System.Boolean> IsValueProvided { get; set; }
		
		/// <summary>
		/// The maximum length of the login form field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxLength")]
		public System.Nullable<System.Int64> MaxLength { get; set; }
		
		/// <summary>
		/// The minimum length of the login form field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minLength")]
		public System.Nullable<System.Int64> MinLength { get; set; }
		
		/// <summary>
		/// Name of the field.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Provides the different values that are available for the user to choose. This field is applicable for drop-down or radio field types.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="option")]
		public Option[] Option { get; set; }
		
		/// <summary>
		/// The prefix string that has to be displayed before the field value.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// The suffix string that has to be displayed next to the field value.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
		
		/// <summary>
		/// This indicates the display type of the field. For example, text box, image, etc. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<FieldType> Type { get; set; }
		
		/// <summary>
		/// Value expected from the user for the field. This will be blank and is expected to be filled and sent back when submitting the login or MFA information.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
		
		/// <summary>
		/// Indicates whether the field is editable or not.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueEditable")]
		public string ValueEditable { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Option
	{
		
		/// <summary>
		/// The text that is displayed to the user for that option in the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayText")]
		public string DisplayText { get; set; }
		
		/// <summary>
		/// The option that is selected by default in the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSelected")]
		public System.Nullable<System.Boolean> IsSelected { get; set; }
		
		/// <summary>
		/// The value that is associated with the option.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optionValue")]
		public string OptionValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FieldType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		password = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		option = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		checkbox = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		radio = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		image = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FieldOperation
	{
		
		/// <summary>
		/// Field for which the clause is created.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan<br><b>Applicable Values</b>:<ul><li>amount</li><li>description</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public System.Nullable<FieldOperationField> Field { get; set; }
		
		/// <summary>
		/// Operation for which the clause is created.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan<br><b>Applicable values (depends on the value of field)</b>:<ul><li>field is <b>description</b> -> operation can be<ol><li>stringEquals</li><li>stringContains</li></ol></li><li>field is <b>amount</b> -> operation can be<ol><li>numberEquals</li><li>numberLessThan</li><li>numberLessThanEquals</li><li>numberGreaterThan</li><li>numberGreaterThanEquals</li></ol></li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public System.Nullable<FieldOperationOperation> Operation { get; set; }
		
		/// <summary>
		/// The value would be the amount value in case of amount based rule clause or the string value in case of description based rule clause.<br><br><b>Applicable containers</b>: bank, creditCard, investment, insurance, loan<br><b>Applicable Values</b>:<ul><li>field is <b>description</b> -> value should be <b>min of 3 and max of 50 characters</b></li><li>field is <b>amount</b> -> value should be <b> min value of 0 and a max value of 99999999999.99</b></li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FieldOperationField
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		amount = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		description = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FieldOperationOperation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		numberEquals = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		numberLessThan = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		numberLessThanEquals = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		numberGreaterThan = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		numberGreaterThanEquals = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stringEquals = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stringContains = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Holding
	{
		
		/// <summary>
		/// Unique identifier of the account to which the security is linked.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int64> AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accruedIncome")]
		public Money AccruedIncome { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accruedInterest")]
		public Money AccruedInterest { get; set; }
		
		/// <summary>
		/// Asset classification applied to the holding. <br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assetClassification")]
		public AssetClassification[] AssetClassification { get; set; }
		
		/// <summary>
		/// The quantity of tradeable units in a contract.<br><b>Note</b>: The contract quantity field is only applicable to commodity and currency.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contractQuantity")]
		public System.Nullable<System.Double> ContractQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="costBasis")]
		public Money CostBasis { get; set; }
		
		/// <summary>
		/// The stated interest rate for a bond.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="couponRate")]
		public System.Nullable<System.Double> CouponRate { get; set; }
		
		/// <summary>
		/// The date on which the holding is created in the Yodlee system.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public string CreatedDate { get; set; }
		
		/// <summary>
		/// The CUSIP (Committee on Uniform Securities Identification Procedures) identifies most the financial instruments in the United States and Canada.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cusipNumber")]
		public string CusipNumber { get; set; }
		
		/// <summary>
		/// The description (name) for the holding (E.g., Cisco Systems)<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types. <br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The enrichedDescription is the security description of the normalized holding<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrichedDescription")]
		public string EnrichedDescription { get; set; }
		
		/// <summary>
		/// The quantity of the employee stock options that are already exercised or bought by the employee.<br><b>Note</b>: Once the employee stock options is exercised, they are either converted to cash value or equity positions depending on the FI. The exercised quantity field is only applicable to employee stock options.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exercisedQuantity")]
		public System.Nullable<System.Double> ExercisedQuantity { get; set; }
		
		/// <summary>
		/// The date on which an option, right or warrant expires.<br><b>Note</b>: The expiration date field is only applicable to options and employee stock options.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expirationDate")]
		public string ExpirationDate { get; set; }
		
		/// <summary>
		/// The date on which equity awards like ESOP, RSU, etc., are issued or granted.<br><b>Note</b>: The grant date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grantDate")]
		public string GrantDate { get; set; }
		
		/// <summary>
		/// Type of holding<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="holdingType")]
		public DataExtractsHoldingHoldingType HoldingType { get; set; }
		
		/// <summary>
		/// Unique identifier for the security added in the system. This is the primary key of the holding resource.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// The interest rate on a CD.<br><b>Note</b>: The interest rate field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interestRate")]
		public System.Nullable<System.Double> InterestRate { get; set; }
		
		/// <summary>
		/// Indicates that the holding is a short trading.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isShort")]
		public System.Nullable<System.Boolean> IsShort { get; set; }
		
		/// <summary>
		/// The ISIN (International Securities Identification Number) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Note</b>: The ISIN field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isin")]
		public string Isin { get; set; }
		
		/// <summary>
		/// The date when the information was last updated in the system.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// Indicates the security match status id of the investment option identified during security normalization.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchStatus")]
		public string MatchStatus { get; set; }
		
		/// <summary>
		/// The stated maturity date of a bond or CD.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maturityDate")]
		public string MaturityDate { get; set; }
		
		/// <summary>
		/// The type of the option position (i.e., put or call).<br><b>Note</b>: The option type field is only applicable to options.<br><br><b>Applicable containers</b>: investment<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="optionType")]
		public DataExtractsHoldingOptionType OptionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Money Price { get; set; }
		
		/// <summary>
		/// Unique identifier for the user's association with the provider.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerAccountId")]
		public System.Nullable<System.Int64> ProviderAccountId { get; set; }
		
		/// <summary>
		/// The quantity held for the holding.<br><b>Note</b>: Only for bonds the quantity field indicates the normalized quantity and not the quantity aggregated from the site. The quantity field is only applicable to restricted stock units/awards, performance units, currency, and commodity.<br>For insurance container, the field is only applicable for insurance annuity and variable life insurance types.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		/// <summary>
		/// Indicates the security style of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityStyle")]
		public string SecurityStyle { get; set; }
		
		/// <summary>
		/// Indicates the security type of holding identified through the security service.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="securityType")]
		public string SecurityType { get; set; }
		
		/// <summary>
		/// The SEDOL (Stock Exchange Daily Official List) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sedol")]
		public string Sedol { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spread")]
		public Money Spread { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strikePrice")]
		public Money StrikePrice { get; set; }
		
		/// <summary>
		/// The symbol of the security.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		/// <summary>
		/// The fixed duration for which the bond or CD is issued.<br><b>Note</b>: The term field is only applicable to CD.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="term")]
		public string Term { get; set; }
		
		/// <summary>
		/// Indicates the number of unvested quantity or units.<br><b>Note</b>: The unvested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unvestedQuantity")]
		public System.Nullable<System.Double> UnvestedQuantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unvestedValue")]
		public Money UnvestedValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Money Value { get; set; }
		
		/// <summary>
		/// The quantity of units or shares that are already vested on a vest date.<br><b>Note</b>: The vested quantity field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vestedQuantity")]
		public System.Nullable<System.Double> VestedQuantity { get; set; }
		
		/// <summary>
		/// The number of vested shares that can be exercised by the employee. It is usually equal to the vested quantity.<br><b>Note</b>: The vested shares exercisable field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vestedSharesExercisable")]
		public System.Nullable<System.Double> VestedSharesExercisable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vestedValue")]
		public Money VestedValue { get; set; }
		
		/// <summary>
		/// The date on which a RSU, RSA, or an employee stock options become vested.<br><b>Note</b>: The vesting date field is only applicable to employee stock options, restricted stock units/awards, performance units, etc.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vestingDate")]
		public string VestingDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HoldingAssetClassificationListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="assetClassificationList")]
		public AssetClassificationList[] AssetClassificationList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HoldingResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="holding")]
		public Holding[] Holding { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HoldingSecuritiesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="holding")]
		public SecurityHolding[] Holding { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SecurityHolding
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="security")]
		public Security Security { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Security
	{
		
		/// <summary>
		/// The method in which interest is accrued or earned.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accrualMethod")]
		public string AccrualMethod { get; set; }
		
		/// <summary>
		/// Agency factor of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyFactor")]
		public System.Nullable<System.Double> AgencyFactor { get; set; }
		
		/// <summary>
		/// Next call date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callDate")]
		public string CallDate { get; set; }
		
		/// <summary>
		/// Next call price of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callPrice")]
		public System.Nullable<System.Double> CallPrice { get; set; }
		
		/// <summary>
		/// cdsc fund flag of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cdscFundFlag")]
		public System.Nullable<System.Boolean> CdscFundFlag { get; set; }
		
		/// <summary>
		/// <b>true</b>:Closed for all investors , <b>false</b>: Open to all investors.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closedFlag")]
		public System.Nullable<System.Boolean> ClosedFlag { get; set; }
		
		/// <summary>
		/// A CUSIP is a nine-character alphanumeric code that identifies a North American financial security for the purposes of facilitating clearing and settlement of trades.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cusip")]
		public string Cusip { get; set; }
		
		/// <summary>
		/// The description (name) of the security. For example, Cisco Systems.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Flag indicating federal taxable.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="federalTaxable")]
		public System.Nullable<System.Boolean> FederalTaxable { get; set; }
		
		/// <summary>
		/// <b>1</b>- indicates Eligible,<b>0</b>- indicates firm is not eligible.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firmEligible")]
		public string FirmEligible { get; set; }
		
		/// <summary>
		/// First coupon date of security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstCouponDate")]
		public string FirstCouponDate { get; set; }
		
		/// <summary>
		/// Coupon Frequency.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public System.Nullable<System.Int32> Frequency { get; set; }
		
		/// <summary>
		/// Mutual Fund Family Name.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fundFamily")]
		public string FundFamily { get; set; }
		
		/// <summary>
		/// GICS Sector is a categorization the S&P assigns to all publically traded companies. <br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gicsSector")]
		public string GicsSector { get; set; }
		
		/// <summary>
		/// The unique identifier of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// ISO 4217 currency code indicating income currency of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="incomeCurrency")]
		public string IncomeCurrency { get; set; }
		
		/// <summary>
		/// The rate of interest paid annually, expressed as a percentage of the bond's par or face value.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interestRate")]
		public System.Nullable<System.Double> InterestRate { get; set; }
		
		/// <summary>
		/// Indicates whether the security is a dummy security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDummySecurity")]
		public System.Nullable<System.Boolean> IsDummySecurity { get; set; }
		
		/// <summary>
		/// Flag indicating a dummy security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEnvestnetDummySecurity")]
		public System.Nullable<System.Boolean> IsEnvestnetDummySecurity { get; set; }
		
		/// <summary>
		/// Indicates whether the security is a simulated security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSyntheticSecurity")]
		public System.Nullable<System.Boolean> IsSyntheticSecurity { get; set; }
		
		/// <summary>
		/// The International Securities Identification Number (ISIN) is used worldwide to identify specific securities. It is equivalent to CUSIP for international markets.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isin")]
		public string Isin { get; set; }
		
		/// <summary>
		/// Issue date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issueDate")]
		public string IssueDate { get; set; }
		
		/// <summary>
		/// Price units corresponding to the security style. This is used to derive actual price of the security from market value.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issueTypeMultiplier")]
		public System.Nullable<System.Double> IssueTypeMultiplier { get; set; }
		
		/// <summary>
		/// Last coupon date of security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastCouponDate")]
		public string LastCouponDate { get; set; }
		
		/// <summary>
		/// The last updated date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedDate")]
		public string LastModifiedDate { get; set; }
		
		/// <summary>
		/// Maturity date of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maturityDate")]
		public string MaturityDate { get; set; }
		
		/// <summary>
		/// Minimum purchase of security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumPurchase")]
		public System.Nullable<System.Int32> MinimumPurchase { get; set; }
		
		/// <summary>
		/// Unique identifier for Moody rating on Envestnet platform.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moodyRating")]
		public string MoodyRating { get; set; }
		
		/// <summary>
		/// Unique identifier for S&P rating on Envestnet platform.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sAndPRating")]
		public string SAndPRating { get; set; }
		
		/// <summary>
		/// Identifier of the sector to which the security belongs to.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sector")]
		public string Sector { get; set; }
		
		/// <summary>
		/// The Stock Exchange Daily Official List (SEDOL) is a set of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><b>Note</b>: The SEDOL field is only applicable to the trade related transactions.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sedol")]
		public string Sedol { get; set; }
		
		/// <summary>
		/// Share class of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareClass")]
		public string ShareClass { get; set; }
		
		/// <summary>
		/// The state in which the security is taxed.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stateTaxable")]
		public System.Nullable<System.Boolean> StateTaxable { get; set; }
		
		/// <summary>
		/// Securities exchange provide the securities information at the corresponding exchanges. <br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stockExchangeDetails")]
		public StockExchangeDetail[] StockExchangeDetails { get; set; }
		
		/// <summary>
		/// Classification of the style for the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="style")]
		public string Style { get; set; }
		
		/// <summary>
		/// GICS sector ID to which the security belongs to.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subSector")]
		public string SubSector { get; set; }
		
		/// <summary>
		/// ISO 4217 currency code indicating trading currency of the security.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tradeCurrencyCode")]
		public string TradeCurrencyCode { get; set; }
		
		/// <summary>
		/// Indicates the type of security like stocks, mutual fund, etc. <br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StockExchangeDetail
	{
		
		/// <summary>
		/// Country codes are geocodes developed to represent countries and dependent areas.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// ISO codes of currency.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// An Exchange code is a four-character code used to identify stock markets and other trading exchanges within global trading.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchangeCode")]
		public string ExchangeCode { get; set; }
		
		/// <summary>
		/// Ticker symbol representing particular securities listed on an exchange.<br><br><b>Applicable containers</b>: investment, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HoldingTypeListResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="holdingType")]
		public DataExtractsHoldingHoldingType[] HoldingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoginForm
	{
		
		/// <summary>
		/// The forget password URL of the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forgetPasswordURL")]
		public string ForgetPasswordURL { get; set; }
		
		/// <summary>
		/// The type of the forms for which the user information is required.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formType")]
		public System.Nullable<LoginFormFormType> FormType { get; set; }
		
		/// <summary>
		/// The help that can be displayed to the customer in the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="help")]
		public string Help { get; set; }
		
		/// <summary>
		/// The identifier of the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// The help that can be displayed to the customer in the login form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginHelp")]
		public string LoginHelp { get; set; }
		
		/// <summary>
		/// The text displayed in the provider site while requesting the user's MFA information. This field is applicable for MFA form types only. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mfaInfoText")]
		public string MfaInfoText { get; set; }
		
		/// <summary>
		/// The title for the MFA information demanded from the user.This is the title displayed in the provider site.This field is applicable for MFA form types only. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mfaInfoTitle")]
		public string MfaInfoTitle { get; set; }
		
		/// <summary>
		/// The amount of time before which the user is expected to provide MFA information. This field is applicable for MFA form types only. This would be an useful information that could be displayed to the users. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mfaTimeout")]
		public System.Nullable<System.Int64> MfaTimeout { get; set; }
		
		/// <summary>
		/// This indicates one row in the form. The row will have one label. But it may have single or multiple fields.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="row")]
		public Row[] Row { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LoginFormFormType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		login = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		questionAndAnswer = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		token = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		image = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Row
	{
		
		/// <summary>
		/// Details of fields that belong to the row.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public Field[] Field { get; set; }
		
		/// <summary>
		/// Fields that belong to a particular choice are collected together using this field.<br><b>Recommendations</b>: All the field row choices label to be grouped and displayed as options to the customer. On choosing a particular choice field, we recommend displaying the fields relevant to them. First field choice could be selected by default.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldRowChoice")]
		public string FieldRowChoice { get; set; }
		
		/// <summary>
		/// Form denotes the set of the fields that are related. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="form")]
		public string Form { get; set; }
		
		/// <summary>
		/// Unique identifier of the row.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The label text displayed for a row in the form.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Profile
	{
		
		/// <summary>
		/// Address available in the profile page of the account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AccountAddress[] Address { get; set; }
		
		/// <summary>
		/// Email Id available in the profile page of the account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public Email[] Email { get; set; }
		
		/// <summary>
		/// Gender of the provider account holder.<br><br><b>Aggregated / Manual</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET providerAccounts/profile</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		/// <summary>
		/// Identifiers available in the profile page of the account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public Identifier[] Identifier { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Name Name { get; set; }
		
		/// <summary>
		/// Phone number available in the profile page of the account.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phoneNumber")]
		public PhoneNumber[] PhoneNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProviderAccount
	{
		
		/// <summary>
		/// The source through which the providerAccount is added in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationSource")]
		public AccountAggregationSource AggregationSource { get; set; }
		
		/// <summary>
		/// Consent Id generated through POST Consent.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consentId")]
		public System.Nullable<System.Int64> ConsentId { get; set; }
		
		/// <summary>
		/// The date on when the provider account is created in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public string CreatedDate { get; set; }
		
		/// <summary>
		/// Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public AccountDataset[] Dataset { get; set; }
		
		/// <summary>
		/// Unique identifier for the provider account resource. This is created during account addition.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Indicates whether account is a manual or aggregated provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isManual")]
		public System.Nullable<System.Boolean> IsManual { get; set; }
		
		/// <summary>
		/// Indicate when the providerAccount is last updated successfully.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// Indicates the migration status of the provider account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>GET providerAccounts/{providerAccountId}</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthMigrationStatus")]
		public AccountOauthMigrationStatus OauthMigrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferences")]
		public ProviderAccountPreferences Preferences { get; set; }
		
		/// <summary>
		/// Unique identifier for the provider resource. This denotes the provider for which the provider account id is generated by the user.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public System.Nullable<System.Int64> ProviderId { get; set; }
		
		/// <summary>
		/// Unique id generated to indicate the request.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// The status of last update attempted for the account. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DataExtractsProviderAccountStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProviderAccountPreferences
	{
		
		/// <summary>
		/// Indicates if auto-refreshes have to be triggered for the provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts?include=preferences</li><li>GET providerAccounts/{providerAccountId}?include=preferences</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAutoRefreshEnabled")]
		public System.Nullable<System.Boolean> IsAutoRefreshEnabled { get; set; }
		
		/// <summary>
		/// Indicates if the updates to the provider account should be part of the data extracts event notification or the data extract data retrieval service.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts?include=preferences</li><li>GET providerAccounts/{providerAccountId}?include=preferences</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDataExtractsEnabled")]
		public System.Nullable<System.Boolean> IsDataExtractsEnabled { get; set; }
		
		/// <summary>
		/// LinkedproviderAccountd is a providerAccountId linked by the user to the primary provider account. <br>LinkedProviderAccountId and the providerAccountId belongs to the same institution.<br><br><b>Endpoints</b>:<ul><li>POST Provider Account</li><li>PUT Provider Account</li><li>GET Provider Accounts</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedProviderAccountId")]
		public System.Nullable<System.Int64> LinkedProviderAccountId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProviderAccountDetail
	{
		
		/// <summary>
		/// The source through which the providerAccount is added in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationSource")]
		public AccountAggregationSource AggregationSource { get; set; }
		
		/// <summary>
		/// Consent Id generated through POST Consent.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consentId")]
		public long ConsentId { get; set; }
		
		/// <summary>
		/// The date on when the provider account is created in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public string CreatedDate { get; set; }
		
		/// <summary>
		/// Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public AccountDataset[] Dataset { get; set; }
		
		/// <summary>
		/// Unique identifier for the provider account resource. This is created during account addition.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Indicates whether account is a manual or aggregated provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isManual")]
		public System.Nullable<System.Boolean> IsManual { get; set; }
		
		/// <summary>
		/// Indicate when the providerAccount is last updated successfully.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// This entity gets returned in the response for only MFA based provider accounts during the add/update account polling process. This indicates that the MFA information is expected from the user to complete the process. This represents the structure of MFA form that is displayed to the user in the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginForm")]
		public LoginForm[] LoginForm { get; set; }
		
		/// <summary>
		/// Indicates the migration status of the provider account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>GET providerAccounts/{providerAccountId}</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthMigrationStatus")]
		public AccountOauthMigrationStatus OauthMigrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferences")]
		public ProviderAccountPreferences Preferences { get; set; }
		
		/// <summary>
		/// Unique identifier for the provider resource. This denotes the provider for which the provider account id is generated by the user.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public System.Nullable<System.Int64> ProviderId { get; set; }
		
		/// <summary>
		/// Unique id generated to indicate the request.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// The status of last update attempted for the account. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DataExtractsProviderAccountStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProviderAccountDetailResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="providerAccount")]
		public ProviderAccountDetail[] ProviderAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProviderAccountPreferencesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="preferences")]
		public ProviderAccountPreferences Preferences { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProviderAccountProfile
	{
		
		/// <summary>
		/// Unique identifier for profile<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/profile</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// PII related data like address, name, phoneNumber, identifier and email.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts/profile</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public Profile[] Profile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProviderAccountRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="aggregationSource")]
		public AccountAggregationSource AggregationSource { get; set; }
		
		/// <summary>
		/// Consent Id generated for the request through POST Consent.<br><br><b>Endpoints</b>:<ul><li>POST Provider Account</li><li>PUT Provider Account</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consentId")]
		public System.Nullable<System.Int64> ConsentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public ProvidersDataset[] Dataset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datasetName")]
		public AccountDatasetName[] DatasetName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="field")]
		public Field[] Field { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferences")]
		public ProviderAccountPreferences Preferences { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProvidersDataset
	{
		
		/// <summary>
		/// The name of the dataset attribute suported by the provider.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribute")]
		public Attribute[] Attribute { get; set; }
		
		/// <summary>
		/// The name of the dataset requested from the provider site<br><br><b>Account Type</b>: Manual<br><b>Endpoints</b>:<ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public AccountDatasetName Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProviderAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="providerAccount")]
		public ProviderAccount[] ProviderAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProviderAccountUserProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="providerAccount")]
		public ProviderAccountProfile[] ProviderAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProviderDetail
	{
		
		/// <summary>
		/// Indicates the priority for which the service is invoked.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ProviderDetailPRIORITY> PRIORITY { get; set; }
		
		/// <summary>
		/// AccountType supported by the provider, eg: Brokerage Cash, Current<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public string[] AccountType { get; set; }
		
		/// <summary>
		/// The screen-scraping providers that are associated to the Open Banking provider ID.<br><br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associatedProviderIds")]
		public int[] AssociatedProviderIds { get; set; }
		
		/// <summary>
		/// AuthParameter appears in the response only in case of token-based aggregation sites.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authParameter")]
		public string[] AuthParameter { get; set; }
		
		/// <summary>
		/// The authentication type enabled at the provider site. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public System.Nullable<ProviderDetailAuthType> AuthType { get; set; }
		
		/// <summary>
		/// The base URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseUrl")]
		public string BaseUrl { get; set; }
		
		/// <summary>
		/// Capability of the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><br><b>Note : </b> capability has been deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capability")]
		public Capability[] Capability { get; set; }
		
		/// <summary>
		/// Country to which the provider belongs.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryISOCode")]
		public string CountryISOCode { get; set; }
		
		/// <summary>
		/// Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public ProvidersDataset[] Dataset { get; set; }
		
		/// <summary>
		/// Favicon link of the provider.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="favicon")]
		public string Favicon { get; set; }
		
		/// <summary>
		/// Text to guide user through linking an account that belongs to the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="help")]
		public string Help { get; set; }
		
		/// <summary>
		/// Unique identifier for the provider site(e.g., financial institution sites, biller sites, lender sites, etc.).<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Indicates that the site has been added by the user at least once.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAddedByUser")]
		public string IsAddedByUser { get; set; }
		
		/// <summary>
		/// Indicates if a provider site is auto-refreshed.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAutoRefreshEnabled")]
		public System.Nullable<System.Boolean> IsAutoRefreshEnabled { get; set; }
		
		/// <summary>
		/// Indicates if a provider site requires consent.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isConsentRequired")]
		public System.Nullable<System.Boolean> IsConsentRequired { get; set; }
		
		/// <summary>
		/// The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user's locale. The language follows the two letter ISO code.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageISOCode")]
		public string LanguageISOCode { get; set; }
		
		/// <summary>
		/// Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public string LastModified { get; set; }
		
		/// <summary>
		/// This entity represents the structure of the login or MFA form that is displayed to the user at the provider site. For performance reasons, this field is returned only when a single provider is requested in the request.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginForm")]
		public LoginForm[] LoginForm { get; set; }
		
		/// <summary>
		/// The login URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginUrl")]
		public string LoginUrl { get; set; }
		
		/// <summary>
		/// The logo link of the provider institution. The link will return the logo in the PNG format.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// The name of a provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The primary language of the site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryLanguageISOCode")]
		public string PrimaryLanguageISOCode { get; set; }
		
		/// <summary>
		/// Determines if the provider is supported for the cobrand (customer), is in the beta stage, etc. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ProviderDetailStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProviderDetailPRIORITY
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POPULAR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUGGESTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COBRAND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEARCH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProviderDetailAuthType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OAUTH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREDENTIALS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MFA_CREDENTIALS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProviderDetailStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Supported = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Beta = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unsupported = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProviderDetailResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public ProviderDetail[] Provider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProviderResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public Providers[] Provider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Providers
	{
		
		/// <summary>
		/// Indicates the priority for which the service is invoked.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ProviderDetailPRIORITY PRIORITY { get; set; }
		
		/// <summary>
		/// AccountType supported by the provider, eg: Brokerage Cash, Current<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public string[] AccountType { get; set; }
		
		/// <summary>
		/// The screen-scraping providers that are associated to the Open Banking provider ID.<br><br><b>Applicable containers</b>: All Containers<br><b>Endpoints</b>:<ul><li>GET providers</li><li>GET providers/{providerId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="associatedProviderIds")]
		public int[] AssociatedProviderIds { get; set; }
		
		/// <summary>
		/// AuthParameter appears in the response only in case of token-based aggregation sites.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authParameter")]
		public string[] AuthParameter { get; set; }
		
		/// <summary>
		/// The authentication type enabled at the provider site. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public ProviderDetailAuthType AuthType { get; set; }
		
		/// <summary>
		/// The base URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseUrl")]
		public string BaseUrl { get; set; }
		
		/// <summary>
		/// Capability of the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul><br><b>Note : </b> capability has been deprecated
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capability")]
		public Capability[] Capability { get; set; }
		
		/// <summary>
		/// Country to which the provider belongs.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryISOCode")]
		public string CountryISOCode { get; set; }
		
		/// <summary>
		/// Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public ProvidersDataset[] Dataset { get; set; }
		
		/// <summary>
		/// Favicon link of the provider.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="favicon")]
		public string Favicon { get; set; }
		
		/// <summary>
		/// The forget password URL of the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="forgetPasswordUrl")]
		public string ForgetPasswordUrl { get; set; }
		
		/// <summary>
		/// Text to guide user through linking an account that belongs to the site<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="help")]
		public string Help { get; set; }
		
		/// <summary>
		/// Unique identifier for the provider site(e.g., financial institution sites, biller sites, lender sites, etc.).<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Indicates that the site has been added by the user at least once.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAddedByUser")]
		public string IsAddedByUser { get; set; }
		
		/// <summary>
		/// Indicates if a provider site is auto-refreshed.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAutoRefreshEnabled")]
		public System.Nullable<System.Boolean> IsAutoRefreshEnabled { get; set; }
		
		/// <summary>
		/// Indicates if a provider site requires consent.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isConsentRequired")]
		public System.Nullable<System.Boolean> IsConsentRequired { get; set; }
		
		/// <summary>
		/// The language in which the provider details are provided. For example, a site supports two languages English and French. English being the primary language, the provider response will be provided in French depending on the user's locale. The language follows the two letter ISO code.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageISOCode")]
		public string LanguageISOCode { get; set; }
		
		/// <summary>
		/// Determines when the provider information was updated by Yodlee. If the customer caches the data, the cache is recommended to be refreshed based on this field.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public string LastModified { get; set; }
		
		/// <summary>
		/// Help text to guide the user to choose the correct provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginHelp")]
		public string LoginHelp { get; set; }
		
		/// <summary>
		/// The login URL of the provider's site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginUrl")]
		public string LoginUrl { get; set; }
		
		/// <summary>
		/// The logo link of the provider institution. The link will return the logo in the PNG format.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// The name of a provider site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The primary language of the site.<br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryLanguageISOCode")]
		public string PrimaryLanguageISOCode { get; set; }
		
		/// <summary>
		/// Determines if the provider is supported for the cobrand (customer), is in the beta stage, etc. <br><br><b>Endpoints</b>:<ul><li>GET providers/{providerId}</li><li>GET providers</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ProviderDetailStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProvidersCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TotalCount TOTAL { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TotalCount
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProvidersCountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="provider")]
		public ProvidersCount Provider { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RuleClause
	{
		
		/// <summary>
		/// Field for which the clause is created.<br><br><br><b>Valid Values</b>:amount,description<b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="field")]
		public FieldOperationField Field { get; set; }
		
		/// <summary>
		/// The value would be the amount value in case of amount based rule clause or the string value in case of description based rule clause.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fieldValue")]
		public string FieldValue { get; set; }
		
		/// <summary>
		/// Operation for which the clause is created.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operation")]
		public FieldOperationOperation Operation { get; set; }
		
		/// <summary>
		/// Unique identifier generated for the rule clause.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleClauseId")]
		public System.Nullable<System.Int64> RuleClauseId { get; set; }
		
		/// <summary>
		/// Unique identifier generated for every rule the user creates.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userDefinedRuleId")]
		public System.Nullable<System.Int64> UserDefinedRuleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Statement
	{
		
		/// <summary>
		/// Account to which the statement belongs to.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int64> AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountDue")]
		public Money AmountDue { get; set; }
		
		/// <summary>
		/// The APR applied to the balance on the credit card account, as available in the statement.<br><b>Note:</b> In case of variable APR, the APR available on the statement might differ from the APR available at the account-level.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="apr")]
		public System.Nullable<System.Double> Apr { get; set; }
		
		/// <summary>
		/// The end date of the statement period.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingPeriodEnd")]
		public string BillingPeriodEnd { get; set; }
		
		/// <summary>
		/// The start date of the statement period.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billingPeriodStart")]
		public string BillingPeriodStart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cashAdvance")]
		public Money CashAdvance { get; set; }
		
		/// <summary>
		/// The APR applicable to cash withdrawals on the credit card account.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashApr")]
		public System.Nullable<System.Double> CashApr { get; set; }
		
		/// <summary>
		/// The date by when the minimum payment is due to be paid.<br><b>Note:</b> The due date that appears in the statement may differ from the due date at the account-level.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public string DueDate { get; set; }
		
		/// <summary>
		/// Unique identifier for the statement.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interestAmount")]
		public Money InterestAmount { get; set; }
		
		/// <summary>
		/// The field is set to true if the statement is the latest generated statement.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isLatest")]
		public System.Nullable<System.Boolean> IsLatest { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastPaymentAmount")]
		public Money LastPaymentAmount { get; set; }
		
		/// <summary>
		/// The date on which the last payment was done during the billing cycle.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastPaymentDate")]
		public string LastPaymentDate { get; set; }
		
		/// <summary>
		/// The date when the account was last updated by Yodlee.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="loanBalance")]
		public Money LoanBalance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minimumPayment")]
		public Money MinimumPayment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newCharges")]
		public Money NewCharges { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principalAmount")]
		public Money PrincipalAmount { get; set; }
		
		/// <summary>
		/// The date on which the statement is generated.<br><br><b>Applicable containers</b>: creditCard,  loan, insurance<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statementDate")]
		public string StatementDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StatementResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="statement")]
		public Statement[] Statement { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Transaction
	{
		
		/// <summary>
		/// The account's container.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public AccountCONTAINER CONTAINER { get; set; }
		
		/// <summary>
		/// The account from which the transaction was made. This is basically the primary key of the account resource. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int64> AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Money Amount { get; set; }
		
		/// <summary>
		/// Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseType")]
		public DataExtractsTransactionBaseType BaseType { get; set; }
		
		/// <summary>
		/// The name of the category assigned to the transaction. This is the category field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// The id of the category assigned to the transaction. This is the id field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public System.Nullable<System.Int64> CategoryId { get; set; }
		
		/// <summary>
		/// Indicates the source of the category, i.e., categories derived by the system or assigned/provided by the consumer. This is the source field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categorySource")]
		public AccountAggregationSource CategorySource { get; set; }
		
		/// <summary>
		/// The categoryType of the category assigned to the transaction. This is the type field of the transaction category resource. The supported values are provided by the GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryType")]
		public DataExtractsTransactionCategoryType CategoryType { get; set; }
		
		/// <summary>
		/// The checkNumber of the transaction.<br><br><b>Applicable containers</b>: bank<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="checkNumber")]
		public string CheckNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commission")]
		public Money Commission { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public string CreatedDate { get; set; }
		
		/// <summary>
		/// The CUSIP (Committee on Uniform Securities Identification Procedures) identifies the financial instruments in the United States and Canada.<br><b><br><b>Note</b></b>: The CUSIP number field applies only to trade related transactions.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cusipNumber")]
		public string CusipNumber { get; set; }
		
		/// <summary>
		/// The value provided will be either postDate or transactionDate. postDate takes higher priority than transactionDate, except for the investment container as only transactionDate is available. The availability of postDate or transactionDate depends on the provider site.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public Description Description { get; set; }
		
		/// <summary>
		/// The id of the detail category that is assigned to the transaction. The supported values are provided by GET transactions/categories.<br><br><b>Applicable containers</b>: bank,creditCard<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailCategoryId")]
		public System.Nullable<System.Int64> DetailCategoryId { get; set; }
		
		/// <summary>
		/// The high level category assigned to the transaction. The supported values are provided by the GET transactions/categories. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highLevelCategoryId")]
		public System.Nullable<System.Int64> HighLevelCategoryId { get; set; }
		
		/// <summary>
		/// For transactions involving securities, this captures the securities description.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="holdingDescription")]
		public string HoldingDescription { get; set; }
		
		/// <summary>
		/// An unique identifier for the transaction. The combination of the id and account container are unique in the system. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interest")]
		public Money Interest { get; set; }
		
		/// <summary>
		/// Indicates if the transaction is aggregated from the FI site or the consumer has manually created the transaction using the application or an API. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isManual")]
		public System.Nullable<System.Boolean> IsManual { get; set; }
		
		/// <summary>
		/// International Securities Identification Number (ISIN) standard is used worldwide to identify specific securities.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isin")]
		public string Isin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// Additional notes provided by the user for a particular  transaction through application or API services. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo")]
		public string Memo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="merchant")]
		public Merchant Merchant { get; set; }
		
		/// <summary>
		/// The parentCategoryId of the category assigned to the transaction.<br><b>Note</b>: This field will be provided in the response if the transaction is assigned to a user-created category. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentCategoryId")]
		public System.Nullable<System.Int64> ParentCategoryId { get; set; }
		
		/// <summary>
		/// The date on which the transaction is posted to the account.<br><br><b>Applicable containers</b>: bank,creditCard,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postDate")]
		public string PostDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="price")]
		public Money Price { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public Money Principal { get; set; }
		
		/// <summary>
		/// The quantity associated with the transaction.<br><b>Note</b>: The quantity field applies only to trade-related transactions.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Double> Quantity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runningBalance")]
		public Money RunningBalance { get; set; }
		
		/// <summary>
		/// SEDOL stands for Stock Exchange Daily Official List, a list of security identifiers used in the United Kingdom and Ireland for clearing purposes.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sedol")]
		public string Sedol { get; set; }
		
		/// <summary>
		/// It is the date on which the transaction is finalized, that is, the date the ownership of the security is transferred to the buyer. The settlement date is usually few days after the transaction date.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settleDate")]
		public string SettleDate { get; set; }
		
		/// <summary>
		/// A unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts.<br>Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceId")]
		public string SourceId { get; set; }
		
		/// <summary>
		/// The source through which the transaction is added to the Yodlee system.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loann<br><b>Applicable Values:</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceType")]
		public DataExtractsTransactionSourceType SourceType { get; set; }
		
		/// <summary>
		/// The status of the transaction: pending or posted.<br><b>Note</b>: Most FI sites only display posted transactions. If the FI site displays transaction status, same will be aggregated.  <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DataExtractsTransactionStatus Status { get; set; }
		
		/// <summary>
		/// The transaction subtype field provides a detailed transaction type. For example, purchase is a transaction type and the transaction subtype field indicates if the purchase was made using a debit or credit card.<br><b>Note</b>: The transaction subtype field is available only in the United States, Canada, United Kingdom, and India.<br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subType")]
		public DataExtractsTransactionSubType SubType { get; set; }
		
		/// <summary>
		/// The symbol of the security being traded.<br><b>Note</b>: The settle date field applies only to trade-related transactions. <br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="symbol")]
		public string Symbol { get; set; }
		
		/// <summary>
		/// The date the transaction happens in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionDate")]
		public string TransactionDate { get; set; }
		
		/// <summary>
		/// The nature of the transaction, i.e., deposit, refund, payment, etc.<br><b>Note</b>: The transaction type field is available only for the United States, Canada, United Kingdom, and India based provider sites. <br><br><b>Applicable containers</b>: bank,creditCard,investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// It is an identification number that is assigned to financial instruments such as stocks and bonds trading in Switzerland.<br><br><b>Applicable containers</b>: investment<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valoren")]
		public string Valoren { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionCategorizationRule
	{
		
		/// <summary>
		/// The level of the category for which the rule is created.<br><br><b>Applicable containers</b>:  creditCard, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryLevelId")]
		public System.Nullable<System.Int32> CategoryLevelId { get; set; }
		
		/// <summary>
		/// Unique identifier of the user.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memId")]
		public System.Nullable<System.Int64> MemId { get; set; }
		
		/// <summary>
		/// Details of rules. <br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ruleClauses")]
		public RuleClause[] RuleClauses { get; set; }
		
		/// <summary>
		/// The order in which the rules get executed on transactions.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rulePriority")]
		public System.Nullable<System.Int32> RulePriority { get; set; }
		
		/// <summary>
		/// Category id that is assigned to the transaction when the transaction matches the rule clause. This is the id field of the transaction category resource.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionCategorisationId")]
		public System.Nullable<System.Int64> TransactionCategorisationId { get; set; }
		
		/// <summary>
		/// Unique identifier generated for every rule the user creates.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userDefinedRuleId")]
		public System.Nullable<System.Int64> UserDefinedRuleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionCategorizationRuleInfo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public int CategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="priority")]
		public System.Nullable<System.Int32> Priority { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ruleClause")]
		public FieldOperation[] RuleClause { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public AccountAggregationSource Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionCategorizationRuleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public TransactionCategorizationRuleInfo Rule { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionCategorizationRuleResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="txnRules")]
		public TransactionCategorizationRule[] TxnRules { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionCategory
	{
		
		/// <summary>
		/// The name of the category.<br><b>Note</b>: Transaction categorization is one of the core features offered by Yodlee and the categories are assigned to the transactions by the system. Transactions can be clubbed together by the category that is assigned to them.  <br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		/// <summary>
		/// Category Classification.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="classification")]
		public System.Nullable<TransactionCategoryClassification> Classification { get; set; }
		
		/// <summary>
		/// A attribute which will always hold the first value(initial name) of Yodlee defined category attribute.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultCategoryName")]
		public string DefaultCategoryName { get; set; }
		
		/// <summary>
		/// A attribute which will always hold the first value(initial name) of Yodlee defined highLevelCategoryName attribute.<br><br><b>Applicable containers</b>: creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultHighLevelCategoryName")]
		public string DefaultHighLevelCategoryName { get; set; }
		
		/// <summary>
		/// Entity that provides detail category attributes<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detailCategory")]
		public DetailCategory[] DetailCategory { get; set; }
		
		/// <summary>
		/// The unique identifier of the high level category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highLevelCategoryId")]
		public System.Nullable<System.Int64> HighLevelCategoryId { get; set; }
		
		/// <summary>
		/// The name of the high level category. A group of similar transaction categories are clubbed together to form a high-level category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highLevelCategoryName")]
		public string HighLevelCategoryName { get; set; }
		
		/// <summary>
		/// Unique identifier of the category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Source used to identify whether the transaction category is user defined category or system created category.<br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public AccountAggregationSource Source { get; set; }
		
		/// <summary>
		/// Transaction categories and high-level categories are further mapped to five transaction category types. Customers, based on their needs can either use the transaction categories, the high-level categories, or the transaction category types. <br><br><b>Applicable containers</b>:  creditCard, investment, insurance, loan<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DataExtractsTransactionCategoryType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TransactionCategoryClassification
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERSONAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUSINESS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionCategoryRequest
	{
		
		/// <summary>
		/// Min length: 1
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string CategoryName { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentCategoryId")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int ParentCategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionCategoryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="transactionCategory")]
		public TransactionCategory[] TransactionCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public TransactionTotal TOTAL { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionTotal
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int64> Count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionCountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public TransactionCount Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public UpdateTransaction Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTransaction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public long CategoryId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categorySource")]
		public AccountAggregationSource CategorySource { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="container")]
		public AccountCONTAINER Container { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public Description Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memo")]
		public string Memo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransactionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public Transaction[] Transaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAccountInfo
	{
		
		/// <summary>
		/// Min length: 1
		/// Max length: 100
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 100
		/// Pattern: ^[a-zA-Z0-9]+$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9]+$")]
		public string AccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accountStatus")]
		public AccountAccountStatus AccountStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AccountAddress Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="amountDue")]
		public Money AmountDue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public Money Balance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="container")]
		public AccountCONTAINER Container { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public string DueDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public AccountFrequency Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homeValue")]
		public Money HomeValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeInNetWorth")]
		public string IncludeInNetWorth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isEbillEnrolled")]
		public string IsEbillEnrolled { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 250
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memo")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(250)]
		public string Memo { get; set; }
		
		/// <summary>
		/// Min length: 0
		/// Max length: 50
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string Nickname { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateAccountRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="account")]
		public UpdateAccountInfo Account { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateCategoryRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="categoryName")]
		public string CategoryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="highLevelCategoryName")]
		public string HighLevelCategoryName { get; set; }
		
		/// <summary>
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int64.MaxValue)]
		public long Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public AccountAggregationSource Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateCobrandNotificationEvent
	{
		
		/// <summary>
		/// URL to which the notification should be posted.<br><br><b>Endpoints</b>:<ul><li>GET cobrand/config/notifications/events</li></ul>
		/// Min length: 1
		/// Max length: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callbackUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
		public string CallbackUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateCobrandNotificationEventRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event")]
		public UpdateCobrandNotificationEvent Event { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateConfigsNotificationEvent
	{
		
		/// <summary>
		/// URL to which the notification should be posted.<br><br><b>Endpoints</b>:<ul><li>GET configs/notifications/events</li></ul>
		/// Min length: 1
		/// Max length: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callbackUrl")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
		public string CallbackUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateConfigsNotificationEventRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="event")]
		public UpdateConfigsNotificationEvent Event { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateUserRegistration
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public UserAddress Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Name Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferences")]
		public UserRequestPreferences Preferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segmentName")]
		public string SegmentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="address1")]
		public string Address1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address2")]
		public string Address2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address3")]
		public string Address3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="zip")]
		public string Zip { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserRequestPreferences
	{
		
		/// <summary>
		/// The currency of the user. This currency will be respected while providing the response for derived API services.<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public MoneyCurrency Currency { get; set; }
		
		/// <summary>
		/// The dateformat of the user.This attribute is just a place holder and has no impact on any other API services.
		/// Min length: 1
		/// Max length: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateFormat")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
		public string DateFormat { get; set; }
		
		/// <summary>
		/// The locale of the user. This locale will be considered for localization features like providing the provider information in the supported locale or providing category names in the transaction related services.<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public System.Nullable<UserRequestPreferencesLocale> Locale { get; set; }
		
		/// <summary>
		/// The timezone of the user. This attribute is just a place holder and has no impact on any other API services.
		/// Min length: 1
		/// Max length: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
		public string TimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserRequestPreferencesLocale
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en_US = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		en_ES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fr_CA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		zh_CN = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateUserRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UpdateUserRegistration User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateVerification
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public VerificationAccount Account { get; set; }
		
		/// <summary>
		/// Unique identifier for the account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int64> AccountId { get; set; }
		
		/// <summary>
		/// Unique identifier for the provider account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerAccountId")]
		public System.Nullable<System.Int64> ProviderAccountId { get; set; }
		
		/// <summary>
		/// The reason the account verification failed.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public System.Nullable<UpdateVerificationReason> Reason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transaction")]
		public VerificationTransaction[] Transaction { get; set; }
		
		/// <summary>
		/// The date of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationDate")]
		public string VerificationDate { get; set; }
		
		/// <summary>
		/// Unique identifier for the verification request.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationId")]
		public System.Nullable<System.Int64> VerificationId { get; set; }
		
		/// <summary>
		/// The status of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationStatus")]
		public System.Nullable<UpdateVerificationVerificationStatus> VerificationStatus { get; set; }
		
		/// <summary>
		/// The account verification type.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationType")]
		public System.Nullable<UpdateVerificationVerificationType> VerificationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerificationAccount
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountName")]
		public string AccountName { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 3
		/// Max length: 17
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(17)]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public VerificationAccountAccountType AccountType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bankTransferCode")]
		public VerificationBankTransferCode BankTransferCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VerificationAccountAccountType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVINGS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECKING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerificationBankTransferCode
	{
		
		/// <summary>
		/// The FI's branch identification number.Additional Details: The routing number of the bank account in the United States. For non-United States accounts, it is the IFSC code (India), BSB number (Australia), and sort code (United Kingdom). <br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The bank transfer code type varies depending on the region of the account origination. <br><b>Account Type</b>: Aggregated<br><b>Applicable containers</b>: bank, investment<br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST verification</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public BankTransferCodeType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateVerificationReason
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_NOT_AVAILABLE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCOUNT_HOLDER_MISMATCH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL_ACCOUNT_NUMBER_AND_BANK_TRANSFER_CODE_NOT_AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL_ACCOUNT_NUMBER_NOT_AVAILABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANK_TRANSFER_CODE_NOT_AVAILABLE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPIRED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_MISMATCH = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTRUCTION_GENERATION_ERROR = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerificationTransaction
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public Money Amount { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="baseType")]
		public DataExtractsTransactionBaseType BaseType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateVerificationVerificationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INITIATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPOSITED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UpdateVerificationVerificationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MATCHING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHALLENGE_DEPOSIT = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateVerificationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="verification")]
		public UpdateVerification Verification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatedProviderAccount
	{
		
		/// <summary>
		/// The source through which the providerAccount is added in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationSource")]
		public AccountAggregationSource AggregationSource { get; set; }
		
		/// <summary>
		/// The date on when the provider account is created in the system.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdDate")]
		public string CreatedDate { get; set; }
		
		/// <summary>
		/// Logical grouping of dataset attributes into datasets such as Basic Aggregation Data, Account Profile and Documents.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataset")]
		public AccountDataset[] Dataset { get; set; }
		
		/// <summary>
		/// Unique identifier for the provider account resource. This is created during account addition.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// Indicates whether account is a manual or aggregated provider account.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isManual")]
		public System.Nullable<System.Boolean> IsManual { get; set; }
		
		/// <summary>
		/// Indicate when the providerAccount is last updated successfully.<br><br><b>Account Type</b>: Aggregated<br><b>Endpoints</b>:<ul><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public string LastUpdated { get; set; }
		
		/// <summary>
		/// This entity gets returned in the response for only MFA based provider accounts during the add/update account polling process. This indicates that the MFA information is expected from the user to complete the process. This represents the structure of MFA form that is displayed to the user in the provider site.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginForm")]
		public LoginForm[] LoginForm { get; set; }
		
		/// <summary>
		/// Indicates the migration status of the provider account from screen-scraping provider to the Open Banking provider. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>GET providerAccounts/{providerAccountId}</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthMigrationStatus")]
		public AccountOauthMigrationStatus OauthMigrationStatus { get; set; }
		
		/// <summary>
		/// Unique identifier for the provider resource. This denotes the provider for which the provider account id is generated by the user.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerId")]
		public System.Nullable<System.Int64> ProviderId { get; set; }
		
		/// <summary>
		/// Unique id generated to indicate the request.<br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// The status of last update attempted for the account. <br><br><b>Endpoints</b>:<ul><li>GET providerAccounts</li><li>POST providerAccounts</li><li>PUT providerAccounts/{providerAccountId}</li><li>GET providerAccounts/{providerAccountId}</li><li>GET dataExtracts/userData</li></ul><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public DataExtractsProviderAccountStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdatedProviderAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="providerAccount")]
		public UpdatedProviderAccount[] ProviderAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		/// <summary>
		/// The unique identifier of a consumer/user in Yodlee system for whom the API services would be accessed for.<br><br><b>Endpoints</b>:<ul><li>POST user/samlLogin</li><li>POST user/register</li><li>GET user</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// The login name of the user used for authentication.<br><br><b>Endpoints</b>:<ul><li>POST user/register</li><li>GET user</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginName")]
		public string LoginName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Name Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferences")]
		public UserResponsePreferences Preferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleType")]
		public System.Nullable<UserRoleType> RoleType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="session")]
		public UserSession Session { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserResponsePreferences
	{
		
		/// <summary>
		/// The currency of the user. This currency will be respected while providing the response for derived API services.<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public MoneyCurrency Currency { get; set; }
		
		/// <summary>
		/// The dateformat of the user.This attribute is just a place holder and has no impact on any other API services.
		/// Min length: 1
		/// Max length: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateFormat")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
		public string DateFormat { get; set; }
		
		/// <summary>
		/// The locale of the user. This locale will be considered for localization features like providing the provider information in the supported locale or providing category names in the transaction related services.<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public UserRequestPreferencesLocale Locale { get; set; }
		
		/// <summary>
		/// The timezone of the user. This attribute is just a place holder and has no impact on any other API services.
		/// Min length: 1
		/// Max length: 2147483647
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(2147483647)]
		public string TimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserRoleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INDIVIDUAL = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserSession
	{
		
		/// <summary>
		/// Session provided for a valid user to access API services upon successful authentication.<br><br><b>Endpoints</b>:<ul><li>POST user/samlLogin</li><li>POST user/register</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userSession")]
		public string UserSession1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAccessToken
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessTokens")]
		public AccessTokens[] AccessTokens { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserAccessTokensResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserAccessToken User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public UserAddress Address { get; set; }
		
		/// <summary>
		/// The email address of the user.<br><br><b>Endpoints</b>:<ul><li>GET user</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// The unique identifier of a consumer/user in Yodlee system for whom the API services would be accessed for.<br><br><b>Endpoints</b>:<ul><li>POST user/samlLogin</li><li>POST user/register</li><li>GET user</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// The login name of the user used for authentication.<br><br><b>Endpoints</b>:<ul><li>POST user/register</li><li>GET user</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="loginName")]
		public string LoginName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Name Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferences")]
		public UserResponsePreferences Preferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleType")]
		public UserRoleType RoleType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segmentName")]
		public string SegmentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserDetailResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserDetail User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserRegistration
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public UserAddress Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Required
		/// Min length: 3
		/// Max length: 150
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="loginName")]
		[System.ComponentModel.DataAnnotations.MinLength(3)]
		[System.ComponentModel.DataAnnotations.MaxLength(150)]
		public string LoginName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Name Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferences")]
		public UserRequestPreferences Preferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="segmentName")]
		public string SegmentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserRegistration User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public User User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Verification
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public VerificationAccount Account { get; set; }
		
		/// <summary>
		/// Unique identifier for the account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int64> AccountId { get; set; }
		
		/// <summary>
		/// Unique identifier for the provider account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerAccountId")]
		public System.Nullable<System.Int64> ProviderAccountId { get; set; }
		
		/// <summary>
		/// The reason the account verification failed.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public UpdateVerificationReason Reason { get; set; }
		
		/// <summary>
		/// The date of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationDate")]
		public string VerificationDate { get; set; }
		
		/// <summary>
		/// Unique identifier for the verification request.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationId")]
		public System.Nullable<System.Int64> VerificationId { get; set; }
		
		/// <summary>
		/// The status of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationStatus")]
		public UpdateVerificationVerificationStatus VerificationStatus { get; set; }
		
		/// <summary>
		/// The account verification type.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationType")]
		public UpdateVerificationVerificationType VerificationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerificationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="verification")]
		public Verification Verification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerificationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="verification")]
		public Verification[] Verification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerificationStatus
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public VerificationAccount Account { get; set; }
		
		/// <summary>
		/// Unique identifier for the account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int64> AccountId { get; set; }
		
		/// <summary>
		/// Unique identifier for the provider account.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerAccountId")]
		public System.Nullable<System.Int64> ProviderAccountId { get; set; }
		
		/// <summary>
		/// The reason the account verification failed.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public UpdateVerificationReason Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remainingAttempts")]
		public System.Nullable<System.Int64> RemainingAttempts { get; set; }
		
		/// <summary>
		/// The date of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationDate")]
		public string VerificationDate { get; set; }
		
		/// <summary>
		/// Unique identifier for the verification request.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationId")]
		public System.Nullable<System.Int64> VerificationId { get; set; }
		
		/// <summary>
		/// The status of the account verification.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationStatus")]
		public UpdateVerificationVerificationStatus VerificationStatus1 { get; set; }
		
		/// <summary>
		/// The account verification type.<br><br><b>Endpoints</b>:<ul><li>POST verification</li><li>GET verification</li><li>PUT verification</li></ul><br><b>Applicable Values</b>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verificationType")]
		public UpdateVerificationVerificationType VerificationType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerificationStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="verification")]
		public VerificationStatus[] Verification { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifiedAccount
	{
		
		/// <summary>
		/// The account number as it appears on the site. (The POST accounts service response return this field as number)<br><b>Additional Details</b>:<b> Bank/ Loan/ Insurance/ Investment</b>:<br> The account number for the bank account as it appears at the site.<br><b>Credit Card</b>: The account number of the card account as it appears at the site,<br>i.e., the card number.The account number can be full or partial based on how it is displayed in the account summary page of the site.In most cases, the site does not display the full account number in the account summary page and additional navigation is required to aggregate it.<br><b>Applicable containers</b>: All Containers<br><b>Aggregated / Manual</b>: Both <br><b>Endpoints</b>:<br><ul><li>GET accounts</li><li>GET accounts/{accountId}</li><li>POST accounts</li></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountNumber")]
		public string AccountNumber { get; set; }
		
		/// <summary>
		/// The type of account that is aggregated, i.e., savings, checking, credit card, charge, HELOC, etc. The account type is derived based on the attributes of the account. <br><b>Valid Values:</b><br><b>Aggregated Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PPF</li><li>RECURRING_DEPOSIT</li><li>FSA</li><li>MONEY_MARKET</li><li>IRA</li><li>PREPAID</li></ul><b>creditCard</b><ul><li>OTHER</li><li>CREDIT</li><li>STORE</li><li>CHARGE</li><li>OTHER</li></ul><b>investment (SN 1.0)</b><ul><li>BROKERAGE_MARGIN</li><li>HSA</li><li>IRA</li><li>BROKERAGE_CASH</li><li>401K</li><li>403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE</li><li>CUSTODIAL</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE</li><li>JTTIC</li><li>JTWROS</li><li>COMMUNITY_PROPERTY</li><li>JOINT_BY_ENTIRETY</li><li>CONSERVATORSHIP</li><li>ROTH</li><li>ROTH_CONVERSION</li><li>ROLLOVER</li><li>EDUCATIONAL</li><li>529_PLAN</li><li>457_DEFERRED_COMPENSATION</li><li>401A</li><li>PSP</li><li>MPP</li><li>STOCK_BASKET</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER</li><li>CHARITABLE_LEAD</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP</li><li>UTMA</li><li>UGMA</li><li>ESOPP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>SOLE_PROPRIETORSHIP</li><li>CHURCH</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CMA</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET</li><li>SUPER_ANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN</li><li>DEFERRED_PROFIT_SHARING_PLAN</li><li>NON_REGISTERED_SAVINGS_PLAN</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN</li><li>GROUP_RETIREMENT_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN</li><li>LOCKED_IN_RETIREMENT_ACCOUNT</li><li>REGISTERED_PENSION_PLAN</li><li>TAX_FREE_SAVINGS_ACCOUNT</li><li>LIFE_INCOME_FUND</li><li>REGISTERED_RETIREMENT_INCOME_FUND</li><li>SPOUSAL_RETIREMENT_INCOME_FUND</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND</li><li>GUARANTEED_INVESTMENT_CERTIFICATES</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN</li><li>OTHER</li></ul><b>investment (SN 2.0)</b><ul><li>BROKERAGE_CASH</li><li>BROKERAGE_MARGIN</li><li>INDIVIDUAL_RETIREMENT_ACCOUNT_IRA</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_401K</li><li>EMPLOYEE_RETIREMENT_SAVINGS_PLAN_403B</li><li>TRUST</li><li>ANNUITY</li><li>SIMPLE_IRA</li><li>CUSTODIAL_ACCOUNT</li><li>BROKERAGE_CASH_OPTION</li><li>BROKERAGE_MARGIN_OPTION</li><li>INDIVIDUAL</li><li>CORPORATE_INVESTMENT_ACCOUNT</li><li>JOINT_TENANTS_TENANCY_IN_COMMON_JTIC</li><li>JOINT_TENANTS_WITH_RIGHTS_OF_SURVIVORSHIP_JTWROS</li><li>JOINT_TENANTS_COMMUNITY_PROPERTY</li><li>JOINT_TENANTS_TENANTS_BY_ENTIRETY</li><li>CONSERVATOR</li><li>ROTH_IRA</li><li>ROTH_CONVERSION</li><li>ROLLOVER_IRA</li><li>EDUCATIONAL</li><li>EDUCATIONAL_SAVINGS_PLAN_529</li><li>DEFERRED_COMPENSATION_PLAN_457</li><li>MONEY_PURCHASE_RETIREMENT_PLAN_401A</li><li>PROFIT_SHARING_PLAN</li><li>MONEY_PURCHASE_PLAN</li><li>STOCK_BASKET_ACCOUNT</li><li>LIVING_TRUST</li><li>REVOCABLE_TRUST</li><li>IRREVOCABLE_TRUST</li><li>CHARITABLE_REMAINDER_TRUST</li><li>CHARITABLE_LEAD_TRUST</li><li>CHARITABLE_GIFT_ACCOUNT</li><li>SEP_IRA</li><li>UNIFORM_TRANSFER_TO_MINORS_ACT_UTMA</li><li>UNIFORM_GIFT_TO_MINORS_ACT_UGMA</li><li>EMPLOYEE_STOCK_OWNERSHIP_PLAN_ESOP</li><li>ADMINISTRATOR</li><li>EXECUTOR</li><li>PARTNERSHIP</li><li>PROPRIETORSHIP</li><li>CHURCH_ACCOUNT</li><li>INVESTMENT_CLUB</li><li>RESTRICTED_STOCK_AWARD</li><li>CASH_MANAGEMENT_ACCOUNT</li><li>EMPLOYEE_STOCK_PURCHASE_PLAN_ESPP</li><li>PERFORMANCE_PLAN</li><li>BROKERAGE_LINK_ACCOUNT</li><li>MONEY_MARKET_ACCOUNT</li><li>SUPERANNUATION</li><li>REGISTERED_RETIREMENT_SAVINGS_PLAN_RRSP</li><li>SPOUSAL_RETIREMENT_SAVINGS_PLAN_SRSP</li><li>DEFERRED_PROFIT_SHARING_PLAN_DPSP</li><li>NON_REGISTERED_SAVINGS_PLAN_NRSP</li><li>REGISTERED_EDUCATION_SAVINGS_PLAN_RESP</li><li>GROUP_RETIREMENT_SAVINGS_PLAN_GRSP</li><li>LOCKED_IN_RETIREMENT_SAVINGS_PLAN_LRSP</li><li>RESTRICTED_LOCKED_IN_SAVINGS_PLAN_RLSP</li><li>LOCKED_IN_RETIREMENT_ACCOUNT_LIRA</li><li>REGISTERED_PENSION_PLAN_RPP</li><li>TAX_FREE_SAVINGS_ACCOUNT_TFSA</li><li>LIFE_INCOME_FUND_LIF</li><li>REGISTERED_RETIREMENT_INCOME_FUND_RIF</li><li>SPOUSAL_RETIREMENT_INCOME_FUND_SRIF</li><li>LOCKED_IN_REGISTERED_INVESTMENT_FUND_LRIF</li><li>PRESCRIBED_REGISTERED_RETIREMENT_INCOME_FUND_PRIF</li><li>GUARANTEED_INVESTMENT_CERTIFICATES_GIC</li><li>REGISTERED_DISABILITY_SAVINGS_PLAN_RDSP</li><li>DEFINED_CONTRIBUTION_PLAN</li><li>DEFINED_BENEFIT_PLAN</li><li>EMPLOYEE_STOCK_OPTION_PLAN</li><li>NONQUALIFIED_DEFERRED_COMPENSATION_PLAN_409A</li><li>KEOGH_PLAN</li><li>EMPLOYEE_RETIREMENT_ACCOUNT_ROTH_401K</li><li>DEFERRED_CONTINGENT_CAPITAL_PLAN_DCCP</li><li>EMPLOYEE_BENEFIT_PLAN</li><li>EMPLOYEE_SAVINGS_PLAN</li><li>HEALTH_SAVINGS_ACCOUNT_HSA</li><li>COVERDELL_EDUCATION_SAVINGS_ACCOUNT_ESA</li><li>TESTAMENTARY_TRUST</li><li>ESTATE</li><li>GRANTOR_RETAINED_ANNUITY_TRUST_GRAT</li><li>ADVISORY_ACCOUNT</li><li>NON_PROFIT_ORGANIZATION_501C</li><li>HEALTH_REIMBURSEMENT_ARRANGEMENT_HRA</li><li>INDIVIDUAL_SAVINGS_ACCOUNT_ISA</li><li>CASH_ISA</li><li>STOCKS_AND_SHARES_ISA</li><li>INNOVATIVE_FINANCE_ISA</li><li>JUNIOR_ISA</li><li>EMPLOYEES_PROVIDENT_FUND_ORGANIZATION_EPFO</li><li>PUBLIC_PROVIDENT_FUND_PPF</li><li>EMPLOYEES_PENSION_SCHEME_EPS</li><li>NATIONAL_PENSION_SYSTEM_NPS</li><li>INDEXED_ANNUITY</li><li>ANNUITIZED_ANNUITY</li><li>VARIABLE_ANNUITY</li><li>ROTH_403B</li><li>SPOUSAL_IRA</li><li>SPOUSAL_ROTH_IRA</li><li>SARSEP_IRA</li><li>SUBSTANTIALLY_EQUAL_PERIODIC_PAYMENTS_SEPP</li><li>OFFSHORE_TRUST</li><li>IRREVOCABLE_LIFE_INSURANCE_TRUST</li><li>INTERNATIONAL_TRUST</li><li>LIFE_INTEREST_TRUST</li><li>EMPLOYEE_BENEFIT_TRUST</li><li>PRECIOUS_METAL_ACCOUNT</li><li>INVESTMENT_LOAN_ACCOUNT</li><li>GRANTOR_RETAINED_INCOME_TRUST</li><li>PENSION_PLAN</li><li>OTHER</li></ul><b>loan</b><ul><li>MORTGAGE</li><li>INSTALLMENT_LOAN</li><li>PERSONAL_LOAN</li><li>HOME_EQUITY_LINE_OF_CREDIT</li><li>LINE_OF_CREDIT</li><li>AUTO_LOAN</li><li>STUDENT_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>AUTO_INSURANCE</li><li>HEALTH_INSURANCE</li><li>HOME_INSURANCE</li><li>LIFE_INSURANCE</li><li>ANNUITY</li><li>TRAVEL_INSURANCE</li><li>INSURANCE</li></ul><b>realEstate</b><ul> <li>REAL_ESTATE</li></ul><b>reward</b><ul><li>REWARD_POINTS</li></ul><b>Manual Account Type</b><br><b>bank</b><ul><li>CHECKING</li><li>SAVINGS</li><li>CD</li><li>PREPAID</li></ul><b>credit</b><ul>  <li>CREDIT</li></ul><b>loan</b><ul>  <li>PERSONAL_LOAN</li><li>HOME_LOAN</li></ul><b>insurance</b><ul><li>INSURANCE</li><li>ANNUITY</li></ul><b>investment</b><ul><li>BROKERAGE_CASH</li></ul><br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountType")]
		public string AccountType { get; set; }
		
		/// <summary>
		/// Bank and branch identification information.<br><b>Aggregated / Manual</b>: Aggregated<br><b>Applicable containers</b>: bank, investment, loan<br><b>Endpoints</b>:<br><ul></ul>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bankTransferCode")]
		public BankTransferCode[] BankTransferCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fullAccountNumber")]
		public string FullAccountNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="holder")]
		public AccountHolder[] Holder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int64> Id { get; set; }
		
		/// <summary>
		/// The primary key of the provider account resource.<br><br><b>Aggregated / Manual</b>: Both <br><b>Applicable containers</b>: All containers<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerAccountId")]
		public System.Nullable<System.Int64> ProviderAccountId { get; set; }
		
		/// <summary>
		/// <b>Applicable containers</b>: reward, bank, creditCard, investment, loan, insurance, realEstate,  otherLiabilities<br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="providerName")]
		public string ProviderName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyAccount
	{
		
		[System.Runtime.Serialization.DataMember(Name="account")]
		public VerifiedAccount[] Account { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionCriteria")]
		public VerifyTransactionCriteria[] TransactionCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyTransactionCriteria
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="amount")]
		public double Amount { get; set; }
		
		/// <summary>
		/// Indicates if the transaction appears as a debit or a credit transaction in the account. <br><br><b>Applicable containers</b>: bank,creditCard,investment,insurance,loan<br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baseType")]
		public DataExtractsTransactionBaseType BaseType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateVariance")]
		public string DateVariance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keyword")]
		public string Keyword { get; set; }
		
		/// <summary>
		/// Indicates if the criteria is matched or not. <br><b>Applicable Values</b><br>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matched")]
		public System.Nullable<VerifyTransactionCriteriaMatched> Matched { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verifiedTransaction")]
		public Transaction[] VerifiedTransaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VerifyTransactionCriteriaMatched
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyAccountRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="accountId")]
		public System.Nullable<System.Int64> AccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="container")]
		public AccountCONTAINER Container { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionCriteria")]
		public VerifyTransactionCriteria[] TransactionCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyAccountResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="verifyAccount")]
		public VerifyAccount VerifyAccount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class YodleeError
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public string ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referenceCode")]
		public string ReferenceCode { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get Accounts
		/// The get accounts service provides information about accounts added by the user.<br>By default, this service returns information for active and to be closed accounts.<br>If requestId is provided, the accounts that are updated in the context of the requestId will be provided in the response.<br><br><b>Note:</b><br><li>fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.</li><li>fullAccountNumberList, PII (Personal Identifiable Information) and holder details are not available by default, as it is a premium feature that needs security approval. This will not be available for testing in Sandbox environment.</li>
		/// GetAllAccounts accounts
		/// </summary>
		/// <param name="accountId">Comma separated accountIds.</param>
		/// <param name="container">bank/creditCard/investment/insurance/loan/reward/realEstate/otherAssets/otherLiabilities</param>
		/// <param name="include">profile, holder, fullAccountNumber, fullAccountNumberList, paymentProfile, autoRefresh<br><b>Note:</b>fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.</param>
		/// <param name="providerAccountId">Comma separated providerAccountIds.</param>
		/// <param name="requestId">The unique identifier that returns contextual data</param>
		/// <param name="status">ACTIVE,INACTIVE,TO_BE_CLOSED,CLOSED</param>
		/// <returns>OK</returns>
		public async Task GetAllAccountsAsync(string accountId, string container, string include, string providerAccountId, string requestId, string status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts?accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&container=" + (container==null? "" : System.Uri.EscapeDataString(container))+"&include=" + (include==null? "" : System.Uri.EscapeDataString(include))+"&providerAccountId=" + (providerAccountId==null? "" : System.Uri.EscapeDataString(providerAccountId))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add Manual Account
		/// The add account service is used to add manual accounts.<br>The response of add account service includes the account name , account number and Yodlee generated account id.<br>All manual accounts added will be included as part of networth calculation by default.<br>Add manual account support is available for bank, card, investment, insurance and loan container only.<br><br><b>Note:</b> <li>A real estate account addition is only supported for SYSTEM and MANUAL valuation type.</li>
		/// CreateManualAccount accounts
		/// </summary>
		/// <param name="requestBody">accountParam</param>
		/// <returns>OK</returns>
		public async Task CreateManualAccountAsync(CreateAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Evaluate Address
		/// Use this service to validate the address before adding the real estate account.<br>If the address is valid, the service will return the complete address information.<br>The response will contain multiple addresses if the user-provided input matches with multiple entries in the vendor database.<br>In the case of multiple matches, the user can select the appropriate address from the list and then invoke the add account service with the complete address.<br><br><b>Note:</b> <li>Yodlee recommends to use this service before adding the real estate account to avoid failures.</li>
		/// EvaluateAddress accounts/evaluateAddress
		/// </summary>
		/// <param name="requestBody">addressParam</param>
		/// <returns>OK</returns>
		public async Task EvaluateAddressAsync(EvaluateAddressRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/evaluateAddress";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Historical Balances
		/// The historical balances service is used to retrieve the historical balances for an account or a user.<br>Historical balances are daily (D), weekly (W), and monthly (M). <br>The interval input should be passed as D, W, and M to retrieve the desired historical balances. The default interval is daily (D). <br>When no account id is provided, historical balances of the accounts that are active, to be closed, and closed are provided in the response. <br>If the fromDate and toDate are not passed, the last 90 days of data will be provided. <br>The fromDate and toDate should be passed in the YYYY-MM-DD format. <br>The date field in the response denotes the date for which the balance is requested.<br>includeCF needs to be sent as true if the customer wants to return carried forward balances for a date when the data is not available. <br>asofDate field in the response denotes the date as of which the balance was updated for that account.<br>When there is no balance available for a requested date and if includeCF is sent as true, the previous date for which the balance is available is provided in the response. <br>When there is no previous balance available, no data will be sent.
		/// GetHistoricalBalances accounts/historicalBalances
		/// </summary>
		/// <param name="accountId">accountId</param>
		/// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD)</param>
		/// <param name="includeCF">Consider carry forward logic for missing balances</param>
		/// <param name="interval">D-daily, W-weekly or M-monthly</param>
		/// <param name="skip">skip (Min 0)</param>
		/// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD)</param>
		/// <param name="top">top (Max 500)</param>
		/// <returns>OK</returns>
		public async Task GetHistoricalBalancesAsync(string accountId, string fromDate, bool includeCF, string interval, int skip, string toDate, int top, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/historicalBalances?accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&includeCF="+includeCF+"&interval=" + (interval==null? "" : System.Uri.EscapeDataString(interval))+"&skip="+skip+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate))+"&top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Account
		/// The delete account service allows an account to be deleted.<br>This service does not return a response. The HTTP response code is 204 (Success with no content).<br>
		/// DeleteAccount accounts/{accountId}
		/// </summary>
		/// <param name="accountId">accountId</param>
		public async Task DeleteAccountAsync(long accountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+accountId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Account Details
		/// The get account details service provides detailed information of an account.<br><br><b>Note:</b><li>fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.</li>
		/// GetAccount accounts/{accountId}
		/// </summary>
		/// <param name="accountId">accountId</param>
		/// <param name="include">profile, holder, fullAccountNumber, fullAccountNumberList, paymentProfile, autoRefresh<br><b>Note:</b>fullAccountNumber is deprecated and is replaced with fullAccountNumberList in include parameter and response.</param>
		/// <returns>OK</returns>
		public async Task GetAccountAsync(long accountId, string include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+accountId+"?include=" + (include==null? "" : System.Uri.EscapeDataString(include));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Account
		/// The update account service is used to update manual and aggregated accounts.<br>The HTTP response code is 204 (Success without content).<br>Update manual account support is available for bank, card, investment, insurance, loan, otherAssets, otherLiabilities and realEstate containers only.<br><br><b>Note:</b><li> A real estate account update is only supported for SYSTEM and MANUAL valuation type.</li><li> Attribute <b>isEbillEnrolled</b> is deprecated as it is applicable for bill accounts only.</li>
		/// UpdateAccount accounts/{accountId}
		/// </summary>
		/// <param name="accountId">accountId</param>
		/// <param name="requestBody">accountRequest</param>
		public async Task UpdateAccountAsync(long accountId, UpdateAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "accounts/"+accountId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get API Keys
		/// This endpoint provides the list of API keys that exist for a customer.<br>You can use one of the following authorization methods to access this API:<br><ol><li>cobsession</li><li>JWT token</li></ol><b>Notes:</b><li>This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment.
		/// GetApiKeys auth/apiKey
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetApiKeysAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth/apiKey";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate API Key
		/// This endpoint is used to generate an API key. The RSA public key you provide should be in 2048 bit PKCS#8 encoded format. <br>A public key is a mandatory input for generating the API key.<br/>The public key should be a unique key. The apiKeyId you get in the response is what you should use to generate the JWT token.<br> You can use one of the following authorization methods to access<br/>this API:<br><ol><li>cobsession</li><li>JWT token</li></ol> Alternatively, you can use base 64 encoded cobrandLogin and cobrandPassword in the Authorization header (Format: Authorization: Basic <encoded value of cobrandLogin: cobrandPassword>)<br><br><b>Note:</b><br><li>This service is not available in developer sandbox environment and will be made available for testing in your dedicated environment. The content type has to be passed as application/json for the body parameter.</li>
		/// GenerateApiKey auth/apiKey
		/// </summary>
		/// <param name="requestBody">apiKeyRequest</param>
		public async Task GenerateApiKeyAsync(ApiKeyRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth/apiKey";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete API Key
		/// This endpoint allows an existing API key to be deleted.<br>You can use one of the following authorization methods to access this API:<br><ol><li>cobsession</li><li>JWT token</li></ol> <b>Notes:</b> <li>This service is not available in developer sandbox environment and will be made availablefor testing in your dedicated environment.
		/// DeleteApiKey auth/apiKey/{key}
		/// </summary>
		/// <param name="key">key</param>
		public async Task DeleteApiKeyAsync(string key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth/apiKey/"+ (key==null? "" : System.Uri.EscapeDataString(key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Token
		/// This endpoint revokes the token passed in the Authorization header. This service is applicable for JWT-based (and all API key-based) authentication and also client credential (clientId and secret) based authentication. This service does not return a response body. The HTTP response code is 204 (success with no content). <br>Tokens generally have limited lifetime of up to 30 minutes. You will call this service when you finish working with one user, and you want to delete the valid token rather than simply letting it expire.<br><br><b>Note:</b> <li>Revoking an access token (either type, admin or a user token) can take up to 2 minutes, as the tokens are stored on a distributed system.<br/>
		/// DeleteToken auth/token
		/// </summary>
		public async Task DeleteTokenAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth/token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generate Access Token
		/// <b>Generate Access Token using client credential authentication.</b><br>This service returns access tokens required to access Yodlee 1.1 APIs. These tokens are the simplest and easiest of several alternatives for authenticating with Yodlee servers.<br>The most commonly used services obtain data specific to an end user (your customer). For these services, you need a <b>user access token</b>. These are simply tokens created with the user name parameter (<b>loginName</b>) set to the id of your end user.  <i><br><br><b>Note:</b> You determine this id and you must ensure it's unique among all your customers.</i> <br><br>Each token issued has an associated user. The token passed in the http headers explicitly names the user referenced in that API call.<br><br>Some of the APIs do administrative work, and don't reference an end user. <br/>One example of administrative work is key management. Another example is registering a new user explicitly, with <b>POST /user/register</b> call or subscribe to webhook, with <b>POST /config/notifications/events/{eventName}</b>. <br/>To invoke these, you need an <b>admin access token</b>. Create this by passing in your admin user login name in place of a regular user name.<br><br>This service also allows for simplified registration of new users. Any time you pass in a user name not already in use, the system will automatically implicitly create a new user for you. <br>This user will naturally have very few associated details. You can later provide additional user information by calling the <b>PUT user/register service</b>.<br><br><b>Notes:</b><li>The content type has to be passed as application/x-www-form-urlencoded.<li>Upgrading to client credential authentication requires infrastructure reconfiguration. <li>Customers wishing to switch from another authentication scheme to client credential authentication, please contact Yodlee Client Services.</li>
		/// GenerateAccessToken auth/token
		/// </summary>
		public async Task GenerateAccessTokenAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "auth/token";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Subscribed Events
		/// <b>Refer GET /configs/notifications/events.</b><br>The get events service provides the list of events for which consumers subscribed <br>to receive notifications. <br>
		/// GetSubscribedEvents cobrand/config/notifications/events
		/// </summary>
		/// <param name="eventName">eventName</param>
		/// <returns>OK</returns>
		public async Task GetSubscribedEventsAsync(CobrandNotificationEventName eventName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cobrand/config/notifications/events?eventName=" + eventName;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Subscription
		/// <b>Refer DELETE /configs/notifications/events/{eventName}.</b><br>The delete events service is used to unsubscribe from an events service.<br>
		/// DeleteSubscribedEvent cobrand/config/notifications/events/{eventName}
		/// </summary>
		/// <param name="eventName">eventName</param>
		public async Task DeleteSubscribedEventAsync(CobrandNotificationEventName eventName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cobrand/config/notifications/events/"+eventName;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribe Event
		/// <b>Refer POST /configs/notifications/events/{eventName}.</b><br>The subscribe events service is used to subscribe to an event for receiving notifications.<br>The callback URL, where the notification will be posted should be provided to this service.<br>If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.<br>Customers can subscribe to REFRESH,DATA_UPDATES and AUTO_REFRESH_UPDATES event.<br><br><b>Notes</b>:<br>This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.<br>The content type has to be passed as application/json for the body parameter.<br>
		/// CreateSubscriptionEvent cobrand/config/notifications/events/{eventName}
		/// </summary>
		/// <param name="eventName">eventName</param>
		/// <param name="requestBody">eventRequest</param>
		public async Task CreateSubscriptionEventAsync(CobrandNotificationEventName eventName, CreateCobrandNotificationEventRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cobrand/config/notifications/events/"+eventName;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Subscription
		/// <b>Refer PUT /configs/notifications/events/{eventName}.</b><br>The update events service is used to update the callback URL.<br>If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.<br><b>Note:</b> The content type has to be passed as application/json for the body parameter. <br>
		/// UpdateSubscribedEvent cobrand/config/notifications/events/{eventName}
		/// </summary>
		/// <param name="eventName">eventName</param>
		/// <param name="requestBody">eventRequest</param>
		public async Task UpdateSubscribedEventAsync(CobrandNotificationEventName eventName, UpdateCobrandNotificationEventRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cobrand/config/notifications/events/"+eventName;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cobrand Login
		/// The cobrand login service authenticates a cobrand.<br>Cobrand session in the response includes the cobrand session token (cobSession) <br>which is used in subsequent API calls like registering or signing in the user. <br>The idle timeout for a cobrand session is 2 hours and the absolute timeout is 24 hours. This service can be <br>invoked to create a new cobrand session token. <br><b>Note:</b> This endpoint is deprecated for customers using the API Key-based authentication and is applicable only to customers who use the SAML-based authentication.<br>The content type has to be passed as application/json for the body parameter. <br>
		/// CobrandLogin cobrand/login
		/// </summary>
		/// <param name="requestBody">cobrandLoginRequest</param>
		/// <returns>OK</returns>
		public async Task CobrandLoginAsync(CobrandLoginRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cobrand/login";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cobrand Logout
		/// The cobrand logout service is used to log out the cobrand.<br>This service does not return a response. The HTTP response code is 204 (Success with no content).<br><b>Note:</b> This endpoint is deprecated for customers using the API Key-based authentication and is applicable only to customers who use the SAML-based authentication.<br>
		/// CobrandLogout cobrand/logout
		/// </summary>
		public async Task CobrandLogoutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cobrand/logout";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Public Key
		/// <b>Refer GET /configs/publicKey.</b><br>The get public key service provides the customer the public key that should be used to encrypt the user credentials before sending it to Yodlee.<br>This endpoint is useful only for PKI enabled.<br>
		/// GetPublicKey cobrand/publicKey
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetPublicKeyAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "cobrand/publicKey";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Subscribed Notification Events
		/// The get events service provides the list of events for which consumers subscribed to receive notifications. <br>
		/// GetSubscribedNotificationEvents configs/notifications/events
		/// </summary>
		/// <param name="eventName">eventName</param>
		/// <returns>OK</returns>
		public async Task GetSubscribedNotificationEventsAsync(CobrandNotificationEventName eventName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "configs/notifications/events?eventName=" + eventName;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Notification Subscription
		/// The delete events service is used to unsubscribe from an events service.<br>
		/// DeleteSubscribedNotificationEvent configs/notifications/events/{eventName}
		/// </summary>
		/// <param name="eventName">eventName</param>
		public async Task DeleteSubscribedNotificationEventAsync(CobrandNotificationEventName eventName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "configs/notifications/events/"+eventName;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Subscribe For Notification Event
		/// The subscribe events service is used to subscribe to an event for receiving notifications.<br>The callback URL, where the notification will be posted should be provided to this service.<br>If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.<br>Customers can subscribe to REFRESH,DATA_UPDATES and AUTO_REFRESH_UPDATES event.<br><br><b>Notes:</b><li>This service is not available in developer sandbox/test environment and will be made available for testing in your dedicated environment, once the contract is signed.<li>The content type has to be passed as application/json for the body parameter.</li>
		/// CreateSubscriptionNotificationEvent configs/notifications/events/{eventName}
		/// </summary>
		/// <param name="eventName">eventName</param>
		/// <param name="requestBody">eventRequest</param>
		public async Task CreateSubscriptionNotificationEventAsync(CobrandNotificationEventName eventName, CreateConfigsNotificationEventRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "configs/notifications/events/"+eventName;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Notification Subscription
		/// The update events service is used to update the callback URL.<br>If the callback URL is invalid or inaccessible, the subscription will be unsuccessful, and an error will be thrown.<br><br><b>Note:</b> <li>The content type has to be passed as application/json for the body parameter. <br>
		/// UpdateSubscribedNotificationEvent configs/notifications/events/{eventName}
		/// </summary>
		/// <param name="eventName">eventName</param>
		/// <param name="requestBody">eventRequest</param>
		public async Task UpdateSubscribedNotificationEventAsync(CobrandNotificationEventName eventName, UpdateConfigsNotificationEventRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "configs/notifications/events/"+eventName;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Public Key
		/// The get public key service provides the public key that should be used to encrypt user credentials while invoking POST /providerAccounts and PUT /providerAccounts endpoints.<br>This service will only work if the PKI (public key infrastructure) feature is enabled for the customer.<br><br><b>Note:</b><li> The key in the response is a string in PEM format.</li><li>This endpoint is not available in the Sandbox environment and it is useful only if the PKI feature is enabled.</li>
		/// GetPublicEncryptionKey configs/publicKey
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetPublicEncryptionKeyAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "configs/publicKey";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Events
		/// The get extracts events service is used to learn about occurrences of data extract related events. This service currently supports only the DATA_UPDATES event.<br>Passing the event name as DATA_UPDATES provides information about users for whom data has been modified in the system for the specified time range. To learn more, please refer to the <a href="https://developer.yodlee.com/docs/api/1.1/DataExtracts">dataExtracts</a> page.<br>You can retrieve data in increments of no more than 60 minutes over the period of the last 7 days from today's date.<br>This service is only invoked with either admin access token or a cobrand session.<br>
		/// GetDataExtractsEvents dataExtracts/events
		/// </summary>
		/// <param name="eventName">Event Name</param>
		/// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
		/// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
		/// <returns>OK</returns>
		public async Task GetDataExtractsEventsAsync(string eventName, string fromDate, string toDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dataExtracts/events?eventName=" + (eventName==null? "" : System.Uri.EscapeDataString(eventName))+"&fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get userData
		/// The get user data service is used to get a user's modified data for a particular period of time for accounts, transactions, holdings, and provider account information.<br>The time difference between fromDate and toDate fields cannot be more than 60 minutes.<br>By default, pagination is available for the transaction entity in this API. In the first response, the API will retrieve 500 transactions along with other data. The response header will provide a link to retrieve the next set of transactions.<br>In the response body of the first API response, totalTransactionsCount indicates the total number of transactions the API will retrieve for the user.<br>This service is only invoked with either admin access token or a cobrand session.<br/>Refer to <a href="https://developer.yodlee.com/docs/api/1.1/DataExtracts">dataExtracts</a> page for more information.<br><br><b>Note:</b><li>This service supports the localization feature and accepts locale as a header parameter.</li>
		/// GetDataExtractsUserData dataExtracts/userData
		/// </summary>
		/// <param name="fromDate">From DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
		/// <param name="loginName">Login Name</param>
		/// <param name="toDate">To DateTime (YYYY-MM-DDThh:mm:ssZ)</param>
		/// <returns>OK</returns>
		public async Task GetDataExtractsUserDataAsync(string fromDate, string loginName, string toDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dataExtracts/userData?fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&loginName=" + (loginName==null? "" : System.Uri.EscapeDataString(loginName))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Holding Summary
		/// The get holding summary service is used to get the summary of asset classifications for the user.<br>By default, accounts with status as ACTIVE and TO BE CLOSED will be considered.<br>If the include parameter value is passed as details then a summary with holdings and account information is returned.<br>
		/// GetHoldingSummary derived/holdingSummary
		/// </summary>
		/// <param name="accountIds">Comma separated accountIds</param>
		/// <param name="classificationType">e.g. Country, Sector, etc.</param>
		/// <param name="include">details</param>
		/// <returns>OK</returns>
		public async Task GetHoldingSummaryAsync(string accountIds, string classificationType, string include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "derived/holdingSummary?accountIds=" + (accountIds==null? "" : System.Uri.EscapeDataString(accountIds))+"&classificationType=" + (classificationType==null? "" : System.Uri.EscapeDataString(classificationType))+"&include=" + (include==null? "" : System.Uri.EscapeDataString(include));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Networth Summary
		/// The get networth service is used to get the networth for the user.<br>If the include parameter value is passed as details then networth with historical balances is returned. <br>
		/// GetNetworth derived/networth
		/// </summary>
		/// <param name="accountIds">comma separated accountIds</param>
		/// <param name="container">bank/creditCard/investment/insurance/loan/realEstate/otherAssets/otherLiabilities</param>
		/// <param name="fromDate">from date for balance retrieval (YYYY-MM-DD)</param>
		/// <param name="include">details</param>
		/// <param name="interval">D-daily, W-weekly or M-monthly</param>
		/// <param name="skip">skip (Min 0)</param>
		/// <param name="toDate">toDate for balance retrieval (YYYY-MM-DD)</param>
		/// <param name="top">top (Max 500)</param>
		/// <returns>OK</returns>
		public async Task GetNetworthAsync(string accountIds, string container, string fromDate, string include, string interval, int skip, string toDate, int top, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "derived/networth?accountIds=" + (accountIds==null? "" : System.Uri.EscapeDataString(accountIds))+"&container=" + (container==null? "" : System.Uri.EscapeDataString(container))+"&fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&include=" + (include==null? "" : System.Uri.EscapeDataString(include))+"&interval=" + (interval==null? "" : System.Uri.EscapeDataString(interval))+"&skip="+skip+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate))+"&top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Transaction Summary
		/// The transaction summary service provides the summary values of transactions for the given date range by category type, high-level categories, or system-defined categories.<br><br>Yodlee has the transaction data stored for a day, month, year and week per category as per the availability of user's data. If the include parameter value is passed as details, then summary details will be returned depending on the interval passed-monthly is the default.<br><br><b>Notes:</b><ol> <li> Details can be requested for only one system-defined category<li>Passing categoryType is mandatory except when the groupBy value is CATEGORY_TYPE<li>Dates will not be respected for monthly, yearly, and weekly details<li>When monthly details are requested, only the fromDate and toDate month will be respected<li>When yearly details are requested, only the fromDate and toDate year will be respected<li>For weekly data points, details will be provided for every Sunday date available within the fromDate and toDate<li>This service supports the localization feature and accepts locale as a header parameter</li></ol>
		/// GetTransactionSummary derived/transactionSummary
		/// </summary>
		/// <param name="accountId">comma separated account Ids</param>
		/// <param name="categoryId">comma separated categoryIds</param>
		/// <param name="categoryType">INCOME, EXPENSE, TRANSFER, UNCATEGORIZE or DEFERRED_COMPENSATION</param>
		/// <param name="fromDate">YYYY-MM-DD format</param>
		/// <param name="groupBy">CATEGORY_TYPE, HIGH_LEVEL_CATEGORY or CATEGORY</param>
		/// <param name="include">details</param>
		/// <param name="includeUserCategory">TRUE/FALSE</param>
		/// <param name="interval">D-daily, W-weekly, M-mothly or Y-yearly</param>
		/// <param name="toDate">YYYY-MM-DD format</param>
		/// <returns>OK</returns>
		public async Task GetTransactionSummaryAsync(string accountId, string categoryId, string categoryType, string fromDate, string groupBy, string include, bool includeUserCategory, string interval, string toDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "derived/transactionSummary?accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&categoryId=" + (categoryId==null? "" : System.Uri.EscapeDataString(categoryId))+"&categoryType=" + (categoryType==null? "" : System.Uri.EscapeDataString(categoryType))+"&fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&groupBy=" + (groupBy==null? "" : System.Uri.EscapeDataString(groupBy))+"&include=" + (include==null? "" : System.Uri.EscapeDataString(include))+"&includeUserCategory="+includeUserCategory+"&interval=" + (interval==null? "" : System.Uri.EscapeDataString(interval))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Documents
		/// The get documents service allows customers to search or retrieve metadata related to documents. <br>The API returns the document as per the input parameters passed. If no date range is provided then all downloaded documents will be retrieved. Details of deleted documents or documents associated to closed providerAccount will not be returned. <br>This API is a premium service which requires subscription in advance to use.  Please contact Yodlee Client Services for more information. <br>
		/// GetDocuments documents
		/// </summary>
		/// <param name="Keyword">The string used to search a document by its name.</param>
		/// <param name="accountId">The unique identifier of an account. Retrieve documents for a given accountId.</param>
		/// <param name="docType">Accepts only one of the following valid document types: STMT, TAX, and EBILL.</param>
		/// <param name="fromDate">The date from which documents have to be retrieved.</param>
		/// <param name="toDate">The date to which documents have to be retrieved.</param>
		/// <returns>OK</returns>
		public async Task GetDocumentsAsync(string Keyword, string accountId, string docType, string fromDate, string toDate, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents?Keyword=" + (Keyword==null? "" : System.Uri.EscapeDataString(Keyword))+"&accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&docType=" + (docType==null? "" : System.Uri.EscapeDataString(docType))+"&fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Document
		/// The delete document service allows the consumer to delete a document. The deleted document will not be returned in the get documents API. The HTTP response code is 204 (success without content).<br>Documents can be deleted only if the document related dataset attributes are subscribed.<br>
		/// DeleteDocument documents/{documentId}
		/// </summary>
		/// <param name="documentId">documentId</param>
		public async Task DeleteDocumentAsync(string documentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/"+ (documentId==null? "" : System.Uri.EscapeDataString(documentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download a Document
		/// The get document details service allows consumers to download a document. The document is provided in base64.<br>This API is a premium service which requires subscription in advance to use.  Please contact Yodlee Client Services for more information. <br>
		/// DownloadDocument documents/{documentId}
		/// </summary>
		/// <param name="documentId">documentId</param>
		/// <returns>OK</returns>
		public async Task DownloadDocumentAsync(string documentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/"+ (documentId==null? "" : System.Uri.EscapeDataString(documentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Holdings
		/// The get holdings service is used to get the list of holdings of a user.<br>Supported holding types can be employeeStockOption, moneyMarketFund, bond, etc. and is obtained using get holding type list service. <br>Asset classifications for the holdings need to be requested through the "include" parameter.<br>Asset classification information for holdings are not available by default, as it is a premium feature.<br>
		/// GetHoldings holdings
		/// </summary>
		/// <param name="accountId">Comma separated accountId</param>
		/// <param name="assetClassification_classificationType">e.g. Country, Sector, etc.</param>
		/// <param name="classificationValue">e.g. US</param>
		/// <param name="include">assetClassification</param>
		/// <param name="providerAccountId">providerAccountId</param>
		/// <returns>OK</returns>
		public async Task GetHoldingsAsync(string accountId, string assetClassification_classificationType, string classificationValue, string include, string providerAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "holdings?accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&assetClassification.classificationType=" + (assetClassification_classificationType==null? "" : System.Uri.EscapeDataString(assetClassification_classificationType))+"&classificationValue=" + (classificationValue==null? "" : System.Uri.EscapeDataString(classificationValue))+"&include=" + (include==null? "" : System.Uri.EscapeDataString(include))+"&providerAccountId=" + (providerAccountId==null? "" : System.Uri.EscapeDataString(providerAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Asset Classification List
		/// The get asset classifications list service is used to get the supported asset classifications. <br>The response includes different classification types like assetClass, country, sector, style, etc. and the values corresponding to each type.<br>
		/// GetAssetClassificationList holdings/assetClassificationList
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetAssetClassificationListAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "holdings/assetClassificationList";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Holding Type List
		/// The get holding types list service is used to get the supported holding types.<br>The response includes different holding types such as future, moneyMarketFund, stock, etc. and it returns the supported holding types <br>
		/// GetHoldingTypeList holdings/holdingTypeList
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetHoldingTypeListAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "holdings/holdingTypeList";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Security Details
		/// The get security details service is used to get all the security information for the holdings<br>
		/// GetSecurities holdings/securities
		/// </summary>
		/// <param name="holdingId">Comma separated holdingId</param>
		/// <returns>OK</returns>
		public async Task GetSecuritiesAsync(string holdingId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "holdings/securities?holdingId=" + (holdingId==null? "" : System.Uri.EscapeDataString(holdingId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Provider Accounts
		/// The get provider accounts service is used to return all the provider accounts added by the user. <br>This includes the failed and successfully added provider accounts.<br>
		/// GetAllProviderAccounts providerAccounts
		/// </summary>
		/// <param name="include">include</param>
		/// <param name="providerIds">Comma separated providerIds.</param>
		/// <returns>OK</returns>
		public async Task GetAllProviderAccountsAsync(string include, string providerIds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providerAccounts?include=" + (include==null? "" : System.Uri.EscapeDataString(include))+"&providerIds=" + (providerIds==null? "" : System.Uri.EscapeDataString(providerIds));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Account
		/// The update account API is used to:<br> <ul><li>Retrieve the latest information for accounts that belong to one providerAccount from the provider site. You must allow at least 15 min between requests.<li>Retrieve the latest information of all the eligible accounts that belong to the user.<li>Data to be retrieved from the provider site can be overridden using datasetName or dataset. If you do pass datasetName, all the datasets that are implicitly configured for the dataset will be retrieved. This action is allowed for single provider account refresh flows only.<li>Check the status of the providerAccount before invoking this API. Do not call this API to trigger any action on a providerAccount when an action is already in progress for the providerAccount.<li>If the customer has subscribed to the REFRESH event notification and invoked this API, relevant notifications will be sent to the customer.<li>A dataset may depend on another dataset for retrieval, so the response will include the requested and dependent datasets.<li>Check all the dataset additional statuses returned in the response because the provider account status is drawn from the dataset additional statuses.<li>Updating preferences using this API will trigger refreshes.<li> The content type has to be passed as application/json for the body parameter.</ul><br>-----------------------------------------------------------------------------------------------------------------------------------------<br><br><b>Update All Eligible Accounts - Notes:</b><br><ul><li>This API will trigger a refresh for all the eligible provider accounts(both OB and credential-based accounts).<li>This API will not refresh closed, inactive, or UAR accounts, or accounts with refreshes in-progress or recently refreshed non-OB accounts.<li>No parameters should be passed to this API to trigger this action.<li>Do not call this API often. Our recommendation is to call this only at the time the user logs in to your app because it can hamper other API calls performance.<li>The response only contains information for accounts that were refreshed. If no accounts are eligible for refresh, no response is returned.</ul>
		/// EditCredentialsOrRefreshProviderAccount providerAccounts
		/// </summary>
		/// <param name="providerAccountIds">comma separated providerAccountIds</param>
		/// <param name="requestBody">loginForm or field entity</param>
		/// <returns>OK</returns>
		public async Task EditCredentialsOrRefreshProviderAccountAsync(string providerAccountIds, ProviderAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providerAccounts?providerAccountIds=" + (providerAccountIds==null? "" : System.Uri.EscapeDataString(providerAccountIds));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get User Profile Details
		/// The get provider accounts profile service is used to return the user profile details that are associated to the provider account. <br>
		/// GetProviderAccountProfiles providerAccounts/profile
		/// </summary>
		/// <param name="providerAccountId">Comma separated providerAccountIds.</param>
		/// <returns>OK</returns>
		public async Task GetProviderAccountProfilesAsync(string providerAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providerAccounts/profile?providerAccountId=" + (providerAccountId==null? "" : System.Uri.EscapeDataString(providerAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Provider Account
		/// The delete provider account service is used to delete a provider account from the Yodlee system. This service also deletes the accounts that are created in the Yodlee system for that provider account. <br>This service does not return a response. The HTTP response code is 204 (Success with no content).<br>
		/// DeleteProviderAccount providerAccounts/{providerAccountId}
		/// </summary>
		/// <param name="providerAccountId">providerAccountId</param>
		/// <returns>OK</returns>
		public async Task DeleteProviderAccountAsync(long providerAccountId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providerAccounts/"+providerAccountId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Provider Account Details
		/// The get provider account details service is used to learn the status of adding accounts and updating accounts.<br>This service has to be called continuously to know the progress level of the triggered process. This service also provides the MFA information requested by the provider site.<br>When <i>include = credentials</i>, questions is passed as input, the service returns the credentials (non-password values) and questions stored in the Yodlee system for that provider account. <br><br><b>Note:</b> <li>The password and answer fields are not returned in the response.</li>
		/// GetProviderAccount providerAccounts/{providerAccountId}
		/// </summary>
		/// <param name="include">include credentials,questions</param>
		/// <param name="providerAccountId">providerAccountId</param>
		/// <param name="requestId">The unique identifier for the request that returns contextual data</param>
		/// <returns>OK</returns>
		public async Task GetProviderAccountAsync(string include, long providerAccountId, string requestId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providerAccounts/"+providerAccountId+"?include=" + (include==null? "" : System.Uri.EscapeDataString(include))+"&requestId=" + (requestId==null? "" : System.Uri.EscapeDataString(requestId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Preferences
		/// This endpoint is used to update preferences like data extracts and auto refreshes without triggering refresh for the providerAccount.<br>Setting isDataExtractsEnabled to false will not trigger data extracts notification and dataExtracts/events will not reflect any data change that is happening for the providerAccount.<br>Modified data will not be provided in the dataExtracts/userData endpoint.<br>Setting isAutoRefreshEnabled to false will not trigger auto refreshes for the provider account.<br>
		/// UpdatePreferences providerAccounts/{providerAccountId}/preferences
		/// </summary>
		/// <param name="providerAccountId">providerAccountId</param>
		/// <param name="requestBody">preferences</param>
		public async Task UpdatePreferencesAsync(long providerAccountId, ProviderAccountPreferencesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providerAccounts/"+providerAccountId+"/preferences";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Providers
		/// The get provider service is used to get all the providers that are enabled, search a provider service by name or routing number and get popular sites of a region. <br>Searching for a provider using a routing number is applicable only to the USA and Canada regions.<br>The valid values for priority are: <br>   1. cobrand: Returns providers enabled for the cobrand (Default priority)<br>   2. popular: Returns providers popular among users of the customer<br><br>Only the datasets, attributes, and containers that are enabled for the customer will be returned in the response.<br>Input for the dataset$filter should adhere to the following expression:<br><dataset.name>[<attribute.name>.container[<container> OR <container>] OR <attribute.name>.container[<container>]] <br>OR <dataset.name>[<attribute.name> OR <attribute.name>]<br><b>dataset$filter value examples:</b><br>ACCT_PROFILE[FULL_ACCT_NUMBER.container[bank OR investment OR creditCard]]<br>ACCT_PROFILE[FULL_ACCT_NUMBER.container[bank]]<br>BASIC_AGG_DATA[ACCOUNT_DETAILS.container[bank OR investment] OR HOLDINGS.container[bank]] OR ACCT_PROFILE[FULL_ACCT_NUMBER.container[bank]]<br>BASIC_AGG_DATA<br>BASIC_AGG_DATA OR ACCT_PROFILE<br>BASIC_AGG_DATA [ ACCOUNT_DETAILS OR HOLDINGS ]<br>BASIC_AGG_DATA [ ACCOUNT_DETAILS] OR DOCUMENT <br>BASIC_AGG_DATA [ BASIC_ACCOUNT_INFO OR ACCOUNT_DETAILS ] <br><br>The fullAcountNumberFields is specified to filter the providers that have paymentAccountNumber or unmaskedAccountNumber support in the FULL_ACCT_NUMBER dataset attribute.<br><b>Examples for usage of fullAccountNumberFields </b><br>dataset$filter=ACCT_PROFILE[ FULL_ACCT_NUMBER.container [ bank ]] &amp; fullAccountNumberFields=paymentAccountNumber<br>dataset$filter=ACCT_PROFILE[ FULL_ACCT_NUMBER.container [ bank ]] &amp; fullAccountNumberFields=unmaskedAccountNumber<br>dataset$filter=ACCT_PROFILE[ FULL_ACCT_NUMBER.container [ bank ]] &amp; fullAccountNumberFields=unmaskedAccountNumber,paymentAccountNumber<br><br>The skip and top parameters are used for pagination. In the skip and top parameters, pass the number of records to be skipped and retrieved, respectively.<br>The response header provides the links to retrieve the next and previous set of transactions.<br><br><b>Note:</b> <ol><li>In a product flow involving user interaction, Yodlee recommends invoking this service with filters.<li>Without filters, the service may perform slowly as it takes a few minutes to return data in the response.<li>The AuthParameter appears in the response only in case of token-based aggregation sites.<li>The pagination feature only applies when the priority parameter is set as cobrand. If no values are provided in the skip and top parameters, the API will only return the first 500 records.<li>This service supports the localization feature and accepts locale as a header parameter.<li>The capability has been deprecated in query parameter and response.</li></ol>
		/// GetAllProviders providers
		/// </summary>
		/// <param name="capability">CHALLENGE_DEPOSIT_VERIFICATION - capability search is deprecated</param>
		/// <param name="datasetfilter">Expression to filter the providers by dataset(s) or dataset attribute(s). The default value will be the dataset or dataset attributes configured as default for the customer.</param>
		/// <param name="fullAccountNumberFields">Specify to filter the providers with values paymentAccountNumber,unmaskedAccountNumber.</param>
		/// <param name="institutionId">Institution Id for Single site selection</param>
		/// <param name="name">Name in minimum 1 character or routing number.</param>
		/// <param name="priority">Search priority</param>
		/// <param name="providerId">Max 5 Comma seperated Provider Ids</param>
		/// <param name="skip">skip (Min 0) - This is not applicable along with 'name' parameter.</param>
		/// <param name="top">top (Max 500) - This is not applicable along with 'name' parameter.</param>
		/// <returns>OK</returns>
		public async Task GetAllProvidersAsync(string capability, string datasetfilter, string fullAccountNumberFields, long institutionId, string name, string priority, string providerId, int skip, int top, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers?capability=" + (capability==null? "" : System.Uri.EscapeDataString(capability))+"&dataset$filter=" + (datasetfilter==null? "" : System.Uri.EscapeDataString(datasetfilter))+"&fullAccountNumberFields=" + (fullAccountNumberFields==null? "" : System.Uri.EscapeDataString(fullAccountNumberFields))+"&institutionId="+institutionId+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&priority=" + (priority==null? "" : System.Uri.EscapeDataString(priority))+"&providerId=" + (providerId==null? "" : System.Uri.EscapeDataString(providerId))+"&skip="+skip+"&top="+top;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Providers Count
		/// The count service provides the total number of providers that get returned in the GET /providers depending on the input parameters passed.<br>If you are implementing pagination for providers, call this endpoint before calling GET /providers to know the number of providers that are returned for the input parameters passed.<br>The functionality of the input parameters remains the same as that of the GET /providers endpoint<br><br><b>Note:</b> <li>The capability has been deprecated in the query parameter.</li>
		/// GetProvidersCount providers/count
		/// </summary>
		/// <param name="capability">CHALLENGE_DEPOSIT_VERIFICATION - capability search is deprecated</param>
		/// <param name="datasetfilter">Expression to filter the providers by dataset(s) or dataset attribute(s). The default value will be the dataset or dataset attributes configured as default for the customer.</param>
		/// <param name="fullAccountNumberFields">Specify to filter the providers with values paymentAccountNumber,unmaskedAccountNumber.</param>
		/// <param name="name">Name in minimum 1 character or routing number.</param>
		/// <param name="priority">Search priority</param>
		/// <returns>OK</returns>
		public async Task GetProvidersCountAsync(string capability, string datasetfilter, string fullAccountNumberFields, string name, string priority, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/count?capability=" + (capability==null? "" : System.Uri.EscapeDataString(capability))+"&dataset$filter=" + (datasetfilter==null? "" : System.Uri.EscapeDataString(datasetfilter))+"&fullAccountNumberFields=" + (fullAccountNumberFields==null? "" : System.Uri.EscapeDataString(fullAccountNumberFields))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&priority=" + (priority==null? "" : System.Uri.EscapeDataString(priority));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Provider Details
		/// The get provider detail service is used to get detailed information including the login form for a provider.<br>The response is a provider object that includes information such as name of the provider, <br>provider's base URL, a list of containers supported by the provider, the login form details of the provider, etc.<br>Only enabled datasets, attributes and containers gets returned in the response.<br><br><b>Note:</b><li>This service supports the localization feature and accepts locale as a header parameter.<li>The capability has been deprecated in the response.
		/// GetProvider providers/{providerId}
		/// </summary>
		/// <param name="providerId">providerId</param>
		/// <returns>OK</returns>
		public async Task GetProviderAsync(long providerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "providers/"+providerId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Statements
		/// The statements service is used to get the list of statement related information. <br>By default, all the latest statements of active and to be closed accounts are retrieved for the user. <br>Certain sites do not have both a statement date and a due date. When a fromDate is passed as an input, all the statements that have the due date on or after the passed date are retrieved. <br>For sites that do not have the due date, statements that have the statement date on or after the passed date are retrieved. <br>The default value of "isLatest" is true. To retrieve historical statements isLatest needs to be set to false.<br>
		/// GetStatements statements
		/// </summary>
		/// <param name="accountId">accountId</param>
		/// <param name="container">creditCard/loan/insurance</param>
		/// <param name="fromDate">from date for statement retrieval (YYYY-MM-DD)</param>
		/// <param name="isLatest">isLatest (true/false)</param>
		/// <param name="status">ACTIVE,TO_BE_CLOSED,CLOSED</param>
		/// <returns>OK</returns>
		public async Task GetStatementsAsync(string accountId, string container, string fromDate, string isLatest, string status, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "statements?accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&container=" + (container==null? "" : System.Uri.EscapeDataString(container))+"&fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&isLatest=" + (isLatest==null? "" : System.Uri.EscapeDataString(isLatest))+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Transactions
		/// The Transaction service is used to get a list of transactions for a user.<br>By default, this service returns the last 30 days of transactions from today's date.<br>The keyword parameter performs a contains search on the original, consumer, and simple description attributes, replace the special characters #, &, and + with percent-encoding values %23, %26, and %2B respectively. Eg: for -Debit# , pass the input as -Debit%23.<br>Values for categoryId parameter can be fetched from get transaction category list service.<br> The categoryId is used to filter transactions based on system-defined category as well as user-defined category.<br>User-defined categoryIds should be provided in the filter with the prefix ''U''. E.g. U10002<br>The skip and top parameters are used for pagination. In the skip and top parameters pass the number of records to be skipped and retrieved, respectively. The response header provides the links to retrieve the next and previous set of transactions.<br>Double quotes in the merchant name will be prefixed by backslashes (&#92;) in the response, e.g. Toys "R" Us. <br>sourceId is a unique ID that the provider site has assigned to the transaction. The source ID is only available for the pre-populated accounts. Pre-populated accounts are the accounts that the FI customers shares with Yodlee, so that the user does not have to add or aggregate those accounts.<br><br><b>Note</b><li> <a href="https://developer.yodlee.com/docs/api/1.1/Transaction_Data_Enrichment">TDE</a> is made available for bank and card accounts and for the US market only.The address field in the response is available only when the TDE key is turned on.<li>The pagination feature is available by default. If no values are passed in the skip and top parameters, the API will only return the first 500 transactions.<li>This service supports the localization feature and accepts locale as a header parameter.<br>
		/// GetTransactions transactions
		/// </summary>
		/// <param name="accountId">Comma separated accountIds</param>
		/// <param name="baseType">DEBIT/CREDIT</param>
		/// <param name="categoryId">Comma separated categoryIds</param>
		/// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION)</param>
		/// <param name="container">bank/creditCard/investment/insurance/loan</param>
		/// <param name="detailCategoryId">Comma separated detailCategoryIds</param>
		/// <param name="fromDate">Transaction from date(YYYY-MM-DD)</param>
		/// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds</param>
		/// <param name="keyword">Transaction search text</param>
		/// <param name="skip">skip (Min 0)</param>
		/// <param name="toDate">Transaction end date (YYYY-MM-DD)</param>
		/// <param name="top">top (Max 500)</param>
		/// <param name="type">Transaction Type(SELL,SWEEP, etc.) for bank/creditCard/investment</param>
		/// <returns>OK</returns>
		public async Task GetTransactionsAsync(string accountId, string baseType, string categoryId, string categoryType, string container, string detailCategoryId, string fromDate, string highLevelCategoryId, string keyword, int skip, string toDate, int top, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions?accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&baseType=" + (baseType==null? "" : System.Uri.EscapeDataString(baseType))+"&categoryId=" + (categoryId==null? "" : System.Uri.EscapeDataString(categoryId))+"&categoryType=" + (categoryType==null? "" : System.Uri.EscapeDataString(categoryType))+"&container=" + (container==null? "" : System.Uri.EscapeDataString(container))+"&detailCategoryId=" + (detailCategoryId==null? "" : System.Uri.EscapeDataString(detailCategoryId))+"&fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&highLevelCategoryId=" + (highLevelCategoryId==null? "" : System.Uri.EscapeDataString(highLevelCategoryId))+"&keyword=" + (keyword==null? "" : System.Uri.EscapeDataString(keyword))+"&skip="+skip+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate))+"&top="+top+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Transaction Category List
		/// The categories service returns the list of available transaction categories.<br>High level category is returned in the response only if it is opted by the customer.<br>When invoked by passing the cobrand session or admin access token, this service returns the supported transaction categories at the cobrand level. <br>When invoked by passing the cobrand session and the user session or user access token, this service returns the transaction categories <br>along with user-defined categories.<br>Double quotes in the user-defined category name will be prefixed by backslashes (&#92;) in the response, <br>e.g. Toys "R" Us.<br/>Source and id are the primary attributes of the category entity.<br><br><b>Note:</b><li>This service supports the localization feature and accepts locale as a header parameter.</li>
		/// GetTransactionCategories transactions/categories
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetTransactionCategoriesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Category
		/// The create transaction categories service is used to create user-defined categories for a system-defined category.<br>The parentCategoryId is the system-defined category id.This can be retrieved using get transaction categories service.<br>The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.<br>The HTTP response code is 201 (Created successfully).<br>
		/// CreateTransactionCategory transactions/categories
		/// </summary>
		/// <param name="requestBody">User Transaction Category in JSON format</param>
		public async Task CreateTransactionCategoryAsync(TransactionCategoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update Category
		/// The update transaction categories service is used to update the transaction category name<br>for a high level category, a system-defined category and a user-defined category.<br>The renamed category can be set back to the original name by passing an empty string for categoryName.<br>The categoryName can accept minimum of 1, maximum of 50 alphanumeric or special characters.<br>The HTTP response code is 204 (Success without content).<br>
		/// UpdateTransactionCategory transactions/categories
		/// </summary>
		/// <param name="requestBody">updateCategoryRequest</param>
		public async Task UpdateTransactionCategoryAsync(UpdateCategoryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Transaction Categorization Rules
		/// The get transaction categorization rule service is used to get all the categorization rules.<br>
		/// GetTransactionCategorizationRulesDeprecated transactions/categories/rules
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetTransactionCategorizationRulesDeprecatedAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/categories/rules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create or Run Transaction Categorization Rule
		/// The Create or Run Transaction Categorization Rule endpoint is used to: <br>Create transaction categorization rules for both system and user-defined categories.<br>Run all the transaction categorization rules to categorize transactions by calling the endpoint with action=run as the query parameter. <br><br>The input body parameters to create transaction categorization rules follow:<br>     categoryId - This field is mandatory and numeric<br>     priority - This field is optional and numeric. Priority decides the order in which the rule gets applied on transactions.<br>     ruleClause - This field is mandatory and should contain at least one rule<br>     field - The value can be description or amount<br><br>       If the field value is description then,<br>         1. operation - value can be stringEquals or stringContains<br>         2. value - value should be min of 3 and max of 50 characters<br><br>       If the field value is amount then, <br>         1. operation - value can be numberEquals, numberLessThan, numberLessThanEquals, numberGreaterThan or numberGreaterThanEquals<br>         2. value - min value 0 and a max value of 99999999999.99 is allowed<br>The HTTP response code is 201 (Created Successfully).
		/// CreateOrRunTransactionCategorizationRules transactions/categories/rules
		/// </summary>
		/// <param name="action">To run rules, pass action=run. Only value run is supported</param>
		/// <param name="ruleParam">rules(JSON format) to categorize the transactions</param>
		public async Task CreateOrRunTransactionCategorizationRulesAsync(string action, string ruleParam, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/categories/rules?action=" + (action==null? "" : System.Uri.EscapeDataString(action))+"&ruleParam=" + (ruleParam==null? "" : System.Uri.EscapeDataString(ruleParam));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Transaction Categorization Rule
		/// The delete transaction categorization rule service is used to delete the given user-defined transaction categorization rule for both system-defined category as well as user-defined category.<br>This will delete all the corresponding rule clauses associated with the rule.<br>The HTTP response code is 204 (Success without content).<br>
		/// DeleteTransactionCategorizationRule transactions/categories/rules/{ruleId}
		/// </summary>
		/// <param name="ruleId">ruleId</param>
		public async Task DeleteTransactionCategorizationRuleAsync(long ruleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/categories/rules/"+ruleId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Run Transaction Categorization Rule
		/// The run transaction categorization rule service is used to run a rule on transactions, to categorize the transactions.<br>The HTTP response code is 204 (Success with no content).<br>
		/// RunTransactionCategorizationRule transactions/categories/rules/{ruleId}
		/// </summary>
		/// <param name="ruleId">Unique id of the categorization rule</param>
		public async Task RunTransactionCategorizationRuleAsync(RunTransactionCategorizationRuleAction action, long ruleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/categories/rules/"+ruleId+"?action=" + action;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Transaction Categorization Rule
		/// The update transaction categorization rule service is used to update a categorization rule for both system-defined category as well as user-defined category.<br>ruleParam JSON input should be as explained in the create transaction categorization rule service.<br>The HTTP response code is 204 (Success without content).<br>
		/// UpdateTransactionCategorizationRule transactions/categories/rules/{ruleId}
		/// </summary>
		/// <param name="ruleId">ruleId</param>
		/// <param name="requestBody">transactionCategoriesRuleRequest</param>
		public async Task UpdateTransactionCategorizationRuleAsync(long ruleId, TransactionCategorizationRuleRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/categories/rules/"+ruleId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Transaction Categorization Rules
		/// The get transaction categorization rule service is used to get all the categorization rules.<br>
		/// GetTransactionCategorizationRules transactions/categories/txnRules
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetTransactionCategorizationRulesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/categories/txnRules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Category
		/// The delete transaction categories service is used to delete the given user-defined category.<br>The HTTP response code is 204 (Success without content).<br>
		/// DeleteTransactionCategory transactions/categories/{categoryId}
		/// </summary>
		/// <param name="categoryId">categoryId</param>
		public async Task DeleteTransactionCategoryAsync(long categoryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/categories/"+categoryId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Transactions Count
		/// The count service provides the total number of transactions for a specific user depending on the input parameters passed.<br>If you are implementing pagination for transactions, call this endpoint before calling GET /transactions to know the number of transactions that are returned for the input parameters passed.<br>The functionality of the input parameters remains the same as that of the GET /transactions endpoint.<br>
		/// GetTransactionsCount transactions/count
		/// </summary>
		/// <param name="accountId">Comma separated accountIds	</param>
		/// <param name="baseType">DEBIT/CREDIT</param>
		/// <param name="categoryId">Comma separated categoryIds</param>
		/// <param name="categoryType">Transaction Category Type(UNCATEGORIZE, INCOME, TRANSFER, EXPENSE or DEFERRED_COMPENSATION)</param>
		/// <param name="container">bank/creditCard/investment/insurance/loan</param>
		/// <param name="detailCategoryId">Comma separated detailCategoryIds</param>
		/// <param name="fromDate">Transaction from date(YYYY-MM-DD)</param>
		/// <param name="highLevelCategoryId">Comma separated highLevelCategoryIds</param>
		/// <param name="keyword">Transaction search text	</param>
		/// <param name="toDate">Transaction end date (YYYY-MM-DD)</param>
		/// <param name="type">Transaction Type(SELL,SWEEP, etc.)</param>
		/// <returns>OK</returns>
		public async Task GetTransactionsCountAsync(string accountId, string baseType, string categoryId, string categoryType, string container, string detailCategoryId, string fromDate, string highLevelCategoryId, string keyword, string toDate, string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/count?accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&baseType=" + (baseType==null? "" : System.Uri.EscapeDataString(baseType))+"&categoryId=" + (categoryId==null? "" : System.Uri.EscapeDataString(categoryId))+"&categoryType=" + (categoryType==null? "" : System.Uri.EscapeDataString(categoryType))+"&container=" + (container==null? "" : System.Uri.EscapeDataString(container))+"&detailCategoryId=" + (detailCategoryId==null? "" : System.Uri.EscapeDataString(detailCategoryId))+"&fromDate=" + (fromDate==null? "" : System.Uri.EscapeDataString(fromDate))+"&highLevelCategoryId=" + (highLevelCategoryId==null? "" : System.Uri.EscapeDataString(highLevelCategoryId))+"&keyword=" + (keyword==null? "" : System.Uri.EscapeDataString(keyword))+"&toDate=" + (toDate==null? "" : System.Uri.EscapeDataString(toDate))+"&type=" + (type==null? "" : System.Uri.EscapeDataString(type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Transaction
		/// The update transaction service is used to update the category,consumer description, memo for a transaction.<br>The HTTP response code is 204 (Success without content).<br>
		/// UpdateTransaction transactions/{transactionId}
		/// </summary>
		/// <param name="transactionId">transactionId</param>
		/// <param name="requestBody">transactionRequest</param>
		public async Task UpdateTransactionAsync(long transactionId, TransactionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "transactions/"+transactionId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get User Details
		/// The get user details service is used to get the user profile information and the application preferences set at the time of user registration.<br>
		/// GetUser user
		/// </summary>
		/// <returns>OK</returns>
		public async Task GetUserAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update User Details
		/// The update user details service is used to update user details like name, address, currency preference, etc.<br>Currency provided in the input will be respected in the <a href="https://developer.yodlee.com/api-reference#tag/Derived">derived</a> services and the amount fields in the response will be provided in the preferred currency.<br>The HTTP response code is 204 (Success without content). <br>
		/// UpdateUser user
		/// </summary>
		/// <param name="requestBody">userRequest</param>
		public async Task UpdateUserAsync(UpdateUserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Access Tokens
		/// The Get Access Tokens service is used to retrieve the access tokens for the application id(s) provided.<br>URL in the response can be used to launch the application for which token is requested.<br><br><b>Note:</b> <li>This endpoint is deprecated for customers using the API Key-based authentication and is applicable only to customers who use the SAML-based authentication.<br>
		/// GetAccessTokens user/accessTokens
		/// </summary>
		/// <param name="appIds">appIds</param>
		/// <returns>OK</returns>
		public async Task GetAccessTokensAsync(string appIds, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/accessTokens?appIds=" + (appIds==null? "" : System.Uri.EscapeDataString(appIds));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// User Logout
		/// <b>Deprecated</b>: This endpoint is deprecated for API Key-based authentication. The user logout service allows the user to log out of the application.<br>The service does not return a response body. The HTTP response code is 204 (Success with no content).<br>
		/// UserLogout user/logout
		/// </summary>
		public async Task UserLogoutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/logout";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Register User
		/// The register user service is used to register a user in Yodlee.<br>The loginName cannot include spaces and must be between 3 and 150 characters.<br>locale passed must be one of the supported locales for the customer. <br>Currency provided in the input will be respected in the derived services and the amount fields in the response will be provided in the preferred currency.<br>userParam is accepted as a body parameter. <br><br><b>Note:</b> <li>The content type has to be passed as application/json for the body parameter.</li>
		/// RegisterUser user/register
		/// </summary>
		/// <param name="requestBody">userRequest</param>
		/// <returns>Login Successful</returns>
		public async Task RegisterUserAsync(UserRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/register";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Saml Login
		/// The SAML login service is used to authenticate system users with a SAML response.<br>A new user will be created with the input provided if that user isn't already in the system.<br>For existing users, the system will make updates based on changes or new information.<br>When authentication is successful, a user session token is returned.<br><br><b>Note:</b> <li>The content type has to be passed as application/x-www-form-urlencoded. <li>issuer, source and samlResponse should be passed as body parameters.</li>
		/// SamlLogin user/samlLogin
		/// </summary>
		/// <param name="issuer">issuer</param>
		/// <param name="samlResponse">samlResponse</param>
		/// <param name="source">source</param>
		/// <returns>OK</returns>
		public async Task SamlLoginAsync(string issuer, string samlResponse, string source, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/samlLogin?issuer=" + (issuer==null? "" : System.Uri.EscapeDataString(issuer))+"&samlResponse=" + (samlResponse==null? "" : System.Uri.EscapeDataString(samlResponse))+"&source=" + (source==null? "" : System.Uri.EscapeDataString(source));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete User
		/// The delete user service is used to delete or unregister a user from Yodlee. <br>Once deleted, the information related to the users cannot be retrieved. <br>The HTTP response code is 204 (Success without content)<br>
		/// Unregister user/unregister
		/// </summary>
		public async Task UnregisterAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/unregister";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Verification Status
		/// The get verification status service is used to retrieve the verification status of all accounts for which the MS or CDV process has been initiated.<br>For the MS process, the account details object returns the aggregated information of the verified accounts. For the CDV process, the account details object returns the user provided account information.<br>
		/// GetVerificationStatus verification
		/// </summary>
		/// <param name="accountId">Comma separated accountId</param>
		/// <param name="providerAccountId">Comma separated providerAccountId</param>
		/// <param name="verificationType">verificationType</param>
		/// <returns>OK</returns>
		public async Task GetVerificationStatusAsync(string accountId, string providerAccountId, string verificationType, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "verification?accountId=" + (accountId==null? "" : System.Uri.EscapeDataString(accountId))+"&providerAccountId=" + (providerAccountId==null? "" : System.Uri.EscapeDataString(providerAccountId))+"&verificationType=" + (verificationType==null? "" : System.Uri.EscapeDataString(verificationType));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Initiaite Matching Service and Challenge Deposit
		/// The post verification service is used to initiate the matching service (MS) and the challenge deposit account verification (CDV) process to verify account ownership.<br>The MS and CDV process can verify ownership of only bank accounts (i.e., checking and savings).<br>The MS verification can be initiated only for an already aggregated account or a providerAccount.<br>The prerequisite for the MS verification process is to request the ACCT_PROFILE dataset with the HOLDER_NAME attribute.<br>In the MS verification process, a string-match of the account holder name with the registered user name is performed instantaneously. You can contact the Yodlee CustomerCare to configure the full name or only the last name match.<br>Once the CDV process is initiated Yodlee will post the microtransaction (i.e., credit and debit) in the user's account. The CDV process takes 2 to 3 days to complete as it requires the user to provide the microtransaction details.<br>The CDV process is currently supported only in the United States.<br>The verificationId in the response can be used to track the verification request.<br><br><b>Notes:</b><li>This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team's assistance to set up a dedicated environment.
		/// InitiateMatchingOrChallengeDepositeVerification verification
		/// </summary>
		/// <param name="requestBody">verification information</param>
		/// <returns>OK</returns>
		public async Task InitiateMatchingOrChallengeDepositeVerificationAsync(VerificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "verification";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verify Challenge Deposit
		/// The put verification service is used to complete the challenge deposit verification (CDV) process.<br>This service is used only by the customer of CDV flow.<br>In the CDV process, the user-provided microtransaction details (i.e., credit and debit) is matched against the microtransactions posted by Yodlee. For a successful verification of the account's ownership both the microtransaction details should match.<br>The CDV process is currently supported only in the United States.<br><br><b>Notes:</b><ul><li>This endpoint cannot be used to test the CDV functionality in the developer sandbox or test environment. You will need a money transmitter license to implement the CDV functionality and also require the Yodlee Professional Services team's assistance to set up a dedicated environment.</li></ul>
		/// VerifyChallengeDeposit verification
		/// </summary>
		/// <param name="requestBody">verification information</param>
		/// <returns>OK</returns>
		public async Task VerifyChallengeDepositAsync(UpdateVerificationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "verification";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Verify Accounts Using Transactions
		/// The verify account service is used to verify the account's ownership by  matching the transaction details with the accounts aggregated for the user.<br><ul><li>If a match is identified, the service returns details of all the accounts along with the matched transaction's details.<li>If no transaction match is found, an empty response will be returned.<li>A maximum of 5 transactionCriteria can be passed in a request.<li>The baseType, date, and amount parameters should mandatorily be passed.<li>The optional dateVariance parameter cannot be more than 7 days. For example, +7, -4, or +/-2.<li>Pass the container or accountId parameters for better performance.<li>This service supports the localization feature and accepts locale as a header parameter.</li></ul>
		/// InitiateAccountVerification verifyAccount/{providerAccountId}
		/// </summary>
		/// <param name="providerAccountId">providerAccountId</param>
		/// <param name="requestBody">verificationParam</param>
		/// <returns>OK</returns>
		public async Task InitiateAccountVerificationAsync(string providerAccountId, VerifyAccountRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "verifyAccount/"+ (providerAccountId==null? "" : System.Uri.EscapeDataString(providerAccountId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum RunTransactionCategorizationRuleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		run = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
