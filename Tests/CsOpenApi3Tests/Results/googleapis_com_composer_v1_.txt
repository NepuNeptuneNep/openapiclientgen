//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Allowed IP range with user-provided description.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AllowedIpRange
	{
		
		/// <summary>
		/// Optional. User-provided description. It must contain at most 300 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// IP address or range, defined using CIDR notation, of requests that this rule applies to. Examples: `192.168.1.1` or `192.168.0.0/16` or `2001:db8::/32` or `2001:0db8:0000:0042:0000:8a2e:0370:7334`. IP range prefixes should be properly truncated. For example, `1.2.3.4/24` should be truncated to `1.2.3.0/24`. Similarly, for IPv6, `2001:db8::1/32` should be truncated to `2001:db8::/32`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Message containing information about the result of an upgrade check operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CheckUpgradeResponse
	{
		
		/// <summary>
		/// Output only. Url for a docker build log of an upgraded image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildLogUri")]
		public string BuildLogUri { get; set; }
		
		/// <summary>
		/// Output only. Whether build has succeeded or failed on modules conflicts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containsPypiModulesConflict")]
		public System.Nullable<CheckUpgradeResponseContainsPypiModulesConflict> ContainsPypiModulesConflict { get; set; }
		
		/// <summary>
		/// Composer image for which the build was happening.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageVersion")]
		public string ImageVersion { get; set; }
		
		/// <summary>
		/// Output only. Extract from a docker image build log containing information about pypi modules conflicts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pypiConflictBuildLogExtract")]
		public string PypiConflictBuildLogExtract { get; set; }
		
		/// <summary>
		/// Pypi dependencies specified in the environment configuration, at the time when the build was triggered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pypiDependencies")]
		public System.Collections.Generic.Dictionary<string, string> PypiDependencies { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CheckUpgradeResponseContainsPypiModulesConflict
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFLICT_RESULT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONFLICT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_CONFLICT = 2,
	}
	
	/// <summary>
	/// CIDR block with an optional name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CidrBlock
	{
		
		/// <summary>
		/// CIDR block that must be specified in CIDR notation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cidrBlock")]
		public string CidrBlock1 { get; set; }
		
		/// <summary>
		/// User-defined name that identifies the CIDR block.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Configuration for Cloud Data Lineage integration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloudDataLineageIntegration
	{
		
		/// <summary>
		/// Optional. Whether or not Cloud Data Lineage integration is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// The configuration setting for Airflow database data retention mechanism.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataRetentionConfig
	{
		
		/// <summary>
		/// The configuration setting for Task Logs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskLogsRetentionConfig")]
		public TaskLogsRetentionConfig TaskLogsRetentionConfig { get; set; }
	}
	
	/// <summary>
	/// The configuration setting for Task Logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskLogsRetentionConfig
	{
		
		/// <summary>
		/// Optional. The mode of storage for Airflow workers task logs. For details, see go/composer-store-task-logs-in-cloud-logging-only-design-doc
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageMode")]
		public System.Nullable<TaskLogsRetentionConfigStorageMode> StorageMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TaskLogsRetentionConfigStorageMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TASK_LOGS_STORAGE_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_LOGGING_AND_CLOUD_STORAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_LOGGING_ONLY = 2,
	}
	
	/// <summary>
	/// The configuration of Cloud SQL instance that is used by the Apache Airflow software.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatabaseConfig
	{
		
		/// <summary>
		/// Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine zone where the Airflow database is created. If zone is provided, it must be in the region selected for the environment. If zone is not provided, a zone is automatically selected. The zone can only be set during environment creation. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zone")]
		public string Zone { get; set; }
	}
	
	/// <summary>
	/// Request to trigger database failover (only for highly resilient environments).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatabaseFailoverRequest
	{
	}
	
	/// <summary>
	/// Response for DatabaseFailoverRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DatabaseFailoverResponse
	{
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// The encryption options for the Cloud Composer environment and its dependencies.Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EncryptionConfig
	{
		
		/// <summary>
		/// Optional. Customer-managed Encryption Key available through Google's Key Management Service. Cannot be updated. If not specified, Google-managed key will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kmsKeyName")]
		public string KmsKeyName { get; set; }
	}
	
	/// <summary>
	/// An environment for running orchestration tasks.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Environment
	{
		
		/// <summary>
		/// Configuration information for an environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="config")]
		public EnvironmentConfig Config { get; set; }
		
		/// <summary>
		/// Output only. The time at which this environment was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Optional. User-defined labels for this environment. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: * Keys must conform to regexp: \p{Ll}\p{Lo}{0,62} * Values must conform to regexp: [\p{Ll}\p{Lo}\p{N}_-]{0,63} * Both keys and values are additionally constrained to be <= 128 bytes in size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public System.Collections.Generic.Dictionary<string, string> Labels { get; set; }
		
		/// <summary>
		/// The resource name of the environment, in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}" EnvironmentId must start with a lowercase letter followed by up to 63 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Reserved for future use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="satisfiesPzs")]
		public System.Nullable<System.Boolean> SatisfiesPzs { get; set; }
		
		/// <summary>
		/// The current state of the environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<EnvironmentState> State { get; set; }
		
		/// <summary>
		/// The configuration for data storage in the environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageConfig")]
		public StorageConfig StorageConfig { get; set; }
		
		/// <summary>
		/// Output only. The time at which this environment was last modified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Output only. The UUID (Universally Unique IDentifier) associated with this environment. This value is generated when the environment is created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uuid")]
		public string Uuid { get; set; }
	}
	
	/// <summary>
	/// Configuration information for an environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnvironmentConfig
	{
		
		/// <summary>
		/// Output only. The 'bring your own identity' variant of the URI of the Apache Airflow Web UI hosted within this environment, to be accessed with external identities using workforce identity federation (see [Access environments with workforce identity federation](/composer/docs/composer-2/access-environments-with-workforce-identity-federation)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airflowByoidUri")]
		public string AirflowByoidUri { get; set; }
		
		/// <summary>
		/// Output only. The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface)).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airflowUri")]
		public string AirflowUri { get; set; }
		
		/// <summary>
		/// Output only. The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using "/"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dagGcsPrefix")]
		public string DagGcsPrefix { get; set; }
		
		/// <summary>
		/// The configuration setting for Airflow database data retention mechanism.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataRetentionConfig")]
		public DataRetentionConfig DataRetentionConfig { get; set; }
		
		/// <summary>
		/// The configuration of Cloud SQL instance that is used by the Apache Airflow software.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databaseConfig")]
		public DatabaseConfig DatabaseConfig { get; set; }
		
		/// <summary>
		/// The encryption options for the Cloud Composer environment and its dependencies.Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="encryptionConfig")]
		public EncryptionConfig EncryptionConfig { get; set; }
		
		/// <summary>
		/// Optional. The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentSize")]
		public System.Nullable<EnvironmentConfigEnvironmentSize> EnvironmentSize { get; set; }
		
		/// <summary>
		/// Output only. The Kubernetes Engine cluster used to run this environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gkeCluster")]
		public string GkeCluster { get; set; }
		
		/// <summary>
		/// The configuration settings for Cloud Composer maintenance window. The following example: ``` { "startTime":"2019-08-01T01:00:00Z" "endTime":"2019-08-01T07:00:00Z" "recurrence":"FREQ=WEEKLY;BYDAY=TU,WE" } ``` would define a maintenance window between 01 and 07 hours UTC during each Tuesday and Wednesday.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maintenanceWindow")]
		public MaintenanceWindow MaintenanceWindow { get; set; }
		
		/// <summary>
		/// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterAuthorizedNetworksConfig")]
		public MasterAuthorizedNetworksConfig MasterAuthorizedNetworksConfig { get; set; }
		
		/// <summary>
		/// The configuration information for the Kubernetes Engine nodes running the Apache Airflow software.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeConfig")]
		public NodeConfig NodeConfig { get; set; }
		
		/// <summary>
		/// The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeCount")]
		public System.Nullable<System.Int32> NodeCount { get; set; }
		
		/// <summary>
		/// The configuration information for configuring a Private IP Cloud Composer environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateEnvironmentConfig")]
		public PrivateEnvironmentConfig PrivateEnvironmentConfig { get; set; }
		
		/// <summary>
		/// The Recovery settings of an environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recoveryConfig")]
		public RecoveryConfig RecoveryConfig { get; set; }
		
		/// <summary>
		/// Optional. Resilience mode of the Cloud Composer Environment. This field is supported for Cloud Composer environments in versions composer-2.2.0-airflow-*.*.* and newer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resilienceMode")]
		public System.Nullable<EnvironmentConfigResilienceMode> ResilienceMode { get; set; }
		
		/// <summary>
		/// Specifies the selection and configuration of software inside the environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="softwareConfig")]
		public SoftwareConfig SoftwareConfig { get; set; }
		
		/// <summary>
		/// The configuration settings for the Airflow web server App Engine instance. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webServerConfig")]
		public WebServerConfig WebServerConfig { get; set; }
		
		/// <summary>
		/// Network-level access control policy for the Airflow web server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webServerNetworkAccessControl")]
		public WebServerNetworkAccessControl WebServerNetworkAccessControl { get; set; }
		
		/// <summary>
		/// The Kubernetes workloads configuration for GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="workloadsConfig")]
		public WorkloadsConfig WorkloadsConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnvironmentConfigEnvironmentSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENVIRONMENT_SIZE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENVIRONMENT_SIZE_SMALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENVIRONMENT_SIZE_MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENVIRONMENT_SIZE_LARGE = 3,
	}
	
	/// <summary>
	/// The configuration settings for Cloud Composer maintenance window. The following example: ``` { "startTime":"2019-08-01T01:00:00Z" "endTime":"2019-08-01T07:00:00Z" "recurrence":"FREQ=WEEKLY;BYDAY=TU,WE" } ``` would define a maintenance window between 01 and 07 hours UTC during each Tuesday and Wednesday.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MaintenanceWindow
	{
		
		/// <summary>
		/// Required. Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end-time must be in the future, relative to `start_time`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Required. Maintenance window recurrence. Format is a subset of [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...` Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recurrence")]
		public string Recurrence { get; set; }
		
		/// <summary>
		/// Required. Start time of the first recurrence of the maintenance window.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MasterAuthorizedNetworksConfig
	{
		
		/// <summary>
		/// Up to 50 external networks that could access Kubernetes master through HTTPS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cidrBlocks")]
		public CidrBlock[] CidrBlocks { get; set; }
		
		/// <summary>
		/// Whether or not master authorized networks feature is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
	}
	
	/// <summary>
	/// The configuration information for the Kubernetes Engine nodes running the Apache Airflow software.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NodeConfig
	{
		
		/// <summary>
		/// Optional. The disk size in GB used for node VMs. Minimum size is 30GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="diskSizeGb")]
		public System.Nullable<System.Int32> DiskSizeGb { get; set; }
		
		/// <summary>
		/// Optional. Deploys 'ip-masq-agent' daemon set in the GKE cluster and defines nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for all destination addresses, except between pods traffic. See: https://cloud.google.com/kubernetes-engine/docs/how-to/ip-masquerade-agent
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableIpMasqAgent")]
		public System.Nullable<System.Boolean> EnableIpMasqAgent { get; set; }
		
		/// <summary>
		/// Configuration for controlling how IPs are allocated in the GKE cluster running the Apache Airflow software.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ipAllocationPolicy")]
		public IPAllocationPolicy IpAllocationPolicy { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to "n1-standard-1". This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/global/networks/{networkId}". If unspecified, the "default" network ID in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to ["https://www.googleapis.com/auth/cloud-platform"]. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthScopes")]
		public string[] OauthScopes { get; set; }
		
		/// <summary>
		/// Optional. The Google Cloud Platform Service Account to be used by the node VMs. If a service account is not specified, the "default" Compute Engine service account is used. Cannot be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceAccount")]
		public string ServiceAccount { get; set; }
		
		/// <summary>
		/// Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: "projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subnetwork")]
		public string Subnetwork { get; set; }
		
		/// <summary>
		/// Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public string[] Tags { get; set; }
	}
	
	/// <summary>
	/// Configuration for controlling how IPs are allocated in the GKE cluster running the Apache Airflow software.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IPAllocationPolicy
	{
		
		/// <summary>
		/// Optional. The IP address range used to allocate IP addresses to pods in the GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterIpv4CidrBlock")]
		public string ClusterIpv4CidrBlock { get; set; }
		
		/// <summary>
		/// Optional. The name of the GKE cluster's secondary range used to allocate IP addresses to pods. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clusterSecondaryRangeName")]
		public string ClusterSecondaryRangeName { get; set; }
		
		/// <summary>
		/// Optional. The IP address range of the services IP addresses in this GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicesIpv4CidrBlock")]
		public string ServicesIpv4CidrBlock { get; set; }
		
		/// <summary>
		/// Optional. The name of the services' secondary range used to allocate IP addresses to the GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servicesSecondaryRangeName")]
		public string ServicesSecondaryRangeName { get; set; }
		
		/// <summary>
		/// Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useIpAliases")]
		public System.Nullable<System.Boolean> UseIpAliases { get; set; }
	}
	
	/// <summary>
	/// The configuration information for configuring a Private IP Cloud Composer environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrivateEnvironmentConfig
	{
		
		/// <summary>
		/// Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudComposerConnectionSubnetwork")]
		public string CloudComposerConnectionSubnetwork { get; set; }
		
		/// <summary>
		/// Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudComposerNetworkIpv4CidrBlock")]
		public string CloudComposerNetworkIpv4CidrBlock { get; set; }
		
		/// <summary>
		/// Output only. The IP range reserved for the tenant project's Cloud Composer network. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudComposerNetworkIpv4ReservedRange")]
		public string CloudComposerNetworkIpv4ReservedRange { get; set; }
		
		/// <summary>
		/// Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from `web_server_ipv4_cidr_block`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudSqlIpv4CidrBlock")]
		public string CloudSqlIpv4CidrBlock { get; set; }
		
		/// <summary>
		/// Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePrivateEnvironment")]
		public System.Nullable<System.Boolean> EnablePrivateEnvironment { get; set; }
		
		/// <summary>
		/// Optional. When enabled, IPs from public (non-RFC1918) ranges can be used for `IPAllocationPolicy.cluster_ipv4_cidr_block` and `IPAllocationPolicy.service_ipv4_cidr_block`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePrivatelyUsedPublicIps")]
		public System.Nullable<System.Boolean> EnablePrivatelyUsedPublicIps { get; set; }
		
		/// <summary>
		/// Configuration options for networking connections in the Composer 2 environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkingConfig")]
		public NetworkingConfig NetworkingConfig { get; set; }
		
		/// <summary>
		/// Configuration options for the private GKE cluster in a Cloud Composer environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateClusterConfig")]
		public PrivateClusterConfig PrivateClusterConfig { get; set; }
		
		/// <summary>
		/// Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from `private_cluster_config.master_ipv4_cidr_block` and `cloud_sql_ipv4_cidr_block`. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webServerIpv4CidrBlock")]
		public string WebServerIpv4CidrBlock { get; set; }
		
		/// <summary>
		/// Output only. The IP range reserved for the tenant project's App Engine VMs. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webServerIpv4ReservedRange")]
		public string WebServerIpv4ReservedRange { get; set; }
	}
	
	/// <summary>
	/// Configuration options for networking connections in the Composer 2 environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkingConfig
	{
		
		/// <summary>
		/// Optional. Indicates the user requested specifc connection type between Tenant and Customer projects. You cannot set networking connection type in public IP environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectionType")]
		public System.Nullable<NetworkingConfigConnectionType> ConnectionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkingConfigConnectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONNECTION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VPC_PEERING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE_SERVICE_CONNECT = 2,
	}
	
	/// <summary>
	/// Configuration options for the private GKE cluster in a Cloud Composer environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrivateClusterConfig
	{
		
		/// <summary>
		/// Optional. If `true`, access to the public endpoint of the GKE cluster is denied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePrivateEndpoint")]
		public System.Nullable<System.Boolean> EnablePrivateEndpoint { get; set; }
		
		/// <summary>
		/// Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterIpv4CidrBlock")]
		public string MasterIpv4CidrBlock { get; set; }
		
		/// <summary>
		/// Output only. The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the GKE cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="masterIpv4ReservedRange")]
		public string MasterIpv4ReservedRange { get; set; }
	}
	
	/// <summary>
	/// The Recovery settings of an environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecoveryConfig
	{
		
		/// <summary>
		/// The configuration for scheduled snapshot creation mechanism.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledSnapshotsConfig")]
		public ScheduledSnapshotsConfig ScheduledSnapshotsConfig { get; set; }
	}
	
	/// <summary>
	/// The configuration for scheduled snapshot creation mechanism.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScheduledSnapshotsConfig
	{
		
		/// <summary>
		/// Optional. Whether scheduled snapshots creation is enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// Optional. The cron expression representing the time when snapshots creation mechanism runs. This field is subject to additional validation around frequency of execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotCreationSchedule")]
		public string SnapshotCreationSchedule { get; set; }
		
		/// <summary>
		/// Optional. The Cloud Storage location for storing automatically created snapshots.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotLocation")]
		public string SnapshotLocation { get; set; }
		
		/// <summary>
		/// Optional. Time zone that sets the context to interpret snapshot_creation_schedule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnvironmentConfigResilienceMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESILIENCE_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_RESILIENCE = 1,
	}
	
	/// <summary>
	/// Specifies the selection and configuration of software inside the environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SoftwareConfig
	{
		
		/// <summary>
		/// Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example "core-dags_are_paused_at_creation". Section names must not contain hyphens ("-"), opening square brackets ("["), or closing square brackets ("]"). The property name must not be empty and must not contain an equals sign ("=") or semicolon (";"). Section and property names must not contain a period ("."). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="airflowConfigOverrides")]
		public System.Collections.Generic.Dictionary<string, string> AirflowConfigOverrides { get; set; }
		
		/// <summary>
		/// Configuration for Cloud Data Lineage integration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudDataLineageIntegration")]
		public CloudDataLineageIntegration CloudDataLineageIntegration { get; set; }
		
		/// <summary>
		/// Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="envVariables")]
		public System.Collections.Generic.Dictionary<string, string> EnvVariables { get; set; }
		
		/// <summary>
		/// The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+(\.[0-9]+\.[0-9]+(-preview\.[0-9]+)?)?|latest)-airflow-([0-9]+(\.[0-9]+(\.[0-9]+)?)?)`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the image version is a full [semantic version](https://semver.org), or an alias in the form of major version number or `latest`. When an alias is provided, the server replaces it with the current Cloud Composer version that satisfies the alias. The Apache Airflow portion of the image version is a full semantic version that points to one of the supported Apache Airflow versions, or an alias in the form of only major or major.minor versions specified. When an alias is provided, the server replaces it with the latest Apache Airflow version that satisfies the alias and is supported in the given Cloud Composer version. In all cases, the resolved image version is stored in the same field. See also [version list](/composer/docs/concepts/versioning/composer-versions) and [versioning overview](/composer/docs/concepts/versioning/composer-versioning-overview).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageVersion")]
		public string ImageVersion { get; set; }
		
		/// <summary>
		/// Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as "numpy" and values are the lowercase extras and version specifier such as "==1.12.0", "[devel,gcp_api]", or "[devel]>=1.8.2, <1.9.2". To specify a package without pinning it to a version specifier, use the empty string as the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pypiPackages")]
		public System.Collections.Generic.Dictionary<string, string> PypiPackages { get; set; }
		
		/// <summary>
		/// Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pythonVersion")]
		public string PythonVersion { get; set; }
		
		/// <summary>
		/// Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedulerCount")]
		public System.Nullable<System.Int32> SchedulerCount { get; set; }
	}
	
	/// <summary>
	/// The configuration settings for the Airflow web server App Engine instance. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WebServerConfig
	{
		
		/// <summary>
		/// Optional. Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. If not specified, composer-n1-webserver-2 will be used. Value custom is returned only in response, if Airflow web server parameters were manually changed to a non-standard values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineType")]
		public string MachineType { get; set; }
	}
	
	/// <summary>
	/// Network-level access control policy for the Airflow web server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WebServerNetworkAccessControl
	{
		
		/// <summary>
		/// A collection of allowed IP ranges with descriptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowedIpRanges")]
		public AllowedIpRange[] AllowedIpRanges { get; set; }
	}
	
	/// <summary>
	/// The Kubernetes workloads configuration for GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkloadsConfig
	{
		
		/// <summary>
		/// Configuration for resources used by Airflow schedulers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduler")]
		public SchedulerResource Scheduler { get; set; }
		
		/// <summary>
		/// Configuration for resources used by Airflow triggerers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerer")]
		public TriggererResource Triggerer { get; set; }
		
		/// <summary>
		/// Configuration for resources used by Airflow web server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webServer")]
		public WebServerResource WebServer { get; set; }
		
		/// <summary>
		/// Configuration for resources used by Airflow workers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="worker")]
		public WorkerResource Worker { get; set; }
	}
	
	/// <summary>
	/// Configuration for resources used by Airflow schedulers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchedulerResource
	{
		
		/// <summary>
		/// Optional. The number of schedulers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Optional. CPU request and limit for a single Airflow scheduler replica.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpu")]
		public System.Nullable<System.Single> Cpu { get; set; }
		
		/// <summary>
		/// Optional. Memory (GB) request and limit for a single Airflow scheduler replica.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryGb")]
		public System.Nullable<System.Single> MemoryGb { get; set; }
		
		/// <summary>
		/// Optional. Storage (GB) request and limit for a single Airflow scheduler replica.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageGb")]
		public System.Nullable<System.Single> StorageGb { get; set; }
	}
	
	/// <summary>
	/// Configuration for resources used by Airflow triggerers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TriggererResource
	{
		
		/// <summary>
		/// Optional. The number of triggerers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// Optional. CPU request and limit for a single Airflow triggerer replica.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpu")]
		public System.Nullable<System.Single> Cpu { get; set; }
		
		/// <summary>
		/// Optional. Memory (GB) request and limit for a single Airflow triggerer replica.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryGb")]
		public System.Nullable<System.Single> MemoryGb { get; set; }
	}
	
	/// <summary>
	/// Configuration for resources used by Airflow web server.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WebServerResource
	{
		
		/// <summary>
		/// Optional. CPU request and limit for Airflow web server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpu")]
		public System.Nullable<System.Single> Cpu { get; set; }
		
		/// <summary>
		/// Optional. Memory (GB) request and limit for Airflow web server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryGb")]
		public System.Nullable<System.Single> MemoryGb { get; set; }
		
		/// <summary>
		/// Optional. Storage (GB) request and limit for Airflow web server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageGb")]
		public System.Nullable<System.Single> StorageGb { get; set; }
	}
	
	/// <summary>
	/// Configuration for resources used by Airflow workers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkerResource
	{
		
		/// <summary>
		/// Optional. CPU request and limit for a single Airflow worker replica.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cpu")]
		public System.Nullable<System.Single> Cpu { get; set; }
		
		/// <summary>
		/// Optional. Maximum number of workers for autoscaling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxCount")]
		public System.Nullable<System.Int32> MaxCount { get; set; }
		
		/// <summary>
		/// Optional. Memory (GB) request and limit for a single Airflow worker replica.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="memoryGb")]
		public System.Nullable<System.Single> MemoryGb { get; set; }
		
		/// <summary>
		/// Optional. Minimum number of workers for autoscaling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minCount")]
		public System.Nullable<System.Int32> MinCount { get; set; }
		
		/// <summary>
		/// Optional. Storage (GB) request and limit for a single Airflow worker replica.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="storageGb")]
		public System.Nullable<System.Single> StorageGb { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnvironmentState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 5,
	}
	
	/// <summary>
	/// The configuration for data storage in the environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StorageConfig
	{
		
		/// <summary>
		/// Optional. The name of the Cloud Storage bucket used by the environment. No `gs://` prefix.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
	}
	
	/// <summary>
	/// Execute Airflow Command request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecuteAirflowCommandRequest
	{
		
		/// <summary>
		/// Airflow command.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="command")]
		public string Command { get; set; }
		
		/// <summary>
		/// Parameters for the Airflow command/subcommand as an array of arguments. It may contain positional arguments like `["my-dag-id"]`, key-value parameters like `["--foo=bar"]` or `["--foo","bar"]`, or other flags like `["-f"]`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string[] Parameters { get; set; }
		
		/// <summary>
		/// Airflow subcommand.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subcommand")]
		public string Subcommand { get; set; }
	}
	
	/// <summary>
	/// Response to ExecuteAirflowCommandRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecuteAirflowCommandResponse
	{
		
		/// <summary>
		/// Error message. Empty if there was no error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// The unique ID of the command execution for polling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		/// <summary>
		/// The name of the pod where the command is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pod")]
		public string Pod { get; set; }
		
		/// <summary>
		/// The namespace of the pod where the command is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podNamespace")]
		public string PodNamespace { get; set; }
	}
	
	/// <summary>
	/// Information about how a command ended.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExitInfo
	{
		
		/// <summary>
		/// Error message. Empty if there was no error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public string Error { get; set; }
		
		/// <summary>
		/// The exit code from the command execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitCode")]
		public System.Nullable<System.Int32> ExitCode { get; set; }
	}
	
	/// <summary>
	/// Response for FetchDatabasePropertiesRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FetchDatabasePropertiesResponse
	{
		
		/// <summary>
		/// The availability status of the failover replica. A false status indicates that the failover replica is out of sync. The primary instance can only fail over to the failover replica when the status is true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isFailoverReplicaAvailable")]
		public System.Nullable<System.Boolean> IsFailoverReplicaAvailable { get; set; }
		
		/// <summary>
		/// The Compute Engine zone that the instance is currently serving from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryGceZone")]
		public string PrimaryGceZone { get; set; }
		
		/// <summary>
		/// The Compute Engine zone that the failover instance is currently serving from for a regional Cloud SQL instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondaryGceZone")]
		public string SecondaryGceZone { get; set; }
	}
	
	/// <summary>
	/// ImageVersion information
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageVersion
	{
		
		/// <summary>
		/// Whether it is impossible to create an environment with the image version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creationDisabled")]
		public System.Nullable<System.Boolean> CreationDisabled { get; set; }
		
		/// <summary>
		/// The string identifier of the ImageVersion, in the form: "composer-x.y.z-airflow-a.b.c"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageVersionId")]
		public string ImageVersionId { get; set; }
		
		/// <summary>
		/// Whether this is the default ImageVersion used by Composer during environment creation if no input ImageVersion is specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="releaseDate")]
		public Date ReleaseDate { get; set; }
		
		/// <summary>
		/// supported python versions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supportedPythonVersions")]
		public string[] SupportedPythonVersions { get; set; }
		
		/// <summary>
		/// Whether it is impossible to upgrade an environment running with the image version.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upgradeDisabled")]
		public System.Nullable<System.Boolean> UpgradeDisabled { get; set; }
	}
	
	/// <summary>
	/// Contains information about a single line from logs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Line
	{
		
		/// <summary>
		/// Text content of the log line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Number of the line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineNumber")]
		public System.Nullable<System.Int32> LineNumber { get; set; }
	}
	
	/// <summary>
	/// The environments in a project and location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListEnvironmentsResponse
	{
		
		/// <summary>
		/// The list of environments returned by a ListEnvironmentsRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environments")]
		public Environment[] Environments { get; set; }
		
		/// <summary>
		/// The page token used to query for the next page if one exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The ImageVersions in a project and location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListImageVersionsResponse
	{
		
		/// <summary>
		/// The list of supported ImageVersions in a location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageVersions")]
		public ImageVersion[] ImageVersions { get; set; }
		
		/// <summary>
		/// The page token used to query for the next page if one exists.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// The response message for Operations.ListOperations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOperationsResponse
	{
		
		/// <summary>
		/// The standard List next-page token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// A list of operations that matches the specified filter in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operations")]
		public Operation[] Operations { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Request to load a snapshot into a Cloud Composer environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoadSnapshotRequest
	{
		
		/// <summary>
		/// Whether or not to skip setting Airflow overrides when loading the environment's state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipAirflowOverridesSetting")]
		public System.Nullable<System.Boolean> SkipAirflowOverridesSetting { get; set; }
		
		/// <summary>
		/// Whether or not to skip setting environment variables when loading the environment's state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipEnvironmentVariablesSetting")]
		public System.Nullable<System.Boolean> SkipEnvironmentVariablesSetting { get; set; }
		
		/// <summary>
		/// Whether or not to skip copying Cloud Storage data when loading the environment's state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipGcsDataCopying")]
		public System.Nullable<System.Boolean> SkipGcsDataCopying { get; set; }
		
		/// <summary>
		/// Whether or not to skip installing Pypi packages when loading the environment's state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipPypiPackagesInstallation")]
		public System.Nullable<System.Boolean> SkipPypiPackagesInstallation { get; set; }
		
		/// <summary>
		/// A Cloud Storage path to a snapshot to load, e.g.: "gs://my-bucket/snapshots/project_location_environment_timestamp".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotPath")]
		public string SnapshotPath { get; set; }
	}
	
	/// <summary>
	/// Response to LoadSnapshotRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LoadSnapshotResponse
	{
	}
	
	/// <summary>
	/// Metadata describing an operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationMetadata
	{
		
		/// <summary>
		/// Output only. The time the operation was submitted to the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The time when the operation terminated, regardless of its success. This field is unset if the operation is still ongoing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Output only. The type of operation being performed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operationType")]
		public System.Nullable<OperationMetadataOperationType> OperationType { get; set; }
		
		/// <summary>
		/// Output only. The resource being operated on, as a [relative resource name]( /apis/design/resource_names#relative_resource_name).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public string Resource { get; set; }
		
		/// <summary>
		/// Output only. The UUID of the resource being operated on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUuid")]
		public string ResourceUuid { get; set; }
		
		/// <summary>
		/// Output only. The current operation state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<OperationMetadataState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OperationMetadataOperationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELETE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPDATE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHECK = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SAVE_SNAPSHOT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOAD_SNAPSHOT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATABASE_FAILOVER = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OperationMetadataState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCESSFUL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 5,
	}
	
	/// <summary>
	/// Poll Airflow Command request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PollAirflowCommandRequest
	{
		
		/// <summary>
		/// The unique ID of the command execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		/// <summary>
		/// Line number from which new logs should be fetched.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLineNumber")]
		public System.Nullable<System.Int32> NextLineNumber { get; set; }
		
		/// <summary>
		/// The name of the pod where the command is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pod")]
		public string Pod { get; set; }
		
		/// <summary>
		/// The namespace of the pod where the command is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podNamespace")]
		public string PodNamespace { get; set; }
	}
	
	/// <summary>
	/// Response to PollAirflowCommandRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PollAirflowCommandResponse
	{
		
		/// <summary>
		/// Information about how a command ended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitInfo")]
		public ExitInfo ExitInfo { get; set; }
		
		/// <summary>
		/// Output from the command execution. It may not contain the full output and the caller may need to poll for more lines.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="output")]
		public Line[] Output { get; set; }
		
		/// <summary>
		/// Whether the command execution has finished and there is no more output.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputEnd")]
		public System.Nullable<System.Boolean> OutputEnd { get; set; }
	}
	
	/// <summary>
	/// Request to create a snapshot of a Cloud Composer environment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SaveSnapshotRequest
	{
		
		/// <summary>
		/// Location in a Cloud Storage where the snapshot is going to be stored, e.g.: "gs://my-bucket/snapshots".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotLocation")]
		public string SnapshotLocation { get; set; }
	}
	
	/// <summary>
	/// Response to SaveSnapshotRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SaveSnapshotResponse
	{
		
		/// <summary>
		/// The fully-resolved Cloud Storage path of the created snapshot, e.g.: "gs://my-bucket/snapshots/project_location_environment_timestamp". This field is populated only if the snapshot creation was successful.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotPath")]
		public string SnapshotPath { get; set; }
	}
	
	/// <summary>
	/// Stop Airflow Command request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopAirflowCommandRequest
	{
		
		/// <summary>
		/// The unique ID of the command execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="executionId")]
		public string ExecutionId { get; set; }
		
		/// <summary>
		/// If true, the execution is terminated forcefully (SIGKILL). If false, the execution is stopped gracefully, giving it time for cleanup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="force")]
		public System.Nullable<System.Boolean> Force { get; set; }
		
		/// <summary>
		/// The name of the pod where the command is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pod")]
		public string Pod { get; set; }
		
		/// <summary>
		/// The namespace of the pod where the command is executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="podNamespace")]
		public string PodNamespace { get; set; }
	}
	
	/// <summary>
	/// Response to StopAirflowCommandRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StopAirflowCommandResponse
	{
		
		/// <summary>
		/// Whether the execution is still running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isDone")]
		public System.Nullable<System.Boolean> IsDone { get; set; }
		
		/// <summary>
		/// Output message from stopping execution request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="output")]
		public string[] Output { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Triggers database failover (only for highly resilient environments).
		/// Composer_projects_locations_environments_databaseFailover v1/{environment}:databaseFailover
		/// </summary>
		/// <param name="environment">Target environment: "projects/{projectId}/locations/{locationId}/environments/{environmentId}"</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Composer_projects_locations_environments_databaseFailoverAsync(string environment, DatabaseFailoverRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (environment==null? "" : System.Uri.EscapeDataString(environment))+":databaseFailover";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Executes Airflow CLI command.
		/// Composer_projects_locations_environments_executeAirflowCommand v1/{environment}:executeAirflowCommand
		/// </summary>
		/// <param name="environment">The resource name of the environment in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}".</param>
		/// <returns>Successful response</returns>
		public async Task<ExecuteAirflowCommandResponse> Composer_projects_locations_environments_executeAirflowCommandAsync(string environment, ExecuteAirflowCommandRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (environment==null? "" : System.Uri.EscapeDataString(environment))+":executeAirflowCommand";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ExecuteAirflowCommandResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Fetches database properties.
		/// Composer_projects_locations_environments_fetchDatabaseProperties v1/{environment}:fetchDatabaseProperties
		/// </summary>
		/// <param name="environment">Required. The resource name of the environment, in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}"</param>
		/// <returns>Successful response</returns>
		public async Task<FetchDatabasePropertiesResponse> Composer_projects_locations_environments_fetchDatabasePropertiesAsync(string environment, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (environment==null? "" : System.Uri.EscapeDataString(environment))+":fetchDatabaseProperties";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<FetchDatabasePropertiesResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Loads a snapshot of a Cloud Composer environment. As a result of this operation, a snapshot of environment's specified in LoadSnapshotRequest is loaded into the environment.
		/// Composer_projects_locations_environments_loadSnapshot v1/{environment}:loadSnapshot
		/// </summary>
		/// <param name="environment">The resource name of the target environment in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}"</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Composer_projects_locations_environments_loadSnapshotAsync(string environment, LoadSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (environment==null? "" : System.Uri.EscapeDataString(environment))+":loadSnapshot";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Polls Airflow CLI command execution and fetches logs.
		/// Composer_projects_locations_environments_pollAirflowCommand v1/{environment}:pollAirflowCommand
		/// </summary>
		/// <param name="environment">The resource name of the environment in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}"</param>
		/// <returns>Successful response</returns>
		public async Task<PollAirflowCommandResponse> Composer_projects_locations_environments_pollAirflowCommandAsync(string environment, PollAirflowCommandRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (environment==null? "" : System.Uri.EscapeDataString(environment))+":pollAirflowCommand";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<PollAirflowCommandResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Creates a snapshots of a Cloud Composer environment. As a result of this operation, snapshot of environment's state is stored in a location specified in the SaveSnapshotRequest.
		/// Composer_projects_locations_environments_saveSnapshot v1/{environment}:saveSnapshot
		/// </summary>
		/// <param name="environment">The resource name of the source environment in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}"</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Composer_projects_locations_environments_saveSnapshotAsync(string environment, SaveSnapshotRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (environment==null? "" : System.Uri.EscapeDataString(environment))+":saveSnapshot";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Stops Airflow CLI command execution.
		/// Composer_projects_locations_environments_stopAirflowCommand v1/{environment}:stopAirflowCommand
		/// </summary>
		/// <param name="environment">The resource name of the environment in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}".</param>
		/// <returns>Successful response</returns>
		public async Task<StopAirflowCommandResponse> Composer_projects_locations_environments_stopAirflowCommandAsync(string environment, StopAirflowCommandRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (environment==null? "" : System.Uri.EscapeDataString(environment))+":stopAirflowCommand";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<StopAirflowCommandResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn't support this method, it returns `google.rpc.Code.UNIMPLEMENTED`.
		/// Composer_projects_locations_operations_delete v1/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource to be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Composer_projects_locations_operations_deleteAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Empty>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
		/// Composer_projects_locations_operations_get v1/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Composer_projects_locations_operations_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an environment.
		/// Composer_projects_locations_environments_patch v1/{name}
		/// </summary>
		/// <param name="name">The relative resource name of the environment to update, in the form: "projects/{projectId}/locations/{locationId}/environments/{environmentId}"</param>
		/// <param name="updateMask">Required. A comma-separated list of paths, relative to `Environment`, of fields to update. For example, to set the version of scikit-learn to install in the environment to 0.19.0 and to remove an existing installation of numpy, the `updateMask` parameter would include the following two `paths` values: "config.softwareConfig.pypiPackages.scikit-learn" and "config.softwareConfig.pypiPackages.numpy". The included patch environment would specify the scikit-learn version as follows: { "config":{ "softwareConfig":{ "pypiPackages":{ "scikit-learn":"==0.19.0" } } } } Note that in the above example, any existing PyPI packages other than scikit-learn and numpy will be unaffected. Only one update type may be included in a single request's `updateMask`. For example, one cannot update both the PyPI packages and labels in the same request. However, it is possible to update multiple members of a map field simultaneously in the same request. For example, to set the labels "label1" and "label2" while clearing "label3" (assuming it already exists), one can provide the paths "labels.label1", "labels.label2", and "labels.label3" and populate the patch environment as follows: { "labels":{ "label1":"new-label1-value" "label2":"new-label2-value" } } Note that in the above example, any existing labels that are not included in the `updateMask` will be unaffected. It is also possible to replace an entire map field by providing the map field's path in the `updateMask`. The new value of the field will be that which is provided in the patch environment. For example, to delete all pre-existing user-specified PyPI packages and install botocore at version 1.7.14, the `updateMask` would contain the path "config.softwareConfig.pypiPackages", and the patch environment would be the following: { "config":{ "softwareConfig":{ "pypiPackages":{ "botocore":"==1.7.14" } } } } **Note:** Only the following fields can be updated: * `config.softwareConfig.pypiPackages` * Replace all custom custom PyPI packages. If a replacement package map is not included in `environment`, all custom PyPI packages are cleared. It is an error to provide both this mask and a mask specifying an individual package. * `config.softwareConfig.pypiPackages.`packagename * Update the custom PyPI package *packagename*, preserving other packages. To delete the package, include it in `updateMask`, and omit the mapping for it in `environment.config.softwareConfig.pypiPackages`. It is an error to provide both a mask of this form and the `config.softwareConfig.pypiPackages` mask. * `labels` * Replace all environment labels. If a replacement labels map is not included in `environment`, all labels are cleared. It is an error to provide both this mask and a mask specifying one or more individual labels. * `labels.`labelName * Set the label named *labelName*, while preserving other labels. To delete the label, include it in `updateMask` and omit its mapping in `environment.labels`. It is an error to provide both a mask of this form and the `labels` mask. * `config.nodeCount` * Horizontally scale the number of nodes in the environment. An integer greater than or equal to 3 must be provided in the `config.nodeCount` field. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. * `config.webServerNetworkAccessControl` * Replace the environment's current `WebServerNetworkAccessControl`. * `config.softwareConfig.airflowConfigOverrides` * Replace all Apache Airflow config overrides. If a replacement config overrides map is not included in `environment`, all config overrides are cleared. It is an error to provide both this mask and a mask specifying one or more individual config overrides. * `config.softwareConfig.airflowConfigOverrides.`section-name * Override the Apache Airflow config property *name* in the section named *section*, preserving other properties. To delete the property override, include it in `updateMask` and omit its mapping in `environment.config.softwareConfig.airflowConfigOverrides`. It is an error to provide both a mask of this form and the `config.softwareConfig.airflowConfigOverrides` mask. * `config.softwareConfig.envVariables` * Replace all environment variables. If a replacement environment variable map is not included in `environment`, all custom environment variables are cleared. * `config.softwareConfig.schedulerCount` * Horizontally scale the number of schedulers in Airflow. A positive integer not greater than the number of nodes must be provided in the `config.softwareConfig.schedulerCount` field. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*. * `config.databaseConfig.machineType` * Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. * `config.webServerConfig.machineType` * Machine type on which Airflow web server is running. It has to be one of: composer-n1-webserver-2, composer-n1-webserver-4 or composer-n1-webserver-8. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Composer_projects_locations_environments_patchAsync(string name, string updateMask, Environment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Lists operations that match the specified filter in the request. If the server doesn't support this method, it returns `UNIMPLEMENTED`.
		/// Composer_projects_locations_operations_list v1/{name}/operations
		/// </summary>
		/// <param name="name">The name of the operation's parent resource.</param>
		/// <param name="filter">The standard list filter.</param>
		/// <param name="pageSize">The standard list page size.</param>
		/// <param name="pageToken">The standard list page token.</param>
		/// <returns>Successful response</returns>
		public async Task<ListOperationsResponse> Composer_projects_locations_operations_listAsync(string name, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"/operations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListOperationsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List environments.
		/// Composer_projects_locations_environments_list v1/{parent}/environments
		/// </summary>
		/// <param name="parent">List environments in the given project and location, in the form: "projects/{projectId}/locations/{locationId}"</param>
		/// <param name="pageSize">The maximum number of environments to return.</param>
		/// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<ListEnvironmentsResponse> Composer_projects_locations_environments_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/environments&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListEnvironmentsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create a new environment.
		/// Composer_projects_locations_environments_create v1/{parent}/environments
		/// </summary>
		/// <param name="parent">The parent must be of the form "projects/{projectId}/locations/{locationId}".</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Composer_projects_locations_environments_createAsync(string parent, Environment requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/environments";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<Operation>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// List ImageVersions for provided location.
		/// Composer_projects_locations_imageVersions_list v1/{parent}/imageVersions
		/// </summary>
		/// <param name="parent">List ImageVersions in the given project and location, in the form: "projects/{projectId}/locations/{locationId}"</param>
		/// <param name="includePastReleases">Whether or not image versions from old releases should be included.</param>
		/// <param name="pageSize">The maximum number of image_versions to return.</param>
		/// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<ListImageVersionsResponse> Composer_projects_locations_imageVersions_listAsync(string parent, bool includePastReleases, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/imageVersions&includePastReleases="+includePastReleases+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ListImageVersionsResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
