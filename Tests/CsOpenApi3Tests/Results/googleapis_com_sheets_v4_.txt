//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Adds a new banded range to the spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddBandingRequest
	{
		
		/// <summary>
		/// A banded (alternating colors) range in a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandedRange")]
		public BandedRange BandedRange { get; set; }
	}
	
	/// <summary>
	/// A banded (alternating colors) range in a sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BandedRange
	{
		
		/// <summary>
		/// The ID of the banded range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandedRangeId")]
		public System.Nullable<System.Int32> BandedRangeId { get; set; }
		
		/// <summary>
		/// Properties referring a single dimension (either row or column). If both BandedRange.row_properties and BandedRange.column_properties are set, the fill colors are applied to cells according to the following rules: * header_color and footer_color take priority over band colors. * first_band_color takes priority over second_band_color. * row_properties takes priority over column_properties. For example, the first row color takes priority over the first column color, but the first column color takes priority over the second row color. Similarly, the row header takes priority over the column header in the top left cell, but the column header takes priority over the first row color if the row header is not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnProperties")]
		public BandingProperties ColumnProperties { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
		
		/// <summary>
		/// Properties referring a single dimension (either row or column). If both BandedRange.row_properties and BandedRange.column_properties are set, the fill colors are applied to cells according to the following rules: * header_color and footer_color take priority over band colors. * first_band_color takes priority over second_band_color. * row_properties takes priority over column_properties. For example, the first row color takes priority over the first column color, but the first column color takes priority over the second row color. Similarly, the row header takes priority over the column header in the top left cell, but the column header takes priority over the first row color if the row header is not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowProperties")]
		public BandingProperties RowProperties { get; set; }
	}
	
	/// <summary>
	/// Properties referring a single dimension (either row or column). If both BandedRange.row_properties and BandedRange.column_properties are set, the fill colors are applied to cells according to the following rules: * header_color and footer_color take priority over band colors. * first_band_color takes priority over second_band_color. * row_properties takes priority over column_properties. For example, the first row color takes priority over the first column color, but the first column color takes priority over the second row color. Similarly, the row header takes priority over the column header in the top left cell, but the column header takes priority over the first row color if the row header is not set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BandingProperties
	{
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstBandColor")]
		public Color FirstBandColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstBandColorStyle")]
		public ColorStyle FirstBandColorStyle { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footerColor")]
		public Color FooterColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footerColorStyle")]
		public ColorStyle FooterColorStyle { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headerColor")]
		public Color HeaderColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headerColorStyle")]
		public ColorStyle HeaderColorStyle { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondBandColor")]
		public Color SecondBandColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secondBandColorStyle")]
		public ColorStyle SecondBandColorStyle { get; set; }
	}
	
	/// <summary>
	/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Color
	{
		
		/// <summary>
		/// The fraction of this color that should be applied to the pixel. That is, the final pixel color is defined by the equation: `pixel color = alpha * (this color) + (1.0 - alpha) * (background color)` This means that a value of 1.0 corresponds to a solid color, whereas a value of 0.0 corresponds to a completely transparent color. This uses a wrapper message rather than a simple float scalar so that it is possible to distinguish between a default value and the value being unset. If omitted, this color object is rendered as a solid color (as if the alpha value had been explicitly given a value of 1.0).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alpha")]
		public System.Nullable<System.Single> Alpha { get; set; }
		
		/// <summary>
		/// The amount of blue in the color as a value in the interval [0, 1].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public System.Nullable<System.Single> Blue { get; set; }
		
		/// <summary>
		/// The amount of green in the color as a value in the interval [0, 1].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="green")]
		public System.Nullable<System.Single> Green { get; set; }
		
		/// <summary>
		/// The amount of red in the color as a value in the interval [0, 1].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red")]
		public System.Nullable<System.Single> Red { get; set; }
	}
	
	/// <summary>
	/// A color value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ColorStyle
	{
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rgbColor")]
		public Color RgbColor { get; set; }
		
		/// <summary>
		/// Theme color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="themeColor")]
		public System.Nullable<ColorStyleThemeColor> ThemeColor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ColorStyleThemeColor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THEME_COLOR_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BACKGROUND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCENT1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCENT2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCENT3 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCENT4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCENT5 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCENT6 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINK = 9,
	}
	
	/// <summary>
	/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GridRange
	{
		
		/// <summary>
		/// The end column (exclusive) of the range, or not set if unbounded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endColumnIndex")]
		public System.Nullable<System.Int32> EndColumnIndex { get; set; }
		
		/// <summary>
		/// The end row (exclusive) of the range, or not set if unbounded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endRowIndex")]
		public System.Nullable<System.Int32> EndRowIndex { get; set; }
		
		/// <summary>
		/// The sheet this range is on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetId")]
		public System.Nullable<System.Int32> SheetId { get; set; }
		
		/// <summary>
		/// The start column (inclusive) of the range, or not set if unbounded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startColumnIndex")]
		public System.Nullable<System.Int32> StartColumnIndex { get; set; }
		
		/// <summary>
		/// The start row (inclusive) of the range, or not set if unbounded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startRowIndex")]
		public System.Nullable<System.Int32> StartRowIndex { get; set; }
	}
	
	/// <summary>
	/// The result of adding a banded range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddBandingResponse
	{
		
		/// <summary>
		/// A banded (alternating colors) range in a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandedRange")]
		public BandedRange BandedRange { get; set; }
	}
	
	/// <summary>
	/// Adds a chart to a sheet in the spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddChartRequest
	{
		
		/// <summary>
		/// A chart embedded in a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chart")]
		public EmbeddedChart Chart { get; set; }
	}
	
	/// <summary>
	/// A chart embedded in a sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmbeddedChart
	{
		
		/// <summary>
		/// A border along an embedded object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="border")]
		public EmbeddedObjectBorder Border { get; set; }
		
		/// <summary>
		/// The ID of the chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chartId")]
		public System.Nullable<System.Int32> ChartId { get; set; }
		
		/// <summary>
		/// The position of an embedded object such as a chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public EmbeddedObjectPosition Position { get; set; }
		
		/// <summary>
		/// The specifications of a chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public ChartSpec Spec { get; set; }
	}
	
	/// <summary>
	/// A border along an embedded object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmbeddedObjectBorder
	{
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public Color Color { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorStyle")]
		public ColorStyle ColorStyle { get; set; }
	}
	
	/// <summary>
	/// The position of an embedded object such as a chart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmbeddedObjectPosition
	{
		
		/// <summary>
		/// If true, the embedded object is put on a new sheet whose ID is chosen for you. Used only when writing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newSheet")]
		public System.Nullable<System.Boolean> NewSheet { get; set; }
		
		/// <summary>
		/// The location an object is overlaid on top of a grid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overlayPosition")]
		public OverlayPosition OverlayPosition { get; set; }
		
		/// <summary>
		/// The sheet this is on. Set only if the embedded object is on its own sheet. Must be non-negative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetId")]
		public System.Nullable<System.Int32> SheetId { get; set; }
	}
	
	/// <summary>
	/// The location an object is overlaid on top of a grid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OverlayPosition
	{
		
		/// <summary>
		/// A coordinate in a sheet. All indexes are zero-based.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="anchorCell")]
		public GridCoordinate AnchorCell { get; set; }
		
		/// <summary>
		/// The height of the object, in pixels. Defaults to 371.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heightPixels")]
		public System.Nullable<System.Int32> HeightPixels { get; set; }
		
		/// <summary>
		/// The horizontal offset, in pixels, that the object is offset from the anchor cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetXPixels")]
		public System.Nullable<System.Int32> OffsetXPixels { get; set; }
		
		/// <summary>
		/// The vertical offset, in pixels, that the object is offset from the anchor cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetYPixels")]
		public System.Nullable<System.Int32> OffsetYPixels { get; set; }
		
		/// <summary>
		/// The width of the object, in pixels. Defaults to 600.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widthPixels")]
		public System.Nullable<System.Int32> WidthPixels { get; set; }
	}
	
	/// <summary>
	/// A coordinate in a sheet. All indexes are zero-based.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GridCoordinate
	{
		
		/// <summary>
		/// The column index of the coordinate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnIndex")]
		public System.Nullable<System.Int32> ColumnIndex { get; set; }
		
		/// <summary>
		/// The row index of the coordinate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowIndex")]
		public System.Nullable<System.Int32> RowIndex { get; set; }
		
		/// <summary>
		/// The sheet this coordinate is on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetId")]
		public System.Nullable<System.Int32> SheetId { get; set; }
	}
	
	/// <summary>
	/// The specifications of a chart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartSpec
	{
		
		/// <summary>
		/// The alternative text that describes the chart. This is often used for accessibility.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="altText")]
		public string AltText { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public Color BackgroundColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColorStyle")]
		public ColorStyle BackgroundColorStyle { get; set; }
		
		/// <summary>
		/// The specification for a basic chart. See BasicChartType for the list of charts this supports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicChart")]
		public BasicChartSpec BasicChart { get; set; }
		
		/// <summary>
		/// A bubble chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bubbleChart")]
		public BubbleChartSpec BubbleChart { get; set; }
		
		/// <summary>
		/// A candlestick chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="candlestickChart")]
		public CandlestickChartSpec CandlestickChart { get; set; }
		
		/// <summary>
		/// Properties of a data source chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceChartProperties")]
		public DataSourceChartProperties DataSourceChartProperties { get; set; }
		
		/// <summary>
		/// The filters applied to the source data of the chart. Only supported for data source charts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterSpecs")]
		public FilterSpec[] FilterSpecs { get; set; }
		
		/// <summary>
		/// The name of the font to use by default for all chart text (e.g. title, axis labels, legend). If a font is specified for a specific part of the chart it will override this font name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fontName")]
		public string FontName { get; set; }
		
		/// <summary>
		/// Determines how the charts will use hidden rows or columns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hiddenDimensionStrategy")]
		public System.Nullable<ChartSpecHiddenDimensionStrategy> HiddenDimensionStrategy { get; set; }
		
		/// <summary>
		/// A histogram chart. A histogram chart groups data items into bins, displaying each bin as a column of stacked items. Histograms are used to display the distribution of a dataset. Each column of items represents a range into which those items fall. The number of bins can be chosen automatically or specified explicitly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="histogramChart")]
		public HistogramChartSpec HistogramChart { get; set; }
		
		/// <summary>
		/// True to make a chart fill the entire space in which it's rendered with minimum padding. False to use the default padding. (Not applicable to Geo and Org charts.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximized")]
		public System.Nullable<System.Boolean> Maximized { get; set; }
		
		/// <summary>
		/// An org chart. Org charts require a unique set of labels in labels and may optionally include parent_labels and tooltips. parent_labels contain, for each node, the label identifying the parent node. tooltips contain, for each node, an optional tooltip. For example, to describe an OrgChart with Alice as the CEO, Bob as the President (reporting to Alice) and Cathy as VP of Sales (also reporting to Alice), have labels contain "Alice", "Bob", "Cathy", parent_labels contain "", "Alice", "Alice" and tooltips contain "CEO", "President", "VP Sales".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgChart")]
		public OrgChartSpec OrgChart { get; set; }
		
		/// <summary>
		/// A pie chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pieChart")]
		public PieChartSpec PieChart { get; set; }
		
		/// <summary>
		/// A scorecard chart. Scorecard charts are used to highlight key performance indicators, known as KPIs, on the spreadsheet. A scorecard chart can represent things like total sales, average cost, or a top selling item. You can specify a single data value, or aggregate over a range of data. Percentage or absolute difference from a baseline value can be highlighted, like changes over time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scorecardChart")]
		public ScorecardChartSpec ScorecardChart { get; set; }
		
		/// <summary>
		/// The order to sort the chart data by. Only a single sort spec is supported. Only supported for data source charts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortSpecs")]
		public SortSpec[] SortSpecs { get; set; }
		
		/// <summary>
		/// The subtitle of the chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtitle")]
		public string Subtitle { get; set; }
		
		/// <summary>
		/// The format of a run of text in a cell. Absent values indicate that the field isn't specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtitleTextFormat")]
		public TextFormat SubtitleTextFormat { get; set; }
		
		/// <summary>
		/// Position settings for text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtitleTextPosition")]
		public TextPosition SubtitleTextPosition { get; set; }
		
		/// <summary>
		/// The title of the chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The format of a run of text in a cell. Absent values indicate that the field isn't specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="titleTextFormat")]
		public TextFormat TitleTextFormat { get; set; }
		
		/// <summary>
		/// Position settings for text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="titleTextPosition")]
		public TextPosition TitleTextPosition { get; set; }
		
		/// <summary>
		/// A Treemap chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="treemapChart")]
		public TreemapChartSpec TreemapChart { get; set; }
		
		/// <summary>
		/// A waterfall chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waterfallChart")]
		public WaterfallChartSpec WaterfallChart { get; set; }
	}
	
	/// <summary>
	/// The specification for a basic chart. See BasicChartType for the list of charts this supports.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BasicChartSpec
	{
		
		/// <summary>
		/// The axis on the chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="axis")]
		public BasicChartAxis[] Axis { get; set; }
		
		/// <summary>
		/// The type of the chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chartType")]
		public System.Nullable<BasicChartSpecChartType> ChartType { get; set; }
		
		/// <summary>
		/// The behavior of tooltips and data highlighting when hovering on data and chart area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="compareMode")]
		public System.Nullable<BasicChartSpecCompareMode> CompareMode { get; set; }
		
		/// <summary>
		/// The domain of data this is charting. Only a single domain is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domains")]
		public BasicChartDomain[] Domains { get; set; }
		
		/// <summary>
		/// The number of rows or columns in the data that are "headers". If not set, Google Sheets will guess how many rows are headers based on the data. (Note that BasicChartAxis.title may override the axis title inferred from the header values.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headerCount")]
		public System.Nullable<System.Int32> HeaderCount { get; set; }
		
		/// <summary>
		/// If some values in a series are missing, gaps may appear in the chart (e.g, segments of lines in a line chart will be missing). To eliminate these gaps set this to true. Applies to Line, Area, and Combo charts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interpolateNulls")]
		public System.Nullable<System.Boolean> InterpolateNulls { get; set; }
		
		/// <summary>
		/// The position of the chart legend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legendPosition")]
		public System.Nullable<BasicChartSpecLegendPosition> LegendPosition { get; set; }
		
		/// <summary>
		/// Gets whether all lines should be rendered smooth or straight by default. Applies to Line charts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineSmoothing")]
		public System.Nullable<System.Boolean> LineSmoothing { get; set; }
		
		/// <summary>
		/// The data this chart is visualizing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="series")]
		public BasicChartSeries[] Series { get; set; }
		
		/// <summary>
		/// The stacked type for charts that support vertical stacking. Applies to Area, Bar, Column, Combo, and Stepped Area charts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackedType")]
		public System.Nullable<BasicChartSpecStackedType> StackedType { get; set; }
		
		/// <summary>
		/// True to make the chart 3D. Applies to Bar and Column charts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threeDimensional")]
		public System.Nullable<System.Boolean> ThreeDimensional { get; set; }
		
		/// <summary>
		/// Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalDataLabel")]
		public DataLabel TotalDataLabel { get; set; }
	}
	
	/// <summary>
	/// An axis of the chart. A chart may not have more than one axis per axis position.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BasicChartAxis
	{
		
		/// <summary>
		/// The format of a run of text in a cell. Absent values indicate that the field isn't specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public TextFormat Format { get; set; }
		
		/// <summary>
		/// The position of this axis.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<BasicChartAxisPosition> Position { get; set; }
		
		/// <summary>
		/// The title of this axis. If set, this overrides any title inferred from headers of the data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Position settings for text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="titleTextPosition")]
		public TextPosition TitleTextPosition { get; set; }
		
		/// <summary>
		/// The options that define a "view window" for a chart (such as the visible values in an axis).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewWindowOptions")]
		public ChartAxisViewWindowOptions ViewWindowOptions { get; set; }
	}
	
	/// <summary>
	/// The format of a run of text in a cell. Absent values indicate that the field isn't specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextFormat
	{
		
		/// <summary>
		/// True if the text is bold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bold")]
		public System.Nullable<System.Boolean> Bold { get; set; }
		
		/// <summary>
		/// The font family.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fontFamily")]
		public string FontFamily { get; set; }
		
		/// <summary>
		/// The size of the font.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fontSize")]
		public System.Nullable<System.Int32> FontSize { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foregroundColor")]
		public Color ForegroundColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foregroundColorStyle")]
		public ColorStyle ForegroundColorStyle { get; set; }
		
		/// <summary>
		/// True if the text is italicized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="italic")]
		public System.Nullable<System.Boolean> Italic { get; set; }
		
		/// <summary>
		/// An external or local reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public Link Link { get; set; }
		
		/// <summary>
		/// True if the text has a strikethrough.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strikethrough")]
		public System.Nullable<System.Boolean> Strikethrough { get; set; }
		
		/// <summary>
		/// True if the text is underlined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="underline")]
		public System.Nullable<System.Boolean> Underline { get; set; }
	}
	
	/// <summary>
	/// An external or local reference.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Link
	{
		
		/// <summary>
		/// The link identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BasicChartAxisPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC_CHART_AXIS_POSITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_AXIS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_AXIS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_AXIS = 3,
	}
	
	/// <summary>
	/// Position settings for text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextPosition
	{
		
		/// <summary>
		/// Horizontal alignment setting for the piece of text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horizontalAlignment")]
		public System.Nullable<TextPositionHorizontalAlignment> HorizontalAlignment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TextPositionHorizontalAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HORIZONTAL_ALIGN_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT = 3,
	}
	
	/// <summary>
	/// The options that define a "view window" for a chart (such as the visible values in an axis).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartAxisViewWindowOptions
	{
		
		/// <summary>
		/// The maximum numeric value to be shown in this view window. If unset, will automatically determine a maximum value that looks good for the data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewWindowMax")]
		public System.Nullable<System.Double> ViewWindowMax { get; set; }
		
		/// <summary>
		/// The minimum numeric value to be shown in this view window. If unset, will automatically determine a minimum value that looks good for the data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewWindowMin")]
		public System.Nullable<System.Double> ViewWindowMin { get; set; }
		
		/// <summary>
		/// The view window's mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewWindowMode")]
		public System.Nullable<ChartAxisViewWindowOptionsViewWindowMode> ViewWindowMode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ChartAxisViewWindowOptionsViewWindowMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_VIEW_WINDOW_MODE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEW_WINDOW_MODE_UNSUPPORTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPLICIT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRETTY = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BasicChartSpecChartType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC_CHART_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BAR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AREA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCATTER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMBO = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STEPPED_AREA = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BasicChartSpecCompareMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC_CHART_COMPARE_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATUM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CATEGORY = 2,
	}
	
	/// <summary>
	/// The domain of a chart. For example, if charting stock prices over time, this would be the date.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BasicChartDomain
	{
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public ChartData Domain { get; set; }
		
		/// <summary>
		/// True to reverse the order of the domain values (horizontal axis).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reversed")]
		public System.Nullable<System.Boolean> Reversed { get; set; }
	}
	
	/// <summary>
	/// The data included in a domain or series.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartData
	{
		
		/// <summary>
		/// The aggregation type for the series of a data source chart. Only supported for data source charts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregateType")]
		public System.Nullable<ChartDataAggregateType> AggregateType { get; set; }
		
		/// <summary>
		/// An unique identifier that references a data source column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnReference")]
		public DataSourceColumnReference ColumnReference { get; set; }
		
		/// <summary>
		/// An optional setting on the ChartData of the domain of a data source chart that defines buckets for the values in the domain rather than breaking out each individual value. For example, when plotting a data source chart, you can specify a histogram rule on the domain (it should only contain numeric values), grouping its values into buckets. Any values of a chart series that fall into the same bucket are aggregated based on the aggregate_type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupRule")]
		public ChartGroupRule GroupRule { get; set; }
		
		/// <summary>
		/// Source ranges for a chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceRange")]
		public ChartSourceRange SourceRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ChartDataAggregateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHART_AGGREGATE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVERAGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIAN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUM = 6,
	}
	
	/// <summary>
	/// An unique identifier that references a data source column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceColumnReference
	{
		
		/// <summary>
		/// The display name of the column. It should be unique within a data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// An optional setting on the ChartData of the domain of a data source chart that defines buckets for the values in the domain rather than breaking out each individual value. For example, when plotting a data source chart, you can specify a histogram rule on the domain (it should only contain numeric values), grouping its values into buckets. Any values of a chart series that fall into the same bucket are aggregated based on the aggregate_type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartGroupRule
	{
		
		/// <summary>
		/// Allows you to organize the date-time values in a source data column into buckets based on selected parts of their date or time values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTimeRule")]
		public ChartDateTimeRule DateTimeRule { get; set; }
		
		/// <summary>
		/// Allows you to organize numeric values in a source data column into buckets of constant size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="histogramRule")]
		public ChartHistogramRule HistogramRule { get; set; }
	}
	
	/// <summary>
	/// Allows you to organize the date-time values in a source data column into buckets based on selected parts of their date or time values.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartDateTimeRule
	{
		
		/// <summary>
		/// The type of date-time grouping to apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ChartDateTimeRuleType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ChartDateTimeRuleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHART_DATE_TIME_RULE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECOND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINUTE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUR_MINUTE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUR_MINUTE_AMPM = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_OF_WEEK = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_OF_YEAR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_OF_MONTH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_MONTH = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTH = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUARTER = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEAR = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEAR_MONTH = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEAR_QUARTER = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEAR_MONTH_DAY = 15,
	}
	
	/// <summary>
	/// Allows you to organize numeric values in a source data column into buckets of constant size.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartHistogramRule
	{
		
		/// <summary>
		/// The size of the buckets that are created. Must be positive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intervalSize")]
		public System.Nullable<System.Double> IntervalSize { get; set; }
		
		/// <summary>
		/// The maximum value at which items are placed into buckets. Values greater than the maximum are grouped into a single bucket. If omitted, it is determined by the maximum item value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxValue")]
		public System.Nullable<System.Double> MaxValue { get; set; }
		
		/// <summary>
		/// The minimum value at which items are placed into buckets. Values that are less than the minimum are grouped into a single bucket. If omitted, it is determined by the minimum item value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minValue")]
		public System.Nullable<System.Double> MinValue { get; set; }
	}
	
	/// <summary>
	/// Source ranges for a chart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartSourceRange
	{
		
		/// <summary>
		/// The ranges of data for a series or domain. Exactly one dimension must have a length of 1, and all sources in the list must have the same dimension with length 1. The domain (if it exists) & all series must have the same number of source ranges. If using more than one source range, then the source range at a given offset must be in order and contiguous across the domain and series. For example, these are valid configurations: domain sources: A1:A5 series1 sources: B1:B5 series2 sources: D6:D10 domain sources: A1:A5, C10:C12 series1 sources: B1:B5, D10:D12 series2 sources: C1:C5, E10:E12
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public GridRange[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BasicChartSpecLegendPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC_CHART_LEGEND_POSITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_LEGEND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_LEGEND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_LEGEND = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_LEGEND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_LEGEND = 5,
	}
	
	/// <summary>
	/// A single series of data in a chart. For example, if charting stock prices over time, multiple series may exist, one for the "Open Price", "High Price", "Low Price" and "Close Price".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BasicChartSeries
	{
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public Color Color { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorStyle")]
		public ColorStyle ColorStyle { get; set; }
		
		/// <summary>
		/// Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataLabel")]
		public DataLabel DataLabel { get; set; }
		
		/// <summary>
		/// Properties that describe the style of a line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineStyle")]
		public LineStyle LineStyle { get; set; }
		
		/// <summary>
		/// The style of a point on the chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointStyle")]
		public PointStyle PointStyle { get; set; }
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="series")]
		public ChartData Series { get; set; }
		
		/// <summary>
		/// Style override settings for series data points.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="styleOverrides")]
		public BasicSeriesDataPointStyleOverride[] StyleOverrides { get; set; }
		
		/// <summary>
		/// The minor axis that will specify the range of values for this series. For example, if charting stocks over time, the "Volume" series may want to be pinned to the right with the prices pinned to the left, because the scale of trading volume is different than the scale of prices. It is an error to specify an axis that isn't a valid minor axis for the chart's type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetAxis")]
		public BasicChartAxisPosition TargetAxis { get; set; }
		
		/// <summary>
		/// The type of this series. Valid only if the chartType is COMBO. Different types will change the way the series is visualized. Only LINE, AREA, and COLUMN are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public BasicChartSpecChartType Type { get; set; }
	}
	
	/// <summary>
	/// Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataLabel
	{
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLabelData")]
		public ChartData CustomLabelData { get; set; }
		
		/// <summary>
		/// The placement of the data label relative to the labeled data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="placement")]
		public System.Nullable<DataLabelPlacement> Placement { get; set; }
		
		/// <summary>
		/// The format of a run of text in a cell. Absent values indicate that the field isn't specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textFormat")]
		public TextFormat TextFormat { get; set; }
		
		/// <summary>
		/// The type of the data label.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DataLabelType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataLabelPlacement
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_LABEL_PLACEMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABOVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BELOW = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSIDE_END = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSIDE_BASE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OUTSIDE_END = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataLabelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_LABEL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 3,
	}
	
	/// <summary>
	/// Properties that describe the style of a line.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LineStyle
	{
		
		/// <summary>
		/// The dash type of the line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<LineStyleType> Type { get; set; }
		
		/// <summary>
		/// The thickness of the line, in px.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LineStyleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_DASH_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVISIBLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOLID = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOTTED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM_DASHED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM_DASHED_DOTTED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONG_DASHED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONG_DASHED_DOTTED = 8,
	}
	
	/// <summary>
	/// The style of a point on the chart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PointStyle
	{
		
		/// <summary>
		/// The point shape. If empty or unspecified, a default shape is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public System.Nullable<PointStyleShape> Shape { get; set; }
		
		/// <summary>
		/// The point size. If empty, a default size is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Double> Size { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PointStyleShape
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POINT_SHAPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CIRCLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIAMOND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEXAGON = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENTAGON = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SQUARE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STAR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRIANGLE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		X_MARK = 8,
	}
	
	/// <summary>
	/// Style override settings for a single series data point.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BasicSeriesDataPointStyleOverride
	{
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public Color Color { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorStyle")]
		public ColorStyle ColorStyle { get; set; }
		
		/// <summary>
		/// The zero-based index of the series data point.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The style of a point on the chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pointStyle")]
		public PointStyle PointStyle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BasicChartSpecStackedType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASIC_CHART_STACKED_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STACKED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STACKED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENT_STACKED = 3,
	}
	
	/// <summary>
	/// A bubble chart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BubbleChartSpec
	{
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bubbleBorderColor")]
		public Color BubbleBorderColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bubbleBorderColorStyle")]
		public ColorStyle BubbleBorderColorStyle { get; set; }
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bubbleLabels")]
		public ChartData BubbleLabels { get; set; }
		
		/// <summary>
		/// The max radius size of the bubbles, in pixels. If specified, the field must be a positive value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bubbleMaxRadiusSize")]
		public System.Nullable<System.Int32> BubbleMaxRadiusSize { get; set; }
		
		/// <summary>
		/// The minimum radius size of the bubbles, in pixels. If specific, the field must be a positive value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bubbleMinRadiusSize")]
		public System.Nullable<System.Int32> BubbleMinRadiusSize { get; set; }
		
		/// <summary>
		/// The opacity of the bubbles between 0 and 1.0. 0 is fully transparent and 1 is fully opaque.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bubbleOpacity")]
		public System.Nullable<System.Single> BubbleOpacity { get; set; }
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bubbleSizes")]
		public ChartData BubbleSizes { get; set; }
		
		/// <summary>
		/// The format of a run of text in a cell. Absent values indicate that the field isn't specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bubbleTextStyle")]
		public TextFormat BubbleTextStyle { get; set; }
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public ChartData Domain { get; set; }
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupIds")]
		public ChartData GroupIds { get; set; }
		
		/// <summary>
		/// Where the legend of the chart should be drawn.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legendPosition")]
		public System.Nullable<BubbleChartSpecLegendPosition> LegendPosition { get; set; }
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="series")]
		public ChartData Series { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BubbleChartSpecLegendPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUBBLE_CHART_LEGEND_POSITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_LEGEND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_LEGEND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_LEGEND = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_LEGEND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_LEGEND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSIDE_LEGEND = 6,
	}
	
	/// <summary>
	/// A candlestick chart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CandlestickChartSpec
	{
		
		/// <summary>
		/// The Candlestick chart data. Only one CandlestickData is supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CandlestickData[] Data { get; set; }
		
		/// <summary>
		/// The domain of a CandlestickChart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public CandlestickDomain Domain { get; set; }
	}
	
	/// <summary>
	/// The Candlestick chart data, each containing the low, open, close, and high values for a series.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CandlestickData
	{
		
		/// <summary>
		/// The series of a CandlestickData.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closeSeries")]
		public CandlestickSeries CloseSeries { get; set; }
		
		/// <summary>
		/// The series of a CandlestickData.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="highSeries")]
		public CandlestickSeries HighSeries { get; set; }
		
		/// <summary>
		/// The series of a CandlestickData.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lowSeries")]
		public CandlestickSeries LowSeries { get; set; }
		
		/// <summary>
		/// The series of a CandlestickData.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openSeries")]
		public CandlestickSeries OpenSeries { get; set; }
	}
	
	/// <summary>
	/// The series of a CandlestickData.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CandlestickSeries
	{
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ChartData Data { get; set; }
	}
	
	/// <summary>
	/// The domain of a CandlestickChart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CandlestickDomain
	{
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ChartData Data { get; set; }
		
		/// <summary>
		/// True to reverse the order of the domain values (horizontal axis).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reversed")]
		public System.Nullable<System.Boolean> Reversed { get; set; }
	}
	
	/// <summary>
	/// Properties of a data source chart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceChartProperties
	{
		
		/// <summary>
		/// The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataExecutionStatus")]
		public DataExecutionStatus DataExecutionStatus { get; set; }
		
		/// <summary>
		/// ID of the data source that the chart is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceId")]
		public string DataSourceId { get; set; }
	}
	
	/// <summary>
	/// The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataExecutionStatus
	{
		
		/// <summary>
		/// The error code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<DataExecutionStatusErrorCode> ErrorCode { get; set; }
		
		/// <summary>
		/// The error message, which may be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// Gets the time the data last successfully refreshed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastRefreshTime")]
		public string LastRefreshTime { get; set; }
		
		/// <summary>
		/// The state of the data execution.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<DataExecutionStatusState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataExecutionStatusErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_EXECUTION_ERROR_CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOO_MANY_ROWS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOO_MANY_COLUMNS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOO_MANY_CELLS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENGINE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARAMETER_INVALID = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNSUPPORTED_DATA_TYPE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DUPLICATE_COLUMN_NAMES = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERRUPTED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONCURRENT_QUERY = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OTHER = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOO_MANY_CHARS_PER_CELL = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_NOT_FOUND = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMISSION_DENIED = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MISSING_COLUMN_ALIAS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_NOT_FOUND = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_IN_ERROR_STATE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT_SPEC_INVALID = 18,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataExecutionStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_EXECUTION_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	/// <summary>
	/// The filter criteria associated with a specific column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilterSpec
	{
		
		/// <summary>
		/// The zero-based column index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnIndex")]
		public System.Nullable<System.Int32> ColumnIndex { get; set; }
		
		/// <summary>
		/// An unique identifier that references a data source column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceColumnReference")]
		public DataSourceColumnReference DataSourceColumnReference { get; set; }
		
		/// <summary>
		/// Criteria for showing/hiding rows in a filter or filter view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterCriteria")]
		public FilterCriteria FilterCriteria { get; set; }
	}
	
	/// <summary>
	/// Criteria for showing/hiding rows in a filter or filter view.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilterCriteria
	{
		
		/// <summary>
		/// A condition that can evaluate to true or false. BooleanConditions are used by conditional formatting, data validation, and the criteria in filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public BooleanCondition Condition { get; set; }
		
		/// <summary>
		/// Values that should be hidden.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hiddenValues")]
		public string[] HiddenValues { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibleBackgroundColor")]
		public Color VisibleBackgroundColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibleBackgroundColorStyle")]
		public ColorStyle VisibleBackgroundColorStyle { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibleForegroundColor")]
		public Color VisibleForegroundColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibleForegroundColorStyle")]
		public ColorStyle VisibleForegroundColorStyle { get; set; }
	}
	
	/// <summary>
	/// A condition that can evaluate to true or false. BooleanConditions are used by conditional formatting, data validation, and the criteria in filters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BooleanCondition
	{
		
		/// <summary>
		/// The type of condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<BooleanConditionType> Type { get; set; }
		
		/// <summary>
		/// The values of the condition. The number of supported values depends on the condition type. Some support zero values, others one or two values, and ConditionType.ONE_OF_LIST supports an arbitrary number of values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public ConditionValue[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BooleanConditionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONDITION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER_GREATER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER_GREATER_THAN_EQ = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER_LESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER_LESS_THAN_EQ = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER_EQ = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER_NOT_EQ = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER_BETWEEN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER_NOT_BETWEEN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_CONTAINS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_NOT_CONTAINS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_STARTS_WITH = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_ENDS_WITH = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_EQ = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_IS_EMAIL = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_IS_URL = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_EQ = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_BEFORE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_AFTER = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_ON_OR_BEFORE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_ON_OR_AFTER = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_BETWEEN = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_NOT_BETWEEN = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_IS_VALID = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_OF_RANGE = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_OF_LIST = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLANK = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_BLANK = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_FORMULA = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOOLEAN = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_NOT_EQ = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_NOT_EQ = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILTER_EXPRESSION = 32,
	}
	
	/// <summary>
	/// The value of the condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConditionValue
	{
		
		/// <summary>
		/// A relative date (based on the current date). Valid only if the type is DATE_BEFORE, DATE_AFTER, DATE_ON_OR_BEFORE or DATE_ON_OR_AFTER. Relative dates are not supported in data validation. They are supported only in conditional formatting and conditional filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativeDate")]
		public System.Nullable<ConditionValueRelativeDate> RelativeDate { get; set; }
		
		/// <summary>
		/// A value the condition is based on. The value is parsed as if the user typed into a cell. Formulas are supported (and must begin with an `=` or a '+').
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEnteredValue")]
		public string UserEnteredValue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConditionValueRelativeDate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RELATIVE_DATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAST_YEAR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAST_MONTH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAST_WEEK = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YESTERDAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TODAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOMORROW = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ChartSpecHiddenDimensionStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHART_HIDDEN_DIMENSION_STRATEGY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIP_HIDDEN_ROWS_AND_COLUMNS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIP_HIDDEN_ROWS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SKIP_HIDDEN_COLUMNS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHOW_ALL = 4,
	}
	
	/// <summary>
	/// A histogram chart. A histogram chart groups data items into bins, displaying each bin as a column of stacked items. Histograms are used to display the distribution of a dataset. Each column of items represents a range into which those items fall. The number of bins can be chosen automatically or specified explicitly.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HistogramChartSpec
	{
		
		/// <summary>
		/// By default the bucket size (the range of values stacked in a single column) is chosen automatically, but it may be overridden here. E.g., A bucket size of 1.5 results in buckets from 0 - 1.5, 1.5 - 3.0, etc. Cannot be negative. This field is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketSize")]
		public System.Nullable<System.Double> BucketSize { get; set; }
		
		/// <summary>
		/// The position of the chart legend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legendPosition")]
		public System.Nullable<HistogramChartSpecLegendPosition> LegendPosition { get; set; }
		
		/// <summary>
		/// The outlier percentile is used to ensure that outliers do not adversely affect the calculation of bucket sizes. For example, setting an outlier percentile of 0.05 indicates that the top and bottom 5% of values when calculating buckets. The values are still included in the chart, they will be added to the first or last buckets instead of their own buckets. Must be between 0.0 and 0.5.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outlierPercentile")]
		public System.Nullable<System.Double> OutlierPercentile { get; set; }
		
		/// <summary>
		/// The series for a histogram may be either a single series of values to be bucketed or multiple series, each of the same length, containing the name of the series followed by the values to be bucketed for that series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="series")]
		public HistogramSeries[] Series { get; set; }
		
		/// <summary>
		/// Whether horizontal divider lines should be displayed between items in each column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showItemDividers")]
		public System.Nullable<System.Boolean> ShowItemDividers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HistogramChartSpecLegendPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HISTOGRAM_CHART_LEGEND_POSITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_LEGEND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_LEGEND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_LEGEND = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_LEGEND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_LEGEND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSIDE_LEGEND = 6,
	}
	
	/// <summary>
	/// A histogram series containing the series color and data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HistogramSeries
	{
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="barColor")]
		public Color BarColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="barColorStyle")]
		public ColorStyle BarColorStyle { get; set; }
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ChartData Data { get; set; }
	}
	
	/// <summary>
	/// An org chart. Org charts require a unique set of labels in labels and may optionally include parent_labels and tooltips. parent_labels contain, for each node, the label identifying the parent node. tooltips contain, for each node, an optional tooltip. For example, to describe an OrgChart with Alice as the CEO, Bob as the President (reporting to Alice) and Cathy as VP of Sales (also reporting to Alice), have labels contain "Alice", "Bob", "Cathy", parent_labels contain "", "Alice", "Alice" and tooltips contain "CEO", "President", "VP Sales".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OrgChartSpec
	{
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public ChartData Labels { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeColor")]
		public Color NodeColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeColorStyle")]
		public ColorStyle NodeColorStyle { get; set; }
		
		/// <summary>
		/// The size of the org chart nodes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nodeSize")]
		public System.Nullable<OrgChartSpecNodeSize> NodeSize { get; set; }
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentLabels")]
		public ChartData ParentLabels { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedNodeColor")]
		public Color SelectedNodeColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="selectedNodeColorStyle")]
		public ColorStyle SelectedNodeColorStyle { get; set; }
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tooltips")]
		public ChartData Tooltips { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OrgChartSpecNodeSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ORG_CHART_LABEL_SIZE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SMALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LARGE = 3,
	}
	
	/// <summary>
	/// A pie chart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PieChartSpec
	{
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public ChartData Domain { get; set; }
		
		/// <summary>
		/// Where the legend of the pie chart should be drawn.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legendPosition")]
		public System.Nullable<PieChartSpecLegendPosition> LegendPosition { get; set; }
		
		/// <summary>
		/// The size of the hole in the pie chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pieHole")]
		public System.Nullable<System.Double> PieHole { get; set; }
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="series")]
		public ChartData Series { get; set; }
		
		/// <summary>
		/// True if the pie is three dimensional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="threeDimensional")]
		public System.Nullable<System.Boolean> ThreeDimensional { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PieChartSpecLegendPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIE_CHART_LEGEND_POSITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM_LEGEND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_LEGEND = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_LEGEND = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP_LEGEND = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_LEGEND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LABELED_LEGEND = 6,
	}
	
	/// <summary>
	/// A scorecard chart. Scorecard charts are used to highlight key performance indicators, known as KPIs, on the spreadsheet. A scorecard chart can represent things like total sales, average cost, or a top selling item. You can specify a single data value, or aggregate over a range of data. Percentage or absolute difference from a baseline value can be highlighted, like changes over time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScorecardChartSpec
	{
		
		/// <summary>
		/// The aggregation type for key and baseline chart data in scorecard chart. This field is not supported for data source charts. Use the ChartData.aggregateType field of the key_value_data or baseline_value_data instead for data source charts. This field is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregateType")]
		public ChartDataAggregateType AggregateType { get; set; }
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baselineValueData")]
		public ChartData BaselineValueData { get; set; }
		
		/// <summary>
		/// Formatting options for baseline value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baselineValueFormat")]
		public BaselineValueFormat BaselineValueFormat { get; set; }
		
		/// <summary>
		/// Custom number formatting options for chart attributes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customFormatOptions")]
		public ChartCustomNumberFormatOptions CustomFormatOptions { get; set; }
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyValueData")]
		public ChartData KeyValueData { get; set; }
		
		/// <summary>
		/// Formatting options for key value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyValueFormat")]
		public KeyValueFormat KeyValueFormat { get; set; }
		
		/// <summary>
		/// The number format source used in the scorecard chart. This field is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberFormatSource")]
		public System.Nullable<ScorecardChartSpecNumberFormatSource> NumberFormatSource { get; set; }
		
		/// <summary>
		/// Value to scale scorecard key and baseline value. For example, a factor of 10 can be used to divide all values in the chart by 10. This field is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scaleFactor")]
		public System.Nullable<System.Double> ScaleFactor { get; set; }
	}
	
	/// <summary>
	/// Formatting options for baseline value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BaselineValueFormat
	{
		
		/// <summary>
		/// The comparison type of key value with baseline value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comparisonType")]
		public System.Nullable<BaselineValueFormatComparisonType> ComparisonType { get; set; }
		
		/// <summary>
		/// Description which is appended after the baseline value. This field is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negativeColor")]
		public Color NegativeColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negativeColorStyle")]
		public ColorStyle NegativeColorStyle { get; set; }
		
		/// <summary>
		/// Position settings for text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public TextPosition Position { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positiveColor")]
		public Color PositiveColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positiveColorStyle")]
		public ColorStyle PositiveColorStyle { get; set; }
		
		/// <summary>
		/// The format of a run of text in a cell. Absent values indicate that the field isn't specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textFormat")]
		public TextFormat TextFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BaselineValueFormatComparisonType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPARISON_TYPE_UNDEFINED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABSOLUTE_DIFFERENCE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENTAGE_DIFFERENCE = 2,
	}
	
	/// <summary>
	/// Custom number formatting options for chart attributes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChartCustomNumberFormatOptions
	{
		
		/// <summary>
		/// Custom prefix to be prepended to the chart attribute. This field is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Custom suffix to be appended to the chart attribute. This field is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
	}
	
	/// <summary>
	/// Formatting options for key value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeyValueFormat
	{
		
		/// <summary>
		/// Position settings for text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public TextPosition Position { get; set; }
		
		/// <summary>
		/// The format of a run of text in a cell. Absent values indicate that the field isn't specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textFormat")]
		public TextFormat TextFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScorecardChartSpecNumberFormatSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHART_NUMBER_FORMAT_SOURCE_UNDEFINED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FROM_DATA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 2,
	}
	
	/// <summary>
	/// A sort order associated with a specific column or row.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SortSpec
	{
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public Color BackgroundColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColorStyle")]
		public ColorStyle BackgroundColorStyle { get; set; }
		
		/// <summary>
		/// An unique identifier that references a data source column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceColumnReference")]
		public DataSourceColumnReference DataSourceColumnReference { get; set; }
		
		/// <summary>
		/// The dimension the sort should be applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionIndex")]
		public System.Nullable<System.Int32> DimensionIndex { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foregroundColor")]
		public Color ForegroundColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foregroundColorStyle")]
		public ColorStyle ForegroundColorStyle { get; set; }
		
		/// <summary>
		/// The order data should be sorted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<SortSpecSortOrder> SortOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SortSpecSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SORT_ORDER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASCENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DESCENDING = 2,
	}
	
	/// <summary>
	/// A Treemap chart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TreemapChartSpec
	{
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorData")]
		public ChartData ColorData { get; set; }
		
		/// <summary>
		/// A color scale for a treemap chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorScale")]
		public TreemapChartColorScale ColorScale { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headerColor")]
		public Color HeaderColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headerColorStyle")]
		public ColorStyle HeaderColorStyle { get; set; }
		
		/// <summary>
		/// True to hide tooltips.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hideTooltips")]
		public System.Nullable<System.Boolean> HideTooltips { get; set; }
		
		/// <summary>
		/// The number of additional data levels beyond the labeled levels to be shown on the treemap chart. These levels are not interactive and are shown without their labels. Defaults to 0 if not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hintedLevels")]
		public System.Nullable<System.Int32> HintedLevels { get; set; }
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public ChartData Labels { get; set; }
		
		/// <summary>
		/// The number of data levels to show on the treemap chart. These levels are interactive and are shown with their labels. Defaults to 2 if not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="levels")]
		public System.Nullable<System.Int32> Levels { get; set; }
		
		/// <summary>
		/// The maximum possible data value. Cells with values greater than this will have the same color as cells with this value. If not specified, defaults to the actual maximum value from color_data, or the maximum value from size_data if color_data is not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxValue")]
		public System.Nullable<System.Double> MaxValue { get; set; }
		
		/// <summary>
		/// The minimum possible data value. Cells with values less than this will have the same color as cells with this value. If not specified, defaults to the actual minimum value from color_data, or the minimum value from size_data if color_data is not specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minValue")]
		public System.Nullable<System.Double> MinValue { get; set; }
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentLabels")]
		public ChartData ParentLabels { get; set; }
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeData")]
		public ChartData SizeData { get; set; }
		
		/// <summary>
		/// The format of a run of text in a cell. Absent values indicate that the field isn't specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textFormat")]
		public TextFormat TextFormat { get; set; }
	}
	
	/// <summary>
	/// A color scale for a treemap chart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TreemapChartColorScale
	{
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxValueColor")]
		public Color MaxValueColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxValueColorStyle")]
		public ColorStyle MaxValueColorStyle { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="midValueColor")]
		public Color MidValueColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="midValueColorStyle")]
		public ColorStyle MidValueColorStyle { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minValueColor")]
		public Color MinValueColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minValueColorStyle")]
		public ColorStyle MinValueColorStyle { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noDataColor")]
		public Color NoDataColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noDataColorStyle")]
		public ColorStyle NoDataColorStyle { get; set; }
	}
	
	/// <summary>
	/// A waterfall chart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WaterfallChartSpec
	{
		
		/// <summary>
		/// Properties that describe the style of a line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connectorLineStyle")]
		public LineStyle ConnectorLineStyle { get; set; }
		
		/// <summary>
		/// The domain of a waterfall chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public WaterfallChartDomain Domain { get; set; }
		
		/// <summary>
		/// True to interpret the first value as a total.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstValueIsTotal")]
		public System.Nullable<System.Boolean> FirstValueIsTotal { get; set; }
		
		/// <summary>
		/// True to hide connector lines between columns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hideConnectorLines")]
		public System.Nullable<System.Boolean> HideConnectorLines { get; set; }
		
		/// <summary>
		/// The data this waterfall chart is visualizing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="series")]
		public WaterfallChartSeries[] Series { get; set; }
		
		/// <summary>
		/// The stacked type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackedType")]
		public System.Nullable<WaterfallChartSpecStackedType> StackedType { get; set; }
		
		/// <summary>
		/// Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalDataLabel")]
		public DataLabel TotalDataLabel { get; set; }
	}
	
	/// <summary>
	/// The domain of a waterfall chart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WaterfallChartDomain
	{
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ChartData Data { get; set; }
		
		/// <summary>
		/// True to reverse the order of the domain values (horizontal axis).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reversed")]
		public System.Nullable<System.Boolean> Reversed { get; set; }
	}
	
	/// <summary>
	/// A single series of data for a waterfall chart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WaterfallChartSeries
	{
		
		/// <summary>
		/// Custom subtotal columns appearing in this series. The order in which subtotals are defined is not significant. Only one subtotal may be defined for each data point.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customSubtotals")]
		public WaterfallChartCustomSubtotal[] CustomSubtotals { get; set; }
		
		/// <summary>
		/// The data included in a domain or series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ChartData Data { get; set; }
		
		/// <summary>
		/// Settings for one set of data labels. Data labels are annotations that appear next to a set of data, such as the points on a line chart, and provide additional information about what the data represents, such as a text representation of the value behind that point on the graph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataLabel")]
		public DataLabel DataLabel { get; set; }
		
		/// <summary>
		/// True to hide the subtotal column from the end of the series. By default, a subtotal column will appear at the end of each series. Setting this field to true will hide that subtotal column for this series.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hideTrailingSubtotal")]
		public System.Nullable<System.Boolean> HideTrailingSubtotal { get; set; }
		
		/// <summary>
		/// Styles for a waterfall chart column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negativeColumnsStyle")]
		public WaterfallChartColumnStyle NegativeColumnsStyle { get; set; }
		
		/// <summary>
		/// Styles for a waterfall chart column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positiveColumnsStyle")]
		public WaterfallChartColumnStyle PositiveColumnsStyle { get; set; }
		
		/// <summary>
		/// Styles for a waterfall chart column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtotalColumnsStyle")]
		public WaterfallChartColumnStyle SubtotalColumnsStyle { get; set; }
	}
	
	/// <summary>
	/// A custom subtotal column for a waterfall chart series.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WaterfallChartCustomSubtotal
	{
		
		/// <summary>
		/// True if the data point at subtotal_index is the subtotal. If false, the subtotal will be computed and appear after the data point.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataIsSubtotal")]
		public System.Nullable<System.Boolean> DataIsSubtotal { get; set; }
		
		/// <summary>
		/// A label for the subtotal column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// The zero-based index of a data point within the series. If data_is_subtotal is true, the data point at this index is the subtotal. Otherwise, the subtotal appears after the data point with this index. A series can have multiple subtotals at arbitrary indices, but subtotals do not affect the indices of the data points. For example, if a series has three data points, their indices will always be 0, 1, and 2, regardless of how many subtotals exist on the series or what data points they are associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtotalIndex")]
		public System.Nullable<System.Int32> SubtotalIndex { get; set; }
	}
	
	/// <summary>
	/// Styles for a waterfall chart column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WaterfallChartColumnStyle
	{
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public Color Color { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorStyle")]
		public ColorStyle ColorStyle { get; set; }
		
		/// <summary>
		/// The label of the column's legend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WaterfallChartSpecStackedType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WATERFALL_STACKED_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STACKED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEQUENTIAL = 2,
	}
	
	/// <summary>
	/// The result of adding a chart to a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddChartResponse
	{
		
		/// <summary>
		/// A chart embedded in a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chart")]
		public EmbeddedChart Chart { get; set; }
	}
	
	/// <summary>
	/// Adds a new conditional format rule at the given index. All subsequent rules' indexes are incremented.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddConditionalFormatRuleRequest
	{
		
		/// <summary>
		/// The zero-based index where the rule should be inserted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// A rule describing a conditional format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public ConditionalFormatRule Rule { get; set; }
	}
	
	/// <summary>
	/// A rule describing a conditional format.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConditionalFormatRule
	{
		
		/// <summary>
		/// A rule that may or may not match, depending on the condition.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="booleanRule")]
		public BooleanRule BooleanRule { get; set; }
		
		/// <summary>
		/// A rule that applies a gradient color scale format, based on the interpolation points listed. The format of a cell will vary based on its contents as compared to the values of the interpolation points.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gradientRule")]
		public GradientRule GradientRule { get; set; }
		
		/// <summary>
		/// The ranges that are formatted if the condition is true. All the ranges must be on the same grid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ranges")]
		public GridRange[] Ranges { get; set; }
	}
	
	/// <summary>
	/// A rule that may or may not match, depending on the condition.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BooleanRule
	{
		
		/// <summary>
		/// A condition that can evaluate to true or false. BooleanConditions are used by conditional formatting, data validation, and the criteria in filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public BooleanCondition Condition { get; set; }
		
		/// <summary>
		/// The format of a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public CellFormat Format { get; set; }
	}
	
	/// <summary>
	/// The format of a cell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CellFormat
	{
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public Color BackgroundColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColorStyle")]
		public ColorStyle BackgroundColorStyle { get; set; }
		
		/// <summary>
		/// The borders of the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borders")]
		public Borders Borders { get; set; }
		
		/// <summary>
		/// The horizontal alignment of the value in the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horizontalAlignment")]
		public TextPositionHorizontalAlignment HorizontalAlignment { get; set; }
		
		/// <summary>
		/// If one exists, how a hyperlink should be displayed in the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hyperlinkDisplayType")]
		public System.Nullable<CellFormatHyperlinkDisplayType> HyperlinkDisplayType { get; set; }
		
		/// <summary>
		/// The number format of a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberFormat")]
		public NumberFormat NumberFormat { get; set; }
		
		/// <summary>
		/// The amount of padding around the cell, in pixels. When updating padding, every field must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="padding")]
		public Padding Padding { get; set; }
		
		/// <summary>
		/// The direction of the text in the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textDirection")]
		public System.Nullable<CellFormatTextDirection> TextDirection { get; set; }
		
		/// <summary>
		/// The format of a run of text in a cell. Absent values indicate that the field isn't specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textFormat")]
		public TextFormat TextFormat { get; set; }
		
		/// <summary>
		/// The rotation applied to text in a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textRotation")]
		public TextRotation TextRotation { get; set; }
		
		/// <summary>
		/// The vertical alignment of the value in the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verticalAlignment")]
		public System.Nullable<CellFormatVerticalAlignment> VerticalAlignment { get; set; }
		
		/// <summary>
		/// The wrap strategy for the value in the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wrapStrategy")]
		public System.Nullable<CellFormatWrapStrategy> WrapStrategy { get; set; }
	}
	
	/// <summary>
	/// The borders of the cell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Borders
	{
		
		/// <summary>
		/// A border along a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bottom")]
		public Border Bottom { get; set; }
		
		/// <summary>
		/// A border along a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="left")]
		public Border Left { get; set; }
		
		/// <summary>
		/// A border along a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="right")]
		public Border Right { get; set; }
		
		/// <summary>
		/// A border along a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="top")]
		public Border Top { get; set; }
	}
	
	/// <summary>
	/// A border along a cell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Border
	{
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public Color Color { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorStyle")]
		public ColorStyle ColorStyle { get; set; }
		
		/// <summary>
		/// The style of the border.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="style")]
		public System.Nullable<BorderStyle> Style { get; set; }
		
		/// <summary>
		/// The width of the border, in pixels. Deprecated; the width is determined by the "style" field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BorderStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STYLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOTTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DASHED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOLID = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOLID_MEDIUM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOLID_THICK = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOUBLE = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CellFormatHyperlinkDisplayType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HYPERLINK_DISPLAY_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINKED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAIN_TEXT = 2,
	}
	
	/// <summary>
	/// The number format of a cell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NumberFormat
	{
		
		/// <summary>
		/// Pattern string used for formatting. If not set, a default pattern based on the user's locale will be used if necessary for the given type. See the [Date and Number Formats guide](/sheets/api/guides/formats) for more information about the supported patterns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pattern")]
		public string Pattern { get; set; }
		
		/// <summary>
		/// The type of the number format. When writing, this field must be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<NumberFormatType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NumberFormatType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER_FORMAT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURRENCY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_TIME = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCIENTIFIC = 8,
	}
	
	/// <summary>
	/// The amount of padding around the cell, in pixels. When updating padding, every field must be specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Padding
	{
		
		/// <summary>
		/// The bottom padding of the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bottom")]
		public System.Nullable<System.Int32> Bottom { get; set; }
		
		/// <summary>
		/// The left padding of the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="left")]
		public System.Nullable<System.Int32> Left { get; set; }
		
		/// <summary>
		/// The right padding of the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="right")]
		public System.Nullable<System.Int32> Right { get; set; }
		
		/// <summary>
		/// The top padding of the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="top")]
		public System.Nullable<System.Int32> Top { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CellFormatTextDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_DIRECTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_TO_RIGHT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_TO_LEFT = 2,
	}
	
	/// <summary>
	/// The rotation applied to text in a cell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextRotation
	{
		
		/// <summary>
		/// The angle between the standard orientation and the desired orientation. Measured in degrees. Valid values are between -90 and 90. Positive angles are angled upwards, negative are angled downwards. Note: For LTR text direction positive angles are in the counterclockwise direction, whereas for RTL they are in the clockwise direction
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="angle")]
		public System.Nullable<System.Int32> Angle { get; set; }
		
		/// <summary>
		/// If true, text reads top to bottom, but the orientation of individual characters is unchanged. For example: | V | | e | | r | | t | | i | | c | | a | | l |
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vertical")]
		public System.Nullable<System.Boolean> Vertical { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CellFormatVerticalAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERTICAL_ALIGN_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIDDLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CellFormatWrapStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRAP_STRATEGY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERFLOW_CELL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEGACY_WRAP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRAP = 4,
	}
	
	/// <summary>
	/// A rule that applies a gradient color scale format, based on the interpolation points listed. The format of a cell will vary based on its contents as compared to the values of the interpolation points.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GradientRule
	{
		
		/// <summary>
		/// A single interpolation point on a gradient conditional format. These pin the gradient color scale according to the color, type and value chosen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxpoint")]
		public InterpolationPoint Maxpoint { get; set; }
		
		/// <summary>
		/// A single interpolation point on a gradient conditional format. These pin the gradient color scale according to the color, type and value chosen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="midpoint")]
		public InterpolationPoint Midpoint { get; set; }
		
		/// <summary>
		/// A single interpolation point on a gradient conditional format. These pin the gradient color scale according to the color, type and value chosen.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minpoint")]
		public InterpolationPoint Minpoint { get; set; }
	}
	
	/// <summary>
	/// A single interpolation point on a gradient conditional format. These pin the gradient color scale according to the color, type and value chosen.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InterpolationPoint
	{
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public Color Color { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorStyle")]
		public ColorStyle ColorStyle { get; set; }
		
		/// <summary>
		/// How the value should be interpreted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<InterpolationPointType> Type { get; set; }
		
		/// <summary>
		/// The value this interpolation point uses. May be a formula. Unused if type is MIN or MAX.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InterpolationPointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERPOLATION_POINT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENTILE = 5,
	}
	
	/// <summary>
	/// Adds a data source. After the data source is added successfully, an associated DATA_SOURCE sheet is created and an execution is triggered to refresh the sheet to read data from the data source. The request requires an additional `bigquery.readonly` OAuth scope.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddDataSourceRequest
	{
		
		/// <summary>
		/// Information about an external data source in the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSource")]
		public DataSource DataSource { get; set; }
	}
	
	/// <summary>
	/// Information about an external data source in the spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSource
	{
		
		/// <summary>
		/// All calculated columns in the data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculatedColumns")]
		public DataSourceColumn[] CalculatedColumns { get; set; }
		
		/// <summary>
		/// The spreadsheet-scoped unique ID that identifies the data source. Example: 1080547365.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceId")]
		public string DataSourceId { get; set; }
		
		/// <summary>
		/// The ID of the Sheet connected with the data source. The field cannot be changed once set. When creating a data source, an associated DATA_SOURCE sheet is also created, if the field is not specified, the ID of the created sheet will be randomly generated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetId")]
		public System.Nullable<System.Int32> SheetId { get; set; }
		
		/// <summary>
		/// This specifies the details of the data source. For example, for BigQuery, this specifies information about the BigQuery source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public DataSourceSpec Spec { get; set; }
	}
	
	/// <summary>
	/// A column in a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceColumn
	{
		
		/// <summary>
		/// The formula of the calculated column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formula")]
		public string Formula { get; set; }
		
		/// <summary>
		/// An unique identifier that references a data source column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public DataSourceColumnReference Reference { get; set; }
	}
	
	/// <summary>
	/// This specifies the details of the data source. For example, for BigQuery, this specifies information about the BigQuery source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceSpec
	{
		
		/// <summary>
		/// The specification of a BigQuery data source that's connected to a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bigQuery")]
		public BigQueryDataSourceSpec BigQuery { get; set; }
		
		/// <summary>
		/// The parameters of the data source, used when querying the data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public DataSourceParameter[] Parameters { get; set; }
	}
	
	/// <summary>
	/// The specification of a BigQuery data source that's connected to a sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BigQueryDataSourceSpec
	{
		
		/// <summary>
		/// The ID of a BigQuery enabled Google Cloud project with a billing account attached. For any queries executed against the data source, the project is charged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="projectId")]
		public string ProjectId { get; set; }
		
		/// <summary>
		/// Specifies a custom BigQuery query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="querySpec")]
		public BigQueryQuerySpec QuerySpec { get; set; }
		
		/// <summary>
		/// Specifies a BigQuery table definition. Only [native tables](https://cloud.google.com/bigquery/docs/tables-intro) are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableSpec")]
		public BigQueryTableSpec TableSpec { get; set; }
	}
	
	/// <summary>
	/// Specifies a custom BigQuery query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BigQueryQuerySpec
	{
		
		/// <summary>
		/// The raw query string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rawQuery")]
		public string RawQuery { get; set; }
	}
	
	/// <summary>
	/// Specifies a BigQuery table definition. Only [native tables](https://cloud.google.com/bigquery/docs/tables-intro) are allowed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BigQueryTableSpec
	{
		
		/// <summary>
		/// The BigQuery dataset id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="datasetId")]
		public string DatasetId { get; set; }
		
		/// <summary>
		/// The BigQuery table id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableId")]
		public string TableId { get; set; }
		
		/// <summary>
		/// The ID of a BigQuery project the table belongs to. If not specified, the project_id is assumed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableProjectId")]
		public string TableProjectId { get; set; }
	}
	
	/// <summary>
	/// A parameter in a data source's query. The parameter allows the user to pass in values from the spreadsheet into a query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceParameter
	{
		
		/// <summary>
		/// Named parameter. Must be a legitimate identifier for the DataSource that supports it. For example, [BigQuery identifier](https://cloud.google.com/bigquery/docs/reference/standard-sql/lexical#identifiers).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// ID of a NamedRange. Its size must be 1x1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedRangeId")]
		public string NamedRangeId { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
	}
	
	/// <summary>
	/// The result of adding a data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddDataSourceResponse
	{
		
		/// <summary>
		/// The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataExecutionStatus")]
		public DataExecutionStatus DataExecutionStatus { get; set; }
		
		/// <summary>
		/// Information about an external data source in the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSource")]
		public DataSource DataSource { get; set; }
	}
	
	/// <summary>
	/// Creates a group over the specified range. If the requested range is a superset of the range of an existing group G, then the depth of G is incremented and this new group G' has the depth of that group. For example, a group [C:D, depth 1] + [B:E] results in groups [B:E, depth 1] and [C:D, depth 2]. If the requested range is a subset of the range of an existing group G, then the depth of the new group G' becomes one greater than the depth of G. For example, a group [B:E, depth 1] + [C:D] results in groups [B:E, depth 1] and [C:D, depth 2]. If the requested range starts before and ends within, or starts within and ends after, the range of an existing group G, then the range of the existing group G becomes the union of the ranges, and the new group G' has depth one greater than the depth of G and range as the intersection of the ranges. For example, a group [B:D, depth 1] + [C:E] results in groups [B:E, depth 1] and [C:D, depth 2].
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddDimensionGroupRequest
	{
		
		/// <summary>
		/// A range along a single dimension on a sheet. All indexes are zero-based. Indexes are half open: the start index is inclusive and the end index is exclusive. Missing indexes indicate the range is unbounded on that side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public DimensionRange Range { get; set; }
	}
	
	/// <summary>
	/// A range along a single dimension on a sheet. All indexes are zero-based. Indexes are half open: the start index is inclusive and the end index is exclusive. Missing indexes indicate the range is unbounded on that side.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionRange
	{
		
		/// <summary>
		/// The dimension of the span.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public System.Nullable<DimensionRangeDimension> Dimension { get; set; }
		
		/// <summary>
		/// The end (exclusive) of the span, or not set if unbounded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endIndex")]
		public System.Nullable<System.Int32> EndIndex { get; set; }
		
		/// <summary>
		/// The sheet this span is on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetId")]
		public System.Nullable<System.Int32> SheetId { get; set; }
		
		/// <summary>
		/// The start (inclusive) of the span, or not set if unbounded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DimensionRangeDimension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIMENSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROWS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMNS = 2,
	}
	
	/// <summary>
	/// The result of adding a group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddDimensionGroupResponse
	{
		
		/// <summary>
		/// All groups of a dimension after adding a group to that dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionGroups")]
		public DimensionGroup[] DimensionGroups { get; set; }
	}
	
	/// <summary>
	/// A group over an interval of rows or columns on a sheet, which can contain or be contained within other groups. A group can be collapsed or expanded as a unit on the sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionGroup
	{
		
		/// <summary>
		/// This field is true if this group is collapsed. A collapsed group remains collapsed if an overlapping group at a shallower depth is expanded. A true value does not imply that all dimensions within the group are hidden, since a dimension's visibility can change independently from this group property. However, when this property is updated, all dimensions within it are set to hidden if this field is true, or set to visible if this field is false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collapsed")]
		public System.Nullable<System.Boolean> Collapsed { get; set; }
		
		/// <summary>
		/// The depth of the group, representing how many groups have a range that wholly contains the range of this group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="depth")]
		public System.Nullable<System.Int32> Depth { get; set; }
		
		/// <summary>
		/// A range along a single dimension on a sheet. All indexes are zero-based. Indexes are half open: the start index is inclusive and the end index is exclusive. Missing indexes indicate the range is unbounded on that side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public DimensionRange Range { get; set; }
	}
	
	/// <summary>
	/// Adds a filter view.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddFilterViewRequest
	{
		
		/// <summary>
		/// A filter view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public FilterView Filter { get; set; }
	}
	
	/// <summary>
	/// A filter view.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilterView
	{
		
		/// <summary>
		/// The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public System.Collections.Generic.Dictionary<string, FilterCriteria> Criteria { get; set; }
		
		/// <summary>
		/// The filter criteria for showing/hiding values per column. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterSpecs")]
		public FilterSpec[] FilterSpecs { get; set; }
		
		/// <summary>
		/// The ID of the filter view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterViewId")]
		public System.Nullable<System.Int32> FilterViewId { get; set; }
		
		/// <summary>
		/// The named range this filter view is backed by, if any. When writing, only one of range or named_range_id may be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedRangeId")]
		public string NamedRangeId { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
		
		/// <summary>
		/// The sort order per column. Later specifications are used when values are equal in the earlier specifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortSpecs")]
		public SortSpec[] SortSpecs { get; set; }
		
		/// <summary>
		/// The name of the filter view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The result of adding a filter view.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddFilterViewResponse
	{
		
		/// <summary>
		/// A filter view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public FilterView Filter { get; set; }
	}
	
	/// <summary>
	/// Adds a named range to the spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddNamedRangeRequest
	{
		
		/// <summary>
		/// A named range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedRange")]
		public NamedRange NamedRange { get; set; }
	}
	
	/// <summary>
	/// A named range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NamedRange
	{
		
		/// <summary>
		/// The name of the named range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID of the named range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedRangeId")]
		public string NamedRangeId { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
	}
	
	/// <summary>
	/// The result of adding a named range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddNamedRangeResponse
	{
		
		/// <summary>
		/// A named range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedRange")]
		public NamedRange NamedRange { get; set; }
	}
	
	/// <summary>
	/// Adds a new protected range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddProtectedRangeRequest
	{
		
		/// <summary>
		/// A protected range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectedRange")]
		public ProtectedRange ProtectedRange { get; set; }
	}
	
	/// <summary>
	/// A protected range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProtectedRange
	{
		
		/// <summary>
		/// The description of this protected range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The editors of a protected range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="editors")]
		public Editors Editors { get; set; }
		
		/// <summary>
		/// The named range this protected range is backed by, if any. When writing, only one of range or named_range_id may be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedRangeId")]
		public string NamedRangeId { get; set; }
		
		/// <summary>
		/// The ID of the protected range. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectedRangeId")]
		public System.Nullable<System.Int32> ProtectedRangeId { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
		
		/// <summary>
		/// True if the user who requested this protected range can edit the protected area. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestingUserCanEdit")]
		public System.Nullable<System.Boolean> RequestingUserCanEdit { get; set; }
		
		/// <summary>
		/// The list of unprotected ranges within a protected sheet. Unprotected ranges are only supported on protected sheets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unprotectedRanges")]
		public GridRange[] UnprotectedRanges { get; set; }
		
		/// <summary>
		/// True if this protected range will show a warning when editing. Warning-based protection means that every user can edit data in the protected range, except editing will prompt a warning asking the user to confirm the edit. When writing: if this field is true, then editors are ignored. Additionally, if this field is changed from true to false and the `editors` field is not set (nor included in the field mask), then the editors will be set to all the editors in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warningOnly")]
		public System.Nullable<System.Boolean> WarningOnly { get; set; }
	}
	
	/// <summary>
	/// The editors of a protected range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Editors
	{
		
		/// <summary>
		/// True if anyone in the document's domain has edit access to the protected range. Domain protection is only supported on documents within a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainUsersCanEdit")]
		public System.Nullable<System.Boolean> DomainUsersCanEdit { get; set; }
		
		/// <summary>
		/// The email addresses of groups with edit access to the protected range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public string[] Groups { get; set; }
		
		/// <summary>
		/// The email addresses of users with edit access to the protected range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="users")]
		public string[] Users { get; set; }
	}
	
	/// <summary>
	/// The result of adding a new protected range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddProtectedRangeResponse
	{
		
		/// <summary>
		/// A protected range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectedRange")]
		public ProtectedRange ProtectedRange { get; set; }
	}
	
	/// <summary>
	/// Adds a new sheet. When a sheet is added at a given index, all subsequent sheets' indexes are incremented. To add an object sheet, use AddChartRequest instead and specify EmbeddedObjectPosition.sheetId or EmbeddedObjectPosition.newSheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddSheetRequest
	{
		
		/// <summary>
		/// Properties of a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SheetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SheetProperties
	{
		
		/// <summary>
		/// Additional properties of a DATA_SOURCE sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceSheetProperties")]
		public DataSourceSheetProperties DataSourceSheetProperties { get; set; }
		
		/// <summary>
		/// Properties of a grid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gridProperties")]
		public GridProperties GridProperties { get; set; }
		
		/// <summary>
		/// True if the sheet is hidden in the UI, false if it's visible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hidden")]
		public System.Nullable<System.Boolean> Hidden { get; set; }
		
		/// <summary>
		/// The index of the sheet within the spreadsheet. When adding or updating sheet properties, if this field is excluded then the sheet is added or moved to the end of the sheet list. When updating sheet indices or inserting sheets, movement is considered in "before the move" indexes. For example, if there were three sheets (S1, S2, S3) in order to move S1 ahead of S2 the index would have to be set to 2. A sheet index update request is ignored if the requested index is identical to the sheets current index or if the requested new index is equal to the current sheet index + 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// True if the sheet is an RTL sheet instead of an LTR sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rightToLeft")]
		public System.Nullable<System.Boolean> RightToLeft { get; set; }
		
		/// <summary>
		/// The ID of the sheet. Must be non-negative. This field cannot be changed once set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetId")]
		public System.Nullable<System.Int32> SheetId { get; set; }
		
		/// <summary>
		/// The type of sheet. Defaults to GRID. This field cannot be changed once set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetType")]
		public System.Nullable<SheetPropertiesSheetType> SheetType { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tabColor")]
		public Color TabColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tabColorStyle")]
		public ColorStyle TabColorStyle { get; set; }
		
		/// <summary>
		/// The name of the sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// Additional properties of a DATA_SOURCE sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceSheetProperties
	{
		
		/// <summary>
		/// The columns displayed on the sheet, corresponding to the values in RowData.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public DataSourceColumn[] Columns { get; set; }
		
		/// <summary>
		/// The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataExecutionStatus")]
		public DataExecutionStatus DataExecutionStatus { get; set; }
		
		/// <summary>
		/// ID of the DataSource the sheet is connected to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceId")]
		public string DataSourceId { get; set; }
	}
	
	/// <summary>
	/// Properties of a grid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GridProperties
	{
		
		/// <summary>
		/// The number of columns in the grid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnCount")]
		public System.Nullable<System.Int32> ColumnCount { get; set; }
		
		/// <summary>
		/// True if the column grouping control toggle is shown after the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnGroupControlAfter")]
		public System.Nullable<System.Boolean> ColumnGroupControlAfter { get; set; }
		
		/// <summary>
		/// The number of columns that are frozen in the grid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frozenColumnCount")]
		public System.Nullable<System.Int32> FrozenColumnCount { get; set; }
		
		/// <summary>
		/// The number of rows that are frozen in the grid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frozenRowCount")]
		public System.Nullable<System.Int32> FrozenRowCount { get; set; }
		
		/// <summary>
		/// True if the grid isn't showing gridlines in the UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hideGridlines")]
		public System.Nullable<System.Boolean> HideGridlines { get; set; }
		
		/// <summary>
		/// The number of rows in the grid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowCount")]
		public System.Nullable<System.Int32> RowCount { get; set; }
		
		/// <summary>
		/// True if the row grouping control toggle is shown after the group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowGroupControlAfter")]
		public System.Nullable<System.Boolean> RowGroupControlAfter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SheetPropertiesSheetType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHEET_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBJECT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SOURCE = 3,
	}
	
	/// <summary>
	/// The result of adding a sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddSheetResponse
	{
		
		/// <summary>
		/// Properties of a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SheetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Adds a slicer to a sheet in the spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddSlicerRequest
	{
		
		/// <summary>
		/// A slicer in a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slicer")]
		public Slicer Slicer { get; set; }
	}
	
	/// <summary>
	/// A slicer in a sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Slicer
	{
		
		/// <summary>
		/// The position of an embedded object such as a chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public EmbeddedObjectPosition Position { get; set; }
		
		/// <summary>
		/// The ID of the slicer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slicerId")]
		public System.Nullable<System.Int32> SlicerId { get; set; }
		
		/// <summary>
		/// The specifications of a slicer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public SlicerSpec Spec { get; set; }
	}
	
	/// <summary>
	/// The specifications of a slicer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SlicerSpec
	{
		
		/// <summary>
		/// True if the filter should apply to pivot tables. If not set, default to `True`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applyToPivotTables")]
		public System.Nullable<System.Boolean> ApplyToPivotTables { get; set; }
		
		/// <summary>
		/// Represents a color in the RGBA color space. This representation is designed for simplicity of conversion to and from color representations in various languages over compactness. For example, the fields of this representation can be trivially provided to the constructor of `java.awt.Color` in Java; it can also be trivially provided to UIColor's `+colorWithRed:green:blue:alpha` method in iOS; and, with just a little work, it can be easily formatted into a CSS `rgba()` string in JavaScript. This reference page doesn't have information about the absolute color space that should be used to interpret the RGB value—for example, sRGB, Adobe RGB, DCI-P3, and BT.2020. By default, applications should assume the sRGB color space. When color equality needs to be decided, implementations, unless documented otherwise, treat two colors as equal if all their red, green, blue, and alpha values each differ by at most `1e-5`. Example (Java): import com.google.type.Color; // ... public static java.awt.Color fromProto(Color protocolor) { float alpha = protocolor.hasAlpha() ? protocolor.getAlpha().getValue() : 1.0; return new java.awt.Color( protocolor.getRed(), protocolor.getGreen(), protocolor.getBlue(), alpha); } public static Color toProto(java.awt.Color color) { float red = (float) color.getRed(); float green = (float) color.getGreen(); float blue = (float) color.getBlue(); float denominator = 255.0; Color.Builder resultBuilder = Color .newBuilder() .setRed(red / denominator) .setGreen(green / denominator) .setBlue(blue / denominator); int alpha = color.getAlpha(); if (alpha != 255) { result.setAlpha( FloatValue .newBuilder() .setValue(((float) alpha) / denominator) .build()); } return resultBuilder.build(); } // ... Example (iOS / Obj-C): // ... static UIColor* fromProto(Color* protocolor) { float red = [protocolor red]; float green = [protocolor green]; float blue = [protocolor blue]; FloatValue* alpha_wrapper = [protocolor alpha]; float alpha = 1.0; if (alpha_wrapper != nil) { alpha = [alpha_wrapper value]; } return [UIColor colorWithRed:red green:green blue:blue alpha:alpha]; } static Color* toProto(UIColor* color) { CGFloat red, green, blue, alpha; if (![color getRed:&red green:&green blue:&blue alpha:&alpha]) { return nil; } Color* result = [[Color alloc] init]; [result setRed:red]; [result setGreen:green]; [result setBlue:blue]; if (alpha <= 0.9999) { [result setAlpha:floatWrapperWithValue(alpha)]; } [result autorelease]; return result; } // ... Example (JavaScript): // ... var protoToCssColor = function(rgb_color) { var redFrac = rgb_color.red || 0.0; var greenFrac = rgb_color.green || 0.0; var blueFrac = rgb_color.blue || 0.0; var red = Math.floor(redFrac * 255); var green = Math.floor(greenFrac * 255); var blue = Math.floor(blueFrac * 255); if (!('alpha' in rgb_color)) { return rgbToCssColor(red, green, blue); } var alphaFrac = rgb_color.alpha.value || 0.0; var rgbParams = [red, green, blue].join(','); return ['rgba(', rgbParams, ',', alphaFrac, ')'].join(''); }; var rgbToCssColor = function(red, green, blue) { var rgbNumber = new Number((red << 16) | (green << 8) | blue); var hexString = rgbNumber.toString(16); var missingZeros = 6 - hexString.length; var resultBuilder = ['#']; for (var i = 0; i < missingZeros; i++) { resultBuilder.push('0'); } resultBuilder.push(hexString); return resultBuilder.join(''); }; // ...
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public Color BackgroundColor { get; set; }
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColorStyle")]
		public ColorStyle BackgroundColorStyle { get; set; }
		
		/// <summary>
		/// The zero-based column index in the data table on which the filter is applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnIndex")]
		public System.Nullable<System.Int32> ColumnIndex { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataRange")]
		public GridRange DataRange { get; set; }
		
		/// <summary>
		/// Criteria for showing/hiding rows in a filter or filter view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterCriteria")]
		public FilterCriteria FilterCriteria { get; set; }
		
		/// <summary>
		/// The horizontal alignment of title in the slicer. If unspecified, defaults to `LEFT`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horizontalAlignment")]
		public TextPositionHorizontalAlignment HorizontalAlignment { get; set; }
		
		/// <summary>
		/// The format of a run of text in a cell. Absent values indicate that the field isn't specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textFormat")]
		public TextFormat TextFormat { get; set; }
		
		/// <summary>
		/// The title of the slicer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The result of adding a slicer to a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddSlicerResponse
	{
		
		/// <summary>
		/// A slicer in a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slicer")]
		public Slicer Slicer { get; set; }
	}
	
	/// <summary>
	/// Adds new cells after the last row with data in a sheet, inserting new rows into the sheet if necessary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppendCellsRequest
	{
		
		/// <summary>
		/// The fields of CellData that should be updated. At least one field must be specified. The root is the CellData; 'row.values.' should not be specified. A single `"*"` can be used as short-hand for listing every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The data to append.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public RowData[] Rows { get; set; }
		
		/// <summary>
		/// The sheet ID to append the data to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetId")]
		public System.Nullable<System.Int32> SheetId { get; set; }
	}
	
	/// <summary>
	/// Data about each cell in a row.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RowData
	{
		
		/// <summary>
		/// The values in the row, one per column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public CellData[] Values { get; set; }
	}
	
	/// <summary>
	/// Data about a specific cell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CellData
	{
		
		/// <summary>
		/// A data source formula.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceFormula")]
		public DataSourceFormula DataSourceFormula { get; set; }
		
		/// <summary>
		/// A data source table, which allows the user to import a static table of data from the DataSource into Sheets. This is also known as "Extract" in the Sheets editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceTable")]
		public DataSourceTable DataSourceTable { get; set; }
		
		/// <summary>
		/// A data validation rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataValidation")]
		public DataValidationRule DataValidation { get; set; }
		
		/// <summary>
		/// The format of a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveFormat")]
		public CellFormat EffectiveFormat { get; set; }
		
		/// <summary>
		/// The kinds of value that a cell in a spreadsheet can have.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectiveValue")]
		public ExtendedValue EffectiveValue { get; set; }
		
		/// <summary>
		/// The formatted value of the cell. This is the value as it's shown to the user. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formattedValue")]
		public string FormattedValue { get; set; }
		
		/// <summary>
		/// A hyperlink this cell points to, if any. If the cell contains multiple hyperlinks, this field will be empty. This field is read-only. To set it, use a `=HYPERLINK` formula in the userEnteredValue.formulaValue field. A cell-level link can also be set from the userEnteredFormat.textFormat field. Alternatively, set a hyperlink in the textFormatRun.format.link field that spans the entire cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hyperlink")]
		public string Hyperlink { get; set; }
		
		/// <summary>
		/// Any note on the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// A pivot table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pivotTable")]
		public PivotTable PivotTable { get; set; }
		
		/// <summary>
		/// Runs of rich text applied to subsections of the cell. Runs are only valid on user entered strings, not formulas, bools, or numbers. Properties of a run start at a specific index in the text and continue until the next run. Runs will inherit the properties of the cell unless explicitly changed. When writing, the new runs will overwrite any prior runs. When writing a new user_entered_value, previous runs are erased.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textFormatRuns")]
		public TextFormatRun[] TextFormatRuns { get; set; }
		
		/// <summary>
		/// The format of a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEnteredFormat")]
		public CellFormat UserEnteredFormat { get; set; }
		
		/// <summary>
		/// The kinds of value that a cell in a spreadsheet can have.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userEnteredValue")]
		public ExtendedValue UserEnteredValue { get; set; }
	}
	
	/// <summary>
	/// A data source formula.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceFormula
	{
		
		/// <summary>
		/// The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataExecutionStatus")]
		public DataExecutionStatus DataExecutionStatus { get; set; }
		
		/// <summary>
		/// The ID of the data source the formula is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceId")]
		public string DataSourceId { get; set; }
	}
	
	/// <summary>
	/// A data source table, which allows the user to import a static table of data from the DataSource into Sheets. This is also known as "Extract" in the Sheets editor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceTable
	{
		
		/// <summary>
		/// The type to select columns for the data source table. Defaults to SELECTED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnSelectionType")]
		public System.Nullable<DataSourceTableColumnSelectionType> ColumnSelectionType { get; set; }
		
		/// <summary>
		/// Columns selected for the data source table. The column_selection_type must be SELECTED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public DataSourceColumnReference[] Columns { get; set; }
		
		/// <summary>
		/// The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataExecutionStatus")]
		public DataExecutionStatus DataExecutionStatus { get; set; }
		
		/// <summary>
		/// The ID of the data source the data source table is associated with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceId")]
		public string DataSourceId { get; set; }
		
		/// <summary>
		/// Filter specifications in the data source table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterSpecs")]
		public FilterSpec[] FilterSpecs { get; set; }
		
		/// <summary>
		/// The limit of rows to return. If not set, a default limit is applied. Please refer to the Sheets editor for the default and max limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowLimit")]
		public System.Nullable<System.Int32> RowLimit { get; set; }
		
		/// <summary>
		/// Sort specifications in the data source table. The result of the data source table is sorted based on the sort specifications in order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortSpecs")]
		public SortSpec[] SortSpecs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataSourceTableColumnSelectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SOURCE_TABLE_COLUMN_SELECTION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SELECTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNC_ALL = 2,
	}
	
	/// <summary>
	/// A data validation rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataValidationRule
	{
		
		/// <summary>
		/// A condition that can evaluate to true or false. BooleanConditions are used by conditional formatting, data validation, and the criteria in filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public BooleanCondition Condition { get; set; }
		
		/// <summary>
		/// A message to show the user when adding data to the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inputMessage")]
		public string InputMessage { get; set; }
		
		/// <summary>
		/// True if the UI should be customized based on the kind of condition. If true, "List" conditions will show a dropdown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showCustomUi")]
		public System.Nullable<System.Boolean> ShowCustomUi { get; set; }
		
		/// <summary>
		/// True if invalid data should be rejected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strict")]
		public System.Nullable<System.Boolean> Strict { get; set; }
	}
	
	/// <summary>
	/// The kinds of value that a cell in a spreadsheet can have.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExtendedValue
	{
		
		/// <summary>
		/// Represents a boolean value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boolValue")]
		public System.Nullable<System.Boolean> BoolValue { get; set; }
		
		/// <summary>
		/// An error in a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorValue")]
		public ErrorValue ErrorValue { get; set; }
		
		/// <summary>
		/// Represents a formula.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formulaValue")]
		public string FormulaValue { get; set; }
		
		/// <summary>
		/// Represents a double value. Note: Dates, Times and DateTimes are represented as doubles in SERIAL_NUMBER format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="numberValue")]
		public System.Nullable<System.Double> NumberValue { get; set; }
		
		/// <summary>
		/// Represents a string value. Leading single quotes are not included. For example, if the user typed `'123` into the UI, this would be represented as a `stringValue` of `"123"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
	}
	
	/// <summary>
	/// An error in a cell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorValue
	{
		
		/// <summary>
		/// A message with more information about the error (in the spreadsheet's locale).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// The type of error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ErrorValueType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ErrorValueType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NULL_VALUE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DIVIDE_BY_ZERO = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VALUE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REF = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAME = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUM = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		N_A = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOADING = 9,
	}
	
	/// <summary>
	/// A pivot table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PivotTable
	{
		
		/// <summary>
		/// Each column grouping in the pivot table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public PivotGroup[] Columns { get; set; }
		
		/// <summary>
		/// An optional mapping of filters per source column offset. The filters are applied before aggregating data into the pivot table. The map's key is the column offset of the source range that you want to filter, and the value is the criteria for that column. For example, if the source was `C10:E15`, a key of `0` will have the filter for column `C`, whereas the key `1` is for column `D`. This field is deprecated in favor of filter_specs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public System.Collections.Generic.Dictionary<string, PivotFilterCriteria> Criteria { get; set; }
		
		/// <summary>
		/// The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataExecutionStatus")]
		public DataExecutionStatus DataExecutionStatus { get; set; }
		
		/// <summary>
		/// The ID of the data source the pivot table is reading data from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceId")]
		public string DataSourceId { get; set; }
		
		/// <summary>
		/// The filters applied to the source columns before aggregating data for the pivot table. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterSpecs")]
		public PivotFilterSpec[] FilterSpecs { get; set; }
		
		/// <summary>
		/// Each row grouping in the pivot table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public PivotGroup[] Rows { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public GridRange Source { get; set; }
		
		/// <summary>
		/// Whether values should be listed horizontally (as columns) or vertically (as rows).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueLayout")]
		public System.Nullable<PivotTableValueLayout> ValueLayout { get; set; }
		
		/// <summary>
		/// A list of values to include in the pivot table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public PivotValue[] Values { get; set; }
	}
	
	/// <summary>
	/// A single grouping (either row or column) in a pivot table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PivotGroup
	{
		
		/// <summary>
		/// An unique identifier that references a data source column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceColumnReference")]
		public DataSourceColumnReference DataSourceColumnReference { get; set; }
		
		/// <summary>
		/// The count limit on rows or columns in the pivot group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupLimit")]
		public PivotGroupLimit GroupLimit { get; set; }
		
		/// <summary>
		/// An optional setting on a PivotGroup that defines buckets for the values in the source data column rather than breaking out each individual value. Only one PivotGroup with a group rule may be added for each column in the source data, though on any given column you may add both a PivotGroup that has a rule and a PivotGroup that does not.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupRule")]
		public PivotGroupRule GroupRule { get; set; }
		
		/// <summary>
		/// The labels to use for the row/column groups which can be customized. For example, in the following pivot table, the row label is `Region` (which could be renamed to `State`) and the column label is `Product` (which could be renamed `Item`). Pivot tables created before December 2017 do not have header labels. If you'd like to add header labels to an existing pivot table, please delete the existing pivot table and then create a new pivot table with same parameters. +--------------+---------+-------+ | SUM of Units | Product | | | Region | Pen | Paper | +--------------+---------+-------+ | New York | 345 | 98 | | Oregon | 234 | 123 | | Tennessee | 531 | 415 | +--------------+---------+-------+ | Grand Total | 1110 | 636 | +--------------+---------+-------+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// True if the headings in this pivot group should be repeated. This is only valid for row groupings and is ignored by columns. By default, we minimize repetition of headings by not showing higher level headings where they are the same. For example, even though the third row below corresponds to "Q1 Mar", "Q1" is not shown because it is redundant with previous rows. Setting repeat_headings to true would cause "Q1" to be repeated for "Feb" and "Mar". +--------------+ | Q1 | Jan | | | Feb | | | Mar | +--------+-----+ | Q1 Total | +--------------+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeatHeadings")]
		public System.Nullable<System.Boolean> RepeatHeadings { get; set; }
		
		/// <summary>
		/// True if the pivot table should include the totals for this grouping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="showTotals")]
		public System.Nullable<System.Boolean> ShowTotals { get; set; }
		
		/// <summary>
		/// The order the values in this group should be sorted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public SortSpecSortOrder SortOrder { get; set; }
		
		/// <summary>
		/// The column offset of the source range that this grouping is based on. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this group refers to column `C`, whereas the offset `1` would refer to column `D`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceColumnOffset")]
		public System.Nullable<System.Int32> SourceColumnOffset { get; set; }
		
		/// <summary>
		/// Information about which values in a pivot group should be used for sorting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueBucket")]
		public PivotGroupSortValueBucket ValueBucket { get; set; }
		
		/// <summary>
		/// Metadata about values in the grouping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueMetadata")]
		public PivotGroupValueMetadata[] ValueMetadata { get; set; }
	}
	
	/// <summary>
	/// The count limit on rows or columns in the pivot group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PivotGroupLimit
	{
		
		/// <summary>
		/// The order in which the group limit is applied to the pivot table. Pivot group limits are applied from lower to higher order number. Order numbers are normalized to consecutive integers from 0. For write request, to fully customize the applying orders, all pivot group limits should have this field set with an unique number. Otherwise, the order is determined by the index in the PivotTable.rows list and then the PivotTable.columns list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applyOrder")]
		public System.Nullable<System.Int32> ApplyOrder { get; set; }
		
		/// <summary>
		/// The count limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countLimit")]
		public System.Nullable<System.Int32> CountLimit { get; set; }
	}
	
	/// <summary>
	/// An optional setting on a PivotGroup that defines buckets for the values in the source data column rather than breaking out each individual value. Only one PivotGroup with a group rule may be added for each column in the source data, though on any given column you may add both a PivotGroup that has a rule and a PivotGroup that does not.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PivotGroupRule
	{
		
		/// <summary>
		/// Allows you to organize the date-time values in a source data column into buckets based on selected parts of their date or time values. For example, consider a pivot table showing sales transactions by date: +----------+--------------+ | Date | SUM of Sales | +----------+--------------+ | 1/1/2017 | $621.14 | | 2/3/2017 | $708.84 | | 5/8/2017 | $326.84 | ... +----------+--------------+ Applying a date-time group rule with a DateTimeRuleType of YEAR_MONTH results in the following pivot table. +--------------+--------------+ | Grouped Date | SUM of Sales | +--------------+--------------+ | 2017-Jan | $53,731.78 | | 2017-Feb | $83,475.32 | | 2017-Mar | $94,385.05 | ... +--------------+--------------+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTimeRule")]
		public DateTimeRule DateTimeRule { get; set; }
		
		/// <summary>
		/// Allows you to organize the numeric values in a source data column into buckets of a constant size. All values from HistogramRule.start to HistogramRule.end are placed into groups of size HistogramRule.interval. In addition, all values below HistogramRule.start are placed in one group, and all values above HistogramRule.end are placed in another. Only HistogramRule.interval is required, though if HistogramRule.start and HistogramRule.end are both provided, HistogramRule.start must be less than HistogramRule.end. For example, a pivot table showing average purchase amount by age that has 50+ rows: +-----+-------------------+ | Age | AVERAGE of Amount | +-----+-------------------+ | 16 | $27.13 | | 17 | $5.24 | | 18 | $20.15 | ... +-----+-------------------+ could be turned into a pivot table that looks like the one below by applying a histogram group rule with a HistogramRule.start of 25, an HistogramRule.interval of 20, and an HistogramRule.end of 65. +-------------+-------------------+ | Grouped Age | AVERAGE of Amount | +-------------+-------------------+ | < 25 | $19.34 | | 25-45 | $31.43 | | 45-65 | $35.87 | | > 65 | $27.55 | +-------------+-------------------+ | Grand Total | $29.12 | +-------------+-------------------+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="histogramRule")]
		public HistogramRule HistogramRule { get; set; }
		
		/// <summary>
		/// Allows you to manually organize the values in a source data column into buckets with names of your choosing. For example, a pivot table that aggregates population by state: +-------+-------------------+ | State | SUM of Population | +-------+-------------------+ | AK | 0.7 | | AL | 4.8 | | AR | 2.9 | ... +-------+-------------------+ could be turned into a pivot table that aggregates population by time zone by providing a list of groups (for example, groupName = 'Central', items = ['AL', 'AR', 'IA', ...]) to a manual group rule. Note that a similar effect could be achieved by adding a time zone column to the source data and adjusting the pivot table. +-----------+-------------------+ | Time Zone | SUM of Population | +-----------+-------------------+ | Central | 106.3 | | Eastern | 151.9 | | Mountain | 17.4 | ... +-----------+-------------------+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualRule")]
		public ManualRule ManualRule { get; set; }
	}
	
	/// <summary>
	/// Allows you to organize the date-time values in a source data column into buckets based on selected parts of their date or time values. For example, consider a pivot table showing sales transactions by date: +----------+--------------+ | Date | SUM of Sales | +----------+--------------+ | 1/1/2017 | $621.14 | | 2/3/2017 | $708.84 | | 5/8/2017 | $326.84 | ... +----------+--------------+ Applying a date-time group rule with a DateTimeRuleType of YEAR_MONTH results in the following pivot table. +--------------+--------------+ | Grouped Date | SUM of Sales | +--------------+--------------+ | 2017-Jan | $53,731.78 | | 2017-Feb | $83,475.32 | | 2017-Mar | $94,385.05 | ... +--------------+--------------+
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DateTimeRule
	{
		
		/// <summary>
		/// The type of date-time grouping to apply.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<DateTimeRuleType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DateTimeRuleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE_TIME_RULE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECOND = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINUTE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUR_MINUTE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUR_MINUTE_AMPM = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_OF_WEEK = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_OF_YEAR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_OF_MONTH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_MONTH = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTH = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUARTER = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEAR = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEAR_MONTH = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEAR_QUARTER = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEAR_MONTH_DAY = 15,
	}
	
	/// <summary>
	/// Allows you to organize the numeric values in a source data column into buckets of a constant size. All values from HistogramRule.start to HistogramRule.end are placed into groups of size HistogramRule.interval. In addition, all values below HistogramRule.start are placed in one group, and all values above HistogramRule.end are placed in another. Only HistogramRule.interval is required, though if HistogramRule.start and HistogramRule.end are both provided, HistogramRule.start must be less than HistogramRule.end. For example, a pivot table showing average purchase amount by age that has 50+ rows: +-----+-------------------+ | Age | AVERAGE of Amount | +-----+-------------------+ | 16 | $27.13 | | 17 | $5.24 | | 18 | $20.15 | ... +-----+-------------------+ could be turned into a pivot table that looks like the one below by applying a histogram group rule with a HistogramRule.start of 25, an HistogramRule.interval of 20, and an HistogramRule.end of 65. +-------------+-------------------+ | Grouped Age | AVERAGE of Amount | +-------------+-------------------+ | < 25 | $19.34 | | 25-45 | $31.43 | | 45-65 | $35.87 | | > 65 | $27.55 | +-------------+-------------------+ | Grand Total | $29.12 | +-------------+-------------------+
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HistogramRule
	{
		
		/// <summary>
		/// The maximum value at which items are placed into buckets of constant size. Values above end are lumped into a single bucket. This field is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Double> End { get; set; }
		
		/// <summary>
		/// The size of the buckets that are created. Must be positive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Double> Interval { get; set; }
		
		/// <summary>
		/// The minimum value at which items are placed into buckets of constant size. Values below start are lumped into a single bucket. This field is optional.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Double> Start { get; set; }
	}
	
	/// <summary>
	/// Allows you to manually organize the values in a source data column into buckets with names of your choosing. For example, a pivot table that aggregates population by state: +-------+-------------------+ | State | SUM of Population | +-------+-------------------+ | AK | 0.7 | | AL | 4.8 | | AR | 2.9 | ... +-------+-------------------+ could be turned into a pivot table that aggregates population by time zone by providing a list of groups (for example, groupName = 'Central', items = ['AL', 'AR', 'IA', ...]) to a manual group rule. Note that a similar effect could be achieved by adding a time zone column to the source data and adjusting the pivot table. +-----------+-------------------+ | Time Zone | SUM of Population | +-----------+-------------------+ | Central | 106.3 | | Eastern | 151.9 | | Mountain | 17.4 | ... +-----------+-------------------+
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManualRule
	{
		
		/// <summary>
		/// The list of group names and the corresponding items from the source data that map to each group name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public ManualRuleGroup[] Groups { get; set; }
	}
	
	/// <summary>
	/// A group name and a list of items from the source data that should be placed in the group with this name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManualRuleGroup
	{
		
		/// <summary>
		/// The kinds of value that a cell in a spreadsheet can have.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupName")]
		public ExtendedValue GroupName { get; set; }
		
		/// <summary>
		/// The items in the source data that should be placed into this group. Each item may be a string, number, or boolean. Items may appear in at most one group within a given ManualRule. Items that do not appear in any group will appear on their own.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public ExtendedValue[] Items { get; set; }
	}
	
	/// <summary>
	/// Information about which values in a pivot group should be used for sorting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PivotGroupSortValueBucket
	{
		
		/// <summary>
		/// Determines the bucket from which values are chosen to sort. For example, in a pivot table with one row group & two column groups, the row group can list up to two values. The first value corresponds to a value within the first column group, and the second value corresponds to a value in the second column group. If no values are listed, this would indicate that the row should be sorted according to the "Grand Total" over the column groups. If a single value is listed, this would correspond to using the "Total" of that bucket.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buckets")]
		public ExtendedValue[] Buckets { get; set; }
		
		/// <summary>
		/// The offset in the PivotTable.values list which the values in this grouping should be sorted by.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valuesIndex")]
		public System.Nullable<System.Int32> ValuesIndex { get; set; }
	}
	
	/// <summary>
	/// Metadata about a value in a pivot grouping.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PivotGroupValueMetadata
	{
		
		/// <summary>
		/// True if the data corresponding to the value is collapsed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="collapsed")]
		public System.Nullable<System.Boolean> Collapsed { get; set; }
		
		/// <summary>
		/// The kinds of value that a cell in a spreadsheet can have.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public ExtendedValue Value { get; set; }
	}
	
	/// <summary>
	/// Criteria for showing/hiding rows in a pivot table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PivotFilterCriteria
	{
		
		/// <summary>
		/// A condition that can evaluate to true or false. BooleanConditions are used by conditional formatting, data validation, and the criteria in filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public BooleanCondition Condition { get; set; }
		
		/// <summary>
		/// Whether values are visible by default. If true, the visible_values are ignored, all values that meet condition (if specified) are shown. If false, values that are both in visible_values and meet condition are shown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibleByDefault")]
		public System.Nullable<System.Boolean> VisibleByDefault { get; set; }
		
		/// <summary>
		/// Values that should be included. Values not listed here are excluded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibleValues")]
		public string[] VisibleValues { get; set; }
	}
	
	/// <summary>
	/// The pivot table filter criteria associated with a specific source column offset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PivotFilterSpec
	{
		
		/// <summary>
		/// The zero-based column offset of the source range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnOffsetIndex")]
		public System.Nullable<System.Int32> ColumnOffsetIndex { get; set; }
		
		/// <summary>
		/// An unique identifier that references a data source column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceColumnReference")]
		public DataSourceColumnReference DataSourceColumnReference { get; set; }
		
		/// <summary>
		/// Criteria for showing/hiding rows in a pivot table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterCriteria")]
		public PivotFilterCriteria FilterCriteria { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PivotTableValueLayout
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HORIZONTAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VERTICAL = 1,
	}
	
	/// <summary>
	/// The definition of how a value in a pivot table should be calculated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PivotValue
	{
		
		/// <summary>
		/// If specified, indicates that pivot values should be displayed as the result of a calculation with another pivot value. For example, if calculated_display_type is specified as PERCENT_OF_GRAND_TOTAL, all the pivot values are displayed as the percentage of the grand total. In the Sheets editor, this is referred to as "Show As" in the value section of a pivot table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="calculatedDisplayType")]
		public System.Nullable<PivotValueCalculatedDisplayType> CalculatedDisplayType { get; set; }
		
		/// <summary>
		/// An unique identifier that references a data source column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceColumnReference")]
		public DataSourceColumnReference DataSourceColumnReference { get; set; }
		
		/// <summary>
		/// A custom formula to calculate the value. The formula must start with an `=` character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formula")]
		public string Formula { get; set; }
		
		/// <summary>
		/// A name to use for the value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The column offset of the source range that this value reads from. For example, if the source was `C10:E15`, a `sourceColumnOffset` of `0` means this value refers to column `C`, whereas the offset `1` would refer to column `D`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceColumnOffset")]
		public System.Nullable<System.Int32> SourceColumnOffset { get; set; }
		
		/// <summary>
		/// A function to summarize the value. If formula is set, the only supported values are SUM and CUSTOM. If sourceColumnOffset is set, then `CUSTOM` is not supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summarizeFunction")]
		public System.Nullable<PivotValueSummarizeFunction> SummarizeFunction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PivotValueCalculatedDisplayType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIVOT_VALUE_CALCULATED_DISPLAY_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENT_OF_ROW_TOTAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENT_OF_COLUMN_TOTAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENT_OF_GRAND_TOTAL = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PivotValueSummarizeFunction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PIVOT_STANDARD_VALUE_FUNCTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNTA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COUNTUNIQUE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVERAGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MAX = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIN = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MEDIAN = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRODUCT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STDEV = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STDEVP = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VAR = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VARP = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 14,
	}
	
	/// <summary>
	/// A run of a text format. The format of this run continues until the start index of the next run. When updating, all fields must be set.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextFormatRun
	{
		
		/// <summary>
		/// The format of a run of text in a cell. Absent values indicate that the field isn't specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public TextFormat Format { get; set; }
		
		/// <summary>
		/// The zero-based character index where this run starts, in UTF-16 code units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
	}
	
	/// <summary>
	/// Appends rows or columns to the end of a sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppendDimensionRequest
	{
		
		/// <summary>
		/// Whether rows or columns should be appended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public DimensionRangeDimension Dimension { get; set; }
		
		/// <summary>
		/// The number of rows or columns to append.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// The sheet to append rows or columns to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetId")]
		public System.Nullable<System.Int32> SheetId { get; set; }
	}
	
	/// <summary>
	/// The response when updating a range of values in a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppendValuesResponse
	{
		
		/// <summary>
		/// The spreadsheet the updates were applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetId")]
		public string SpreadsheetId { get; set; }
		
		/// <summary>
		/// The range (in A1 notation) of the table that values are being appended to (before the values were appended). Empty if no table was found.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRange")]
		public string TableRange { get; set; }
		
		/// <summary>
		/// The response when updating a range of values in a spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updates")]
		public UpdateValuesResponse Updates { get; set; }
	}
	
	/// <summary>
	/// The response when updating a range of values in a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateValuesResponse
	{
		
		/// <summary>
		/// The spreadsheet the updates were applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetId")]
		public string SpreadsheetId { get; set; }
		
		/// <summary>
		/// The number of cells updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedCells")]
		public System.Nullable<System.Int32> UpdatedCells { get; set; }
		
		/// <summary>
		/// The number of columns where at least one cell in the column was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedColumns")]
		public System.Nullable<System.Int32> UpdatedColumns { get; set; }
		
		/// <summary>
		/// Data within a range of the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedData")]
		public ValueRange UpdatedData { get; set; }
		
		/// <summary>
		/// The range (in A1 notation) that updates were applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedRange")]
		public string UpdatedRange { get; set; }
		
		/// <summary>
		/// The number of rows where at least one cell in the row was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedRows")]
		public System.Nullable<System.Int32> UpdatedRows { get; set; }
	}
	
	/// <summary>
	/// Data within a range of the spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValueRange
	{
		
		/// <summary>
		/// The major dimension of the values. For output, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=A1:B2,majorDimension=ROWS` will return `[[1,2],[3,4]]`, whereas requesting `range=A1:B2,majorDimension=COLUMNS` will return `[[1,3],[2,4]]`. For input, with `range=A1:B2,majorDimension=ROWS` then `[[1,2],[3,4]]` will set `A1=1,B1=2,A2=3,B2=4`. With `range=A1:B2,majorDimension=COLUMNS` then `[[1,2],[3,4]]` will set `A1=1,B1=3,A2=2,B2=4`. When writing, if this field is not set, it defaults to ROWS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="majorDimension")]
		public DimensionRangeDimension MajorDimension { get; set; }
		
		/// <summary>
		/// The range the values cover, in [A1 notation](/sheets/api/guides/concepts#cell). For output, this range indicates the entire requested range, even though the values will exclude trailing rows and columns. When appending values, this field represents the range to search for a table, after which values will be appended.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public string Range { get; set; }
		
		/// <summary>
		/// The data that was read or to be written. This is an array of arrays, the outer array representing all the data and each inner array representing a major dimension. Each item in the inner array corresponds with one cell. For output, empty trailing rows and columns will not be included. For input, supported value types are: bool, string, and double. Null values will be skipped. To set a cell to an empty value, set the string value to an empty string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	/// <summary>
	/// Fills in more data based on existing data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoFillRequest
	{
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
		
		/// <summary>
		/// A combination of a source range and how to extend that source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceAndDestination")]
		public SourceAndDestination SourceAndDestination { get; set; }
		
		/// <summary>
		/// True if we should generate data with the "alternate" series. This differs based on the type and amount of source data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useAlternateSeries")]
		public System.Nullable<System.Boolean> UseAlternateSeries { get; set; }
	}
	
	/// <summary>
	/// A combination of a source range and how to extend that source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SourceAndDestination
	{
		
		/// <summary>
		/// The dimension that data should be filled into.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public DimensionRangeDimension Dimension { get; set; }
		
		/// <summary>
		/// The number of rows or columns that data should be filled into. Positive numbers expand beyond the last row or last column of the source. Negative numbers expand before the first row or first column of the source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fillLength")]
		public System.Nullable<System.Int32> FillLength { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public GridRange Source { get; set; }
	}
	
	/// <summary>
	/// Automatically resizes one or more dimensions based on the contents of the cells in that dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoResizeDimensionsRequest
	{
		
		/// <summary>
		/// A range along a single dimension on a DATA_SOURCE sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceSheetDimensions")]
		public DataSourceSheetDimensionRange DataSourceSheetDimensions { get; set; }
		
		/// <summary>
		/// A range along a single dimension on a sheet. All indexes are zero-based. Indexes are half open: the start index is inclusive and the end index is exclusive. Missing indexes indicate the range is unbounded on that side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public DimensionRange Dimensions { get; set; }
	}
	
	/// <summary>
	/// A range along a single dimension on a DATA_SOURCE sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceSheetDimensionRange
	{
		
		/// <summary>
		/// The columns on the data source sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnReferences")]
		public DataSourceColumnReference[] ColumnReferences { get; set; }
		
		/// <summary>
		/// The ID of the data source sheet the range is on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetId")]
		public System.Nullable<System.Int32> SheetId { get; set; }
	}
	
	/// <summary>
	/// The default filter associated with a sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BasicFilter
	{
		
		/// <summary>
		/// The criteria for showing/hiding values per column. The map's key is the column index, and the value is the criteria for that column. This field is deprecated in favor of filter_specs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="criteria")]
		public System.Collections.Generic.Dictionary<string, FilterCriteria> Criteria { get; set; }
		
		/// <summary>
		/// The filter criteria per column. Both criteria and filter_specs are populated in responses. If both fields are specified in an update request, this field takes precedence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterSpecs")]
		public FilterSpec[] FilterSpecs { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
		
		/// <summary>
		/// The sort order per column. Later specifications are used when values are equal in the earlier specifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortSpecs")]
		public SortSpec[] SortSpecs { get; set; }
	}
	
	/// <summary>
	/// The request for clearing more than one range selected by a DataFilter in a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchClearValuesByDataFilterRequest
	{
		
		/// <summary>
		/// The DataFilters used to determine which ranges to clear.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFilters")]
		public DataFilter[] DataFilters { get; set; }
	}
	
	/// <summary>
	/// Filter that describes what data should be selected or returned from a request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataFilter
	{
		
		/// <summary>
		/// Selects data that matches the specified A1 range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="a1Range")]
		public string A1Range { get; set; }
		
		/// <summary>
		/// Selects DeveloperMetadata that matches all of the specified fields. For example, if only a metadata ID is specified this considers the DeveloperMetadata with that particular unique ID. If a metadata key is specified, this considers all developer metadata with that key. If a key, visibility, and location type are all specified, this considers all developer metadata with that key and visibility that are associated with a location of that type. In general, this selects all DeveloperMetadata that matches the intersection of all the specified fields; any field or combination of fields may be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerMetadataLookup")]
		public DeveloperMetadataLookup DeveloperMetadataLookup { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gridRange")]
		public GridRange GridRange { get; set; }
	}
	
	/// <summary>
	/// Selects DeveloperMetadata that matches all of the specified fields. For example, if only a metadata ID is specified this considers the DeveloperMetadata with that particular unique ID. If a metadata key is specified, this considers all developer metadata with that key. If a key, visibility, and location type are all specified, this considers all developer metadata with that key and visibility that are associated with a location of that type. In general, this selects all DeveloperMetadata that matches the intersection of all the specified fields; any field or combination of fields may be specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeveloperMetadataLookup
	{
		
		/// <summary>
		/// Determines how this lookup matches the location. If this field is specified as EXACT, only developer metadata associated on the exact location specified is matched. If this field is specified to INTERSECTING, developer metadata associated on intersecting locations is also matched. If left unspecified, this field assumes a default value of INTERSECTING. If this field is specified, a metadataLocation must also be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationMatchingStrategy")]
		public System.Nullable<DeveloperMetadataLookupLocationMatchingStrategy> LocationMatchingStrategy { get; set; }
		
		/// <summary>
		/// Limits the selected developer metadata to those entries which are associated with locations of the specified type. For example, when this field is specified as ROW this lookup only considers developer metadata associated on rows. If the field is left unspecified, all location types are considered. This field cannot be specified as SPREADSHEET when the locationMatchingStrategy is specified as INTERSECTING or when the metadataLocation is specified as a non-spreadsheet location: spreadsheet metadata cannot intersect any other developer metadata location. This field also must be left unspecified when the locationMatchingStrategy is specified as EXACT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationType")]
		public System.Nullable<DeveloperMetadataLookupLocationType> LocationType { get; set; }
		
		/// <summary>
		/// Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataId")]
		public System.Nullable<System.Int32> MetadataId { get; set; }
		
		/// <summary>
		/// Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataKey")]
		public string MetadataKey { get; set; }
		
		/// <summary>
		/// A location where metadata may be associated in a spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataLocation")]
		public DeveloperMetadataLocation MetadataLocation { get; set; }
		
		/// <summary>
		/// Limits the selected developer metadata to that which has a matching DeveloperMetadata.metadata_value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataValue")]
		public string MetadataValue { get; set; }
		
		/// <summary>
		/// Limits the selected developer metadata to that which has a matching DeveloperMetadata.visibility. If left unspecified, all developer metadata visibile to the requesting project is considered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public System.Nullable<DeveloperMetadataLookupVisibility> Visibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeveloperMetadataLookupLocationMatchingStrategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPER_METADATA_LOCATION_MATCHING_STRATEGY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXACT_LOCATION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERSECTING_LOCATION = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeveloperMetadataLookupLocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPER_METADATA_LOCATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHEET = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPREADSHEET = 4,
	}
	
	/// <summary>
	/// A location where metadata may be associated in a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeveloperMetadataLocation
	{
		
		/// <summary>
		/// A range along a single dimension on a sheet. All indexes are zero-based. Indexes are half open: the start index is inclusive and the end index is exclusive. Missing indexes indicate the range is unbounded on that side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionRange")]
		public DimensionRange DimensionRange { get; set; }
		
		/// <summary>
		/// The type of location this object represents. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationType")]
		public DeveloperMetadataLookupLocationType LocationType { get; set; }
		
		/// <summary>
		/// The ID of the sheet when metadata is associated with an entire sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetId")]
		public System.Nullable<System.Int32> SheetId { get; set; }
		
		/// <summary>
		/// True when metadata is associated with an entire spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheet")]
		public System.Nullable<System.Boolean> Spreadsheet { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeveloperMetadataLookupVisibility
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVELOPER_METADATA_VISIBILITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOCUMENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROJECT = 2,
	}
	
	/// <summary>
	/// The response when clearing a range of values selected with DataFilters in a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchClearValuesByDataFilterResponse
	{
		
		/// <summary>
		/// The ranges that were cleared, in [A1 notation](/sheets/api/guides/concepts#cell). If the requests are for an unbounded range or a ranger larger than the bounds of the sheet, this is the actual ranges that were cleared, bounded to the sheet's limits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clearedRanges")]
		public string[] ClearedRanges { get; set; }
		
		/// <summary>
		/// The spreadsheet the updates were applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetId")]
		public string SpreadsheetId { get; set; }
	}
	
	/// <summary>
	/// The request for clearing more than one range of values in a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchClearValuesRequest
	{
		
		/// <summary>
		/// The ranges to clear, in [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ranges")]
		public string[] Ranges { get; set; }
	}
	
	/// <summary>
	/// The response when clearing a range of values in a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchClearValuesResponse
	{
		
		/// <summary>
		/// The ranges that were cleared, in A1 notation. If the requests are for an unbounded range or a ranger larger than the bounds of the sheet, this is the actual ranges that were cleared, bounded to the sheet's limits.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clearedRanges")]
		public string[] ClearedRanges { get; set; }
		
		/// <summary>
		/// The spreadsheet the updates were applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetId")]
		public string SpreadsheetId { get; set; }
	}
	
	/// <summary>
	/// The request for retrieving a range of values in a spreadsheet selected by a set of DataFilters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetValuesByDataFilterRequest
	{
		
		/// <summary>
		/// The data filters used to match the ranges of values to retrieve. Ranges that match any of the specified data filters are included in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFilters")]
		public DataFilter[] DataFilters { get; set; }
		
		/// <summary>
		/// How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTimeRenderOption")]
		public System.Nullable<BatchGetValuesByDataFilterRequestDateTimeRenderOption> DateTimeRenderOption { get; set; }
		
		/// <summary>
		/// The major dimension that results should use. For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then a request that selects that range and sets `majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas a request that sets `majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="majorDimension")]
		public DimensionRangeDimension MajorDimension { get; set; }
		
		/// <summary>
		/// How values should be represented in the output. The default render option is FORMATTED_VALUE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueRenderOption")]
		public System.Nullable<BatchGetValuesByDataFilterRequestValueRenderOption> ValueRenderOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BatchGetValuesByDataFilterRequestDateTimeRenderOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERIAL_NUMBER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORMATTED_STRING = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BatchGetValuesByDataFilterRequestValueRenderOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORMATTED_VALUE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNFORMATTED_VALUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORMULA = 2,
	}
	
	/// <summary>
	/// The response when retrieving more than one range of values in a spreadsheet selected by DataFilters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetValuesByDataFilterResponse
	{
		
		/// <summary>
		/// The ID of the spreadsheet the data was retrieved from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetId")]
		public string SpreadsheetId { get; set; }
		
		/// <summary>
		/// The requested values with the list of data filters that matched them.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueRanges")]
		public MatchedValueRange[] ValueRanges { get; set; }
	}
	
	/// <summary>
	/// A value range that was matched by one or more data filers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MatchedValueRange
	{
		
		/// <summary>
		/// The DataFilters from the request that matched the range of values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFilters")]
		public DataFilter[] DataFilters { get; set; }
		
		/// <summary>
		/// Data within a range of the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueRange")]
		public ValueRange ValueRange { get; set; }
	}
	
	/// <summary>
	/// The response when retrieving more than one range of values in a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchGetValuesResponse
	{
		
		/// <summary>
		/// The ID of the spreadsheet the data was retrieved from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetId")]
		public string SpreadsheetId { get; set; }
		
		/// <summary>
		/// The requested values. The order of the ValueRanges is the same as the order of the requested ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueRanges")]
		public ValueRange[] ValueRanges { get; set; }
	}
	
	/// <summary>
	/// The request for updating any aspect of a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateSpreadsheetRequest
	{
		
		/// <summary>
		/// Determines if the update response should include the spreadsheet resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeSpreadsheetInResponse")]
		public System.Nullable<System.Boolean> IncludeSpreadsheetInResponse { get; set; }
		
		/// <summary>
		/// A list of updates to apply to the spreadsheet. Requests will be applied in the order they are specified. If any request is not valid, no requests will be applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public Request[] Requests { get; set; }
		
		/// <summary>
		/// True if grid data should be returned. Meaningful only if include_spreadsheet_in_response is 'true'. This parameter is ignored if a field mask was set in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseIncludeGridData")]
		public System.Nullable<System.Boolean> ResponseIncludeGridData { get; set; }
		
		/// <summary>
		/// Limits the ranges included in the response spreadsheet. Meaningful only if include_spreadsheet_in_response is 'true'.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseRanges")]
		public string[] ResponseRanges { get; set; }
	}
	
	/// <summary>
	/// A single kind of update to apply to a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Request
	{
		
		/// <summary>
		/// Adds a new banded range to the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addBanding")]
		public AddBandingRequest AddBanding { get; set; }
		
		/// <summary>
		/// Adds a chart to a sheet in the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addChart")]
		public AddChartRequest AddChart { get; set; }
		
		/// <summary>
		/// Adds a new conditional format rule at the given index. All subsequent rules' indexes are incremented.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addConditionalFormatRule")]
		public AddConditionalFormatRuleRequest AddConditionalFormatRule { get; set; }
		
		/// <summary>
		/// Adds a data source. After the data source is added successfully, an associated DATA_SOURCE sheet is created and an execution is triggered to refresh the sheet to read data from the data source. The request requires an additional `bigquery.readonly` OAuth scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addDataSource")]
		public AddDataSourceRequest AddDataSource { get; set; }
		
		/// <summary>
		/// Creates a group over the specified range. If the requested range is a superset of the range of an existing group G, then the depth of G is incremented and this new group G' has the depth of that group. For example, a group [C:D, depth 1] + [B:E] results in groups [B:E, depth 1] and [C:D, depth 2]. If the requested range is a subset of the range of an existing group G, then the depth of the new group G' becomes one greater than the depth of G. For example, a group [B:E, depth 1] + [C:D] results in groups [B:E, depth 1] and [C:D, depth 2]. If the requested range starts before and ends within, or starts within and ends after, the range of an existing group G, then the range of the existing group G becomes the union of the ranges, and the new group G' has depth one greater than the depth of G and range as the intersection of the ranges. For example, a group [B:D, depth 1] + [C:E] results in groups [B:E, depth 1] and [C:D, depth 2].
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addDimensionGroup")]
		public AddDimensionGroupRequest AddDimensionGroup { get; set; }
		
		/// <summary>
		/// Adds a filter view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addFilterView")]
		public AddFilterViewRequest AddFilterView { get; set; }
		
		/// <summary>
		/// Adds a named range to the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addNamedRange")]
		public AddNamedRangeRequest AddNamedRange { get; set; }
		
		/// <summary>
		/// Adds a new protected range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addProtectedRange")]
		public AddProtectedRangeRequest AddProtectedRange { get; set; }
		
		/// <summary>
		/// Adds a new sheet. When a sheet is added at a given index, all subsequent sheets' indexes are incremented. To add an object sheet, use AddChartRequest instead and specify EmbeddedObjectPosition.sheetId or EmbeddedObjectPosition.newSheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addSheet")]
		public AddSheetRequest AddSheet { get; set; }
		
		/// <summary>
		/// Adds a slicer to a sheet in the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addSlicer")]
		public AddSlicerRequest AddSlicer { get; set; }
		
		/// <summary>
		/// Adds new cells after the last row with data in a sheet, inserting new rows into the sheet if necessary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appendCells")]
		public AppendCellsRequest AppendCells { get; set; }
		
		/// <summary>
		/// Appends rows or columns to the end of a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appendDimension")]
		public AppendDimensionRequest AppendDimension { get; set; }
		
		/// <summary>
		/// Fills in more data based on existing data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoFill")]
		public AutoFillRequest AutoFill { get; set; }
		
		/// <summary>
		/// Automatically resizes one or more dimensions based on the contents of the cells in that dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoResizeDimensions")]
		public AutoResizeDimensionsRequest AutoResizeDimensions { get; set; }
		
		/// <summary>
		/// Clears the basic filter, if any exists on the sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clearBasicFilter")]
		public ClearBasicFilterRequest ClearBasicFilter { get; set; }
		
		/// <summary>
		/// Copies data from the source to the destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="copyPaste")]
		public CopyPasteRequest CopyPaste { get; set; }
		
		/// <summary>
		/// A request to create developer metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createDeveloperMetadata")]
		public CreateDeveloperMetadataRequest CreateDeveloperMetadata { get; set; }
		
		/// <summary>
		/// Moves data from the source to the destination.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cutPaste")]
		public CutPasteRequest CutPaste { get; set; }
		
		/// <summary>
		/// Removes the banded range with the given ID from the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteBanding")]
		public DeleteBandingRequest DeleteBanding { get; set; }
		
		/// <summary>
		/// Deletes a conditional format rule at the given index. All subsequent rules' indexes are decremented.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteConditionalFormatRule")]
		public DeleteConditionalFormatRuleRequest DeleteConditionalFormatRule { get; set; }
		
		/// <summary>
		/// Deletes a data source. The request also deletes the associated data source sheet, and unlinks all associated data source objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteDataSource")]
		public DeleteDataSourceRequest DeleteDataSource { get; set; }
		
		/// <summary>
		/// A request to delete developer metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteDeveloperMetadata")]
		public DeleteDeveloperMetadataRequest DeleteDeveloperMetadata { get; set; }
		
		/// <summary>
		/// Deletes the dimensions from the sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteDimension")]
		public DeleteDimensionRequest DeleteDimension { get; set; }
		
		/// <summary>
		/// Deletes a group over the specified range by decrementing the depth of the dimensions in the range. For example, assume the sheet has a depth-1 group over B:E and a depth-2 group over C:D. Deleting a group over D:E leaves the sheet with a depth-1 group over B:D and a depth-2 group over C:C.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteDimensionGroup")]
		public DeleteDimensionGroupRequest DeleteDimensionGroup { get; set; }
		
		/// <summary>
		/// Removes rows within this range that contain values in the specified columns that are duplicates of values in any previous row. Rows with identical values but different letter cases, formatting, or formulas are considered to be duplicates. This request also removes duplicate rows hidden from view (for example, due to a filter). When removing duplicates, the first instance of each duplicate row scanning from the top downwards is kept in the resulting range. Content outside of the specified range isn't removed, and rows considered duplicates do not have to be adjacent to each other in the range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteDuplicates")]
		public DeleteDuplicatesRequest DeleteDuplicates { get; set; }
		
		/// <summary>
		/// Deletes the embedded object with the given ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteEmbeddedObject")]
		public DeleteEmbeddedObjectRequest DeleteEmbeddedObject { get; set; }
		
		/// <summary>
		/// Deletes a particular filter view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteFilterView")]
		public DeleteFilterViewRequest DeleteFilterView { get; set; }
		
		/// <summary>
		/// Removes the named range with the given ID from the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteNamedRange")]
		public DeleteNamedRangeRequest DeleteNamedRange { get; set; }
		
		/// <summary>
		/// Deletes the protected range with the given ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteProtectedRange")]
		public DeleteProtectedRangeRequest DeleteProtectedRange { get; set; }
		
		/// <summary>
		/// Deletes a range of cells, shifting other cells into the deleted area.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteRange")]
		public DeleteRangeRequest DeleteRange { get; set; }
		
		/// <summary>
		/// Deletes the requested sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteSheet")]
		public DeleteSheetRequest DeleteSheet { get; set; }
		
		/// <summary>
		/// Duplicates a particular filter view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicateFilterView")]
		public DuplicateFilterViewRequest DuplicateFilterView { get; set; }
		
		/// <summary>
		/// Duplicates the contents of a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicateSheet")]
		public DuplicateSheetRequest DuplicateSheet { get; set; }
		
		/// <summary>
		/// Finds and replaces data in cells over a range, sheet, or all sheets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="findReplace")]
		public FindReplaceRequest FindReplace { get; set; }
		
		/// <summary>
		/// Inserts rows or columns in a sheet at a particular index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertDimension")]
		public InsertDimensionRequest InsertDimension { get; set; }
		
		/// <summary>
		/// Inserts cells into a range, shifting the existing cells over or down.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertRange")]
		public InsertRangeRequest InsertRange { get; set; }
		
		/// <summary>
		/// Merges all cells in the range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mergeCells")]
		public MergeCellsRequest MergeCells { get; set; }
		
		/// <summary>
		/// Moves one or more rows or columns.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="moveDimension")]
		public MoveDimensionRequest MoveDimension { get; set; }
		
		/// <summary>
		/// Inserts data into the spreadsheet starting at the specified coordinate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pasteData")]
		public PasteDataRequest PasteData { get; set; }
		
		/// <summary>
		/// Randomizes the order of the rows in a range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="randomizeRange")]
		public RandomizeRangeRequest RandomizeRange { get; set; }
		
		/// <summary>
		/// Refreshes one or multiple data source objects in the spreadsheet by the specified references. The request requires an additional `bigquery.readonly` OAuth scope. If there are multiple refresh requests referencing the same data source objects in one batch, only the last refresh request is processed, and all those requests will have the same response accordingly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshDataSource")]
		public RefreshDataSourceRequest RefreshDataSource { get; set; }
		
		/// <summary>
		/// Updates all cells in the range to the values in the given Cell object. Only the fields listed in the fields field are updated; others are unchanged. If writing a cell with a formula, the formula's ranges will automatically increment for each field in the range. For example, if writing a cell with formula `=A1` into range B2:C4, B2 would be `=A1`, B3 would be `=A2`, B4 would be `=A3`, C2 would be `=B1`, C3 would be `=B2`, C4 would be `=B3`. To keep the formula's ranges static, use the `$` indicator. For example, use the formula `=$A$1` to prevent both the row and the column from incrementing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repeatCell")]
		public RepeatCellRequest RepeatCell { get; set; }
		
		/// <summary>
		/// Sets the basic filter associated with a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setBasicFilter")]
		public SetBasicFilterRequest SetBasicFilter { get; set; }
		
		/// <summary>
		/// Sets a data validation rule to every cell in the range. To clear validation in a range, call this with no rule specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="setDataValidation")]
		public SetDataValidationRequest SetDataValidation { get; set; }
		
		/// <summary>
		/// Sorts data in rows based on a sort order per column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortRange")]
		public SortRangeRequest SortRange { get; set; }
		
		/// <summary>
		/// Splits a column of text into multiple columns, based on a delimiter in each cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textToColumns")]
		public TextToColumnsRequest TextToColumns { get; set; }
		
		/// <summary>
		/// Trims the whitespace (such as spaces, tabs, or new lines) in every cell in the specified range. This request removes all whitespace from the start and end of each cell's text, and reduces any subsequence of remaining whitespace characters to a single space. If the resulting trimmed text starts with a '+' or '=' character, the text remains as a string value and isn't interpreted as a formula.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trimWhitespace")]
		public TrimWhitespaceRequest TrimWhitespace { get; set; }
		
		/// <summary>
		/// Unmerges cells in the given range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unmergeCells")]
		public UnmergeCellsRequest UnmergeCells { get; set; }
		
		/// <summary>
		/// Updates properties of the supplied banded range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateBanding")]
		public UpdateBandingRequest UpdateBanding { get; set; }
		
		/// <summary>
		/// Updates the borders of a range. If a field is not set in the request, that means the border remains as-is. For example, with two subsequent UpdateBordersRequest: 1. range: A1:A5 `{ top: RED, bottom: WHITE }` 2. range: A1:A5 `{ left: BLUE }` That would result in A1:A5 having a borders of `{ top: RED, bottom: WHITE, left: BLUE }`. If you want to clear a border, explicitly set the style to NONE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateBorders")]
		public UpdateBordersRequest UpdateBorders { get; set; }
		
		/// <summary>
		/// Updates all cells in a range with new data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateCells")]
		public UpdateCellsRequest UpdateCells { get; set; }
		
		/// <summary>
		/// Updates a chart's specifications. (This does not move or resize a chart. To move or resize a chart, use UpdateEmbeddedObjectPositionRequest.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateChartSpec")]
		public UpdateChartSpecRequest UpdateChartSpec { get; set; }
		
		/// <summary>
		/// Updates a conditional format rule at the given index, or moves a conditional format rule to another index.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateConditionalFormatRule")]
		public UpdateConditionalFormatRuleRequest UpdateConditionalFormatRule { get; set; }
		
		/// <summary>
		/// Updates a data source. After the data source is updated successfully, an execution is triggered to refresh the associated DATA_SOURCE sheet to read data from the updated data source. The request requires an additional `bigquery.readonly` OAuth scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateDataSource")]
		public UpdateDataSourceRequest UpdateDataSource { get; set; }
		
		/// <summary>
		/// A request to update properties of developer metadata. Updates the properties of the developer metadata selected by the filters to the values provided in the DeveloperMetadata resource. Callers must specify the properties they wish to update in the fields parameter, as well as specify at least one DataFilter matching the metadata they wish to update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateDeveloperMetadata")]
		public UpdateDeveloperMetadataRequest UpdateDeveloperMetadata { get; set; }
		
		/// <summary>
		/// Updates the state of the specified group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateDimensionGroup")]
		public UpdateDimensionGroupRequest UpdateDimensionGroup { get; set; }
		
		/// <summary>
		/// Updates properties of dimensions within the specified range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateDimensionProperties")]
		public UpdateDimensionPropertiesRequest UpdateDimensionProperties { get; set; }
		
		/// <summary>
		/// Updates an embedded object's border property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateEmbeddedObjectBorder")]
		public UpdateEmbeddedObjectBorderRequest UpdateEmbeddedObjectBorder { get; set; }
		
		/// <summary>
		/// Update an embedded object's position (such as a moving or resizing a chart or image).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateEmbeddedObjectPosition")]
		public UpdateEmbeddedObjectPositionRequest UpdateEmbeddedObjectPosition { get; set; }
		
		/// <summary>
		/// Updates properties of the filter view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateFilterView")]
		public UpdateFilterViewRequest UpdateFilterView { get; set; }
		
		/// <summary>
		/// Updates properties of the named range with the specified namedRangeId.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateNamedRange")]
		public UpdateNamedRangeRequest UpdateNamedRange { get; set; }
		
		/// <summary>
		/// Updates an existing protected range with the specified protectedRangeId.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateProtectedRange")]
		public UpdateProtectedRangeRequest UpdateProtectedRange { get; set; }
		
		/// <summary>
		/// Updates properties of the sheet with the specified sheetId.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateSheetProperties")]
		public UpdateSheetPropertiesRequest UpdateSheetProperties { get; set; }
		
		/// <summary>
		/// Updates a slicer's specifications. (This does not move or resize a slicer. To move or resize a slicer use UpdateEmbeddedObjectPositionRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateSlicerSpec")]
		public UpdateSlicerSpecRequest UpdateSlicerSpec { get; set; }
		
		/// <summary>
		/// Updates properties of a spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateSpreadsheetProperties")]
		public UpdateSpreadsheetPropertiesRequest UpdateSpreadsheetProperties { get; set; }
	}
	
	/// <summary>
	/// Clears the basic filter, if any exists on the sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClearBasicFilterRequest
	{
		
		/// <summary>
		/// The sheet ID on which the basic filter should be cleared.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetId")]
		public System.Nullable<System.Int32> SheetId { get; set; }
	}
	
	/// <summary>
	/// Copies data from the source to the destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopyPasteRequest
	{
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public GridRange Destination { get; set; }
		
		/// <summary>
		/// How that data should be oriented when pasting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pasteOrientation")]
		public System.Nullable<CopyPasteRequestPasteOrientation> PasteOrientation { get; set; }
		
		/// <summary>
		/// What kind of data to paste.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pasteType")]
		public System.Nullable<CopyPasteRequestPasteType> PasteType { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public GridRange Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CopyPasteRequestPasteOrientation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRANSPOSE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CopyPasteRequestPasteType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASTE_NORMAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASTE_VALUES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASTE_FORMAT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASTE_NO_BORDERS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASTE_FORMULA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASTE_DATA_VALIDATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PASTE_CONDITIONAL_FORMATTING = 6,
	}
	
	/// <summary>
	/// A request to create developer metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeveloperMetadataRequest
	{
		
		/// <summary>
		/// Developer metadata associated with a location or object in a spreadsheet. Developer metadata may be used to associate arbitrary data with various parts of a spreadsheet and will remain associated at those locations as they move around and the spreadsheet is edited. For example, if developer metadata is associated with row 5 and another row is then subsequently inserted above row 5, that original metadata will still be associated with the row it was first associated with (what is now row 6). If the associated object is deleted its metadata is deleted too.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerMetadata")]
		public DeveloperMetadata DeveloperMetadata { get; set; }
	}
	
	/// <summary>
	/// Developer metadata associated with a location or object in a spreadsheet. Developer metadata may be used to associate arbitrary data with various parts of a spreadsheet and will remain associated at those locations as they move around and the spreadsheet is edited. For example, if developer metadata is associated with row 5 and another row is then subsequently inserted above row 5, that original metadata will still be associated with the row it was first associated with (what is now row 6). If the associated object is deleted its metadata is deleted too.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeveloperMetadata
	{
		
		/// <summary>
		/// A location where metadata may be associated in a spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public DeveloperMetadataLocation Location { get; set; }
		
		/// <summary>
		/// The spreadsheet-scoped unique ID that identifies the metadata. IDs may be specified when metadata is created, otherwise one will be randomly generated and assigned. Must be positive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataId")]
		public System.Nullable<System.Int32> MetadataId { get; set; }
		
		/// <summary>
		/// The metadata key. There may be multiple metadata in a spreadsheet with the same key. Developer metadata must always have a key specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataKey")]
		public string MetadataKey { get; set; }
		
		/// <summary>
		/// Data associated with the metadata's key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadataValue")]
		public string MetadataValue { get; set; }
		
		/// <summary>
		/// The metadata visibility. Developer metadata must always have a visibility specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public DeveloperMetadataLookupVisibility Visibility { get; set; }
	}
	
	/// <summary>
	/// Moves data from the source to the destination.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CutPasteRequest
	{
		
		/// <summary>
		/// A coordinate in a sheet. All indexes are zero-based.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public GridCoordinate Destination { get; set; }
		
		/// <summary>
		/// What kind of data to paste. All the source data will be cut, regardless of what is pasted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pasteType")]
		public CopyPasteRequestPasteType PasteType { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public GridRange Source { get; set; }
	}
	
	/// <summary>
	/// Removes the banded range with the given ID from the spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteBandingRequest
	{
		
		/// <summary>
		/// The ID of the banded range to delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandedRangeId")]
		public System.Nullable<System.Int32> BandedRangeId { get; set; }
	}
	
	/// <summary>
	/// Deletes a conditional format rule at the given index. All subsequent rules' indexes are decremented.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteConditionalFormatRuleRequest
	{
		
		/// <summary>
		/// The zero-based index of the rule to be deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The sheet the rule is being deleted from.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetId")]
		public System.Nullable<System.Int32> SheetId { get; set; }
	}
	
	/// <summary>
	/// Deletes a data source. The request also deletes the associated data source sheet, and unlinks all associated data source objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDataSourceRequest
	{
		
		/// <summary>
		/// The ID of the data source to delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceId")]
		public string DataSourceId { get; set; }
	}
	
	/// <summary>
	/// A request to delete developer metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDeveloperMetadataRequest
	{
		
		/// <summary>
		/// Filter that describes what data should be selected or returned from a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFilter")]
		public DataFilter DataFilter { get; set; }
	}
	
	/// <summary>
	/// Deletes the dimensions from the sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDimensionRequest
	{
		
		/// <summary>
		/// A range along a single dimension on a sheet. All indexes are zero-based. Indexes are half open: the start index is inclusive and the end index is exclusive. Missing indexes indicate the range is unbounded on that side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public DimensionRange Range { get; set; }
	}
	
	/// <summary>
	/// Deletes a group over the specified range by decrementing the depth of the dimensions in the range. For example, assume the sheet has a depth-1 group over B:E and a depth-2 group over C:D. Deleting a group over D:E leaves the sheet with a depth-1 group over B:D and a depth-2 group over C:C.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDimensionGroupRequest
	{
		
		/// <summary>
		/// A range along a single dimension on a sheet. All indexes are zero-based. Indexes are half open: the start index is inclusive and the end index is exclusive. Missing indexes indicate the range is unbounded on that side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public DimensionRange Range { get; set; }
	}
	
	/// <summary>
	/// Removes rows within this range that contain values in the specified columns that are duplicates of values in any previous row. Rows with identical values but different letter cases, formatting, or formulas are considered to be duplicates. This request also removes duplicate rows hidden from view (for example, due to a filter). When removing duplicates, the first instance of each duplicate row scanning from the top downwards is kept in the resulting range. Content outside of the specified range isn't removed, and rows considered duplicates do not have to be adjacent to each other in the range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDuplicatesRequest
	{
		
		/// <summary>
		/// The columns in the range to analyze for duplicate values. If no columns are selected then all columns are analyzed for duplicates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comparisonColumns")]
		public DimensionRange[] ComparisonColumns { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
	}
	
	/// <summary>
	/// Deletes the embedded object with the given ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteEmbeddedObjectRequest
	{
		
		/// <summary>
		/// The ID of the embedded object to delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public System.Nullable<System.Int32> ObjectId { get; set; }
	}
	
	/// <summary>
	/// Deletes a particular filter view.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFilterViewRequest
	{
		
		/// <summary>
		/// The ID of the filter to delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterId")]
		public System.Nullable<System.Int32> FilterId { get; set; }
	}
	
	/// <summary>
	/// Removes the named range with the given ID from the spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteNamedRangeRequest
	{
		
		/// <summary>
		/// The ID of the named range to delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedRangeId")]
		public string NamedRangeId { get; set; }
	}
	
	/// <summary>
	/// Deletes the protected range with the given ID.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteProtectedRangeRequest
	{
		
		/// <summary>
		/// The ID of the protected range to delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectedRangeId")]
		public System.Nullable<System.Int32> ProtectedRangeId { get; set; }
	}
	
	/// <summary>
	/// Deletes a range of cells, shifting other cells into the deleted area.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteRangeRequest
	{
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
		
		/// <summary>
		/// The dimension from which deleted cells will be replaced with. If ROWS, existing cells will be shifted upward to replace the deleted cells. If COLUMNS, existing cells will be shifted left to replace the deleted cells.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shiftDimension")]
		public DimensionRangeDimension ShiftDimension { get; set; }
	}
	
	/// <summary>
	/// Deletes the requested sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteSheetRequest
	{
		
		/// <summary>
		/// The ID of the sheet to delete. If the sheet is of DATA_SOURCE type, the associated DataSource is also deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetId")]
		public System.Nullable<System.Int32> SheetId { get; set; }
	}
	
	/// <summary>
	/// Duplicates a particular filter view.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DuplicateFilterViewRequest
	{
		
		/// <summary>
		/// The ID of the filter being duplicated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterId")]
		public System.Nullable<System.Int32> FilterId { get; set; }
	}
	
	/// <summary>
	/// Duplicates the contents of a sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DuplicateSheetRequest
	{
		
		/// <summary>
		/// The zero-based index where the new sheet should be inserted. The index of all sheets after this are incremented.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertSheetIndex")]
		public System.Nullable<System.Int32> InsertSheetIndex { get; set; }
		
		/// <summary>
		/// If set, the ID of the new sheet. If not set, an ID is chosen. If set, the ID must not conflict with any existing sheet ID. If set, it must be non-negative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newSheetId")]
		public System.Nullable<System.Int32> NewSheetId { get; set; }
		
		/// <summary>
		/// The name of the new sheet. If empty, a new name is chosen for you.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newSheetName")]
		public string NewSheetName { get; set; }
		
		/// <summary>
		/// The sheet to duplicate. If the source sheet is of DATA_SOURCE type, its backing DataSource is also duplicated and associated with the new copy of the sheet. No data execution is triggered, the grid data of this sheet is also copied over but only available after the batch request completes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceSheetId")]
		public System.Nullable<System.Int32> SourceSheetId { get; set; }
	}
	
	/// <summary>
	/// Finds and replaces data in cells over a range, sheet, or all sheets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FindReplaceRequest
	{
		
		/// <summary>
		/// True to find/replace over all sheets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allSheets")]
		public System.Nullable<System.Boolean> AllSheets { get; set; }
		
		/// <summary>
		/// The value to search.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="find")]
		public string Find { get; set; }
		
		/// <summary>
		/// True if the search should include cells with formulas. False to skip cells with formulas.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeFormulas")]
		public System.Nullable<System.Boolean> IncludeFormulas { get; set; }
		
		/// <summary>
		/// True if the search is case sensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchCase")]
		public System.Nullable<System.Boolean> MatchCase { get; set; }
		
		/// <summary>
		/// True if the find value should match the entire cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchEntireCell")]
		public System.Nullable<System.Boolean> MatchEntireCell { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
		
		/// <summary>
		/// The value to use as the replacement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replacement")]
		public string Replacement { get; set; }
		
		/// <summary>
		/// True if the find value is a regex. The regular expression and replacement should follow Java regex rules at https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html. The replacement string is allowed to refer to capturing groups. For example, if one cell has the contents `"Google Sheets"` and another has `"Google Docs"`, then searching for `"o.* (.*)"` with a replacement of `"$1 Rocks"` would change the contents of the cells to `"GSheets Rocks"` and `"GDocs Rocks"` respectively.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchByRegex")]
		public System.Nullable<System.Boolean> SearchByRegex { get; set; }
		
		/// <summary>
		/// The sheet to find/replace over.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetId")]
		public System.Nullable<System.Int32> SheetId { get; set; }
	}
	
	/// <summary>
	/// Inserts rows or columns in a sheet at a particular index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertDimensionRequest
	{
		
		/// <summary>
		/// Whether dimension properties should be extended from the dimensions before or after the newly inserted dimensions. True to inherit from the dimensions before (in which case the start index must be greater than 0), and false to inherit from the dimensions after. For example, if row index 0 has red background and row index 1 has a green background, then inserting 2 rows at index 1 can inherit either the green or red background. If `inheritFromBefore` is true, the two new rows will be red (because the row before the insertion point was red), whereas if `inheritFromBefore` is false, the two new rows will be green (because the row after the insertion point was green).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inheritFromBefore")]
		public System.Nullable<System.Boolean> InheritFromBefore { get; set; }
		
		/// <summary>
		/// A range along a single dimension on a sheet. All indexes are zero-based. Indexes are half open: the start index is inclusive and the end index is exclusive. Missing indexes indicate the range is unbounded on that side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public DimensionRange Range { get; set; }
	}
	
	/// <summary>
	/// Inserts cells into a range, shifting the existing cells over or down.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertRangeRequest
	{
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
		
		/// <summary>
		/// The dimension which will be shifted when inserting cells. If ROWS, existing cells will be shifted down. If COLUMNS, existing cells will be shifted right.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shiftDimension")]
		public DimensionRangeDimension ShiftDimension { get; set; }
	}
	
	/// <summary>
	/// Merges all cells in the range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MergeCellsRequest
	{
		
		/// <summary>
		/// How the cells should be merged.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mergeType")]
		public System.Nullable<MergeCellsRequestMergeType> MergeType { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MergeCellsRequestMergeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERGE_ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERGE_COLUMNS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MERGE_ROWS = 2,
	}
	
	/// <summary>
	/// Moves one or more rows or columns.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MoveDimensionRequest
	{
		
		/// <summary>
		/// The zero-based start index of where to move the source data to, based on the coordinates *before* the source data is removed from the grid. Existing data will be shifted down or right (depending on the dimension) to make room for the moved dimensions. The source dimensions are removed from the grid, so the the data may end up in a different index than specified. For example, given `A1..A5` of `0, 1, 2, 3, 4` and wanting to move `"1"` and `"2"` to between `"3"` and `"4"`, the source would be `ROWS [1..3)`,and the destination index would be `"4"` (the zero-based index of row 5). The end result would be `A1..A5` of `0, 3, 1, 2, 4`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationIndex")]
		public System.Nullable<System.Int32> DestinationIndex { get; set; }
		
		/// <summary>
		/// A range along a single dimension on a sheet. All indexes are zero-based. Indexes are half open: the start index is inclusive and the end index is exclusive. Missing indexes indicate the range is unbounded on that side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public DimensionRange Source { get; set; }
	}
	
	/// <summary>
	/// Inserts data into the spreadsheet starting at the specified coordinate.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PasteDataRequest
	{
		
		/// <summary>
		/// A coordinate in a sheet. All indexes are zero-based.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="coordinate")]
		public GridCoordinate Coordinate { get; set; }
		
		/// <summary>
		/// The data to insert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// The delimiter in the data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delimiter")]
		public string Delimiter { get; set; }
		
		/// <summary>
		/// True if the data is HTML.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html")]
		public System.Nullable<System.Boolean> Html { get; set; }
		
		/// <summary>
		/// How the data should be pasted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CopyPasteRequestPasteType Type { get; set; }
	}
	
	/// <summary>
	/// Randomizes the order of the rows in a range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RandomizeRangeRequest
	{
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
	}
	
	/// <summary>
	/// Refreshes one or multiple data source objects in the spreadsheet by the specified references. The request requires an additional `bigquery.readonly` OAuth scope. If there are multiple refresh requests referencing the same data source objects in one batch, only the last refresh request is processed, and all those requests will have the same response accordingly.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RefreshDataSourceRequest
	{
		
		/// <summary>
		/// Reference to a DataSource. If specified, refreshes all associated data source objects for the data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceId")]
		public string DataSourceId { get; set; }
		
		/// <summary>
		/// Refreshes the data source objects regardless of the current state. If not set and a referenced data source object was in error state, the refresh will fail immediately.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="force")]
		public System.Nullable<System.Boolean> Force { get; set; }
		
		/// <summary>
		/// Refreshes all existing data source objects in the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isAll")]
		public System.Nullable<System.Boolean> IsAll { get; set; }
		
		/// <summary>
		/// A list of references to data source objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public DataSourceObjectReferences References { get; set; }
	}
	
	/// <summary>
	/// A list of references to data source objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceObjectReferences
	{
		
		/// <summary>
		/// The references.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public DataSourceObjectReference[] References { get; set; }
	}
	
	/// <summary>
	/// Reference to a data source object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceObjectReference
	{
		
		/// <summary>
		/// References to a data source chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chartId")]
		public System.Nullable<System.Int32> ChartId { get; set; }
		
		/// <summary>
		/// A coordinate in a sheet. All indexes are zero-based.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceFormulaCell")]
		public GridCoordinate DataSourceFormulaCell { get; set; }
		
		/// <summary>
		/// A coordinate in a sheet. All indexes are zero-based.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourcePivotTableAnchorCell")]
		public GridCoordinate DataSourcePivotTableAnchorCell { get; set; }
		
		/// <summary>
		/// A coordinate in a sheet. All indexes are zero-based.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceTableAnchorCell")]
		public GridCoordinate DataSourceTableAnchorCell { get; set; }
		
		/// <summary>
		/// References to a DATA_SOURCE sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetId")]
		public string SheetId { get; set; }
	}
	
	/// <summary>
	/// Updates all cells in the range to the values in the given Cell object. Only the fields listed in the fields field are updated; others are unchanged. If writing a cell with a formula, the formula's ranges will automatically increment for each field in the range. For example, if writing a cell with formula `=A1` into range B2:C4, B2 would be `=A1`, B3 would be `=A2`, B4 would be `=A3`, C2 would be `=B1`, C3 would be `=B2`, C4 would be `=B3`. To keep the formula's ranges static, use the `$` indicator. For example, use the formula `=$A$1` to prevent both the row and the column from incrementing.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RepeatCellRequest
	{
		
		/// <summary>
		/// Data about a specific cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cell")]
		public CellData Cell { get; set; }
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `cell` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
	}
	
	/// <summary>
	/// Sets the basic filter associated with a sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetBasicFilterRequest
	{
		
		/// <summary>
		/// The default filter associated with a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public BasicFilter Filter { get; set; }
	}
	
	/// <summary>
	/// Sets a data validation rule to every cell in the range. To clear validation in a range, call this with no rule specified.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SetDataValidationRequest
	{
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
		
		/// <summary>
		/// A data validation rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public DataValidationRule Rule { get; set; }
	}
	
	/// <summary>
	/// Sorts data in rows based on a sort order per column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SortRangeRequest
	{
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
		
		/// <summary>
		/// The sort order per column. Later specifications are used when values are equal in the earlier specifications.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortSpecs")]
		public SortSpec[] SortSpecs { get; set; }
	}
	
	/// <summary>
	/// Splits a column of text into multiple columns, based on a delimiter in each cell.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextToColumnsRequest
	{
		
		/// <summary>
		/// The delimiter to use. Used only if delimiterType is CUSTOM.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delimiter")]
		public string Delimiter { get; set; }
		
		/// <summary>
		/// The delimiter type to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="delimiterType")]
		public System.Nullable<TextToColumnsRequestDelimiterType> DelimiterType { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="source")]
		public GridRange Source { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TextToColumnsRequestDelimiterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DELIMITER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMMA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEMICOLON = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERIOD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPACE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTODETECT = 6,
	}
	
	/// <summary>
	/// Trims the whitespace (such as spaces, tabs, or new lines) in every cell in the specified range. This request removes all whitespace from the start and end of each cell's text, and reduces any subsequence of remaining whitespace characters to a single space. If the resulting trimmed text starts with a '+' or '=' character, the text remains as a string value and isn't interpreted as a formula.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrimWhitespaceRequest
	{
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
	}
	
	/// <summary>
	/// Unmerges cells in the given range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnmergeCellsRequest
	{
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
	}
	
	/// <summary>
	/// Updates properties of the supplied banded range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBandingRequest
	{
		
		/// <summary>
		/// A banded (alternating colors) range in a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandedRange")]
		public BandedRange BandedRange { get; set; }
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `bandedRange` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
	}
	
	/// <summary>
	/// Updates the borders of a range. If a field is not set in the request, that means the border remains as-is. For example, with two subsequent UpdateBordersRequest: 1. range: A1:A5 `{ top: RED, bottom: WHITE }` 2. range: A1:A5 `{ left: BLUE }` That would result in A1:A5 having a borders of `{ top: RED, bottom: WHITE, left: BLUE }`. If you want to clear a border, explicitly set the style to NONE.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateBordersRequest
	{
		
		/// <summary>
		/// A border along a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bottom")]
		public Border Bottom { get; set; }
		
		/// <summary>
		/// A border along a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerHorizontal")]
		public Border InnerHorizontal { get; set; }
		
		/// <summary>
		/// A border along a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="innerVertical")]
		public Border InnerVertical { get; set; }
		
		/// <summary>
		/// A border along a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="left")]
		public Border Left { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
		
		/// <summary>
		/// A border along a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="right")]
		public Border Right { get; set; }
		
		/// <summary>
		/// A border along a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="top")]
		public Border Top { get; set; }
	}
	
	/// <summary>
	/// Updates all cells in a range with new data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateCellsRequest
	{
		
		/// <summary>
		/// The fields of CellData that should be updated. At least one field must be specified. The root is the CellData; 'row.values.' should not be specified. A single `"*"` can be used as short-hand for listing every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// A range on a sheet. All indexes are zero-based. Indexes are half open, i.e. the start index is inclusive and the end index is exclusive -- [start_index, end_index). Missing indexes indicate the range is unbounded on that side. For example, if `"Sheet1"` is sheet ID 123456, then: `Sheet1!A1:A1 == sheet_id: 123456, start_row_index: 0, end_row_index: 1, start_column_index: 0, end_column_index: 1` `Sheet1!A3:B4 == sheet_id: 123456, start_row_index: 2, end_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1!A:B == sheet_id: 123456, start_column_index: 0, end_column_index: 2` `Sheet1!A5:B == sheet_id: 123456, start_row_index: 4, start_column_index: 0, end_column_index: 2` `Sheet1 == sheet_id: 123456` The start index must always be less than or equal to the end index. If the start index equals the end index, then the range is empty. Empty ranges are typically not meaningful and are usually rendered in the UI as `#REF!`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public GridRange Range { get; set; }
		
		/// <summary>
		/// The data to write.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public RowData[] Rows { get; set; }
		
		/// <summary>
		/// A coordinate in a sheet. All indexes are zero-based.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public GridCoordinate Start { get; set; }
	}
	
	/// <summary>
	/// Updates a chart's specifications. (This does not move or resize a chart. To move or resize a chart, use UpdateEmbeddedObjectPositionRequest.)
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateChartSpecRequest
	{
		
		/// <summary>
		/// The ID of the chart to update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chartId")]
		public System.Nullable<System.Int32> ChartId { get; set; }
		
		/// <summary>
		/// The specifications of a chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public ChartSpec Spec { get; set; }
	}
	
	/// <summary>
	/// Updates a conditional format rule at the given index, or moves a conditional format rule to another index.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateConditionalFormatRuleRequest
	{
		
		/// <summary>
		/// The zero-based index of the rule that should be replaced or moved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The zero-based new index the rule should end up at.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newIndex")]
		public System.Nullable<System.Int32> NewIndex { get; set; }
		
		/// <summary>
		/// A rule describing a conditional format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public ConditionalFormatRule Rule { get; set; }
		
		/// <summary>
		/// The sheet of the rule to move. Required if new_index is set, unused otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetId")]
		public System.Nullable<System.Int32> SheetId { get; set; }
	}
	
	/// <summary>
	/// Updates a data source. After the data source is updated successfully, an execution is triggered to refresh the associated DATA_SOURCE sheet to read data from the updated data source. The request requires an additional `bigquery.readonly` OAuth scope.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDataSourceRequest
	{
		
		/// <summary>
		/// Information about an external data source in the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSource")]
		public DataSource DataSource { get; set; }
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `dataSource` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
	}
	
	/// <summary>
	/// A request to update properties of developer metadata. Updates the properties of the developer metadata selected by the filters to the values provided in the DeveloperMetadata resource. Callers must specify the properties they wish to update in the fields parameter, as well as specify at least one DataFilter matching the metadata they wish to update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDeveloperMetadataRequest
	{
		
		/// <summary>
		/// The filters matching the developer metadata entries to update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFilters")]
		public DataFilter[] DataFilters { get; set; }
		
		/// <summary>
		/// Developer metadata associated with a location or object in a spreadsheet. Developer metadata may be used to associate arbitrary data with various parts of a spreadsheet and will remain associated at those locations as they move around and the spreadsheet is edited. For example, if developer metadata is associated with row 5 and another row is then subsequently inserted above row 5, that original metadata will still be associated with the row it was first associated with (what is now row 6). If the associated object is deleted its metadata is deleted too.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerMetadata")]
		public DeveloperMetadata DeveloperMetadata { get; set; }
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `developerMetadata` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
	}
	
	/// <summary>
	/// Updates the state of the specified group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDimensionGroupRequest
	{
		
		/// <summary>
		/// A group over an interval of rows or columns on a sheet, which can contain or be contained within other groups. A group can be collapsed or expanded as a unit on the sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionGroup")]
		public DimensionGroup DimensionGroup { get; set; }
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `dimensionGroup` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
	}
	
	/// <summary>
	/// Updates properties of dimensions within the specified range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDimensionPropertiesRequest
	{
		
		/// <summary>
		/// A range along a single dimension on a DATA_SOURCE sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceSheetRange")]
		public DataSourceSheetDimensionRange DataSourceSheetRange { get; set; }
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `properties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// Properties about a dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public DimensionProperties Properties { get; set; }
		
		/// <summary>
		/// A range along a single dimension on a sheet. All indexes are zero-based. Indexes are half open: the start index is inclusive and the end index is exclusive. Missing indexes indicate the range is unbounded on that side.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public DimensionRange Range { get; set; }
	}
	
	/// <summary>
	/// Properties about a dimension.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DimensionProperties
	{
		
		/// <summary>
		/// An unique identifier that references a data source column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceColumnReference")]
		public DataSourceColumnReference DataSourceColumnReference { get; set; }
		
		/// <summary>
		/// The developer metadata associated with a single row or column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerMetadata")]
		public DeveloperMetadata[] DeveloperMetadata { get; set; }
		
		/// <summary>
		/// True if this dimension is being filtered. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hiddenByFilter")]
		public System.Nullable<System.Boolean> HiddenByFilter { get; set; }
		
		/// <summary>
		/// True if this dimension is explicitly hidden.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hiddenByUser")]
		public System.Nullable<System.Boolean> HiddenByUser { get; set; }
		
		/// <summary>
		/// The height (if a row) or width (if a column) of the dimension in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pixelSize")]
		public System.Nullable<System.Int32> PixelSize { get; set; }
	}
	
	/// <summary>
	/// Updates an embedded object's border property.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateEmbeddedObjectBorderRequest
	{
		
		/// <summary>
		/// A border along an embedded object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="border")]
		public EmbeddedObjectBorder Border { get; set; }
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `border` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The ID of the embedded object to update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public System.Nullable<System.Int32> ObjectId { get; set; }
	}
	
	/// <summary>
	/// Update an embedded object's position (such as a moving or resizing a chart or image).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateEmbeddedObjectPositionRequest
	{
		
		/// <summary>
		/// The fields of OverlayPosition that should be updated when setting a new position. Used only if newPosition.overlayPosition is set, in which case at least one field must be specified. The root `newPosition.overlayPosition` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The position of an embedded object such as a chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newPosition")]
		public EmbeddedObjectPosition NewPosition { get; set; }
		
		/// <summary>
		/// The ID of the object to moved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public System.Nullable<System.Int32> ObjectId { get; set; }
	}
	
	/// <summary>
	/// Updates properties of the filter view.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateFilterViewRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `filter` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// A filter view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public FilterView Filter { get; set; }
	}
	
	/// <summary>
	/// Updates properties of the named range with the specified namedRangeId.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateNamedRangeRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `namedRange` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// A named range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedRange")]
		public NamedRange NamedRange { get; set; }
	}
	
	/// <summary>
	/// Updates an existing protected range with the specified protectedRangeId.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateProtectedRangeRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `protectedRange` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// A protected range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectedRange")]
		public ProtectedRange ProtectedRange { get; set; }
	}
	
	/// <summary>
	/// Updates properties of the sheet with the specified sheetId.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSheetPropertiesRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `properties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// Properties of a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SheetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Updates a slicer's specifications. (This does not move or resize a slicer. To move or resize a slicer use UpdateEmbeddedObjectPositionRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSlicerSpecRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `SlicerSpec` is implied and should not be specified. A single "*"` can be used as short-hand for listing every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The id of the slicer to update.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slicerId")]
		public System.Nullable<System.Int32> SlicerId { get; set; }
		
		/// <summary>
		/// The specifications of a slicer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public SlicerSpec Spec { get; set; }
	}
	
	/// <summary>
	/// Updates properties of a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSpreadsheetPropertiesRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root 'properties' is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// Properties of a spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SpreadsheetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// Properties of a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SpreadsheetProperties
	{
		
		/// <summary>
		/// The amount of time to wait before volatile functions are recalculated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoRecalc")]
		public System.Nullable<SpreadsheetPropertiesAutoRecalc> AutoRecalc { get; set; }
		
		/// <summary>
		/// The format of a cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultFormat")]
		public CellFormat DefaultFormat { get; set; }
		
		/// <summary>
		/// Settings to control how circular dependencies are resolved with iterative calculation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iterativeCalculationSettings")]
		public IterativeCalculationSettings IterativeCalculationSettings { get; set; }
		
		/// <summary>
		/// The locale of the spreadsheet in one of the following formats: * an ISO 639-1 language code such as `en` * an ISO 639-2 language code such as `fil`, if no 639-1 code exists * a combination of the ISO language code and country code, such as `en_US` Note: when updating this field, not all locales/languages are supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// Represents spreadsheet theme
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetTheme")]
		public SpreadsheetTheme SpreadsheetTheme { get; set; }
		
		/// <summary>
		/// The time zone of the spreadsheet, in CLDR format such as `America/New_York`. If the time zone isn't recognized, this may be a custom time zone such as `GMT-07:00`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
		
		/// <summary>
		/// The title of the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SpreadsheetPropertiesAutoRecalc
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECALCULATION_INTERVAL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_CHANGE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MINUTE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUR = 3,
	}
	
	/// <summary>
	/// Settings to control how circular dependencies are resolved with iterative calculation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IterativeCalculationSettings
	{
		
		/// <summary>
		/// When iterative calculation is enabled and successive results differ by less than this threshold value, the calculation rounds stop.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="convergenceThreshold")]
		public System.Nullable<System.Double> ConvergenceThreshold { get; set; }
		
		/// <summary>
		/// When iterative calculation is enabled, the maximum number of calculation rounds to perform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxIterations")]
		public System.Nullable<System.Int32> MaxIterations { get; set; }
	}
	
	/// <summary>
	/// Represents spreadsheet theme
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SpreadsheetTheme
	{
		
		/// <summary>
		/// Name of the primary font family.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="primaryFontFamily")]
		public string PrimaryFontFamily { get; set; }
		
		/// <summary>
		/// The spreadsheet theme color pairs. To update you must provide all theme color pairs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="themeColors")]
		public ThemeColorPair[] ThemeColors { get; set; }
	}
	
	/// <summary>
	/// A pair mapping a spreadsheet theme color type to the concrete color it represents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThemeColorPair
	{
		
		/// <summary>
		/// A color value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public ColorStyle Color { get; set; }
		
		/// <summary>
		/// The type of the spreadsheet theme color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorType")]
		public ColorStyleThemeColor ColorType { get; set; }
	}
	
	/// <summary>
	/// The reply for batch updating a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateSpreadsheetResponse
	{
		
		/// <summary>
		/// The reply of the updates. This maps 1:1 with the updates, although replies to some requests may be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replies")]
		public Response[] Replies { get; set; }
		
		/// <summary>
		/// The spreadsheet the updates were applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetId")]
		public string SpreadsheetId { get; set; }
		
		/// <summary>
		/// Resource that represents a spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedSpreadsheet")]
		public Spreadsheet UpdatedSpreadsheet { get; set; }
	}
	
	/// <summary>
	/// A single response from an update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Response
	{
		
		/// <summary>
		/// The result of adding a banded range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addBanding")]
		public AddBandingResponse AddBanding { get; set; }
		
		/// <summary>
		/// The result of adding a chart to a spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addChart")]
		public AddChartResponse AddChart { get; set; }
		
		/// <summary>
		/// The result of adding a data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addDataSource")]
		public AddDataSourceResponse AddDataSource { get; set; }
		
		/// <summary>
		/// The result of adding a group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addDimensionGroup")]
		public AddDimensionGroupResponse AddDimensionGroup { get; set; }
		
		/// <summary>
		/// The result of adding a filter view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addFilterView")]
		public AddFilterViewResponse AddFilterView { get; set; }
		
		/// <summary>
		/// The result of adding a named range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addNamedRange")]
		public AddNamedRangeResponse AddNamedRange { get; set; }
		
		/// <summary>
		/// The result of adding a new protected range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addProtectedRange")]
		public AddProtectedRangeResponse AddProtectedRange { get; set; }
		
		/// <summary>
		/// The result of adding a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addSheet")]
		public AddSheetResponse AddSheet { get; set; }
		
		/// <summary>
		/// The result of adding a slicer to a spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addSlicer")]
		public AddSlicerResponse AddSlicer { get; set; }
		
		/// <summary>
		/// The response from creating developer metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createDeveloperMetadata")]
		public CreateDeveloperMetadataResponse CreateDeveloperMetadata { get; set; }
		
		/// <summary>
		/// The result of deleting a conditional format rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteConditionalFormatRule")]
		public DeleteConditionalFormatRuleResponse DeleteConditionalFormatRule { get; set; }
		
		/// <summary>
		/// The response from deleting developer metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteDeveloperMetadata")]
		public DeleteDeveloperMetadataResponse DeleteDeveloperMetadata { get; set; }
		
		/// <summary>
		/// The result of deleting a group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteDimensionGroup")]
		public DeleteDimensionGroupResponse DeleteDimensionGroup { get; set; }
		
		/// <summary>
		/// The result of removing duplicates in a range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteDuplicates")]
		public DeleteDuplicatesResponse DeleteDuplicates { get; set; }
		
		/// <summary>
		/// The result of a filter view being duplicated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicateFilterView")]
		public DuplicateFilterViewResponse DuplicateFilterView { get; set; }
		
		/// <summary>
		/// The result of duplicating a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicateSheet")]
		public DuplicateSheetResponse DuplicateSheet { get; set; }
		
		/// <summary>
		/// The result of the find/replace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="findReplace")]
		public FindReplaceResponse FindReplace { get; set; }
		
		/// <summary>
		/// The response from refreshing one or multiple data source objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshDataSource")]
		public RefreshDataSourceResponse RefreshDataSource { get; set; }
		
		/// <summary>
		/// The result of trimming whitespace in cells.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trimWhitespace")]
		public TrimWhitespaceResponse TrimWhitespace { get; set; }
		
		/// <summary>
		/// The result of updating a conditional format rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateConditionalFormatRule")]
		public UpdateConditionalFormatRuleResponse UpdateConditionalFormatRule { get; set; }
		
		/// <summary>
		/// The response from updating data source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateDataSource")]
		public UpdateDataSourceResponse UpdateDataSource { get; set; }
		
		/// <summary>
		/// The response from updating developer metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateDeveloperMetadata")]
		public UpdateDeveloperMetadataResponse UpdateDeveloperMetadata { get; set; }
		
		/// <summary>
		/// The result of updating an embedded object's position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateEmbeddedObjectPosition")]
		public UpdateEmbeddedObjectPositionResponse UpdateEmbeddedObjectPosition { get; set; }
	}
	
	/// <summary>
	/// The response from creating developer metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDeveloperMetadataResponse
	{
		
		/// <summary>
		/// Developer metadata associated with a location or object in a spreadsheet. Developer metadata may be used to associate arbitrary data with various parts of a spreadsheet and will remain associated at those locations as they move around and the spreadsheet is edited. For example, if developer metadata is associated with row 5 and another row is then subsequently inserted above row 5, that original metadata will still be associated with the row it was first associated with (what is now row 6). If the associated object is deleted its metadata is deleted too.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerMetadata")]
		public DeveloperMetadata DeveloperMetadata { get; set; }
	}
	
	/// <summary>
	/// The result of deleting a conditional format rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteConditionalFormatRuleResponse
	{
		
		/// <summary>
		/// A rule describing a conditional format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rule")]
		public ConditionalFormatRule Rule { get; set; }
	}
	
	/// <summary>
	/// The response from deleting developer metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDeveloperMetadataResponse
	{
		
		/// <summary>
		/// The metadata that was deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletedDeveloperMetadata")]
		public DeveloperMetadata[] DeletedDeveloperMetadata { get; set; }
	}
	
	/// <summary>
	/// The result of deleting a group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDimensionGroupResponse
	{
		
		/// <summary>
		/// All groups of a dimension after deleting a group from that dimension.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionGroups")]
		public DimensionGroup[] DimensionGroups { get; set; }
	}
	
	/// <summary>
	/// The result of removing duplicates in a range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDuplicatesResponse
	{
		
		/// <summary>
		/// The number of duplicate rows removed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duplicatesRemovedCount")]
		public System.Nullable<System.Int32> DuplicatesRemovedCount { get; set; }
	}
	
	/// <summary>
	/// The result of a filter view being duplicated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DuplicateFilterViewResponse
	{
		
		/// <summary>
		/// A filter view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public FilterView Filter { get; set; }
	}
	
	/// <summary>
	/// The result of duplicating a sheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DuplicateSheetResponse
	{
		
		/// <summary>
		/// Properties of a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SheetProperties Properties { get; set; }
	}
	
	/// <summary>
	/// The result of the find/replace.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FindReplaceResponse
	{
		
		/// <summary>
		/// The number of formula cells changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formulasChanged")]
		public System.Nullable<System.Int32> FormulasChanged { get; set; }
		
		/// <summary>
		/// The number of occurrences (possibly multiple within a cell) changed. For example, if replacing `"e"` with `"o"` in `"Google Sheets"`, this would be `"3"` because `"Google Sheets"` -> `"Googlo Shoots"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurrencesChanged")]
		public System.Nullable<System.Int32> OccurrencesChanged { get; set; }
		
		/// <summary>
		/// The number of rows changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowsChanged")]
		public System.Nullable<System.Int32> RowsChanged { get; set; }
		
		/// <summary>
		/// The number of sheets changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetsChanged")]
		public System.Nullable<System.Int32> SheetsChanged { get; set; }
		
		/// <summary>
		/// The number of non-formula cells changed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valuesChanged")]
		public System.Nullable<System.Int32> ValuesChanged { get; set; }
	}
	
	/// <summary>
	/// The response from refreshing one or multiple data source objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RefreshDataSourceResponse
	{
		
		/// <summary>
		/// All the refresh status for the data source object references specified in the request. If is_all is specified, the field contains only those in failure status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statuses")]
		public RefreshDataSourceObjectExecutionStatus[] Statuses { get; set; }
	}
	
	/// <summary>
	/// The execution status of refreshing one data source object.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RefreshDataSourceObjectExecutionStatus
	{
		
		/// <summary>
		/// The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataExecutionStatus")]
		public DataExecutionStatus DataExecutionStatus { get; set; }
		
		/// <summary>
		/// Reference to a data source object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reference")]
		public DataSourceObjectReference Reference { get; set; }
	}
	
	/// <summary>
	/// The result of trimming whitespace in cells.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrimWhitespaceResponse
	{
		
		/// <summary>
		/// The number of cells that were trimmed of whitespace.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cellsChangedCount")]
		public System.Nullable<System.Int32> CellsChangedCount { get; set; }
	}
	
	/// <summary>
	/// The result of updating a conditional format rule.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateConditionalFormatRuleResponse
	{
		
		/// <summary>
		/// The index of the new rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newIndex")]
		public System.Nullable<System.Int32> NewIndex { get; set; }
		
		/// <summary>
		/// A rule describing a conditional format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newRule")]
		public ConditionalFormatRule NewRule { get; set; }
		
		/// <summary>
		/// The old index of the rule. Not set if a rule was replaced (because it is the same as new_index).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldIndex")]
		public System.Nullable<System.Int32> OldIndex { get; set; }
		
		/// <summary>
		/// A rule describing a conditional format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldRule")]
		public ConditionalFormatRule OldRule { get; set; }
	}
	
	/// <summary>
	/// The response from updating data source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDataSourceResponse
	{
		
		/// <summary>
		/// The data execution status. A data execution is created to sync a data source object with the latest data from a DataSource. It is usually scheduled to run at background, you can check its state to tell if an execution completes There are several scenarios where a data execution is triggered to run: * Adding a data source creates an associated data source sheet as well as a data execution to sync the data from the data source to the sheet. * Updating a data source creates a data execution to refresh the associated data source sheet similarly. * You can send refresh request to explicitly refresh one or multiple data source objects.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataExecutionStatus")]
		public DataExecutionStatus DataExecutionStatus { get; set; }
		
		/// <summary>
		/// Information about an external data source in the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSource")]
		public DataSource DataSource { get; set; }
	}
	
	/// <summary>
	/// The response from updating developer metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDeveloperMetadataResponse
	{
		
		/// <summary>
		/// The updated developer metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerMetadata")]
		public DeveloperMetadata[] DeveloperMetadata { get; set; }
	}
	
	/// <summary>
	/// The result of updating an embedded object's position.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateEmbeddedObjectPositionResponse
	{
		
		/// <summary>
		/// The position of an embedded object such as a chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public EmbeddedObjectPosition Position { get; set; }
	}
	
	/// <summary>
	/// Resource that represents a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Spreadsheet
	{
		
		/// <summary>
		/// Output only. A list of data source refresh schedules.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceSchedules")]
		public DataSourceRefreshSchedule[] DataSourceSchedules { get; set; }
		
		/// <summary>
		/// A list of external data sources connected with the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSources")]
		public DataSource[] DataSources { get; set; }
		
		/// <summary>
		/// The developer metadata associated with a spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerMetadata")]
		public DeveloperMetadata[] DeveloperMetadata { get; set; }
		
		/// <summary>
		/// The named ranges defined in a spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedRanges")]
		public NamedRange[] NamedRanges { get; set; }
		
		/// <summary>
		/// Properties of a spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SpreadsheetProperties Properties { get; set; }
		
		/// <summary>
		/// The sheets that are part of a spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheets")]
		public Sheet[] Sheets { get; set; }
		
		/// <summary>
		/// The ID of the spreadsheet. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetId")]
		public string SpreadsheetId { get; set; }
		
		/// <summary>
		/// The url of the spreadsheet. This field is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetUrl")]
		public string SpreadsheetUrl { get; set; }
	}
	
	/// <summary>
	/// Schedule for refreshing the data source. Data sources in the spreadsheet are refreshed within a time interval. You can specify the start time by clicking the Scheduled Refresh button in the Sheets editor, but the interval is fixed at 4 hours. For example, if you specify a start time of 8 AM , the refresh will take place between 8 AM and 12 PM every day.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceRefreshSchedule
	{
		
		/// <summary>
		/// A schedule for data to refresh every day in a given time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailySchedule")]
		public DataSourceRefreshDailySchedule DailySchedule { get; set; }
		
		/// <summary>
		/// True if the refresh schedule is enabled, or false otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		/// <summary>
		/// A monthly schedule for data to refresh on specific days in the month in a given time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="monthlySchedule")]
		public DataSourceRefreshMonthlySchedule MonthlySchedule { get; set; }
		
		/// <summary>
		/// Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextRun")]
		public Interval NextRun { get; set; }
		
		/// <summary>
		/// The scope of the refresh. Must be ALL_DATA_SOURCES.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshScope")]
		public System.Nullable<DataSourceRefreshScheduleRefreshScope> RefreshScope { get; set; }
		
		/// <summary>
		/// A weekly schedule for data to refresh on specific days in a given time interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weeklySchedule")]
		public DataSourceRefreshWeeklySchedule WeeklySchedule { get; set; }
	}
	
	/// <summary>
	/// A schedule for data to refresh every day in a given time interval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceRefreshDailySchedule
	{
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public TimeOfDay StartTime { get; set; }
	}
	
	/// <summary>
	/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeOfDay
	{
		
		/// <summary>
		/// Hours of day in 24 hour format. Should be from 0 to 23. An API may choose to allow the value "24:00:00" for scenarios like business closing time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hours")]
		public System.Nullable<System.Int32> Hours { get; set; }
		
		/// <summary>
		/// Minutes of hour of day. Must be from 0 to 59.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minutes")]
		public System.Nullable<System.Int32> Minutes { get; set; }
		
		/// <summary>
		/// Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// Seconds of minutes of the time. Must normally be from 0 to 59. An API may allow the value 60 if it allows leap-seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public System.Nullable<System.Int32> Seconds { get; set; }
	}
	
	/// <summary>
	/// A monthly schedule for data to refresh on specific days in the month in a given time interval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceRefreshMonthlySchedule
	{
		
		/// <summary>
		/// Days of the month to refresh. Only 1-28 are supported, mapping to the 1st to the 28th day. At least one day must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="daysOfMonth")]
		public int[] DaysOfMonth { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public TimeOfDay StartTime { get; set; }
	}
	
	/// <summary>
	/// Represents a time interval, encoded as a Timestamp start (inclusive) and a Timestamp end (exclusive). The start must be less than or equal to the end. When the start equals the end, the interval is empty (matches no time). When both start and end are unspecified, the interval matches any time.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Interval
	{
		
		/// <summary>
		/// Optional. Exclusive end of the interval. If specified, a Timestamp matching this interval will have to be before the end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Optional. Inclusive start of the interval. If specified, a Timestamp matching this interval will have to be the same or after the start.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataSourceRefreshScheduleRefreshScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATA_SOURCE_REFRESH_SCOPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_DATA_SOURCES = 1,
	}
	
	/// <summary>
	/// A weekly schedule for data to refresh on specific days in a given time interval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataSourceRefreshWeeklySchedule
	{
		
		/// <summary>
		/// Days of the week to refresh. At least one day must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="daysOfWeek")]
		public string[] DaysOfWeek { get; set; }
		
		/// <summary>
		/// Represents a time of day. The date and time zone are either not significant or are specified elsewhere. An API may choose to allow leap seconds. Related types are google.type.Date and `google.protobuf.Timestamp`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public TimeOfDay StartTime { get; set; }
	}
	
	/// <summary>
	/// A sheet in a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Sheet
	{
		
		/// <summary>
		/// The banded (alternating colors) ranges on this sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandedRanges")]
		public BandedRange[] BandedRanges { get; set; }
		
		/// <summary>
		/// The default filter associated with a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicFilter")]
		public BasicFilter BasicFilter { get; set; }
		
		/// <summary>
		/// The specifications of every chart on this sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="charts")]
		public EmbeddedChart[] Charts { get; set; }
		
		/// <summary>
		/// All column groups on this sheet, ordered by increasing range start index, then by group depth.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnGroups")]
		public DimensionGroup[] ColumnGroups { get; set; }
		
		/// <summary>
		/// The conditional format rules in this sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conditionalFormats")]
		public ConditionalFormatRule[] ConditionalFormats { get; set; }
		
		/// <summary>
		/// Data in the grid, if this is a grid sheet. The number of GridData objects returned is dependent on the number of ranges requested on this sheet. For example, if this is representing `Sheet1`, and the spreadsheet was requested with ranges `Sheet1!A1:C10` and `Sheet1!D15:E20`, then the first GridData will have a startRow/startColumn of `0`, while the second one will have `startRow 14` (zero-based row 15), and `startColumn 3` (zero-based column D). For a DATA_SOURCE sheet, you can not request a specific range, the GridData contains all the values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public GridData[] Data { get; set; }
		
		/// <summary>
		/// The developer metadata associated with a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerMetadata")]
		public DeveloperMetadata[] DeveloperMetadata { get; set; }
		
		/// <summary>
		/// The filter views in this sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterViews")]
		public FilterView[] FilterViews { get; set; }
		
		/// <summary>
		/// The ranges that are merged together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="merges")]
		public GridRange[] Merges { get; set; }
		
		/// <summary>
		/// Properties of a sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public SheetProperties Properties { get; set; }
		
		/// <summary>
		/// The protected ranges in this sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protectedRanges")]
		public ProtectedRange[] ProtectedRanges { get; set; }
		
		/// <summary>
		/// All row groups on this sheet, ordered by increasing range start index, then by group depth.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowGroups")]
		public DimensionGroup[] RowGroups { get; set; }
		
		/// <summary>
		/// The slicers on this sheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="slicers")]
		public Slicer[] Slicers { get; set; }
	}
	
	/// <summary>
	/// Data in the grid, as well as metadata about the dimensions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GridData
	{
		
		/// <summary>
		/// Metadata about the requested columns in the grid, starting with the column in start_column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnMetadata")]
		public DimensionProperties[] ColumnMetadata { get; set; }
		
		/// <summary>
		/// The data in the grid, one entry per row, starting with the row in startRow. The values in RowData will correspond to columns starting at start_column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowData")]
		public RowData[] RowData { get; set; }
		
		/// <summary>
		/// Metadata about the requested rows in the grid, starting with the row in start_row.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowMetadata")]
		public DimensionProperties[] RowMetadata { get; set; }
		
		/// <summary>
		/// The first column this GridData refers to, zero-based.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startColumn")]
		public System.Nullable<System.Int32> StartColumn { get; set; }
		
		/// <summary>
		/// The first row this GridData refers to, zero-based.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startRow")]
		public System.Nullable<System.Int32> StartRow { get; set; }
	}
	
	/// <summary>
	/// The request for updating more than one range of values in a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateValuesByDataFilterRequest
	{
		
		/// <summary>
		/// The new values to apply to the spreadsheet. If more than one range is matched by the specified DataFilter the specified values are applied to all of those ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public DataFilterValueRange[] Data { get; set; }
		
		/// <summary>
		/// Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The `updatedData` field within each of the BatchUpdateValuesResponse.responses contains the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeValuesInResponse")]
		public System.Nullable<System.Boolean> IncludeValuesInResponse { get; set; }
		
		/// <summary>
		/// Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseDateTimeRenderOption")]
		public BatchGetValuesByDataFilterRequestDateTimeRenderOption ResponseDateTimeRenderOption { get; set; }
		
		/// <summary>
		/// Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseValueRenderOption")]
		public BatchGetValuesByDataFilterRequestValueRenderOption ResponseValueRenderOption { get; set; }
		
		/// <summary>
		/// How the input data should be interpreted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueInputOption")]
		public System.Nullable<BatchUpdateValuesByDataFilterRequestValueInputOption> ValueInputOption { get; set; }
	}
	
	/// <summary>
	/// A range of values whose location is specified by a DataFilter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataFilterValueRange
	{
		
		/// <summary>
		/// Filter that describes what data should be selected or returned from a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFilter")]
		public DataFilter DataFilter { get; set; }
		
		/// <summary>
		/// The major dimension of the values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="majorDimension")]
		public DimensionRangeDimension MajorDimension { get; set; }
		
		/// <summary>
		/// The data to be written. If the provided values exceed any of the ranges matched by the data filter then the request fails. If the provided values are less than the matched ranges only the specified values are written, existing values in the matched ranges remain unaffected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BatchUpdateValuesByDataFilterRequestValueInputOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPUT_VALUE_OPTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_ENTERED = 2,
	}
	
	/// <summary>
	/// The response when updating a range of values in a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateValuesByDataFilterResponse
	{
		
		/// <summary>
		/// The response for each range updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responses")]
		public UpdateValuesByDataFilterResponse[] Responses { get; set; }
		
		/// <summary>
		/// The spreadsheet the updates were applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetId")]
		public string SpreadsheetId { get; set; }
		
		/// <summary>
		/// The total number of cells updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalUpdatedCells")]
		public System.Nullable<System.Int32> TotalUpdatedCells { get; set; }
		
		/// <summary>
		/// The total number of columns where at least one cell in the column was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalUpdatedColumns")]
		public System.Nullable<System.Int32> TotalUpdatedColumns { get; set; }
		
		/// <summary>
		/// The total number of rows where at least one cell in the row was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalUpdatedRows")]
		public System.Nullable<System.Int32> TotalUpdatedRows { get; set; }
		
		/// <summary>
		/// The total number of sheets where at least one cell in the sheet was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalUpdatedSheets")]
		public System.Nullable<System.Int32> TotalUpdatedSheets { get; set; }
	}
	
	/// <summary>
	/// The response when updating a range of values by a data filter in a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateValuesByDataFilterResponse
	{
		
		/// <summary>
		/// Filter that describes what data should be selected or returned from a request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFilter")]
		public DataFilter DataFilter { get; set; }
		
		/// <summary>
		/// The number of cells updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedCells")]
		public System.Nullable<System.Int32> UpdatedCells { get; set; }
		
		/// <summary>
		/// The number of columns where at least one cell in the column was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedColumns")]
		public System.Nullable<System.Int32> UpdatedColumns { get; set; }
		
		/// <summary>
		/// Data within a range of the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedData")]
		public ValueRange UpdatedData { get; set; }
		
		/// <summary>
		/// The range (in [A1 notation](/sheets/api/guides/concepts#cell)) that updates were applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedRange")]
		public string UpdatedRange { get; set; }
		
		/// <summary>
		/// The number of rows where at least one cell in the row was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedRows")]
		public System.Nullable<System.Int32> UpdatedRows { get; set; }
	}
	
	/// <summary>
	/// The request for updating more than one range of values in a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateValuesRequest
	{
		
		/// <summary>
		/// The new values to apply to the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ValueRange[] Data { get; set; }
		
		/// <summary>
		/// Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. The `updatedData` field within each of the BatchUpdateValuesResponse.responses contains the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeValuesInResponse")]
		public System.Nullable<System.Boolean> IncludeValuesInResponse { get; set; }
		
		/// <summary>
		/// Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseDateTimeRenderOption")]
		public BatchGetValuesByDataFilterRequestDateTimeRenderOption ResponseDateTimeRenderOption { get; set; }
		
		/// <summary>
		/// Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseValueRenderOption")]
		public BatchGetValuesByDataFilterRequestValueRenderOption ResponseValueRenderOption { get; set; }
		
		/// <summary>
		/// How the input data should be interpreted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="valueInputOption")]
		public BatchUpdateValuesByDataFilterRequestValueInputOption ValueInputOption { get; set; }
	}
	
	/// <summary>
	/// The response when updating a range of values in a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateValuesResponse
	{
		
		/// <summary>
		/// One UpdateValuesResponse per requested range, in the same order as the requests appeared.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responses")]
		public UpdateValuesResponse[] Responses { get; set; }
		
		/// <summary>
		/// The spreadsheet the updates were applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetId")]
		public string SpreadsheetId { get; set; }
		
		/// <summary>
		/// The total number of cells updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalUpdatedCells")]
		public System.Nullable<System.Int32> TotalUpdatedCells { get; set; }
		
		/// <summary>
		/// The total number of columns where at least one cell in the column was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalUpdatedColumns")]
		public System.Nullable<System.Int32> TotalUpdatedColumns { get; set; }
		
		/// <summary>
		/// The total number of rows where at least one cell in the row was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalUpdatedRows")]
		public System.Nullable<System.Int32> TotalUpdatedRows { get; set; }
		
		/// <summary>
		/// The total number of sheets where at least one cell in the sheet was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalUpdatedSheets")]
		public System.Nullable<System.Int32> TotalUpdatedSheets { get; set; }
	}
	
	/// <summary>
	/// The request for clearing a range of values in a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClearValuesRequest
	{
	}
	
	/// <summary>
	/// The response when clearing a range of values in a spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ClearValuesResponse
	{
		
		/// <summary>
		/// The range (in A1 notation) that was cleared. (If the request was for an unbounded range or a ranger larger than the bounds of the sheet, this will be the actual range that was cleared, bounded to the sheet's limits.)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clearedRange")]
		public string ClearedRange { get; set; }
		
		/// <summary>
		/// The spreadsheet the updates were applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetId")]
		public string SpreadsheetId { get; set; }
	}
	
	/// <summary>
	/// The request to copy a sheet across spreadsheets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CopySheetToAnotherSpreadsheetRequest
	{
		
		/// <summary>
		/// The ID of the spreadsheet to copy the sheet to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="destinationSpreadsheetId")]
		public string DestinationSpreadsheetId { get; set; }
	}
	
	/// <summary>
	/// The request for retrieving a Spreadsheet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSpreadsheetByDataFilterRequest
	{
		
		/// <summary>
		/// The DataFilters used to select which ranges to retrieve from the spreadsheet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFilters")]
		public DataFilter[] DataFilters { get; set; }
		
		/// <summary>
		/// True if grid data should be returned. This parameter is ignored if a field mask was set in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeGridData")]
		public System.Nullable<System.Boolean> IncludeGridData { get; set; }
	}
	
	/// <summary>
	/// A developer metadata entry and the data filters specified in the original request that matched it.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MatchedDeveloperMetadata
	{
		
		/// <summary>
		/// All filters matching the returned developer metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFilters")]
		public DataFilter[] DataFilters { get; set; }
		
		/// <summary>
		/// Developer metadata associated with a location or object in a spreadsheet. Developer metadata may be used to associate arbitrary data with various parts of a spreadsheet and will remain associated at those locations as they move around and the spreadsheet is edited. For example, if developer metadata is associated with row 5 and another row is then subsequently inserted above row 5, that original metadata will still be associated with the row it was first associated with (what is now row 6). If the associated object is deleted its metadata is deleted too.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="developerMetadata")]
		public DeveloperMetadata DeveloperMetadata { get; set; }
	}
	
	/// <summary>
	/// A request to retrieve all developer metadata matching the set of specified criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchDeveloperMetadataRequest
	{
		
		/// <summary>
		/// The data filters describing the criteria used to determine which DeveloperMetadata entries to return. DeveloperMetadata matching any of the specified filters are included in the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataFilters")]
		public DataFilter[] DataFilters { get; set; }
	}
	
	/// <summary>
	/// A reply to a developer metadata search request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchDeveloperMetadataResponse
	{
		
		/// <summary>
		/// The metadata matching the criteria of the search request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchedDeveloperMetadata")]
		public MatchedDeveloperMetadata[] MatchedDeveloperMetadata { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a spreadsheet, returning the newly created spreadsheet.
		/// Sheets_spreadsheets_create v4/spreadsheets
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Spreadsheet> Sheets_spreadsheets_createAsync(Spreadsheet requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Spreadsheet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. By default, data within grids is not returned. You can include grid data in one of 2 ways: * Specify a [field mask](https://developers.google.com/sheets/api/guides/field-masks) listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData URL parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want. To retrieve only subsets of spreadsheet data, use the ranges URL parameter. Ranges are specified using [A1 notation](/sheets/api/guides/concepts#cell). You can define a single cell (for example, `A1`) or multiple cells (for example, `A1:D5`). You can also get cells from other sheets within the same spreadsheet (for example, `Sheet2!A1:C4`) or retrieve multiple ranges at once (for example, `?ranges=A1:D5&ranges=Sheet2!A1:C4`). Limiting the range returns only the portions of the spreadsheet that intersect the requested ranges.
		/// Sheets_spreadsheets_get v4/spreadsheets/{spreadsheetId}
		/// </summary>
		/// <param name="spreadsheetId">The spreadsheet to request.</param>
		/// <param name="includeGridData">True if grid data should be returned. This parameter is ignored if a field mask was set in the request.</param>
		/// <param name="ranges">The ranges to retrieve from the spreadsheet.</param>
		/// <returns>Successful response</returns>
		public async Task<Spreadsheet> Sheets_spreadsheets_getAsync(string spreadsheetId, bool includeGridData, string[] ranges, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets/"+ (spreadsheetId==null? "" : System.Uri.EscapeDataString(spreadsheetId))+"&includeGridData="+includeGridData+"&"+string.Join("&", ranges.Select(z => $"ranges={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Spreadsheet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the developer metadata with the specified ID. The caller must specify the spreadsheet ID and the developer metadata's unique metadataId.
		/// Sheets_spreadsheets_developerMetadata_get v4/spreadsheets/{spreadsheetId}/developerMetadata/{metadataId}
		/// </summary>
		/// <param name="spreadsheetId">The ID of the spreadsheet to retrieve metadata from.</param>
		/// <param name="metadataId">The ID of the developer metadata to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<DeveloperMetadata> Sheets_spreadsheets_developerMetadata_getAsync(string spreadsheetId, int metadataId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets/"+ (spreadsheetId==null? "" : System.Uri.EscapeDataString(spreadsheetId))+"/developerMetadata/"+metadataId;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeveloperMetadata>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all developer metadata matching the specified DataFilter. If the provided DataFilter represents a DeveloperMetadataLookup object, this will return all DeveloperMetadata entries selected by it. If the DataFilter represents a location in a spreadsheet, this will return all developer metadata associated with locations intersecting that region.
		/// Sheets_spreadsheets_developerMetadata_search v4/spreadsheets/{spreadsheetId}/developerMetadata:search
		/// </summary>
		/// <param name="spreadsheetId">The ID of the spreadsheet to retrieve metadata from.</param>
		/// <returns>Successful response</returns>
		public async Task<SearchDeveloperMetadataResponse> Sheets_spreadsheets_developerMetadata_searchAsync(string spreadsheetId, SearchDeveloperMetadataRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets/"+ (spreadsheetId==null? "" : System.Uri.EscapeDataString(spreadsheetId))+"/developerMetadata:search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchDeveloperMetadataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Copies a single sheet from a spreadsheet to another spreadsheet. Returns the properties of the newly created sheet.
		/// Sheets_spreadsheets_sheets_copyTo v4/spreadsheets/{spreadsheetId}/sheets/{sheetId}:copyTo
		/// </summary>
		/// <param name="spreadsheetId">The ID of the spreadsheet containing the sheet to copy.</param>
		/// <param name="sheetId">The ID of the sheet to copy.</param>
		/// <returns>Successful response</returns>
		public async Task<SheetProperties> Sheets_spreadsheets_sheets_copyToAsync(string spreadsheetId, int sheetId, CopySheetToAnotherSpreadsheetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets/"+ (spreadsheetId==null? "" : System.Uri.EscapeDataString(spreadsheetId))+"/sheets/"+sheetId+":copyTo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SheetProperties>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a range of values from a spreadsheet. The caller must specify the spreadsheet ID and a range.
		/// Sheets_spreadsheets_values_get v4/spreadsheets/{spreadsheetId}/values/{range}
		/// </summary>
		/// <param name="spreadsheetId">The ID of the spreadsheet to retrieve data from.</param>
		/// <param name="range">The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the range to retrieve values from.</param>
		/// <param name="dateTimeRenderOption">How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.</param>
		/// <param name="majorDimension">The major dimension that results should use. For example, if the spreadsheet data in Sheet1 is: `A1=1,B1=2,A2=3,B2=4`, then requesting `range=Sheet1!A1:B2?majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas requesting `range=Sheet1!A1:B2?majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.</param>
		/// <param name="valueRenderOption">How values should be represented in the output. The default render option is FORMATTED_VALUE.</param>
		/// <returns>Successful response</returns>
		public async Task<ValueRange> Sheets_spreadsheets_values_getAsync(string spreadsheetId, string range, BatchGetValuesByDataFilterRequestDateTimeRenderOption dateTimeRenderOption, DimensionRangeDimension majorDimension, BatchGetValuesByDataFilterRequestValueRenderOption valueRenderOption, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets/"+ (spreadsheetId==null? "" : System.Uri.EscapeDataString(spreadsheetId))+"/values/"+ (range==null? "" : System.Uri.EscapeDataString(range))+"&dateTimeRenderOption=" + dateTimeRenderOption+"&majorDimension=" + majorDimension+"&valueRenderOption=" + valueRenderOption;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ValueRange>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets values in a range of a spreadsheet. The caller must specify the spreadsheet ID, range, and a valueInputOption.
		/// Sheets_spreadsheets_values_update v4/spreadsheets/{spreadsheetId}/values/{range}
		/// </summary>
		/// <param name="spreadsheetId">The ID of the spreadsheet to update.</param>
		/// <param name="range">The [A1 notation](/sheets/api/guides/concepts#cell) of the values to update.</param>
		/// <param name="includeValuesInResponse">Determines if the update response should include the values of the cells that were updated. By default, responses do not include the updated values. If the range to write was larger than the range actually written, the response includes all values in the requested range (excluding trailing empty rows and columns).</param>
		/// <param name="responseDateTimeRenderOption">Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.</param>
		/// <param name="responseValueRenderOption">Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.</param>
		/// <param name="valueInputOption">How the input data should be interpreted.</param>
		/// <returns>Successful response</returns>
		public async Task<UpdateValuesResponse> Sheets_spreadsheets_values_updateAsync(string spreadsheetId, string range, bool includeValuesInResponse, BatchGetValuesByDataFilterRequestDateTimeRenderOption responseDateTimeRenderOption, BatchGetValuesByDataFilterRequestValueRenderOption responseValueRenderOption, BatchUpdateValuesByDataFilterRequestValueInputOption valueInputOption, ValueRange requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets/"+ (spreadsheetId==null? "" : System.Uri.EscapeDataString(spreadsheetId))+"/values/"+ (range==null? "" : System.Uri.EscapeDataString(range))+"&includeValuesInResponse="+includeValuesInResponse+"&responseDateTimeRenderOption=" + responseDateTimeRenderOption+"&responseValueRenderOption=" + responseValueRenderOption+"&valueInputOption=" + valueInputOption;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateValuesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Appends values to a spreadsheet. The input range is used to search for existing data and find a "table" within that range. Values will be appended to the next row of the table, starting with the first column of the table. See the [guide](/sheets/api/guides/values#appending_values) and [sample code](/sheets/api/samples/writing#append_values) for specific details of how tables are detected and data is appended. The caller must specify the spreadsheet ID, range, and a valueInputOption. The `valueInputOption` only controls how the input data will be added to the sheet (column-wise or row-wise), it does not influence what cell the data starts being written to.
		/// Sheets_spreadsheets_values_append v4/spreadsheets/{spreadsheetId}/values/{range}:append
		/// </summary>
		/// <param name="spreadsheetId">The ID of the spreadsheet to update.</param>
		/// <param name="range">The [A1 notation](/sheets/api/guides/concepts#cell) of a range to search for a logical table of data. Values are appended after the last row of the table.</param>
		/// <param name="includeValuesInResponse">Determines if the update response should include the values of the cells that were appended. By default, responses do not include the updated values.</param>
		/// <param name="insertDataOption">How the input data should be inserted.</param>
		/// <param name="responseDateTimeRenderOption">Determines how dates, times, and durations in the response should be rendered. This is ignored if response_value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.</param>
		/// <param name="responseValueRenderOption">Determines how values in the response should be rendered. The default render option is FORMATTED_VALUE.</param>
		/// <param name="valueInputOption">How the input data should be interpreted.</param>
		/// <returns>Successful response</returns>
		public async Task<AppendValuesResponse> Sheets_spreadsheets_values_appendAsync(string spreadsheetId, string range, bool includeValuesInResponse, Sheets_spreadsheets_values_appendInsertDataOption insertDataOption, BatchGetValuesByDataFilterRequestDateTimeRenderOption responseDateTimeRenderOption, BatchGetValuesByDataFilterRequestValueRenderOption responseValueRenderOption, BatchUpdateValuesByDataFilterRequestValueInputOption valueInputOption, ValueRange requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets/"+ (spreadsheetId==null? "" : System.Uri.EscapeDataString(spreadsheetId))+"/values/"+ (range==null? "" : System.Uri.EscapeDataString(range))+":append&includeValuesInResponse="+includeValuesInResponse+"&insertDataOption=" + insertDataOption+"&responseDateTimeRenderOption=" + responseDateTimeRenderOption+"&responseValueRenderOption=" + responseValueRenderOption+"&valueInputOption=" + valueInputOption;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppendValuesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Clears values from a spreadsheet. The caller must specify the spreadsheet ID and range. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
		/// Sheets_spreadsheets_values_clear v4/spreadsheets/{spreadsheetId}/values/{range}:clear
		/// </summary>
		/// <param name="spreadsheetId">The ID of the spreadsheet to update.</param>
		/// <param name="range">The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the values to clear.</param>
		/// <returns>Successful response</returns>
		public async Task<ClearValuesResponse> Sheets_spreadsheets_values_clearAsync(string spreadsheetId, string range, ClearValuesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets/"+ (spreadsheetId==null? "" : System.Uri.EscapeDataString(spreadsheetId))+"/values/"+ (range==null? "" : System.Uri.EscapeDataString(range))+":clear";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClearValuesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges. Only values are cleared -- all other properties of the cell (such as formatting and data validation) are kept.
		/// Sheets_spreadsheets_values_batchClear v4/spreadsheets/{spreadsheetId}/values:batchClear
		/// </summary>
		/// <param name="spreadsheetId">The ID of the spreadsheet to update.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchClearValuesResponse> Sheets_spreadsheets_values_batchClearAsync(string spreadsheetId, BatchClearValuesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets/"+ (spreadsheetId==null? "" : System.Uri.EscapeDataString(spreadsheetId))+"/values:batchClear";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchClearValuesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Clears one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges matching any of the specified data filters will be cleared. Only values are cleared -- all other properties of the cell (such as formatting, data validation, etc..) are kept.
		/// Sheets_spreadsheets_values_batchClearByDataFilter v4/spreadsheets/{spreadsheetId}/values:batchClearByDataFilter
		/// </summary>
		/// <param name="spreadsheetId">The ID of the spreadsheet to update.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchClearValuesByDataFilterResponse> Sheets_spreadsheets_values_batchClearByDataFilterAsync(string spreadsheetId, BatchClearValuesByDataFilterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets/"+ (spreadsheetId==null? "" : System.Uri.EscapeDataString(spreadsheetId))+"/values:batchClearByDataFilter";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchClearValuesByDataFilterResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns one or more ranges of values from a spreadsheet. The caller must specify the spreadsheet ID and one or more ranges.
		/// Sheets_spreadsheets_values_batchGet v4/spreadsheets/{spreadsheetId}/values:batchGet
		/// </summary>
		/// <param name="spreadsheetId">The ID of the spreadsheet to retrieve data from.</param>
		/// <param name="dateTimeRenderOption">How dates, times, and durations should be represented in the output. This is ignored if value_render_option is FORMATTED_VALUE. The default dateTime render option is SERIAL_NUMBER.</param>
		/// <param name="majorDimension">The major dimension that results should use. For example, if the spreadsheet data is: `A1=1,B1=2,A2=3,B2=4`, then requesting `ranges=["A1:B2"],majorDimension=ROWS` returns `[[1,2],[3,4]]`, whereas requesting `ranges=["A1:B2"],majorDimension=COLUMNS` returns `[[1,3],[2,4]]`.</param>
		/// <param name="ranges">The [A1 notation or R1C1 notation](/sheets/api/guides/concepts#cell) of the range to retrieve values from.</param>
		/// <param name="valueRenderOption">How values should be represented in the output. The default render option is ValueRenderOption.FORMATTED_VALUE.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchGetValuesResponse> Sheets_spreadsheets_values_batchGetAsync(string spreadsheetId, BatchGetValuesByDataFilterRequestDateTimeRenderOption dateTimeRenderOption, DimensionRangeDimension majorDimension, string[] ranges, BatchGetValuesByDataFilterRequestValueRenderOption valueRenderOption, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets/"+ (spreadsheetId==null? "" : System.Uri.EscapeDataString(spreadsheetId))+"/values:batchGet&dateTimeRenderOption=" + dateTimeRenderOption+"&majorDimension=" + majorDimension+"&"+string.Join("&", ranges.Select(z => $"ranges={System.Uri.EscapeDataString(z.ToString())}"))+"&valueRenderOption=" + valueRenderOption;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetValuesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns one or more ranges of values that match the specified data filters. The caller must specify the spreadsheet ID and one or more DataFilters. Ranges that match any of the data filters in the request will be returned.
		/// Sheets_spreadsheets_values_batchGetByDataFilter v4/spreadsheets/{spreadsheetId}/values:batchGetByDataFilter
		/// </summary>
		/// <param name="spreadsheetId">The ID of the spreadsheet to retrieve data from.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchGetValuesByDataFilterResponse> Sheets_spreadsheets_values_batchGetByDataFilterAsync(string spreadsheetId, BatchGetValuesByDataFilterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets/"+ (spreadsheetId==null? "" : System.Uri.EscapeDataString(spreadsheetId))+"/values:batchGetByDataFilter";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchGetValuesByDataFilterResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more ValueRanges.
		/// Sheets_spreadsheets_values_batchUpdate v4/spreadsheets/{spreadsheetId}/values:batchUpdate
		/// </summary>
		/// <param name="spreadsheetId">The ID of the spreadsheet to update.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchUpdateValuesResponse> Sheets_spreadsheets_values_batchUpdateAsync(string spreadsheetId, BatchUpdateValuesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets/"+ (spreadsheetId==null? "" : System.Uri.EscapeDataString(spreadsheetId))+"/values:batchUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchUpdateValuesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sets values in one or more ranges of a spreadsheet. The caller must specify the spreadsheet ID, a valueInputOption, and one or more DataFilterValueRanges.
		/// Sheets_spreadsheets_values_batchUpdateByDataFilter v4/spreadsheets/{spreadsheetId}/values:batchUpdateByDataFilter
		/// </summary>
		/// <param name="spreadsheetId">The ID of the spreadsheet to update.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchUpdateValuesByDataFilterResponse> Sheets_spreadsheets_values_batchUpdateByDataFilterAsync(string spreadsheetId, BatchUpdateValuesByDataFilterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets/"+ (spreadsheetId==null? "" : System.Uri.EscapeDataString(spreadsheetId))+"/values:batchUpdateByDataFilter";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchUpdateValuesByDataFilterResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Applies one or more updates to the spreadsheet. Each request is validated before being applied. If any request is not valid then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. The replies will mirror the requests. For example, if you applied 4 updates and the 3rd one had a reply, then the response will have 2 empty replies, the actual reply, and another empty reply, in that order. Due to the collaborative nature of spreadsheets, it is not guaranteed that the spreadsheet will reflect exactly your changes after this completes, however it is guaranteed that the updates in the request will be applied together atomically. Your changes may be altered with respect to collaborator changes. If there are no collaborators, the spreadsheet should reflect your changes.
		/// Sheets_spreadsheets_batchUpdate v4/spreadsheets/{spreadsheetId}:batchUpdate
		/// </summary>
		/// <param name="spreadsheetId">The spreadsheet to apply the updates to.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchUpdateSpreadsheetResponse> Sheets_spreadsheets_batchUpdateAsync(string spreadsheetId, BatchUpdateSpreadsheetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets/"+ (spreadsheetId==null? "" : System.Uri.EscapeDataString(spreadsheetId))+":batchUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchUpdateSpreadsheetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the spreadsheet at the given ID. The caller must specify the spreadsheet ID. This method differs from GetSpreadsheet in that it allows selecting which subsets of spreadsheet data to return by specifying a dataFilters parameter. Multiple DataFilters can be specified. Specifying one or more data filters returns the portions of the spreadsheet that intersect ranges matched by any of the filters. By default, data within grids is not returned. You can include grid data one of 2 ways: * Specify a [field mask](https://developers.google.com/sheets/api/guides/field-masks) listing your desired fields using the `fields` URL parameter in HTTP * Set the includeGridData parameter to true. If a field mask is set, the `includeGridData` parameter is ignored For large spreadsheets, as a best practice, retrieve only the specific spreadsheet fields that you want.
		/// Sheets_spreadsheets_getByDataFilter v4/spreadsheets/{spreadsheetId}:getByDataFilter
		/// </summary>
		/// <param name="spreadsheetId">The spreadsheet to request.</param>
		/// <returns>Successful response</returns>
		public async Task<Spreadsheet> Sheets_spreadsheets_getByDataFilterAsync(string spreadsheetId, GetSpreadsheetByDataFilterRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v4/spreadsheets/"+ (spreadsheetId==null? "" : System.Uri.EscapeDataString(spreadsheetId))+":getByDataFilter";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Spreadsheet>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public enum Sheets_spreadsheets_values_appendInsertDataOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVERWRITE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERT_ROWS = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
