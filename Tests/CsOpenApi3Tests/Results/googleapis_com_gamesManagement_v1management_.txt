//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Achievement reset all response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AchievementResetAllResponse
	{
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesManagement#achievementResetAllResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The achievement reset results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public AchievementResetResponse[] Results { get; set; }
	}
	
	/// <summary>
	/// An achievement reset response.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AchievementResetResponse
	{
		
		/// <summary>
		/// The current state of the achievement. This is the same as the initial state of the achievement. Possible values are: - "`HIDDEN`"- Achievement is hidden. - "`REVEALED`" - Achievement is revealed. - "`UNLOCKED`" - Achievement is unlocked. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentState")]
		public string CurrentState { get; set; }
		
		/// <summary>
		/// The ID of an achievement for which player state has been updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definitionId")]
		public string DefinitionId { get; set; }
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesManagement#achievementResetResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Flag to indicate if the requested update actually occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateOccurred")]
		public System.Nullable<System.Boolean> UpdateOccurred { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AchievementResetMultipleForAllRequest
	{
		
		/// <summary>
		/// The IDs of achievements to reset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="achievement_ids")]
		public string[] Achievement_ids { get; set; }
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesManagement#achievementResetMultipleForAllRequest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// Multiple events reset all request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventsResetMultipleForAllRequest
	{
		
		/// <summary>
		/// The IDs of events to reset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_ids")]
		public string[] Event_ids { get; set; }
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesManagement#eventsResetMultipleForAllRequest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
	}
	
	/// <summary>
	/// 1P/3P metadata about the player's experience.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GamesPlayerExperienceInfoResource
	{
		
		/// <summary>
		/// The current number of experience points for the player.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentExperiencePoints")]
		public string CurrentExperiencePoints { get; set; }
		
		/// <summary>
		/// 1P/3P metadata about a user's level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentLevel")]
		public GamesPlayerLevelResource CurrentLevel { get; set; }
		
		/// <summary>
		/// The timestamp when the player was leveled up, in millis since Unix epoch UTC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastLevelUpTimestampMillis")]
		public string LastLevelUpTimestampMillis { get; set; }
		
		/// <summary>
		/// 1P/3P metadata about a user's level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextLevel")]
		public GamesPlayerLevelResource NextLevel { get; set; }
	}
	
	/// <summary>
	/// 1P/3P metadata about a user's level.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GamesPlayerLevelResource
	{
		
		/// <summary>
		/// The level for the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public System.Nullable<System.Int32> Level { get; set; }
		
		/// <summary>
		/// The maximum experience points for this level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxExperiencePoints")]
		public string MaxExperiencePoints { get; set; }
		
		/// <summary>
		/// The minimum experience points for this level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minExperiencePoints")]
		public string MinExperiencePoints { get; set; }
	}
	
	/// <summary>
	/// The HiddenPlayer resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HiddenPlayer
	{
		
		/// <summary>
		/// Output only. The time this player was hidden.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hiddenTimeMillis")]
		public string HiddenTimeMillis { get; set; }
		
		/// <summary>
		/// Output only. Uniquely identifies the type of this resource. Value is always the fixed string `gamesManagement#hiddenPlayer`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// A Player resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="player")]
		public Player Player { get; set; }
	}
	
	/// <summary>
	/// A Player resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Player
	{
		
		/// <summary>
		/// The base URL for the image that represents the player.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avatarImageUrl")]
		public string AvatarImageUrl { get; set; }
		
		/// <summary>
		/// The url to the landscape mode player banner image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerUrlLandscape")]
		public string BannerUrlLandscape { get; set; }
		
		/// <summary>
		/// The url to the portrait mode player banner image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bannerUrlPortrait")]
		public string BannerUrlPortrait { get; set; }
		
		/// <summary>
		/// The name to display for the player.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// 1P/3P metadata about the player's experience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="experienceInfo")]
		public GamesPlayerExperienceInfoResource ExperienceInfo { get; set; }
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesManagement#player`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// An object representation of the individual components of the player's name. For some players, these fields may not be present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public PlayerName Name { get; set; }
		
		/// <summary>
		/// The player ID that was used for this player the first time they signed into the game in question. This is only populated for calls to player.get for the requesting player, only if the player ID has subsequently changed, and only to clients that support remapping player IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="originalPlayerId")]
		public string OriginalPlayerId { get; set; }
		
		/// <summary>
		/// The ID of the player.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playerId")]
		public string PlayerId { get; set; }
		
		/// <summary>
		/// Profile settings
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileSettings")]
		public ProfileSettings ProfileSettings { get; set; }
		
		/// <summary>
		/// The player's title rewarded for their game activities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	public class PlayerName
	{
		
		/// <summary>
		/// The family name of this player. In some places, this is known as the last name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="familyName")]
		public string FamilyName { get; set; }
		
		/// <summary>
		/// The given name of this player. In some places, this is known as the first name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="givenName")]
		public string GivenName { get; set; }
	}
	
	/// <summary>
	/// Profile settings
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProfileSettings
	{
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesManagement#profileSettings`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileVisible")]
		public System.Nullable<System.Boolean> ProfileVisible { get; set; }
	}
	
	/// <summary>
	/// A list of hidden players.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HiddenPlayerList
	{
		
		/// <summary>
		/// The players.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="items")]
		public HiddenPlayer[] Items { get; set; }
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesManagement#hiddenPlayerList`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The pagination token for the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A list of leaderboard reset resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlayerScoreResetAllResponse
	{
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesManagement#playerScoreResetAllResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The leaderboard reset results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="results")]
		public PlayerScoreResetResponse[] Results { get; set; }
	}
	
	/// <summary>
	/// A list of reset leaderboard entry resources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlayerScoreResetResponse
	{
		
		/// <summary>
		/// The ID of an leaderboard for which player state has been updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="definitionId")]
		public string DefinitionId { get; set; }
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesManagement#playerScoreResetResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The time spans of the updated score. Possible values are: - "`ALL_TIME`" - The score is an all-time score. - "`WEEKLY`" - The score is a weekly score. - "`DAILY`" - The score is a daily score. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resetScoreTimeSpans")]
		public string[] ResetScoreTimeSpans { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScoresResetMultipleForAllRequest
	{
		
		/// <summary>
		/// Uniquely identifies the type of this resource. Value is always the fixed string `gamesManagement#scoresResetMultipleForAllRequest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// The IDs of leaderboards to reset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leaderboard_ids")]
		public string[] Leaderboard_ids { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Resets all achievements for the currently authenticated player for your application. This method is only accessible to whitelisted tester accounts for your application.
		/// GamesManagement_achievements_resetAll games/v1management/achievements/reset
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AchievementResetAllResponse> GamesManagement_achievements_resetAllAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/achievements/reset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AchievementResetAllResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets all draft achievements for all players. This method is only available to user accounts for your developer console.
		/// GamesManagement_achievements_resetAllForAllPlayers games/v1management/achievements/resetAllForAllPlayers
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task GamesManagement_achievements_resetAllForAllPlayersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/achievements/resetAllForAllPlayers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets achievements with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft achievements may be reset.
		/// GamesManagement_achievements_resetMultipleForAllPlayers games/v1management/achievements/resetMultipleForAllPlayers
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task GamesManagement_achievements_resetMultipleForAllPlayersAsync(AchievementResetMultipleForAllRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/achievements/resetMultipleForAllPlayers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets the achievement with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.
		/// GamesManagement_achievements_reset games/v1management/achievements/{achievementId}/reset
		/// </summary>
		/// <param name="achievementId">The ID of the achievement used by this method.</param>
		/// <returns>Successful response</returns>
		public async Task<AchievementResetResponse> GamesManagement_achievements_resetAsync(string achievementId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/achievements/"+ (achievementId==null? "" : System.Uri.EscapeDataString(achievementId))+"/reset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AchievementResetResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets the achievement with the given ID for all players. This method is only available to user accounts for your developer console. Only draft achievements can be reset.
		/// GamesManagement_achievements_resetForAllPlayers games/v1management/achievements/{achievementId}/resetForAllPlayers
		/// </summary>
		/// <param name="achievementId">The ID of the achievement used by this method.</param>
		/// <returns>Successful response</returns>
		public async Task GamesManagement_achievements_resetForAllPlayersAsync(string achievementId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/achievements/"+ (achievementId==null? "" : System.Uri.EscapeDataString(achievementId))+"/resetForAllPlayers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the list of players hidden from the given application. This method is only available to user accounts for your developer console.
		/// GamesManagement_applications_listHidden games/v1management/applications/{applicationId}/players/hidden
		/// </summary>
		/// <param name="applicationId">The application ID from the Google Play developer console.</param>
		/// <param name="maxResults">The maximum number of player resources to return in the response, used for paging. For any response, the actual number of player resources returned may be less than the specified `maxResults`.</param>
		/// <param name="pageToken">The token returned by the previous request.</param>
		/// <returns>Successful response</returns>
		public async Task<HiddenPlayerList> GamesManagement_applications_listHiddenAsync(string applicationId, int maxResults, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/players/hidden&maxResults="+maxResults+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HiddenPlayerList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Unhide the given player's leaderboard scores from the given application. This method is only available to user accounts for your developer console.
		/// GamesManagement_players_unhide games/v1management/applications/{applicationId}/players/hidden/{playerId}
		/// </summary>
		/// <param name="applicationId">The application ID from the Google Play developer console.</param>
		/// <param name="playerId">A player ID. A value of `me` may be used in place of the authenticated player's ID.</param>
		/// <returns>Successful response</returns>
		public async Task GamesManagement_players_unhideAsync(string applicationId, string playerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/players/hidden/"+ (playerId==null? "" : System.Uri.EscapeDataString(playerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Hide the given player's leaderboard scores from the given application. This method is only available to user accounts for your developer console.
		/// GamesManagement_players_hide games/v1management/applications/{applicationId}/players/hidden/{playerId}
		/// </summary>
		/// <param name="applicationId">The application ID from the Google Play developer console.</param>
		/// <param name="playerId">A player ID. A value of `me` may be used in place of the authenticated player's ID.</param>
		/// <returns>Successful response</returns>
		public async Task GamesManagement_players_hideAsync(string applicationId, string playerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/applications/"+ (applicationId==null? "" : System.Uri.EscapeDataString(applicationId))+"/players/hidden/"+ (playerId==null? "" : System.Uri.EscapeDataString(playerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets all player progress on all events for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.
		/// GamesManagement_events_resetAll games/v1management/events/reset
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task GamesManagement_events_resetAllAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/events/reset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets all draft events for all players. This method is only available to user accounts for your developer console.
		/// GamesManagement_events_resetAllForAllPlayers games/v1management/events/resetAllForAllPlayers
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task GamesManagement_events_resetAllForAllPlayersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/events/resetAllForAllPlayers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets events with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft events may be reset.
		/// GamesManagement_events_resetMultipleForAllPlayers games/v1management/events/resetMultipleForAllPlayers
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task GamesManagement_events_resetMultipleForAllPlayersAsync(EventsResetMultipleForAllRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/events/resetMultipleForAllPlayers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets all player progress on the event with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.
		/// GamesManagement_events_reset games/v1management/events/{eventId}/reset
		/// </summary>
		/// <param name="eventId">The ID of the event.</param>
		/// <returns>Successful response</returns>
		public async Task GamesManagement_events_resetAsync(string eventId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"/reset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets the event with the given ID for all players. This method is only available to user accounts for your developer console. Only draft events can be reset.
		/// GamesManagement_events_resetForAllPlayers games/v1management/events/{eventId}/resetForAllPlayers
		/// </summary>
		/// <param name="eventId">The ID of the event.</param>
		/// <returns>Successful response</returns>
		public async Task GamesManagement_events_resetForAllPlayersAsync(string eventId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"/resetForAllPlayers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets scores for the leaderboard with the given ID for the currently authenticated player. This method is only accessible to whitelisted tester accounts for your application.
		/// GamesManagement_scores_reset games/v1management/leaderboards/{leaderboardId}/scores/reset
		/// </summary>
		/// <param name="leaderboardId">The ID of the leaderboard.</param>
		/// <returns>Successful response</returns>
		public async Task<PlayerScoreResetResponse> GamesManagement_scores_resetAsync(string leaderboardId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/leaderboards/"+ (leaderboardId==null? "" : System.Uri.EscapeDataString(leaderboardId))+"/scores/reset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlayerScoreResetResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets scores for the leaderboard with the given ID for all players. This method is only available to user accounts for your developer console. Only draft leaderboards can be reset.
		/// GamesManagement_scores_resetForAllPlayers games/v1management/leaderboards/{leaderboardId}/scores/resetForAllPlayers
		/// </summary>
		/// <param name="leaderboardId">The ID of the leaderboard.</param>
		/// <returns>Successful response</returns>
		public async Task GamesManagement_scores_resetForAllPlayersAsync(string leaderboardId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/leaderboards/"+ (leaderboardId==null? "" : System.Uri.EscapeDataString(leaderboardId))+"/scores/resetForAllPlayers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets all scores for all leaderboards for the currently authenticated players. This method is only accessible to whitelisted tester accounts for your application.
		/// GamesManagement_scores_resetAll games/v1management/scores/reset
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<PlayerScoreResetAllResponse> GamesManagement_scores_resetAllAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/scores/reset";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PlayerScoreResetAllResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets scores for all draft leaderboards for all players. This method is only available to user accounts for your developer console.
		/// GamesManagement_scores_resetAllForAllPlayers games/v1management/scores/resetAllForAllPlayers
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task GamesManagement_scores_resetAllForAllPlayersAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/scores/resetAllForAllPlayers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets scores for the leaderboards with the given IDs for all players. This method is only available to user accounts for your developer console. Only draft leaderboards may be reset.
		/// GamesManagement_scores_resetMultipleForAllPlayers games/v1management/scores/resetMultipleForAllPlayers
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task GamesManagement_scores_resetMultipleForAllPlayersAsync(ScoresResetMultipleForAllRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "games/v1management/scores/resetMultipleForAllPlayers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
