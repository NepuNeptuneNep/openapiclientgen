//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Channel_enum_channel_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Chatv1credential
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/api/rest/account) that created the Credential resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The string that you assigned to describe the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendly_name")]
		public string Friendly_name { get; set; }
		
		/// <summary>
		/// [APN only] Whether to send the credential to sandbox APNs. Can be `true` to send to sandbox APNs or `false` to send to production.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sandbox")]
		public string Sandbox { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the Credential resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CR[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CR[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<Chatv1credentialType> Type { get; set; }
		
		/// <summary>
		/// The absolute URL of the Credential resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Chatv1credentialType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gcm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		apn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fcm = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Chatv1service
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/api/rest/account) that created the Service resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// DEPRECATED. The interval in seconds between consumption reports submission batches from client endpoints.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consumption_report_interval")]
		public System.Nullable<System.Int32> Consumption_report_interval { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The channel role assigned to a channel creator when they join a new channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^RL[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default_channel_creator_role_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^RL[0-9a-fA-F]{32}$")]
		public string Default_channel_creator_role_sid { get; set; }
		
		/// <summary>
		/// The channel role assigned to users when they are added to a channel. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^RL[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default_channel_role_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^RL[0-9a-fA-F]{32}$")]
		public string Default_channel_role_sid { get; set; }
		
		/// <summary>
		/// The service role assigned to users when they are added to the service. See the [Roles endpoint](https://www.twilio.com/docs/chat/api/roles) for more details.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^RL[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default_service_role_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^RL[0-9a-fA-F]{32}$")]
		public string Default_service_role_sid { get; set; }
		
		/// <summary>
		/// The string that you assigned to describe the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendly_name")]
		public string Friendly_name { get; set; }
		
		/// <summary>
		/// An object that describes the limits of the service instance. The `limits` object contains  `channel_members` to describe the members/channel limit and `user_channels` to describe the channels/user limit. `channel_members` can be 1,000 or less, with a default of 250. `user_channels` can be 1,000 or less, with a default value of 100.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limits")]
		public object Limits { get; set; }
		
		/// <summary>
		/// The absolute URLs of the Service's [Channels](https://www.twilio.com/docs/chat/api/channels), [Roles](https://www.twilio.com/docs/chat/api/roles), and [Users](https://www.twilio.com/docs/chat/api/users).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// The notification configuration for the Service instance. See [Push Notification Configuration](https://www.twilio.com/docs/chat/push-notification-configuration) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notifications")]
		public object Notifications { get; set; }
		
		/// <summary>
		/// The URL for post-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="post_webhook_url")]
		public string Post_webhook_url { get; set; }
		
		/// <summary>
		/// The URL for pre-event webhooks, which are called by using the `webhook_method`. See [Webhook Events](https://www.twilio.com/docs/api/chat/webhooks) for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pre_webhook_url")]
		public string Pre_webhook_url { get; set; }
		
		/// <summary>
		/// Whether the [Reachability Indicator](https://www.twilio.com/docs/chat/reachability-indicator) is enabled for this Service instance. The default is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reachability_enabled")]
		public System.Nullable<System.Boolean> Reachability_enabled { get; set; }
		
		/// <summary>
		/// Whether the [Message Consumption Horizon](https://www.twilio.com/docs/chat/consumption-horizon) feature is enabled. The default is `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="read_status_enabled")]
		public System.Nullable<System.Boolean> Read_status_enabled { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the Service resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^IS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^IS[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// How long in seconds after a `started typing` event until clients should assume that user is no longer typing, even if no `ended typing` message was received.  The default is 5 seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="typing_indicator_timeout")]
		public System.Nullable<System.Int32> Typing_indicator_timeout { get; set; }
		
		/// <summary>
		/// The absolute URL of the Service resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// The list of WebHook events that are enabled for this Service instance. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhook_filters")]
		public string[] Webhook_filters { get; set; }
		
		/// <summary>
		/// The HTTP method to use for calls to the `pre_webhook_url` and `post_webhook_url` webhooks.  Can be: `POST` or `GET` and the default is `POST`. See [Webhook Events](https://www.twilio.com/docs/chat/webhook-events) for more details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhook_method")]
		public string Webhook_method { get; set; }
		
		/// <summary>
		/// An object that contains information about the webhooks configured for this service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webhooks")]
		public object Webhooks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Chatv1servicechannel
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/api/rest/account) that created the Channel resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The JSON string that stores application-specific data. **Note** If this property has been assigned a value, it's only  displayed in a FETCH action that returns a single resource; otherwise, it's null. If the attributes have not been set, `{}` is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		/// <summary>
		/// The `identity` of the User that created the channel. If the Channel was created by using the API, the value is `system`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The string that you assigned to describe the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendly_name")]
		public string Friendly_name { get; set; }
		
		/// <summary>
		/// The absolute URLs of the [Members](https://www.twilio.com/docs/chat/api/members), [Messages](https://www.twilio.com/docs/chat/api/messages) , [Invites](https://www.twilio.com/docs/chat/api/invites) and, if it exists, the last [Message](https://www.twilio.com/docs/chat/api/messages) for the Channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// The number of Members in the Channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members_count")]
		public System.Nullable<System.Int32> Members_count { get; set; }
		
		/// <summary>
		/// The number of Messages in the Channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages_count")]
		public System.Nullable<System.Int32> Messages_count { get; set; }
		
		/// <summary>
		/// The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) the resource is associated with.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^IS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^IS[0-9a-fA-F]{32}$")]
		public string Service_sid { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the Channel resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CH[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CH[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<Chatv1servicechannelType> Type { get; set; }
		
		/// <summary>
		/// An application-defined string that uniquely identifies the resource. It can be used to address the resource in place of the resource's `sid` in the URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unique_name")]
		public string Unique_name { get; set; }
		
		/// <summary>
		/// The absolute URL of the Channel resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Chatv1servicechannelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="public")]
		_public = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="private")]
		_private = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Chatv1servicechannelinvite
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/api/rest/account) that created the Invite resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The SID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the resource belongs to.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CH[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CH[0-9a-fA-F]{32}$")]
		public string Channel_sid { get; set; }
		
		/// <summary>
		/// The `identity` of the User that created the invite.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="created_by")]
		public string Created_by { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The application-defined string that uniquely identifies the resource's [User](https://www.twilio.com/docs/api/chat/rest/users) within the [Service](https://www.twilio.com/docs/api/chat/rest/services). See [access tokens](https://www.twilio.com/docs/api/chat/guides/create-tokens) for more info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public string Identity { get; set; }
		
		/// <summary>
		/// The SID of the [Role](https://www.twilio.com/docs/api/chat/rest/roles) assigned to the resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^RL[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^RL[0-9a-fA-F]{32}$")]
		public string Role_sid { get; set; }
		
		/// <summary>
		/// The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) the resource is associated with.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^IS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^IS[0-9a-fA-F]{32}$")]
		public string Service_sid { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the Invite resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^IN[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^IN[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The absolute URL of the Invite resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Chatv1servicechannelmember
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/api/rest/account) that created the Member resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) for the member.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CH[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CH[0-9a-fA-F]{32}$")]
		public string Channel_sid { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The application-defined string that uniquely identifies the resource's [User](https://www.twilio.com/docs/api/chat/rest/users) within the [Service](https://www.twilio.com/docs/api/chat/rest/services). See [access tokens](https://www.twilio.com/docs/api/chat/guides/create-tokens) for more info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public string Identity { get; set; }
		
		/// <summary>
		/// The index of the last [Message](https://www.twilio.com/docs/api/chat/rest/messages) in the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) that the Member has read.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_consumed_message_index")]
		public System.Nullable<System.Int32> Last_consumed_message_index { get; set; }
		
		/// <summary>
		/// The ISO 8601 timestamp string that represents the date-time of the last [Message](https://www.twilio.com/docs/api/chat/rest/messages) read event for the Member within the [Channel](https://www.twilio.com/docs/api/chat/rest/channels).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_consumption_timestamp")]
		public System.Nullable<System.DateTimeOffset> Last_consumption_timestamp { get; set; }
		
		/// <summary>
		/// The SID of the [Role](https://www.twilio.com/docs/api/chat/rest/roles) assigned to the member.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^RL[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^RL[0-9a-fA-F]{32}$")]
		public string Role_sid { get; set; }
		
		/// <summary>
		/// The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) the resource is associated with.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^IS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^IS[0-9a-fA-F]{32}$")]
		public string Service_sid { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the Member resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^MB[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^MB[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The absolute URL of the Member resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Chatv1servicechannelmessage
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/api/rest/account) that created the Message resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The JSON string that stores application-specific data. **Note** If this property has been assigned a value, it's only  displayed in a FETCH action that returns a single resource; otherwise, it's null. If the attributes have not been set, `{}` is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		/// <summary>
		/// The content of the message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the Message resource belongs to.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CH[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CH[0-9a-fA-F]{32}$")]
		public string Channel_sid { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The [identity](https://www.twilio.com/docs/api/chat/guides/identity) of the message's author. The default value is `system`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// The index of the message within the [Channel](https://www.twilio.com/docs/chat/api/channels).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) the resource is associated with.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^IS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^IS[0-9a-fA-F]{32}$")]
		public string Service_sid { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the Message resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^IM[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^IM[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The SID of the [Channel](https://www.twilio.com/docs/chat/api/channels) that the message was sent to.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CH[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CH[0-9a-fA-F]{32}$")]
		public string To { get; set; }
		
		/// <summary>
		/// The absolute URL of the Message resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Whether the message has been edited since it was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="was_edited")]
		public System.Nullable<System.Boolean> Was_edited { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Chatv1servicerole
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/api/rest/account) that created the Role resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The string that you assigned to describe the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendly_name")]
		public string Friendly_name { get; set; }
		
		/// <summary>
		/// An array of the permissions the role has been granted, formatted as a JSON string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public string[] Permissions { get; set; }
		
		/// <summary>
		/// The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) the resource is associated with.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^IS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^IS[0-9a-fA-F]{32}$")]
		public string Service_sid { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the Role resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^RL[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^RL[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<Chatv1serviceroleType> Type { get; set; }
		
		/// <summary>
		/// The absolute URL of the Role resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Chatv1serviceroleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		channel = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deployment = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Chatv1serviceuser
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/api/rest/account) that created the User resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The JSON string that stores application-specific data. **Note** If this property has been assigned a value, it's only  displayed in a FETCH action that returns a single resource; otherwise, it's null. If the attributes have not been set, `{}` is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public string Attributes { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was created specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_created")]
		public System.Nullable<System.DateTimeOffset> Date_created { get; set; }
		
		/// <summary>
		/// The date and time in GMT when the resource was last updated specified in [RFC 2822](http://www.ietf.org/rfc/rfc2822.txt) format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date_updated")]
		public System.Nullable<System.DateTimeOffset> Date_updated { get; set; }
		
		/// <summary>
		/// The string that you assigned to describe the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="friendly_name")]
		public string Friendly_name { get; set; }
		
		/// <summary>
		/// The application-defined string that uniquely identifies the resource's User within the [Service](https://www.twilio.com/docs/api/chat/rest/services). This value is often a username or an email address. See [access tokens](https://www.twilio.com/docs/api/chat/guides/create-tokens) for more info.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public string Identity { get; set; }
		
		/// <summary>
		/// Whether the User has a potentially valid Push Notification registration (APN or GCM) for the Service instance. If at least one registration exists, `true`; otherwise `false`. This value is only returned by Fetch actions that return a single resource and `null` is always returned by a Read action. This value is `null` if the Service's `reachability_enabled` is `false`, and if the User has never had a notification registration, even if the Service's `reachability_enabled` is `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_notifiable")]
		public System.Nullable<System.Boolean> Is_notifiable { get; set; }
		
		/// <summary>
		/// Whether the User is actively connected to the Service instance and online. This value is only returned by Fetch actions that return a single resource and `null` is always returned by a Read action. This value is `null` if the Service's `reachability_enabled` is `false`, if the User has never been online for the Service instance, even if the Service's `reachability_enabled` is `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="is_online")]
		public System.Nullable<System.Boolean> Is_online { get; set; }
		
		/// <summary>
		/// The number of Channels this User is a Member of.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="joined_channels_count")]
		public System.Nullable<System.Int32> Joined_channels_count { get; set; }
		
		/// <summary>
		/// The absolute URLs of the [Channel](https://www.twilio.com/docs/chat/api/channels) and [Binding](https://www.twilio.com/docs/chat/rest/bindings-resource) resources related to the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// The SID of the [Role](https://www.twilio.com/docs/api/chat/rest/roles) assigned to the user.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^RL[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^RL[0-9a-fA-F]{32}$")]
		public string Role_sid { get; set; }
		
		/// <summary>
		/// The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) the resource is associated with.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^IS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^IS[0-9a-fA-F]{32}$")]
		public string Service_sid { get; set; }
		
		/// <summary>
		/// The unique string that we created to identify the User resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^US[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^US[0-9a-fA-F]{32}$")]
		public string Sid { get; set; }
		
		/// <summary>
		/// The absolute URL of the User resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Chatv1serviceuseruser_channel
	{
		
		/// <summary>
		/// The SID of the [Account](https://www.twilio.com/docs/api/rest/account) that created the User Channel resource.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^AC[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^AC[0-9a-fA-F]{32}$")]
		public string Account_sid { get; set; }
		
		/// <summary>
		/// The SID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the resource belongs to.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^CH[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^CH[0-9a-fA-F]{32}$")]
		public string Channel_sid { get; set; }
		
		/// <summary>
		/// The index of the last [Message](https://www.twilio.com/docs/api/chat/rest/messages) in the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) that the Member has read.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last_consumed_message_index")]
		public System.Nullable<System.Int32> Last_consumed_message_index { get; set; }
		
		/// <summary>
		/// The absolute URLs of the [Members](https://www.twilio.com/docs/chat/api/members), [Messages](https://www.twilio.com/docs/chat/api/messages) , [Invites](https://www.twilio.com/docs/chat/api/invites) and, if it exists, the last [Message](https://www.twilio.com/docs/chat/api/messages) for the Channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="links")]
		public string Links { get; set; }
		
		/// <summary>
		/// The SID of a [Member](https://www.twilio.com/docs/api/chat/rest/members) that represents the User on the Channel.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^MB[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="member_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^MB[0-9a-fA-F]{32}$")]
		public string Member_sid { get; set; }
		
		/// <summary>
		/// The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) the resource is associated with.
		/// Max length: 34
		/// Min length: 34
		/// Pattern: ^IS[0-9a-fA-F]{32}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="service_sid")]
		[System.ComponentModel.DataAnnotations.MinLength(34)]
		[System.ComponentModel.DataAnnotations.MaxLength(34)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^IS[0-9a-fA-F]{32}$")]
		public string Service_sid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<Chatv1serviceuseruser_channelStatus> Status { get; set; }
		
		/// <summary>
		/// The number of unread Messages in the Channel for the User. Note that retrieving messages on a client endpoint does not mean that messages are consumed or read. See [Consumption Horizon feature](/docs/api/chat/guides/consumption-horizon) to learn how to mark messages as consumed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unread_messages_count")]
		public System.Nullable<System.Int32> Unread_messages_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Chatv1serviceuseruser_channelStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		joined = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invited = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not_participating = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Credential_enum_push_service
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gcm = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		apn = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fcm = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Message_enum_order_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		asc = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		desc = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum Role_enum_role_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		channel = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deployment = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum User_channel_enum_channel_status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		joined = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invited = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		not_participating = 2,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// ListCredential v1/Credentials
		/// </summary>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListCredentialReturn> ListCredentialAsync(int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Credentials?PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCredentialReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteCredential v1/Credentials/{Sid}
		/// </summary>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the Credential resource to delete.</param>
		public async Task DeleteCredentialAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Credentials/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchCredential v1/Credentials/{Sid}
		/// </summary>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the Credential resource to fetch.</param>
		/// <returns>OK</returns>
		public async Task<Chatv1credential> FetchCredentialAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Credentials/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Chatv1credential>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListService v1/Services
		/// </summary>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListServiceReturn> ListServiceAsync(int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services?PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListServiceReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListChannel v1/Services/{ServiceSid}/Channels
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.</param>
		/// <param name="Type">The visibility of the Channels to read. Can be: `public` or `private` and defaults to `public`.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListChannelReturn> ListChannelAsync(string ServiceSid, Channel_enum_channel_type[] Type, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Channels&"+string.Join("&", Type.Select(z => $"Type={z}"))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListChannelReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListInvite v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.</param>
		/// <param name="ChannelSid">The SID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the resources to read belong to.</param>
		/// <param name="Identity">The [User](https://www.twilio.com/docs/api/chat/rest/v1/user)'s `identity` value of the resources to read. See [access tokens](https://www.twilio.com/docs/api/chat/guides/create-tokens) for more details.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListInviteReturn> ListInviteAsync(string ServiceSid, string ChannelSid, string[] Identity, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Channels/"+ (ChannelSid==null? "" : System.Uri.EscapeDataString(ChannelSid))+"/Invites&"+string.Join("&", Identity.Select(z => $"Identity={System.Uri.EscapeDataString(z.ToString())}"))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListInviteReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteInvite v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to delete the resource from.</param>
		/// <param name="ChannelSid">The SID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the resource to delete belongs to.</param>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the Invite resource to delete.</param>
		public async Task DeleteInviteAsync(string ServiceSid, string ChannelSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Channels/"+ (ChannelSid==null? "" : System.Uri.EscapeDataString(ChannelSid))+"/Invites/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchInvite v1/Services/{ServiceSid}/Channels/{ChannelSid}/Invites/{Sid}
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to fetch the resource from.</param>
		/// <param name="ChannelSid">The SID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the resource to fetch belongs to.</param>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the Invite resource to fetch.</param>
		/// <returns>OK</returns>
		public async Task<Chatv1servicechannelinvite> FetchInviteAsync(string ServiceSid, string ChannelSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Channels/"+ (ChannelSid==null? "" : System.Uri.EscapeDataString(ChannelSid))+"/Invites/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Chatv1servicechannelinvite>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListMember v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.</param>
		/// <param name="ChannelSid">The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the members to read belong to. Can be the Channel resource's `sid` or `unique_name` value.</param>
		/// <param name="Identity">The [User](https://www.twilio.com/docs/api/chat/rest/v1/user)'s `identity` value of the resources to read. See [access tokens](https://www.twilio.com/docs/api/chat/guides/create-tokens) for more details.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListMemberReturn> ListMemberAsync(string ServiceSid, string ChannelSid, string[] Identity, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Channels/"+ (ChannelSid==null? "" : System.Uri.EscapeDataString(ChannelSid))+"/Members&"+string.Join("&", Identity.Select(z => $"Identity={System.Uri.EscapeDataString(z.ToString())}"))+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMemberReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteMember v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to delete the resource from.</param>
		/// <param name="ChannelSid">The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the message belongs to.  Can be the Channel's `sid` or `unique_name`.</param>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the Member resource to delete.</param>
		public async Task DeleteMemberAsync(string ServiceSid, string ChannelSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Channels/"+ (ChannelSid==null? "" : System.Uri.EscapeDataString(ChannelSid))+"/Members/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchMember v1/Services/{ServiceSid}/Channels/{ChannelSid}/Members/{Sid}
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to fetch the resource from.</param>
		/// <param name="ChannelSid">The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the member to fetch belongs to. Can be the Channel resource's `sid` or `unique_name` value.</param>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the Member resource to fetch.</param>
		/// <returns>OK</returns>
		public async Task<Chatv1servicechannelmember> FetchMemberAsync(string ServiceSid, string ChannelSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Channels/"+ (ChannelSid==null? "" : System.Uri.EscapeDataString(ChannelSid))+"/Members/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Chatv1servicechannelmember>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListMessage v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.</param>
		/// <param name="ChannelSid">The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the message to read belongs to. Can be the Channel's `sid` or `unique_name`.</param>
		/// <param name="Order">The sort order of the returned messages. Can be: `asc` (ascending) or `desc` (descending) with `asc` as the default.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListMessageReturn> ListMessageAsync(string ServiceSid, string ChannelSid, Message_enum_order_type Order, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Channels/"+ (ChannelSid==null? "" : System.Uri.EscapeDataString(ChannelSid))+"/Messages&Order=" + Order+"&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListMessageReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteMessage v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to delete the resource from.</param>
		/// <param name="ChannelSid">The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the message to delete belongs to.  Can be the Channel resource's `sid` or `unique_name`.</param>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the Message resource to delete.</param>
		public async Task DeleteMessageAsync(string ServiceSid, string ChannelSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Channels/"+ (ChannelSid==null? "" : System.Uri.EscapeDataString(ChannelSid))+"/Messages/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchMessage v1/Services/{ServiceSid}/Channels/{ChannelSid}/Messages/{Sid}
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to fetch the resource from.</param>
		/// <param name="ChannelSid">The unique ID of the [Channel](https://www.twilio.com/docs/api/chat/rest/channels) the message to fetch belongs to. Can be the Channel's `sid` or `unique_name`.</param>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the Message resource to fetch.</param>
		/// <returns>OK</returns>
		public async Task<Chatv1servicechannelmessage> FetchMessageAsync(string ServiceSid, string ChannelSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Channels/"+ (ChannelSid==null? "" : System.Uri.EscapeDataString(ChannelSid))+"/Messages/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Chatv1servicechannelmessage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteChannel v1/Services/{ServiceSid}/Channels/{Sid}
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to delete the resource from.</param>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the Channel resource to delete.</param>
		public async Task DeleteChannelAsync(string ServiceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Channels/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchChannel v1/Services/{ServiceSid}/Channels/{Sid}
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to fetch the resource from.</param>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the Channel resource to fetch.</param>
		/// <returns>OK</returns>
		public async Task<Chatv1servicechannel> FetchChannelAsync(string ServiceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Channels/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Chatv1servicechannel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListRole v1/Services/{ServiceSid}/Roles
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListRoleReturn> ListRoleAsync(string ServiceSid, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Roles&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListRoleReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteRole v1/Services/{ServiceSid}/Roles/{Sid}
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to delete the resource from.</param>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the Role resource to delete.</param>
		public async Task DeleteRoleAsync(string ServiceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Roles/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchRole v1/Services/{ServiceSid}/Roles/{Sid}
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to fetch the resource from.</param>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the Role resource to fetch.</param>
		/// <returns>OK</returns>
		public async Task<Chatv1servicerole> FetchRoleAsync(string ServiceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Roles/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Chatv1servicerole>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// ListUser v1/Services/{ServiceSid}/Users
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListUserReturn> ListUserAsync(string ServiceSid, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Users&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListUserReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteUser v1/Services/{ServiceSid}/Users/{Sid}
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to delete the resource from.</param>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the User resource to delete.</param>
		public async Task DeleteUserAsync(string ServiceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Users/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchUser v1/Services/{ServiceSid}/Users/{Sid}
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to fetch the resource from.</param>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the User resource to fetch.</param>
		/// <returns>OK</returns>
		public async Task<Chatv1serviceuser> FetchUserAsync(string ServiceSid, string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Users/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Chatv1serviceuser>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all Channels for a given User.
		/// ListUserChannel v1/Services/{ServiceSid}/Users/{UserSid}/Channels
		/// </summary>
		/// <param name="ServiceSid">The SID of the [Service](https://www.twilio.com/docs/api/chat/rest/services) to read the resources from.</param>
		/// <param name="UserSid">The SID of the [User](https://www.twilio.com/docs/api/chat/rest/users) to read the User Channel resources from.</param>
		/// <param name="PageSize">How many resources to return in each list page. The default is 50, and the maximum is 1000.</param>
		/// <param name="Page">The page index. This value is simply for client state.</param>
		/// <param name="PageToken">The page token. This is provided by the API.</param>
		/// <returns>OK</returns>
		public async Task<ListUserChannelReturn> ListUserChannelAsync(string ServiceSid, string UserSid, int PageSize, int Page, string PageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (ServiceSid==null? "" : System.Uri.EscapeDataString(ServiceSid))+"/Users/"+ (UserSid==null? "" : System.Uri.EscapeDataString(UserSid))+"/Channels&PageSize="+PageSize+"&Page="+Page+"&PageToken=" + (PageToken==null? "" : System.Uri.EscapeDataString(PageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListUserChannelReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// DeleteService v1/Services/{Sid}
		/// </summary>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the Service resource to delete.</param>
		public async Task DeleteServiceAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// FetchService v1/Services/{Sid}
		/// </summary>
		/// <param name="Sid">The Twilio-provided string that uniquely identifies the Service resource to fetch.</param>
		/// <returns>OK</returns>
		public async Task<Chatv1service> FetchServiceAsync(string Sid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/Services/"+ (Sid==null? "" : System.Uri.EscapeDataString(Sid));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Chatv1service>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class ListCredentialReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="credentials")]
		public Chatv1credential[] Credentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListCredentialReturnMeta Meta { get; set; }
	}
	
	public class ListCredentialReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListServiceReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListServiceReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="services")]
		public Chatv1service[] Services { get; set; }
	}
	
	public class ListServiceReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListChannelReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public Chatv1servicechannel[] Channels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListChannelReturnMeta Meta { get; set; }
	}
	
	public class ListChannelReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListInviteReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="invites")]
		public Chatv1servicechannelinvite[] Invites { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListInviteReturnMeta Meta { get; set; }
	}
	
	public class ListInviteReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListMemberReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public Chatv1servicechannelmember[] Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListMemberReturnMeta Meta { get; set; }
	}
	
	public class ListMemberReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListMessageReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Chatv1servicechannelmessage[] Messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListMessageReturnMeta Meta { get; set; }
	}
	
	public class ListMessageReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListRoleReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListRoleReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public Chatv1servicerole[] Roles { get; set; }
	}
	
	public class ListRoleReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListUserReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListUserReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="users")]
		public Chatv1serviceuser[] Users { get; set; }
	}
	
	public class ListUserReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ListUserChannelReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public Chatv1serviceuseruser_channel[] Channels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ListUserChannelReturnMeta Meta { get; set; }
	}
	
	public class ListUserChannelReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="first_page_url")]
		public string First_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="next_page_url")]
		public string Next_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previous_page_url")]
		public string Previous_page_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
