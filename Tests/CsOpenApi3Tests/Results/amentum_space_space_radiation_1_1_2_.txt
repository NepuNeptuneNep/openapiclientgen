//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flux
	{
		
		/// <summary>
		/// Particle energies at which omnidirectional flux values are calculated, and their units.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="energies")]
		public FluxEnergies Energies { get; set; }
		
		/// <summary>
		/// Corresponding omnidirectional flux values, and their units.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flux")]
		public FluxFlux1 Flux1 { get; set; }
	}
	
	public class FluxEnergies
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public double[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	public class FluxFlux1
	{
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public double[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FluxAtEnergy
	{
		
		/// <summary>
		/// Particle flux value and units.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flux")]
		public FluxAtEnergyFlux Flux { get; set; }
	}
	
	public class FluxAtEnergyFlux
	{
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Calculate particle flux
		/// 
		/// for the given energy, atomic number, and date.
		/// 
		/// App_api_endpoints_GCR_calculate_dlr_flux gcr/flux_dlr
		/// </summary>
		/// <param name="year"><br></param>
		/// <param name="month"><br></param>
		/// <param name="day"><br></param>
		/// <param name="z"><br>Particle atomic number</param>
		/// <param name="energy"><br>Particle energy in MeV/n<br> Valid range: [0, 10<sup>6</sup>] MeV/n<br> 
		///</param>
		/// <returns>Successful flux calculation</returns>
		public async Task<FluxAtEnergy> App_api_endpoints_GCR_calculate_dlr_fluxAsync(int year, int month, int day, double z, double energy, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "gcr/flux_dlr?year="+year+"&month="+month+"&day="+day+"&z="+z+"&energy="+energy;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FluxAtEnergy>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Calculate mean particle flux
		/// 
		/// at given coordinates and date-time.
		/// 
		/// App_api_endpoints_TrappedRadiation_calculate_flux_mean trapped/flux_mean
		/// </summary>
		/// <param name="model"><br>Which model to use: <br><br> - Energetic electrons (AE9) <br> - Energetic protons (AP9)  <br> - Space plasma model for electrons (SPME) <br> - for hydrogen (SPMH) <br> - for helium (SPMHE) <br> - for oxygen (SPMO) 
		///</param>
		/// <param name="coord_sys"><br>Coordinate system to use:  <br><br> - Geodetic/WGS84 (GDZ) <br> - Geocentric Cartesian (GEO) <br> - Geocentric Earth Inertial (GEI) <br> See "Bhavnani, K. H., & Vancour, R. P. (1991).  Coordinate systems for space and geophysical applications"  for coord system definitions.
		///</param>
		/// <param name="coord_units"><br>Coordinate units to use: km (KM) or Earth Radii (RE)
		///</param>
		/// <param name="coord1"><br>First coordinate value to specify position. <br><br> Ordering for GEI, GEO coords:X, Y, Z<br> Ordering for GDZ coords: Alt, Lat, Long<br>  Valid ranges for latitude: -90, 90<br>  Valid ranges for longitude: 0, 360<br> 
		///</param>
		/// <param name="coord2"><br>Second coordinate value.</param>
		/// <param name="coord3"><br>Third coordinate value.</param>
		/// <param name="year"><br></param>
		/// <param name="month"><br></param>
		/// <param name="day"><br></param>
		/// <param name="hour"><br></param>
		/// <param name="minute"><br></param>
		/// <param name="second"><br></param>
		/// <returns>Successful flux calculation</returns>
		public async Task<Flux> App_api_endpoints_TrappedRadiation_calculate_flux_meanAsync(App_api_endpoints_TrappedRadiation_calculate_flux_meanModel model, App_api_endpoints_TrappedRadiation_calculate_flux_meanCoord_sys coord_sys, App_api_endpoints_TrappedRadiation_calculate_flux_meanCoord_units coord_units, double coord1, double coord2, double coord3, int year, int month, int day, int hour, int minute, int second, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "trapped/flux_mean?model=" + model+"&coord_sys=" + coord_sys+"&coord_units=" + coord_units+"&coord1="+coord1+"&coord2="+coord2+"&coord3="+coord3+"&year="+year+"&month="+month+"&day="+day+"&hour="+hour+"&minute="+minute+"&second="+second;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Flux>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Calculate percentile particle flux
		/// 
		/// at given coordinates and date-time.
		/// 
		/// App_api_endpoints_TrappedRadiation_calculate_flux_percentile trapped/flux_percentile
		/// </summary>
		/// <param name="model"><br>Which model to use: <br><br> - Energetic electrons (AE9) <br> - Energetic protons (AP9)  <br> - Space plasma model for electrons (SPME) <br> - for hydrogen (SPMH) <br> - for helium (SPMHE) <br> - for oxygen (SPMO) 
		///</param>
		/// <param name="coord_sys"><br>Coordinate system to use:  <br><br> - Geodetic/WGS84 (GDZ) <br> - Geocentric Cartesian (GEO) <br> - Geocentric Earth Inertial (GEI) <br> See "Bhavnani, K. H., & Vancour, R. P. (1991).  Coordinate systems for space and geophysical applications"  for coord system definitions.
		///</param>
		/// <param name="coord_units"><br>Coordinate units to use: km (KM) or Earth Radii (RE)
		///</param>
		/// <param name="coord1"><br>First coordinate value to specify position. <br><br> Ordering for GEI, GEO coords:X, Y, Z<br> Ordering for GDZ coords: Alt, Lat, Long<br>  Valid ranges for latitude: -90, 90<br>  Valid ranges for longitude: 0, 360<br> 
		///</param>
		/// <param name="coord2"><br>Second coordinate value.</param>
		/// <param name="coord3"><br>Third coordinate value.</param>
		/// <param name="year"><br></param>
		/// <param name="month"><br></param>
		/// <param name="day"><br></param>
		/// <param name="hour"><br></param>
		/// <param name="minute"><br></param>
		/// <param name="second"><br></param>
		/// <param name="percentile"><br>Integer percentile at which to calc flux (50 is the median value).
		///</param>
		/// <returns>Successful flux calculation</returns>
		public async Task<Flux> App_api_endpoints_TrappedRadiation_calculate_flux_percentileAsync(App_api_endpoints_TrappedRadiation_calculate_flux_meanModel model, App_api_endpoints_TrappedRadiation_calculate_flux_meanCoord_sys coord_sys, App_api_endpoints_TrappedRadiation_calculate_flux_meanCoord_units coord_units, double coord1, double coord2, double coord3, int year, int month, int day, int hour, int minute, int second, int percentile, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "trapped/flux_percentile?model=" + model+"&coord_sys=" + coord_sys+"&coord_units=" + coord_units+"&coord1="+coord1+"&coord2="+coord2+"&coord3="+coord3+"&year="+year+"&month="+month+"&day="+day+"&hour="+hour+"&minute="+minute+"&second="+second+"&percentile="+percentile;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Flux>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum App_api_endpoints_TrappedRadiation_calculate_flux_meanModel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AE9 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AP9 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPME = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPMH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPMHE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPMO = 5,
	}
	
	public enum App_api_endpoints_TrappedRadiation_calculate_flux_meanCoord_sys
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GDZ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEI = 2,
	}
	
	public enum App_api_endpoints_TrappedRadiation_calculate_flux_meanCoord_units
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		KM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RE = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
