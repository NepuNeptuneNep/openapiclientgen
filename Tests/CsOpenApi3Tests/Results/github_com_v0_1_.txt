//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkCallParameters
	{
		
		/// <summary>
		/// Fully qualified URL which will provide the RestXML once the call connects
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AnswerUrl { get; set; }
		
		/// <summary>
		/// Caller Name to be set for the call
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CallerName { get; set; }
		
		/// <summary>
		/// DTMF tone the called party must send to accept the call
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ConfirmKey { get; set; }
		
		/// <summary>
		/// Remote URL to fetch with POST HTTP request which must return a RestXML with Play, Wait and/or Speak Elements only (all others are ignored). This RESTXML is played to the called party when he answered
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ConfirmSound { get; set; }
		
		/// <summary>
		/// Core UUID of the desired FreeSWITCH instance (an Eqivo extension)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CoreUUID { get; set; }
		
		/// <summary>
		/// Any character, except `/` and `,`, which will be used as a separator within several parameters
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Delimiter { get; set; }
		
		/// <summary>
		/// Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExtraDialString { get; set; }
		
		/// <summary>
		/// Phone number to be used as Caller ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string From { get; set; }
		
		/// <summary>
		/// List of codec(s) to be used for each gateway. Enclose codec groups in single quotes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GatewayCodecs { get; set; }
		
		/// <summary>
		/// List of maximum retry counts for each gateway
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GatewayRetries { get; set; }
		
		/// <summary>
		/// List of maximum timeout amounts (in seconds) for each gateway
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GatewayTimeouts { get; set; }
		
		/// <summary>
		/// Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Gateways { get; set; }
		
		/// <summary>
		/// Schedules the call's hangup at a given time offset (in seconds) after the destination starts ringing
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> HangupOnRing { get; set; }
		
		/// <summary>
		/// Fully qualified URL to which the call hangup notification will be POSTed. `HangupCause` is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HangupUrl { get; set; }
		
		/// <summary>
		/// Comma separated reject causes
		/// </summary>
		[System.ComponentModel.DefaultValue("NO_ANSWER,ORIGINATOR_CANCEL,ALLOTTED_TIMEOUT,NO_USER_RESPONSE,CALL_REJECTED")]
		[System.Runtime.Serialization.DataMember()]
		public string RejectCauses { get; set; } = "NO_ANSWER,ORIGINATOR_CANCEL,ALLOTTED_TIMEOUT,NO_USER_RESPONSE,CALL_REJECTED";
		
		/// <summary>
		/// Fully qualified URL to which the call ringing notification will be POSTed. `RequestUUID` and `CallUUID` is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RingUrl { get; set; }
		
		/// <summary>
		/// DTMF tones to be sent when the call is answered. Each occurrence of `w` implies a 0.5 seconds delay whereas `W` will apply a whole second delay. To alter the tone duration (by default, 2000ms), append `@` and the length in milliseconds at the end of the string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SendDigits { get; set; }
		
		/// <summary>
		/// When set to `true`, DTMF tones will be sent as early media rather than when the call is answered
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SendOnPreanswer { get; set; }
		
		/// <summary>
		/// Schedules the call's hangup at a given time offset (in seconds) after the call is answered
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TimeLimit { get; set; }
		
		/// <summary>
		/// Phone number to be called
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkCallResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BulkCallResponseMessage Message { get; set; }
		
		/// <summary>
		/// Unique identifiers of each Call request (UUIDv4)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] RequestUUID { get; set; }
		
		/// <summary>
		/// API server which handled this request (an Eqivo extension)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RestApiServer { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BulkCallResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BulkCalls Request Executed")]
		BulkCalls_Request_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mandatory Parameters Missing")]
		Mandatory_Parameters_Missing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="This Delimiter is not allowed")]
		This_Delimiter_is_not_allowed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BulkCalls should be used for at least 2 numbers")]
		BulkCalls_should_be_used_for_at_least_2_numbers = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="'To' parameter length does not match 'Gateways' Length")]
		_To__parameter_length_does_not_match__Gateways__Length = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AnswerUrl is not Valid")]
		AnswerUrl_is_not_Valid = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HangupUrl is not Valid")]
		HangupUrl_is_not_Valid = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RingUrl is not Valid")]
		RingUrl_is_not_Valid = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown Core UUID")]
		Unknown_Core_UUID = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CallNotificationParameters
	{
		
		/// <summary>
		/// A leg call request's unique identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ALegRequestUUID { get; set; }
		
		/// <summary>
		/// A leg call's unique identifier, assigned by FreeSWITCH
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ALegUUID { get; set; }
		
		/// <summary>
		/// Answering actor, when answering machine detection is enabled
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<CallNotificationParametersAnsweredBy> AnsweredBy { get; set; }
		
		/// <summary>
		/// Call's current status
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CallNotificationParametersCallStatus CallStatus { get; set; }
		
		/// <summary>
		/// Call's unique identifier, assigned by FreeSWITCH
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallUUID { get; set; }
		
		/// <summary>
		/// Caller name set for the call
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallerName { get; set; }
		
		/// <summary>
		/// FreeSWITCH's instance unique identifier (Eqivo extension)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CoreUUID { get; set; }
		
		/// <summary>
		/// Call's direction
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CallNotificationParametersDirection Direction { get; set; }
		
		/// <summary>
		/// Original call destination (before diversion)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ForwardedFrom { get; set; }
		
		/// <summary>
		/// Caller ID set for the call
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string From { get; set; }
		
		/// <summary>
		/// Actual answering machine detection assessment duration (in milliseconds)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MachineDetectionDuration { get; set; }
		
		/// <summary>
		/// Eqivo Rest API server which controls the call (Eqivo extension)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RestApiServer { get; set; }
		
		/// <summary>
		/// Unique identifier of the scheduled hangup task
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ScheduledHangupId { get; set; }
		
		/// <summary>
		/// Called phone number
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CallNotificationParametersAnsweredBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		machine_start = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		machine_end_beep = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		machine_end_other = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		human = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unknown = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CallNotificationParametersCallStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ringing = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="early-media")]
		earlyMinusmedia = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		answer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in-progress")]
		inMinusprogress = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		completed = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CallNotificationParametersDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inbound = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		outbound = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CallParameters
	{
		
		/// <summary>
		/// Fully qualified URL which will provide the RestXML once the call connects
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AnswerUrl { get; set; }
		
		/// <summary>
		/// When set to `true`, the call flow execution is blocked until answering machine detection is complete (an Eqivo extension)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AsyncAMD { get; set; }
		
		/// <summary>
		/// Fully qualified URL to which the answering machine detection result will be sent. `AnsweredBy` and `MachineDetectionDuration` are appended to the usual [call notification parameters](#/components/schemas/CallNotificationParameters) (an Eqivo extension)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string AsyncAmdStatusCallback { get; set; }
		
		/// <summary>
		/// HTTP method to be used when answering machine detection is completed (an Eqivo extension)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<CallParametersAsyncAmdStatusCallbackMethod> AsyncAmdStatusCallbackMethod { get; set; }
		
		/// <summary>
		/// Caller Name to be set for the call
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CallerName { get; set; }
		
		/// <summary>
		/// Core UUID of the desired FreeSWITCH instance (an Eqivo extension)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CoreUUID { get; set; }
		
		/// <summary>
		/// Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExtraDialString { get; set; }
		
		/// <summary>
		/// Phone number to be used as Caller ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string From { get; set; }
		
		/// <summary>
		/// List of codec(s) to be used for each gateway. Enclose codec groups in single quotes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GatewayCodecs { get; set; }
		
		/// <summary>
		/// List of maximum retry counts for each gateway
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GatewayRetries { get; set; }
		
		/// <summary>
		/// List of maximum timeout amounts (in seconds) for each gateway
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GatewayTimeouts { get; set; }
		
		/// <summary>
		/// Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Gateways { get; set; }
		
		/// <summary>
		/// Schedules the call's hangup at a given time offset (in seconds) after the destination starts ringing
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> HangupOnRing { get; set; }
		
		/// <summary>
		/// Fully qualified URL to which the call hangup notification will be POSTed. `HangupCause` is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HangupUrl { get; set; }
		
		/// <summary>
		/// Enables answering machine detection; optionally, it waits until the greeting message has been played back (an Eqivo extension)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<CallParametersMachineDetection> MachineDetection { get; set; }
		
		/// <summary>
		/// Initial silence threshold (in milliseconds, an Eqivo extension)
		/// Minimum: 2000
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(2000, 10000)]
		public System.Nullable<System.Int32> MachineDetectionSilenceTimeout { get; set; }
		
		/// <summary>
		/// Silence threshold (in milliseconds, an Eqivo extension)
		/// Minimum: 500
		/// Maximum: 5000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(500, 5000)]
		public System.Nullable<System.Int32> MachineDetectionSpeechEndThreshold { get; set; }
		
		/// <summary>
		/// Speech activity/utterance threshold (in milliseconds, an Eqivo extension)
		/// Minimum: 1000
		/// Maximum: 6000
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1000, 6000)]
		public System.Nullable<System.Int32> MachineDetectionSpeechThreshold { get; set; }
		
		/// <summary>
		/// Amount of time (in seconds) allotted for answering machine detection assessment (an Eqivo extension)
		/// Minimum: 3
		/// Maximum: 59
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(3, 59)]
		public System.Nullable<System.Int32> MachineDetectionTimeout { get; set; }
		
		/// <summary>
		/// Fully qualified URL to which the call ringing notification will be POSTed. `RequestUUID` and `CallUUID` is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RingUrl { get; set; }
		
		/// <summary>
		/// DTMF tones to be sent when the call is answered. Each occurrence of `w` implies a 0.5 seconds delay whereas `W` will apply a whole second delay. To alter the tone duration (by default, 2000ms), append `@` and the length in milliseconds at the end of the string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SendDigits { get; set; }
		
		/// <summary>
		/// When set to `true`, DTMF tones will be sent as early media rather than when the call is answered
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SendOnPreanswer { get; set; }
		
		/// <summary>
		/// Schedules the call's hangup at a given time offset (in seconds) after the call is answered
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TimeLimit { get; set; }
		
		/// <summary>
		/// Phone number to be called
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CallParametersAsyncAmdStatusCallbackMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CallParametersMachineDetection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Enable = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DetectMessageEnd = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CallResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CallResponseMessage Message { get; set; }
		
		/// <summary>
		/// Unique identifier of the Call request (UUIDv4)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RequestUUID { get; set; }
		
		/// <summary>
		/// API server which handled this request (an Eqivo extension)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RestApiServer { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CallResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Call Request Executed")]
		Call_Request_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mandatory Parameters Missing")]
		Mandatory_Parameters_Missing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AnswerUrl is not Valid")]
		AnswerUrl_is_not_Valid = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HangupUrl is not Valid")]
		HangupUrl_is_not_Valid = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RingUrl is not Valid")]
		RingUrl_is_not_Valid = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown Core UUID")]
		Unknown_Core_UUID = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelScheduledHangupParameters
	{
		
		/// <summary>
		/// Unique identifier returned when scheduled hangup was originally requested
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchedHangupId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelScheduledHangupResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CancelScheduledHangupResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CancelScheduledHangupResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Scheduled Hangup Cancelation Executed")]
		Scheduled_Hangup_Cancelation_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SchedHangupId Parameter must be present")]
		SchedHangupId_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Scheduled Hangup Cancelation Failed -- ID not found")]
		Scheduled_Hangup_Cancelation_Failed_MinusMinus_ID_not_found = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Scheduled Hangup Cancelation Failed")]
		Scheduled_Hangup_Cancelation_Failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelScheduledPlayParameters
	{
		
		/// <summary>
		/// Unique identifier returned when scheduled playback was originally requested
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchedPlayId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelScheduledPlayResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public CancelScheduledPlayResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CancelScheduledPlayResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Scheduled Play Cancelation Executed")]
		Scheduled_Play_Cancelation_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SchedPlayId Parameter must be present")]
		SchedPlayId_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Scheduled Play Cancelation Failed -- ID not found")]
		Scheduled_Play_Cancelation_Failed_MinusMinus_ID_not_found = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Scheduled Play Cancelation Failed")]
		Scheduled_Play_Cancelation_Failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceDeafParameters
	{
		
		/// <summary>
		/// Name of the conference in question
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConferenceName { get; set; }
		
		/// <summary>
		/// List of comma separated member IDs to be affected; `all` shorthand is available too.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MemberID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceDeafResponse
	{
		
		/// <summary>
		/// List of affected members
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConferenceDeafResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConferenceDeafResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Deaf Executed")]
		Conference_Deaf_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConferenceName Parameter must be present")]
		ConferenceName_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MemberID Parameter must be present")]
		MemberID_Parameter_must_be_present = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Deaf Failed -- Conference not found")]
		Conference_Deaf_Failed_MinusMinus_Conference_not_found = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceHangupParameters
	{
		
		/// <summary>
		/// Name of the conference in question
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConferenceName { get; set; }
		
		/// <summary>
		/// List of comma separated member IDs to be affected; `all` shorthand is available too.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MemberID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceHangupResponse
	{
		
		/// <summary>
		/// List of affected members
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConferenceHangupResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConferenceHangupResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Hangup Executed")]
		Conference_Hangup_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConferenceName Parameter must be present")]
		ConferenceName_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MemberID Parameter must be present")]
		MemberID_Parameter_must_be_present = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Hangup Failed -- Conference not found")]
		Conference_Hangup_Failed_MinusMinus_Conference_not_found = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceKickParameters
	{
		
		/// <summary>
		/// Name of the conference in question
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConferenceName { get; set; }
		
		/// <summary>
		/// List of comma separated member IDs to be affected; `all` shorthand is available too.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MemberID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceKickResponse
	{
		
		/// <summary>
		/// List of affected members
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConferenceKickResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConferenceKickResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Kick Executed")]
		Conference_Kick_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConferenceName Parameter must be present")]
		ConferenceName_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MemberID Parameter must be present")]
		MemberID_Parameter_must_be_present = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Kick Failed -- Conference not found")]
		Conference_Kick_Failed_MinusMinus_Conference_not_found = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceListMembersParameters
	{
		
		/// <summary>
		/// Restricts listed calls to the provided values (comma separated call UUID list)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CallUUIDFilter { get; set; }
		
		/// <summary>
		/// Name of the conference
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConferenceName { get; set; }
		
		/// <summary>
		/// Restricts listed members to deaf ones
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeafFilter { get; set; }
		
		/// <summary>
		/// Restricts listed members to the provided values (comma separated member ID list)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MemberFilter { get; set; }
		
		/// <summary>
		/// Restricts listed members to muted ones
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MutedFilter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceListMembersResponse
	{
		
		/// <summary>
		/// List of established conferences
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string List { get; set; }
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConferenceListMembersResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConferenceListMembersResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference ListMembers Executed")]
		Conference_ListMembers_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConferenceName Parameter must be present")]
		ConferenceName_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference ListMembers Failed to parse result")]
		Conference_ListMembers_Failed_to_parse_result = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference ListMembers Failed -- Conference not found")]
		Conference_ListMembers_Failed_MinusMinus_Conference_not_found = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceListParameters
	{
		
		/// <summary>
		/// Restricts listed calls to the provided values (comma separated call UUID list)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CallUUIDFilter { get; set; }
		
		/// <summary>
		/// Restricts listed members to deaf ones
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> DeafFilter { get; set; }
		
		/// <summary>
		/// Restricts listed members to the provided values (comma separated member ID list)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MemberFilter { get; set; }
		
		/// <summary>
		/// Restricts listed members to muted ones
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> MutedFilter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceListResponse
	{
		
		/// <summary>
		/// List of established conferences
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string List { get; set; }
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConferenceListResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConferenceListResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference List Executed")]
		Conference_List_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference List Failed to parse result")]
		Conference_List_Failed_to_parse_result = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceMuteParameters
	{
		
		/// <summary>
		/// Name of the conference in question
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConferenceName { get; set; }
		
		/// <summary>
		/// List of comma separated member IDs to be affected; `all` shorthand is available too.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MemberID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceMuteResponse
	{
		
		/// <summary>
		/// List of affected members
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConferenceMuteResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConferenceMuteResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Mute Executed")]
		Conference_Mute_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConferenceName Parameter must be present")]
		ConferenceName_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MemberID Parameter must be present")]
		MemberID_Parameter_must_be_present = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Mute Failed -- Conference not found")]
		Conference_Mute_Failed_MinusMinus_Conference_not_found = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferencePlayParameters
	{
		
		/// <summary>
		/// Name of the conference in question
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConferenceName { get; set; }
		
		/// <summary>
		/// Path/URI of the media file to be played
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string FilePath { get; set; }
		
		/// <summary>
		/// List of comma separated member IDs to be affected; `all` shorthand is available too.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MemberID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferencePlayResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConferencePlayResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConferencePlayResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Play Executed")]
		Conference_Play_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConferenceName Parameter must be present")]
		ConferenceName_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FilePath Parameter must be present")]
		FilePath_Parameter_must_be_present = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MemberID Parameter must be present")]
		MemberID_Parameter_must_be_present = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Play Failed -- Conference not found")]
		Conference_Play_Failed_MinusMinus_Conference_not_found = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Play Failed")]
		Conference_Play_Failed = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceRecordStartParameters
	{
		
		/// <summary>
		/// Name of the conference in question
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConferenceName { get; set; }
		
		/// <summary>
		/// File format (extension)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<ConferenceRecordStartParametersFileFormat> FileFormat { get; set; }
		
		/// <summary>
		/// Recording file name (without extension); if empty, a timestamp based file name will be generated
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember()]
		public string FileName { get; set; } = "";
		
		/// <summary>
		/// Directory path/URI where the recording file will be saved
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember()]
		public string FilePath { get; set; } = "";
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConferenceRecordStartParametersFileFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wav = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mp3 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceRecordStartResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConferenceRecordStartResponseMessage Message { get; set; }
		
		/// <summary>
		/// Directory path/URI where the recording file will be saved
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecordFile { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConferenceRecordStartResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference RecordStart Executed")]
		Conference_RecordStart_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConferenceName Parameter must be present")]
		ConferenceName_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FileFormat Parameter must be")]
		FileFormat_Parameter_must_be = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference RecordStart Failed")]
		Conference_RecordStart_Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference RecordStart Failed -- Conference not found")]
		Conference_RecordStart_Failed_MinusMinus_Conference_not_found = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceRecordStopParameters
	{
		
		/// <summary>
		/// Name of the conference in question
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConferenceName { get; set; }
		
		/// <summary>
		/// Full path to recording file, as returned by ConferenceRecordStart; `all` shorthand is also available
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecordFile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceRecordStopResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConferenceRecordStopResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConferenceRecordStopResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference RecordStop Executed")]
		Conference_RecordStop_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConferenceName Parameter must be present")]
		ConferenceName_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RecordFile Parameter must be present")]
		RecordFile_Parameter_must_be_present = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference RecordStop Failed")]
		Conference_RecordStop_Failed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference RecordStop Failed -- Conference not found")]
		Conference_RecordStop_Failed_MinusMinus_Conference_not_found = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceSpeakParameters
	{
		
		/// <summary>
		/// Name of the conference in question
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConferenceName { get; set; }
		
		/// <summary>
		/// List of comma separated member IDs to be affected; `all` shorthand is available too.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MemberID { get; set; }
		
		/// <summary>
		/// Text to be synthesized
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceSpeakResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConferenceSpeakResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConferenceSpeakResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Speak Executed")]
		Conference_Speak_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConferenceName Parameter must be present")]
		ConferenceName_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Text Parameter must be present")]
		Text_Parameter_must_be_present = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MemberID Parameter must be present")]
		MemberID_Parameter_must_be_present = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Speak Failed -- Conference not found")]
		Conference_Speak_Failed_MinusMinus_Conference_not_found = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Speak Failed")]
		Conference_Speak_Failed = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceUndeafParameters
	{
		
		/// <summary>
		/// Name of the conference in question
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConferenceName { get; set; }
		
		/// <summary>
		/// List of comma separated member IDs to be affected; `all` shorthand is available too.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MemberID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceUndeafResponse
	{
		
		/// <summary>
		/// List of affected members
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConferenceUndeafResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConferenceUndeafResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Undeaf Executed")]
		Conference_Undeaf_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConferenceName Parameter must be present")]
		ConferenceName_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MemberID Parameter must be present")]
		MemberID_Parameter_must_be_present = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Undeaf Failed -- Conference not found")]
		Conference_Undeaf_Failed_MinusMinus_Conference_not_found = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceUnmuteParameters
	{
		
		/// <summary>
		/// Name of the conference in question
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ConferenceName { get; set; }
		
		/// <summary>
		/// List of comma separated member IDs to be affected; `all` shorthand is available too.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string MemberID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConferenceUnmuteResponse
	{
		
		/// <summary>
		/// List of affected members
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string[] Members { get; set; }
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ConferenceUnmuteResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConferenceUnmuteResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Unmute Executed")]
		Conference_Unmute_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConferenceName Parameter must be present")]
		ConferenceName_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MemberID Parameter must be present")]
		MemberID_Parameter_must_be_present = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Conference Unmute Failed -- Conference not found")]
		Conference_Unmute_Failed_MinusMinus_Conference_not_found = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupCallParameters
	{
		
		/// <summary>
		/// Fully qualified URL which will provide the RestXML once the call connects
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AnswerUrl { get; set; }
		
		/// <summary>
		/// Caller Name to be set for the call
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CallerName { get; set; }
		
		/// <summary>
		/// DTMF tone the called party must send to accept the call
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ConfirmKey { get; set; }
		
		/// <summary>
		/// Remote URL to fetch with POST HTTP request which must return a RestXML with Play, Wait and/or Speak Elements only (all others are ignored). This RESTXML is played to the called party when he answered
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ConfirmSound { get; set; }
		
		/// <summary>
		/// Core UUID of the desired FreeSWITCH instance (an Eqivo extension)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CoreUUID { get; set; }
		
		/// <summary>
		/// Any character, except `/` and `,`, which will be used as a separator within several parameters
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Delimiter { get; set; }
		
		/// <summary>
		/// Additional [channel variables](https://freeswitch.org/confluence/display/FREESWITCH/Channel+Variables) to be added to the originate FreeSWITCH API call.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string ExtraDialString { get; set; }
		
		/// <summary>
		/// Phone number to be used as Caller ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string From { get; set; }
		
		/// <summary>
		/// List of codec(s) to be used for each gateway. Enclose codec groups in single quotes
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GatewayCodecs { get; set; }
		
		/// <summary>
		/// List of maximum retry counts for each gateway
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GatewayRetries { get; set; }
		
		/// <summary>
		/// List of maximum timeout amounts (in seconds) for each gateway
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string GatewayTimeouts { get; set; }
		
		/// <summary>
		/// Comma separated FreeSWITCH gateway strings. When multiple gateways are specified, they will be tried sequentially (failover)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Gateways { get; set; }
		
		/// <summary>
		/// Schedules the call's hangup at a given time offset (in seconds) after the destination starts ringing
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> HangupOnRing { get; set; }
		
		/// <summary>
		/// Fully qualified URL to which the call hangup notification will be POSTed. `HangupCause` is added to the usual call [call notification parameters](#/components/schemas/CallNotificationParameters)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string HangupUrl { get; set; }
		
		/// <summary>
		/// Comma separated reject causes
		/// </summary>
		[System.ComponentModel.DefaultValue("NO_ANSWER,ORIGINATOR_CANCEL,ALLOTTED_TIMEOUT,NO_USER_RESPONSE,CALL_REJECTED")]
		[System.Runtime.Serialization.DataMember()]
		public string RejectCauses { get; set; } = "NO_ANSWER,ORIGINATOR_CANCEL,ALLOTTED_TIMEOUT,NO_USER_RESPONSE,CALL_REJECTED";
		
		/// <summary>
		/// Fully qualified URL to which the call ringing notification will be POSTed. `RequestUUID` and `CallUUID` is added to the usual [call notification parameters](#/components/schemas/CallNotificationParameters)
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RingUrl { get; set; }
		
		/// <summary>
		/// DTMF tones to be sent when the call is answered. Each occurrence of `w` implies a 0.5 seconds delay whereas `W` will apply a whole second delay. To alter the tone duration (by default, 2000ms), append `@` and the length in milliseconds at the end of the string
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string SendDigits { get; set; }
		
		/// <summary>
		/// When set to `true`, DTMF tones will be sent as early media rather than when the call is answered
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SendOnPreanswer { get; set; }
		
		/// <summary>
		/// Schedules the call's hangup at a given time offset (in seconds) after the call is answered
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TimeLimit { get; set; }
		
		/// <summary>
		/// Phone number to be called
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GroupCallResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GroupCallResponseMessage Message { get; set; }
		
		/// <summary>
		/// Unique identifier of the Call request (UUIDv4)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RequestUUID { get; set; }
		
		/// <summary>
		/// API server which handled this request (an Eqivo extension)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RestApiServer { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GroupCallResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GroupCall Request Executed")]
		GroupCall_Request_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mandatory Parameters Missing")]
		Mandatory_Parameters_Missing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="This Delimiter is not allowed")]
		This_Delimiter_is_not_allowed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GroupCall should be used for at least 2 numbers")]
		GroupCall_should_be_used_for_at_least_2_numbers = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="'To' parameter length does not match 'Gateways' Length")]
		_To__parameter_length_does_not_match__Gateways__Length = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AnswerUrl is not Valid")]
		AnswerUrl_is_not_Valid = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HangupUrl is not Valid")]
		HangupUrl_is_not_Valid = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RingUrl is not Valid")]
		RingUrl_is_not_Valid = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ConfirmSound is not Valid")]
		ConfirmSound_is_not_Valid = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown Core UUID")]
		Unknown_Core_UUID = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GroupCall Request Failed")]
		GroupCall_Request_Failed = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HangupAllCallsParameters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HangupAllCallsResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HangupAllCallsResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HangupAllCallsResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="All Calls Hungup")]
		All_Calls_Hungup = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Hangup Call Failed")]
		Hangup_Call_Failed = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HangupCallParameters
	{
		
		/// <summary>
		/// Unique identifier of the call (when established); this parameter is mutually exclusive with RequestUUID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CallUUID { get; set; }
		
		/// <summary>
		/// Unique identifier of the API request (when the call is not established yet); this parameter is mutually exclusive with CallUUID
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string RequestUUID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HangupCallResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public HangupCallResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HangupCallResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Hangup Call Executed")]
		Hangup_Call_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CallUUID or RequestUUID Parameter must be present")]
		CallUUID_or_RequestUUID_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Both CallUUID and RequestUUID Parameters cannot be present")]
		Both_CallUUID_and_RequestUUID_Parameters_cannot_be_present = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Hangup Call Failed")]
		Hangup_Call_Failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlayParameters
	{
		
		/// <summary>
		/// Unique identifier of the call to play media into
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallUUID { get; set; }
		
		/// <summary>
		/// Call leg(s) for which the media will be played; `aleg` refers to the initial call leg, `bleg` refers to the bridged call leg, if applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<PlayParametersLegs> Legs { get; set; }
		
		/// <summary>
		/// Maximum amount of time (in seconds) to playback the media
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Loops the media file(s) indefinitely
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Loop { get; set; }
		
		/// <summary>
		/// Whether the media should be mixed with the call's audio stream
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Mix { get; set; }
		
		/// <summary>
		/// Comma separated list of file paths/URIs to be played
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Sounds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PlayParametersLegs
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		aleg = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bleg = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		both = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlayResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PlayResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PlayResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Play Executed")]
		Play_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CallUUID Parameter Missing")]
		CallUUID_Parameter_Missing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sounds Parameter Missing")]
		Sounds_Parameter_Missing = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Legs Parameter is Invalid")]
		Legs_Parameter_is_Invalid = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Length Parameter must be a positive integer")]
		Length_Parameter_must_be_a_positive_integer = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sounds Parameter is Invalid")]
		Sounds_Parameter_is_Invalid = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Play Failed -- Call not found")]
		Play_Failed_MinusMinus_Call_not_found = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Play Failed")]
		Play_Failed = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlayStopParameters
	{
		
		/// <summary>
		/// Unique identifier of the call
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallUUID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PlayStopResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PlayStopResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PlayStopResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PlayStop Executed")]
		PlayStop_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CallUUID Parameter Missing")]
		CallUUID_Parameter_Missing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PlayStop Failed -- Call not found")]
		PlayStop_Failed_MinusMinus_Call_not_found = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PlayStop Failed")]
		PlayStop_Failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecordStartParameters
	{
		
		/// <summary>
		/// Unique identifier of the call to be recorded
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string CallUUID { get; set; }
		
		/// <summary>
		/// File format (extension)
		/// </summary>
		[System.ComponentModel.DefaultValue(ConferenceRecordStartParametersFileFormat.mp3)]
		[System.Runtime.Serialization.DataMember()]
		public ConferenceRecordStartParametersFileFormat FileFormat { get; set; } = ConferenceRecordStartParametersFileFormat.mp3;
		
		/// <summary>
		/// Recording file name (without extension); if empty, a timestamp based file name will be generated
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember()]
		public string FileName { get; set; } = "";
		
		/// <summary>
		/// Directory path/URI where the recording file will be saved
		/// </summary>
		[System.ComponentModel.DefaultValue("")]
		[System.Runtime.Serialization.DataMember()]
		public string FilePath { get; set; } = "";
		
		/// <summary>
		/// Maximum recording length, in seconds
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> TimeLimit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecordStartResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecordStartResponseMessage Message { get; set; }
		
		/// <summary>
		/// Directory path/URI where the recording file will be saved
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecordFile { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecordStartResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RecordStart Executed")]
		RecordStart_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CallUUID Parameter must be present")]
		CallUUID_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FileFormat Parameter must be")]
		FileFormat_Parameter_must_be = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RecordStart Failed: invalid TimeLimit")]
		RecordStart_Failed_invalid_TimeLimit = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RecordStart Failed -- Call not found")]
		RecordStart_Failed_MinusMinus_Call_not_found = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RecordStart Failed")]
		RecordStart_Failed = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecordStopParameters
	{
		
		/// <summary>
		/// Unique identifier of the call
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallUUID { get; set; }
		
		/// <summary>
		/// Full path to recording file, as returned by RecordStart; `all` shorthand is also available
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RecordFile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecordStopResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public RecordStopResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecordStopResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RecordStop Executed")]
		RecordStop_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CallUUID Parameter must be present")]
		CallUUID_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RecordFile Parameter must be present")]
		RecordFile_Parameter_must_be_present = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RecordStop Failed -- Call not found")]
		RecordStop_Failed_MinusMinus_Call_not_found = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RecordStop Failed")]
		RecordStop_Failed = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScheduleHangupParameters
	{
		
		/// <summary>
		/// Unique identifier of the call
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallUUID { get; set; }
		
		/// <summary>
		/// Time (in seconds) after which the call in question will be hung up
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScheduleHangupResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ScheduleHangupResponseMessage Message { get; set; }
		
		/// <summary>
		/// Unique identifier of the scheduled hangup request (UUIDv4)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchedHangupId { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScheduleHangupResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ScheduleHangup Executed")]
		ScheduleHangup_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CallUUID Parameter must be present")]
		CallUUID_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Time Parameter must be present")]
		Time_Parameter_must_be_present = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Time Parameter must be > 0!")]
		Time_Parameter_must_be_Greater_0Exclamation = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ScheduleHangup Failed -- Call not found")]
		ScheduleHangup_Failed_MinusMinus_Call_not_found = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ScheduleHangup Failed")]
		ScheduleHangup_Failed = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchedulePlayParameters
	{
		
		/// <summary>
		/// Unique identifier of the call to play media into
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallUUID { get; set; }
		
		/// <summary>
		/// Call leg(s) for which the media will be played; `aleg` refers to the initial call leg, `bleg` refers to the bridged call leg, if applicable.
		/// </summary>
		[System.ComponentModel.DefaultValue(PlayParametersLegs.aleg)]
		[System.Runtime.Serialization.DataMember()]
		public PlayParametersLegs Legs { get; set; } = PlayParametersLegs.aleg;
		
		/// <summary>
		/// Maximum amount of time (in seconds) to playback the media
		/// Minimum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// Loops the media file(s) indefinitely
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Loop { get; set; }
		
		/// <summary>
		/// Whether the media should be mixed with the call's audio stream
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Mix { get; set; }
		
		/// <summary>
		/// Comma separated list of file paths/URIs to be played
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Sounds { get; set; }
		
		/// <summary>
		/// Time (in seconds) after which the media will be playedback
		/// Required
		/// Minimum: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(1, System.Int32.MaxValue)]
		public int Time { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SchedulePlayResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SchedulePlayResponseMessage Message { get; set; }
		
		/// <summary>
		/// Unique identifier of the scheduled playback request (UUIDv4)
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SchedPlayId { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SchedulePlayResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Play Executed")]
		Play_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CallUUID Parameter Missing")]
		CallUUID_Parameter_Missing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sounds Parameter Missing")]
		Sounds_Parameter_Missing = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Time Parameter Missing")]
		Time_Parameter_Missing = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Time Parameter must be > 0")]
		Time_Parameter_must_be_Greater_0 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Legs Parameter is Invalid")]
		Legs_Parameter_is_Invalid = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Length Parameter must be a positive integer")]
		Length_Parameter_must_be_a_positive_integer = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sounds Parameter is Invalid")]
		Sounds_Parameter_is_Invalid = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Play Failed -- Call not found")]
		Play_Failed_MinusMinus_Call_not_found = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Play Failed")]
		Play_Failed = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendDigitsParameters
	{
		
		/// <summary>
		/// Unique identifier of the call to send DTMF to
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallUUID { get; set; }
		
		/// <summary>
		/// DTMF tones to be sent; each occurrence of `w` implies a 0.5 seconds delay whereas `W` will apply a whole second delay. To alter the tone duration (by default, 2000ms), append `@` and the length in milliseconds at the end of the string
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Digits { get; set; }
		
		/// <summary>
		/// Call leg(s) to which DTMFs will be sent; `aleg` refers to the initial call leg, `bleg` refers to the bridged call leg, if applicable.
		/// </summary>
		[System.ComponentModel.DefaultValue(PlayParametersLegs.aleg)]
		[System.Runtime.Serialization.DataMember()]
		public PlayParametersLegs Leg { get; set; } = PlayParametersLegs.aleg;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SendDigitsResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SendDigitsResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SendDigitsResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SendDigits Executed")]
		SendDigits_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CallUUID Parameter Missing")]
		CallUUID_Parameter_Missing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Digits Parameter Missing")]
		Digits_Parameter_Missing = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Invalid Leg Parameter")]
		Invalid_Leg_Parameter = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SendDigits Failed -- Call not found")]
		SendDigits_Failed_MinusMinus_Call_not_found = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SendDigits Failed")]
		SendDigits_Failed = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SoundTouchParameters
	{
		
		/// <summary>
		/// Media stream to be altered, incoming or outgoing
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<SoundTouchParametersAudioDirection> AudioDirection { get; set; }
		
		/// <summary>
		/// Unique identifier of the call to send DTMF to
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallUUID { get; set; }
		
		/// <summary>
		/// Adjust the pitch
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Single.MaxValue)]
		public System.Nullable<System.Single> Pitch { get; set; }
		
		/// <summary>
		/// Adjust the pitch in octaves
		/// Minimum: -1
		/// Maximum: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-1, 1)]
		public System.Nullable<System.Single> PitchOctaves { get; set; }
		
		/// <summary>
		/// Adjust the pitch in semitones
		/// Minimum: -14
		/// Maximum: 14
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(-14, 14)]
		public System.Nullable<System.Single> PitchSemiTones { get; set; }
		
		/// <summary>
		/// Adjust the rate
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Single.MaxValue)]
		public System.Nullable<System.Single> Rate { get; set; }
		
		/// <summary>
		/// Adjust the tempo
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.Range(0, System.Single.MaxValue)]
		public System.Nullable<System.Single> Tempo { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SoundTouchParametersAudioDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="in")]
		_in = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="out")]
		_out = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SoundTouchResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SoundTouchResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SoundTouchResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SoundTouch Executed")]
		SoundTouch_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CallUUID Parameter Missing")]
		CallUUID_Parameter_Missing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AudioDirection Parameter Must be 'in' or 'out'")]
		AudioDirection_Parameter_Must_be__in__or__out_ = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PitchSemiTones Parameter must be float")]
		PitchSemiTones_Parameter_must_be_float = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PitchSemiTones Parameter must be between -14 and 14")]
		PitchSemiTones_Parameter_must_be_between_Minus14_and_14 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PitchOctaves Parameter must be float")]
		PitchOctaves_Parameter_must_be_float = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PitchOctaves Parameter must be between -1 and 1")]
		PitchOctaves_Parameter_must_be_between_Minus1_and_1 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pitch Parameter must be float")]
		Pitch_Parameter_must_be_float = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Pitch Parameter must be > 0")]
		Pitch_Parameter_must_be_Greater_0 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Rate Parameter must be float")]
		Rate_Parameter_must_be_float = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Rate Parameter must be > 0")]
		Rate_Parameter_must_be_Greater_0 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tempo Parameter must be float")]
		Tempo_Parameter_must_be_float = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tempo Parameter must be > 0")]
		Tempo_Parameter_must_be_Greater_0 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SoundTouch Failed -- Call not found")]
		SoundTouch_Failed_MinusMinus_Call_not_found = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SoundTouch Failed")]
		SoundTouch_Failed = 14,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SoundTouchStopParameters
	{
		
		/// <summary>
		/// Unique identifier of the call
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallUUID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SoundTouchStopResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SoundTouchStopResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SoundTouchStopResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SoundTouchStop Executed")]
		SoundTouchStop_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CallUUID Parameter Missing")]
		CallUUID_Parameter_Missing = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SoundTouchStop Failed -- Call not found")]
		SoundTouchStop_Failed_MinusMinus_Call_not_found = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SoundTouchStop Failed")]
		SoundTouchStop_Failed = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransferCallParameters
	{
		
		/// <summary>
		/// Unique identifier of the call
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CallUUID { get; set; }
		
		/// <summary>
		/// Absolute URL which will return the updated RestXML flow
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TransferCallResponse
	{
		
		/// <summary>
		/// Response message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public TransferCallResponseMessage Message { get; set; }
		
		/// <summary>
		/// Whether the request was successful or not
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public bool Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TransferCallResponseMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Transfer Call Executed")]
		Transfer_Call_Executed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CallUUID Parameter must be present")]
		CallUUID_Parameter_must_be_present = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Url Parameter must be present")]
		Url_Parameter_must_be_present = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Url is not Valid")]
		Url_is_not_Valid = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Transfer Call Failed -- Call not found")]
		Transfer_Call_Failed_MinusMinus_Call_not_found = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Transfer Call Failed")]
		Transfer_Call_Failed = 5,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// /v0.1/HangupAllCalls/
		/// Hangs up all established calls
		/// CallPost v0.1/HangupAllCalls/
		/// </summary>
		/// <returns>Response</returns>
		public async Task<HangupAllCallsResponse> CallPostAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.1/HangupAllCalls/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<HangupAllCallsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
