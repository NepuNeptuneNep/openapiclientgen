//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Access Approval service account related to a project/folder/organization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessApprovalServiceAccount
	{
		
		/// <summary>
		/// Email address of the service account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountEmail")]
		public string AccountEmail { get; set; }
		
		/// <summary>
		/// The resource name of the Access Approval service account. Format is one of: * "projects/{project}/serviceAccount" * "folders/{folder}/serviceAccount" * "organizations/{organization}/serviceAccount"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Settings on a Project/Folder/Organization related to Access Approval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessApprovalSettings
	{
		
		/// <summary>
		/// The asymmetric crypto key version to use for signing approval requests. Empty active_key_version indicates that a Google-managed key should be used for signing. This property will be ignored if set by an ancestor of this resource, and new non-empty values may not be set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeKeyVersion")]
		public string ActiveKeyVersion { get; set; }
		
		/// <summary>
		/// Output only. This field is read only (not settable via UpdateAccessApprovalSettings method). If the field is true, that indicates that an ancestor of this Project or Folder has set active_key_version (this field will always be unset for the organization since organizations do not have ancestors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ancestorHasActiveKeyVersion")]
		public System.Nullable<System.Boolean> AncestorHasActiveKeyVersion { get; set; }
		
		/// <summary>
		/// Output only. This field is read only (not settable via UpdateAccessApprovalSettings method). If the field is true, that indicates that at least one service is enrolled for Access Approval in one or more ancestors of the Project or Folder (this field will always be unset for the organization since organizations do not have ancestors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrolledAncestor")]
		public System.Nullable<System.Boolean> EnrolledAncestor { get; set; }
		
		/// <summary>
		/// A list of Google Cloud Services for which the given resource has Access Approval enrolled. Access requests for the resource given by name against any of these services contained here will be required to have explicit approval. If name refers to an organization, enrollment can be done for individual services. If name refers to a folder or project, enrollment can only be done on an all or nothing basis. If a cloud_product is repeated in this list, the first entry will be honored and all following entries will be discarded. A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrolledServices")]
		public EnrolledService[] EnrolledServices { get; set; }
		
		/// <summary>
		/// Output only. This field is read only (not settable via UpdateAccessApprovalSettings method). If the field is true, that indicates that there is some configuration issue with the active_key_version configured at this level in the resource hierarchy (e.g. it doesn't exist or the Access Approval service account doesn't have the correct permissions on it, etc.) This key version is not necessarily the effective key version at this level, as key versions are inherited top-down.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invalidKeyVersion")]
		public System.Nullable<System.Boolean> InvalidKeyVersion { get; set; }
		
		/// <summary>
		/// The resource name of the settings. Format is one of: * "projects/{project}/accessApprovalSettings" * "folders/{folder}/accessApprovalSettings" * "organizations/{organization}/accessApprovalSettings"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A list of email addresses to which notifications relating to approval requests should be sent. Notifications relating to a resource will be sent to all emails in the settings of ancestor resources of that resource. A maximum of 50 email addresses are allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationEmails")]
		public string[] NotificationEmails { get; set; }
		
		/// <summary>
		/// Optional. A pubsub topic to which notifications relating to approval requests should be sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationPubsubTopic")]
		public string NotificationPubsubTopic { get; set; }
		
		/// <summary>
		/// This preference is communicated to Google personnel when sending an approval request but can be overridden if necessary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferNoBroadApprovalRequests")]
		public System.Nullable<System.Boolean> PreferNoBroadApprovalRequests { get; set; }
		
		/// <summary>
		/// This preference is shared with Google personnel, but can be overridden if said personnel deems necessary. The approver ultimately can set the expiration at approval time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferredRequestExpirationDays")]
		public System.Nullable<System.Int32> PreferredRequestExpirationDays { get; set; }
	}
	
	/// <summary>
	/// Represents the enrollment of a cloud resource into a specific service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnrolledService
	{
		
		/// <summary>
		/// The product for which Access Approval will be enrolled. Allowed values are listed below (case-sensitive): * all * GA * App Engine * Artifact Registry * BigQuery * Certificate Authority Service * Cloud Bigtable * Cloud Key Management Service * Compute Engine * Cloud Composer * Cloud Dataflow * Cloud Dataproc * Cloud DLP * Cloud EKM * Cloud Firestore * Cloud HSM * Cloud Identity and Access Management * Cloud Logging * Cloud NAT * Cloud Pub/Sub * Cloud Spanner * Cloud SQL * Cloud Storage * Eventarc * Google Kubernetes Engine * Organization Policy Serivice * Persistent Disk * Resource Manager * Secret Manager * Speaker ID Note: These values are supported as input for legacy purposes, but will not be returned from the API. * all * ga-only * appengine.googleapis.com * artifactregistry.googleapis.com * bigquery.googleapis.com * bigtable.googleapis.com * container.googleapis.com * cloudkms.googleapis.com * cloudresourcemanager.googleapis.com * cloudsql.googleapis.com * compute.googleapis.com * dataflow.googleapis.com * dataproc.googleapis.com * dlp.googleapis.com * iam.googleapis.com * logging.googleapis.com * orgpolicy.googleapis.com * pubsub.googleapis.com * spanner.googleapis.com * secretmanager.googleapis.com * speakerid.googleapis.com * storage.googleapis.com Calls to UpdateAccessApprovalSettings using 'all' or any of the XXX.googleapis.com will be translated to the associated product name ('all', 'App Engine', etc.). Note: 'all' will enroll the resource in all products supported at both 'GA' and 'Preview' levels. More information about levels of support is available at https://cloud.google.com/access-approval/docs/supported-services
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cloudProduct")]
		public string CloudProduct { get; set; }
		
		/// <summary>
		/// The enrollment level of the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enrollmentLevel")]
		public System.Nullable<EnrolledServiceEnrollmentLevel> EnrollmentLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EnrolledServiceEnrollmentLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENROLLMENT_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BLOCK_ALL = 1,
	}
	
	/// <summary>
	/// Home office and physical location of the principal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessLocations
	{
		
		/// <summary>
		/// The "home office" location of the principal. A two-letter country code (ISO 3166-1 alpha-2), such as "US", "DE" or "GB" or a region code. In some limited situations Google systems may refer refer to a region code instead of a country code. Possible Region Codes: * ASI: Asia * EUR: Europe * OCE: Oceania * AFR: Africa * NAM: North America * SAM: South America * ANT: Antarctica * ANY: Any location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalOfficeCountry")]
		public string PrincipalOfficeCountry { get; set; }
		
		/// <summary>
		/// Physical location of the principal at the time of the access. A two-letter country code (ISO 3166-1 alpha-2), such as "US", "DE" or "GB" or a region code. In some limited situations Google systems may refer refer to a region code instead of a country code. Possible Region Codes: * ASI: Asia * EUR: Europe * OCE: Oceania * AFR: Africa * NAM: North America * SAM: South America * ANT: Antarctica * ANY: Any location
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="principalPhysicalLocationCountry")]
		public string PrincipalPhysicalLocationCountry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessReason
	{
		
		/// <summary>
		/// More detail about certain reason types. See comments for each type above.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Type of access justification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AccessReasonType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccessReasonType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_INITIATED_SUPPORT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_INITIATED_SERVICE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_INITIATED_REVIEW = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_DATA_REQUEST = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_RESPONSE_TO_PRODUCTION_ALERT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOUD_INITIATED_ACCESS = 6,
	}
	
	/// <summary>
	/// A request for the customer to approve access to a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApprovalRequest
	{
		
		/// <summary>
		/// A decision that has been made to approve access to a resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approve")]
		public ApproveDecision Approve { get; set; }
		
		/// <summary>
		/// A decision that has been made to dismiss an approval request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dismiss")]
		public DismissDecision Dismiss { get; set; }
		
		/// <summary>
		/// The resource name of the request. Format is "{projects|folders|organizations}/{id}/approvalRequests/{approval_request}".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The time at which approval was requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestTime")]
		public string RequestTime { get; set; }
		
		/// <summary>
		/// The requested access duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedDuration")]
		public string RequestedDuration { get; set; }
		
		/// <summary>
		/// The original requested expiration for the approval. Calculated by adding the requested_duration to the request_time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedExpiration")]
		public string RequestedExpiration { get; set; }
		
		/// <summary>
		/// Home office and physical location of the principal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedLocations")]
		public AccessLocations RequestedLocations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedReason")]
		public AccessReason RequestedReason { get; set; }
		
		/// <summary>
		/// The resource for which approval is being requested. The format of the resource name is defined at https://cloud.google.com/apis/design/resource_names. The resource name here may either be a "full" resource name (e.g. "//library.googleapis.com/shelves/shelf1/books/book2") or a "relative" resource name (e.g. "shelves/shelf1/books/book2") as described in the resource name specification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedResourceName")]
		public string RequestedResourceName { get; set; }
		
		/// <summary>
		/// The properties associated with the resource of the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedResourceProperties")]
		public ResourceProperties RequestedResourceProperties { get; set; }
	}
	
	/// <summary>
	/// A decision that has been made to approve access to a resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApproveDecision
	{
		
		/// <summary>
		/// The time at which approval was granted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approveTime")]
		public string ApproveTime { get; set; }
		
		/// <summary>
		/// True when the request has been auto-approved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoApproved")]
		public System.Nullable<System.Boolean> AutoApproved { get; set; }
		
		/// <summary>
		/// The time at which the approval expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
		
		/// <summary>
		/// If set, denotes the timestamp at which the approval is invalidated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invalidateTime")]
		public string InvalidateTime { get; set; }
		
		/// <summary>
		/// Information about the digital signature of the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signatureInfo")]
		public SignatureInfo SignatureInfo { get; set; }
	}
	
	/// <summary>
	/// Information about the digital signature of the resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SignatureInfo
	{
		
		/// <summary>
		/// The resource name of the customer CryptoKeyVersion used for signing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customerKmsKeyVersion")]
		public string CustomerKmsKeyVersion { get; set; }
		
		/// <summary>
		/// The hashing algorithm used for signature verification. It will only be present in the case of Google managed keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleKeyAlgorithm")]
		public System.Nullable<SignatureInfoGoogleKeyAlgorithm> GoogleKeyAlgorithm { get; set; }
		
		/// <summary>
		/// The public key for the Google default signing, encoded in PEM format. The signature was created using a private key which may be verified using this public key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googlePublicKeyPem")]
		public string GooglePublicKeyPem { get; set; }
		
		/// <summary>
		/// The ApprovalRequest that is serialized without the SignatureInfo message field. This data is used with the hashing algorithm to generate the digital signature, and it can be used for signature verification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serializedApprovalRequest")]
		public string SerializedApprovalRequest { get; set; }
		
		/// <summary>
		/// The digital signature.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public string Signature { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SignatureInfoGoogleKeyAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRYPTO_KEY_VERSION_ALGORITHM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_SYMMETRIC_ENCRYPTION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES_128_GCM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES_256_GCM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES_128_CBC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES_256_CBC = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES_128_CTR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AES_256_CTR = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_SIGN_PSS_2048_SHA256 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_SIGN_PSS_3072_SHA256 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_SIGN_PSS_4096_SHA256 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_SIGN_PSS_4096_SHA512 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_SIGN_PKCS1_2048_SHA256 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_SIGN_PKCS1_3072_SHA256 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_SIGN_PKCS1_4096_SHA256 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_SIGN_PKCS1_4096_SHA512 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_SIGN_RAW_PKCS1_2048 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_SIGN_RAW_PKCS1_3072 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_SIGN_RAW_PKCS1_4096 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_DECRYPT_OAEP_2048_SHA256 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_DECRYPT_OAEP_3072_SHA256 = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_DECRYPT_OAEP_4096_SHA256 = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_DECRYPT_OAEP_4096_SHA512 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_DECRYPT_OAEP_2048_SHA1 = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_DECRYPT_OAEP_3072_SHA1 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA_DECRYPT_OAEP_4096_SHA1 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC_SIGN_P256_SHA256 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC_SIGN_P384_SHA384 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EC_SIGN_SECP256K1_SHA256 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HMAC_SHA256 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HMAC_SHA1 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HMAC_SHA384 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HMAC_SHA512 = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HMAC_SHA224 = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_SYMMETRIC_ENCRYPTION = 34,
	}
	
	/// <summary>
	/// A decision that has been made to dismiss an approval request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DismissDecision
	{
		
		/// <summary>
		/// The time at which the approval request was dismissed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dismissTime")]
		public string DismissTime { get; set; }
		
		/// <summary>
		/// This field will be true if the ApprovalRequest was implicitly dismissed due to inaction by the access approval approvers (the request is not acted on by the approvers before the exiration time).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="implicit")]
		public System.Nullable<System.Boolean> Implicit { get; set; }
	}
	
	/// <summary>
	/// The properties associated with the resource of the request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceProperties
	{
		
		/// <summary>
		/// Whether an approval will exclude the descendants of the resource being requested.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludesDescendants")]
		public System.Nullable<System.Boolean> ExcludesDescendants { get; set; }
	}
	
	/// <summary>
	/// Request to approve an ApprovalRequest.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApproveApprovalRequestMessage
	{
		
		/// <summary>
		/// The expiration time of this approval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expireTime")]
		public string ExpireTime { get; set; }
	}
	
	/// <summary>
	/// Request to dismiss an approval request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DismissApprovalRequestMessage
	{
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Empty
	{
	}
	
	/// <summary>
	/// Request to invalidate an existing approval.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidateApprovalRequestMessage
	{
	}
	
	/// <summary>
	/// Response to listing of ApprovalRequest objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListApprovalRequestsResponse
	{
		
		/// <summary>
		/// Approval request details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalRequests")]
		public ApprovalRequest[] ApprovalRequests { get; set; }
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Deletes the settings associated with a project, folder, or organization. This will have the effect of disabling Access Approval for the project, folder, or organization, but only if all ancestors also have Access Approval disabled. If Access Approval is enabled at a higher level of the hierarchy, then Access Approval will still be enabled at this level as the settings are inherited.
		/// Accessapproval_projects_deleteAccessApprovalSettings v1/{name}
		/// </summary>
		/// <param name="name">Name of the AccessApprovalSettings to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Accessapproval_projects_deleteAccessApprovalSettingsAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Empty>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an approval request. Returns NOT_FOUND if the request does not exist.
		/// Accessapproval_projects_approvalRequests_get v1/{name}
		/// </summary>
		/// <param name="name">The name of the approval request to retrieve. Format: "{projects|folders|organizations}/{id}/approvalRequests/{approval_request}"</param>
		/// <returns>Successful response</returns>
		public async Task<ApprovalRequest> Accessapproval_projects_approvalRequests_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApprovalRequest>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the settings associated with a project, folder, or organization. Settings to update are determined by the value of field_mask.
		/// Accessapproval_projects_updateAccessApprovalSettings v1/{name}
		/// </summary>
		/// <param name="name">The resource name of the settings. Format is one of: * "projects/{project}/accessApprovalSettings" * "folders/{folder}/accessApprovalSettings" * "organizations/{organization}/accessApprovalSettings"</param>
		/// <param name="updateMask">The update mask applies to the settings. Only the top level fields of AccessApprovalSettings (notification_emails & enrolled_services) are supported. For each field, if it is included, the currently stored value will be entirely overwritten with the value of the field passed in this request. For the `FieldMask` definition, see https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask If this field is left unset, only the notification_emails field will be updated.</param>
		/// <returns>Successful response</returns>
		public async Task<AccessApprovalSettings> Accessapproval_projects_updateAccessApprovalSettingsAsync(string name, string updateMask, AccessApprovalSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AccessApprovalSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Approves a request and returns the updated ApprovalRequest. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state.
		/// Accessapproval_projects_approvalRequests_approve v1/{name}:approve
		/// </summary>
		/// <param name="name">Name of the approval request to approve.</param>
		/// <returns>Successful response</returns>
		public async Task<ApprovalRequest> Accessapproval_projects_approvalRequests_approveAsync(string name, ApproveApprovalRequestMessage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":approve";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApprovalRequest>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Dismisses a request. Returns the updated ApprovalRequest. NOTE: This does not deny access to the resource if another request has been made and approved. It is equivalent in effect to ignoring the request altogether. Returns NOT_FOUND if the request does not exist. Returns FAILED_PRECONDITION if the request exists but is not in a pending state.
		/// Accessapproval_projects_approvalRequests_dismiss v1/{name}:dismiss
		/// </summary>
		/// <param name="name">Name of the ApprovalRequest to dismiss.</param>
		/// <returns>Successful response</returns>
		public async Task<ApprovalRequest> Accessapproval_projects_approvalRequests_dismissAsync(string name, DismissApprovalRequestMessage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":dismiss";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApprovalRequest>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Invalidates an existing ApprovalRequest. Returns the updated ApprovalRequest. NOTE: This does not deny access to the resource if another request has been made and approved. It only invalidates a single approval. Returns FAILED_PRECONDITION if the request exists but is not in an approved state.
		/// Accessapproval_projects_approvalRequests_invalidate v1/{name}:invalidate
		/// </summary>
		/// <param name="name">Name of the ApprovalRequest to invalidate.</param>
		/// <returns>Successful response</returns>
		public async Task<ApprovalRequest> Accessapproval_projects_approvalRequests_invalidateAsync(string name, InvalidateApprovalRequestMessage requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name))+":invalidate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ApprovalRequest>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists approval requests associated with a project, folder, or organization. Approval requests can be filtered by state (pending, active, dismissed). The order is reverse chronological.
		/// Accessapproval_projects_approvalRequests_list v1/{parent}/approvalRequests
		/// </summary>
		/// <param name="parent">The parent resource. This may be "projects/{project}", "folders/{folder}", or "organizations/{organization}".</param>
		/// <param name="filter">A filter on the type of approval requests to retrieve. Must be one of the following values: * [not set]: Requests that are pending or have active approvals. * ALL: All requests. * PENDING: Only pending requests. * ACTIVE: Only active (i.e. currently approved) requests. * DISMISSED: Only requests that have been dismissed, or requests that are not approved and past expiration. * EXPIRED: Only requests that have been approved, and the approval has expired. * HISTORY: Active, dismissed and expired requests.</param>
		/// <param name="pageSize">Requested page size.</param>
		/// <param name="pageToken">A token identifying the page of results to return.</param>
		/// <returns>Successful response</returns>
		public async Task<ListApprovalRequestsResponse> Accessapproval_projects_approvalRequests_listAsync(string parent, string filter, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/approvalRequests&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListApprovalRequestsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
