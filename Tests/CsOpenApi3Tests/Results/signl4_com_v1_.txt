//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlertAnnotationInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="annotationType")]
		public System.Nullable<System.Int32> AnnotationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlertAttachment
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="encoding")]
		public Encoding Encoding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Encoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlertAttachmentInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlertAuditReportFileInfo
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlertCounts
	{
		
		[System.Runtime.Serialization.DataMember(Name="acked")]
		public System.Nullable<System.Int64> Acked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closed")]
		public System.Nullable<System.Int64> Closed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unhandled")]
		public System.Nullable<System.Int64> Unhandled { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlertDeliveryStatusCodes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_22 = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_24 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_30 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_31 = 31,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlertDeliveryStatusInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public AlertDeliveryStatusCodes StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="users")]
		public UserDeliveryStatusInfo[] Users { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserDeliveryStatusInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public UserDeliveryStatusInfoCodes StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UserDeliveryStatusInfoCodes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_24 = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_26 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_30 = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_31 = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_32 = 32,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlertFilterActions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlertFilterModes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlertFilterPublic
	{
		
		[System.Runtime.Serialization.DataMember(Name="alertIds")]
		public string[] AlertIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alertsAfterId")]
		public string AlertsAfterId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categoryIds")]
		public string[] CategoryIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public PagedResultsPublicContinuationToken ContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxCreationDate")]
		public System.Nullable<System.DateTimeOffset> MaxCreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minCreationDate")]
		public System.Nullable<System.DateTimeOffset> MinCreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedSince")]
		public System.Nullable<System.DateTimeOffset> ModifiedSince { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showPersonalHiddenCategories")]
		public System.Nullable<System.Boolean> ShowPersonalHiddenCategories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusCodes")]
		public AlertStatusCodes StatusCodes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="textToSearch")]
		public string TextToSearch { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagedResultsPublicContinuationToken
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextPartitionKey")]
		public string NextPartitionKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextRowKey")]
		public string NextRowKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextTableName")]
		public string NextTableName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlertStatusCodes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_16 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_32 = 32,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlertHistoryInfoDetailed
	{
		
		[System.Runtime.Serialization.DataMember(Name="acknowledged")]
		public System.Nullable<System.DateTimeOffset> Acknowledged { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="acknowledgedgements")]
		public string[] Acknowledgedgements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closed")]
		public System.Nullable<System.DateTimeOffset> Closed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closedBy")]
		public string ClosedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="historyEntries")]
		public AlertHistoryInfoEntry[] HistoryEntries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlertHistoryInfoEntry
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AlertHistoryInfoUserEntryType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlertHistoryInfoUserEntryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_7 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlertInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public AlertAnnotationInfo[] Annotations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public AlertAttachment[] Attachments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventSourceId")]
		public string EventSourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventSourceType")]
		public EventSourceTypes EventSourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flags")]
		public System.Nullable<System.Int32> Flags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="history")]
		public AlertHistoryInfoDetailed History { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public EventParameterInfo[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public AlertSeverities Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertStatusCodes Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventSourceTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventParameterInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EventParameterTypes Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventParameterTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_11 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_12 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_13 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_14 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_15 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_16 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_17 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_100 = 100,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlertSeverities
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlertNotificationInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channelType")]
		public AlertNotificationInfoChannelType ChannelType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceName")]
		public string DeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdate")]
		public System.Nullable<System.DateTimeOffset> LastUpdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageStatus")]
		public AlertNotificationInfoMessageStatus MessageStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userStatus")]
		public AlertNotificationInfoUserStatus UserStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlertNotificationInfoChannelType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_16 = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlertNotificationInfoMessageStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_9 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10 = 10,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlertNotificationInfoUserStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlertReport
	{
		
		[System.Runtime.Serialization.DataMember(Name="last24Hours")]
		public AlertCounts Last24Hours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamCurrentDuty")]
		public AlertCounts TeamCurrentDuty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamLastDuty")]
		public AlertCounts TeamLastDuty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userLastDutyChange")]
		public AlertCounts UserLastDutyChange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlertResponseModes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlertSettings
	{
		
		[System.Runtime.Serialization.DataMember(Name="filterAction")]
		public AlertFilterActions FilterAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filterMode")]
		public AlertFilterModes FilterMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="optOutMode")]
		public TeamCategoryOptOutModes OptOutMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="persistentNotificicationMode")]
		public PersistentNotificationModes PersistentNotificicationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseMode")]
		public AlertResponseModes ResponseMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="responseTime")]
		public System.Nullable<System.Int32> ResponseTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TeamCategoryOptOutModes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PersistentNotificationModes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryAugmentation
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CategoryAugmentationType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CategoryAugmentationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="augmentations")]
		public CategoryAugmentation[] Augmentations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageName")]
		public string ImageName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDefault")]
		public System.Nullable<System.Boolean> IsDefault { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywordMatching")]
		public KeywordMatchingType KeywordMatching { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastMatch")]
		public System.Nullable<System.DateTimeOffset> LastMatch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public CategoryInfoOptions Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="order")]
		public System.Nullable<System.Int32> Order { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum KeywordMatchingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CategoryInfoOptions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategoryMetrics
	{
		
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last24Hours")]
		public System.Nullable<System.Int64> Last24Hours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastAlert")]
		public System.Nullable<System.DateTimeOffset> LastAlert { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriberCount")]
		public System.Nullable<System.Int32> SubscriberCount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CategorySubscriptionInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CategorySubscriptionStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CategorySubscriptionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeAlertStatusFilterInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="categoryIds")]
		public string[] CategoryIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxDate")]
		public System.Nullable<System.DateTimeOffset> MaxDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minDate")]
		public System.Nullable<System.DateTimeOffset> MinDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public StatusChangeScope Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamIds")]
		public string[] TeamIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StatusChangeScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeAlertStatusInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangeAlertStatusMultipleInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="alertIds")]
		public string[] AlertIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelPriceInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="smsPerMessage")]
		public System.Nullable<System.Int32> SmsPerMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="voicePerMinute")]
		public System.Nullable<System.Int32> VoicePerMinute { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ChannelTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_16 = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactAddressInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public ChannelTypes Channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="device")]
		public Device Device { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastUpdated")]
		public System.Nullable<System.DateTimeOffset> LastUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public System.Nullable<System.Int32> Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Device
	{
		
		[System.Runtime.Serialization.DataMember(Name="appVersion")]
		public string AppVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deviceId")]
		public string DeviceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		public string OsVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ringtone")]
		public string Ringtone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ringtoneDisabled")]
		public System.Nullable<System.Boolean> RingtoneDisabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DeviceType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRangeInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public System.Nullable<System.DateTimeOffset> From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="to")]
		public System.Nullable<System.DateTimeOffset> To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DutyAuditReportFileInfo
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DutySummaryInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="dutyEnd")]
		public System.Nullable<System.DateTimeOffset> DutyEnd { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dutyId")]
		public string DutyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dutyStart")]
		public System.Nullable<System.DateTimeOffset> DutyStart { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorResponseContent
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ErrorResponseContentBase[] Errors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorResponseContentBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public PagedResultsPublicContinuationToken ContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventStatusCode")]
		public EventStatusCodes EventStatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxCreationDate")]
		public System.Nullable<System.DateTimeOffset> MaxCreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="minCreationDate")]
		public System.Nullable<System.DateTimeOffset> MinCreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedSince")]
		public System.Nullable<System.DateTimeOffset> ModifiedSince { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="textToSearch")]
		public string TextToSearch { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventStatusCodes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1000 = 1000,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventSeverities
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EventSourceEndpointInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastEventRaised")]
		public System.Nullable<System.DateTimeOffset> LastEventRaised { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public EventSourceEndpointTypes Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EventSourceEndpointTypes
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InventoryScriptInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public object Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ScriptDescriptionData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventPattern")]
		public object EventPattern { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptId")]
		public string ScriptId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptLocalizationDetails")]
		public ScriptLocalizationDetail[] ScriptLocalizationDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptName")]
		public string ScriptName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public string Visibility { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScriptDescriptionData
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptType")]
		public string ScriptType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shortDescription")]
		public string ShortDescription { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScriptLocalizationDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="configMetadata")]
		public object ConfigMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ScriptDescriptionData Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvitedUserInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isInvite")]
		public System.Nullable<System.Boolean> IsInvite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mail")]
		public string Mail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleId")]
		public string RoleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OverviewAlert
	{
		
		[System.Runtime.Serialization.DataMember(Name="alertDeliveryStatus")]
		public AlertDeliveryStatusInfo AlertDeliveryStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public AlertAnnotationInfo[] Annotations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public string EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flags")]
		public System.Nullable<System.Int32> Flags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="historyDetailed")]
		public AlertHistoryInfoDetailed HistoryDetailed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requiredAcknowledgements")]
		public System.Nullable<System.Int32> RequiredAcknowledgements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertStatusCodes Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OverviewAlertPagedResultsPublic
	{
		
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public PagedResultsPublicContinuationToken ContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public OverviewAlert[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OverviewEvent
	{
		
		[System.Runtime.Serialization.DataMember(Name="acknowledgedAlerts")]
		public string[] AcknowledgedAlerts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="alertId")]
		public string AlertId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="categoryId")]
		public string CategoryId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closedAlerts")]
		public string[] ClosedAlerts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="creationTime")]
		public System.Nullable<System.DateTimeOffset> CreationTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventSourceType")]
		public EventSourceTypes EventSourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventStatus")]
		public EventStatusCodes EventStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public EventSeverities Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OverviewEventPagedResultsPublic
	{
		
		[System.Runtime.Serialization.DataMember(Name="continuationToken")]
		public PagedResultsPublicContinuationToken ContinuationToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public OverviewEvent[] Results { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrepaidBalanceInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="balance")]
		public System.Nullable<System.Int32> Balance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestTopUp")]
		public System.Nullable<System.DateTimeOffset> LatestTopUp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pendingTransaction")]
		public System.Nullable<System.Boolean> PendingTransaction { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrepaidSettingsInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="topUpAmount")]
		public System.Nullable<System.Int32> TopUpAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topUpEnabled")]
		public System.Nullable<System.Boolean> TopUpEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topUpLimit")]
		public System.Nullable<System.Int32> TopUpLimit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrepaidTransactionInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoTopUpId")]
		public string AutoTopUpId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="created")]
		public System.Nullable<System.DateTimeOffset> Created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="credits")]
		public System.Nullable<System.Int32> Credits { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modified")]
		public System.Nullable<System.DateTimeOffset> Modified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="packageCode")]
		public string PackageCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RaiseAlertInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="attachments")]
		public AlertAttachment[] Attachments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public string Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flags")]
		public System.Nullable<System.Int32> Flags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public EventParameterInfo[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public AlertSeverities Severity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.DateTimeOffset> End { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public System.Nullable<System.Int32> Options { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.DateTimeOffset> Start { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScriptInstanceCustomUserData
	{
		
		[System.Runtime.Serialization.DataMember(Name="customScriptDescription")]
		public string CustomScriptDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customScriptName")]
		public string CustomScriptName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptId")]
		public string ScriptId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScriptInstanceDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public object Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customScriptDescription")]
		public string CustomScriptDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customScriptName")]
		public string CustomScriptName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventPattern")]
		public object EventPattern { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="instanceId")]
		public string InstanceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runtimeInformation")]
		public ScriptInstanceInfoRuntimeInformationModel RuntimeInformation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptId")]
		public string ScriptId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scriptName")]
		public string ScriptName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScriptInstanceInfoRuntimeInformationModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ScriptInstanceInfoRuntimeStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ScriptInstanceInfoRuntimeStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_Minus1 = -1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StringItemsWrapper
	{
		
		[System.Runtime.Serialization.DataMember(Name="items")]
		public string[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionFeature
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<System.Int32> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="branchId")]
		public string BranchId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalAccountId")]
		public string ExternalAccountId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextBilling")]
		public System.Nullable<System.DateTimeOffset> NextBilling { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ownerId")]
		public string OwnerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="planCode")]
		public string PlanCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="planState")]
		public System.Nullable<System.Int32> PlanState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="referralEnabled")]
		public System.Nullable<System.Boolean> ReferralEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<System.Int32> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubscriptionProfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamDutySummaryInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="dutyAssistEnabled")]
		public System.Nullable<System.Boolean> DutyAssistEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dutySummaries")]
		public DutySummaryInfo[] DutySummaries { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="memberIds")]
		public string[] MemberIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamProfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TeamSetupProgress
	{
		
		[System.Runtime.Serialization.DataMember(Name="completedSteps")]
		public string[] CompletedSteps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdatePasswordInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="currentPassword")]
		public string CurrentPassword { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="newPassword")]
		public string NewPassword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserDutyInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="lastStatusChange")]
		public System.Nullable<System.DateTimeOffset> LastStatusChange { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onDuty")]
		public System.Nullable<System.Boolean> OnDuty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onManagerDuty")]
		public System.Nullable<System.Boolean> OnManagerDuty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overdue")]
		public System.Nullable<System.Boolean> Overdue { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserImage
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentDisposition")]
		public string ContentDisposition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentEncoding")]
		public string ContentEncoding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorIndex")]
		public System.Nullable<System.Int32> ColorIndex { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contactAddresses")]
		public ContactAddressInfo[] ContactAddresses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dutyInfo")]
		public UserDutyInfo DutyInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDeactivated")]
		public System.Nullable<System.Boolean> IsDeactivated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isInvite")]
		public System.Nullable<System.Boolean> IsInvite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mail")]
		public string Mail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleId")]
		public string RoleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userImageLastModified")]
		public System.Nullable<System.DateTimeOffset> UserImageLastModified { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserInvitationInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="inviterId")]
		public string InviterId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userMail")]
		public string UserMail { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserInvitationResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<System.Int32> ErrorCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invitedUser")]
		public InvitedUserInfo InvitedUser { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Boolean> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserInvite
	{
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleId")]
		public string RoleId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserLicenseInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="currentUsers")]
		public System.Nullable<System.Int32> CurrentUsers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isFree")]
		public System.Nullable<System.Boolean> IsFree { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isTrial")]
		public System.Nullable<System.Boolean> IsTrial { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="licensedUsers")]
		public System.Nullable<System.Int32> LicensedUsers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="planCode")]
		public string PlanCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserMembership
	{
		
		[System.Runtime.Serialization.DataMember(Name="isValid")]
		public System.Nullable<System.Boolean> IsValid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roleId")]
		public string RoleId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserProfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserSetupProgress
	{
		
		[System.Runtime.Serialization.DataMember(Name="completedSteps")]
		public string[] CompletedSteps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.DateTimeOffset> Timestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsersInvitation
	{
		
		[System.Runtime.Serialization.DataMember(Name="inviterId")]
		public string InviterId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invites")]
		public UserInvite[] Invites { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookBaseInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="externalAddress")]
		public string ExternalAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WebhookInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalAddress")]
		public string ExternalAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="teamId")]
		public string TeamId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Trigger Alert
		/// Triggers a new alert for your team. All team members on duty will receive alert notifications.
		/// AlertsPost alerts
		/// </summary>
		/// <param name="requestBody">Alert to raise.</param>
		public async Task AlertsPostAsync(RaiseAlertInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Confirms all visible alerts
		/// This method confirms all unhandled alerts your team currently has by a specific user.
		/// AlertsAcknowledgeAllPostByUserId alerts/acknowledgeAll
		/// </summary>
		/// <param name="userId">User ID of the user to be used to acknowledge the alarms.</param>
		public async Task AlertsAcknowledgeAllPostByUserIdAsync(string userId, ChangeAlertStatusFilterInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/acknowledgeAll?userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Acknowlegde multiple alerts
		/// This method confirms all alerts provided.
		/// AlertsAcknowledgeMultiplePost alerts/acknowledgeMultiple
		/// </summary>
		public async Task AlertsAcknowledgeMultiplePostAsync(ChangeAlertStatusMultipleInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/acknowledgeMultiple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Close all acknowledged alerts.
		/// This method closes all acknowledged alerts your team currently has.
		/// AlertsCloseAllPostByUserId alerts/closeAll
		/// </summary>
		/// <param name="userId">User ID of the user to be used to close the alarms.</param>
		public async Task AlertsCloseAllPostByUserIdAsync(string userId, ChangeAlertStatusFilterInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/closeAll?userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Close multiple alerts
		/// This method closes all alerts provided.
		/// AlertsCloseMultiplePost alerts/closeMultiple
		/// </summary>
		public async Task AlertsCloseMultiplePostAsync(ChangeAlertStatusMultipleInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/closeMultiple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets alerts paged
		/// AlertsPagedPostByMaxResultsAndUserId alerts/paged
		/// </summary>
		/// <param name="maxResults">Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.
		///                Number of alerts could be less if filtered but at least 1.</param>
		/// <param name="userId">User ID of the user you want to get alerts for.</param>
		/// <param name="requestBody">The filter defines which alerts are supposed to be retrieved.</param>
		/// <returns>Returns a paged result with found alerts and continuation token if more alerts are in the database.</returns>
		public async Task<OverviewAlertPagedResultsPublic> AlertsPagedPostByMaxResultsAndUserIdAsync(int maxResults, string userId, AlertFilterPublic requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/paged?maxResults="+maxResults+"&userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OverviewAlertPagedResultsPublic>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Alert Report
		/// Returns information about the occurred alert volume in different time periods as well as information about the
		/// response behaviour (amount of confirmed and unhandled alerts) of your team members.
		/// AlertsReportGetByUserId alerts/report
		/// </summary>
		/// <param name="userId">User ID of the user for whom you want a report.</param>
		/// <returns>Success</returns>
		public async Task<AlertReport> AlertsReportGetByUserIdAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/report?userId=" + (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertReport>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Queue undo of multiple acknowledgments.
		/// This method tries to undo the acknowledgement of multiple alerts via a queue. The operation is handled in the background.
		/// AlertsUndoAcknowledgeMultiplePost alerts/undoAcknowledgeMultiple
		/// </summary>
		/// <param name="requestBody">Configure which user should be undone for which alerts.</param>
		public async Task AlertsUndoAcknowledgeMultiplePostAsync(ChangeAlertStatusMultipleInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/undoAcknowledgeMultiple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Withdraw closure of multiple alerts
		/// This method tries to undo multiple alert closes. The operation is handled in the background.
		/// AlertsUndoCloseMultiplePost alerts/undoCloseMultiple
		/// </summary>
		public async Task AlertsUndoCloseMultiplePostAsync(ChangeAlertStatusMultipleInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/undoCloseMultiple";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Alert
		/// Gets an alert by id.
		/// Alerts_alertIdGet alerts/{alertId}
		/// </summary>
		/// <param name="alertId">Id of the requested Alert.</param>
		/// <returns>Success</returns>
		public async Task<AlertInfo> Alerts_alertIdGetAsync(string alertId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/"+ (alertId==null? "" : System.Uri.EscapeDataString(alertId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Acknowledge an alert
		/// Alerts_alertIdAcknowledgePost alerts/{alertId}/acknowledge
		/// </summary>
		/// <param name="alertId">Id to acknowledge an alert.</param>
		/// <returns>Success</returns>
		public async Task<AlertInfo> Alerts_alertIdAcknowledgePostAsync(string alertId, ChangeAlertStatusInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/"+ (alertId==null? "" : System.Uri.EscapeDataString(alertId))+"/acknowledge";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Annotate Alert
		/// Annotates an alert by given Annotation Info.
		/// Alerts_alertIdAnnotatePost alerts/{alertId}/annotate
		/// </summary>
		/// <param name="alertId">Id of the alert to annotate.</param>
		/// <param name="requestBody">Annotation Information.</param>
		/// <returns>Success</returns>
		public async Task<AlertAnnotationInfo> Alerts_alertIdAnnotatePostAsync(string alertId, AlertAnnotationInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/"+ (alertId==null? "" : System.Uri.EscapeDataString(alertId))+"/annotate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertAnnotationInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get annotations of an alert
		/// Get annotations of an alert by id.
		/// Alerts_alertIdAnnotationsGet alerts/{alertId}/annotations
		/// </summary>
		/// <param name="alertId">Id of the requested Alert.</param>
		/// <returns>Success</returns>
		public async Task<AlertAnnotationInfo[]> Alerts_alertIdAnnotationsGetAsync(string alertId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/"+ (alertId==null? "" : System.Uri.EscapeDataString(alertId))+"/annotations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertAnnotationInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get attachments of an alert
		/// Get attachments of an alert by id.
		/// Alerts_alertIdAttachmentsGet alerts/{alertId}/attachments
		/// </summary>
		/// <param name="alertId">Id of the requested Alert.</param>
		/// <returns>Success</returns>
		public async Task<AlertAttachmentInfo[]> Alerts_alertIdAttachmentsGetAsync(string alertId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/"+ (alertId==null? "" : System.Uri.EscapeDataString(alertId))+"/attachments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertAttachmentInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a specified attachment of a specified alert.
		/// Alerts_alertIdAttachments_attachmentIdGetByWidthAndHeightAndScale alerts/{alertId}/attachments/{attachmentId}
		/// </summary>
		/// <param name="alertId">Id of the alert that contains the wanted attachment.</param>
		/// <param name="attachmentId">Id of the attachment, that you want to retrieve.</param>
		/// <param name="width">Optional parameter defining the wanted width of the picture that is retrieved.</param>
		/// <param name="height">Optional parameter defining the wanted height of the picture that is retrieved.</param>
		/// <param name="scale">Optional parameter defining whether it's wanted to scale the retrieved image. Default is set to
		///true.</param>
		/// <returns>Returns the attachment image with additional meta information.</returns>
		public async Task<string> Alerts_alertIdAttachments_attachmentIdGetByWidthAndHeightAndScaleAsync(string alertId, string attachmentId, int width, int height, bool scale, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/"+ (alertId==null? "" : System.Uri.EscapeDataString(alertId))+"/attachments/"+ (attachmentId==null? "" : System.Uri.EscapeDataString(attachmentId))+"&width="+width+"&height="+height+"&scale="+scale;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Close an alert
		/// Alerts_alertIdClosePost alerts/{alertId}/close
		/// </summary>
		/// <param name="alertId">Id to acknowledge an alert.</param>
		/// <returns>Success</returns>
		public async Task<AlertInfo> Alerts_alertIdClosePostAsync(string alertId, ChangeAlertStatusInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/"+ (alertId==null? "" : System.Uri.EscapeDataString(alertId))+"/close";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get alert notifications
		/// Get notifications of all users by alert id.
		/// Alerts_alertIdNotificationsGet alerts/{alertId}/notifications
		/// </summary>
		/// <param name="alertId">Id of the requested Alert.</param>
		/// <returns>Success</returns>
		public async Task<AlertNotificationInfo[]> Alerts_alertIdNotificationsGetAsync(string alertId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/"+ (alertId==null? "" : System.Uri.EscapeDataString(alertId))+"/notifications";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertNotificationInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get an overview alert.
		/// Get overview alert by id.
		/// Alerts_alertIdOverviewGet alerts/{alertId}/overview
		/// </summary>
		/// <param name="alertId">Id of the requested Alert.</param>
		/// <returns>Returns alert with all information attached.</returns>
		public async Task<OverviewAlert> Alerts_alertIdOverviewGetAsync(string alertId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/"+ (alertId==null? "" : System.Uri.EscapeDataString(alertId))+"/overview";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OverviewAlert>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Undo the acknowledgement of an alert.
		/// This method tries to undo an alert acknowledgement.
		/// Alerts_alertIdUndoAcknowledgePost alerts/{alertId}/undoAcknowledge
		/// </summary>
		/// <returns>Returns updated alert.</returns>
		public async Task<OverviewAlert> Alerts_alertIdUndoAcknowledgePostAsync(string alertId, ChangeAlertStatusInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/"+ (alertId==null? "" : System.Uri.EscapeDataString(alertId))+"/undoAcknowledge";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OverviewAlert>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Undo the closure of an alert.
		/// This method tries to undo an alert close.
		/// Alerts_alertIdUndoClosePost alerts/{alertId}/undoClose
		/// </summary>
		/// <returns>Success</returns>
		public async Task<OverviewAlert> Alerts_alertIdUndoClosePostAsync(string alertId, ChangeAlertStatusInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "alerts/"+ (alertId==null? "" : System.Uri.EscapeDataString(alertId))+"/undoClose";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OverviewAlert>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Gets the names of all alert category images.
		/// You can get the image by going to account.signl4.com/images/alerts/categoryImageName.svg
		/// CategoriesImagesGet categories/images
		/// </summary>
		/// <returns>Returns the alert categories.</returns>
		public async Task<string[]> CategoriesImagesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/images";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<string[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all categories
		/// Sample Request:
		/// 
		/// GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7
		/// Categories_teamIdGet categories/{teamId}
		/// </summary>
		/// <param name="teamId">ID of the team the categories belong to</param>
		/// <returns>Returns the category infos</returns>
		public async Task<CategoryInfo[]> Categories_teamIdGetAsync(string teamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CategoryInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new category
		/// Sample Request:
		/// 
		/// POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7
		/// {
		/// "name": "Water",
		/// "imageName": "water.svg",
		/// "color": "#0000cc",
		/// "keywordMatching": "Any",
		/// "keywords": [
		/// {
		/// "value": "H2O"
		/// },
		/// {
		/// "value": "Water"
		/// }
		/// ]
		/// }
		/// Categories_teamIdPost categories/{teamId}
		/// </summary>
		/// <param name="teamId">ID of the team the category belongs to</param>
		/// <param name="requestBody">Category to be created</param>
		public async Task Categories_teamIdPostAsync(string teamId, CategoryInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get metrics for all categories
		/// Sample Request:
		/// 
		/// GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/metrics
		/// Categories_teamIdMetricsGet categories/{teamId}/metrics
		/// </summary>
		/// <param name="teamId">ID of the team the categories belongs to</param>
		/// <returns>Returns a list of category metrics</returns>
		public async Task<CategoryMetrics[]> Categories_teamIdMetricsGetAsync(string teamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/metrics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CategoryMetrics[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete an existing category
		/// Sample Request:
		/// 
		/// DELETE /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e
		/// Categories_teamId_categoryIdDelete categories/{teamId}/{categoryId}
		/// </summary>
		/// <param name="teamId">ID of the team the category belongs to</param>
		/// <param name="categoryId">ID of the category to delete</param>
		/// <returns>If the delete operation was successful</returns>
		public async Task Categories_teamId_categoryIdDeleteAsync(string teamId, string categoryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/"+ (categoryId==null? "" : System.Uri.EscapeDataString(categoryId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific category
		/// Sample Request:
		/// 
		/// GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e
		/// Categories_teamId_categoryIdGet categories/{teamId}/{categoryId}
		/// </summary>
		/// <param name="teamId">ID of the team the category belongs to</param>
		/// <param name="categoryId">ID of the category to get</param>
		/// <returns>Returns the category details</returns>
		public async Task<CategoryInfo> Categories_teamId_categoryIdGetAsync(string teamId, string categoryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/"+ (categoryId==null? "" : System.Uri.EscapeDataString(categoryId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CategoryInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an existing category
		/// Sample Request:
		/// 
		/// PUT /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e
		/// {
		/// "name": "Water-Updated",
		/// "imageName": "water.svg",
		/// "color": "#0000cc",
		/// "keywordMatching": "All",
		/// "keywords": [
		/// {
		/// "value": "H2O"
		/// },
		/// {
		/// "value": "Water"
		/// },
		/// {
		/// "value": "Wet"
		/// }
		/// ]
		/// }
		/// Categories_teamId_categoryIdPut categories/{teamId}/{categoryId}
		/// </summary>
		/// <param name="teamId">ID of the team the category belongs to</param>
		/// <param name="requestBody">Category to be updated</param>
		/// <returns>Returns the updated category</returns>
		public async Task<CategoryInfo> Categories_teamId_categoryIdPutAsync(string teamId, string categoryId, CategoryInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/"+ (categoryId==null? "" : System.Uri.EscapeDataString(categoryId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CategoryInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get metrics for a specific category
		/// Sample Request:
		/// 
		/// GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/metrics
		/// Categories_teamId_categoryIdMetricsGet categories/{teamId}/{categoryId}/metrics
		/// </summary>
		/// <param name="teamId">ID of the team the category belongs to</param>
		/// <param name="categoryId">ID of the category to get</param>
		/// <returns>Returns the category metrics</returns>
		public async Task<CategoryMetrics> Categories_teamId_categoryIdMetricsGetAsync(string teamId, string categoryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/"+ (categoryId==null? "" : System.Uri.EscapeDataString(categoryId))+"/metrics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CategoryMetrics>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get category subscriptions
		/// Sample Request:
		/// 
		/// GET /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions
		/// {
		/// }
		/// Categories_teamId_categoryIdSubscriptionsGet categories/{teamId}/{categoryId}/subscriptions
		/// </summary>
		/// <param name="teamId">ID of the team the category belongs to</param>
		/// <param name="categoryId">Category to get subscriptions for</param>
		/// <returns>Returns the category subscriptions</returns>
		public async Task<CategorySubscriptionInfo[]> Categories_teamId_categoryIdSubscriptionsGetAsync(string teamId, string categoryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/"+ (categoryId==null? "" : System.Uri.EscapeDataString(categoryId))+"/subscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CategorySubscriptionInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set category subscriptions
		/// Sample Request:
		/// 
		/// POST /categories/cbb70402-1359-477f-ac92-0171cf2b5ff7/c0054336-cd89-4abf-882d-ba69b5adb25e/subscriptions
		/// {
		/// }
		/// Categories_teamId_categoryIdSubscriptionsPost categories/{teamId}/{categoryId}/subscriptions
		/// </summary>
		/// <param name="teamId">ID of the team the category belongs to</param>
		/// <param name="categoryId">Category to be updated</param>
		/// <returns>Returns the updated category subscriptions</returns>
		public async Task<CategorySubscriptionInfo[]> Categories_teamId_categoryIdSubscriptionsPostAsync(string teamId, string categoryId, CategorySubscriptionInfo[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "categories/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/"+ (categoryId==null? "" : System.Uri.EscapeDataString(categoryId))+"/subscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CategorySubscriptionInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get overview event paged.
		/// Get overview event paged. If there are more results, you also get a continuation token which you can add to the event filter.
		/// EventsPagedPostByMaxResults events/paged
		/// </summary>
		/// <param name="maxResults">Defines the limit of retrieved alert details per request. 1 to 100 are allowed per request.
		///                 Number of alerts could be less if filtered but at least 1.</param>
		/// <param name="requestBody">The filter defines which alerts are supposed to be retrieved.</param>
		/// <returns>Returns paged result with found events and continuation token, if database holds more events.</returns>
		public async Task<OverviewEventPagedResultsPublic> EventsPagedPostByMaxResultsAsync(int maxResults, EventFilter requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/paged?maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OverviewEventPagedResultsPublic>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get overview event
		/// Get overview event by id.
		/// Events_eventIdOverviewGet events/{eventId}/overview
		/// </summary>
		/// <param name="eventId">Id of event to get.</param>
		/// <returns>Returns overview event with specific id.</returns>
		public async Task<OverviewEvent> Events_eventIdOverviewGetAsync(string eventId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"/overview";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OverviewEvent>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get event parameters
		/// Get parameters of an event by id.
		/// Events_eventIdParametersGet events/{eventId}/parameters
		/// </summary>
		/// <param name="eventId">Event Id of the requested Alert.</param>
		/// <returns>Success</returns>
		public async Task<EventParameterInfo[]> Events_eventIdParametersGetAsync(string eventId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "events/"+ (eventId==null? "" : System.Uri.EscapeDataString(eventId))+"/parameters";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventParameterInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get your subscription's current prepaid balance.
		/// PrepaidBalanceGet prepaid/balance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PrepaidBalanceInfo> PrepaidBalanceGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prepaid/balance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrepaidBalanceInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get your subscription's current prepaid settings.
		/// PrepaidSettingsGet prepaid/settings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PrepaidSettingsInfo> PrepaidSettingsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prepaid/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrepaidSettingsInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update your subscription's current prepaid settings.
		/// PrepaidSettingsPut prepaid/settings
		/// </summary>
		/// <param name="requestBody">Settings object containing the new values.</param>
		/// <returns>Success</returns>
		public async Task<PrepaidSettingsInfo> PrepaidSettingsPutAsync(PrepaidSettingsInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prepaid/settings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrepaidSettingsInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get your subscription's prepaid transactions.
		/// PrepaidTransactionsGet prepaid/transactions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PrepaidTransactionInfo[]> PrepaidTransactionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "prepaid/transactions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrepaidTransactionInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all script instances of the SIGNL4 team
		/// Returns all script instances in the subscription.
		/// ScriptsInstancesGetByTeamId scripts/instances
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ScriptInstanceDetails[]> ScriptsInstancesGetByTeamIdAsync(string teamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scripts/instances?teamId=" + (teamId==null? "" : System.Uri.EscapeDataString(teamId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScriptInstanceDetails[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new script instance in the in the SIGNL4 team.
		/// Creates a new script instance of the script specified in the request body.
		/// ScriptsInstancesPost scripts/instances
		/// </summary>
		/// <param name="requestBody">Script instance to be created.</param>
		/// <returns>Existing script instance was updated as specified in body.</returns>
		public async Task<ScriptInstanceDetails> ScriptsInstancesPostAsync(ScriptInstanceDetails requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scripts/instances";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScriptInstanceDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a script instance.
		/// Gets the script instance specified by the passed instance id.
		/// ScriptsInstances_instanceIdDelete scripts/instances/{instanceId}
		/// </summary>
		/// <param name="instanceId">Instance Id of script instance to be returned.</param>
		/// <returns>Success</returns>
		public async Task ScriptsInstances_instanceIdDeleteAsync(string instanceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scripts/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all information about a given script instance which includes its runtime status.
		/// Gets the script instance specified by the passed instance id.
		/// ScriptsInstances_instanceIdGet scripts/instances/{instanceId}
		/// </summary>
		/// <param name="instanceId">Instance Id of script instance to be returned.</param>
		/// <returns>Success</returns>
		public async Task<ScriptInstanceDetails> ScriptsInstances_instanceIdGetAsync(string instanceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scripts/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScriptInstanceDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a given script instance, typically used for updating the configuration of a script.
		/// Updates the specified script instance.
		/// ScriptsInstances_instanceIdPut scripts/instances/{instanceId}
		/// </summary>
		/// <param name="instanceId">InstanceId of the script to be updated.</param>
		/// <param name="requestBody">Script instance to be updated.</param>
		/// <returns>Success</returns>
		public async Task<ScriptInstanceDetails> ScriptsInstances_instanceIdPutAsync(string instanceId, ScriptInstanceDetails requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scripts/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScriptInstanceDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates custom data of a given script instance which includes its display name.
		/// Updates the specified script instance.
		/// ScriptsInstances_instanceIdDataPut scripts/instances/{instanceId}/data
		/// </summary>
		/// <param name="instanceId">InstanceId of the script to be updated.</param>
		/// <param name="requestBody">Script instance to be updated.</param>
		/// <returns>Success</returns>
		public async Task<ScriptInstanceDetails> ScriptsInstances_instanceIdDataPutAsync(string instanceId, ScriptInstanceCustomUserData requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scripts/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/data";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScriptInstanceDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Disables a given script instance.
		/// ScriptsInstances_instanceIdDisablePost scripts/instances/{instanceId}/disable
		/// </summary>
		/// <param name="instanceId">Id of the instance to be disabled.</param>
		/// <returns>Success</returns>
		public async Task<ScriptInstanceDetails> ScriptsInstances_instanceIdDisablePostAsync(string instanceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scripts/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScriptInstanceDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables a script instance.
		/// ScriptsInstances_instanceIdEnablePost scripts/instances/{instanceId}/enable
		/// </summary>
		/// <param name="instanceId">Id of the instance to be enabled.</param>
		/// <returns>Success</returns>
		public async Task<ScriptInstanceDetails> ScriptsInstances_instanceIdEnablePostAsync(string instanceId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scripts/instances/"+ (instanceId==null? "" : System.Uri.EscapeDataString(instanceId))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScriptInstanceDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all available inventory scripts which can be added to a SIGNL4 subscription.
		/// Returns all available inventory scripts which can be added to a SIGNL4 subscription.
		/// ScriptsInventoryGet scripts/inventory
		/// </summary>
		/// <returns>Success</returns>
		public async Task<InventoryScriptInfo[]> ScriptsInventoryGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scripts/inventory";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InventoryScriptInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns all inventory scripts.
		/// ScriptsInventoryParsedGetByLanguage scripts/inventory/parsed
		/// </summary>
		/// <returns>Success</returns>
		public async Task<InventoryScriptInfo[]> ScriptsInventoryParsedGetByLanguageAsync(string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scripts/inventory/parsed?language=" + (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InventoryScriptInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an inventory script by its id.
		/// Gets the script specified by the passed script id.
		/// ScriptsInventoryParsed_scriptIdGetByLanguage scripts/inventory/parsed/{scriptId}
		/// </summary>
		/// <param name="scriptId">The Id of the script to be returned.</param>
		/// <returns>Success</returns>
		public async Task<ScriptInstanceDetails> ScriptsInventoryParsed_scriptIdGetByLanguageAsync(string scriptId, string language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scripts/inventory/parsed/"+ (scriptId==null? "" : System.Uri.EscapeDataString(scriptId))+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScriptInstanceDetails>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get infos of all available/managed subscriptions.
		/// SubscriptionsGet subscriptions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SubscriptionInfo[]> SubscriptionsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubscriptionInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get infos of a specific subscription.
		/// Subscriptions_subscriptionIdGet subscriptions/{subscriptionId}
		/// </summary>
		/// <param name="subscriptionId">Id of the subscription that's to be retrieved.</param>
		/// <returns>Success</returns>
		public async Task<SubscriptionInfo> Subscriptions_subscriptionIdGetAsync(string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubscriptionInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the subscription's channel price information.
		/// Subscriptions_subscriptionIdChannelPricesGet subscriptions/{subscriptionId}/channelPrices
		/// </summary>
		/// <param name="subscriptionId">Id of the subscription that needs to be retrieved.</param>
		/// <returns>Success</returns>
		public async Task<ChannelPriceInfo> Subscriptions_subscriptionIdChannelPricesGetAsync(string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/channelPrices";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ChannelPriceInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the features of a specified subscription.
		/// Subscriptions_subscriptionIdFeaturesGet subscriptions/{subscriptionId}/features
		/// </summary>
		/// <param name="subscriptionId">Id of the subscription from which the features need to be retrieved.</param>
		/// <returns>Success</returns>
		public async Task<SubscriptionFeature[]> Subscriptions_subscriptionIdFeaturesGetAsync(string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/features";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubscriptionFeature[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a subscription's current prepaid balance.
		/// Subscriptions_subscriptionIdPrepaidBalanceGet subscriptions/{subscriptionId}/prepaidBalance
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PrepaidBalanceInfo> Subscriptions_subscriptionIdPrepaidBalanceGetAsync(string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/prepaidBalance";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrepaidBalanceInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a subscription's current prepaid settings.
		/// Subscriptions_subscriptionIdPrepaidSettingsGet subscriptions/{subscriptionId}/prepaidSettings
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PrepaidSettingsInfo> Subscriptions_subscriptionIdPrepaidSettingsGetAsync(string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/prepaidSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrepaidSettingsInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a subscription's current prepaid settings.
		/// Subscriptions_subscriptionIdPrepaidSettingsPut subscriptions/{subscriptionId}/prepaidSettings
		/// </summary>
		/// <param name="subscriptionId">ID of the subscription</param>
		/// <param name="requestBody">Settings object containing the new values.</param>
		/// <returns>Success</returns>
		public async Task<PrepaidSettingsInfo> Subscriptions_subscriptionIdPrepaidSettingsPutAsync(string subscriptionId, PrepaidSettingsInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/prepaidSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrepaidSettingsInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a subscription's prepaid transactions.
		/// Subscriptions_subscriptionIdPrepaidTransactionsGet subscriptions/{subscriptionId}/prepaidTransactions
		/// </summary>
		/// <param name="subscriptionId">ID of the subscription to get transactions for</param>
		/// <returns>Success</returns>
		public async Task<PrepaidTransactionInfo[]> Subscriptions_subscriptionIdPrepaidTransactionsGetAsync(string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/prepaidTransactions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PrepaidTransactionInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a subscriptions profile.
		/// Subscriptions_subscriptionIdProfilePut subscriptions/{subscriptionId}/profile
		/// </summary>
		/// <param name="subscriptionId">ID of the subscription to be updated</param>
		/// <param name="requestBody">Profile data to update subscription with</param>
		/// <returns>Success</returns>
		public async Task<SubscriptionInfo> Subscriptions_subscriptionIdProfilePutAsync(string subscriptionId, SubscriptionProfile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/profile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SubscriptionInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get infos for all teams of the subscription.
		/// Subscriptions_subscriptionIdTeamsGet subscriptions/{subscriptionId}/teams
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TeamInfo[]> Subscriptions_subscriptionIdTeamsGetAsync(string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/teams";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a subscription's user licenses.
		/// Subscriptions_subscriptionIdUserLicensesGet subscriptions/{subscriptionId}/userLicenses
		/// </summary>
		/// <param name="subscriptionId">ID of the subscription</param>
		/// <returns>Success</returns>
		public async Task<UserLicenseInfo> Subscriptions_subscriptionIdUserLicensesGetAsync(string subscriptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "subscriptions/"+ (subscriptionId==null? "" : System.Uri.EscapeDataString(subscriptionId))+"/userLicenses";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserLicenseInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get infos of all teams.
		/// TeamsGet teams
		/// </summary>
		/// <returns>Success</returns>
		public async Task<TeamInfo[]> TeamsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets infos of a specific team.
		/// Teams_teamIdGet teams/{teamId}
		/// </summary>
		/// <param name="teamId">ID of the team that should be retrieved.</param>
		/// <returns>Success</returns>
		public async Task<TeamInfo> Teams_teamIdGetAsync(string teamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about downloadable alert reports
		/// Teams_teamIdAlertReportsGet teams/{teamId}/alertReports
		/// </summary>
		/// <param name="teamId">ID of team you want to download reports from.</param>
		/// <returns>Success</returns>
		public async Task<AlertAuditReportFileInfo[]> Teams_teamIdAlertReportsGetAsync(string teamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/alertReports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertAuditReportFileInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns Alert Report
		/// Teams_teamIdAlertReports_fileNameGet teams/{teamId}/alertReports/{fileName}
		/// </summary>
		/// <param name="teamId">ID of team you want to get the duty report file infos for.</param>
		/// <param name="fileName">File name of file you want to download.</param>
		/// <returns>Success</returns>
		public async Task<string> Teams_teamIdAlertReports_fileNameGetAsync(string teamId, string fileName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/alertReports/"+ (fileName==null? "" : System.Uri.EscapeDataString(fileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets alert settings of a specific team.
		/// Teams_teamIdAlertSettingsGet teams/{teamId}/alertSettings
		/// </summary>
		/// <param name="teamId">ID of the team the settings should be retrieved for.</param>
		/// <returns>Success</returns>
		public async Task<AlertSettings> Teams_teamIdAlertSettingsGetAsync(string teamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/alertSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets alert settings of a specific team.
		/// Teams_teamIdAlertSettingsPost teams/{teamId}/alertSettings
		/// </summary>
		/// <param name="teamId">ID of the team the settings should be set for.</param>
		/// <param name="requestBody">Alert settings to be set</param>
		/// <returns>Success</returns>
		public async Task<AlertSettings> Teams_teamIdAlertSettingsPostAsync(string teamId, AlertSettings requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/alertSettings";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertSettings>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Information about downloadable reports
		/// Teams_teamIdDutyReportsGet teams/{teamId}/dutyReports
		/// </summary>
		/// <param name="teamId">ID of team you want to get the duty report file infos for.</param>
		/// <returns>Success</returns>
		public async Task<DutyAuditReportFileInfo[]> Teams_teamIdDutyReportsGetAsync(string teamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/dutyReports";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DutyAuditReportFileInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Download duty report with a specific fileName
		/// Teams_teamIdDutyReports_fileNameGet teams/{teamId}/dutyReports/{fileName}
		/// </summary>
		/// <param name="teamId">ID of team you want to download the duty report for.</param>
		/// <param name="fileName">Filename of the csv to download.</param>
		/// <returns>Success</returns>
		public async Task<string> Teams_teamIdDutyReports_fileNameGetAsync(string teamId, string fileName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/dutyReports/"+ (fileName==null? "" : System.Uri.EscapeDataString(fileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get duty assistant info for a team
		/// Teams_teamIdDutysummaryGetByLastTwoDuties teams/{teamId}/dutysummary
		/// </summary>
		/// <param name="teamId">ID of the team the duty belongs to.</param>
		/// <returns>Success</returns>
		public async Task<TeamDutySummaryInfo> Teams_teamIdDutysummaryGetByLastTwoDutiesAsync(string teamId, bool lastTwoDuties, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/dutysummary&lastTwoDuties="+lastTwoDuties;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamDutySummaryInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets event sources of a specific team.
		/// Teams_teamIdEventSourcesGet teams/{teamId}/eventSources
		/// </summary>
		/// <param name="teamId">ID of the team the sources should be retrieved for.</param>
		/// <returns>Success</returns>
		public async Task<EventSourceEndpointInfo[]> Teams_teamIdEventSourcesGetAsync(string teamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/eventSources";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventSourceEndpointInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all invites of a team.
		/// Teams_teamIdMembershipsGet teams/{teamId}/memberships
		/// </summary>
		/// <param name="teamId">Team ID of team you want to request.</param>
		/// <returns>User invitations are returned.</returns>
		public async Task<InvitedUserInfo[]> Teams_teamIdMembershipsGetAsync(string teamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/memberships";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<InvitedUserInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Invite users to a team
		/// Teams_teamIdMembershipsPost teams/{teamId}/memberships
		/// </summary>
		/// <param name="teamId">Id of team the user should be invited to.</param>
		/// <param name="requestBody">Information about user to invite and inviter id.</param>
		/// <returns>User invitation results are returned.</returns>
		public async Task<UserInvitationResult[]> Teams_teamIdMembershipsPostAsync(string teamId, UsersInvitation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/memberships";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserInvitationResult[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Sends invite email again if an invite exists
		/// Teams_teamIdMembershipsResendInviteMailPost teams/{teamId}/memberships/resendInviteMail
		/// </summary>
		/// <param name="teamId">Team ID of team with invited user.</param>
		/// <param name="requestBody">Information which user should be invited again.</param>
		/// <returns>Success</returns>
		public async Task<string> Teams_teamIdMembershipsResendInviteMailPostAsync(string teamId, UserInvitationInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/memberships/resendInviteMail";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Removes a user or invitation from a team, and may delete the user if he is not in any team.
		/// Teams_teamIdMemberships_userIdDeleteByRequesterUserId teams/{teamId}/memberships/{userId}
		/// </summary>
		/// <param name="teamId">ID of the team the user should be deleted from</param>
		/// <param name="userId">ID of the user that should be deleted</param>
		/// <param name="requesterUserId">User ID of user which will remove the other user.</param>
		/// <returns>Success message</returns>
		public async Task<string> Teams_teamIdMemberships_userIdDeleteByRequesterUserIdAsync(string teamId, string userId, string requesterUserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/memberships/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"&requesterUserId=" + (requesterUserId==null? "" : System.Uri.EscapeDataString(requesterUserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update user's team membership.
		/// Updates the user's team membership. You can move the user to another team within the subscription
		/// and/or change the user's role.
		/// Teams_teamIdMemberships_userIdPutByRequesterUserId teams/{teamId}/memberships/{userId}
		/// </summary>
		/// <param name="teamId">Team the user you want to update belongs to at the moment.</param>
		/// <param name="userId">User ID of user you want to update.</param>
		/// <param name="requesterUserId">User ID of user which you want to change role with. This must be provided when using an api key. This user must have role administrator (for setting administrator role) or team administrator (for setting  rights.</param>
		/// <param name="requestBody">Information about role id and target team id.</param>
		/// <returns>User was successfully updated.</returns>
		public async Task<UserInfo> Teams_teamIdMemberships_userIdPutByRequesterUserIdAsync(string teamId, string userId, string requesterUserId, UserMembership requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/memberships/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"&requesterUserId=" + (requesterUserId==null? "" : System.Uri.EscapeDataString(requesterUserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates team profile of a team
		/// Teams_teamIdProfilePut teams/{teamId}/profile
		/// </summary>
		/// <param name="teamId">Team ID of team which should be updated.</param>
		/// <returns>Success</returns>
		public async Task<TeamInfo> Teams_teamIdProfilePutAsync(string teamId, TeamProfile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/profile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns information about all duties that belong to the team.
		/// Teams_teamIdSchedulesGetByUserIdAndMinDateAndLimit teams/{teamId}/schedules
		/// </summary>
		/// <param name="teamId">Id of the team the schedules user belongs to</param>
		/// <returns>Success</returns>
		public async Task<ScheduleInfo[]> Teams_teamIdSchedulesGetByUserIdAndMinDateAndLimitAsync(string teamId, string UserId, System.DateTimeOffset MinDate, int Limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/schedules&UserId=" + (UserId==null? "" : System.Uri.EscapeDataString(UserId))+"&MinDate=" + MinDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&Limit="+Limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduleInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create/Update given duty schedule.
		/// Teams_teamIdSchedulesPost teams/{teamId}/schedules
		/// </summary>
		/// <param name="teamId">Id of the team the duty is to be assigned to.</param>
		/// <param name="requestBody">information about the duty schedule to be created</param>
		/// <returns>Success</returns>
		public async Task<ScheduleInfo> Teams_teamIdSchedulesPostAsync(string teamId, ScheduleInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/schedules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduleInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete duty schedules in range
		/// Teams_teamIdSchedulesDeleteRangePost teams/{teamId}/schedules/deleteRange
		/// </summary>
		/// <param name="teamId">Team ID you want to delete</param>
		/// <param name="requestBody">Information with date range to delete from to</param>
		/// <returns>Success</returns>
		public async Task<ScheduleInfo[]> Teams_teamIdSchedulesDeleteRangePostAsync(string teamId, DeleteRangeInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/schedules/deleteRange";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduleInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Save multiple schedules. It is possible to override existing schedules if you wish
		/// Teams_teamIdSchedulesMultiplePostByOverrideExisting teams/{teamId}/schedules/multiple
		/// </summary>
		/// <param name="teamId">Team ID to set</param>
		/// <param name="overrideExisting">Override or cut existing schedules if set to true.</param>
		/// <param name="requestBody">List of schedules to save</param>
		/// <returns>Success</returns>
		public async Task<ScheduleInfo[]> Teams_teamIdSchedulesMultiplePostByOverrideExistingAsync(string teamId, bool overrideExisting, ScheduleInfo[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/schedules/multiple&overrideExisting="+overrideExisting;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduleInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a specific duty.
		/// Teams_teamIdSchedules_dutyIdDelete teams/{teamId}/schedules/{dutyId}
		/// </summary>
		/// <param name="teamId">ID of the team the duty belongs to.</param>
		/// <param name="dutyId">ID of the duty to be deleted.</param>
		public async Task Teams_teamIdSchedules_dutyIdDeleteAsync(string teamId, string dutyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/schedules/"+ (dutyId==null? "" : System.Uri.EscapeDataString(dutyId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information of the duty schedule with the specified Id.
		/// Teams_teamIdSchedules_scheduleIdGet teams/{teamId}/schedules/{scheduleId}
		/// </summary>
		/// <param name="teamId">Id of the team the duty belongs to</param>
		/// <param name="scheduleId">Id of the requested duty schedule.</param>
		/// <returns>Success</returns>
		public async Task<ScheduleInfo> Teams_teamIdSchedules_scheduleIdGetAsync(string teamId, string scheduleId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/schedules/"+ (scheduleId==null? "" : System.Uri.EscapeDataString(scheduleId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduleInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets setup progress of a specific team.
		/// Teams_teamIdSetupProgressGet teams/{teamId}/setupProgress
		/// </summary>
		/// <param name="teamId">ID of the team the progress should be retrieved for.</param>
		/// <returns>Success</returns>
		public async Task<TeamSetupProgress> Teams_teamIdSetupProgressGetAsync(string teamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "teams/"+ (teamId==null? "" : System.Uri.EscapeDataString(teamId))+"/setupProgress";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamSetupProgress>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all Users
		/// Returns a list of user objects with details such as their email address and duty information. Only users who
		/// are part of your team will be returned.
		/// UsersGet users
		/// </summary>
		/// <returns>User could be successfully identified.</returns>
		public async Task<UserInfo[]> UsersGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get User by Id
		/// Returns a user object with details such as his email address and duty information.
		/// Users_userIdGet users/{userId}
		/// </summary>
		/// <param name="userId">Identifier of the user to get. Use 'Me' to get information about the currently logged in user. This is not possible with an api key.
		///Can also be an email address of a user in the team or the unique id of an according user object.”</param>
		/// <returns>User could be successfully identified.</returns>
		public async Task<UserInfo> Users_userIdGetAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the password of a user
		/// Users_userIdChangePasswordPut users/{userId}/changePassword
		/// </summary>
		/// <param name="userId">User ID of user whose password should be changed.</param>
		/// <returns>Success</returns>
		public async Task Users_userIdChangePasswordPutAsync(string userId, UpdatePasswordInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/changePassword";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Checks if a user has the provided permission.
		/// Users_userIdCheckPermissionsPostByTeamId users/{userId}/checkPermissions
		/// </summary>
		/// <param name="userId">ID of the user to check permissions for.</param>
		/// <param name="requestBody">List of permissions to check</param>
		/// <returns>Success</returns>
		public async Task<UserImage> Users_userIdCheckPermissionsPostByTeamIdAsync(string userId, string teamId, StringItemsWrapper requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/checkPermissions&teamId=" + (teamId==null? "" : System.Uri.EscapeDataString(teamId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserImage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get duty status by user Id
		/// Returns a object with duty information.
		/// Users_userIdDutyStatusGet users/{userId}/dutyStatus
		/// </summary>
		/// <param name="userId">Identifier of the user to get. Use 'Me' to get information about the currently logged in user. This is not possible with an api key.
		///Can also be an email address of a user in the team or the unique id of an according user object.”</param>
		/// <returns>Duty successfully loaded.</returns>
		public async Task<UserDutyInfo> Users_userIdDutyStatusGetAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/dutyStatus";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserDutyInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Users_userIdImageGetByHeightAndWidth users/{userId}/image
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UserImage> Users_userIdImageGetByHeightAndWidthAsync(string userId, int height, int width, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/image&height="+height+"&width="+width;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserImage>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Uploaded a profile image for a specified user.
		/// Users_userIdImagePost users/{userId}/image
		/// </summary>
		/// <param name="userId">Id of the user.</param>
		/// <returns>Success</returns>
		public async Task Users_userIdImagePostAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/image";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates user profile of an user
		/// Users_userIdProfilePut users/{userId}/profile
		/// </summary>
		/// <param name="userId">ID of user to update.</param>
		/// <returns>Success</returns>
		public async Task<UserInfo> Users_userIdProfilePutAsync(string userId, UserProfile requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/profile";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Punch User in
		/// The specified user will be punched in to duty.
		/// Users_userIdPunchInPost users/{userId}/punchIn
		/// </summary>
		/// <param name="userId">Identifier of the user to punch in. Use 'Me' to get information about the currently logged in
		///user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.”</param>
		/// <returns>Success</returns>
		public async Task<UserDutyInfo> Users_userIdPunchInPostAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/punchIn";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserDutyInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Punch User in as Manager
		/// The specified user will be punched in to duty as a manager.
		/// Users_userIdPunchInAsManagerPost users/{userId}/punchInAsManager
		/// </summary>
		/// <param name="userId">Identifier of the user to punch in. Use 'Me' to get information about the currently logged in
		///user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.”</param>
		/// <returns>Success</returns>
		public async Task<UserDutyInfo> Users_userIdPunchInAsManagerPostAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/punchInAsManager";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserDutyInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Punch User out
		/// The specified user will be punched out from duty.
		/// Users_userIdPunchOutPost users/{userId}/punchOut
		/// </summary>
		/// <param name="userId">Identifier of the user to punch out. Use 'Me' to get information about the currently logged in
		///user. This is not possible with an api key. Can also be an email address of a user in the team or the unique id of an according user object.”</param>
		/// <returns>The user was punched out successfully.</returns>
		public async Task<UserDutyInfo> Users_userIdPunchOutPostAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/punchOut";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserDutyInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets setup progress of a specific user.
		/// Users_userIdSetupProgressGet users/{userId}/setupProgress
		/// </summary>
		/// <param name="userId">ID of the user the progress should be retrieved for.</param>
		/// <returns>Success</returns>
		public async Task<UserSetupProgress> Users_userIdSetupProgressGetAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"/setupProgress";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserSetupProgress>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Webhooks
		/// Returns a collection of defined outbound webhooks in the system.
		/// WebhooksGetByTeamId webhooks
		/// </summary>
		/// <returns>Request was successful and response body contains information about all outbound webhooks in the subscription.</returns>
		public async Task<WebhookInfo[]> WebhooksGetByTeamIdAsync(string teamId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks?teamId=" + (teamId==null? "" : System.Uri.EscapeDataString(teamId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebhookInfo[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Webhook
		/// Creates a new outbound webhook that will be notified when certain events occur.
		/// WebhooksPost webhooks
		/// </summary>
		/// <param name="requestBody">Json object that contains the external URL of the webhook.</param>
		public async Task WebhooksPostAsync(WebhookBaseInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete Webhook by Id
		/// Deletes the specified webhook so that it will no longer be notified.
		/// Webhooks_webhookIdDelete webhooks/{webhookId}
		/// </summary>
		/// <param name="webhookId">Id of the outbound webhook that will be deleted.</param>
		/// <returns>Webhook was successfully deleted.</returns>
		public async Task Webhooks_webhookIdDeleteAsync(string webhookId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Webhook by Id
		/// Returns information of the webhook specified by the passed id.
		/// Webhooks_webhookIdGet webhooks/{webhookId}
		/// </summary>
		/// <param name="webhookId">Id of the outbound webhook to be retrieved.</param>
		/// <returns>Request was successful and response body contains information about the requested webhook.</returns>
		public async Task<string> Webhooks_webhookIdGetAsync(string webhookId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				return jsonReader.ReadAsString();
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Webhook by Id
		/// Updates the specified webhook.
		/// Webhooks_webhookIdPut webhooks/{webhookId}
		/// </summary>
		/// <param name="webhookId">Id of the outbound webhook to be updated.</param>
		/// <param name="requestBody">Json object containing the updated URL of the webhook.</param>
		/// <returns>Update was successful and response body contains the updated webhook details.</returns>
		public async Task<WebhookInfo> Webhooks_webhookIdPutAsync(string webhookId, WebhookBaseInfo requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebhookInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Ability to enable a webHook.
		/// Webhooks_webhookIdDisablePost webhooks/{webhookId}/disable
		/// </summary>
		/// <param name="webhookId">Webhook ID for webhook which should be disabled.</param>
		/// <returns>Disable was successful and response body contains the webhook details.</returns>
		public async Task<WebhookInfo> Webhooks_webhookIdDisablePostAsync(string webhookId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId))+"/disable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebhookInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Ability to disable a webHook.
		/// Webhooks_webhookIdEnablePost webhooks/{webhookId}/enable
		/// </summary>
		/// <param name="webhookId">Webhook ID for webhook which should be enabled.</param>
		/// <returns>Success</returns>
		public async Task<WebhookInfo> Webhooks_webhookIdEnablePostAsync(string webhookId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId))+"/enable";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WebhookInfo>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
