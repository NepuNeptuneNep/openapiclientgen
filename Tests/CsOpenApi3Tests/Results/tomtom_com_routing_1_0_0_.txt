//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CalculateReachableRangePostDataParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowVignette")]
		public string[] AllowVignette { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avoidAreas")]
		public CalculateReachableRangePostDataParametersAvoidAreas AvoidAreas { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avoidVignette")]
		public string[] AvoidVignette { get; set; }
	}
	
	public class CalculateReachableRangePostDataParametersAvoidAreas
	{
		
		[System.Runtime.Serialization.DataMember(Name="rectangles")]
		public CalculateReachableRangePostDataParametersAvoidAreasRectangles[] CalculateReachableRangePostDataParametersAvoidAreasRectangles { get; set; }
	}
	
	public class CalculateReachableRangePostDataParametersAvoidAreasRectangles
	{
		
		[System.Runtime.Serialization.DataMember(Name="northEastCorner")]
		public CalculateReachableRangePostDataParametersAvoidAreasRectanglesNorthEastCorner NorthEastCorner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="southWestCorner")]
		public CalculateReachableRangePostDataParametersAvoidAreasRectanglesSouthWestCorner SouthWestCorner { get; set; }
	}
	
	public class CalculateReachableRangePostDataParametersAvoidAreasRectanglesNorthEastCorner
	{
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
	}
	
	public class CalculateReachableRangePostDataParametersAvoidAreasRectanglesSouthWestCorner
	{
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CalculateRoutePostDataParameters
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowVignette")]
		public string[] AllowVignette { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avoidAreas")]
		public CalculateRoutePostDataParametersAvoidAreas AvoidAreas { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="avoidVignette")]
		public string[] AvoidVignette { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="supportingPoints")]
		public CalculateRoutePostDataParametersSupportingPoints[] CalculateRoutePostDataParametersSupportingPoints { get; set; }
	}
	
	public class CalculateRoutePostDataParametersAvoidAreas
	{
		
		[System.Runtime.Serialization.DataMember(Name="rectangles")]
		public CalculateRoutePostDataParametersAvoidAreasRectangles[] CalculateRoutePostDataParametersAvoidAreasRectangles { get; set; }
	}
	
	public class CalculateRoutePostDataParametersAvoidAreasRectangles
	{
		
		[System.Runtime.Serialization.DataMember(Name="northEastCorner")]
		public CalculateRoutePostDataParametersAvoidAreasRectanglesNorthEastCorner NorthEastCorner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="southWestCorner")]
		public CalculateRoutePostDataParametersAvoidAreasRectanglesSouthWestCorner SouthWestCorner { get; set; }
	}
	
	public class CalculateRoutePostDataParametersAvoidAreasRectanglesNorthEastCorner
	{
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
	}
	
	public class CalculateRoutePostDataParametersAvoidAreasRectanglesSouthWestCorner
	{
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
	}
	
	public class CalculateRoutePostDataParametersSupportingPoints
	{
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Reachable Range
		/// Calculates a set of locations that can be reached from the origin point.
		/// RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkm routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 1.</param>
		/// <param name="origin">Point from which the range calculation should start.</param>
		/// <param name="contentType">The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.</param>
		/// <param name="fuelBudgetInLiters">Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.
		/// Minimum: 0
		// </param>
		/// <param name="energyBudgetInkWh">Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.
		/// Minimum: 0
		// </param>
		/// <param name="timeBudgetInSec">Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.
		/// Minimum: 0
		// </param>
		/// <param name="callback">Specifies the jsonp callback method.</param>
		/// <param name="report">Specifies which data should be reported for diagnosis purposes.</param>
		/// <param name="departAt">The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.</param>
		/// <param name="arriveAt">The date and time of arrival at the destination point. It must be specified as a dateTime.</param>
		/// <param name="routeType">The type of route requested.</param>
		/// <param name="traffic">Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.</param>
		/// <param name="avoid">Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times.
		///Possible values:
		///  - tollRoads
		///  - motorways
		///  - ferries
		///  - unpavedRoads
		///  - carpools</param>
		/// <param name="travelMode">The mode of travel for the requested route.</param>
		/// <param name="hilliness">Degree of hilliness for calculating a thrilling route.</param>
		/// <param name="windingness">Amount that a thrilling route should wind.</param>
		/// <param name="vehicleMaxSpeed">Maximum speed of the vehicle in km/hour.</param>
		/// <param name="vehicleWeight">Weight of the vehicle in kilograms.</param>
		/// <param name="vehicleAxleWeight">Weight per axle of the vehicle in kg.</param>
		/// <param name="vehicleLength">Length of the vehicle in meters.</param>
		/// <param name="vehicleWidth">Width of the vehicle in meters.</param>
		/// <param name="vehicleHeight">Height of the vehicle in meters.</param>
		/// <param name="vehicleCommercial">Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.</param>
		/// <param name="vehicleLoadType">Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads.
		///Use these for routing in the US:
		///
		///  - <i>USHazmatClass1</i> Explosives
		///  - <i>USHazmatClass2</i> Compressed gas
		///  - <i>USHazmatClass3</i> Flammable liquids
		///  - <i>USHazmatClass4</i> Flammable solids
		///  - <i>USHazmatClass5</i> Oxidizers
		///  - <i>USHazmatClass6</i> Poisons
		///  - <i>USHazmatClass7</i> Radioactive
		///  - <i>USHazmatClass8</i> Corrosives
		///  - <i>USHazmatClass9</i> Miscellaneous
		///
		///Use these for routing in all other countries:
		///
		///  - <i>otherHazmatExplosive</i> Explosives
		///  - <i>otherHazmatGeneral</i> Miscellaneous
		///  - <i>otherHazmatHarmfulToWater</i> Harmful to water
		///
		///vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.</param>
		/// <param name="constantSpeedConsumptionInLitersPerHundredkm">Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.</param>
		/// <param name="currentFuelInLiters">Specifies the current supply of fuel in liters.</param>
		/// <param name="auxiliaryPowerInLitersPerHour">Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.</param>
		/// <param name="fuelEnergyDensityInMJoulesPerLiter">Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).</param>
		/// <param name="accelerationEfficiency">Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).</param>
		/// <param name="decelerationEfficiency">Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).</param>
		/// <param name="uphillEfficiency">Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).</param>
		/// <param name="downhillEfficiency">Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).</param>
		/// <param name="vehicleEngineType">Engine type of the vehicle.</param>
		/// <param name="constantSpeedConsumptionInkWhPerHundredkm">Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.</param>
		/// <returns>OK: a range was calculated and the body of the response contains the polygon description and further data.</returns>
		public async Task RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmAsync(
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmVersionNumber versionNumber, 
					string origin, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmContentType contentType, 
					float fuelBudgetInLiters, 
					float energyBudgetInkWh, 
					float timeBudgetInSec, 
					string callback, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmReport report, 
					string departAt, 
					string arriveAt, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmRouteType routeType, 
					bool traffic, 
					string avoid, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmTravelMode travelMode, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmHilliness hilliness, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmHilliness windingness, 
					int vehicleMaxSpeed, 
					int vehicleWeight, 
					int vehicleAxleWeight, 
					float vehicleLength, 
					float vehicleWidth, 
					float vehicleHeight, 
					bool vehicleCommercial, 
					string vehicleLoadType, 
					string constantSpeedConsumptionInLitersPerHundredkm, 
					float currentFuelInLiters, 
					float auxiliaryPowerInLitersPerHour, 
					float fuelEnergyDensityInMJoulesPerLiter, 
					float accelerationEfficiency, 
					float decelerationEfficiency, 
					float uphillEfficiency, 
					float downhillEfficiency, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmVehicleEngineType vehicleEngineType, 
					string constantSpeedConsumptionInkWhPerHundredkm, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "routing/"+versionNumber+"/calculateReachableRange/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+contentType+"&fuelBudgetInLiters="+fuelBudgetInLiters+"&energyBudgetInkWh="+energyBudgetInkWh+"&timeBudgetInSec="+timeBudgetInSec+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback))+"&report=" + report+"&departAt=" + (departAt==null? "" : System.Uri.EscapeDataString(departAt))+"&arriveAt=" + (arriveAt==null? "" : System.Uri.EscapeDataString(arriveAt))+"&routeType=" + routeType+"&traffic="+traffic+"&avoid=" + (avoid==null? "" : System.Uri.EscapeDataString(avoid))+"&travelMode=" + travelMode+"&hilliness=" + hilliness+"&windingness=" + windingness+"&vehicleMaxSpeed="+vehicleMaxSpeed+"&vehicleWeight="+vehicleWeight+"&vehicleAxleWeight="+vehicleAxleWeight+"&vehicleLength="+vehicleLength+"&vehicleWidth="+vehicleWidth+"&vehicleHeight="+vehicleHeight+"&vehicleCommercial="+vehicleCommercial+"&vehicleLoadType=" + (vehicleLoadType==null? "" : System.Uri.EscapeDataString(vehicleLoadType))+"&constantSpeedConsumptionInLitersPerHundredkm=" + (constantSpeedConsumptionInLitersPerHundredkm==null? "" : System.Uri.EscapeDataString(constantSpeedConsumptionInLitersPerHundredkm))+"&currentFuelInLiters="+currentFuelInLiters+"&auxiliaryPowerInLitersPerHour="+auxiliaryPowerInLitersPerHour+"&fuelEnergyDensityInMJoulesPerLiter="+fuelEnergyDensityInMJoulesPerLiter+"&accelerationEfficiency="+accelerationEfficiency+"&decelerationEfficiency="+decelerationEfficiency+"&uphillEfficiency="+uphillEfficiency+"&downhillEfficiency="+downhillEfficiency+"&vehicleEngineType=" + vehicleEngineType+"&constantSpeedConsumptionInkWhPerHundredkm=" + (constantSpeedConsumptionInkWhPerHundredkm==null? "" : System.Uri.EscapeDataString(constantSpeedConsumptionInkWhPerHundredkm));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Reachable Range
		/// Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.
		/// RoutingPostByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkm routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 1.</param>
		/// <param name="origin">Point from which the range calculation should start.</param>
		/// <param name="contentType">The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.</param>
		/// <param name="fuelBudgetInLiters">Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.
		/// Minimum: 0
		// </param>
		/// <param name="energyBudgetInkWh">Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.
		/// Minimum: 0
		// </param>
		/// <param name="timeBudgetInSec">Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.
		/// Minimum: 0
		// </param>
		/// <param name="callback">Specifies the jsonp callback method.</param>
		/// <param name="report">Specifies which data should be reported for diagnosis purposes.</param>
		/// <param name="departAt">The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.</param>
		/// <param name="arriveAt">The date and time of arrival at the destination point. It must be specified as a dateTime.</param>
		/// <param name="routeType">The type of route requested.</param>
		/// <param name="traffic">Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.</param>
		/// <param name="avoid">Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times.
		///Possible values:
		///  - tollRoads
		///  - motorways
		///  - ferries
		///  - unpavedRoads
		///  - carpools</param>
		/// <param name="travelMode">The mode of travel for the requested route.</param>
		/// <param name="hilliness">Degree of hilliness for calculating a thrilling route.</param>
		/// <param name="windingness">Amount that a thrilling route should wind.</param>
		/// <param name="vehicleMaxSpeed">Maximum speed of the vehicle in km/hour.</param>
		/// <param name="vehicleWeight">Weight of the vehicle in kilograms.</param>
		/// <param name="vehicleAxleWeight">Weight per axle of the vehicle in kg.</param>
		/// <param name="vehicleLength">Length of the vehicle in meters.</param>
		/// <param name="vehicleWidth">Width of the vehicle in meters.</param>
		/// <param name="vehicleHeight">Height of the vehicle in meters.</param>
		/// <param name="vehicleCommercial">Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.</param>
		/// <param name="vehicleLoadType">Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads.
		///Use these for routing in the US:
		///
		///  - <i>USHazmatClass1</i> Explosives
		///  - <i>USHazmatClass2</i> Compressed gas
		///  - <i>USHazmatClass3</i> Flammable liquids
		///  - <i>USHazmatClass4</i> Flammable solids
		///  - <i>USHazmatClass5</i> Oxidizers
		///  - <i>USHazmatClass6</i> Poisons
		///  - <i>USHazmatClass7</i> Radioactive
		///  - <i>USHazmatClass8</i> Corrosives
		///  - <i>USHazmatClass9</i> Miscellaneous
		///
		///Use these for routing in all other countries:
		///
		///  - <i>otherHazmatExplosive</i> Explosives
		///  - <i>otherHazmatGeneral</i> Miscellaneous
		///  - <i>otherHazmatHarmfulToWater</i> Harmful to water
		///
		///vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.</param>
		/// <param name="constantSpeedConsumptionInLitersPerHundredkm">Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.</param>
		/// <param name="currentFuelInLiters">Specifies the current supply of fuel in liters.</param>
		/// <param name="auxiliaryPowerInLitersPerHour">Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.</param>
		/// <param name="fuelEnergyDensityInMJoulesPerLiter">Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).</param>
		/// <param name="accelerationEfficiency">Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).</param>
		/// <param name="decelerationEfficiency">Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).</param>
		/// <param name="uphillEfficiency">Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).</param>
		/// <param name="downhillEfficiency">Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).</param>
		/// <param name="vehicleEngineType">Engine type of the vehicle.</param>
		/// <param name="constantSpeedConsumptionInkWhPerHundredkm">Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.</param>
		/// <returns>OK: a range was calculated and the body of the response contains the polygon description and further data.</returns>
		public async Task RoutingPostByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmAsync(
					RoutingPostByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmVersionNumber versionNumber, 
					string origin, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmContentType contentType, 
					float fuelBudgetInLiters, 
					float energyBudgetInkWh, 
					float timeBudgetInSec, 
					string callback, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmReport report, 
					string departAt, 
					string arriveAt, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmRouteType routeType, 
					bool traffic, 
					string avoid, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmTravelMode travelMode, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmHilliness hilliness, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmHilliness windingness, 
					int vehicleMaxSpeed, 
					int vehicleWeight, 
					int vehicleAxleWeight, 
					float vehicleLength, 
					float vehicleWidth, 
					float vehicleHeight, 
					bool vehicleCommercial, 
					string vehicleLoadType, 
					string constantSpeedConsumptionInLitersPerHundredkm, 
					float currentFuelInLiters, 
					float auxiliaryPowerInLitersPerHour, 
					float fuelEnergyDensityInMJoulesPerLiter, 
					float accelerationEfficiency, 
					float decelerationEfficiency, 
					float uphillEfficiency, 
					float downhillEfficiency, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmVehicleEngineType vehicleEngineType, 
					string constantSpeedConsumptionInkWhPerHundredkm, 
					CalculateReachableRangePostDataParameters requestBody, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "routing/"+versionNumber+"/calculateReachableRange/"+ (origin==null? "" : System.Uri.EscapeDataString(origin))+"/"+contentType+"&fuelBudgetInLiters="+fuelBudgetInLiters+"&energyBudgetInkWh="+energyBudgetInkWh+"&timeBudgetInSec="+timeBudgetInSec+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback))+"&report=" + report+"&departAt=" + (departAt==null? "" : System.Uri.EscapeDataString(departAt))+"&arriveAt=" + (arriveAt==null? "" : System.Uri.EscapeDataString(arriveAt))+"&routeType=" + routeType+"&traffic="+traffic+"&avoid=" + (avoid==null? "" : System.Uri.EscapeDataString(avoid))+"&travelMode=" + travelMode+"&hilliness=" + hilliness+"&windingness=" + windingness+"&vehicleMaxSpeed="+vehicleMaxSpeed+"&vehicleWeight="+vehicleWeight+"&vehicleAxleWeight="+vehicleAxleWeight+"&vehicleLength="+vehicleLength+"&vehicleWidth="+vehicleWidth+"&vehicleHeight="+vehicleHeight+"&vehicleCommercial="+vehicleCommercial+"&vehicleLoadType=" + (vehicleLoadType==null? "" : System.Uri.EscapeDataString(vehicleLoadType))+"&constantSpeedConsumptionInLitersPerHundredkm=" + (constantSpeedConsumptionInLitersPerHundredkm==null? "" : System.Uri.EscapeDataString(constantSpeedConsumptionInLitersPerHundredkm))+"&currentFuelInLiters="+currentFuelInLiters+"&auxiliaryPowerInLitersPerHour="+auxiliaryPowerInLitersPerHour+"&fuelEnergyDensityInMJoulesPerLiter="+fuelEnergyDensityInMJoulesPerLiter+"&accelerationEfficiency="+accelerationEfficiency+"&decelerationEfficiency="+decelerationEfficiency+"&uphillEfficiency="+uphillEfficiency+"&downhillEfficiency="+downhillEfficiency+"&vehicleEngineType=" + vehicleEngineType+"&constantSpeedConsumptionInkWhPerHundredkm=" + (constantSpeedConsumptionInkWhPerHundredkm==null? "" : System.Uri.EscapeDataString(constantSpeedConsumptionInkWhPerHundredkm));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Calculate Route
		/// Calculates a route between an origin and a destination.
		/// RoutingGetByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkm routing/{versionNumber}/calculateRoute/{locations}/{contentType}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 1.</param>
		/// <param name="locations">Locations through which the calculated route must pass.</param>
		/// <param name="contentType">The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.</param>
		/// <param name="maxAlternatives">Number of alternative routes to be calculated.
		/// Minimum: 0
		/// Maximum: 5
		// </param>
		/// <param name="alternativeType">Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.</param>
		/// <param name="minDeviationDistance">All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.</param>
		/// <param name="minDeviationTime">All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.</param>
		/// <param name="instructionsType">If specified, guidance instructions will be returned (if available).</param>
		/// <param name="language">The language parameter determines the language of the guidance messages.</param>
		/// <param name="computeBestOrder">Re-order the route waypoints to reduce the route length.</param>
		/// <param name="routeRepresentation">Specifies the representation of the set of routes provided as a response.</param>
		/// <param name="computeTravelTimeFor">Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.</param>
		/// <param name="vehicleHeading">The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).
		/// Minimum: 0
		/// Maximum: 359
		// </param>
		/// <param name="sectionType">Specifies which section types are explicitly reported in the route response. Can be specified multiple times.
		///  - carTrain, ferry, tunnel or motorway
		///  - pedestrian
		///  - tollRoad
		///  - tollVignette
		///  - country
		///  - travelMode
		///  - traffic</param>
		/// <param name="callback">Specifies the jsonp callback method.</param>
		/// <param name="report">Specifies which data should be reported for diagnosis purposes.</param>
		/// <param name="departAt">The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.</param>
		/// <param name="arriveAt">The date and time of arrival at the destination point. It must be specified as a dateTime.</param>
		/// <param name="routeType">The type of route requested.</param>
		/// <param name="traffic">Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.</param>
		/// <param name="avoid">Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times.
		///Possible values:
		///  - tollRoads
		///  - motorways
		///  - ferries
		///  - unpavedRoads
		///  - carpools
		///  - alreadyUsedRoads</param>
		/// <param name="travelMode">The mode of travel for the requested route.</param>
		/// <param name="hilliness">Degree of hilliness for calculating a thrilling route.</param>
		/// <param name="windingness">Amount that a thrilling route should wind.</param>
		/// <param name="vehicleMaxSpeed">Maximum speed of the vehicle in km/hour.</param>
		/// <param name="vehicleWeight">Weight of the vehicle in kilograms.</param>
		/// <param name="vehicleAxleWeight">Weight per axle of the vehicle in kg.</param>
		/// <param name="vehicleLength">Length of the vehicle in meters.</param>
		/// <param name="vehicleWidth">Width of the vehicle in meters.</param>
		/// <param name="vehicleHeight">Height of the vehicle in meters.</param>
		/// <param name="vehicleCommercial">Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.</param>
		/// <param name="vehicleLoadType">Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads.
		///Use these for routing in the US:
		///
		///  - <i>USHazmatClass1</i> Explosives
		///  - <i>USHazmatClass2</i> Compressed gas
		///  - <i>USHazmatClass3</i> Flammable liquids
		///  - <i>USHazmatClass4</i> Flammable solids
		///  - <i>USHazmatClass5</i> Oxidizers
		///  - <i>USHazmatClass6</i> Poisons
		///  - <i>USHazmatClass7</i> Radioactive
		///  - <i>USHazmatClass8</i> Corrosives
		///  - <i>USHazmatClass9</i> Miscellaneous
		///
		///Use these for routing in all other countries:
		///
		///  - <i>otherHazmatExplosive</i> Explosives
		///  - <i>otherHazmatGeneral</i> Miscellaneous
		///  - <i>otherHazmatHarmfulToWater</i> Harmful to water
		///
		///vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.</param>
		/// <param name="vehicleEngineType">Engine type of the vehicle.</param>
		/// <param name="constantSpeedConsumptionInLitersPerHundredkm">Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.</param>
		/// <param name="currentFuelInLiters">Specifies the current supply of fuel in liters.</param>
		/// <param name="auxiliaryPowerInLitersPerHour">Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.</param>
		/// <param name="fuelEnergyDensityInMJoulesPerLiter">Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).</param>
		/// <param name="accelerationEfficiency">Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).</param>
		/// <param name="decelerationEfficiency">Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).</param>
		/// <param name="uphillEfficiency">Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).</param>
		/// <param name="downhillEfficiency">Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).</param>
		/// <param name="constantSpeedConsumptionInkWhPerHundredkm">Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.</param>
		/// <returns>OK: a route was calculated and the body of the response contains the route description and any other requested data.</returns>
		public async Task RoutingGetByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmAsync(
					RoutingGetByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmVersionNumber versionNumber, 
					string locations, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmContentType contentType, 
					int maxAlternatives, 
					RoutingGetByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmAlternativeType alternativeType, 
					int minDeviationDistance, 
					int minDeviationTime, 
					RoutingGetByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmInstructionsType instructionsType, 
					string language, 
					bool computeBestOrder, 
					RoutingGetByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmRouteRepresentation routeRepresentation, 
					RoutingGetByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmComputeTravelTimeFor computeTravelTimeFor, 
					int vehicleHeading, 
					string sectionType, 
					string callback, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmReport report, 
					string departAt, 
					string arriveAt, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmRouteType routeType, 
					bool traffic, 
					string avoid, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmTravelMode travelMode, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmHilliness hilliness, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmHilliness windingness, 
					int vehicleMaxSpeed, 
					int vehicleWeight, 
					int vehicleAxleWeight, 
					float vehicleLength, 
					float vehicleWidth, 
					float vehicleHeight, 
					bool vehicleCommercial, 
					string vehicleLoadType, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmVehicleEngineType vehicleEngineType, 
					string constantSpeedConsumptionInLitersPerHundredkm, 
					float currentFuelInLiters, 
					float auxiliaryPowerInLitersPerHour, 
					float fuelEnergyDensityInMJoulesPerLiter, 
					float accelerationEfficiency, 
					float decelerationEfficiency, 
					float uphillEfficiency, 
					float downhillEfficiency, 
					string constantSpeedConsumptionInkWhPerHundredkm, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "routing/"+versionNumber+"/calculateRoute/"+ (locations==null? "" : System.Uri.EscapeDataString(locations))+"/"+contentType+"&maxAlternatives="+maxAlternatives+"&alternativeType=" + alternativeType+"&minDeviationDistance="+minDeviationDistance+"&minDeviationTime="+minDeviationTime+"&instructionsType=" + instructionsType+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&computeBestOrder="+computeBestOrder+"&routeRepresentation=" + routeRepresentation+"&computeTravelTimeFor=" + computeTravelTimeFor+"&vehicleHeading="+vehicleHeading+"&sectionType=" + (sectionType==null? "" : System.Uri.EscapeDataString(sectionType))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback))+"&report=" + report+"&departAt=" + (departAt==null? "" : System.Uri.EscapeDataString(departAt))+"&arriveAt=" + (arriveAt==null? "" : System.Uri.EscapeDataString(arriveAt))+"&routeType=" + routeType+"&traffic="+traffic+"&avoid=" + (avoid==null? "" : System.Uri.EscapeDataString(avoid))+"&travelMode=" + travelMode+"&hilliness=" + hilliness+"&windingness=" + windingness+"&vehicleMaxSpeed="+vehicleMaxSpeed+"&vehicleWeight="+vehicleWeight+"&vehicleAxleWeight="+vehicleAxleWeight+"&vehicleLength="+vehicleLength+"&vehicleWidth="+vehicleWidth+"&vehicleHeight="+vehicleHeight+"&vehicleCommercial="+vehicleCommercial+"&vehicleLoadType=" + (vehicleLoadType==null? "" : System.Uri.EscapeDataString(vehicleLoadType))+"&vehicleEngineType=" + vehicleEngineType+"&constantSpeedConsumptionInLitersPerHundredkm=" + (constantSpeedConsumptionInLitersPerHundredkm==null? "" : System.Uri.EscapeDataString(constantSpeedConsumptionInLitersPerHundredkm))+"&currentFuelInLiters="+currentFuelInLiters+"&auxiliaryPowerInLitersPerHour="+auxiliaryPowerInLitersPerHour+"&fuelEnergyDensityInMJoulesPerLiter="+fuelEnergyDensityInMJoulesPerLiter+"&accelerationEfficiency="+accelerationEfficiency+"&decelerationEfficiency="+decelerationEfficiency+"&uphillEfficiency="+uphillEfficiency+"&downhillEfficiency="+downhillEfficiency+"&constantSpeedConsumptionInkWhPerHundredkm=" + (constantSpeedConsumptionInkWhPerHundredkm==null? "" : System.Uri.EscapeDataString(constantSpeedConsumptionInkWhPerHundredkm));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Calculate Route
		/// Calculates a route between an origin and a destination. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.
		/// RoutingPostByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkm routing/{versionNumber}/calculateRoute/{locations}/{contentType}
		/// </summary>
		/// <param name="versionNumber">Service version number. The current value is 1.</param>
		/// <param name="locations">Locations through which the calculated route must pass.</param>
		/// <param name="contentType">The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.</param>
		/// <param name="maxAlternatives">Number of alternative routes to be calculated.
		/// Minimum: 0
		/// Maximum: 5
		// </param>
		/// <param name="alternativeType">Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.</param>
		/// <param name="minDeviationDistance">All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.</param>
		/// <param name="minDeviationTime">All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.</param>
		/// <param name="instructionsType">If specified, guidance instructions will be returned (if available).</param>
		/// <param name="language">The language parameter determines the language of the guidance messages.</param>
		/// <param name="computeBestOrder">Re-order the route waypoints to reduce the route length.</param>
		/// <param name="routeRepresentation">Specifies the representation of the set of routes provided as a response.</param>
		/// <param name="computeTravelTimeFor">Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.</param>
		/// <param name="vehicleHeading">The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).
		/// Minimum: 0
		/// Maximum: 359
		// </param>
		/// <param name="sectionType">Specifies which section types are explicitly reported in the route response. Can be specified multiple times.
		///  - carTrain, ferry, tunnel or motorway
		///  - pedestrian
		///  - tollRoad
		///  - tollVignette
		///  - country
		///  - travelMode
		///  - traffic</param>
		/// <param name="callback">Specifies the jsonp callback method.</param>
		/// <param name="report">Specifies which data should be reported for diagnosis purposes.</param>
		/// <param name="departAt">The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.</param>
		/// <param name="arriveAt">The date and time of arrival at the destination point. It must be specified as a dateTime.</param>
		/// <param name="routeType">The type of route requested.</param>
		/// <param name="traffic">Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.</param>
		/// <param name="avoid">Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times.
		///Possible values:
		///  - tollRoads
		///  - motorways
		///  - ferries
		///  - unpavedRoads
		///  - carpools
		///  - alreadyUsedRoads</param>
		/// <param name="travelMode">The mode of travel for the requested route.</param>
		/// <param name="hilliness">Degree of hilliness for calculating a thrilling route.</param>
		/// <param name="windingness">Amount that a thrilling route should wind.</param>
		/// <param name="vehicleMaxSpeed">Maximum speed of the vehicle in km/hour.</param>
		/// <param name="vehicleWeight">Weight of the vehicle in kilograms.</param>
		/// <param name="vehicleAxleWeight">Weight per axle of the vehicle in kg.</param>
		/// <param name="vehicleLength">Length of the vehicle in meters.</param>
		/// <param name="vehicleWidth">Width of the vehicle in meters.</param>
		/// <param name="vehicleHeight">Height of the vehicle in meters.</param>
		/// <param name="vehicleCommercial">Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.</param>
		/// <param name="vehicleLoadType">Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads.
		///Use these for routing in the US:
		///
		///  - <i>USHazmatClass1</i> Explosives
		///  - <i>USHazmatClass2</i> Compressed gas
		///  - <i>USHazmatClass3</i> Flammable liquids
		///  - <i>USHazmatClass4</i> Flammable solids
		///  - <i>USHazmatClass5</i> Oxidizers
		///  - <i>USHazmatClass6</i> Poisons
		///  - <i>USHazmatClass7</i> Radioactive
		///  - <i>USHazmatClass8</i> Corrosives
		///  - <i>USHazmatClass9</i> Miscellaneous
		///
		///Use these for routing in all other countries:
		///
		///  - <i>otherHazmatExplosive</i> Explosives
		///  - <i>otherHazmatGeneral</i> Miscellaneous
		///  - <i>otherHazmatHarmfulToWater</i> Harmful to water
		///
		///vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.</param>
		/// <param name="vehicleEngineType">Engine type of the vehicle.</param>
		/// <param name="constantSpeedConsumptionInLitersPerHundredkm">Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.</param>
		/// <param name="currentFuelInLiters">Specifies the current supply of fuel in liters.</param>
		/// <param name="auxiliaryPowerInLitersPerHour">Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.</param>
		/// <param name="fuelEnergyDensityInMJoulesPerLiter">Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).</param>
		/// <param name="accelerationEfficiency">Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).</param>
		/// <param name="decelerationEfficiency">Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).</param>
		/// <param name="uphillEfficiency">Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).</param>
		/// <param name="downhillEfficiency">Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).</param>
		/// <param name="constantSpeedConsumptionInkWhPerHundredkm">Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.</param>
		/// <returns>OK: a route was calculated and the body of the response contains the route description and any other requested data.</returns>
		public async Task RoutingPostByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmAsync(
					RoutingPostByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmVersionNumber versionNumber, 
					string locations, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmContentType contentType, 
					int maxAlternatives, 
					RoutingGetByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmAlternativeType alternativeType, 
					int minDeviationDistance, 
					int minDeviationTime, 
					RoutingGetByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmInstructionsType instructionsType, 
					string language, 
					bool computeBestOrder, 
					RoutingGetByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmRouteRepresentation routeRepresentation, 
					RoutingGetByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmComputeTravelTimeFor computeTravelTimeFor, 
					int vehicleHeading, 
					string sectionType, 
					string callback, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmReport report, 
					string departAt, 
					string arriveAt, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmRouteType routeType, 
					bool traffic, 
					string avoid, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmTravelMode travelMode, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmHilliness hilliness, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmHilliness windingness, 
					int vehicleMaxSpeed, 
					int vehicleWeight, 
					int vehicleAxleWeight, 
					float vehicleLength, 
					float vehicleWidth, 
					float vehicleHeight, 
					bool vehicleCommercial, 
					string vehicleLoadType, 
					RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmVehicleEngineType vehicleEngineType, 
					string constantSpeedConsumptionInLitersPerHundredkm, 
					float currentFuelInLiters, 
					float auxiliaryPowerInLitersPerHour, 
					float fuelEnergyDensityInMJoulesPerLiter, 
					float accelerationEfficiency, 
					float decelerationEfficiency, 
					float uphillEfficiency, 
					float downhillEfficiency, 
					string constantSpeedConsumptionInkWhPerHundredkm, 
					CalculateRoutePostDataParameters requestBody, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "routing/"+versionNumber+"/calculateRoute/"+ (locations==null? "" : System.Uri.EscapeDataString(locations))+"/"+contentType+"&maxAlternatives="+maxAlternatives+"&alternativeType=" + alternativeType+"&minDeviationDistance="+minDeviationDistance+"&minDeviationTime="+minDeviationTime+"&instructionsType=" + instructionsType+"&language=" + (language==null? "" : System.Uri.EscapeDataString(language))+"&computeBestOrder="+computeBestOrder+"&routeRepresentation=" + routeRepresentation+"&computeTravelTimeFor=" + computeTravelTimeFor+"&vehicleHeading="+vehicleHeading+"&sectionType=" + (sectionType==null? "" : System.Uri.EscapeDataString(sectionType))+"&callback=" + (callback==null? "" : System.Uri.EscapeDataString(callback))+"&report=" + report+"&departAt=" + (departAt==null? "" : System.Uri.EscapeDataString(departAt))+"&arriveAt=" + (arriveAt==null? "" : System.Uri.EscapeDataString(arriveAt))+"&routeType=" + routeType+"&traffic="+traffic+"&avoid=" + (avoid==null? "" : System.Uri.EscapeDataString(avoid))+"&travelMode=" + travelMode+"&hilliness=" + hilliness+"&windingness=" + windingness+"&vehicleMaxSpeed="+vehicleMaxSpeed+"&vehicleWeight="+vehicleWeight+"&vehicleAxleWeight="+vehicleAxleWeight+"&vehicleLength="+vehicleLength+"&vehicleWidth="+vehicleWidth+"&vehicleHeight="+vehicleHeight+"&vehicleCommercial="+vehicleCommercial+"&vehicleLoadType=" + (vehicleLoadType==null? "" : System.Uri.EscapeDataString(vehicleLoadType))+"&vehicleEngineType=" + vehicleEngineType+"&constantSpeedConsumptionInLitersPerHundredkm=" + (constantSpeedConsumptionInLitersPerHundredkm==null? "" : System.Uri.EscapeDataString(constantSpeedConsumptionInLitersPerHundredkm))+"&currentFuelInLiters="+currentFuelInLiters+"&auxiliaryPowerInLitersPerHour="+auxiliaryPowerInLitersPerHour+"&fuelEnergyDensityInMJoulesPerLiter="+fuelEnergyDensityInMJoulesPerLiter+"&accelerationEfficiency="+accelerationEfficiency+"&decelerationEfficiency="+decelerationEfficiency+"&uphillEfficiency="+uphillEfficiency+"&downhillEfficiency="+downhillEfficiency+"&constantSpeedConsumptionInkWhPerHundredkm=" + (constantSpeedConsumptionInkWhPerHundredkm==null? "" : System.Uri.EscapeDataString(constantSpeedConsumptionInkWhPerHundredkm));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		jsonp = 2,
	}
	
	public enum RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmReport
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		effectiveSettings = 0,
	}
	
	public enum RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmRouteType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fastest = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		shortest = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		eco = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		thrilling = 3,
	}
	
	public enum RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmTravelMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		car = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		truck = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		taxi = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bus = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		van = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		motorcycle = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bicycle = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pedestrian = 7,
	}
	
	public enum RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmHilliness
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		low = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		normal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		high = 2,
	}
	
	public enum RoutingGetByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmVehicleEngineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		combustion = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		electric = 1,
	}
	
	public enum RoutingPostByVersionNumberAndOriginAndContentTypeAndFuelBudgetInLitersAndEnergyBudgetInkWhAndTimeBudgetInSecAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndVehicleEngineTypeAndConstantSpeedConsumptionInkWhPerHundredkmVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum RoutingGetByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public enum RoutingGetByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmAlternativeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		anyRoute = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		betterRoute = 1,
	}
	
	public enum RoutingGetByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmInstructionsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		coded = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tagged = 2,
	}
	
	public enum RoutingGetByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmRouteRepresentation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		polyline = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 1,
	}
	
	public enum RoutingGetByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmComputeTravelTimeFor
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		all = 1,
	}
	
	public enum RoutingPostByVersionNumberAndLocationsAndContentTypeAndMaxAlternativesAndAlternativeTypeAndMinDeviationDistanceAndMinDeviationTimeAndInstructionsTypeAndLanguageAndComputeBestOrderAndRouteRepresentationAndComputeTravelTimeForAndVehicleHeadingAndSectionTypeAndCallbackAndReportAndDepartAtAndArriveAtAndRouteTypeAndTrafficAndAvoidAndTravelModeAndHillinessAndWindingnessAndVehicleMaxSpeedAndVehicleWeightAndVehicleAxleWeightAndVehicleLengthAndVehicleWidthAndVehicleHeightAndVehicleCommercialAndVehicleLoadTypeAndVehicleEngineTypeAndConstantSpeedConsumptionInLitersPerHundredkmAndCurrentFuelInLitersAndAuxiliaryPowerInLitersPerHourAndFuelEnergyDensityInMJoulesPerLiterAndAccelerationEfficiencyAndDecelerationEfficiencyAndUphillEfficiencyAndDownhillEfficiencyAndConstantSpeedConsumptionInkWhPerHundredkmVersionNumber
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
