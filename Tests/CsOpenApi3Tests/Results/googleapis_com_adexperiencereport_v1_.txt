//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A site's Ad Experience Report summary on a single platform.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlatformSummary
	{
		
		/// <summary>
		/// The site's Ad Experience Report status on this platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="betterAdsStatus")]
		public System.Nullable<PlatformSummaryBetterAdsStatus> BetterAdsStatus { get; set; }
		
		/// <summary>
		/// The time at which [enforcement](https://support.google.com/webtools/answer/7308033) against the site began or will begin on this platform. Not set when the filter_status is OFF.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enforcementTime")]
		public string EnforcementTime { get; set; }
		
		/// <summary>
		/// The site's [enforcement status](https://support.google.com/webtools/answer/7308033) on this platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterStatus")]
		public System.Nullable<PlatformSummaryFilterStatus> FilterStatus { get; set; }
		
		/// <summary>
		/// The time at which the site's status last changed on this platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastChangeTime")]
		public string LastChangeTime { get; set; }
		
		/// <summary>
		/// The site's regions on this platform. No longer populated, because there is no longer any semantic difference between sites in different regions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string[] Region { get; set; }
		
		/// <summary>
		/// A link to the full Ad Experience Report for the site on this platform.. Not set in ViolatingSitesResponse. Note that you must complete the [Search Console verification process](https://support.google.com/webmasters/answer/9008080) for the site before you can access the full report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportUrl")]
		public string ReportUrl { get; set; }
		
		/// <summary>
		/// Whether the site is currently under review on this platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="underReview")]
		public System.Nullable<System.Boolean> UnderReview { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PlatformSummaryBetterAdsStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PASSING")]
		PASSING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WARNING")]
		WARNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILING")]
		FAILING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PlatformSummaryFilterStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ON")]
		ON = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OFF")]
		OFF = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PAUSED")]
		PAUSED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 4,
	}
	
	/// <summary>
	/// Response message for GetSiteSummary.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SiteSummaryResponse
	{
		
		/// <summary>
		/// A site's Ad Experience Report summary on a single platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="desktopSummary")]
		public PlatformSummary DesktopSummary { get; set; }
		
		/// <summary>
		/// A site's Ad Experience Report summary on a single platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileSummary")]
		public PlatformSummary MobileSummary { get; set; }
		
		/// <summary>
		/// The name of the reviewed site, e.g. `google.com`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewedSite")]
		public string ReviewedSite { get; set; }
	}
	
	/// <summary>
	/// Response message for ListViolatingSites.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ViolatingSitesResponse
	{
		
		/// <summary>
		/// The list of violating sites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="violatingSites")]
		public SiteSummaryResponse[] ViolatingSites { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists sites that are failing in the Ad Experience Report on at least one platform.
		/// Adexperiencereport_violatingSites_list v1/violatingSites
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<ViolatingSitesResponse> Adexperiencereport_violatingSites_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/violatingSites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ViolatingSitesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a site's Ad Experience Report summary.
		/// Adexperiencereport_sites_get v1/{name}
		/// </summary>
		/// <param name="name">Required. The name of the site whose summary to get, e.g. `sites/http%3A%2F%2Fwww.google.com%2F`. Format: `sites/{site}`</param>
		/// <returns>Successful response</returns>
		public async Task<SiteSummaryResponse> Adexperiencereport_sites_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SiteSummaryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
