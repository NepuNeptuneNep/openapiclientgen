//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddressInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="addressLine1")]
		public string AddressLine1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addressLine2")]
		public string AddressLine2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddressUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="addressLine1")]
		public string AddressLine1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addressLine2")]
		public string AddressLine2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddressViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="addressLine1")]
		public string AddressLine1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="addressLine2")]
		public string AddressLine2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postalCode")]
		public string PostalCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppoinmentBookingFormsViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="bookingConfirmationPage")]
		public string BookingConfirmationPage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingForm")]
		public string BookingForm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentAuditViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="appointmentId")]
		public string AppointmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modificationType")]
		public string ModificationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedBy")]
		public string ModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedOn")]
		public string ModifiedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notesAfter")]
		public string NotesAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notesBefore")]
		public string NotesBefore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusAfter")]
		public string StatusAfter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusBefore")]
		public string StatusBefore { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentBookModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="appointmentBookingFields")]
		public BookingFieldItem[] AppointmentBookingFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public CustomFieldInputModel CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerBookingFields")]
		public BookingFieldItem[] CustomerBookingFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerMessage")]
		public string CustomerMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupSize")]
		public System.Nullable<System.Int32> GroupSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneExt")]
		public string PhoneExt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneType")]
		public string PhoneType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BookingFieldItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="field1")]
		public string Field1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field10")]
		public string Field10 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field2")]
		public string Field2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field3")]
		public string Field3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field4")]
		public string Field4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field5")]
		public string Field5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field6")]
		public string Field6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field7")]
		public string Field7 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field8")]
		public string Field8 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field9")]
		public string Field9 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentCustomerViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="appointmentId")]
		public string AppointmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentInitialModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="appointmentBookingFields")]
		public BookingFieldItem[] AppointmentBookingFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookedBy")]
		public string BookedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingWindowId")]
		public string BookingWindowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendarId")]
		public string CalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public CustomFieldInputModel CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerBookingFields")]
		public BookingFieldItem[] CustomerBookingFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerMessage")]
		public string CustomerMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupSize")]
		public System.Nullable<System.Int32> GroupSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneType")]
		public string PhoneType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceGroupId")]
		public string ResourceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceIds")]
		public string ResourceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceAllocationId")]
		public string ServiceAllocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneName")]
		public string TimezoneName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelAppointmentId")]
		public string TravelAppointmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelTimeMins")]
		public System.Nullable<System.Int32> TravelTimeMins { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentInitialViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="appointmentBookingFields")]
		public BookingFieldViewModel[] AppointmentBookingFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="auditTrail")]
		public AppointmentAuditViewModel[] AuditTrail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookedBy")]
		public string BookedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingForms")]
		public AppoinmentBookingFormsViewModel BookingForms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessName")]
		public string BusinessName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendarId")]
		public string CalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmationNumber")]
		public string ConfirmationNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmed")]
		public System.Nullable<System.Boolean> Confirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public string CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public System.Collections.Generic.Dictionary<string, CustomFieldViewModel> CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerBookingFields")]
		public BookingFieldViewModel[] CustomerBookingFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerMessage")]
		public string CustomerMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customers")]
		public AppointmentCustomerViewModel[] Customers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateInternational")]
		public string DateInternational { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downloadIcsUrl")]
		public string DownloadIcsUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailConfirmationSent")]
		public string EmailConfirmationSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailReminderSent")]
		public string EmailReminderSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public string EndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupSize")]
		public System.Nullable<System.Int32> GroupSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedBy")]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedOn")]
		public string LastModifiedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onlineBooking")]
		public System.Nullable<System.Boolean> OnlineBooking { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentStatus")]
		public System.Nullable<System.Int32> PaymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneExt")]
		public string PhoneExt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneType")]
		public string PhoneType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rescheduledId")]
		public string RescheduledId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceEmail")]
		public string ResourceEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceGroupId")]
		public string ResourceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceGroupName")]
		public string ResourceGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceImageUrl")]
		public string ResourceImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public AppointmentResourceViewModel[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceAllocationId")]
		public string ServiceAllocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceImageUrl")]
		public string ServiceImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsConfirmationSent")]
		public string SmsConfirmationSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsReminderSent")]
		public string SmsReminderSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public string StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripeChargeId")]
		public string StripeChargeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripeRefundId")]
		public string StripeRefundId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int32> Time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public System.Nullable<System.Int32> Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneIana")]
		public string TimezoneIana { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneId")]
		public string TimezoneId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BookingFieldViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessId")]
		public string BusinessId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyId")]
		public string CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fieldLabel")]
		public string FieldLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fieldLength")]
		public System.Nullable<System.Int32> FieldLength { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fieldListItems")]
		public BookingFieldListItemViewModel[] FieldListItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fieldName")]
		public string FieldName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fieldRequired")]
		public System.Nullable<System.Boolean> FieldRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fieldType")]
		public string FieldType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leadQuestion")]
		public System.Nullable<System.Boolean> LeadQuestion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leadQuestionWeight")]
		public System.Nullable<System.Double> LeadQuestionWeight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortKey")]
		public System.Nullable<System.Int32> SortKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BookingFieldListItemViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leadAnswerScore")]
		public System.Nullable<System.Int32> LeadAnswerScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leadRoutingEntityId")]
		public System.Nullable<System.Int32> LeadRoutingEntityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leadRoutingEntityType")]
		public string LeadRoutingEntityType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentResourceViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="appointmentId")]
		public string AppointmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceEmail")]
		public string ResourceEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceGroupId")]
		public string ResourceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceImageUrl")]
		public string ResourceImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public AppointmentViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="auditTrail")]
		public AppointmentAuditViewModel[] AuditTrail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookedBy")]
		public string BookedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessName")]
		public string BusinessName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendarId")]
		public string CalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmationNumber")]
		public string ConfirmationNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="confirmed")]
		public System.Nullable<System.Boolean> Confirmed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createDate")]
		public string CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public System.Collections.Generic.Dictionary<string, CustomFieldViewModel> CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerId")]
		public string CustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerMessage")]
		public string CustomerMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customers")]
		public AppointmentCustomerViewModel[] Customers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateInternational")]
		public string DateInternational { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="downloadIcsUrl")]
		public string DownloadIcsUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailConfirmationSent")]
		public string EmailConfirmationSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailReminderSent")]
		public string EmailReminderSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public string EndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupSize")]
		public System.Nullable<System.Int32> GroupSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedBy")]
		public string LastModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastModifiedOn")]
		public string LastModifiedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="onlineBooking")]
		public System.Nullable<System.Boolean> OnlineBooking { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="paymentStatus")]
		public System.Nullable<System.Int32> PaymentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneExt")]
		public string PhoneExt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneType")]
		public string PhoneType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rescheduledId")]
		public string RescheduledId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceEmail")]
		public string ResourceEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceGroupId")]
		public string ResourceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceGroupName")]
		public string ResourceGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceImageUrl")]
		public string ResourceImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public AppointmentResourceViewModel[] Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceAllocationId")]
		public string ServiceAllocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceImageUrl")]
		public string ServiceImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsConfirmationSent")]
		public string SmsConfirmationSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsReminderSent")]
		public string SmsReminderSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public string StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripeChargeId")]
		public string StripeChargeId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripeRefundId")]
		public string StripeRefundId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int32> Time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public System.Nullable<System.Int32> Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneIana")]
		public string TimezoneIana { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneId")]
		public string TimezoneId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentNoShowModel
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentReminderViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="emailFirstReminder")]
		public System.Nullable<System.Int32> EmailFirstReminder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailFirstReminderInterval")]
		public System.Nullable<System.Int32> EmailFirstReminderInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailSecondReminder")]
		public System.Nullable<System.Int32> EmailSecondReminder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailSecondReminderInterval")]
		public System.Nullable<System.Int32> EmailSecondReminderInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsFirstReminder")]
		public System.Nullable<System.Int32> SmsFirstReminder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsFirstReminderInterval")]
		public System.Nullable<System.Int32> SmsFirstReminderInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsSecondReminder")]
		public System.Nullable<System.Int32> SmsSecondReminder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="smsSecondReminderInterval")]
		public System.Nullable<System.Int32> SmsSecondReminderInterval { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentRescheduleModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public System.Nullable<System.DateTimeOffset> EndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceIds")]
		public string ResourceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public System.Nullable<System.DateTimeOffset> StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelAppointmentId")]
		public string TravelAppointmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelTimeMins")]
		public System.Nullable<System.Int32> TravelTimeMins { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppointmentReserveModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="appointmentBookingFields")]
		public BookingFieldItem[] AppointmentBookingFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public CustomFieldInputModel CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerBookingFields")]
		public BookingFieldItem[] CustomerBookingFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerMessage")]
		public string CustomerMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneExt")]
		public string PhoneExt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneType")]
		public string PhoneType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailabilityDayViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="availableDays")]
		public AvailableDayViewModel[] AvailableDays { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceDescription")]
		public string ResourceDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceDescription")]
		public string ServiceDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tzRequested")]
		public System.Nullable<System.Int32> TzRequested { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailableDayViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="available")]
		public System.Nullable<System.Boolean> Available { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingCount")]
		public System.Nullable<System.Int32> BookingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingLimit")]
		public System.Nullable<System.Int32> BookingLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closed")]
		public System.Nullable<System.Boolean> Closed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public System.Nullable<System.Int32> ReasonCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailabilityViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="availableDays")]
		public AvailableDayViewModel[] AvailableDays { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availableTimes")]
		public AvailableTimeViewModel[] AvailableTimes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessName")]
		public string BusinessName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendarId")]
		public string CalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendarResourceGroupId")]
		public string CalendarResourceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstAvailableDate")]
		public string FirstAvailableDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceDescription")]
		public string ResourceDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceIds")]
		public string ResourceIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceDescription")]
		public string ServiceDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceDuration")]
		public System.Nullable<System.Int32> ServiceDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		/// <summary>
		/// Returns the Timezone Name in IANA format if a TimezoneName was passed into an Availability call; otherwise this property is hidden
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezoneName")]
		public string TimezoneName { get; set; }
		
		/// <summary>
		/// Returns the timezone offset if a tzOffset was supplied into an Availability call; null if a TimezoneName was passed; otherwise the Business timezone offset is returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tzRequested")]
		public System.Nullable<System.Int32> TzRequested { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AvailableTimeViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="allowableBookings")]
		public System.Nullable<System.Int32> AllowableBookings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="allowableCapacity")]
		public System.Nullable<System.Int32> AllowableCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availableBookings")]
		public System.Nullable<System.Int32> AvailableBookings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availableCapacity")]
		public System.Nullable<System.Int32> AvailableCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayTime")]
		public string DisplayTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public string EndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public string StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int32> Time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelAppointmentId")]
		public string TravelAppointmentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travelTimeMins")]
		public System.Nullable<System.Int32> TravelTimeMins { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BookingFieldListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="bookingFields")]
		public BookingFieldViewModel[] BookingFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessDefaultsViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="autoUpdateCustomer")]
		public System.Nullable<System.Boolean> AutoUpdateCustomer { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessNotification")]
		public System.Nullable<System.Boolean> BusinessNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerCity")]
		public System.Nullable<System.Boolean> CustomerCity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerState")]
		public System.Nullable<System.Boolean> CustomerState { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailInfo")]
		public System.Nullable<System.Boolean> EmailInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableUtcTimezone")]
		public System.Nullable<System.Boolean> EnableUtcTimezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessHolidayViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessClosed")]
		public System.Nullable<System.Boolean> BusinessClosed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="holidayName")]
		public string HolidayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publicHolidayId")]
		public System.Nullable<System.Int32> PublicHolidayId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessHourViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is24Hours")]
		public System.Nullable<System.Boolean> Is24Hours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isOpen")]
		public System.Nullable<System.Boolean> IsOpen { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessHoursViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="fri")]
		public BusinessHourViewModel Fri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mon")]
		public BusinessHourViewModel Mon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sat")]
		public BusinessHourViewModel Sat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sun")]
		public BusinessHourViewModel Sun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thu")]
		public BusinessHourViewModel Thu { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tue")]
		public BusinessHourViewModel Tue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wed")]
		public BusinessHourViewModel Wed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessServiceViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public System.Nullable<System.Int32> ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessPhone")]
		public string BusinessPhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessPhoneExt")]
		public string BusinessPhoneExt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conferenceInfo")]
		public string ConferenceInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homePhone")]
		public string HomePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobilePhone")]
		public string MobilePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferredPhoneType")]
		public string PreferredPhoneType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skypeUsername")]
		public string SkypeUsername { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessPhone")]
		public string BusinessPhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessPhoneExt")]
		public string BusinessPhoneExt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conferenceInfo")]
		public string ConferenceInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homePhone")]
		public string HomePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobilePhone")]
		public string MobilePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="preferredPhoneType")]
		public string PreferredPhoneType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skypeUsername")]
		public string SkypeUsername { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContactViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessPhone")]
		public string BusinessPhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessPhoneExt")]
		public string BusinessPhoneExt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="conferenceInfo")]
		public string ConferenceInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homePhone")]
		public string HomePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobilePhone")]
		public string MobilePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneType")]
		public string PhoneType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skypeUsername")]
		public string SkypeUsername { get; set; }
	}
	
	/// <summary>
	/// View model for country objects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CountryViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldDefinitionListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public CustomFieldDefinitionViewModel[] CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldDefinitionViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="fieldKey")]
		public string FieldKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fieldLabel")]
		public string FieldLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fieldLength")]
		public System.Nullable<System.Int32> FieldLength { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fieldListItems")]
		public CustomFieldListDefinitionViewModel[] FieldListItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fieldName")]
		public string FieldName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fieldPublic")]
		public System.Nullable<System.Boolean> FieldPublic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fieldRequired")]
		public System.Nullable<System.Boolean> FieldRequired { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fieldType")]
		public string FieldType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leadQuestion")]
		public System.Nullable<System.Boolean> LeadQuestion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leadQuestionWeight")]
		public System.Nullable<System.Double> LeadQuestionWeight { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortKey")]
		public System.Nullable<System.Int32> SortKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldListDefinitionViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leadAnswerScore")]
		public System.Nullable<System.Int32> LeadAnswerScore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leadRoutingEntityId")]
		public System.Nullable<System.Int32> LeadRoutingEntityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="leadRoutingEntityType")]
		public string LeadRoutingEntityType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomFieldUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="field1")]
		public string Field1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field10")]
		public string Field10 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field2")]
		public string Field2 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field3")]
		public string Field3 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field4")]
		public string Field4 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field5")]
		public string Field5 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field6")]
		public string Field6 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field7")]
		public string Field7 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field8")]
		public string Field8 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="field9")]
		public string Field9 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerInputModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressInputModel Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ContactInputModel Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public CustomFieldInputModel CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// 0 = default(Email), 1 = Email, 2 = SMS, 3 = Email and SMS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationType")]
		public string NotificationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sendLeadNotification")]
		public System.Nullable<System.Boolean> SendLeadNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripeCustomerId")]
		public string StripeCustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<System.Int32> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public CustomerViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressViewModel Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="birthdate")]
		public string Birthdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessName")]
		public string BusinessName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ContactViewModel Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdBy")]
		public string CreatedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdOn")]
		public string CreatedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public System.Collections.Generic.Dictionary<string, CustomFieldViewModel> CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedStatus")]
		public System.Nullable<System.Boolean> DeletedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedTime")]
		public string DeletedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disabled")]
		public System.Nullable<System.Boolean> Disabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailInfo")]
		public System.Nullable<System.Boolean> EmailInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="emailPromotion")]
		public System.Nullable<System.Boolean> EmailPromotion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inviteEmailSent")]
		public string InviteEmailSent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastVisitDate")]
		public string LastVisitDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public string Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public string Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedBy")]
		public string ModifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modifiedOn")]
		public string ModifiedOn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationType")]
		public string NotificationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registeredBy")]
		public string RegisteredBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registrationDate")]
		public string RegistrationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripeCustomerId")]
		public string StripeCustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subscriptionId")]
		public string SubscriptionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verificationDate")]
		public string VerificationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verifiedBy")]
		public string VerifiedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="welcomeEmailSent")]
		public string WelcomeEmailSent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomerUpdateModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressUpdateModel Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ContactUpdateModel Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public CustomFieldUpdateModel CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstname")]
		public string Firstname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastname")]
		public string Lastname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// 0 = default(Email), 1 = Email, 2 = SMS, 3 = Email and SMS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notificationType")]
		public string NotificationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stripeCustomerId")]
		public string StripeCustomerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<System.Int32> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public LocationViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LocationViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressViewModel Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adminEmail")]
		public string AdminEmail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="adminName")]
		public string AdminName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appointmentReminders")]
		public AppointmentReminderViewModel AppointmentReminders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessHolidays")]
		public BusinessHolidayViewModel[] BusinessHolidays { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessHours")]
		public BusinessHoursViewModel BusinessHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyId")]
		public string CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyName")]
		public string CompanyName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaults")]
		public BusinessDefaultsViewModel Defaults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fax")]
		public string Fax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="friendlyId")]
		public string FriendlyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primaryBusiness")]
		public System.Nullable<System.Boolean> PrimaryBusiness { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primaryCalendarId")]
		public string PrimaryCalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="regionId")]
		public string RegionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="services")]
		public BusinessServiceViewModel[] Services { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public OnlineSettingsViewModel Settings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneIana")]
		public string TimezoneIana { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneId")]
		public string TimezoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneOffset")]
		public System.Nullable<System.Int32> TimezoneOffset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="travel")]
		public TravelViewModel Travel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OnlineSettingsViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="availabilityForm")]
		public System.Nullable<System.Int32> AvailabilityForm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookAheadUnit")]
		public System.Nullable<System.Int32> BookAheadUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookAheadValue")]
		public System.Nullable<System.Int32> BookAheadValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookInAdvance")]
		public System.Nullable<System.Int32> BookInAdvance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookWithAccount")]
		public System.Nullable<System.Boolean> BookWithAccount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingConfirmationMessage")]
		public string BookingConfirmationMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingMessage")]
		public string BookingMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingPolicy")]
		public string BookingPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingTimerMins")]
		public System.Nullable<System.Int32> BookingTimerMins { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessId")]
		public string BusinessId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyId")]
		public string CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerBookingsPerDay")]
		public System.Nullable<System.Int32> CustomerBookingsPerDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customerVerification")]
		public System.Nullable<System.Boolean> CustomerVerification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultService")]
		public System.Nullable<System.Boolean> DefaultService { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultToCustomerTimezone")]
		public System.Nullable<System.Boolean> DefaultToCustomerTimezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disableAuthorization")]
		public System.Nullable<System.Boolean> DisableAuthorization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableWorldTimezones")]
		public System.Nullable<System.Boolean> EnableWorldTimezones { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enabled")]
		public System.Nullable<System.Boolean> Enabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="familyMembersEnabled")]
		public System.Nullable<System.Boolean> FamilyMembersEnabled { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstAvailable")]
		public System.Nullable<System.Boolean> FirstAvailable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formFlow")]
		public System.Nullable<System.Int32> FormFlow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideBreadCrumbNav")]
		public System.Nullable<System.Boolean> HideBreadCrumbNav { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideContinueBooking")]
		public System.Nullable<System.Boolean> HideContinueBooking { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideLocationNav")]
		public System.Nullable<System.Boolean> HideLocationNav { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideNavBar")]
		public System.Nullable<System.Boolean> HideNavBar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideServiceGroupsNav")]
		public System.Nullable<System.Boolean> HideServiceGroupsNav { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hideServicesNav")]
		public System.Nullable<System.Boolean> HideServicesNav { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lateCancelAction")]
		public System.Nullable<System.Int32> LateCancelAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lateCancelHours")]
		public System.Nullable<System.Int32> LateCancelHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lateRescheduleAction")]
		public System.Nullable<System.Int32> LateRescheduleAction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lateRescheduleHours")]
		public System.Nullable<System.Int32> LateRescheduleHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="liveMode")]
		public System.Nullable<System.Boolean> LiveMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceAnyLabel")]
		public string ResourceAnyLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceLabel")]
		public string ResourceLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceSelection")]
		public System.Nullable<System.Boolean> ResourceSelection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnToAvailability")]
		public System.Nullable<System.Boolean> ReturnToAvailability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="returnToService")]
		public System.Nullable<System.Boolean> ReturnToService { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceLabel")]
		public string ServiceLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showBusinessLogo")]
		public System.Nullable<System.Boolean> ShowBusinessLogo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showOnSchedLogo")]
		public System.Nullable<System.Boolean> ShowOnSchedLogo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showServiceGroups")]
		public System.Nullable<System.Boolean> ShowServiceGroups { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TravelViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public string Distance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="proximity")]
		public string Proximity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startAddress")]
		public string StartAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startLat")]
		public string StartLat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startLon")]
		public string StartLon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PhoneViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessPhone")]
		public string BusinessPhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="businessPhoneExt")]
		public string BusinessPhoneExt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homePhone")]
		public string HomePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobilePhone")]
		public string MobilePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="phoneType")]
		public string PhoneType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RepeatViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public string Frequency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interval")]
		public System.Nullable<System.Int32> Interval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthDay")]
		public string MonthDay { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthType")]
		public string MonthType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="weekdays")]
		public string Weekdays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceGroupListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ResourceGroupViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceGroupViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="bookingNotification")]
		public System.Nullable<System.Int32> BookingNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedStatus")]
		public System.Nullable<System.Boolean> DeletedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedTime")]
		public System.Nullable<System.DateTimeOffset> DeletedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceHourViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceHoursViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="fri")]
		public ResourceHourViewModel Fri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mon")]
		public ResourceHourViewModel Mon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sat")]
		public ResourceHourViewModel Sat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sun")]
		public ResourceHourViewModel Sun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thu")]
		public ResourceHourViewModel Thu { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tue")]
		public ResourceHourViewModel Tue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wed")]
		public ResourceHourViewModel Wed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ResourceViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public AddressViewModel Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public ResourceHoursViewModel Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bioLink")]
		public string BioLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingNotification")]
		public System.Nullable<System.Int32> BookingNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendarAvailability")]
		public System.Nullable<System.Int32> CalendarAvailability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contact")]
		public ContactViewModel Contact { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public CustomFieldInputModel CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedStatus")]
		public System.Nullable<System.Boolean> DeletedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedTime")]
		public System.Nullable<System.DateTimeOffset> DeletedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="effectiveDate")]
		public System.Nullable<System.DateTimeOffset> EffectiveDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="googleCalendarId")]
		public string GoogleCalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hourly")]
		public System.Nullable<System.Double> Hourly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ignoreBusinessHours")]
		public System.Nullable<System.Boolean> IgnoreBusinessHours { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationType")]
		public System.Nullable<System.Int32> NotificationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outlookCalendarId")]
		public string OutlookCalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurringAvailability")]
		public System.Nullable<System.Boolean> RecurringAvailability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="services")]
		public ResourceServiceViewModel[] Services { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="skypeName")]
		public string SkypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sortKey")]
		public System.Nullable<System.Int32> SortKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneIana")]
		public string TimezoneIana { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneId")]
		public string TimezoneId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneOffset")]
		public System.Nullable<System.Int32> TimezoneOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceServiceViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public System.Nullable<System.Int32> ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public System.Nullable<System.Int32> ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceServiceListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ResourceServiceViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceAllocationListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ServiceAllocationViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceAllocationViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="bookingCount")]
		public System.Nullable<System.Int32> BookingCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingLimit")]
		public System.Nullable<System.Int32> BookingLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedStatus")]
		public System.Nullable<System.Boolean> DeletedStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deletedTime")]
		public string DeletedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeat")]
		public RepeatViewModel Repeat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Boolean> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceAddress")]
		public AddressViewModel ResourceAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceDescription")]
		public string ResourceDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceImageUrl")]
		public string ResourceImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourcePhone")]
		public PhoneViewModel ResourcePhone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceDescription")]
		public string ServiceDescription { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceDuration")]
		public System.Nullable<System.Int32> ServiceDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceImageUrl")]
		public string ServiceImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneName")]
		public string TimezoneName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezoneOffset")]
		public System.Nullable<System.Int32> TimezoneOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceGroupListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ServiceGroupViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceGroupViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="companyId")]
		public string CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isDeleted")]
		public System.Nullable<System.Boolean> IsDeleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<System.Int32> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceHourViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.Int32> EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.Int32> StartTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceHoursViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="fri")]
		public ServiceHourViewModel Fri { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mon")]
		public ServiceHourViewModel Mon { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sat")]
		public ServiceHourViewModel Sat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sun")]
		public ServiceHourViewModel Sun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thu")]
		public ServiceHourViewModel Thu { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tue")]
		public ServiceHourViewModel Tue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="wed")]
		public ServiceHourViewModel Wed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ServiceViewModel[] Data { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hasMore")]
		public System.Nullable<System.Boolean> HasMore { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="availability")]
		public ServiceHoursViewModel Availability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookAheadUnit")]
		public System.Nullable<System.Int32> BookAheadUnit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookAheadValue")]
		public System.Nullable<System.Int32> BookAheadValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookInAdvance")]
		public System.Nullable<System.Int32> BookInAdvance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingInterval")]
		public System.Nullable<System.Int32> BookingInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bookingLimit")]
		public System.Nullable<System.Int32> BookingLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendarId")]
		public string CalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="calendarResourceGroupId")]
		public string CalendarResourceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancellationFeeAmount")]
		public System.Nullable<System.Double> CancellationFeeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancellationFeeTaxable")]
		public System.Nullable<System.Boolean> CancellationFeeTaxable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="companyId")]
		public string CompanyId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consumerPadding")]
		public System.Nullable<System.Boolean> ConsumerPadding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customFields")]
		public CustomFieldInputModel CustomFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dailyBookingLimitCount")]
		public System.Nullable<System.Int32> DailyBookingLimitCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dailyBookingLimitMinutes")]
		public System.Nullable<System.Int32> DailyBookingLimitMinutes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultService")]
		public System.Nullable<System.Boolean> DefaultService { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int32> Duration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationInterval")]
		public System.Nullable<System.Int32> DurationInterval { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationMax")]
		public System.Nullable<System.Int32> DurationMax { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationMin")]
		public System.Nullable<System.Int32> DurationMin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="durationSelect")]
		public System.Nullable<System.Boolean> DurationSelect { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feeAmount")]
		public System.Nullable<System.Double> FeeAmount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="feeTaxable")]
		public System.Nullable<System.Boolean> FeeTaxable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="imageUrl")]
		public string ImageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxBookingLimit")]
		public System.Nullable<System.Int32> MaxBookingLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxCapacity")]
		public System.Nullable<System.Int32> MaxCapacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxGroupSize")]
		public System.Nullable<System.Int32> MaxGroupSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResourceBookingLimit")]
		public System.Nullable<System.Int32> MaxResourceBookingLimit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mediaPageUrl")]
		public string MediaPageUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nonRefundable")]
		public System.Nullable<System.Boolean> NonRefundable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="padding")]
		public System.Nullable<System.Int32> Padding { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roundRobin")]
		public System.Nullable<System.Int32> RoundRobin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceGroupId")]
		public System.Nullable<System.Int32> ServiceGroupId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceGroupName")]
		public string ServiceGroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="showOnline")]
		public System.Nullable<System.Boolean> ShowOnline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServiceSortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="natural")]
		natural = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="name")]
		name = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServicesScope
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="company")]
		company = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="location")]
		location = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 2,
	}
	
	/// <summary>
	/// View model for state object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StateViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="countryName")]
		public string CountryName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnavailableTimeListViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public string Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unavailableTimes")]
		public UnavailableTimeViewModel[] UnavailableTimes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnavailableTimeViewModel
	{
		
		[System.Runtime.Serialization.DataMember(Name="calendarId")]
		public string CalendarId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endDateTime")]
		public string EndDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entityId")]
		public System.Nullable<System.Int32> EntityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="entityType")]
		public string EntityType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fromTime")]
		public System.Nullable<System.Int32> FromTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="locationId")]
		public string LocationId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="objectName")]
		public string ObjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reasonCode")]
		public string ReasonCode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceId")]
		public string ResourceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serviceName")]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startDateTime")]
		public string StartDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toTime")]
		public System.Nullable<System.Int32> ToTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tzOffset")]
		public System.Nullable<System.Int32> TzOffset { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get Appointments
		/// <p>Use this endpoint to return a <b>List of Appointments</b>. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. For more information: <a href="https://onsched.readme.io/docs/appointments-overview">Appointments Overview</a></p>
		/// ConsumerV1AppointmentsGetByLocationIdAndEmailAndLastnameAndPhoneAndServiceIdAndCalendarIdAndResourceIdAndCustomerIdAndServiceAllocationIdAndStartDateAndEndDateAndStatusAndBookedByAndOffsetAndLimit consumer/v1/appointments
		/// </summary>
		/// <param name="locationId">id of business location</param>
		/// <param name="email">Filter by email address</param>
		/// <param name="lastname">Filter by lastname or part of it</param>
		/// <param name="phone">Filter by phone number or part of it</param>
		/// <param name="serviceId">Filter by service</param>
		/// <param name="calendarId">Filter by calendar</param>
		/// <param name="resourceId">Filter by resource</param>
		/// <param name="customerId">Filter by customer</param>
		/// <param name="serviceAllocationId">Filter by service allocation</param>
		/// <param name="startDate">Format YYYY-MM-DD. Filter by on/after startDate</param>
		/// <param name="endDate">Format YYYY-MM-DD. Filter on/before endDate</param>
		/// <param name="status">Filter by status: IN, BK, CN, RE, RS</param>
		/// <param name="bookedBy">Filter by the email of who booked</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit, default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<AppointmentListViewModel> ConsumerV1AppointmentsGetByLocationIdAndEmailAndLastnameAndPhoneAndServiceIdAndCalendarIdAndResourceIdAndCustomerIdAndServiceAllocationIdAndStartDateAndEndDateAndStatusAndBookedByAndOffsetAndLimitAsync(
					string locationId, 
					string email, 
					string lastname, 
					string phone, 
					string serviceId, 
					string calendarId, 
					string resourceId, 
					string customerId, 
					string serviceAllocationId, 
					System.DateTimeOffset startDate, 
					System.DateTimeOffset endDate, 
					string status, 
					string bookedBy, 
					int offset, 
					int limit, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/appointments?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&lastname=" + (lastname==null? "" : System.Uri.EscapeDataString(lastname))+"&phone=" + (phone==null? "" : System.Uri.EscapeDataString(phone))+"&serviceId=" + (serviceId==null? "" : System.Uri.EscapeDataString(serviceId))+"&calendarId=" + (calendarId==null? "" : System.Uri.EscapeDataString(calendarId))+"&resourceId=" + (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"&customerId=" + (customerId==null? "" : System.Uri.EscapeDataString(customerId))+"&serviceAllocationId=" + (serviceAllocationId==null? "" : System.Uri.EscapeDataString(serviceAllocationId))+"&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&status=" + (status==null? "" : System.Uri.EscapeDataString(status))+"&bookedBy=" + (bookedBy==null? "" : System.Uri.EscapeDataString(bookedBy))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppointmentListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Appointment
		/// <p>Use this endpoint to <b>Create</b> a new appointment. The appointment will be created with an "IN", Initial status. Posting an appointment with "IN" status requires minimal information and requires a "PUT book" call to complete the booking transaction, <i>PUT ​/consumer​/v1​/appointments​/{id}​/book</i>. Alternatively, you can post an appointment using the <b>completeBooking</b> option which completes the booking in one transaction, but it will require more data. The method you choose depends on your solutions workflow. </p>
		/// <p>
		/// <b>StartDateTime</b> and <b>EndDateTime</b> are required. Use the ISO 8601 format for DateTime Timezone, e.g., <b>2016-10-30T09:00:00-5:00</b></p>
		/// <p>A valid <b>serviceId</b> is required. The serviceId provided must be valid for the location being booked. A valid serviceId is one that is scoped to a Primary Company Location or is associated with a Business Location</p>
		/// <p>OPTIONAL FIELDS INCLUDE: </p>
		/// <p>
		/// <b>locationId</b> - if not supplied, the appointment will be posted to the primary business location. If you support multiple location, we recommend always supplying the locationId. </p>
		/// <p>
		/// <b>resourceId</b> - not required when posting with an "IN" status but is required when the appointment is booked. Use <i>GET /consumer/v1/resources</i> for a list of resources. </p>
		/// <p>
		/// <b>customerId</b> - if supplied the name and email will be retrieved from the customer record. </p>
		/// <p>
		/// <b>BookedBy</b> - if not supplied the email address of the booked appointment is used or the ip address if no email address is provided. BookedBy is used in the Appointment Audit trail which can be viewed in the appointment object.</p>
		/// <p>
		/// <b>Location</b> - is a string value representing the location of the appointment. It provides no added functionality in OnSched and should not be confused with locationId.</p>
		/// <p>
		/// <b>TimezoneName</b> - if used timezoneName must be in IANA format, <i>America/New_York</i>. This is the timezone the appointment was booked in. Populating this information can help later in situations where appointments are booked before a Daylight Savings change. If no timezoneName is supplied, the Business Locations timezone will be used.</p>
		/// <p>
		/// <b>COMPLETE BOOKING:</b> This parameter provides a mechanism for immediate booking with the POST appointment endpoint. To complete the booking in one transaction, populate the <b>completeBooking</b> parameter with a "BK", booked or an "RS", reserved status and provide an (<b>email</b> and <b>name</b>) or a <b>customerId</b> in the post body. Doing so will book the appointment and send notifications all in one transaction. <b>Note:</b> "IN" can also be used as a completeBooking option to support payment flows. With the "IN" option, notifications are NOT sent.</p>
		/// <p>For more information: <a href="https://onsched.readme.io/docs/appointments-overview">Appointments Overview</a></p>
		/// ConsumerV1AppointmentsPostByCompleteBooking consumer/v1/appointments
		/// </summary>
		/// <param name="completeBooking">Options are "BK", "RS" or "IN"</param>
		/// <returns>Success</returns>
		public async Task<AppointmentInitialViewModel> ConsumerV1AppointmentsPostByCompleteBookingAsync(string completeBooking, AppointmentInitialModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/appointments?completeBooking=" + (completeBooking==null? "" : System.Uri.EscapeDataString(completeBooking));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppointmentInitialViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Custom Fields Labels
		/// <p>Use this endpoint to return a locations <b>Appointment Booking Fields</b>. Appointment booking fields are stored with each Appointment record. They are used when you need additional information collected during your booking process. It is tied to an appointment/visit and will be stored in the appointment record. Use the field name, type, and length to determine how to update these field values when posting an appointment.</p>
		/// ConsumerV1AppointmentsBookingfieldsGetByLocationId consumer/v1/appointments/bookingfields
		/// </summary>
		/// <param name="locationId">id of business location</param>
		/// <returns>Success</returns>
		public async Task<BookingFieldListViewModel> ConsumerV1AppointmentsBookingfieldsGetByLocationIdAsync(string locationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/appointments/bookingfields?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BookingFieldListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Custom Fields List
		/// <p>Use this endpoint to return a locations <b>Appointment Custom Field</b> definitions. Appointment custom fields are stored with each appointment. They are used when the information collected during the booking is specific to a particular appointment/visit. The response will list the custom fields used (customField1 - 10), the field type (string, number, date, boolean) and the length of each one.</p>
		/// ConsumerV1AppointmentsCustomfieldsGetByLocationId consumer/v1/appointments/customfields
		/// </summary>
		/// <param name="locationId">id of business location</param>
		/// <returns>Success</returns>
		public async Task<CustomFieldDefinitionListViewModel> ConsumerV1AppointmentsCustomfieldsGetByLocationIdAsync(string locationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/appointments/customfields?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomFieldDefinitionListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Appointment
		/// <p>Use this endpoint to permanently <b>Delete</b> an appointment. Only appointments with a of "IN" status, initial, can be deleted. Past dated appointments cannot be deleted. A valid <b>appointment id</b> is required. Use the appointment id returned from the initial <i>POST /consumer/v1/appointments</i> endpoint.</p>
		/// <p>For more information: <a href="https://onsched.readme.io/docs/appointments-overview">Appointment Overview</a></p>
		/// ConsumerV1Appointments_idDelete consumer/v1/appointments/{id}
		/// </summary>
		/// <param name="id">appointment id to delete</param>
		/// <returns>Success</returns>
		public async Task<AppointmentViewModel> ConsumerV1Appointments_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/appointments/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppointmentViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Appointment
		/// <p>Use this endpoint to return an <b>Appointment</b> object. A valid <b>appointment id</b> is required. For more information: <a href="https://onsched.readme.io/docs/appointments-overview">Appointments Overview</a></p>
		/// ConsumerV1Appointments_idGet consumer/v1/appointments/{id}
		/// </summary>
		/// <param name="id">id of appointment requested</param>
		/// <returns>Success</returns>
		public async Task<AppointmentViewModel> ConsumerV1Appointments_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/appointments/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppointmentViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Book Appointment
		/// <p>Use this endpoint to <b>Book</b> an appointment. Only appointments with an "IN" status, Initial, can be booked. A valid <b>appointment id</b> is required. Use the appointment id returned from the initial <i>POST /consumer/v1/appointments</i> endpoint. Other pertinent fields can also be updated at the time of booking by including them in the post body. <b>Note: If no name or email address was provided in the initial Post Appointment, it will be required in the post body.</b></p>
		/// <p>For more information: <a href="https://onsched.readme.io/docs/appointments-overview">Appointments Overview</a></p>
		/// ConsumerV1Appointments_idBookPut consumer/v1/appointments/{id}/book
		/// </summary>
		/// <param name="id">appointment id to book</param>
		/// <returns>Success</returns>
		public async Task<AppointmentViewModel> ConsumerV1Appointments_idBookPutAsync(string id, AppointmentBookModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/appointments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/book";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppointmentViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancel Appointment
		/// <p>Use this endpoint to <b>Cancel</b> an appointment booking or reservation. Only appointments with a "BK", booked or "RS", reserved status can be cancelled. Past dated appointments cannot be cancelled. A valid <b>appointment id</b> is required. For more information: <a href="https://onsched.readme.io/docs/appointments-overview">Appointment Overview</a></p>
		/// ConsumerV1Appointments_idCancelPut consumer/v1/appointments/{id}/cancel
		/// </summary>
		/// <param name="id">appointment id to cancel</param>
		/// <returns>Success</returns>
		public async Task<AppointmentViewModel> ConsumerV1Appointments_idCancelPutAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/appointments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/cancel";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppointmentViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Confirm Appointment
		/// <p>Use this endpoint to <b>Confirm</b> an appointment. This updates the boolean confirmed field to TRUE. <b>NOTE:</b> If the appointment status is set to "RS", Reserved, it also updates the status of the appointment to "BK", Booked. </p>
		/// <p>For more information: <a href="https://onsched.readme.io/docs/appointments-overview">Appointment Overview</a></p>
		/// ConsumerV1Appointments_idConfirmPutByUndo consumer/v1/appointments/{id}/confirm
		/// </summary>
		/// <param name="id">appointment id to confirm</param>
		/// <param name="undo">Use this parameter to undo the confirmed status</param>
		/// <returns>Success</returns>
		public async Task ConsumerV1Appointments_idConfirmPutByUndoAsync(int id, bool undo, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/appointments/"+id+"/confirm?undo="+undo;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set NoShow Status
		/// <p>Use this endpoint to change the status of an appointment from "BK", Booked to <b>"NS", NoShow</b>. This gives API consumers a way to internally track No Show appointments. It provides no added functionality in OnSched.</p>
		/// <p>For more information: <a href="https://onsched.readme.io/docs/appointments-overview">Appointment Overview</a></p>
		/// ConsumerV1Appointments_idNoshowPut consumer/v1/appointments/{id}/noshow
		/// </summary>
		/// <param name="id">appointment id to mark as NoShow</param>
		/// <returns>Success</returns>
		public async Task ConsumerV1Appointments_idNoshowPutAsync(int id, AppointmentNoShowModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/appointments/"+id+"/noshow";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reschedule Appointment
		/// <p>Use this endpoint to <b>Reschedule</b> an appointment booking. Only appointments in "BK", booked status, can be Rescheduled. Past dated appointments cannot be rescheduled. A valid <b>appointment id</b> is required.</p>
		/// <p>The <b>StartDateTime</b> and <b>EndDateTime</b> are required. Use the ISO 8601 format for DateTime Timezone, e.g., <b>2016-10-30T09:00:00-5:00</b>.</p>
		/// <p>The serviceId is optional. If changing the <b>serviceId</b>, the new service id's duration must match the original service's duration.</p>
		/// <p>The resourceId is optional. If changing the <b>resourceId</b>, verify the availability of the new resource prior to rescheduling.</p>
		/// <p>
		/// <b>IMPORTANT:</b> Always run availability before rescheduling an appointment to verify the timeslot is open and available for the new time, service and/or resource requested. This is the only way to assure the slot is available. You cannot reschedule an appointment to a different location. If necessary, you should cancel and then book an appointment in the other location.</p>
		/// <p>For more information: <a href="https://onsched.readme.io/docs/appointments-overview">Appointment Overview</a></p>
		/// ConsumerV1Appointments_idReschedulePut consumer/v1/appointments/{id}/reschedule
		/// </summary>
		/// <param name="id">appointment id to reschedule</param>
		/// <returns>Success</returns>
		public async Task<AppointmentViewModel> ConsumerV1Appointments_idReschedulePutAsync(string id, AppointmentRescheduleModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/appointments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/reschedule";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AppointmentViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Reserve Appointment
		/// <p>Use this endpoint to <b>Reserve</b> an appointment. Only appointments with an "IN" status, Initial, can be reserved. A valid <b>appointment id</b> is required. Use the appointment id returned from the initial <i>POST /consumer/v1/appointments</i> endpoint.</p>
		/// <p>
		/// <b>NOTE: Reservations are different from Bookings as reservations are a two-step booking process that must be managed by the API consumer.</b> An appointment that is reserved is not completely booked until other business conditions have been met. For example, an appointment may be reserved if it is not yet assigned to a resource or until the customer or resource explicitly confirms it.</p>
		/// <p>With reservations you have the ability to notify the customer of a reservation prior to officially booking and the workflow can be designed to indicate what conditions will need to be met in order to convert the reservation to a complete booking. A reservation converts to a complete booking when it is either Confirmed or Booked. </p>
		/// <p>
		/// <b>IMPORTANT: A reserved appointment time will not be released, i.e., become available to others, until it is Cancelled. The booking timer is not used with reserved appointments.</b>
		/// </p>
		/// <p>For more information: <a href="https://onsched.readme.io/docs/appointments-overview">Appointments Overview</a></p>
		/// ConsumerV1Appointments_idReservePutBySendNotifications consumer/v1/appointments/{id}/reserve
		/// </summary>
		/// <param name="id">appointment id to reserve</param>
		/// <returns>Success</returns>
		public async Task ConsumerV1Appointments_idReservePutBySendNotificationsAsync(string id, bool sendNotifications, AppointmentReserveModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/appointments/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/reserve&sendNotifications="+sendNotifications;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Available Times
		/// <p>
		/// <b>Choose your search criteria carefully. Availability is an expensive call.</b> If you search availability for all resources, you should only do so for a single date. If you search availability for multiple dates, you should only do so for a specific resource by specifying the optional resourceId parameter.</p>
		/// <p>A <b>serviceId</b> is required. The <b>startDate</b> and <b>endDate</b> are required and are formatted as: <b>YYYY-MM-DD</b></p>
		/// <p>A <b>resourceId</b> is optional, it is recommended if known at the time of availability call.</p>
		/// <p>
		/// <b>timezoneName</b> is optional, it allows you to specify the IANA formatted name for the end user's timezone to view availability. e.g., <i>America/New_York</i>. <b>NOTE: This is the recommended approach for your implementation.</b>  The "tzOffset" parameter remains for backward compatibility.  For JavaScript, use moment.js in your client for ease of timezone detection and selection. For iOS, use the name property of the NSTimeZone returned from the localTimeZone method. For .NET, consider NodaTime or TimeZoneConverter via NuGet. </p>
		/// <p>
		/// <b>duration</b> should only be populated if you allow the end user to select a duration, otherwise the service's duration will be used.</p>
		/// <p>
		/// <b>startTime</b> and <b>endTime</b> are optional and are specified in <b>military time e.g., 800 = 8:00am, 2230 = 10:30pm</b>. Note: You will only see availability within the boundary of your business location start and end times.</p>
		/// <p>
		/// <b>dayAvailability</b> will return day level availability for the number of days requested from the start date. See <i>GET /consumer/v1/availability/{serviceId}/{startDate}/{endDate}/days</i> for details.</p>
		/// <p>
		/// <b>firstDayAvailable</b> only works with day availability. If set to true it will look for the first day available within the range specified by the dayAvailability parameter. The two parameters together can be a clever way to display availability for a week or month. Tip - pass in the beginning of the week or month, and available times are displayed for the first available date if exists.</p>
		/// <p>
		/// <b>tzOffset</b> allows you to pass in the timezone offset for the end user's timezone of choice, e.g., (-240) for EST. If you use this option, your application should be timezone aware. The requested timezone is specified as an offset (plus or minus) from GMT time.</p>
		/// <p>Availability can be complex. For further troubleshooting refer to the: <i><b>GET /consumer/v1/availability/{serviceId}/{startDate}/{endDate}/unavailable</b></i> endpoint. This endpoint will show you all unavailable times for a given date range. Available times are created from any unblocked time periods. For more information: <a href="https://onsched.readme.io/docs/availability-overview">Availability Overview</a></p>
		/// ConsumerV1Availability_serviceId_startDate_endDateGetByStartTimeAndEndTimeAndLocationIdAndResourceIdAndResourceGroupIdAndResourceIdsAndRoundRobinAndDurationAndIntervalAndTimezoneNameAndTzOffsetAndDestinationAndDayAvailabilityStartDateAndDayAvailabilityAndFirstDayAvailable consumer/v1/availability/{serviceId}/{startDate}/{endDate}
		/// </summary>
		/// <param name="serviceId">Service Id for availability search</param>
		/// <param name="startDate">Format YYYY-MM-DD: Start Date for availability search</param>
		/// <param name="endDate">Format YYYY-MM-DD: End Date for availability search</param>
		/// <param name="startTime">Format Military Time Start Time for availability search. Defaults to Business Hours Start</param>
		/// <param name="endTime">Format Military Time. End Time for availability search. Defaults to Business Hours End</param>
		/// <param name="locationId">Id of business location, defaults to primary business location</param>
		/// <param name="resourceId">Resource Id for availability search</param>
		/// <param name="resourceGroupId">Resource Group Id for availability search</param>
		/// <param name="resourceIds">Comma separated Resource Id's for availability search</param>
		/// <param name="roundRobin">Round robin choice 0=none, 1=random, 2=balanced</param>
		/// <param name="duration">Duration of the service if different from default</param>
		/// <param name="interval">Booking Interval if different than the default</param>
		/// <param name="timezoneName">Requested IANA timezone Id to view availability</param>
		/// <param name="tzOffset">Request timezone offset to view availability</param>
		/// <param name="destination">For calculating travel based availability, requires distance scope</param>
		/// <param name="dayAvailabilityStartDate">Format YYYY-DD-YY: Start date for day availability, defaults to startDate</param>
		/// <param name="dayAvailability">Number of days of day availability to return</param>
		/// <param name="firstDayAvailable">Return available times for the first available day</param>
		/// <returns>Success</returns>
		public async Task<AvailabilityViewModel> ConsumerV1Availability_serviceId_startDate_endDateGetByStartTimeAndEndTimeAndLocationIdAndResourceIdAndResourceGroupIdAndResourceIdsAndRoundRobinAndDurationAndIntervalAndTimezoneNameAndTzOffsetAndDestinationAndDayAvailabilityStartDateAndDayAvailabilityAndFirstDayAvailableAsync(
					string serviceId, 
					System.DateTimeOffset startDate, 
					System.DateTimeOffset endDate, 
					int startTime, 
					int endTime, 
					string locationId, 
					string resourceId, 
					string resourceGroupId, 
					string resourceIds, 
					string roundRobin, 
					int duration, 
					int interval, 
					string timezoneName, 
					int tzOffset, 
					string destination, 
					System.DateTimeOffset dayAvailabilityStartDate, 
					int dayAvailability, 
					bool firstDayAvailable, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/availability/"+ (serviceId==null? "" : System.Uri.EscapeDataString(serviceId))+"/"+startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"/"+endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&startTime="+startTime+"&endTime="+endTime+"&locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&resourceId=" + (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"&resourceGroupId=" + (resourceGroupId==null? "" : System.Uri.EscapeDataString(resourceGroupId))+"&resourceIds=" + (resourceIds==null? "" : System.Uri.EscapeDataString(resourceIds))+"&roundRobin=" + (roundRobin==null? "" : System.Uri.EscapeDataString(roundRobin))+"&duration="+duration+"&interval="+interval+"&timezoneName=" + (timezoneName==null? "" : System.Uri.EscapeDataString(timezoneName))+"&tzOffset="+tzOffset+"&destination=" + (destination==null? "" : System.Uri.EscapeDataString(destination))+"&dayAvailabilityStartDate=" + dayAvailabilityStartDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&dayAvailability="+dayAvailability+"&firstDayAvailable="+firstDayAvailable;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AvailabilityViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Available Days
		/// <p>This endpoint will return <b>Day Level Availability</b> for the range of dates requested. For example, if the business is closed, or there is a public holiday this endpoint will return that the "Day is unavailable".</p>
		/// <p>Day Availability is a high-level check for Holidays and Open/Available hours of a location, service and/or resource and should be used to restrict your choices of days available in your application to improve usability and performance.</p>
		/// <p>A <b>serviceId</b> is required. The <b>startDate</b> and <b>endDate</b> are required and are formatted as: <b>YYYY-MM-DD</b></p>
		/// <p>The locationId is optional, however if not supplied it defaults to the Primary Business Location for open/closed hours information. It is recommended you always provide the locationId.</p>
		/// <p>A <b>resourceId</b> is optional. If used the available days will be return day availability for the resource specified.</p>
		/// <p>The <b>tzOffset</b> parameter should be used if the appointment requester, the end user, is in a different timezone than the location or resource.</p>
		/// ConsumerV1Availability_serviceId_startDate_endDateDaysGetByLocationIdAndResourceIdAndTzOffset consumer/v1/availability/{serviceId}/{startDate}/{endDate}/days
		/// </summary>
		/// <param name="serviceId">Service Id for day availability search</param>
		/// <param name="startDate">Format YYYY-MM-DD: Start Date for availability search</param>
		/// <param name="endDate">Format YYYY-MM-DD: End Date for availability search</param>
		/// <param name="locationId">Id of business location, defaults to primary business location</param>
		/// <param name="resourceId">Resource Id to filter on</param>
		/// <param name="tzOffset">Timezone offset to view availability for</param>
		/// <returns>Success</returns>
		public async Task<AvailabilityDayViewModel> ConsumerV1Availability_serviceId_startDate_endDateDaysGetByLocationIdAndResourceIdAndTzOffsetAsync(string serviceId, System.DateTimeOffset startDate, System.DateTimeOffset endDate, string locationId, string resourceId, int tzOffset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/availability/"+ (serviceId==null? "" : System.Uri.EscapeDataString(serviceId))+"/"+startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"/"+endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"/days&locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&resourceId=" + (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"&tzOffset="+tzOffset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AvailabilityDayViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Unavailable Times
		/// <p>This endpoint is used to show <b>Unavailable</b> times and provides valuable information as to why a time slot is unavailable. If you question your availability results, populate the same parameters to this endpoint to find out why.</p>
		/// <p>A <b>serviceId</b> is required. The <b>startDate</b> and <b>endDate</b> are required and are formatted as: <b>YYYY-MM-DD</b></p>
		/// <p>Location hours, holidays, services, resources, blocks, allocations, and appointments are just some of variables that may cause time slots to become unavailable. Use this endpoint to understand why you don't see availability.</p>
		/// ConsumerV1Availability_serviceId_startDate_endDateUnavailableGetByLocationIdAndResourceIdAndDurationAndTzOffsetAndSkipTimePastUnavailability consumer/v1/availability/{serviceId}/{startDate}/{endDate}/unavailable
		/// </summary>
		/// <param name="serviceId">Service Id for availability search</param>
		/// <param name="startDate">Format YYYY-MM-DD: Start Date for unavailable time search</param>
		/// <param name="endDate">Format YYYY-MM-DD: End Date for unavailable time search</param>
		/// <param name="locationId">Id of business location, defaults to primary business location</param>
		/// <param name="resourceId">Resource Id to filter on</param>
		/// <param name="duration">Duration of the service if different from default</param>
		/// <param name="tzOffset">Request timezone offset to view unavailable times</param>
		/// <param name="skipTimePastUnavailability">Set as true to remove Time Past (TP) blocks in the response</param>
		/// <returns>Success</returns>
		public async Task<UnavailableTimeListViewModel> ConsumerV1Availability_serviceId_startDate_endDateUnavailableGetByLocationIdAndResourceIdAndDurationAndTzOffsetAndSkipTimePastUnavailabilityAsync(string serviceId, System.DateTimeOffset startDate, System.DateTimeOffset endDate, string locationId, string resourceId, int duration, int tzOffset, bool skipTimePastUnavailability, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/availability/"+ (serviceId==null? "" : System.Uri.EscapeDataString(serviceId))+"/"+startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"/"+endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"/unavailable&locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&resourceId=" + (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"&duration="+duration+"&tzOffset="+tzOffset+"&skipTimePastUnavailability="+skipTimePastUnavailability;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UnavailableTimeListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Customers
		/// <p>Use this endpoint to return a <b>List of Customers</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// ConsumerV1CustomersGetByLocationIdAndGroupIdAndEmailAndLastnameAndDeletedAndOffsetAndLimit consumer/v1/customers
		/// </summary>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <param name="groupId">Filter by groupId</param>
		/// <param name="email">Filter by email address</param>
		/// <param name="lastname">Filter by lastname</param>
		/// <param name="deleted">Filter by deleted status</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<CustomerListViewModel> ConsumerV1CustomersGetByLocationIdAndGroupIdAndEmailAndLastnameAndDeletedAndOffsetAndLimitAsync(string locationId, string groupId, string email, string lastname, bool deleted, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/customers?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&groupId=" + (groupId==null? "" : System.Uri.EscapeDataString(groupId))+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&lastname=" + (lastname==null? "" : System.Uri.EscapeDataString(lastname))+"&deleted="+deleted+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Customer
		/// <p>Use this endpoint to <b>Create</b> a new Customer. A customer object is automatically created with the first appointment booking if it doesn't already exist. If not specified, the business location id defaults to the primary business location.</p>
		/// <p>Required Fields: <b>Email</b> and <b>Name</b> or <b>First and Lastname</b> depending on customer type. Type 0 = Person, Type 1 = Business. For type 0, the firstname and lastname fields are used. For type 1, the Name field is used, and the name field is also used to populate the lastname.</p>
		/// ConsumerV1CustomersPost consumer/v1/customers
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CustomerViewModel> ConsumerV1CustomersPostAsync(CustomerInputModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/customers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get Customer Booking Fields
		/// <p>Use this endpoint to return <b>Customer Booking Fields</b>. Customer booking fields are stored with each customer object. They are used when the information collected during the booking is for a particular customer. Customer Booking Fields include any custom customer fields you define and want to capture with the Booking.</p>
		/// ConsumerV1CustomersBookingfieldsGetByLocationId consumer/v1/customers/bookingfields
		/// </summary>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <returns>Success</returns>
		public async Task<BookingFieldListViewModel> ConsumerV1CustomersBookingfieldsGetByLocationIdAsync(string locationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/customers/bookingfields?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BookingFieldListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Country Codes
		/// <p>Use this endpoint to return a <b>List of Countries with their associated Country Code</b>. Country codes are based on the 2-character ANSI standard. If your countries of operation are not currently listed, contact us at <i><b>support@onsched.com</b></i>.</p>
		/// ConsumerV1CustomersCountriesGet consumer/v1/customers/countries
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CountryViewModel[]> ConsumerV1CustomersCountriesGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/customers/countries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CountryViewModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Customer Custom Fields
		/// <p>Use this endpoint to return <b>Customer Custom Fields</b>. Customer custom fields are stored with the customer object. They are used when the information collected during the booking is specific to a particular customer.</p>
		/// ConsumerV1CustomersCustomfieldsGetByLocationIdAndLeadQuestions consumer/v1/customers/customfields
		/// </summary>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <param name="leadQuestions">A true/false indicator to filter on custom fields used for lead questions</param>
		/// <returns>Success</returns>
		public async Task<CustomFieldDefinitionListViewModel> ConsumerV1CustomersCustomfieldsGetByLocationIdAndLeadQuestionsAsync(string locationId, bool leadQuestions, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/customers/customfields?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&leadQuestions="+leadQuestions;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomFieldDefinitionListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Country States
		/// <p>Use this endpoint to return a <b>List of Countries with their associated State Codes</b>. Supply a country code to filter results further. If states for your countries of operation are not currently listed, contact us at <i><b>support@onsched.com</b></i>.</p>
		/// ConsumerV1CustomersStatesGetByCountry consumer/v1/customers/states
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StateViewModel[]> ConsumerV1CustomersStatesGetByCountryAsync(string country, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/customers/states?country=" + (country==null? "" : System.Uri.EscapeDataString(country));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StateViewModel[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Delete Customer
		/// <p>Use this endpoint to permanently <b>Delete</b> a Customer object. A valid <b>customer id</b> is required.</p>
		/// ConsumerV1Customers_idDelete consumer/v1/customers/{id}
		/// </summary>
		/// <param name="id">id of customer object</param>
		/// <returns>Success</returns>
		public async Task ConsumerV1Customers_idDeleteAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/customers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Customer
		/// <p>Use this endpoint to return a <b>Customer</b> object. A valid <b>customer id</b> is required. Find customer id's by using the <i>GET /consumer/v1/customers</i> endpoint.</p>
		/// ConsumerV1Customers_idGet consumer/v1/customers/{id}
		/// </summary>
		/// <param name="id">id of customer object</param>
		/// <returns>Success</returns>
		public async Task<CustomerViewModel> ConsumerV1Customers_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/customers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CustomerViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Customer
		/// <p>Use this endpoint to <b>Update</b> a Customer object. A valid <b>customer id</b> is required. Note: Blank fields are not changed.</p>
		/// ConsumerV1Customers_idPut consumer/v1/customers/{id}
		/// </summary>
		/// <param name="id">id of customer object</param>
		/// <returns>Success</returns>
		public async Task ConsumerV1Customers_idPutAsync(string id, CustomerUpdateModel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/customers/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List Locations
		/// <p>Use this endpoint to return a <b>List of Business Locations</b>. The results are returned in pages. Use the offset and limit parameters to control the page start and size. Default offset is 0, and limit is 20 and maximum is 100. Use the other query parameters to filter the results further. </p>
		/// <p>
		/// <b>IMPORTANT DEPRECATION NOTICE</b>: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on <b>OCTOBER 15, 2022</b>. These fields are currently part of the <b>SETTINGS</b> object in all location endpoints: <b>businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.</b> If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: <b><i>support@onsched.com</i></b> as we do not want to interrupt your existing workflows.</p>
		/// ConsumerV1LocationsGetByNameAndNearestToAndProximityAndUnitsAndServiceIdAndFriendlyIdAndRegionIdAndIgnorePrimaryAndOffsetAndLimit consumer/v1/locations
		/// </summary>
		/// <param name="name">Location name (full or partial)</param>
		/// <param name="nearestTo">Search by distance nearest Geocoords, City, Postal/Zip Code</param>
		/// <param name="proximity">Maximum distance to display</param>
		/// <param name="units">Distance either imperial(miles), metric(kilometers)</param>
		/// <param name="serviceId">Locations that offer this service</param>
		/// <param name="friendlyId">Frienldy Id of location</param>
		/// <param name="regionId">Locations within a specific region</param>
		/// <param name="ignorePrimary">Don't include the Primary Location</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit, default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<LocationListViewModel> ConsumerV1LocationsGetByNameAndNearestToAndProximityAndUnitsAndServiceIdAndFriendlyIdAndRegionIdAndIgnorePrimaryAndOffsetAndLimitAsync(string name, string nearestTo, int proximity, string units, string serviceId, string friendlyId, string regionId, bool ignorePrimary, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/locations?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&nearestTo=" + (nearestTo==null? "" : System.Uri.EscapeDataString(nearestTo))+"&proximity="+proximity+"&units=" + (units==null? "" : System.Uri.EscapeDataString(units))+"&serviceId=" + (serviceId==null? "" : System.Uri.EscapeDataString(serviceId))+"&friendlyId=" + (friendlyId==null? "" : System.Uri.EscapeDataString(friendlyId))+"&regionId=" + (regionId==null? "" : System.Uri.EscapeDataString(regionId))+"&ignorePrimary="+ignorePrimary+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Location
		/// <p>Use this endpoint to return a <b>Location</b> object. A valid business <b>location id</b> is required. Find all location id's by using the <i>GET /consumer/v1/locations</i> endpoint.</p>
		/// <p>
		/// <b>IMPORTANT DEPRECATION NOTICE</b>: The following online settings parameters were intended for internal use in our Portal application only. They will be deprecated on <b>OCTOBER 15, 2022</b>. These fields are currently part of the <b>SETTINGS</b> object in all location endpoints: <b>businessId, enabled, familyMembersEnabled, serviceLabel, resourceLabel, resourceAnyLabel, resourceSelection, liveMode, formFlow, availabilityForm, showServiceGroups, showOnSchedLogo, showBusinessLogo, disableAuthorization, hideNavBar, hideLocationNav, hideServiceGroupsNav, hideServicesNav, hideContinueBooking, returnToService, returnToAvailability, hideBreadCrumbNav.</b> If you are using these fields, please adjust your code to handle the deprecation or let us know by submitting a ticket to: <b><i>support@onsched.com</i></b> as we do not want to interrupt your existing workflows.</p>
		/// ConsumerV1Locations_idGet consumer/v1/locations/{id}
		/// </summary>
		/// <param name="id">id of business location</param>
		/// <returns>Success</returns>
		public async Task<LocationViewModel> ConsumerV1Locations_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/locations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Resource Groups
		/// <p>Use this endpoint to return a list of <b>Resource Groups</b> for the requested location. If not specified, the business location defaults to the primary business location.</p>
		/// ConsumerV1ResourcegroupsGetByLocationIdAndDeletedAndOffsetAndLimit consumer/v1/resourcegroups
		/// </summary>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <param name="deleted">Filter results by deleted status</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<ResourceGroupListViewModel> ConsumerV1ResourcegroupsGetByLocationIdAndDeletedAndOffsetAndLimitAsync(string locationId, bool deleted, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/resourcegroups?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&deleted="+deleted+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceGroupListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Resource Group
		/// <p>Use this endpoint to return a <b>Resource Group</b> object. A valid <b>resourceGroup id</b> is required. Find resourceGroup id's by using the <i>GET /consumer/v1/resourceGroups</i> endpoint.</p>
		/// ConsumerV1Resourcegroups_idGet consumer/v1/resourcegroups/{id}
		/// </summary>
		/// <param name="id">id of the resourceGroup object</param>
		/// <returns>Success</returns>
		public async Task<ResourceGroupViewModel> ConsumerV1Resourcegroups_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/resourcegroups/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceGroupViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Resources
		/// <p>Use this endpoint to return a <b>List of Resources</b> associated with a business location. If not specified, the business location defaults to the primary business location. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// ConsumerV1ResourcesGetByLocationIdAndResourceGroupIdAndEmailAndNameAndSortOrderAndOffsetAndLimit consumer/v1/resources
		/// </summary>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <param name="resourceGroupId">Filter by groupId</param>
		/// <param name="email">Filter by email address</param>
		/// <param name="name">Search by name, supports Partial name search</param>
		/// <param name="sortOrder">Specify sort order of response</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>resource object</returns>
		public async Task<ResourceListViewModel> ConsumerV1ResourcesGetByLocationIdAndResourceGroupIdAndEmailAndNameAndSortOrderAndOffsetAndLimitAsync(string locationId, int resourceGroupId, string email, string name, string sortOrder, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/resources?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&resourceGroupId="+resourceGroupId+"&email=" + (email==null? "" : System.Uri.EscapeDataString(email))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&sortOrder=" + (sortOrder==null? "" : System.Uri.EscapeDataString(sortOrder))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Resource
		/// <p>Use this endpoint to return a <b>Resource</b> object. A valid <b>resource id</b> is required. Find resource id's by using the <i>GET consumer/v1/resources</i> endpoint. </p>
		/// ConsumerV1Resources_idGet consumer/v1/resources/{id}
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <returns>Success</returns>
		public async Task<ResourceViewModel> ConsumerV1Resources_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/resources/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Resource Linked Services
		/// <p>Use this endpoint to get a <b>List of Linked Services</b> associated with the resource requested. The results are returned in pages. Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, the maximum limit is 100. Use the other query parameters to filter the results further.</p>
		/// <p>Resource linked services are used to explicitly define the services that can be booked for a specified resource. By default, all services are bookable for any resource. For more information: <a href="https://docs.onsched.com/docs/linked-services">Linked Services Overview</a></p>
		/// ConsumerV1Resources_idServicesGetByOffsetAndLimit consumer/v1/resources/{id}/services
		/// </summary>
		/// <param name="id">id of resource object</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>list of resource services</returns>
		public async Task<ResourceServiceListViewModel> ConsumerV1Resources_idServicesGetByOffsetAndLimitAsync(int id, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/resources/"+id+"/services?offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceServiceListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Service Groups
		/// <p>Use this endpoint to return a list of <b>Service Groups</b> for the requested location. If not specified, the business location defaults to the primary business location. Use the offset and limit parameters to control the page start and size. Default offset is 0, limit is 20, maximum is 100. Use the other query parameters to filter the results further.</p>
		/// ConsumerV1ServicegroupsGetByLocationIdAndOffsetAndLimit consumer/v1/servicegroups
		/// </summary>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<ServiceGroupListViewModel> ConsumerV1ServicegroupsGetByLocationIdAndOffsetAndLimitAsync(string locationId, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/servicegroups?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceGroupListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Service Group
		/// <p>Use this endpoint to return a <b>Service Group</b> object. A valid <b>serviceGroup id</b> is required. Find serviceGroup id's by using the <i>GET /consumer/v1/serviceGroups</i> endpoint.</p>
		/// ConsumerV1Servicegroups_idGet consumer/v1/servicegroups/{id}
		/// </summary>
		/// <param name="id">id of the serviceGroup object</param>
		/// <returns>Success</returns>
		public async Task<ServiceGroupViewModel> ConsumerV1Servicegroups_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/servicegroups/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceGroupViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Services
		/// <p>Use this endpoint to <b>List Services</b> available at your business location and/or company. If not specified, the business location defaults to the primary business location. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// ConsumerV1ServicesGetByLocationIdAndServiceGroupIdAndDefaultServiceAndAllLocationsAndScopeAndNameAndServiceIdAndOffsetAndLimitAndSortOrderAndSortDescending consumer/v1/services
		/// </summary>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <param name="serviceGroupId">Filter by groupId</param>
		/// <param name="defaultService">Filter by default service, default is false</param>
		/// <param name="allLocations">Search All Locations, default is false</param>
		/// <param name="scope">Filter by scope, Company, Location or All, default is All</param>
		/// <param name="name">Filter by Name, supports Partial name search</param>
		/// <param name="serviceId">Filter by ServiceId, using this parameter would ignore all other parameters</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <param name="sortOrder">Sort results using Natural Sort or Sorted alphabetically by Service Names, default is natural</param>
		/// <param name="sortDescending">Sort results in Descending Order, default true</param>
		/// <returns>Success</returns>
		public async Task<ServiceListViewModel> ConsumerV1ServicesGetByLocationIdAndServiceGroupIdAndDefaultServiceAndAllLocationsAndScopeAndNameAndServiceIdAndOffsetAndLimitAndSortOrderAndSortDescendingAsync(string locationId, int serviceGroupId, bool defaultService, bool allLocations, ServicesScope scope, string name, string serviceId, int offset, int limit, ServiceSortOrder sortOrder, bool sortDescending, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/services?locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&serviceGroupId="+serviceGroupId+"&defaultService="+defaultService+"&allLocations="+allLocations+"&scope=" + scope+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&serviceId=" + (serviceId==null? "" : System.Uri.EscapeDataString(serviceId))+"&offset="+offset+"&limit="+limit+"&sortOrder=" + sortOrder+"&sortDescending="+sortDescending;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Service Allocation
		/// <p>Use this endpoint to return a <b>Service Allocation</b> object. A valid <b>serviceAllocation id</b> is required. Find service allocation id's by using the <i>GET/consumer​/v1​/services​/{id}​/allocations</i> endpoint.</p>
		/// ConsumerV1ServicesAllocations_idGet consumer/v1/services/allocations/{id}
		/// </summary>
		/// <param name="id">id of serviceAllocation object</param>
		/// <returns>Success</returns>
		public async Task<ServiceAllocationViewModel> ConsumerV1ServicesAllocations_idGetAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/services/allocations/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceAllocationViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Service
		/// <p>Use this endpoint to return a <b>Service</b> object. A valid <b>service id</b> is required. Find service id's by using the <i>GET /consumer/v1/services</i> endpoint.</p>
		/// ConsumerV1Services_idGet consumer/v1/services/{id}
		/// </summary>
		/// <param name="id">id of service object</param>
		/// <returns>Success</returns>
		public async Task<ServiceViewModel> ConsumerV1Services_idGetAsync(int id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/services/"+id;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Service Allocations
		/// <p>Use this endpoint to return a <b>List of Service Allocations</b> associated with the requested service. A valid <b>service id</b> is required. Allocations are used for Event type services/bookings. Retrieve all allocations for a location by passing in zero as the service id. Otherwise, to get allocations for a specific service supply the service id. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further. For more information: <a href="https://docs.onsched.com/reference/post_setup-v1-services-id-allocations">Create Service Allocations</a></p>
		/// ConsumerV1Services_idAllocationsGetByLocationIdAndResourceIdAndStartDateAndEndDateAndOffsetAndLimit consumer/v1/services/{id}/allocations
		/// </summary>
		/// <param name="id">id of service to list allocations for, 0 for all</param>
		/// <param name="locationId">id of the location, defaults to the primary location</param>
		/// <param name="resourceId">id of the resource to filter on</param>
		/// <param name="startDate">Format YYYY-MM-DD: Filter allocations on/after startDate</param>
		/// <param name="endDate">Format YYYY-MM-DD. Filter allocations on/before endDate</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>service alloaction object</returns>
		public async Task<ServiceAllocationListViewModel> ConsumerV1Services_idAllocationsGetByLocationIdAndResourceIdAndStartDateAndEndDateAndOffsetAndLimitAsync(string id, string locationId, string resourceId, System.DateTimeOffset startDate, System.DateTimeOffset endDate, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/allocations&locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&resourceId=" + (resourceId==null? "" : System.Uri.EscapeDataString(resourceId))+"&startDate=" + startDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&endDate=" + endDate.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ServiceAllocationListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List Resources for Service
		/// <p>Use this endpoint to return a list of <b>Resources that provide the Service requested</b>. A valid <b>service id</b> is required. The results are returned in pages. Use the offset and limit parameters to control the page start and number of results. Default offset is 0, limit is 20, max is 100. Use the query parameters to filter the results further.</p>
		/// ConsumerV1Services_idResourcesGetByLocationIdAndOffsetAndLimit consumer/v1/services/{id}/resources
		/// </summary>
		/// <param name="id">id of service object</param>
		/// <param name="locationId">id of business location, defaults to primary business location</param>
		/// <param name="offset">Starting row of page, default 0</param>
		/// <param name="limit">Page limit default 20, max 100</param>
		/// <returns>Success</returns>
		public async Task<ResourceListViewModel> ConsumerV1Services_idResourcesGetByLocationIdAndOffsetAndLimitAsync(string id, string locationId, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "consumer/v1/services/"+ (id==null? "" : System.Uri.EscapeDataString(id))+"/resources&locationId=" + (locationId==null? "" : System.Uri.EscapeDataString(locationId))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceListViewModel>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
