//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AltLabel
	{
		
		[System.Runtime.Serialization.DataMember(Name="langIdent")]
		public string LangIdent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public AltLabelMode Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AltLabelMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="ident")]
		public string Ident { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentIdent")]
		public ParentRef ParentIdent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParentRef
	{
		
		[System.Runtime.Serialization.DataMember(Name="parentValueIdent")]
		public string ParentValueIdent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentVariableIdent")]
		public string ParentVariableIdent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HierarchicalInterview
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataItems")]
		public DataItem[] DataItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hierarchicalInterviews")]
		public HierarchicalInterview[] HierarchicalInterviews { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ident")]
		public string Ident { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="level")]
		public Level Level { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Level
	{
		
		[System.Runtime.Serialization.DataMember(Name="ident")]
		public string Ident { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Hierarchy
	{
		
		[System.Runtime.Serialization.DataMember(Name="ident")]
		public string Ident { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public SurveyMetadataBase Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public ParentDetails Parent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SurveyMetadataBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="interviewCount")]
		public System.Nullable<System.Int32> InterviewCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public Language[] Languages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public Variable[] Variables { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Language
	{
		
		[System.Runtime.Serialization.DataMember(Name="ident")]
		public string Ident { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subLanguages")]
		public Language[] SubLanguages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Variable
	{
		
		[System.Runtime.Serialization.DataMember(Name="ident")]
		public string Ident { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public Label Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResponses")]
		public System.Nullable<System.Int32> MaxResponses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentType")]
		public ParentType ParentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="questions")]
		public Variable[] Questions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public VariableType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="use")]
		public UseType Use { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variableValues")]
		public VariableValues VariableValues { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Label
	{
		
		[System.Runtime.Serialization.DataMember(Name="altLabels")]
		public AltLabel[] AltLabels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ParentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VariableType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_7 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_8 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_4 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VariableValues
	{
		
		[System.Runtime.Serialization.DataMember(Name="range")]
		public ValueRange Range { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public Value[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValueRange
	{
		
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Value
	{
		
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ident")]
		public string Ident { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public Label Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="score")]
		public System.Nullable<System.Int32> Score { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParentDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="level")]
		public string Level { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="linkVar")]
		public string LinkVar { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ordered")]
		public System.Nullable<System.Boolean> Ordered { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Interview
	{
		
		[System.Runtime.Serialization.DataMember(Name="dataItems")]
		public DataItem[] DataItems { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hierarchicalInterviews")]
		public HierarchicalInterview[] HierarchicalInterviews { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ident")]
		public string Ident { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SurveyDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SurveyMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="hierarchies")]
		public Hierarchy[] Hierarchies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="interviewCount")]
		public System.Nullable<System.Int32> InterviewCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public Language[] Languages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public Variable[] Variables { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns a list of available Surveys
		/// SurveysGet Surveys
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SurveyDetail[]> SurveysGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Surveys";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SurveyDetail[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches some interview records for a specific survey
		/// SurveysGetBySurveyIdAndStartAndMaxLength Surveys/{surveyId}/Interviews
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Interview[]> SurveysGetBySurveyIdAndStartAndMaxLengthAsync(string surveyId, int start, int maxLength, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Surveys/"+ (surveyId==null? "" : System.Uri.EscapeDataString(surveyId))+"/Interviews&start="+start+"&maxLength="+maxLength;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Interview[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches the metadata for a specific survey
		/// SurveysGetBySurveyId Surveys/{surveyId}/Metadata
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SurveyMetadata> SurveysGetBySurveyIdAsync(string surveyId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Surveys/"+ (surveyId==null? "" : System.Uri.EscapeDataString(surveyId))+"/Metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SurveyMetadata>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
