//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Concept
	{
		
		[System.Runtime.Serialization.DataMember(Name="ancestors")]
		public ConceptRelation[] Ancestors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="article_list")]
		public ConceptArticle_list Article_list { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="combinations")]
		public ConceptCombinations[] ConceptCombinations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concept_created")]
		public string Concept_created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concept_id")]
		public System.Nullable<System.Int32> Concept_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concept_name")]
		public string Concept_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concept_status")]
		public string Concept_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concept_type")]
		public string Concept_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concept_updated")]
		public string Concept_updated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="descendants")]
		public ConceptRelation[] Descendants { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_times_tag")]
		public System.Nullable<System.Int32> Is_times_tag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ConceptLinks[] ConceptLinks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope_notes")]
		public ConceptScope_notes[] ConceptScope_notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="search_api_query")]
		public string Search_api_query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxonomy")]
		public ConceptTaxonomy[] ConceptTaxonomy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vernacular")]
		public string Vernacular { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConceptRelation
	{
		
		[System.Runtime.Serialization.DataMember(Name="concept_created")]
		public string Concept_created { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concept_id")]
		public System.Nullable<System.Int32> Concept_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concept_name")]
		public string Concept_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concept_status")]
		public string Concept_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concept_type")]
		public string Concept_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concept_updated")]
		public string Concept_updated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_times_tag")]
		public System.Nullable<System.Int32> Is_times_tag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vernacular")]
		public string Vernacular { get; set; }
	}
	
	public class ConceptArticle_list
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ConceptArticle_listResults[] ConceptArticle_listResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class ConceptArticle_listResults
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="byline")]
		public string Byline { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concepts")]
		public ConceptArticle_listResultsConcepts Concepts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date")]
		public string Date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="document_type")]
		public string Document_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type_of_material")]
		public string Type_of_material { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class ConceptArticle_listResultsConcepts
	{
		
		[System.Runtime.Serialization.DataMember(Name="nytd_des")]
		public string[] Nytd_des { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nytd_org")]
		public string[] Nytd_org { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nytd_per")]
		public string[] Nytd_per { get; set; }
	}
	
	public class ConceptCombinations
	{
		
		[System.Runtime.Serialization.DataMember(Name="combination_note")]
		public string Combination_note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="combination_source_concept_id")]
		public System.Nullable<System.Int32> Combination_source_concept_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="combination_source_concept_name")]
		public string Combination_source_concept_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="combination_source_concept_type")]
		public string Combination_source_concept_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="combination_target_concept_id")]
		public System.Nullable<System.Int32> Combination_target_concept_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="combination_target_concept_name")]
		public string Combination_target_concept_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="combination_target_concept_type")]
		public string Combination_target_concept_type { get; set; }
	}
	
	public class ConceptLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="concept_id")]
		public System.Nullable<System.Int32> Concept_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concept_name")]
		public string Concept_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concept_status")]
		public string Concept_status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="concept_type")]
		public string Concept_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_times_tag")]
		public System.Nullable<System.Int32> Is_times_tag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link_id")]
		public System.Nullable<System.Int32> Link_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link_type")]
		public string Link_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mapping_type")]
		public string Mapping_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="relation")]
		public string Relation { get; set; }
	}
	
	public class ConceptScope_notes
	{
		
		[System.Runtime.Serialization.DataMember(Name="scope_note")]
		public string Scope_note { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope_note_name")]
		public string Scope_note_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scope_note_type")]
		public string Scope_note_type { get; set; }
	}
	
	public class ConceptTaxonomy
	{
		
		[System.Runtime.Serialization.DataMember(Name="source_concept_id")]
		public System.Nullable<System.Int32> Source_concept_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_concept_name")]
		public string Source_concept_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_concept_type")]
		public string Source_concept_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source_concept_vernacular")]
		public string Source_concept_vernacular { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_concept_id")]
		public System.Nullable<System.Int32> Target_concept_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_concept_name")]
		public string Target_concept_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_concept_type")]
		public string Target_concept_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target_concept_vernacular")]
		public string Target_concept_vernacular { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxonomic_relation")]
		public string Taxonomic_relation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taxonomic_verification_status")]
		public string Taxonomic_verification_status { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Name_concept_type_specific_concept_jsonGetByFieldsAndQuery name/{concept_type}/{specific_concept}.json
		/// </summary>
		/// <param name="concept_type">The type of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined as a name-value pair, as in "concept_type=[nytd_geo|nytd_per|nytd_org|nytd_des]".
		///</param>
		/// <param name="specific_concept">The name of the concept, used for Constructing a Semantic API Request by Concept Type and Specific Concept Name. The parameter is defined in the URI path, as the element immediately preceding ".json" like with "Baseball.json".
		///</param>
		/// <param name="fields">"all" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query
		///
		///Optional fields are returned in result_set. They are briefly explained here:
		///
		///pages: A list of topic pages associated with a specific concept.
		///ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol.
		///links: A list of links from this concept to external data resources.
		///taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts.
		///combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts.
		///geocodes: For geographic concepts, the full GIS record from geonames.
		///article_list: A list of up to 10 articles associated with this concept.
		///scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article.
		///search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept.
		///</param>
		/// <param name="query">Precedes the search term string. Used in a Search Query. Except for &lt;specific_concept_name&gt;, Search Query will take the required parameters listed above (&lt;concept_type&gt;, &lt;concept_uri&gt;, &lt;article_uri&gt;) as an optional_parameter in addition to the query=&lt;query_term&gt;.</param>
		/// <returns>An array of Concepts</returns>
		public async Task<Name_concept_type_specific_concept_jsonGetByFieldsAndQueryReturn> Name_concept_type_specific_concept_jsonGetByFieldsAndQueryAsync(Name_concept_type_specific_concept_jsonGetByFieldsAndQueryConcept_type concept_type, string specific_concept, Name_concept_type_specific_concept_jsonGetByFieldsAndQueryFields fields, string query, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "name/{concept_type}/{specific_concept}.json?fields=" + fields+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Name_concept_type_specific_concept_jsonGetByFieldsAndQueryReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search_jsonGetByQueryAndOffsetAndFields search.json
		/// </summary>
		/// <param name="query">Precedes the search term string. Used in a Search Query. Except for &lt;specific_concept_name&gt;, Search Query will take the required parameters listed above (&lt;concept_type&gt;, &lt;concept_uri&gt;, &lt;article_uri&gt;) as an optional_parameter in addition to the query=&lt;query_term&gt;.</param>
		/// <param name="offset">Integer value for the index count from the first concept to the last concept, sorted alphabetically. Used in a Search Query. A Search Query will return up to 10 concepts in its results.</param>
		/// <param name="fields">"all" or comma-separated list of specific optional fields: pages, ticker_symbol, links, taxonomy, combinations, geocodes, article_list, scope_notes, search_api_query
		///
		///Optional fields are returned in result_set. They are briefly explained here:
		///
		///pages: A list of topic pages associated with a specific concept.
		///ticker_symbol: If this concept is a publicly traded company, this field contains the ticker symbol.
		///links: A list of links from this concept to external data resources.
		///taxonomy: For descriptor concepts, this field returns a list of taxonomic relations to other concepts.
		///combinations: For descriptor concepts, this field returns a list of the specific meanings tis concept takes on when combined with other concepts.
		///geocodes: For geographic concepts, the full GIS record from geonames.
		///article_list: A list of up to 10 articles associated with this concept.
		///scope_notes: Scope notes contains clarifications and meaning definitions that explicate the relationship between the concept and an article.
		///search_api_query: Returns the request one would need to submit to the Article Search API to obtain a list of articles annotated with this concept.
		///</param>
		/// <returns>An array of Concepts</returns>
		public async Task<Search_jsonGetByQueryAndOffsetAndFieldsReturn> Search_jsonGetByQueryAndOffsetAndFieldsAsync(string query, int offset, Name_concept_type_specific_concept_jsonGetByFieldsAndQueryFields fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "search.json?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&offset="+offset+"&fields=" + fields;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Search_jsonGetByQueryAndOffsetAndFieldsReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Name_concept_type_specific_concept_jsonGetByFieldsAndQueryConcept_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nytd_geo")]
		nytd_geo = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nytd_per")]
		nytd_per = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nytd_org")]
		nytd_org = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="nytd_des")]
		nytd_des = 3,
	}
	
	public enum Name_concept_type_specific_concept_jsonGetByFieldsAndQueryFields
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="all")]
		all = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="pages")]
		pages = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ticker_symbol")]
		ticker_symbol = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="links")]
		links = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="taxonomy")]
		taxonomy = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="combinations")]
		combinations = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="geocodes")]
		geocodes = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="article_list")]
		article_list = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="scope_notes")]
		scope_notes = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="search_api_query")]
		search_api_query = 9,
	}
	
	public class Name_concept_type_specific_concept_jsonGetByFieldsAndQueryReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="copyright")]
		public string Copyright { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="num_results")]
		public System.Nullable<System.Int32> Num_results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Concept[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class Search_jsonGetByQueryAndOffsetAndFieldsReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="copyright")]
		public string Copyright { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="num_results")]
		public System.Nullable<System.Int32> Num_results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public ConceptRelation[] Results { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
