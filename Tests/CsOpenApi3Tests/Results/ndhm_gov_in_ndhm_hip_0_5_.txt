//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessTokenValidity
	{
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiry")]
		public System.DateTimeOffset Expiry { get; set; }
		
		/// <summary>
		/// number of times, the token can be used
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public int Limit { get; set; }
		
		/// <summary>
		/// what is the purpose of user auth
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purpose")]
		public AccessTokenValidityPurpose Purpose { get; set; }
		
		/// <summary>
		/// identification of requester
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requester")]
		public PatientAuthRequester Requester { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccessTokenValidityPurpose
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LINK")]
		LINK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KYC")]
		KYC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KYC_AND_LINK")]
		KYC_AND_LINK = 2,
	}
	
	/// <summary>
	/// identification of requester
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientAuthRequester
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PatientAuthRequesterType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PatientAuthRequesterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIP")]
		HIP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIU")]
		HIU = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthConfirmIdentifier
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AuthConfirmIdentifierType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuthConfirmIdentifierType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOBILE")]
		MOBILE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="expiry")]
		public string Expiry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hint")]
		public string Hint { get; set; }
	}
	
	/// <summary>
	/// Subjected to CM specific capability
	/// 1. MOBILE_OTP - for SMS OTP
	/// 2. DIRECT - for authentication directly with the patient. e.g. Mobile App, SMS
	/// 3. AADHAAR_OTP - for auth using OTP sent to Aadhaar number
	/// 4. DEMOGRAPHICS - for auth using demographic verification.
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuthenticationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOBILE_OTP")]
		MOBILE_OTP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIRECT")]
		DIRECT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEMOGRAPHICS")]
		DEMOGRAPHICS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AADHAAR_OTP")]
		AADHAAR_OTP = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CareContext
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceNumber")]
		public string ReferenceNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CareContextRepresentation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="display")]
		public string Display { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceNumber")]
		public string ReferenceNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificateOrKeyGetSchema
	{
		
		[System.Runtime.Serialization.DataMember(Name="alg")]
		public string Alg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="e")]
		public string E { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kid")]
		public string Kid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kty")]
		public string Kty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="n")]
		public string N { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="use")]
		public string Use { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="x5c")]
		public string[] X5c { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="x5t")]
		public string X5t { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="x5t#S256")]
		public string X5t_S256 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Certs
	{
		
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public CertificateOrKeyGetSchema[] Keys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConsentAcknowledgement
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consentId")]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ConsentAcknowledgementStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConsentAcknowledgementStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OK")]
		OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConsentManagerPatientID
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ConsentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GRANTED")]
		GRANTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPIRED")]
		EXPIRED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DENIED")]
		DENIED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REQUESTED")]
		REQUESTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REVOKED")]
		REVOKED = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataNotification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public string[] Entries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyMaterial")]
		public KeyMaterial KeyMaterial { get; set; }
		
		/// <summary>
		/// Total number of pages.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageCount")]
		public int PageCount { get; set; }
		
		/// <summary>
		/// Current page number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public int PageNumber { get; set; }
		
		/// <summary>
		/// Transaction Id issued when data requested.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyMaterial
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cryptoAlg")]
		public string CryptoAlg { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="curve")]
		public string Curve { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dhPublicKey")]
		public KeyObject DhPublicKey { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="nonce")]
		public string Nonce { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyObject
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="expiry")]
		public System.DateTimeOffset Expiry { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyValue")]
		public string KeyValue { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DateRange
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from")]
		public System.DateTimeOffset From { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public System.DateTimeOffset To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntryContent
	{
		
		/// <summary>
		/// care context reference number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="careContextReference")]
		public string CareContextReference { get; set; }
		
		/// <summary>
		/// Md5 checksum of the content before encryption
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		/// <summary>
		/// Encrypted content
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// mimetype of the content.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="media")]
		public EntryContentMedia Media { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntryContentMedia
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/fhir+json")]
		application_fhirPlusjson = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntryLink
	{
		
		/// <summary>
		/// care context reference number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="careContextReference")]
		public string CareContextReference { get; set; }
		
		/// <summary>
		/// Md5 checksum of the content before encryption
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checksum")]
		public string Checksum { get; set; }
		
		/// <summary>
		/// Encrypted content
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public string Link { get; set; }
		
		/// <summary>
		/// mimetype of the content.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="media")]
		public EntryLinkMedia Media { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EntryLinkMedia
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/fhir+json")]
		application_fhirPlusjson = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public ErrorCode Code { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1000 = 1000,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_10001 = 10001,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HIPConsentNotification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notification")]
		public HIPConsentNotificationNotification Notification { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	public class HIPConsentNotificationNotification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consentDetail")]
		public HIPConsentNotificationNotificationConsentDetail ConsentDetail { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consentId")]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public string Signature { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ConsentStatus Status { get; set; }
	}
	
	public class HIPConsentNotificationNotificationConsentDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="careContexts")]
		public HIPConsentNotificationNotificationConsentDetailCareContexts[] HIPConsentNotificationNotificationConsentDetailCareContexts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consentId")]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consentManager")]
		public string ConsentManager { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hiTypes")]
		public HITypeEnum[] HiTypes { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hip")]
		public string Hip { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public ConsentManagerPatientID Patient { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="permission")]
		public Permission Permission { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purpose")]
		public UsePurpose Purpose { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaVersion")]
		public string SchemaVersion { get; set; }
	}
	
	public class HIPConsentNotificationNotificationConsentDetailCareContexts
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="careContextReference")]
		public string CareContextReference { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patientReference")]
		public string PatientReference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HITypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPConsultation")]
		OPConsultation = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Prescription")]
		Prescription = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DischargeSummary")]
		DischargeSummary = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DiagnosticReport")]
		DiagnosticReport = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Permission
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessMode")]
		public PermissionAccessMode AccessMode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataEraseAt")]
		public System.DateTimeOffset DataEraseAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public PermissionDateRange DateRange { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public PermissionFrequency Frequency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PermissionAccessMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VIEW")]
		VIEW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STORE")]
		STORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="QUERY")]
		QUERY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STREAM")]
		STREAM = 3,
	}
	
	public class PermissionDateRange
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from")]
		public System.DateTimeOffset From { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public System.DateTimeOffset To { get; set; }
	}
	
	public class PermissionFrequency
	{
		
		[System.Runtime.Serialization.DataMember(Name="repeats")]
		public System.Nullable<System.Int32> Repeats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<PermissionFrequencyUnit> Unit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PermissionFrequencyUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HOUR")]
		HOUR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEEK")]
		WEEK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DAY")]
		DAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MONTH")]
		MONTH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="YEAR")]
		YEAR = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UsePurpose
	{
		
		/// <summary>
		/// From the fixed set, documented at refUri
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refUri")]
		public string RefUri { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HIPConsentNotificationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="acknowledgement")]
		public ConsentAcknowledgement Acknowledgement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resp")]
		public RequestReference Resp { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RequestReference
	{
		
		/// <summary>
		/// the requestId that was passed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HIPHealthInformationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hiRequest")]
		public HIPHealthInformationRequestHiRequest HiRequest { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	public class HIPHealthInformationRequestHiRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consent")]
		public Consent Consent { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dataPushUrl")]
		public string DataPushUrl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyMaterial")]
		public KeyMaterial KeyMaterial { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Consent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HIPHealthInformationRequestAcknowledgement
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hiRequest")]
		public HIPHealthInformationRequestAcknowledgementHiRequest HiRequest { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resp")]
		public RequestReference Resp { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	public class HIPHealthInformationRequestAcknowledgementHiRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sessionStatus")]
		public HIPHealthInformationRequestAcknowledgementHiRequestSessionStatus SessionStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HIPHealthInformationRequestAcknowledgementHiRequestSessionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACKNOWLEDGED")]
		ACKNOWLEDGED = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HealthInformationNotification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notification")]
		public HealthInformationNotificationNotification Notification { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	public class HealthInformationNotificationNotification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="consentId")]
		public string ConsentId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="doneAt")]
		public System.DateTimeOffset DoneAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notifier")]
		public HealthInformationNotificationNotificationNotifier Notifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusNotification")]
		public HealthInformationNotificationNotificationStatusNotification StatusNotification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	public class HealthInformationNotificationNotificationNotifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<HealthInformationNotificationNotificationNotifierType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HealthInformationNotificationNotificationNotifierType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIU")]
		HIU = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIP")]
		HIP = 1,
	}
	
	public class HealthInformationNotificationNotificationStatusNotification
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hipId")]
		public string HipId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sessionStatus")]
		public HealthInformationNotificationNotificationStatusNotificationSessionStatus SessionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusResponses")]
		public HealthInformationNotificationNotificationStatusNotificationStatusResponses[] HealthInformationNotificationNotificationStatusNotificationStatusResponses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HealthInformationNotificationNotificationStatusNotificationSessionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSFERRED")]
		TRANSFERRED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 1,
	}
	
	public class HealthInformationNotificationNotificationStatusNotificationStatusResponses
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="careContextReference")]
		public string CareContextReference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hiStatus")]
		public HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatus HiStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HealthInformationNotificationNotificationStatusNotificationStatusResponsesHiStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DELIVERED")]
		DELIVERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OK")]
		OK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERRORED")]
		ERRORED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HeartbeatResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public HeartbeatResponseStatus Status { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HeartbeatResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UP")]
		UP = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DOWN")]
		DOWN = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Identifier
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public IdentifierType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum IdentifierType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOBILE")]
		MOBILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MR")]
		MR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NDHM_HEALTH_NUMBER")]
		NDHM_HEALTH_NUMBER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HEALTH_ID")]
		HEALTH_ID = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinkConfirmationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="confirmation")]
		public LinkConfirmationRequestConfirmation Confirmation { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	public class LinkConfirmationRequestConfirmation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="linkRefNumber")]
		public string LinkRefNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Meta
	{
		
		[System.Runtime.Serialization.DataMember(Name="communicationExpiry")]
		public string CommunicationExpiry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="communicationHint")]
		public string CommunicationHint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="communicationMedium")]
		public MetaCommunicationMedium CommunicationMedium { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum MetaCommunicationMedium
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOBILE")]
		MOBILE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMAIL")]
		EMAIL = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OpenIdConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="jwks_uri")]
		public string Jwks_uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationReference
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationRepresentation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientAddress
	{
		
		[System.Runtime.Serialization.DataMember(Name="district")]
		public string District { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line")]
		public string Line { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pincode")]
		public string Pincode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientAuthConfirmRequest
	{
		
		/// <summary>
		/// note, demographic details are only required for demographic auth at this point.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="credential")]
		public PatientAuthConfirmRequestCredential Credential { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	public class PatientAuthConfirmRequestCredential
	{
		
		[System.Runtime.Serialization.DataMember(Name="authCode")]
		public string AuthCode { get; set; }
		
		/// <summary>
		/// demographic details are only required for demographic auth at this point, in which case identifier.Type must be AADHAAR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="demographic")]
		public PatientDemographic Demographic { get; set; }
	}
	
	/// <summary>
	/// demographic details are only required for demographic auth at this point, in which case identifier.Type must be AADHAAR.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientDemographic
	{
		
		/// <summary>
		/// date of birth in YYYY-MM-DD format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dateOfBirth")]
		public string DateOfBirth { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public PatientDemographicGender Gender { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifier")]
		public AuthConfirmIdentifier Identifier { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PatientDemographicGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="M")]
		M = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="F")]
		F = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="O")]
		O = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="U")]
		U = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientAuthConfirmResponse
	{
		
		/// <summary>
		/// depending on the purpose of auth, as specified in /auth/init, the response may include the following 
		///  1. LINK - only returns **accessToken**
		///  2. KYC - only returns **patient**
		///  3. KYC_AND_LINK - returns both **accessToken** and **patient**
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auth")]
		public PatientAuthConfirmResponseAuth Auth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resp")]
		public RequestReference Resp { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	public class PatientAuthConfirmResponseAuth
	{
		
		/// <summary>
		/// access token for initialization of subsequent action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public PatientDemographicResponse Patient { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validity")]
		public AccessTokenValidity Validity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientDemographicResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PatientAddress Address { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public PatientDemographicGender Gender { get; set; }
		
		/// <summary>
		/// PHR Identifier of patient at consent manager
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifiers")]
		public Identifier[] Identifiers { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yearOfBirth")]
		public int YearOfBirth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientAuthInitRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public PatientAuthInitRequestQuery Query { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	public class PatientAuthInitRequestQuery
	{
		
		/// <summary>
		/// Subjected to CM specific capability
		/// 1. MOBILE_OTP - for SMS OTP
		/// 2. DIRECT - for authentication directly with the patient. e.g. Mobile App, SMS
		/// 3. AADHAAR_OTP - for auth using OTP sent to Aadhaar number
		/// 4. DEMOGRAPHICS - for auth using demographic verification.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authMode")]
		public AuthenticationMode AuthMode { get; set; }
		
		/// <summary>
		/// id  of the patient understood by the CM
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// what is the purpose of user auth
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purpose")]
		public AccessTokenValidityPurpose Purpose { get; set; }
		
		/// <summary>
		/// identification of requester
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requester")]
		public PatientAuthInitRequestQueryRequester Requester { get; set; }
	}
	
	public class PatientAuthInitRequestQueryRequester
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PatientAuthRequesterType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientAuthInitResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="auth")]
		public PatientAuthInitResponseAuth Auth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resp")]
		public RequestReference Resp { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	public class PatientAuthInitResponseAuth
	{
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public AuthMeta Meta { get; set; }
		
		/// <summary>
		/// Subjected to CM specific capability
		/// 1. MOBILE_OTP - for SMS OTP
		/// 2. DIRECT - for authentication directly with the patient. e.g. Mobile App, SMS
		/// 3. AADHAAR_OTP - for auth using OTP sent to Aadhaar number
		/// 4. DEMOGRAPHICS - for auth using demographic verification.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public AuthenticationMode Mode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientAuthModeQueryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public PatientAuthModeQueryRequestQuery Query { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	public class PatientAuthModeQueryRequestQuery
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// what is the purpose of user auth
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purpose")]
		public AccessTokenValidityPurpose Purpose { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requester")]
		public PatientAuthModeQueryRequestQueryRequester Requester { get; set; }
	}
	
	public class PatientAuthModeQueryRequestQueryRequester
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PatientAuthRequesterType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientAuthModeQueryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="auth")]
		public PatientAuthModeQueryResponseAuth Auth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resp")]
		public RequestReference Resp { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	public class PatientAuthModeQueryResponseAuth
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="modes")]
		public AuthenticationMode[] Modes { get; set; }
		
		/// <summary>
		/// what is the purpose of user auth
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="purpose")]
		public AccessTokenValidityPurpose Purpose { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientAuthNotification
	{
		
		/// <summary>
		/// depending on the purpose of auth, as specified in /auth/init, the response may include the following 
		///  1. LINK - only returns **accessToken**
		///  2. KYC - only returns **patient**
		///  3. KYC_AND_LINK - returns both **accessToken** and **patient**
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="auth")]
		public PatientAuthNotificationAuth Auth { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	public class PatientAuthNotificationAuth
	{
		
		/// <summary>
		/// access token for initialization of subsequent action.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public PatientDemographicResponse Patient { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PatientAuthNotificationAuthStatus Status { get; set; }
		
		/// <summary>
		/// transaction id for auth session
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="validity")]
		public AccessTokenValidity Validity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PatientAuthNotificationAuthStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GRANTED")]
		GRANTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DENIED")]
		DENIED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientAuthNotificationAcknowledgement
	{
		
		[System.Runtime.Serialization.DataMember(Name="acknowledgement")]
		public PatientAuthNotificationAcknowledgementAcknowledgement Acknowledgement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resp")]
		public RequestReference Resp { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	public class PatientAuthNotificationAcknowledgementAcknowledgement
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PatientAuthNotificationAcknowledgementAcknowledgementStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PatientAuthNotificationAcknowledgementAcknowledgementStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OK")]
		OK = 0,
	}
	
	/// <summary>
	/// what is the purpose of user auth
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PatientAuthPurpose
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LINK")]
		LINK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KYC")]
		KYC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KYC_AND_LINK")]
		KYC_AND_LINK = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientCareContextLink
	{
		
		/// <summary>
		/// AccessToken fetched in the user auth process for the purpose specified
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public PatientCareContextLinkPatient Patient { get; set; }
	}
	
	public class PatientCareContextLinkPatient
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="careContexts")]
		public CareContextRepresentation[] CareContexts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="display")]
		public string Display { get; set; }
		
		/// <summary>
		/// patient reference id at HIP
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceNumber")]
		public string ReferenceNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientCareContextLinkRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="link")]
		public PatientCareContextLink Link { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientCareContextLinkResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="acknowledgement")]
		public PatientCareContextLinkResponseAcknowledgement Acknowledgement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resp")]
		public RequestReference Resp { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	public class PatientCareContextLinkResponseAcknowledgement
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public PatientCareContextLinkResponseAcknowledgementStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PatientCareContextLinkResponseAcknowledgementStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESS")]
		SUCCESS = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientDiscoveryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public PatientDiscoveryRequestPatient Patient { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		/// <summary>
		/// correlation-Id for patient discovery and subsequent care context linkage
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	public class PatientDiscoveryRequestPatient
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public PatientDemographicGender Gender { get; set; }
		
		/// <summary>
		/// Identifier of patient at consent manager
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unverifiedIdentifiers")]
		public Identifier[] UnverifiedIdentifiers { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="verifiedIdentifiers")]
		public Identifier[] VerifiedIdentifiers { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yearOfBirth")]
		public int YearOfBirth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientDiscoveryResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public PatientRepresentation Patient { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resp")]
		public RequestReference Resp { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientRepresentation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="careContexts")]
		public CareContextRepresentation[] CareContexts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="display")]
		public string Display { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="matchedBy")]
		public IdentifierType[] MatchedBy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceNumber")]
		public string ReferenceNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PatientGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="M")]
		M = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="F")]
		F = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="O")]
		O = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="U")]
		U = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientLinkReferenceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public PatientLinkReferenceRequestPatient Patient { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	public class PatientLinkReferenceRequestPatient
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="careContexts")]
		public CareContext[] CareContexts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceNumber")]
		public string ReferenceNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientLinkReferenceResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="link")]
		public PatientLinkReferenceResultLink Link { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resp")]
		public RequestReference Resp { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	public class PatientLinkReferenceResultLink
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="authenticationType")]
		public PatientLinkReferenceResultLinkAuthenticationType AuthenticationType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public Meta Meta { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceNumber")]
		public string ReferenceNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PatientLinkReferenceResultLinkAuthenticationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DIRECT")]
		DIRECT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIATED")]
		MEDIATED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientLinkResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public PatientLinkResultPatient Patient { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resp")]
		public RequestReference Resp { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	public class PatientLinkResultPatient
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="careContexts")]
		public CareContextRepresentation[] CareContexts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="display")]
		public string Display { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="referenceNumber")]
		public string ReferenceNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientSMSNotifcationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="notification")]
		public PatientSMSNotifcationRequestNotification Notification { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	public class PatientSMSNotifcationRequestNotification
	{
		
		/// <summary>
		/// Information about care context or visit for which the SMS is being sent.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="careContextInfo")]
		public string CareContextInfo { get; set; }
		
		/// <summary>
		/// A link pointing to digital health records of the patient. PHR App's deeplink will be sent in SMS if this field is not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deeplinkUrl")]
		public string DeeplinkUrl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hip")]
		public PatientSMSNotifcationRequestNotificationHip Hip { get; set; }
		
		/// <summary>
		/// Phone number of the receiver with country code
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="phoneNo")]
		public string PhoneNo { get; set; }
		
		/// <summary>
		/// Name of the reciever/patient. Receiver's name will not be sent if not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="receiverName")]
		public string ReceiverName { get; set; }
	}
	
	public class PatientSMSNotifcationRequestNotificationHip
	{
		
		/// <summary>
		/// Registered id of the HIP.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Name of the HIP(Hospital). Hospital's name will be fetched from registry if not provided.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatientSMSNotifcationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resp")]
		public RequestReference Resp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<PatientSMSNotifcationResponseStatus> Status { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PatientSMSNotifcationResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACKNOWLEDGED")]
		ACKNOWLEDGED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERRORED")]
		ERRORED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SessionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientId")]
		public string ClientId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientSecret")]
		public string ClientSecret { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SessionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		/// <summary>
		/// In Minutes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expiresIn")]
		public System.Nullable<System.Int32> ExpiresIn { get; set; }
		
		/// <summary>
		/// In Minutes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="refreshExpiresIn")]
		public System.Nullable<System.Int32> RefreshExpiresIn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="refreshToken")]
		public string RefreshToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tokenType")]
		public string TokenType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShareProfileAcknowledgement
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ShareProfileAcknowledgementStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ShareProfileAcknowledgementStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESS")]
		SUCCESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILURE")]
		FAILURE = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShareProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="patient")]
		public ShareProfileRequestPatient Patient { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	public class ShareProfileRequestPatient
	{
		
		/// <summary>
		/// additional details about HIP retrieved after scanning QR.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hipCode")]
		public string HipCode { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="userDemographics")]
		public ShareProfileRequestPatientUserDemographics UserDemographics { get; set; }
	}
	
	public class ShareProfileRequestPatientUserDemographics
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public PatientAddress Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dayOfBirth")]
		public System.Nullable<System.Int32> DayOfBirth { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public PatientDemographicGender Gender { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="healthId")]
		public string HealthId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="healthIdNumber")]
		public string HealthIdNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identifiers")]
		public Identifier[] Identifiers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="monthOfBirth")]
		public System.Nullable<System.Int32> MonthOfBirth { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yearOfBirth")]
		public int YearOfBirth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ShareProfileResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="acknowledgement")]
		public ShareProfileAcknowledgement Acknowledgement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Error Error { get; set; }
		
		/// <summary>
		/// a nonce, unique for each HTTP request
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="requestId")]
		public string RequestId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resp")]
		public RequestReference Resp { get; set; }
		
		/// <summary>
		/// Date time format in UTC, includes miliseconds YYYY-MM-DDThh:mm:ss.vZ
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.DateTimeOffset Timestamp { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get openid configuration
		/// V0_5_well_knownOpenid_configurationGet v0.5/.well-known/openid-configuration
		/// </summary>
		/// <returns>OK</returns>
		public async Task<OpenIdConfiguration> V0_5_well_knownOpenid_configurationGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/.well-known/openid-configuration";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OpenIdConfiguration>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Discover patient's accounts
		/// Request for patient care context discover, made by Gateway intended for a specific HIP. It is expected that HIP will subsequently return either zero or one patient record with (potentially masked) associated care contexts
		/// 1. **At least one of the verified identifier matches**
		/// 2. **Name (fuzzy), gender matches**
		/// 3. **If YoB was given, age band(+-2) matches**
		/// 4. **If unverified identifiers were given, one of them matches**
		/// 5. **If more than one patient records would be found after aforementioned steps, then patient who matches most verified and unverified identifiers would be returned.**
		/// 6. **If there would be still more than one patients (after ranking) error would be returned**
		/// 7. **Intended HIP should be able to resolve and identify results returned in the subsequent link confirmation request via the specified transactionId**
		/// 8. **Intended HIP should store the discovery results with transactionId and care contexts discovered for subsequent link initiation**
		/// 
		/// V0_5Care_contextsDiscoverPost v0.5/care-contexts/discover
		/// </summary>
		public async Task V0_5Care_contextsDiscoverPostAsync(PatientDiscoveryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/care-contexts/discover";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Response to patient's account discovery request
		/// Result of patient care-context discovery request at HIP end. If a matching patient found with zero or more care contexts associated, it is specified as result attribute. If the prior discovery request, resulted in errors then it is specified in the error attribute. Reasons of errors can be
		/// 1. **more than one definitive match for the given request**
		/// 2. **no verified identifer was specified**
		/// 
		/// V0_5Care_contextsOn_discoverPost v0.5/care-contexts/on-discover
		/// </summary>
		public async Task V0_5Care_contextsOn_discoverPostAsync(PatientDiscoveryResult requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/care-contexts/on-discover";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get certs for JWT verification
		/// V0_5CertsGet v0.5/certs
		/// </summary>
		/// <returns>OK</returns>
		public async Task<Certs> V0_5CertsGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/certs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Certs>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Consent notification
		/// Notification of consents to health information providers consent request granted, consent revoked, consent expired. Only the GRANTED and REVOKED status notifications will be sent to HIP.
		/// 1. If consent is granted, status=GRANTED, then consentDetail contains the consent artefact details and signature is available.
		/// 2. If consent is revoked, then status=REVOKED, and consentId specifes which consent artefact is revoked.
		/// 
		/// V0_5ConsentsHipNotifyPost v0.5/consents/hip/notify
		/// </summary>
		public async Task V0_5ConsentsHipNotifyPostAsync(HIPConsentNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/consents/hip/notify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Consent notification
		/// This API is called by HIP as acknowledgement to notification of consents, in cases of consent revocation and expiration.
		/// 
		/// V0_5ConsentsHipOn_notifyPost v0.5/consents/hip/on-notify
		/// </summary>
		public async Task V0_5ConsentsHipOn_notifyPostAsync(HIPConsentNotificationResponse requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/consents/hip/on-notify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Health information data request
		/// API called by HIP to acknowledge Health information request receipt. Either the **hiRequest** or **error** must be specified. **hiRequest** element returns the same transactionId as before with a status indicating that the request is acknowledged.
		/// 
		/// V0_5Health_informationHipOn_requestPost v0.5/health-information/hip/on-request
		/// </summary>
		public async Task V0_5Health_informationHipOn_requestPostAsync(HIPHealthInformationRequestAcknowledgement requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/health-information/hip/on-request";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Health information data request
		/// API called by CM to request Health information from HIP against a validated consent artefact. The transactionId is the correlation id that HIP should use use when pushing data to the **dataPushUrl**.
		/// 
		/// V0_5Health_informationHipRequestPost v0.5/health-information/hip/request
		/// </summary>
		public async Task V0_5Health_informationHipRequestPostAsync(HIPHealthInformationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/health-information/hip/request";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Notifications corresponding to events during data flow
		/// API called by HIU and HIP during data-transfer.
		/// 1. HIP on transfer of data would send **sessionStatus** - one of [TRANSFERRED, FAILED]
		/// 2. HIP would also send **hiStatus** for each *careContextReference* - on of [DELIVERED, ERRORED]
		/// 3. HIU on receipt of data would send **sessionStatus** - one of [TRANSFERRED, FAILED]. For example, FAILED when if data was not sent or if invalid data was sent
		/// 4. HIU would also send **hiStatus** for each *careContextReference* - one of [OK, ERRORED]
		/// 
		/// V0_5Health_informationNotifyPost v0.5/health-information/notify
		/// </summary>
		public async Task V0_5Health_informationNotifyPostAsync(HealthInformationNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/health-information/notify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// health information transfer API
		/// **NOTE**: This API is actually the callback URL that is passed as **dataPushUrl** in the data request API - /v0.5/health-information/hip/request. This API is directly called by HIP Data Bridge and is not mediated via CM, and hence not routed through the Gateway.
		/// 1. This API should be implemented at HIU side. It maybe implemented by the Data Bridge representing the HIU.
		/// 2. Entry elements maybe ***content*** or ***link***, although for version 1, entry ***content*** is preferred.
		/// 3. Entry ***content*** (or even link reference content) must be encrypted by means of Elliptic-curve Diffie–Hellman Key Exchange, utilizing the HIU keymaterials that are passed through the data request API - /v0.5/health-information/hip/request.
		/// 4. Media contains the mimetype of content, and for v1, it is "application/fhir+json"
		/// 5. checksum is Md5 checksum of the data conent, before encryption
		/// 6. Please refer to the NDHM Sandbox Documentation for the format of FHIR bundle that is passed through content
		/// 
		/// V0_5Health_informationTransferPost v0.5/health-information/transfer
		/// </summary>
		public async Task V0_5Health_informationTransferPostAsync(DataNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/health-information/transfer";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get consent request status
		/// V0_5HeartbeatGet v0.5/heartbeat
		/// </summary>
		/// <returns>OK</returns>
		public async Task<HeartbeatResponse> V0_5HeartbeatGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/heartbeat";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HeartbeatResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// API for HIP initiated care-context linking for patient
		/// API to submit care-context to CM for HIP initiated linking. The API must accompany the "accessToken" fetched in the users/auth process.
		/// 1. subsequent usage for accessToken may be invalid if it was meant for one-time usage or if it expired
		/// 
		/// V0_5LinksLinkAdd_contextsPost v0.5/links/link/add-contexts
		/// </summary>
		public async Task V0_5LinksLinkAdd_contextsPostAsync(PatientCareContextLinkRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/links/link/add-contexts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Token submission by Consent Manager for link confirmation
		/// API to submit the token that was sent by HIP during the link request.
		/// 
		/// V0_5LinksLinkConfirmPost v0.5/links/link/confirm
		/// </summary>
		public async Task V0_5LinksLinkConfirmPostAsync(LinkConfirmationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/links/link/confirm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Link patient's care contexts
		/// Request from Gateway to links care contexts associated with only one patient
		/// 1. **Validate account reference number and care context reference number**
		/// 2. **Validate transactionId in the request with discovery request entry to check whether there was a discovery
		/// and were these care contexts discovered or not for a given patient**
		/// 3. **Before eventual link confirmation, HIP needs to authenticate the request with the patient(eg: OTP verification)**
		/// 4. **HIP should communicate the mode of authentication of a successful request to Consent Manager**
		/// 
		/// V0_5LinksLinkInitPost v0.5/links/link/init
		/// </summary>
		public async Task V0_5LinksLinkInitPostAsync(PatientLinkReferenceRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/links/link/init";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// callback API for HIP initiated patient linking /link/add-context
		/// If the accessToken is valid for purpose of linking, and specified details provided, CM will send "acknoweldgement.status" as SUCCESS. If any error occcurred, for example invalid token, or other required patient or care-context information not provided, then "error" attribute conveys so.
		/// 1. **accessToken must be valid and must be for the purpose of linking**
		/// 
		/// V0_5LinksLinkOn_add_contextsPost v0.5/links/link/on-add-contexts
		/// </summary>
		public async Task V0_5LinksLinkOn_add_contextsPostAsync(PatientCareContextLinkResponse requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/links/link/on-add-contexts";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Token authenticated by HIP, indicating completion of linkage of care-contexts
		/// Returns a list of linked care contexts with patient reference number.
		/// 1. **Validated and linked account reference number**
		/// 2. **Validated that the token sent from Consent Manager is same as the one generated by HIP**
		/// 3. **Verified that same Consent Manager which made the link request is sending the token**
		/// 4. **Results of unmasked linked care contexts with patient reference number**
		/// 
		/// V0_5LinksLinkOn_confirmPost v0.5/links/link/on-confirm
		/// </summary>
		public async Task V0_5LinksLinkOn_confirmPostAsync(PatientLinkResult requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/links/link/on-confirm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Response to patient's care context link request
		/// Result of patient care-context link request from HIP end. This happens in context of previous discovery of patient found at HIP end, therefore the link requests ought to be in reference to the patient reference and care-context references previously returned by the HIP. The correlation of discovery and link request is maintained through the transactionId. HIP should have
		/// 1. **Validated transactionId in the request to check whether there was a discovery done previously, and the link request corresponds to returned patient care care context references**
		/// 2. **Before returning the response, HIP should have sent an authentication request to the patient(eg: OTP verification)**
		/// 3. **HIP should communicate the mode of authentication of a successful request**
		/// 4. **HIP subsequently should expect the token passed via /link/confirm against the link.referenceNumber passed in this call**
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// The error section in the body, represents the potential errors that may have occurred. Possible reasons:
		/// 1. **Patient reference number is invalid**
		/// 2. **Care context reference numbers are invalid**
		/// 
		/// V0_5LinksLinkOn_initPost v0.5/links/link/on-init
		/// </summary>
		public async Task V0_5LinksLinkOn_initPostAsync(PatientLinkReferenceResult requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/links/link/on-init";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Response to patient's share profile request
		/// Result of patient share profile request at HIP end.
		/// 
		/// V0_5PatientsProfileOn_sharePost v0.5/patients/profile/on-share
		/// </summary>
		public async Task V0_5PatientsProfileOn_sharePostAsync(ShareProfileResult requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/patients/profile/on-share";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Share patient profile details
		/// Request for sharing patient's profile details to HIP
		/// 
		/// V0_5PatientsProfileSharePost v0.5/patients/profile/share
		/// </summary>
		public async Task V0_5PatientsProfileSharePostAsync(ShareProfileRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/patients/profile/share";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// API for HIP to send SMS notifications to patients
		/// API to send SMS notifications to patient with custom deeplink.
		/// 
		/// V0_5PatientsSmsNotifyPost v0.5/patients/sms/notify
		/// </summary>
		public async Task V0_5PatientsSmsNotifyPostAsync(PatientSMSNotifcationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/patients/sms/notify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Acknowledgment response for SMS notification sent to patient by HIP
		/// If the SMS notification is successfully sent to patient then "status" will be "ACKNOWLEDGED" with no error.
		/// If the SMS notification is failed then "status" will be "ERRORED" with error.
		/// 
		/// V0_5PatientsSmsOn_notifyPost v0.5/patients/sms/on-notify
		/// </summary>
		public async Task V0_5PatientsSmsOn_notifyPostAsync(PatientSMSNotifcationResponse requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/patients/sms/on-notify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get access token
		/// V0_5SessionsPost v0.5/sessions
		/// </summary>
		/// <returns>OK</returns>
		public async Task<SessionResponse> V0_5SessionsPostAsync(SessionRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/sessions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SessionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Confirmation request sending token, otp or other authentication details from HIP/HIU for confirmation
		/// This API is called by HIP/HIUs to confirm authentication of users. The transactionId returned by the previous callback API /users/auth/on-init must be sent. If Authentication is successful the callback API will send an "access token" for subsequent purpose specific API calls. Note only **credential.authCode** or **credential.demographic** should be sent
		/// 1. demographic details are only required for  demographic auth as of now.
		/// 2. demographic details are required only in MEDIATED cases and if the **auth.mode** so demands. e.g. if **auth.mode** is DEMOGRAPHICS. Usually for demographic authentication, the name, gender and DOB must be exactly as specified in User Account.
		/// 3. demographic.identifier is optional, however maybe required if authentication so mandates.
		/// 4. credential.authCode is required for other MEDIATED authentication like MOBILE_OTP, AADHAAR_OTP.
		/// 
		/// V0_5UsersAuthConfirmPost v0.5/users/auth/confirm
		/// </summary>
		public async Task V0_5UsersAuthConfirmPostAsync(PatientAuthConfirmRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/users/auth/confirm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a patient's authentication modes relevant to specified purpose
		/// This API is meant for identify supported authentication modes for a patient given a specific purpose
		/// 
		/// V0_5UsersAuthFetch_modesPost v0.5/users/auth/fetch-modes
		/// </summary>
		public async Task V0_5UsersAuthFetch_modesPostAsync(PatientAuthModeQueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/users/auth/fetch-modes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Initialize authentication from HIP
		/// This API is called by HIPs to initiate authentication of users. A transactionId is retuned by the corresponding callback API for confirmation of user auth.
		/// 
		/// V0_5UsersAuthInitPost v0.5/users/auth/init
		/// </summary>
		public async Task V0_5UsersAuthInitPostAsync(PatientAuthInitRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/users/auth/init";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// notification API in case of DIRECT mode of authentication by the CM
		/// This API is called by CM to confirm authentication of users. The transactionId returned is same as that passed in /auth/on-init. The "auth.status" conveys whether the request was GRANTED or DENIED.
		/// 
		/// 1. **auth.accessToken** - is specific to the purpose mentioned in the /auth/init. This token needs to be used for initiating the intended action. For example for HIP initiated linking of care-contexts
		/// 2. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.
		/// 3. The payload is conditional to the purpose of auth. If purpose specified in /auth/init is KYC or KYC_AND_LINK, then patient details are passed. **auth.accessToken** is passed only if the purpose is LINK or KYC_AND_LINK.
		/// 
		/// V0_5UsersAuthNotifyPost v0.5/users/auth/notify
		/// </summary>
		public async Task V0_5UsersAuthNotifyPostAsync(PatientAuthNotification requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/users/auth/notify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// callback API for /auth/confirm (in case of MEDIATED auth) to confirm user authentication or not
		/// This API is called by CM to confirm authentication of users.
		/// 
		/// 1. **auth.accessToken** - is specific to the purpose mentioned in the /auth/init. This token needs to be used for initiating the intended action. For example for HIP initiated linking of care-contexts
		/// 2. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.
		/// 
		/// V0_5UsersAuthOn_confirmPost v0.5/users/auth/on-confirm
		/// </summary>
		public async Task V0_5UsersAuthOn_confirmPostAsync(PatientAuthConfirmResponse requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/users/auth/on-confirm";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Identification result for a consent-manager user-id
		/// If a patient is found then **auth** attribute contains the supported modes for the specified purpose.
		/// Otherwise, error is raised for invalid requests or for non-existent id.
		/// Note in addition to the "Authorization" header, one of the following headers must be specified
		/// 1. **X-HIU-ID** if the requester is HIU (identified from /auth/fetch-modes requester.id)
		/// 2. **X-HIP-ID** if the requester is HIP (identified from /auth/fetch-modes requester.id)
		/// 
		/// V0_5UsersAuthOn_fetch_modesPost v0.5/users/auth/on-fetch-modes
		/// </summary>
		public async Task V0_5UsersAuthOn_fetch_modesPostAsync(PatientAuthModeQueryResponse requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/users/auth/on-fetch-modes";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Response to user authentication initialization from HIP
		/// If the patient's id is valid, CM will return a transactionId as initialization of user auth. If the request is valid, then 'auth.mode' will convey how the authentication should be done. The authentication can be *mediated* or *direct*. For mediated authentication modes, HIP or HIU is epected to send over relevant code (OTP/token) or demographic info via subsequent API call to /auth/confirm. for direct authentication case, CM will notify requester through/users/auth/notify API.
		/// 
		/// 1. **auth.mode** conveys whats the mode of authentication is, and what is expected from HIP/HIU in the subsequent /auth/confirm API call. Possible values
		/// 1. MOBILE_OTP - auth via OTP to registered mobile. Mediated.
		/// 2. AADHAAR_OTP - auth initiated with Aadhaar with OTP. Mediated.
		/// 3. DEMOGRAPHICS - auth initiated with demographic verification
		/// 4. DIRECT - for authentication directly with the patient. e.g. Mobile App, SMS. In this case, the HIP/HIU is not expected to call subsequent /auth/confirm call. CM will do direct authentication with the User (e.g. Mobile App, SMS etc) and will notify requester
		/// 2. **meta.expiry** conveys the expiry time of the token and the authentication session
		/// 3. **NOTE**, only one of **X-HIP-ID** or **X-HIU-ID** will be sent as part of header, not both.
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// 
		/// The error section in the body, represents the potential errors that may have occurred. Possible reasons:
		/// 1. Patient id is invalid
		/// 
		/// V0_5UsersAuthOn_initPost v0.5/users/auth/on-init
		/// </summary>
		public async Task V0_5UsersAuthOn_initPostAsync(PatientAuthInitResponse requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/users/auth/on-init";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// callback API by HIU/HIPs as acknowledgement of auth notification
		/// This API is called by HIU/HIPs to confirm acknowledgement for receipt of auth notification is case of DIRECT authentication.
		/// 
		/// V0_5UsersAuthOn_notifyPost v0.5/users/auth/on-notify
		/// </summary>
		public async Task V0_5UsersAuthOn_notifyPostAsync(PatientAuthNotificationAcknowledgement requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v0.5/users/auth/on-notify";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
