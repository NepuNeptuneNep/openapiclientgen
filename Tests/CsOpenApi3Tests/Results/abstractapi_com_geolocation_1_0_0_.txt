//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Inline_response_200
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="city_geoname_id")]
		public System.Nullable<System.Int32> City_geoname_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connection")]
		public Inline_response_200Connection Connection { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="continent")]
		public string Continent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="continent_code")]
		public string Continent_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="continent_geoname_id")]
		public System.Nullable<System.Int32> Continent_geoname_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country_code")]
		public string Country_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country_geoname_id")]
		public System.Nullable<System.Int32> Country_geoname_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="country_is_eu")]
		public System.Nullable<System.Boolean> Country_is_eu { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public Inline_response_200Currency Currency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flag")]
		public Inline_response_200Flag Flag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ip_address")]
		public string Ip_address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region_geoname_id")]
		public System.Nullable<System.Int32> Region_geoname_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="region_iso_code")]
		public string Region_iso_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="security")]
		public Inline_response_200Security Security { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public Inline_response_200Timezone Timezone { get; set; }
	}
	
	public class Inline_response_200Connection
	{
		
		[System.Runtime.Serialization.DataMember(Name="autonomous_system_number")]
		public System.Nullable<System.Int32> Autonomous_system_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autonomous_system_organization")]
		public string Autonomous_system_organization { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="connection_type")]
		public string Connection_type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isp_name")]
		public string Isp_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="organization_name")]
		public string Organization_name { get; set; }
	}
	
	public class Inline_response_200Currency
	{
		
		[System.Runtime.Serialization.DataMember(Name="currency_code")]
		public string Currency_code { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="currency_name")]
		public string Currency_name { get; set; }
	}
	
	public class Inline_response_200Flag
	{
		
		[System.Runtime.Serialization.DataMember(Name="emoji")]
		public string Emoji { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="png")]
		public string Png { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="svg")]
		public string Svg { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unicode")]
		public string Unicode { get; set; }
	}
	
	public class Inline_response_200Security
	{
		
		[System.Runtime.Serialization.DataMember(Name="is_vpn")]
		public System.Nullable<System.Boolean> Is_vpn { get; set; }
	}
	
	public class Inline_response_200Timezone
	{
		
		[System.Runtime.Serialization.DataMember(Name="abbreviation")]
		public string Abbreviation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="current_time")]
		public string Current_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="gmt_offset")]
		public System.Nullable<System.Int32> Gmt_offset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_dst")]
		public System.Nullable<System.Boolean> Is_dst { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieve the location of an IP address
		/// V1GetByApi_keyAndIp_addressAndFields v1/
		/// </summary>
		/// <returns>Location of geolocated IP</returns>
		public async Task<Inline_response_200> V1GetByApi_keyAndIp_addressAndFieldsAsync(string api_key, string ip_address, string fields, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/?api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&ip_address=" + (ip_address==null? "" : System.Uri.EscapeDataString(ip_address))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields));
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				using JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(streamContent));
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Inline_response_200>(jsonReader);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
