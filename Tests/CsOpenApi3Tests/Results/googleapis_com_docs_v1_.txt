//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A ParagraphElement representing a spot in the text that's dynamically replaced with content that can change over time, like a page number.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AutoText
	{
		
		/// <summary>
		/// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// The suggested insertion IDs. An AutoText may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionIds")]
		public string[] SuggestedInsertionIds { get; set; }
		
		/// <summary>
		/// The suggested text style changes to this AutoText, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedTextStyleChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedTextStyle> SuggestedTextStyleChanges { get; set; }
		
		/// <summary>
		/// Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyle")]
		public TextStyle TextStyle { get; set; }
		
		/// <summary>
		/// The type of this auto text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<AutoTextType> Type { get; set; }
	}
	
	/// <summary>
	/// A suggested change to a TextStyle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuggestedTextStyle
	{
		
		/// <summary>
		/// Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyle")]
		public TextStyle TextStyle { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base TextStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyleSuggestionState")]
		public TextStyleSuggestionState TextStyleSuggestionState { get; set; }
	}
	
	/// <summary>
	/// Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextStyle
	{
		
		/// <summary>
		/// A color that can either be fully opaque or fully transparent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public OptionalColor BackgroundColor { get; set; }
		
		/// <summary>
		/// The text's vertical offset from its normal position. Text with `SUPERSCRIPT` or `SUBSCRIPT` baseline offsets is automatically rendered in a smaller font size, computed based on the `font_size` field. Changes in this field don't affect the `font_size`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baselineOffset")]
		public System.Nullable<TextStyleBaselineOffset> BaselineOffset { get; set; }
		
		/// <summary>
		/// Whether or not the text is rendered as bold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bold")]
		public System.Nullable<System.Boolean> Bold { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fontSize")]
		public Dimension FontSize { get; set; }
		
		/// <summary>
		/// A color that can either be fully opaque or fully transparent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foregroundColor")]
		public OptionalColor ForegroundColor { get; set; }
		
		/// <summary>
		/// Whether or not the text is italicized.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="italic")]
		public System.Nullable<System.Boolean> Italic { get; set; }
		
		/// <summary>
		/// A reference to another portion of a document or an external URL resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="link")]
		public Link Link { get; set; }
		
		/// <summary>
		/// Whether or not the text is in small capital letters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smallCaps")]
		public System.Nullable<System.Boolean> SmallCaps { get; set; }
		
		/// <summary>
		/// Whether or not the text is struck through.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strikethrough")]
		public System.Nullable<System.Boolean> Strikethrough { get; set; }
		
		/// <summary>
		/// Whether or not the text is underlined.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="underline")]
		public System.Nullable<System.Boolean> Underline { get; set; }
		
		/// <summary>
		/// Represents a font family and weight of text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weightedFontFamily")]
		public WeightedFontFamily WeightedFontFamily { get; set; }
	}
	
	/// <summary>
	/// A color that can either be fully opaque or fully transparent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OptionalColor
	{
		
		/// <summary>
		/// A solid color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public Color Color { get; set; }
	}
	
	/// <summary>
	/// A solid color.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Color
	{
		
		/// <summary>
		/// An RGB color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rgbColor")]
		public RgbColor RgbColor { get; set; }
	}
	
	/// <summary>
	/// An RGB color.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RgbColor
	{
		
		/// <summary>
		/// The blue component of the color, from 0.0 to 1.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blue")]
		public System.Nullable<System.Single> Blue { get; set; }
		
		/// <summary>
		/// The green component of the color, from 0.0 to 1.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="green")]
		public System.Nullable<System.Single> Green { get; set; }
		
		/// <summary>
		/// The red component of the color, from 0.0 to 1.0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="red")]
		public System.Nullable<System.Single> Red { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TextStyleBaselineOffset
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BASELINE_OFFSET_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUPERSCRIPT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBSCRIPT = 3,
	}
	
	/// <summary>
	/// A magnitude in a single direction in the specified units.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Dimension
	{
		
		/// <summary>
		/// The magnitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="magnitude")]
		public System.Nullable<System.Double> Magnitude { get; set; }
		
		/// <summary>
		/// The units for magnitude.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public System.Nullable<DimensionUnit> Unit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DimensionUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PT = 1,
	}
	
	/// <summary>
	/// A reference to another portion of a document or an external URL resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Link
	{
		
		/// <summary>
		/// The ID of a bookmark in this document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bookmarkId")]
		public string BookmarkId { get; set; }
		
		/// <summary>
		/// The ID of a heading in this document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headingId")]
		public string HeadingId { get; set; }
		
		/// <summary>
		/// An external URL.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Represents a font family and weight of text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WeightedFontFamily
	{
		
		/// <summary>
		/// The font family of the text. The font family can be any font from the Font menu in Docs or from [Google Fonts] (https://fonts.google.com/). If the font name is unrecognized, the text is rendered in `Arial`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fontFamily")]
		public string FontFamily { get; set; }
		
		/// <summary>
		/// The weight of the font. This field can have any value that's a multiple of `100` between `100` and `900`, inclusive. This range corresponds to the numerical values described in the CSS 2.1 Specification, [section 15.6](https://www.w3.org/TR/CSS21/fonts.html#font-boldness), with non-numerical values disallowed. The default value is `400` ("normal"). The font weight makes up just one component of the rendered font weight. A combination of the `weight` and the text style's resolved `bold` value determine the rendered weight, after accounting for inheritance: * If the text is bold and the weight is less than `400`, the rendered weight is 400. * If the text is bold and the weight is greater than or equal to `400` but is less than `700`, the rendered weight is `700`. * If the weight is greater than or equal to `700`, the rendered weight is equal to the weight. * If the text is not bold, the rendered weight is equal to the weight.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public System.Nullable<System.Int32> Weight { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base TextStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextStyleSuggestionState
	{
		
		/// <summary>
		/// Indicates if there was a suggested change to background_color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColorSuggested")]
		public System.Nullable<System.Boolean> BackgroundColorSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to baseline_offset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="baselineOffsetSuggested")]
		public System.Nullable<System.Boolean> BaselineOffsetSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to bold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boldSuggested")]
		public System.Nullable<System.Boolean> BoldSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to font_size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fontSizeSuggested")]
		public System.Nullable<System.Boolean> FontSizeSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to foreground_color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foregroundColorSuggested")]
		public System.Nullable<System.Boolean> ForegroundColorSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to italic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="italicSuggested")]
		public System.Nullable<System.Boolean> ItalicSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkSuggested")]
		public System.Nullable<System.Boolean> LinkSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to small_caps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="smallCapsSuggested")]
		public System.Nullable<System.Boolean> SmallCapsSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to strikethrough.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strikethroughSuggested")]
		public System.Nullable<System.Boolean> StrikethroughSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to underline.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="underlineSuggested")]
		public System.Nullable<System.Boolean> UnderlineSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to weighted_font_family.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="weightedFontFamilySuggested")]
		public System.Nullable<System.Boolean> WeightedFontFamilySuggested { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AutoTextType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAGE_NUMBER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PAGE_COUNT = 2,
	}
	
	/// <summary>
	/// Represents the background of a document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Background
	{
		
		/// <summary>
		/// A color that can either be fully opaque or fully transparent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public OptionalColor Color { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base Background have been changed in this suggestion. For any field set to true, the Backgound has a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackgroundSuggestionState
	{
		
		/// <summary>
		/// Indicates whether the current background color has been modified in this suggestion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColorSuggested")]
		public System.Nullable<System.Boolean> BackgroundColorSuggested { get; set; }
	}
	
	/// <summary>
	/// Request message for BatchUpdateDocument.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateDocumentRequest
	{
		
		/// <summary>
		/// A list of updates to apply to the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requests")]
		public Request[] Requests { get; set; }
		
		/// <summary>
		/// Provides control over how write requests are executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeControl")]
		public WriteControl WriteControl { get; set; }
	}
	
	/// <summary>
	/// A single update to apply to a document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Request
	{
		
		/// <summary>
		/// Creates a Footer. The new footer is applied to the SectionStyle at the location of the SectionBreak if specified, otherwise it is applied to the DocumentStyle. If a footer of the specified type already exists, a 400 bad request error is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createFooter")]
		public CreateFooterRequest CreateFooter { get; set; }
		
		/// <summary>
		/// Creates a Footnote segment and inserts a new FootnoteReference to it at the given location. The new Footnote segment will contain a space followed by a newline character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createFootnote")]
		public CreateFootnoteRequest CreateFootnote { get; set; }
		
		/// <summary>
		/// Creates a Header. The new header is applied to the SectionStyle at the location of the SectionBreak if specified, otherwise it is applied to the DocumentStyle. If a header of the specified type already exists, a 400 bad request error is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createHeader")]
		public CreateHeaderRequest CreateHeader { get; set; }
		
		/// <summary>
		/// Creates a NamedRange referencing the given range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createNamedRange")]
		public CreateNamedRangeRequest CreateNamedRange { get; set; }
		
		/// <summary>
		/// Creates bullets for all of the paragraphs that overlap with the given range. The nesting level of each paragraph will be determined by counting leading tabs in front of each paragraph. To avoid excess space between the bullet and the corresponding paragraph, these leading tabs are removed by this request. This may change the indices of parts of the text. If the paragraph immediately before paragraphs being updated is in a list with a matching preset, the paragraphs being updated are added to that preceding list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createParagraphBullets")]
		public CreateParagraphBulletsRequest CreateParagraphBullets { get; set; }
		
		/// <summary>
		/// Deletes content from the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteContentRange")]
		public DeleteContentRangeRequest DeleteContentRange { get; set; }
		
		/// <summary>
		/// Deletes a Footer from the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteFooter")]
		public DeleteFooterRequest DeleteFooter { get; set; }
		
		/// <summary>
		/// Deletes a Header from the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteHeader")]
		public DeleteHeaderRequest DeleteHeader { get; set; }
		
		/// <summary>
		/// Deletes a NamedRange.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteNamedRange")]
		public DeleteNamedRangeRequest DeleteNamedRange { get; set; }
		
		/// <summary>
		/// Deletes bullets from all of the paragraphs that overlap with the given range. The nesting level of each paragraph will be visually preserved by adding indent to the start of the corresponding paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteParagraphBullets")]
		public DeleteParagraphBulletsRequest DeleteParagraphBullets { get; set; }
		
		/// <summary>
		/// Deletes a PositionedObject from the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletePositionedObject")]
		public DeletePositionedObjectRequest DeletePositionedObject { get; set; }
		
		/// <summary>
		/// Deletes a column from a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTableColumn")]
		public DeleteTableColumnRequest DeleteTableColumn { get; set; }
		
		/// <summary>
		/// Deletes a row from a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteTableRow")]
		public DeleteTableRowRequest DeleteTableRow { get; set; }
		
		/// <summary>
		/// Inserts an InlineObject containing an image at the given location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertInlineImage")]
		public InsertInlineImageRequest InsertInlineImage { get; set; }
		
		/// <summary>
		/// Inserts a page break followed by a newline at the specified location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertPageBreak")]
		public InsertPageBreakRequest InsertPageBreak { get; set; }
		
		/// <summary>
		/// Inserts a section break at the given location. A newline character will be inserted before the section break.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertSectionBreak")]
		public InsertSectionBreakRequest InsertSectionBreak { get; set; }
		
		/// <summary>
		/// Inserts a table at the specified location. A newline character will be inserted before the inserted table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTable")]
		public InsertTableRequest InsertTable { get; set; }
		
		/// <summary>
		/// Inserts an empty column into a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTableColumn")]
		public InsertTableColumnRequest InsertTableColumn { get; set; }
		
		/// <summary>
		/// Inserts an empty row into a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertTableRow")]
		public InsertTableRowRequest InsertTableRow { get; set; }
		
		/// <summary>
		/// Inserts text at the specified location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertText")]
		public InsertTextRequest InsertText { get; set; }
		
		/// <summary>
		/// Merges cells in a Table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mergeTableCells")]
		public MergeTableCellsRequest MergeTableCells { get; set; }
		
		/// <summary>
		/// Updates the number of pinned table header rows in a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pinTableHeaderRows")]
		public PinTableHeaderRowsRequest PinTableHeaderRows { get; set; }
		
		/// <summary>
		/// Replaces all instances of text matching a criteria with replace text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceAllText")]
		public ReplaceAllTextRequest ReplaceAllText { get; set; }
		
		/// <summary>
		/// Replaces an existing image with a new image. Replacing an image removes some image effects from the existing image in order to mirror the behavior of the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceImage")]
		public ReplaceImageRequest ReplaceImage { get; set; }
		
		/// <summary>
		/// Replaces the contents of the specified NamedRange or NamedRanges with the given replacement content. Note that an individual NamedRange may consist of multiple discontinuous ranges. In this case, only the content in the first range will be replaced. The other ranges and their content will be deleted. In cases where replacing or deleting any ranges would result in an invalid document structure, a 400 bad request error is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceNamedRangeContent")]
		public ReplaceNamedRangeContentRequest ReplaceNamedRangeContent { get; set; }
		
		/// <summary>
		/// Unmerges cells in a Table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unmergeTableCells")]
		public UnmergeTableCellsRequest UnmergeTableCells { get; set; }
		
		/// <summary>
		/// Updates the DocumentStyle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateDocumentStyle")]
		public UpdateDocumentStyleRequest UpdateDocumentStyle { get; set; }
		
		/// <summary>
		/// Update the styling of all paragraphs that overlap with the given range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateParagraphStyle")]
		public UpdateParagraphStyleRequest UpdateParagraphStyle { get; set; }
		
		/// <summary>
		/// Updates the SectionStyle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateSectionStyle")]
		public UpdateSectionStyleRequest UpdateSectionStyle { get; set; }
		
		/// <summary>
		/// Updates the style of a range of table cells.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTableCellStyle")]
		public UpdateTableCellStyleRequest UpdateTableCellStyle { get; set; }
		
		/// <summary>
		/// Updates the TableColumnProperties of columns in a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTableColumnProperties")]
		public UpdateTableColumnPropertiesRequest UpdateTableColumnProperties { get; set; }
		
		/// <summary>
		/// Updates the TableRowStyle of rows in a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTableRowStyle")]
		public UpdateTableRowStyleRequest UpdateTableRowStyle { get; set; }
		
		/// <summary>
		/// Update the styling of text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTextStyle")]
		public UpdateTextStyleRequest UpdateTextStyle { get; set; }
	}
	
	/// <summary>
	/// Creates a Footer. The new footer is applied to the SectionStyle at the location of the SectionBreak if specified, otherwise it is applied to the DocumentStyle. If a footer of the specified type already exists, a 400 bad request error is returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFooterRequest
	{
		
		/// <summary>
		/// A particular location in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionBreakLocation")]
		public Location SectionBreakLocation { get; set; }
		
		/// <summary>
		/// The type of footer to create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CreateFooterRequestType> Type { get; set; }
	}
	
	/// <summary>
	/// A particular location in the document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Location
	{
		
		/// <summary>
		/// The zero-based index, in UTF-16 code units. The index is relative to the beginning of the segment specified by segment_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="index")]
		public System.Nullable<System.Int32> Index { get; set; }
		
		/// <summary>
		/// The ID of the header, footer or footnote the location is in. An empty segment ID signifies the document's body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentId")]
		public string SegmentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateFooterRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEADER_FOOTER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT = 1,
	}
	
	/// <summary>
	/// Creates a Footnote segment and inserts a new FootnoteReference to it at the given location. The new Footnote segment will contain a space followed by a newline character.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFootnoteRequest
	{
		
		/// <summary>
		/// Location at the end of a body, header, footer or footnote. The location is immediately before the last newline in the document segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endOfSegmentLocation")]
		public EndOfSegmentLocation EndOfSegmentLocation { get; set; }
		
		/// <summary>
		/// A particular location in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
	}
	
	/// <summary>
	/// Location at the end of a body, header, footer or footnote. The location is immediately before the last newline in the document segment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EndOfSegmentLocation
	{
		
		/// <summary>
		/// The ID of the header, footer or footnote the location is in. An empty segment ID signifies the document's body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentId")]
		public string SegmentId { get; set; }
	}
	
	/// <summary>
	/// Creates a Header. The new header is applied to the SectionStyle at the location of the SectionBreak if specified, otherwise it is applied to the DocumentStyle. If a header of the specified type already exists, a 400 bad request error is returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateHeaderRequest
	{
		
		/// <summary>
		/// A particular location in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionBreakLocation")]
		public Location SectionBreakLocation { get; set; }
		
		/// <summary>
		/// The type of header to create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CreateFooterRequestType Type { get; set; }
	}
	
	/// <summary>
	/// Creates a NamedRange referencing the given range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateNamedRangeRequest
	{
		
		/// <summary>
		/// The name of the NamedRange. Names do not need to be unique. Names must be at least 1 character and no more than 256 characters, measured in UTF-16 code units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specifies a contiguous range of text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Specifies a contiguous range of text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Range
	{
		
		/// <summary>
		/// The zero-based end index of this range, exclusive, in UTF-16 code units. In all current uses, an end index must be provided. This field is an Int32Value in order to accommodate future use cases with open-ended ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endIndex")]
		public System.Nullable<System.Int32> EndIndex { get; set; }
		
		/// <summary>
		/// The ID of the header, footer, or footnote that this range is contained in. An empty segment ID signifies the document's body.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="segmentId")]
		public string SegmentId { get; set; }
		
		/// <summary>
		/// The zero-based start index of this range, in UTF-16 code units. In all current uses, a start index must be provided. This field is an Int32Value in order to accommodate future use cases with open-ended ranges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
	}
	
	/// <summary>
	/// Creates bullets for all of the paragraphs that overlap with the given range. The nesting level of each paragraph will be determined by counting leading tabs in front of each paragraph. To avoid excess space between the bullet and the corresponding paragraph, these leading tabs are removed by this request. This may change the indices of parts of the text. If the paragraph immediately before paragraphs being updated is in a list with a matching preset, the paragraphs being updated are added to that preceding list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateParagraphBulletsRequest
	{
		
		/// <summary>
		/// The kinds of bullet glyphs to be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bulletPreset")]
		public System.Nullable<CreateParagraphBulletsRequestBulletPreset> BulletPreset { get; set; }
		
		/// <summary>
		/// Specifies a contiguous range of text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreateParagraphBulletsRequestBulletPreset
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_GLYPH_PRESET_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_DISC_CIRCLE_SQUARE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_DIAMONDX_ARROW3D_SQUARE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_CHECKBOX = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_ARROW_DIAMOND_DISC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_STAR_CIRCLE_SQUARE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_ARROW3D_CIRCLE_SQUARE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_LEFTTRIANGLE_DIAMOND_DISC = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_DIAMONDX_HOLLOWDIAMOND_SQUARE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_DIAMOND_CIRCLE_SQUARE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBERED_DECIMAL_ALPHA_ROMAN = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBERED_DECIMAL_ALPHA_ROMAN_PARENS = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBERED_DECIMAL_NESTED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBERED_UPPERALPHA_ALPHA_ROMAN = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBERED_UPPERROMAN_UPPERALPHA_DECIMAL = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NUMBERED_ZERODECIMAL_ALPHA_ROMAN = 15,
	}
	
	/// <summary>
	/// Deletes content from the document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteContentRangeRequest
	{
		
		/// <summary>
		/// Specifies a contiguous range of text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Deletes a Footer from the document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteFooterRequest
	{
		
		/// <summary>
		/// The id of the footer to delete. If this footer is defined on DocumentStyle, the reference to this footer is removed, resulting in no footer of that type for the first section of the document. If this footer is defined on a SectionStyle, the reference to this footer is removed and the footer of that type is now continued from the previous section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footerId")]
		public string FooterId { get; set; }
	}
	
	/// <summary>
	/// Deletes a Header from the document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteHeaderRequest
	{
		
		/// <summary>
		/// The id of the header to delete. If this header is defined on DocumentStyle, the reference to this header is removed, resulting in no header of that type for the first section of the document. If this header is defined on a SectionStyle, the reference to this header is removed and the header of that type is now continued from the previous section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headerId")]
		public string HeaderId { get; set; }
	}
	
	/// <summary>
	/// Deletes a NamedRange.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteNamedRangeRequest
	{
		
		/// <summary>
		/// The name of the range(s) to delete. All named ranges with the given name will be deleted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID of the named range to delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedRangeId")]
		public string NamedRangeId { get; set; }
	}
	
	/// <summary>
	/// Deletes bullets from all of the paragraphs that overlap with the given range. The nesting level of each paragraph will be visually preserved by adding indent to the start of the corresponding paragraph.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteParagraphBulletsRequest
	{
		
		/// <summary>
		/// Specifies a contiguous range of text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Deletes a PositionedObject from the document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletePositionedObjectRequest
	{
		
		/// <summary>
		/// The ID of the positioned object to delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// Deletes a column from a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTableColumnRequest
	{
		
		/// <summary>
		/// Location of a single cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableCellLocation")]
		public TableCellLocation TableCellLocation { get; set; }
	}
	
	/// <summary>
	/// Location of a single cell within a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableCellLocation
	{
		
		/// <summary>
		/// The zero-based column index. For example, the second column in the table has a column index of 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnIndex")]
		public System.Nullable<System.Int32> ColumnIndex { get; set; }
		
		/// <summary>
		/// The zero-based row index. For example, the second row in the table has a row index of 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowIndex")]
		public System.Nullable<System.Int32> RowIndex { get; set; }
		
		/// <summary>
		/// A particular location in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableStartLocation")]
		public Location TableStartLocation { get; set; }
	}
	
	/// <summary>
	/// Deletes a row from a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteTableRowRequest
	{
		
		/// <summary>
		/// Location of a single cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableCellLocation")]
		public TableCellLocation TableCellLocation { get; set; }
	}
	
	/// <summary>
	/// Inserts an InlineObject containing an image at the given location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertInlineImageRequest
	{
		
		/// <summary>
		/// Location at the end of a body, header, footer or footnote. The location is immediately before the last newline in the document segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endOfSegmentLocation")]
		public EndOfSegmentLocation EndOfSegmentLocation { get; set; }
		
		/// <summary>
		/// A particular location in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// A width and height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectSize")]
		public Size ObjectSize { get; set; }
		
		/// <summary>
		/// The image URI. The image is fetched once at insertion time and a copy is stored for display inside the document. Images must be less than 50MB in size, cannot exceed 25 megapixels, and must be in one of PNG, JPEG, or GIF format. The provided URI must be publicly accessible and at most 2 kB in length. The URI itself is saved with the image, and exposed via the ImageProperties.content_uri field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// A width and height.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Size
	{
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public Dimension Height { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public Dimension Width { get; set; }
	}
	
	/// <summary>
	/// Inserts a page break followed by a newline at the specified location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertPageBreakRequest
	{
		
		/// <summary>
		/// Location at the end of a body, header, footer or footnote. The location is immediately before the last newline in the document segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endOfSegmentLocation")]
		public EndOfSegmentLocation EndOfSegmentLocation { get; set; }
		
		/// <summary>
		/// A particular location in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
	}
	
	/// <summary>
	/// Inserts a section break at the given location. A newline character will be inserted before the section break.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertSectionBreakRequest
	{
		
		/// <summary>
		/// Location at the end of a body, header, footer or footnote. The location is immediately before the last newline in the document segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endOfSegmentLocation")]
		public EndOfSegmentLocation EndOfSegmentLocation { get; set; }
		
		/// <summary>
		/// A particular location in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// The type of section to insert.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionType")]
		public System.Nullable<InsertSectionBreakRequestSectionType> SectionType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InsertSectionBreakRequestSectionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SECTION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUOUS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEXT_PAGE = 2,
	}
	
	/// <summary>
	/// Inserts a table at the specified location. A newline character will be inserted before the inserted table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertTableRequest
	{
		
		/// <summary>
		/// The number of columns in the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public System.Nullable<System.Int32> Columns { get; set; }
		
		/// <summary>
		/// Location at the end of a body, header, footer or footnote. The location is immediately before the last newline in the document segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endOfSegmentLocation")]
		public EndOfSegmentLocation EndOfSegmentLocation { get; set; }
		
		/// <summary>
		/// A particular location in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// The number of rows in the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public System.Nullable<System.Int32> Rows { get; set; }
	}
	
	/// <summary>
	/// Inserts an empty column into a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertTableColumnRequest
	{
		
		/// <summary>
		/// Whether to insert new column to the right of the reference cell location. - `True`: insert to the right. - `False`: insert to the left.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertRight")]
		public System.Nullable<System.Boolean> InsertRight { get; set; }
		
		/// <summary>
		/// Location of a single cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableCellLocation")]
		public TableCellLocation TableCellLocation { get; set; }
	}
	
	/// <summary>
	/// Inserts an empty row into a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertTableRowRequest
	{
		
		/// <summary>
		/// Whether to insert new row below the reference cell location. - `True`: insert below the cell. - `False`: insert above the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertBelow")]
		public System.Nullable<System.Boolean> InsertBelow { get; set; }
		
		/// <summary>
		/// Location of a single cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableCellLocation")]
		public TableCellLocation TableCellLocation { get; set; }
	}
	
	/// <summary>
	/// Inserts text at the specified location.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertTextRequest
	{
		
		/// <summary>
		/// Location at the end of a body, header, footer or footnote. The location is immediately before the last newline in the document segment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endOfSegmentLocation")]
		public EndOfSegmentLocation EndOfSegmentLocation { get; set; }
		
		/// <summary>
		/// A particular location in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public Location Location { get; set; }
		
		/// <summary>
		/// The text to be inserted. Inserting a newline character will implicitly create a new Paragraph at that index. The paragraph style of the new paragraph will be copied from the paragraph at the current insertion index, including lists and bullets. Text styles for inserted text will be determined automatically, generally preserving the styling of neighboring text. In most cases, the text style for the inserted text will match the text immediately before the insertion index. Some control characters (U+0000-U+0008, U+000C-U+001F) and characters from the Unicode Basic Multilingual Plane Private Use Area (U+E000-U+F8FF) will be stripped out of the inserted text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Merges cells in a Table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MergeTableCellsRequest
	{
		
		/// <summary>
		/// A table range represents a reference to a subset of a table. It's important to note that the cells specified by a table range do not necessarily form a rectangle. For example, let's say we have a 3 x 3 table where all the cells of the last row are merged together. The table looks like this: [ ] A table range with table cell location = (table_start_location, row = 0, column = 0), row span = 3 and column span = 2 specifies the following cells: x x [ x x x ]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRange")]
		public TableRange TableRange { get; set; }
	}
	
	/// <summary>
	/// A table range represents a reference to a subset of a table. It's important to note that the cells specified by a table range do not necessarily form a rectangle. For example, let's say we have a 3 x 3 table where all the cells of the last row are merged together. The table looks like this: [ ] A table range with table cell location = (table_start_location, row = 0, column = 0), row span = 3 and column span = 2 specifies the following cells: x x [ x x x ]
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableRange
	{
		
		/// <summary>
		/// The column span of the table range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnSpan")]
		public System.Nullable<System.Int32> ColumnSpan { get; set; }
		
		/// <summary>
		/// The row span of the table range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowSpan")]
		public System.Nullable<System.Int32> RowSpan { get; set; }
		
		/// <summary>
		/// Location of a single cell within a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableCellLocation")]
		public TableCellLocation TableCellLocation { get; set; }
	}
	
	/// <summary>
	/// Updates the number of pinned table header rows in a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PinTableHeaderRowsRequest
	{
		
		/// <summary>
		/// The number of table rows to pin, where 0 implies that all rows are unpinned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pinnedHeaderRowsCount")]
		public System.Nullable<System.Int32> PinnedHeaderRowsCount { get; set; }
		
		/// <summary>
		/// A particular location in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableStartLocation")]
		public Location TableStartLocation { get; set; }
	}
	
	/// <summary>
	/// Replaces all instances of text matching a criteria with replace text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceAllTextRequest
	{
		
		/// <summary>
		/// A criteria that matches a specific string of text in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="containsText")]
		public SubstringMatchCriteria ContainsText { get; set; }
		
		/// <summary>
		/// The text that will replace the matched text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceText")]
		public string ReplaceText { get; set; }
	}
	
	/// <summary>
	/// A criteria that matches a specific string of text in the document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubstringMatchCriteria
	{
		
		/// <summary>
		/// Indicates whether the search should respect case: - `True`: the search is case sensitive. - `False`: the search is case insensitive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="matchCase")]
		public System.Nullable<System.Boolean> MatchCase { get; set; }
		
		/// <summary>
		/// The text to search for in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Replaces an existing image with a new image. Replacing an image removes some image effects from the existing image in order to mirror the behavior of the Docs editor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceImageRequest
	{
		
		/// <summary>
		/// The ID of the existing image that will be replaced. The ID can be retrieved from the response of a get request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageObjectId")]
		public string ImageObjectId { get; set; }
		
		/// <summary>
		/// The replacement method.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageReplaceMethod")]
		public System.Nullable<ReplaceImageRequestImageReplaceMethod> ImageReplaceMethod { get; set; }
		
		/// <summary>
		/// The URI of the new image. The image is fetched once at insertion time and a copy is stored for display inside the document. Images must be less than 50MB, cannot exceed 25 megapixels, and must be in PNG, JPEG, or GIF format. The provided URI can't surpass 2 KB in length. The URI is saved with the image, and exposed through the ImageProperties.source_uri field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReplaceImageRequestImageReplaceMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IMAGE_REPLACE_METHOD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER_CROP = 1,
	}
	
	/// <summary>
	/// Replaces the contents of the specified NamedRange or NamedRanges with the given replacement content. Note that an individual NamedRange may consist of multiple discontinuous ranges. In this case, only the content in the first range will be replaced. The other ranges and their content will be deleted. In cases where replacing or deleting any ranges would result in an invalid document structure, a 400 bad request error is returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceNamedRangeContentRequest
	{
		
		/// <summary>
		/// The ID of the named range whose content will be replaced. If there is no named range with the given ID a 400 bad request error is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedRangeId")]
		public string NamedRangeId { get; set; }
		
		/// <summary>
		/// The name of the NamedRanges whose content will be replaced. If there are multiple named ranges with the given name, then the content of each one will be replaced. If there are no named ranges with the given name, then the request will be a no-op.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedRangeName")]
		public string NamedRangeName { get; set; }
		
		/// <summary>
		/// Replaces the content of the specified named range(s) with the given text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	/// <summary>
	/// Unmerges cells in a Table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnmergeTableCellsRequest
	{
		
		/// <summary>
		/// A table range represents a reference to a subset of a table. It's important to note that the cells specified by a table range do not necessarily form a rectangle. For example, let's say we have a 3 x 3 table where all the cells of the last row are merged together. The table looks like this: [ ] A table range with table cell location = (table_start_location, row = 0, column = 0), row span = 3 and column span = 2 specifies the following cells: x x [ x x x ]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRange")]
		public TableRange TableRange { get; set; }
	}
	
	/// <summary>
	/// Updates the DocumentStyle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateDocumentStyleRequest
	{
		
		/// <summary>
		/// The style of the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentStyle")]
		public DocumentStyle DocumentStyle { get; set; }
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `document_style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the background, set `fields` to `"background"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
	}
	
	/// <summary>
	/// The style of the document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentStyle
	{
		
		/// <summary>
		/// Represents the background of a document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="background")]
		public Background Background { get; set; }
		
		/// <summary>
		/// The ID of the default footer. If not set, there's no default footer. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultFooterId")]
		public string DefaultFooterId { get; set; }
		
		/// <summary>
		/// The ID of the default header. If not set, there's no default header. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultHeaderId")]
		public string DefaultHeaderId { get; set; }
		
		/// <summary>
		/// The ID of the footer used only for even pages. The value of use_even_page_header_footer determines whether to use the default_footer_id or this value for the footer on even pages. If not set, there's no even page footer. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evenPageFooterId")]
		public string EvenPageFooterId { get; set; }
		
		/// <summary>
		/// The ID of the header used only for even pages. The value of use_even_page_header_footer determines whether to use the default_header_id or this value for the header on even pages. If not set, there's no even page header. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evenPageHeaderId")]
		public string EvenPageHeaderId { get; set; }
		
		/// <summary>
		/// The ID of the footer used only for the first page. If not set then a unique footer for the first page does not exist. The value of use_first_page_header_footer determines whether to use the default_footer_id or this value for the footer on the first page. If not set, there's no first page footer. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPageFooterId")]
		public string FirstPageFooterId { get; set; }
		
		/// <summary>
		/// The ID of the header used only for the first page. If not set then a unique header for the first page does not exist. The value of use_first_page_header_footer determines whether to use the default_header_id or this value for the header on the first page. If not set, there's no first page header. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPageHeaderId")]
		public string FirstPageHeaderId { get; set; }
		
		/// <summary>
		/// Optional. Indicates whether to flip the dimensions of the page_size, which allows changing the page orientation between portrait and landscape.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flipPageOrientation")]
		public System.Nullable<System.Boolean> FlipPageOrientation { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginBottom")]
		public Dimension MarginBottom { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginFooter")]
		public Dimension MarginFooter { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginHeader")]
		public Dimension MarginHeader { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginLeft")]
		public Dimension MarginLeft { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginRight")]
		public Dimension MarginRight { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginTop")]
		public Dimension MarginTop { get; set; }
		
		/// <summary>
		/// The page number from which to start counting the number of pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumberStart")]
		public System.Nullable<System.Int32> PageNumberStart { get; set; }
		
		/// <summary>
		/// A width and height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public Size PageSize { get; set; }
		
		/// <summary>
		/// Indicates whether DocumentStyle margin_header, SectionStyle margin_header and DocumentStyle margin_footer, SectionStyle margin_footer are respected. When false, the default values in the Docs editor for header and footer margin are used. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useCustomHeaderFooterMargins")]
		public System.Nullable<System.Boolean> UseCustomHeaderFooterMargins { get; set; }
		
		/// <summary>
		/// Indicates whether to use the even page header / footer IDs for the even pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useEvenPageHeaderFooter")]
		public System.Nullable<System.Boolean> UseEvenPageHeaderFooter { get; set; }
		
		/// <summary>
		/// Indicates whether to use the first page header / footer IDs for the first page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useFirstPageHeaderFooter")]
		public System.Nullable<System.Boolean> UseFirstPageHeaderFooter { get; set; }
	}
	
	/// <summary>
	/// Update the styling of all paragraphs that overlap with the given range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateParagraphStyleRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `paragraph_style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example, to update the paragraph style's alignment property, set `fields` to `"alignment"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// Styles that apply to a whole paragraph. Inherited paragraph styles are represented as unset fields in this message. A paragraph style's parent depends on where the paragraph style is defined: * The ParagraphStyle on a Paragraph inherits from the paragraph's corresponding named style type. * The ParagraphStyle on a named style inherits from the normal text named style. * The ParagraphStyle of the normal text named style inherits from the default paragraph style in the Docs editor. * The ParagraphStyle on a Paragraph element that's contained in a table may inherit its paragraph style from the table style. If the paragraph style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paragraphStyle")]
		public ParagraphStyle ParagraphStyle { get; set; }
		
		/// <summary>
		/// Specifies a contiguous range of text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
	}
	
	/// <summary>
	/// Styles that apply to a whole paragraph. Inherited paragraph styles are represented as unset fields in this message. A paragraph style's parent depends on where the paragraph style is defined: * The ParagraphStyle on a Paragraph inherits from the paragraph's corresponding named style type. * The ParagraphStyle on a named style inherits from the normal text named style. * The ParagraphStyle of the normal text named style inherits from the default paragraph style in the Docs editor. * The ParagraphStyle on a Paragraph element that's contained in a table may inherit its paragraph style from the table style. If the paragraph style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParagraphStyle
	{
		
		/// <summary>
		/// The text alignment for this paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alignment")]
		public System.Nullable<ParagraphStyleAlignment> Alignment { get; set; }
		
		/// <summary>
		/// Whether to avoid widows and orphans for the paragraph. If unset, the value is inherited from the parent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avoidWidowAndOrphan")]
		public System.Nullable<System.Boolean> AvoidWidowAndOrphan { get; set; }
		
		/// <summary>
		/// A border around a paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderBetween")]
		public ParagraphBorder BorderBetween { get; set; }
		
		/// <summary>
		/// A border around a paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderBottom")]
		public ParagraphBorder BorderBottom { get; set; }
		
		/// <summary>
		/// A border around a paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderLeft")]
		public ParagraphBorder BorderLeft { get; set; }
		
		/// <summary>
		/// A border around a paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderRight")]
		public ParagraphBorder BorderRight { get; set; }
		
		/// <summary>
		/// A border around a paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderTop")]
		public ParagraphBorder BorderTop { get; set; }
		
		/// <summary>
		/// The text direction of this paragraph. If unset, the value defaults to LEFT_TO_RIGHT since paragraph direction is not inherited.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public System.Nullable<ParagraphStyleDirection> Direction { get; set; }
		
		/// <summary>
		/// The heading ID of the paragraph. If empty, then this paragraph is not a heading. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headingId")]
		public string HeadingId { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indentEnd")]
		public Dimension IndentEnd { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indentFirstLine")]
		public Dimension IndentFirstLine { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indentStart")]
		public Dimension IndentStart { get; set; }
		
		/// <summary>
		/// Whether all lines of the paragraph should be laid out on the same page or column if possible. If unset, the value is inherited from the parent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keepLinesTogether")]
		public System.Nullable<System.Boolean> KeepLinesTogether { get; set; }
		
		/// <summary>
		/// Whether at least a part of this paragraph should be laid out on the same page or column as the next paragraph if possible. If unset, the value is inherited from the parent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keepWithNext")]
		public System.Nullable<System.Boolean> KeepWithNext { get; set; }
		
		/// <summary>
		/// The amount of space between lines, as a percentage of normal, where normal is represented as 100.0. If unset, the value is inherited from the parent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineSpacing")]
		public System.Nullable<System.Single> LineSpacing { get; set; }
		
		/// <summary>
		/// The named style type of the paragraph. Since updating the named style type affects other properties within ParagraphStyle, the named style type is applied before the other properties are updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedStyleType")]
		public System.Nullable<ParagraphStyleNamedStyleType> NamedStyleType { get; set; }
		
		/// <summary>
		/// Whether the current paragraph should always start at the beginning of a page. If unset, the value is inherited from the parent. Attempting to update page_break_before for paragraphs in unsupported regions, including Table, Header, Footer and Footnote, can result in an invalid document state that returns a 400 bad request error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageBreakBefore")]
		public System.Nullable<System.Boolean> PageBreakBefore { get; set; }
		
		/// <summary>
		/// The shading of a paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shading")]
		public Shading Shading { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaceAbove")]
		public Dimension SpaceAbove { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaceBelow")]
		public Dimension SpaceBelow { get; set; }
		
		/// <summary>
		/// The spacing mode for the paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spacingMode")]
		public System.Nullable<ParagraphStyleSpacingMode> SpacingMode { get; set; }
		
		/// <summary>
		/// A list of the tab stops for this paragraph. The list of tab stops is not inherited. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tabStops")]
		public TabStop[] TabStops { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParagraphStyleAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALIGNMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		END = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JUSTIFIED = 4,
	}
	
	/// <summary>
	/// A border around a paragraph.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParagraphBorder
	{
		
		/// <summary>
		/// A color that can either be fully opaque or fully transparent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public OptionalColor Color { get; set; }
		
		/// <summary>
		/// The dash style of the border.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dashStyle")]
		public System.Nullable<ParagraphBorderDashStyle> DashStyle { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="padding")]
		public Dimension Padding { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public Dimension Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParagraphBorderDashStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DASH_STYLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOLID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DASH = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParagraphStyleDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_DIRECTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEFT_TO_RIGHT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RIGHT_TO_LEFT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParagraphStyleNamedStyleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NAMED_STYLE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NORMAL_TEXT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TITLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUBTITLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEADING_1 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEADING_2 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEADING_3 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEADING_4 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEADING_5 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEADING_6 = 9,
	}
	
	/// <summary>
	/// The shading of a paragraph.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Shading
	{
		
		/// <summary>
		/// A color that can either be fully opaque or fully transparent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public OptionalColor BackgroundColor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParagraphStyleSpacingMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SPACING_MODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NEVER_COLLAPSE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLLAPSE_LISTS = 2,
	}
	
	/// <summary>
	/// A tab stop within a paragraph.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TabStop
	{
		
		/// <summary>
		/// The alignment of this tab stop. If unset, the value defaults to START.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alignment")]
		public System.Nullable<TabStopAlignment> Alignment { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public Dimension Offset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TabStopAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAB_STOP_ALIGNMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		END = 3,
	}
	
	/// <summary>
	/// Updates the SectionStyle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateSectionStyleRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `section_style` is implied and must not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the left margin, set `fields` to `"margin_left"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// Specifies a contiguous range of text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
		
		/// <summary>
		/// The styling that applies to a section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionStyle")]
		public SectionStyle SectionStyle { get; set; }
	}
	
	/// <summary>
	/// The styling that applies to a section.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SectionStyle
	{
		
		/// <summary>
		/// The section's columns properties. If empty, the section contains one column with the default properties in the Docs editor. A section can be updated to have no more than 3 columns. When updating this property, setting a concrete value is required. Unsetting this property will result in a 400 bad request error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnProperties")]
		public SectionColumnProperties[] ColumnProperties { get; set; }
		
		/// <summary>
		/// The style of column separators. This style can be set even when there's one column in the section. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnSeparatorStyle")]
		public System.Nullable<SectionStyleColumnSeparatorStyle> ColumnSeparatorStyle { get; set; }
		
		/// <summary>
		/// The content direction of this section. If unset, the value defaults to LEFT_TO_RIGHT. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentDirection")]
		public ParagraphStyleDirection ContentDirection { get; set; }
		
		/// <summary>
		/// The ID of the default footer. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's default_footer_id. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultFooterId")]
		public string DefaultFooterId { get; set; }
		
		/// <summary>
		/// The ID of the default header. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's default_header_id. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultHeaderId")]
		public string DefaultHeaderId { get; set; }
		
		/// <summary>
		/// The ID of the footer used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the footers on even pages in the section. If it is false, the footers on even pages use the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's even_page_footer_id. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evenPageFooterId")]
		public string EvenPageFooterId { get; set; }
		
		/// <summary>
		/// The ID of the header used only for even pages. If the value of DocumentStyle's use_even_page_header_footer is true, this value is used for the headers on even pages in the section. If it is false, the headers on even pages use the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's even_page_header_id. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evenPageHeaderId")]
		public string EvenPageHeaderId { get; set; }
		
		/// <summary>
		/// The ID of the footer used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the footer on the first page of the section. If it's false, the footer on the first page of the section uses the default_footer_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's first_page_footer_id. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPageFooterId")]
		public string FirstPageFooterId { get; set; }
		
		/// <summary>
		/// The ID of the header used only for the first page of the section. If use_first_page_header_footer is true, this value is used for the header on the first page of the section. If it's false, the header on the first page of the section uses the default_header_id. If unset, the value inherits from the previous SectionBreak's SectionStyle. If the value is unset in the first SectionBreak, it inherits from DocumentStyle's first_page_header_id. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPageHeaderId")]
		public string FirstPageHeaderId { get; set; }
		
		/// <summary>
		/// Optional. Indicates whether to flip the dimensions of DocumentStyle's page_size for this section, which allows changing the page orientation between portrait and landscape. If unset, the value inherits from DocumentStyle's flip_page_orientation. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flipPageOrientation")]
		public System.Nullable<System.Boolean> FlipPageOrientation { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginBottom")]
		public Dimension MarginBottom { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginFooter")]
		public Dimension MarginFooter { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginHeader")]
		public Dimension MarginHeader { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginLeft")]
		public Dimension MarginLeft { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginRight")]
		public Dimension MarginRight { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginTop")]
		public Dimension MarginTop { get; set; }
		
		/// <summary>
		/// The page number from which to start counting the number of pages for this section. If unset, page numbering continues from the previous section. If the value is unset in the first SectionBreak, refer to DocumentStyle's page_number_start. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumberStart")]
		public System.Nullable<System.Int32> PageNumberStart { get; set; }
		
		/// <summary>
		/// Output only. The type of section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionType")]
		public InsertSectionBreakRequestSectionType SectionType { get; set; }
		
		/// <summary>
		/// Indicates whether to use the first page header / footer IDs for the first page of the section. If unset, it inherits from DocumentStyle's use_first_page_header_footer for the first section. If the value is unset for subsequent sectors, it should be interpreted as false. When updating this property, setting a concrete value is required. Unsetting this property results in a 400 bad request error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useFirstPageHeaderFooter")]
		public System.Nullable<System.Boolean> UseFirstPageHeaderFooter { get; set; }
	}
	
	/// <summary>
	/// Properties that apply to a section's column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SectionColumnProperties
	{
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paddingEnd")]
		public Dimension PaddingEnd { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public Dimension Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SectionStyleColumnSeparatorStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COLUMN_SEPARATOR_STYLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BETWEEN_EACH_COLUMN = 2,
	}
	
	/// <summary>
	/// Updates the style of a range of table cells.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTableCellStyleRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `tableCellStyle` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the table cell background color, set `fields` to `"backgroundColor"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The style of a TableCell. Inherited table cell styles are represented as unset fields in this message. A table cell style can inherit from the table's style.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableCellStyle")]
		public TableCellStyle TableCellStyle { get; set; }
		
		/// <summary>
		/// A table range represents a reference to a subset of a table. It's important to note that the cells specified by a table range do not necessarily form a rectangle. For example, let's say we have a 3 x 3 table where all the cells of the last row are merged together. The table looks like this: [ ] A table range with table cell location = (table_start_location, row = 0, column = 0), row span = 3 and column span = 2 specifies the following cells: x x [ x x x ]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRange")]
		public TableRange TableRange { get; set; }
		
		/// <summary>
		/// A particular location in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableStartLocation")]
		public Location TableStartLocation { get; set; }
	}
	
	/// <summary>
	/// The style of a TableCell. Inherited table cell styles are represented as unset fields in this message. A table cell style can inherit from the table's style.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableCellStyle
	{
		
		/// <summary>
		/// A color that can either be fully opaque or fully transparent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColor")]
		public OptionalColor BackgroundColor { get; set; }
		
		/// <summary>
		/// A border around a table cell. Table cell borders cannot be transparent. To hide a table cell border, make its width 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderBottom")]
		public TableCellBorder BorderBottom { get; set; }
		
		/// <summary>
		/// A border around a table cell. Table cell borders cannot be transparent. To hide a table cell border, make its width 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderLeft")]
		public TableCellBorder BorderLeft { get; set; }
		
		/// <summary>
		/// A border around a table cell. Table cell borders cannot be transparent. To hide a table cell border, make its width 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderRight")]
		public TableCellBorder BorderRight { get; set; }
		
		/// <summary>
		/// A border around a table cell. Table cell borders cannot be transparent. To hide a table cell border, make its width 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderTop")]
		public TableCellBorder BorderTop { get; set; }
		
		/// <summary>
		/// The column span of the cell. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnSpan")]
		public System.Nullable<System.Int32> ColumnSpan { get; set; }
		
		/// <summary>
		/// The alignment of the content in the table cell. The default alignment matches the alignment for newly created table cells in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentAlignment")]
		public System.Nullable<TableCellStyleContentAlignment> ContentAlignment { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paddingBottom")]
		public Dimension PaddingBottom { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paddingLeft")]
		public Dimension PaddingLeft { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paddingRight")]
		public Dimension PaddingRight { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paddingTop")]
		public Dimension PaddingTop { get; set; }
		
		/// <summary>
		/// The row span of the cell. This property is read-only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowSpan")]
		public System.Nullable<System.Int32> RowSpan { get; set; }
	}
	
	/// <summary>
	/// A border around a table cell. Table cell borders cannot be transparent. To hide a table cell border, make its width 0.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableCellBorder
	{
		
		/// <summary>
		/// A color that can either be fully opaque or fully transparent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public OptionalColor Color { get; set; }
		
		/// <summary>
		/// The dash style of the border.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dashStyle")]
		public ParagraphBorderDashStyle DashStyle { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public Dimension Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TableCellStyleContentAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_ALIGNMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_ALIGNMENT_UNSUPPORTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TOP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MIDDLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BOTTOM = 4,
	}
	
	/// <summary>
	/// Updates the TableColumnProperties of columns in a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTableColumnPropertiesRequest
	{
		
		/// <summary>
		/// The list of zero-based column indices whose property should be updated. If no indices are specified, all columns will be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnIndices")]
		public int[] ColumnIndices { get; set; }
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `tableColumnProperties` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the column width, set `fields` to `"width"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The properties of a column in a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableColumnProperties")]
		public TableColumnProperties TableColumnProperties { get; set; }
		
		/// <summary>
		/// A particular location in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableStartLocation")]
		public Location TableStartLocation { get; set; }
	}
	
	/// <summary>
	/// The properties of a column in a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableColumnProperties
	{
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public Dimension Width { get; set; }
		
		/// <summary>
		/// The width type of the column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widthType")]
		public System.Nullable<TableColumnPropertiesWidthType> WidthType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TableColumnPropertiesWidthType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WIDTH_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENLY_DISTRIBUTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIXED_WIDTH = 2,
	}
	
	/// <summary>
	/// Updates the TableRowStyle of rows in a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTableRowStyleRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `tableRowStyle` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example to update the minimum row height, set `fields` to `"min_row_height"`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// The list of zero-based row indices whose style should be updated. If no indices are specified, all rows will be updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowIndices")]
		public int[] RowIndices { get; set; }
		
		/// <summary>
		/// Styles that apply to a table row.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRowStyle")]
		public TableRowStyle TableRowStyle { get; set; }
		
		/// <summary>
		/// A particular location in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableStartLocation")]
		public Location TableStartLocation { get; set; }
	}
	
	/// <summary>
	/// Styles that apply to a table row.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableRowStyle
	{
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minRowHeight")]
		public Dimension MinRowHeight { get; set; }
		
		/// <summary>
		/// Whether the row cannot overflow across page or column boundaries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preventOverflow")]
		public System.Nullable<System.Boolean> PreventOverflow { get; set; }
		
		/// <summary>
		/// Whether the row is a table header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableHeader")]
		public System.Nullable<System.Boolean> TableHeader { get; set; }
	}
	
	/// <summary>
	/// Update the styling of text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateTextStyleRequest
	{
		
		/// <summary>
		/// The fields that should be updated. At least one field must be specified. The root `text_style` is implied and should not be specified. A single `"*"` can be used as short-hand for listing every field. For example, to update the text style to bold, set `fields` to `"bold"`. To reset a property to its default value, include its field name in the field mask but leave the field itself unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string Fields { get; set; }
		
		/// <summary>
		/// Specifies a contiguous range of text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public Range Range { get; set; }
		
		/// <summary>
		/// Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyle")]
		public TextStyle TextStyle { get; set; }
	}
	
	/// <summary>
	/// Provides control over how write requests are executed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WriteControl
	{
		
		/// <summary>
		/// The optional revision ID of the document the write request is applied to. If this is not the latest revision of the document, the request is not processed and returns a 400 bad request error. When a required revision ID is returned in a response, it indicates the revision ID of the document after the request was applied.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiredRevisionId")]
		public string RequiredRevisionId { get; set; }
		
		/// <summary>
		/// The optional target revision ID of the document the write request is applied to. If collaborator changes have occurred after the document was read using the API, the changes produced by this write request are applied against the collaborator changes. This results in a new revision of the document that incorporates both the collaborator changes and the changes in the request, with the Docs server resolving conflicting changes. When using target revision ID, the API client can be thought of as another collaborator of the document. The target revision ID can only be used to write to recent versions of a document. If the target revision is too far behind the latest revision, the request is not processed and returns a 400 bad request error. The request should be tried again after retrieving the latest version of the document. Usually a revision ID remains valid for use as a target revision for several minutes after it's read, but for frequently edited documents this window might be shorter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetRevisionId")]
		public string TargetRevisionId { get; set; }
	}
	
	/// <summary>
	/// Response message from a BatchUpdateDocument request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchUpdateDocumentResponse
	{
		
		/// <summary>
		/// The ID of the document to which the updates were applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentId")]
		public string DocumentId { get; set; }
		
		/// <summary>
		/// The reply of the updates. This maps 1:1 with the updates, although replies to some requests may be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replies")]
		public Response[] Replies { get; set; }
		
		/// <summary>
		/// Provides control over how write requests are executed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="writeControl")]
		public WriteControl WriteControl { get; set; }
	}
	
	/// <summary>
	/// A single response from an update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Response
	{
		
		/// <summary>
		/// The result of creating a footer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createFooter")]
		public CreateFooterResponse CreateFooter { get; set; }
		
		/// <summary>
		/// The result of creating a footnote.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createFootnote")]
		public CreateFootnoteResponse CreateFootnote { get; set; }
		
		/// <summary>
		/// The result of creating a header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createHeader")]
		public CreateHeaderResponse CreateHeader { get; set; }
		
		/// <summary>
		/// The result of creating a named range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createNamedRange")]
		public CreateNamedRangeResponse CreateNamedRange { get; set; }
		
		/// <summary>
		/// The result of inserting an inline image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertInlineImage")]
		public InsertInlineImageResponse InsertInlineImage { get; set; }
		
		/// <summary>
		/// The result of inserting an embedded Google Sheets chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertInlineSheetsChart")]
		public InsertInlineSheetsChartResponse InsertInlineSheetsChart { get; set; }
		
		/// <summary>
		/// The result of replacing text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replaceAllText")]
		public ReplaceAllTextResponse ReplaceAllText { get; set; }
	}
	
	/// <summary>
	/// The result of creating a footer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFooterResponse
	{
		
		/// <summary>
		/// The ID of the created footer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footerId")]
		public string FooterId { get; set; }
	}
	
	/// <summary>
	/// The result of creating a footnote.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateFootnoteResponse
	{
		
		/// <summary>
		/// The ID of the created footnote.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footnoteId")]
		public string FootnoteId { get; set; }
	}
	
	/// <summary>
	/// The result of creating a header.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateHeaderResponse
	{
		
		/// <summary>
		/// The ID of the created header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headerId")]
		public string HeaderId { get; set; }
	}
	
	/// <summary>
	/// The result of creating a named range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateNamedRangeResponse
	{
		
		/// <summary>
		/// The ID of the created named range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedRangeId")]
		public string NamedRangeId { get; set; }
	}
	
	/// <summary>
	/// The result of inserting an inline image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertInlineImageResponse
	{
		
		/// <summary>
		/// The ID of the created InlineObject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// The result of inserting an embedded Google Sheets chart.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertInlineSheetsChartResponse
	{
		
		/// <summary>
		/// The object ID of the inserted chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
	}
	
	/// <summary>
	/// The result of replacing text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceAllTextResponse
	{
		
		/// <summary>
		/// The number of occurrences changed by replacing all text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occurrencesChanged")]
		public System.Nullable<System.Int32> OccurrencesChanged { get; set; }
	}
	
	/// <summary>
	/// The document body. The body typically contains the full document contents except for headers, footers, and footnotes.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Body
	{
		
		/// <summary>
		/// The contents of the body. The indexes for the body's content begin at zero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public StructuralElement[] Content { get; set; }
	}
	
	/// <summary>
	/// A StructuralElement describes content that provides structure to the document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StructuralElement
	{
		
		/// <summary>
		/// The zero-based end index of this structural element, exclusive, in UTF-16 code units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endIndex")]
		public System.Nullable<System.Int32> EndIndex { get; set; }
		
		/// <summary>
		/// A StructuralElement representing a paragraph. A paragraph is a range of content that's terminated with a newline character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paragraph")]
		public Paragraph Paragraph { get; set; }
		
		/// <summary>
		/// A StructuralElement representing a section break. A section is a range of content that has the same SectionStyle. A section break represents the start of a new section, and the section style applies to the section after the section break. The document body always begins with a section break.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionBreak")]
		public SectionBreak SectionBreak { get; set; }
		
		/// <summary>
		/// The zero-based start index of this structural element, in UTF-16 code units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// A StructuralElement representing a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="table")]
		public Table Table { get; set; }
		
		/// <summary>
		/// A StructuralElement representing a table of contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableOfContents")]
		public TableOfContents TableOfContents { get; set; }
	}
	
	/// <summary>
	/// A StructuralElement representing a paragraph. A paragraph is a range of content that's terminated with a newline character.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Paragraph
	{
		
		/// <summary>
		/// Describes the bullet of a paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bullet")]
		public Bullet Bullet { get; set; }
		
		/// <summary>
		/// The content of the paragraph, broken down into its component parts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public ParagraphElement[] Elements { get; set; }
		
		/// <summary>
		/// Styles that apply to a whole paragraph. Inherited paragraph styles are represented as unset fields in this message. A paragraph style's parent depends on where the paragraph style is defined: * The ParagraphStyle on a Paragraph inherits from the paragraph's corresponding named style type. * The ParagraphStyle on a named style inherits from the normal text named style. * The ParagraphStyle of the normal text named style inherits from the default paragraph style in the Docs editor. * The ParagraphStyle on a Paragraph element that's contained in a table may inherit its paragraph style from the table style. If the paragraph style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paragraphStyle")]
		public ParagraphStyle ParagraphStyle { get; set; }
		
		/// <summary>
		/// The IDs of the positioned objects tethered to this paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positionedObjectIds")]
		public string[] PositionedObjectIds { get; set; }
		
		/// <summary>
		/// The suggested changes to this paragraph's bullet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedBulletChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedBullet> SuggestedBulletChanges { get; set; }
		
		/// <summary>
		/// The suggested paragraph style changes to this paragraph, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedParagraphStyleChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedParagraphStyle> SuggestedParagraphStyleChanges { get; set; }
		
		/// <summary>
		/// The IDs of the positioned objects suggested to be attached to this paragraph, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedPositionedObjectIds")]
		public System.Collections.Generic.Dictionary<string, ObjectReferences> SuggestedPositionedObjectIds { get; set; }
	}
	
	/// <summary>
	/// Describes the bullet of a paragraph.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Bullet
	{
		
		/// <summary>
		/// The ID of the list this paragraph belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listId")]
		public string ListId { get; set; }
		
		/// <summary>
		/// The nesting level of this paragraph in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nestingLevel")]
		public System.Nullable<System.Int32> NestingLevel { get; set; }
		
		/// <summary>
		/// Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyle")]
		public TextStyle TextStyle { get; set; }
	}
	
	/// <summary>
	/// A ParagraphElement describes content within a Paragraph.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParagraphElement
	{
		
		/// <summary>
		/// A ParagraphElement representing a spot in the text that's dynamically replaced with content that can change over time, like a page number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoText")]
		public AutoText AutoText { get; set; }
		
		/// <summary>
		/// A ParagraphElement representing a column break. A column break makes the subsequent text start at the top of the next column.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnBreak")]
		public ColumnBreak ColumnBreak { get; set; }
		
		/// <summary>
		/// The zero-base end index of this paragraph element, exclusive, in UTF-16 code units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endIndex")]
		public System.Nullable<System.Int32> EndIndex { get; set; }
		
		/// <summary>
		/// A ParagraphElement representing an equation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="equation")]
		public Equation Equation { get; set; }
		
		/// <summary>
		/// A ParagraphElement representing a footnote reference. A footnote reference is the inline content rendered with a number and is used to identify the footnote.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footnoteReference")]
		public FootnoteReference FootnoteReference { get; set; }
		
		/// <summary>
		/// A ParagraphElement representing a horizontal line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horizontalRule")]
		public HorizontalRule HorizontalRule { get; set; }
		
		/// <summary>
		/// A ParagraphElement that contains an InlineObject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inlineObjectElement")]
		public InlineObjectElement InlineObjectElement { get; set; }
		
		/// <summary>
		/// A ParagraphElement representing a page break. A page break makes the subsequent text start at the top of the next page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageBreak")]
		public PageBreak PageBreak { get; set; }
		
		/// <summary>
		/// A person or email address mentioned in a document. These mentions behave as a single, immutable element containing the person's name or email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="person")]
		public Person Person { get; set; }
		
		/// <summary>
		/// A link to a Google resource (such as a file in Drive, a YouTube video, or a Calendar event).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="richLink")]
		public RichLink RichLink { get; set; }
		
		/// <summary>
		/// The zero-based start index of this paragraph element, in UTF-16 code units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// A ParagraphElement that represents a run of text that all has the same styling.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textRun")]
		public TextRun TextRun { get; set; }
	}
	
	/// <summary>
	/// A ParagraphElement representing a column break. A column break makes the subsequent text start at the top of the next column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ColumnBreak
	{
		
		/// <summary>
		/// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// The suggested insertion IDs. A ColumnBreak may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionIds")]
		public string[] SuggestedInsertionIds { get; set; }
		
		/// <summary>
		/// The suggested text style changes to this ColumnBreak, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedTextStyleChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedTextStyle> SuggestedTextStyleChanges { get; set; }
		
		/// <summary>
		/// Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyle")]
		public TextStyle TextStyle { get; set; }
	}
	
	/// <summary>
	/// A ParagraphElement representing an equation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Equation
	{
		
		/// <summary>
		/// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// The suggested insertion IDs. An Equation may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionIds")]
		public string[] SuggestedInsertionIds { get; set; }
	}
	
	/// <summary>
	/// A ParagraphElement representing a footnote reference. A footnote reference is the inline content rendered with a number and is used to identify the footnote.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FootnoteReference
	{
		
		/// <summary>
		/// The ID of the footnote that contains the content of this footnote reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footnoteId")]
		public string FootnoteId { get; set; }
		
		/// <summary>
		/// The rendered number of this footnote.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footnoteNumber")]
		public string FootnoteNumber { get; set; }
		
		/// <summary>
		/// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// The suggested insertion IDs. A FootnoteReference may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionIds")]
		public string[] SuggestedInsertionIds { get; set; }
		
		/// <summary>
		/// The suggested text style changes to this FootnoteReference, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedTextStyleChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedTextStyle> SuggestedTextStyleChanges { get; set; }
		
		/// <summary>
		/// Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyle")]
		public TextStyle TextStyle { get; set; }
	}
	
	/// <summary>
	/// A ParagraphElement representing a horizontal line.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HorizontalRule
	{
		
		/// <summary>
		/// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// The suggested insertion IDs. A HorizontalRule may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionIds")]
		public string[] SuggestedInsertionIds { get; set; }
		
		/// <summary>
		/// The suggested text style changes to this HorizontalRule, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedTextStyleChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedTextStyle> SuggestedTextStyleChanges { get; set; }
		
		/// <summary>
		/// Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyle")]
		public TextStyle TextStyle { get; set; }
	}
	
	/// <summary>
	/// A ParagraphElement that contains an InlineObject.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InlineObjectElement
	{
		
		/// <summary>
		/// The ID of the InlineObject this element contains.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inlineObjectId")]
		public string InlineObjectId { get; set; }
		
		/// <summary>
		/// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// The suggested insertion IDs. An InlineObjectElement may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionIds")]
		public string[] SuggestedInsertionIds { get; set; }
		
		/// <summary>
		/// The suggested text style changes to this InlineObject, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedTextStyleChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedTextStyle> SuggestedTextStyleChanges { get; set; }
		
		/// <summary>
		/// Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyle")]
		public TextStyle TextStyle { get; set; }
	}
	
	/// <summary>
	/// A ParagraphElement representing a page break. A page break makes the subsequent text start at the top of the next page.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PageBreak
	{
		
		/// <summary>
		/// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// The suggested insertion IDs. A PageBreak may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionIds")]
		public string[] SuggestedInsertionIds { get; set; }
		
		/// <summary>
		/// The suggested text style changes to this PageBreak, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedTextStyleChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedTextStyle> SuggestedTextStyleChanges { get; set; }
		
		/// <summary>
		/// Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyle")]
		public TextStyle TextStyle { get; set; }
	}
	
	/// <summary>
	/// A person or email address mentioned in a document. These mentions behave as a single, immutable element containing the person's name or email address.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Person
	{
		
		/// <summary>
		/// Output only. The unique ID of this link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personId")]
		public string PersonId { get; set; }
		
		/// <summary>
		/// Properties specific to a linked Person.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="personProperties")]
		public PersonProperties PersonProperties { get; set; }
		
		/// <summary>
		/// IDs for suggestions that remove this person link from the document. A Person might have multiple deletion IDs if, for example, multiple users suggest deleting it. If empty, then this person link isn't suggested for deletion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// IDs for suggestions that insert this person link into the document. A Person might have multiple insertion IDs if it's a nested suggested change (a suggestion within a suggestion made by a different user, for example). If empty, then this person link isn't a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionIds")]
		public string[] SuggestedInsertionIds { get; set; }
		
		/// <summary>
		/// The suggested text style changes to this Person, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedTextStyleChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedTextStyle> SuggestedTextStyleChanges { get; set; }
		
		/// <summary>
		/// Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyle")]
		public TextStyle TextStyle { get; set; }
	}
	
	/// <summary>
	/// Properties specific to a linked Person.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PersonProperties
	{
		
		/// <summary>
		/// Output only. The email address linked to this Person. This field is always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Output only. The name of the person if it's displayed in the link text instead of the person's email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A link to a Google resource (such as a file in Drive, a YouTube video, or a Calendar event).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RichLink
	{
		
		/// <summary>
		/// Output only. The ID of this link.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="richLinkId")]
		public string RichLinkId { get; set; }
		
		/// <summary>
		/// Properties specific to a RichLink.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="richLinkProperties")]
		public RichLinkProperties RichLinkProperties { get; set; }
		
		/// <summary>
		/// IDs for suggestions that remove this link from the document. A RichLink might have multiple deletion IDs if, for example, multiple users suggest deleting it. If empty, then this person link isn't suggested for deletion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// IDs for suggestions that insert this link into the document. A RichLink might have multiple insertion IDs if it's a nested suggested change (a suggestion within a suggestion made by a different user, for example). If empty, then this person link isn't a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionIds")]
		public string[] SuggestedInsertionIds { get; set; }
		
		/// <summary>
		/// The suggested text style changes to this RichLink, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedTextStyleChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedTextStyle> SuggestedTextStyleChanges { get; set; }
		
		/// <summary>
		/// Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyle")]
		public TextStyle TextStyle { get; set; }
	}
	
	/// <summary>
	/// Properties specific to a RichLink.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RichLinkProperties
	{
		
		/// <summary>
		/// Output only. The [MIME type](https://developers.google.com/drive/api/v3/mime-types) of the RichLink, if there's one (for example, when it's a file in Drive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// Output only. The title of the RichLink as displayed in the link. This title matches the title of the linked resource at the time of the insertion or last update of the link. This field is always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Output only. The URI to the RichLink. This is always present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uri")]
		public string Uri { get; set; }
	}
	
	/// <summary>
	/// A ParagraphElement that represents a run of text that all has the same styling.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextRun
	{
		
		/// <summary>
		/// The text of this run. Any non-text elements in the run are replaced with the Unicode character U+E907.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// The suggested insertion IDs. A TextRun may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionIds")]
		public string[] SuggestedInsertionIds { get; set; }
		
		/// <summary>
		/// The suggested text style changes to this run, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedTextStyleChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedTextStyle> SuggestedTextStyleChanges { get; set; }
		
		/// <summary>
		/// Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyle")]
		public TextStyle TextStyle { get; set; }
	}
	
	/// <summary>
	/// A suggested change to a Bullet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuggestedBullet
	{
		
		/// <summary>
		/// Describes the bullet of a paragraph.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bullet")]
		public Bullet Bullet { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base Bullet have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bulletSuggestionState")]
		public BulletSuggestionState BulletSuggestionState { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base Bullet have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulletSuggestionState
	{
		
		/// <summary>
		/// Indicates if there was a suggested change to the list_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listIdSuggested")]
		public System.Nullable<System.Boolean> ListIdSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to the nesting_level.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nestingLevelSuggested")]
		public System.Nullable<System.Boolean> NestingLevelSuggested { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base TextStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyleSuggestionState")]
		public TextStyleSuggestionState TextStyleSuggestionState { get; set; }
	}
	
	/// <summary>
	/// A suggested change to a ParagraphStyle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuggestedParagraphStyle
	{
		
		/// <summary>
		/// Styles that apply to a whole paragraph. Inherited paragraph styles are represented as unset fields in this message. A paragraph style's parent depends on where the paragraph style is defined: * The ParagraphStyle on a Paragraph inherits from the paragraph's corresponding named style type. * The ParagraphStyle on a named style inherits from the normal text named style. * The ParagraphStyle of the normal text named style inherits from the default paragraph style in the Docs editor. * The ParagraphStyle on a Paragraph element that's contained in a table may inherit its paragraph style from the table style. If the paragraph style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paragraphStyle")]
		public ParagraphStyle ParagraphStyle { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base ParagraphStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paragraphStyleSuggestionState")]
		public ParagraphStyleSuggestionState ParagraphStyleSuggestionState { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base ParagraphStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParagraphStyleSuggestionState
	{
		
		/// <summary>
		/// Indicates if there was a suggested change to alignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alignmentSuggested")]
		public System.Nullable<System.Boolean> AlignmentSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to avoid_widow_and_orphan.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avoidWidowAndOrphanSuggested")]
		public System.Nullable<System.Boolean> AvoidWidowAndOrphanSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to border_between.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderBetweenSuggested")]
		public System.Nullable<System.Boolean> BorderBetweenSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to border_bottom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderBottomSuggested")]
		public System.Nullable<System.Boolean> BorderBottomSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to border_left.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderLeftSuggested")]
		public System.Nullable<System.Boolean> BorderLeftSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to border_right.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderRightSuggested")]
		public System.Nullable<System.Boolean> BorderRightSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to border_top.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderTopSuggested")]
		public System.Nullable<System.Boolean> BorderTopSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to direction.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directionSuggested")]
		public System.Nullable<System.Boolean> DirectionSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to heading_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headingIdSuggested")]
		public System.Nullable<System.Boolean> HeadingIdSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to indent_end.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indentEndSuggested")]
		public System.Nullable<System.Boolean> IndentEndSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to indent_first_line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indentFirstLineSuggested")]
		public System.Nullable<System.Boolean> IndentFirstLineSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to indent_start.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indentStartSuggested")]
		public System.Nullable<System.Boolean> IndentStartSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to keep_lines_together.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keepLinesTogetherSuggested")]
		public System.Nullable<System.Boolean> KeepLinesTogetherSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to keep_with_next.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keepWithNextSuggested")]
		public System.Nullable<System.Boolean> KeepWithNextSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to line_spacing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineSpacingSuggested")]
		public System.Nullable<System.Boolean> LineSpacingSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to named_style_type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedStyleTypeSuggested")]
		public System.Nullable<System.Boolean> NamedStyleTypeSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to page_break_before.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageBreakBeforeSuggested")]
		public System.Nullable<System.Boolean> PageBreakBeforeSuggested { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base Shading have been changed in this suggested change. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shadingSuggestionState")]
		public ShadingSuggestionState ShadingSuggestionState { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to space_above.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaceAboveSuggested")]
		public System.Nullable<System.Boolean> SpaceAboveSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to space_below.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaceBelowSuggested")]
		public System.Nullable<System.Boolean> SpaceBelowSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to spacing_mode.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spacingModeSuggested")]
		public System.Nullable<System.Boolean> SpacingModeSuggested { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base Shading have been changed in this suggested change. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ShadingSuggestionState
	{
		
		/// <summary>
		/// Indicates if there was a suggested change to the Shading.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColorSuggested")]
		public System.Nullable<System.Boolean> BackgroundColorSuggested { get; set; }
	}
	
	/// <summary>
	/// A collection of object IDs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObjectReferences
	{
		
		/// <summary>
		/// The object IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectIds")]
		public string[] ObjectIds { get; set; }
	}
	
	/// <summary>
	/// A StructuralElement representing a section break. A section is a range of content that has the same SectionStyle. A section break represents the start of a new section, and the section style applies to the section after the section break. The document body always begins with a section break.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SectionBreak
	{
		
		/// <summary>
		/// The styling that applies to a section.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sectionStyle")]
		public SectionStyle SectionStyle { get; set; }
		
		/// <summary>
		/// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// The suggested insertion IDs. A SectionBreak may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionIds")]
		public string[] SuggestedInsertionIds { get; set; }
	}
	
	/// <summary>
	/// A StructuralElement representing a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Table
	{
		
		/// <summary>
		/// Number of columns in the table. It's possible for a table to be non-rectangular, so some rows may have a different number of cells.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columns")]
		public System.Nullable<System.Int32> Columns { get; set; }
		
		/// <summary>
		/// Number of rows in the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public System.Nullable<System.Int32> Rows { get; set; }
		
		/// <summary>
		/// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// The suggested insertion IDs. A Table may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionIds")]
		public string[] SuggestedInsertionIds { get; set; }
		
		/// <summary>
		/// The contents and style of each row.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRows")]
		public TableRow[] TableRows { get; set; }
		
		/// <summary>
		/// Styles that apply to a table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableStyle")]
		public TableStyle TableStyle { get; set; }
	}
	
	/// <summary>
	/// The contents and style of a row in a Table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableRow
	{
		
		/// <summary>
		/// The zero-based end index of this row, exclusive, in UTF-16 code units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endIndex")]
		public System.Nullable<System.Int32> EndIndex { get; set; }
		
		/// <summary>
		/// The zero-based start index of this row, in UTF-16 code units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// The suggested insertion IDs. A TableRow may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionIds")]
		public string[] SuggestedInsertionIds { get; set; }
		
		/// <summary>
		/// The suggested style changes to this row, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedTableRowStyleChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedTableRowStyle> SuggestedTableRowStyleChanges { get; set; }
		
		/// <summary>
		/// The contents and style of each cell in this row. It's possible for a table to be non-rectangular, so some rows may have a different number of cells than other rows in the same table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableCells")]
		public TableCell[] TableCells { get; set; }
		
		/// <summary>
		/// Styles that apply to a table row.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRowStyle")]
		public TableRowStyle TableRowStyle { get; set; }
	}
	
	/// <summary>
	/// A suggested change to a TableRowStyle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuggestedTableRowStyle
	{
		
		/// <summary>
		/// Styles that apply to a table row.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRowStyle")]
		public TableRowStyle TableRowStyle { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base TableRowStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableRowStyleSuggestionState")]
		public TableRowStyleSuggestionState TableRowStyleSuggestionState { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base TableRowStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableRowStyleSuggestionState
	{
		
		/// <summary>
		/// Indicates if there was a suggested change to min_row_height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minRowHeightSuggested")]
		public System.Nullable<System.Boolean> MinRowHeightSuggested { get; set; }
	}
	
	/// <summary>
	/// The contents and style of a cell in a Table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableCell
	{
		
		/// <summary>
		/// The content of the cell.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public StructuralElement[] Content { get; set; }
		
		/// <summary>
		/// The zero-based end index of this cell, exclusive, in UTF-16 code units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endIndex")]
		public System.Nullable<System.Int32> EndIndex { get; set; }
		
		/// <summary>
		/// The zero-based start index of this cell, in UTF-16 code units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startIndex")]
		public System.Nullable<System.Int32> StartIndex { get; set; }
		
		/// <summary>
		/// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// The suggested insertion IDs. A TableCell may have multiple insertion IDs if it's a nested suggested change. If empty, then this is not a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionIds")]
		public string[] SuggestedInsertionIds { get; set; }
		
		/// <summary>
		/// The suggested changes to the table cell style, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedTableCellStyleChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedTableCellStyle> SuggestedTableCellStyleChanges { get; set; }
		
		/// <summary>
		/// The style of a TableCell. Inherited table cell styles are represented as unset fields in this message. A table cell style can inherit from the table's style.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableCellStyle")]
		public TableCellStyle TableCellStyle { get; set; }
	}
	
	/// <summary>
	/// A suggested change to a TableCellStyle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuggestedTableCellStyle
	{
		
		/// <summary>
		/// The style of a TableCell. Inherited table cell styles are represented as unset fields in this message. A table cell style can inherit from the table's style.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableCellStyle")]
		public TableCellStyle TableCellStyle { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base TableCellStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableCellStyleSuggestionState")]
		public TableCellStyleSuggestionState TableCellStyleSuggestionState { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base TableCellStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableCellStyleSuggestionState
	{
		
		/// <summary>
		/// Indicates if there was a suggested change to background_color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundColorSuggested")]
		public System.Nullable<System.Boolean> BackgroundColorSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to border_bottom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderBottomSuggested")]
		public System.Nullable<System.Boolean> BorderBottomSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to border_left.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderLeftSuggested")]
		public System.Nullable<System.Boolean> BorderLeftSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to border_right.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderRightSuggested")]
		public System.Nullable<System.Boolean> BorderRightSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to border_top.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="borderTopSuggested")]
		public System.Nullable<System.Boolean> BorderTopSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to column_span.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="columnSpanSuggested")]
		public System.Nullable<System.Boolean> ColumnSpanSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to content_alignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentAlignmentSuggested")]
		public System.Nullable<System.Boolean> ContentAlignmentSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to padding_bottom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paddingBottomSuggested")]
		public System.Nullable<System.Boolean> PaddingBottomSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to padding_left.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paddingLeftSuggested")]
		public System.Nullable<System.Boolean> PaddingLeftSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to padding_right.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paddingRightSuggested")]
		public System.Nullable<System.Boolean> PaddingRightSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to padding_top.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paddingTopSuggested")]
		public System.Nullable<System.Boolean> PaddingTopSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to row_span.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowSpanSuggested")]
		public System.Nullable<System.Boolean> RowSpanSuggested { get; set; }
	}
	
	/// <summary>
	/// Styles that apply to a table.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableStyle
	{
		
		/// <summary>
		/// The properties of each column. Note that in Docs, tables contain rows and rows contain cells, similar to HTML. So the properties for a row can be found on the row's table_row_style.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tableColumnProperties")]
		public TableColumnProperties[] TableColumnProperties { get; set; }
	}
	
	/// <summary>
	/// A StructuralElement representing a table of contents.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TableOfContents
	{
		
		/// <summary>
		/// The content of the table of contents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public StructuralElement[] Content { get; set; }
		
		/// <summary>
		/// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// The suggested insertion IDs. A TableOfContents may have multiple insertion IDs if it is a nested suggested change. If empty, then this is not a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionIds")]
		public string[] SuggestedInsertionIds { get; set; }
	}
	
	/// <summary>
	/// The crop properties of an image. The crop rectangle is represented using fractional offsets from the original content's 4 edges. - If the offset is in the interval (0, 1), the corresponding edge of crop rectangle is positioned inside of the image's original bounding rectangle. - If the offset is negative or greater than 1, the corresponding edge of crop rectangle is positioned outside of the image's original bounding rectangle. - If all offsets and rotation angle are 0, the image is not cropped.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CropProperties
	{
		
		/// <summary>
		/// The clockwise rotation angle of the crop rectangle around its center, in radians. Rotation is applied after the offsets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="angle")]
		public System.Nullable<System.Single> Angle { get; set; }
		
		/// <summary>
		/// The offset specifies how far inwards the bottom edge of the crop rectangle is from the bottom edge of the original content as a fraction of the original content's height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetBottom")]
		public System.Nullable<System.Single> OffsetBottom { get; set; }
		
		/// <summary>
		/// The offset specifies how far inwards the left edge of the crop rectangle is from the left edge of the original content as a fraction of the original content's width.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetLeft")]
		public System.Nullable<System.Single> OffsetLeft { get; set; }
		
		/// <summary>
		/// The offset specifies how far inwards the right edge of the crop rectangle is from the right edge of the original content as a fraction of the original content's width.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetRight")]
		public System.Nullable<System.Single> OffsetRight { get; set; }
		
		/// <summary>
		/// The offset specifies how far inwards the top edge of the crop rectangle is from the top edge of the original content as a fraction of the original content's height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetTop")]
		public System.Nullable<System.Single> OffsetTop { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base CropProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CropPropertiesSuggestionState
	{
		
		/// <summary>
		/// Indicates if there was a suggested change to angle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="angleSuggested")]
		public System.Nullable<System.Boolean> AngleSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to offset_bottom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetBottomSuggested")]
		public System.Nullable<System.Boolean> OffsetBottomSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to offset_left.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetLeftSuggested")]
		public System.Nullable<System.Boolean> OffsetLeftSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to offset_right.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetRightSuggested")]
		public System.Nullable<System.Boolean> OffsetRightSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to offset_top.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offsetTopSuggested")]
		public System.Nullable<System.Boolean> OffsetTopSuggested { get; set; }
	}
	
	/// <summary>
	/// A Google Docs document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Document
	{
		
		/// <summary>
		/// The document body. The body typically contains the full document contents except for headers, footers, and footnotes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public Body Body { get; set; }
		
		/// <summary>
		/// Output only. The ID of the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentId")]
		public string DocumentId { get; set; }
		
		/// <summary>
		/// The style of the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentStyle")]
		public DocumentStyle DocumentStyle { get; set; }
		
		/// <summary>
		/// Output only. The footers in the document, keyed by footer ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footers")]
		public System.Collections.Generic.Dictionary<string, Footer> Footers { get; set; }
		
		/// <summary>
		/// Output only. The footnotes in the document, keyed by footnote ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footnotes")]
		public System.Collections.Generic.Dictionary<string, Footnote> Footnotes { get; set; }
		
		/// <summary>
		/// Output only. The headers in the document, keyed by header ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headers")]
		public System.Collections.Generic.Dictionary<string, Header> Headers { get; set; }
		
		/// <summary>
		/// Output only. The inline objects in the document, keyed by object ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inlineObjects")]
		public System.Collections.Generic.Dictionary<string, InlineObject> InlineObjects { get; set; }
		
		/// <summary>
		/// Output only. The lists in the document, keyed by list ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lists")]
		public System.Collections.Generic.Dictionary<string, List> Lists { get; set; }
		
		/// <summary>
		/// Output only. The named ranges in the document, keyed by name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedRanges")]
		public System.Collections.Generic.Dictionary<string, NamedRanges> NamedRanges { get; set; }
		
		/// <summary>
		/// The named styles. Paragraphs in the document can inherit their TextStyle and ParagraphStyle from these named styles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedStyles")]
		public NamedStyles NamedStyles { get; set; }
		
		/// <summary>
		/// Output only. The positioned objects in the document, keyed by object ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positionedObjects")]
		public System.Collections.Generic.Dictionary<string, PositionedObject> PositionedObjects { get; set; }
		
		/// <summary>
		/// Output only. The revision ID of the document. Can be used in update requests to specify which revision of a document to apply updates to and how the request should behave if the document has been edited since that revision. Only populated if the user has edit access to the document. The revision ID is not a sequential number but an opaque string. The format of the revision ID might change over time. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the document has not changed. Conversely, a changed ID (for the same document and user) usually means the document has been updated. However, a changed ID can also be due to internal factors such as ID format changes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// Output only. The suggested changes to the style of the document, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDocumentStyleChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedDocumentStyle> SuggestedDocumentStyleChanges { get; set; }
		
		/// <summary>
		/// Output only. The suggested changes to the named styles of the document, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedNamedStylesChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedNamedStyles> SuggestedNamedStylesChanges { get; set; }
		
		/// <summary>
		/// Output only. The suggestions view mode applied to the document. Note: When editing a document, changes must be based on a document with SUGGESTIONS_INLINE.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestionsViewMode")]
		public System.Nullable<DocumentSuggestionsViewMode> SuggestionsViewMode { get; set; }
		
		/// <summary>
		/// The title of the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// A document footer.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Footer
	{
		
		/// <summary>
		/// The contents of the footer. The indexes for a footer's content begin at zero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public StructuralElement[] Content { get; set; }
		
		/// <summary>
		/// The ID of the footer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footerId")]
		public string FooterId { get; set; }
	}
	
	/// <summary>
	/// A document footnote.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Footnote
	{
		
		/// <summary>
		/// The contents of the footnote. The indexes for a footnote's content begin at zero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public StructuralElement[] Content { get; set; }
		
		/// <summary>
		/// The ID of the footnote.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="footnoteId")]
		public string FootnoteId { get; set; }
	}
	
	/// <summary>
	/// A document header.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Header
	{
		
		/// <summary>
		/// The contents of the header. The indexes for a header's content begin at zero.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public StructuralElement[] Content { get; set; }
		
		/// <summary>
		/// The ID of the header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headerId")]
		public string HeaderId { get; set; }
	}
	
	/// <summary>
	/// An object that appears inline with text. An InlineObject contains an EmbeddedObject such as an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InlineObject
	{
		
		/// <summary>
		/// Properties of an InlineObject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inlineObjectProperties")]
		public InlineObjectProperties InlineObjectProperties { get; set; }
		
		/// <summary>
		/// The ID of this inline object. Can be used to update an object’s properties.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// The suggested changes to the inline object properties, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInlineObjectPropertiesChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedInlineObjectProperties> SuggestedInlineObjectPropertiesChanges { get; set; }
		
		/// <summary>
		/// The suggested insertion ID. If empty, then this is not a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionId")]
		public string SuggestedInsertionId { get; set; }
	}
	
	/// <summary>
	/// Properties of an InlineObject.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InlineObjectProperties
	{
		
		/// <summary>
		/// An embedded object in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embeddedObject")]
		public EmbeddedObject EmbeddedObject { get; set; }
	}
	
	/// <summary>
	/// An embedded object in the document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmbeddedObject
	{
		
		/// <summary>
		/// The description of the embedded object. The `title` and `description` are both combined to display alt text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The properties of an embedded drawing and used to differentiate the object type. An embedded drawing is one that's created and edited within a document. Note that extensive details are not supported.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embeddedDrawingProperties")]
		public EmbeddedDrawingProperties EmbeddedDrawingProperties { get; set; }
		
		/// <summary>
		/// A border around an EmbeddedObject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embeddedObjectBorder")]
		public EmbeddedObjectBorder EmbeddedObjectBorder { get; set; }
		
		/// <summary>
		/// The properties of an image.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageProperties")]
		public ImageProperties ImageProperties { get; set; }
		
		/// <summary>
		/// A reference to the external linked source content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedContentReference")]
		public LinkedContentReference LinkedContentReference { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginBottom")]
		public Dimension MarginBottom { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginLeft")]
		public Dimension MarginLeft { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginRight")]
		public Dimension MarginRight { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginTop")]
		public Dimension MarginTop { get; set; }
		
		/// <summary>
		/// A width and height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public Size Size { get; set; }
		
		/// <summary>
		/// The title of the embedded object. The `title` and `description` are both combined to display alt text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	/// <summary>
	/// The properties of an embedded drawing and used to differentiate the object type. An embedded drawing is one that's created and edited within a document. Note that extensive details are not supported.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmbeddedDrawingProperties
	{
	}
	
	/// <summary>
	/// A border around an EmbeddedObject.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmbeddedObjectBorder
	{
		
		/// <summary>
		/// A color that can either be fully opaque or fully transparent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public OptionalColor Color { get; set; }
		
		/// <summary>
		/// The dash style of the border.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dashStyle")]
		public ParagraphBorderDashStyle DashStyle { get; set; }
		
		/// <summary>
		/// The property state of the border property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyState")]
		public System.Nullable<EmbeddedObjectBorderPropertyState> PropertyState { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public Dimension Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EmbeddedObjectBorderPropertyState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RENDERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_RENDERED = 1,
	}
	
	/// <summary>
	/// The properties of an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImageProperties
	{
		
		/// <summary>
		/// The clockwise rotation angle of the image, in radians.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="angle")]
		public System.Nullable<System.Single> Angle { get; set; }
		
		/// <summary>
		/// The brightness effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brightness")]
		public System.Nullable<System.Single> Brightness { get; set; }
		
		/// <summary>
		/// A URI to the image with a default lifetime of 30 minutes. This URI is tagged with the account of the requester. Anyone with the URI effectively accesses the image as the original requester. Access to the image may be lost if the document's sharing settings change.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentUri")]
		public string ContentUri { get; set; }
		
		/// <summary>
		/// The contrast effect of the image. The value should be in the interval [-1.0, 1.0], where 0 means no effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contrast")]
		public System.Nullable<System.Single> Contrast { get; set; }
		
		/// <summary>
		/// The crop properties of an image. The crop rectangle is represented using fractional offsets from the original content's 4 edges. - If the offset is in the interval (0, 1), the corresponding edge of crop rectangle is positioned inside of the image's original bounding rectangle. - If the offset is negative or greater than 1, the corresponding edge of crop rectangle is positioned outside of the image's original bounding rectangle. - If all offsets and rotation angle are 0, the image is not cropped.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cropProperties")]
		public CropProperties CropProperties { get; set; }
		
		/// <summary>
		/// The source URI is the URI used to insert the image. The source URI can be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUri")]
		public string SourceUri { get; set; }
		
		/// <summary>
		/// The transparency effect of the image. The value should be in the interval [0.0, 1.0], where 0 means no effect and 1 means transparent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transparency")]
		public System.Nullable<System.Single> Transparency { get; set; }
	}
	
	/// <summary>
	/// A reference to the external linked source content.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinkedContentReference
	{
		
		/// <summary>
		/// A reference to a linked chart embedded from Google Sheets.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetsChartReference")]
		public SheetsChartReference SheetsChartReference { get; set; }
	}
	
	/// <summary>
	/// A reference to a linked chart embedded from Google Sheets.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SheetsChartReference
	{
		
		/// <summary>
		/// The ID of the specific chart in the Google Sheets spreadsheet that's embedded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chartId")]
		public System.Nullable<System.Int32> ChartId { get; set; }
		
		/// <summary>
		/// The ID of the Google Sheets spreadsheet that contains the source chart.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetId")]
		public string SpreadsheetId { get; set; }
	}
	
	/// <summary>
	/// A suggested change to InlineObjectProperties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuggestedInlineObjectProperties
	{
		
		/// <summary>
		/// Properties of an InlineObject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inlineObjectProperties")]
		public InlineObjectProperties InlineObjectProperties { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base InlineObjectProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inlineObjectPropertiesSuggestionState")]
		public InlineObjectPropertiesSuggestionState InlineObjectPropertiesSuggestionState { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base InlineObjectProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InlineObjectPropertiesSuggestionState
	{
		
		/// <summary>
		/// A mask that indicates which of the fields on the base EmbeddedObject have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embeddedObjectSuggestionState")]
		public EmbeddedObjectSuggestionState EmbeddedObjectSuggestionState { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base EmbeddedObject have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmbeddedObjectSuggestionState
	{
		
		/// <summary>
		/// Indicates if there was a suggested change to description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="descriptionSuggested")]
		public System.Nullable<System.Boolean> DescriptionSuggested { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base EmbeddedDrawingProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embeddedDrawingPropertiesSuggestionState")]
		public EmbeddedDrawingPropertiesSuggestionState EmbeddedDrawingPropertiesSuggestionState { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base EmbeddedObjectBorder have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embeddedObjectBorderSuggestionState")]
		public EmbeddedObjectBorderSuggestionState EmbeddedObjectBorderSuggestionState { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base ImageProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imagePropertiesSuggestionState")]
		public ImagePropertiesSuggestionState ImagePropertiesSuggestionState { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base LinkedContentReference have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="linkedContentReferenceSuggestionState")]
		public LinkedContentReferenceSuggestionState LinkedContentReferenceSuggestionState { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to margin_bottom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginBottomSuggested")]
		public System.Nullable<System.Boolean> MarginBottomSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to margin_left.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginLeftSuggested")]
		public System.Nullable<System.Boolean> MarginLeftSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to margin_right.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginRightSuggested")]
		public System.Nullable<System.Boolean> MarginRightSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to margin_top.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginTopSuggested")]
		public System.Nullable<System.Boolean> MarginTopSuggested { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base Size have been changed in this suggestion. For any field set to true, the Size has a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeSuggestionState")]
		public SizeSuggestionState SizeSuggestionState { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to title.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="titleSuggested")]
		public System.Nullable<System.Boolean> TitleSuggested { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base EmbeddedDrawingProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmbeddedDrawingPropertiesSuggestionState
	{
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base EmbeddedObjectBorder have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EmbeddedObjectBorderSuggestionState
	{
		
		/// <summary>
		/// Indicates if there was a suggested change to color.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colorSuggested")]
		public System.Nullable<System.Boolean> ColorSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to dash_style.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dashStyleSuggested")]
		public System.Nullable<System.Boolean> DashStyleSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to property_state.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="propertyStateSuggested")]
		public System.Nullable<System.Boolean> PropertyStateSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to width.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widthSuggested")]
		public System.Nullable<System.Boolean> WidthSuggested { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base ImageProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ImagePropertiesSuggestionState
	{
		
		/// <summary>
		/// Indicates if there was a suggested change to angle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="angleSuggested")]
		public System.Nullable<System.Boolean> AngleSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to brightness.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brightnessSuggested")]
		public System.Nullable<System.Boolean> BrightnessSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to content_uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentUriSuggested")]
		public System.Nullable<System.Boolean> ContentUriSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to contrast.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contrastSuggested")]
		public System.Nullable<System.Boolean> ContrastSuggested { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base CropProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cropPropertiesSuggestionState")]
		public CropPropertiesSuggestionState CropPropertiesSuggestionState { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to source_uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUriSuggested")]
		public System.Nullable<System.Boolean> SourceUriSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to transparency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transparencySuggested")]
		public System.Nullable<System.Boolean> TransparencySuggested { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base LinkedContentReference have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LinkedContentReferenceSuggestionState
	{
		
		/// <summary>
		/// A mask that indicates which of the fields on the base SheetsChartReference have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheetsChartReferenceSuggestionState")]
		public SheetsChartReferenceSuggestionState SheetsChartReferenceSuggestionState { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base SheetsChartReference have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SheetsChartReferenceSuggestionState
	{
		
		/// <summary>
		/// Indicates if there was a suggested change to chart_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="chartIdSuggested")]
		public System.Nullable<System.Boolean> ChartIdSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to spreadsheet_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spreadsheetIdSuggested")]
		public System.Nullable<System.Boolean> SpreadsheetIdSuggested { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base Size have been changed in this suggestion. For any field set to true, the Size has a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SizeSuggestionState
	{
		
		/// <summary>
		/// Indicates if there was a suggested change to height.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heightSuggested")]
		public System.Nullable<System.Boolean> HeightSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to width.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widthSuggested")]
		public System.Nullable<System.Boolean> WidthSuggested { get; set; }
	}
	
	/// <summary>
	/// A List represents the list attributes for a group of paragraphs that all belong to the same list. A paragraph that's part of a list has a reference to the list's ID in its bullet.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class List
	{
		
		/// <summary>
		/// The properties of a list that describe the look and feel of bullets belonging to paragraphs associated with a list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listProperties")]
		public ListProperties ListProperties { get; set; }
		
		/// <summary>
		/// The suggested deletion IDs. If empty, then there are no suggested deletions of this list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// The suggested insertion ID. If empty, then this is not a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionId")]
		public string SuggestedInsertionId { get; set; }
		
		/// <summary>
		/// The suggested changes to the list properties, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedListPropertiesChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedListProperties> SuggestedListPropertiesChanges { get; set; }
	}
	
	/// <summary>
	/// The properties of a list that describe the look and feel of bullets belonging to paragraphs associated with a list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProperties
	{
		
		/// <summary>
		/// Describes the properties of the bullets at the associated level. A list has at most 9 levels of nesting with nesting level 0 corresponding to the top-most level and nesting level 8 corresponding to the most nested level. The nesting levels are returned in ascending order with the least nested returned first.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nestingLevels")]
		public NestingLevel[] NestingLevels { get; set; }
	}
	
	/// <summary>
	/// Contains properties describing the look and feel of a list bullet at a given level of nesting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NestingLevel
	{
		
		/// <summary>
		/// The alignment of the bullet within the space allotted for rendering the bullet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bulletAlignment")]
		public System.Nullable<NestingLevelBulletAlignment> BulletAlignment { get; set; }
		
		/// <summary>
		/// The format string used by bullets at this level of nesting. The glyph format contains one or more placeholders, and these placeholders are replaced with the appropriate values depending on the glyph_type or glyph_symbol. The placeholders follow the pattern `%[nesting_level]`. Furthermore, placeholders can have prefixes and suffixes. Thus, the glyph format follows the pattern `%[nesting_level]`. Note that the prefix and suffix are optional and can be arbitrary strings. For example, the glyph format `%0.` indicates that the rendered glyph will replace the placeholder with the corresponding glyph for nesting level 0 followed by a period as the suffix. So a list with a glyph type of UPPER_ALPHA and glyph format `%0.` at nesting level 0 will result in a list with rendered glyphs `A.` `B.` `C.` The glyph format can contain placeholders for the current nesting level as well as placeholders for parent nesting levels. For example, a list can have a glyph format of `%0.` at nesting level 0 and a glyph format of `%0.%1.` at nesting level 1. Assuming both nesting levels have DECIMAL glyph types, this would result in a list with rendered glyphs `1.` `2.` ` 2.1.` ` 2.2.` `3.` For nesting levels that are ordered, the string that replaces a placeholder in the glyph format for a particular paragraph depends on the paragraph's order within the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glyphFormat")]
		public string GlyphFormat { get; set; }
		
		/// <summary>
		/// A custom glyph symbol used by bullets when paragraphs at this level of nesting are unordered. The glyph symbol replaces placeholders within the glyph_format. For example, if the glyph_symbol is the solid circle corresponding to Unicode U+25cf code point and the glyph_format is `%0`, the rendered glyph would be the solid circle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glyphSymbol")]
		public string GlyphSymbol { get; set; }
		
		/// <summary>
		/// The type of glyph used by bullets when paragraphs at this level of nesting are ordered. The glyph type determines the type of glyph used to replace placeholders within the glyph_format when paragraphs at this level of nesting are ordered. For example, if the nesting level is 0, the glyph_format is `%0.` and the glyph type is DECIMAL, then the rendered glyph would replace the placeholder `%0` in the glyph format with a number corresponding to list item's order within the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glyphType")]
		public System.Nullable<NestingLevelGlyphType> GlyphType { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indentFirstLine")]
		public Dimension IndentFirstLine { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indentStart")]
		public Dimension IndentStart { get; set; }
		
		/// <summary>
		/// The number of the first list item at this nesting level. A value of 0 is treated as a value of 1 for lettered lists and Roman numeral lists. For values of both 0 and 1, lettered and Roman numeral lists will begin at `a` and `i` respectively. This value is ignored for nesting levels with unordered glyphs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startNumber")]
		public System.Nullable<System.Int32> StartNumber { get; set; }
		
		/// <summary>
		/// Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyle")]
		public TextStyle TextStyle { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NestingLevelBulletAlignment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BULLET_ALIGNMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CENTER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		END = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NestingLevelGlyphType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GLYPH_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECIMAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ZERO_DECIMAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPPER_ALPHA = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALPHA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UPPER_ROMAN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROMAN = 7,
	}
	
	/// <summary>
	/// A suggested change to ListProperties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuggestedListProperties
	{
		
		/// <summary>
		/// The properties of a list that describe the look and feel of bullets belonging to paragraphs associated with a list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listProperties")]
		public ListProperties ListProperties { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base ListProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="listPropertiesSuggestionState")]
		public ListPropertiesSuggestionState ListPropertiesSuggestionState { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base ListProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPropertiesSuggestionState
	{
		
		/// <summary>
		/// A mask that indicates which of the fields on the corresponding NestingLevel in nesting_levels have been changed in this suggestion. The nesting level suggestion states are returned in ascending order of the nesting level with the least nested returned first.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nestingLevelsSuggestionStates")]
		public NestingLevelSuggestionState[] NestingLevelsSuggestionStates { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base NestingLevel have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NestingLevelSuggestionState
	{
		
		/// <summary>
		/// Indicates if there was a suggested change to bullet_alignment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bulletAlignmentSuggested")]
		public System.Nullable<System.Boolean> BulletAlignmentSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to glyph_format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glyphFormatSuggested")]
		public System.Nullable<System.Boolean> GlyphFormatSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to glyph_symbol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glyphSymbolSuggested")]
		public System.Nullable<System.Boolean> GlyphSymbolSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to glyph_type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="glyphTypeSuggested")]
		public System.Nullable<System.Boolean> GlyphTypeSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to indent_first_line.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indentFirstLineSuggested")]
		public System.Nullable<System.Boolean> IndentFirstLineSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to indent_start.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indentStartSuggested")]
		public System.Nullable<System.Boolean> IndentStartSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to start_number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startNumberSuggested")]
		public System.Nullable<System.Boolean> StartNumberSuggested { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base TextStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyleSuggestionState")]
		public TextStyleSuggestionState TextStyleSuggestionState { get; set; }
	}
	
	/// <summary>
	/// A collection of all the NamedRanges in the document that share a given name.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NamedRanges
	{
		
		/// <summary>
		/// The name that all the named ranges share.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The NamedRanges that share the same name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedRanges")]
		public NamedRange[] NamedRanges1 { get; set; }
	}
	
	/// <summary>
	/// A collection of Ranges with the same named range ID. Named ranges allow developers to associate parts of a document with an arbitrary user-defined label so their contents can be programmatically read or edited later. A document can contain multiple named ranges with the same name, but every named range has a unique ID. A named range is created with a single Range, and content inserted inside a named range generally expands that range. However, certain document changes can cause the range to be split into multiple ranges. Named ranges are not private. All applications and collaborators that have access to the document can see its named ranges.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NamedRange
	{
		
		/// <summary>
		/// The name of the named range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID of the named range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedRangeId")]
		public string NamedRangeId { get; set; }
		
		/// <summary>
		/// The ranges that belong to this named range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ranges")]
		public Range[] Ranges { get; set; }
	}
	
	/// <summary>
	/// The named styles. Paragraphs in the document can inherit their TextStyle and ParagraphStyle from these named styles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NamedStyles
	{
		
		/// <summary>
		/// The named styles. There's an entry for each of the possible named style types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="styles")]
		public NamedStyle[] Styles { get; set; }
	}
	
	/// <summary>
	/// A named style. Paragraphs in the document can inherit their TextStyle and ParagraphStyle from this named style when they have the same named style type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NamedStyle
	{
		
		/// <summary>
		/// The type of this named style.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedStyleType")]
		public ParagraphStyleNamedStyleType NamedStyleType { get; set; }
		
		/// <summary>
		/// Styles that apply to a whole paragraph. Inherited paragraph styles are represented as unset fields in this message. A paragraph style's parent depends on where the paragraph style is defined: * The ParagraphStyle on a Paragraph inherits from the paragraph's corresponding named style type. * The ParagraphStyle on a named style inherits from the normal text named style. * The ParagraphStyle of the normal text named style inherits from the default paragraph style in the Docs editor. * The ParagraphStyle on a Paragraph element that's contained in a table may inherit its paragraph style from the table style. If the paragraph style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paragraphStyle")]
		public ParagraphStyle ParagraphStyle { get; set; }
		
		/// <summary>
		/// Represents the styling that can be applied to text. Inherited text styles are represented as unset fields in this message. A text style's parent depends on where the text style is defined: * The TextStyle of text in a Paragraph inherits from the paragraph's corresponding named style type. * The TextStyle on a named style inherits from the normal text named style. * The TextStyle of the normal text named style inherits from the default text style in the Docs editor. * The TextStyle on a Paragraph element that's contained in a table may inherit its text style from the table style. If the text style does not inherit from a parent, unsetting fields will revert the style to a value matching the defaults in the Docs editor.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyle")]
		public TextStyle TextStyle { get; set; }
	}
	
	/// <summary>
	/// An object that's tethered to a Paragraph and positioned relative to the beginning of the paragraph. A PositionedObject contains an EmbeddedObject such as an image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PositionedObject
	{
		
		/// <summary>
		/// The ID of this positioned object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="objectId")]
		public string ObjectId { get; set; }
		
		/// <summary>
		/// Properties of a PositionedObject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positionedObjectProperties")]
		public PositionedObjectProperties PositionedObjectProperties { get; set; }
		
		/// <summary>
		/// The suggested deletion IDs. If empty, then there are no suggested deletions of this content.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedDeletionIds")]
		public string[] SuggestedDeletionIds { get; set; }
		
		/// <summary>
		/// The suggested insertion ID. If empty, then this is not a suggested insertion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedInsertionId")]
		public string SuggestedInsertionId { get; set; }
		
		/// <summary>
		/// The suggested changes to the positioned object properties, keyed by suggestion ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suggestedPositionedObjectPropertiesChanges")]
		public System.Collections.Generic.Dictionary<string, SuggestedPositionedObjectProperties> SuggestedPositionedObjectPropertiesChanges { get; set; }
	}
	
	/// <summary>
	/// Properties of a PositionedObject.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PositionedObjectProperties
	{
		
		/// <summary>
		/// An embedded object in the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embeddedObject")]
		public EmbeddedObject EmbeddedObject { get; set; }
		
		/// <summary>
		/// The positioning of a PositionedObject. The positioned object is positioned relative to the beginning of the Paragraph it's tethered to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positioning")]
		public PositionedObjectPositioning Positioning { get; set; }
	}
	
	/// <summary>
	/// The positioning of a PositionedObject. The positioned object is positioned relative to the beginning of the Paragraph it's tethered to.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PositionedObjectPositioning
	{
		
		/// <summary>
		/// The layout of this positioned object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layout")]
		public System.Nullable<PositionedObjectPositioningLayout> Layout { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leftOffset")]
		public Dimension LeftOffset { get; set; }
		
		/// <summary>
		/// A magnitude in a single direction in the specified units.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topOffset")]
		public Dimension TopOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PositionedObjectPositioningLayout
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POSITIONED_OBJECT_LAYOUT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WRAP_TEXT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREAK_LEFT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREAK_RIGHT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BREAK_LEFT_RIGHT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_FRONT_OF_TEXT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEHIND_TEXT = 6,
	}
	
	/// <summary>
	/// A suggested change to PositionedObjectProperties.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuggestedPositionedObjectProperties
	{
		
		/// <summary>
		/// Properties of a PositionedObject.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positionedObjectProperties")]
		public PositionedObjectProperties PositionedObjectProperties { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base PositionedObjectProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positionedObjectPropertiesSuggestionState")]
		public PositionedObjectPropertiesSuggestionState PositionedObjectPropertiesSuggestionState { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base PositionedObjectProperties have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PositionedObjectPropertiesSuggestionState
	{
		
		/// <summary>
		/// A mask that indicates which of the fields on the base EmbeddedObject have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="embeddedObjectSuggestionState")]
		public EmbeddedObjectSuggestionState EmbeddedObjectSuggestionState { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base PositionedObjectPositioning have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positioningSuggestionState")]
		public PositionedObjectPositioningSuggestionState PositioningSuggestionState { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base PositionedObjectPositioning have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PositionedObjectPositioningSuggestionState
	{
		
		/// <summary>
		/// Indicates if there was a suggested change to layout.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="layoutSuggested")]
		public System.Nullable<System.Boolean> LayoutSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to left_offset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leftOffsetSuggested")]
		public System.Nullable<System.Boolean> LeftOffsetSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to top_offset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="topOffsetSuggested")]
		public System.Nullable<System.Boolean> TopOffsetSuggested { get; set; }
	}
	
	/// <summary>
	/// A suggested change to the DocumentStyle.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuggestedDocumentStyle
	{
		
		/// <summary>
		/// The style of the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentStyle")]
		public DocumentStyle DocumentStyle { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base DocumentStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="documentStyleSuggestionState")]
		public DocumentStyleSuggestionState DocumentStyleSuggestionState { get; set; }
	}
	
	/// <summary>
	/// A mask that indicates which of the fields on the base DocumentStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DocumentStyleSuggestionState
	{
		
		/// <summary>
		/// A mask that indicates which of the fields on the base Background have been changed in this suggestion. For any field set to true, the Backgound has a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backgroundSuggestionState")]
		public BackgroundSuggestionState BackgroundSuggestionState { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to default_footer_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultFooterIdSuggested")]
		public System.Nullable<System.Boolean> DefaultFooterIdSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to default_header_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultHeaderIdSuggested")]
		public System.Nullable<System.Boolean> DefaultHeaderIdSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to even_page_footer_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evenPageFooterIdSuggested")]
		public System.Nullable<System.Boolean> EvenPageFooterIdSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to even_page_header_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="evenPageHeaderIdSuggested")]
		public System.Nullable<System.Boolean> EvenPageHeaderIdSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to first_page_footer_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPageFooterIdSuggested")]
		public System.Nullable<System.Boolean> FirstPageFooterIdSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to first_page_header_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstPageHeaderIdSuggested")]
		public System.Nullable<System.Boolean> FirstPageHeaderIdSuggested { get; set; }
		
		/// <summary>
		/// Optional. Indicates if there was a suggested change to flip_page_orientation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flipPageOrientationSuggested")]
		public System.Nullable<System.Boolean> FlipPageOrientationSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to margin_bottom.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginBottomSuggested")]
		public System.Nullable<System.Boolean> MarginBottomSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to margin_footer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginFooterSuggested")]
		public System.Nullable<System.Boolean> MarginFooterSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to margin_header.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginHeaderSuggested")]
		public System.Nullable<System.Boolean> MarginHeaderSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to margin_left.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginLeftSuggested")]
		public System.Nullable<System.Boolean> MarginLeftSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to margin_right.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginRightSuggested")]
		public System.Nullable<System.Boolean> MarginRightSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to margin_top.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="marginTopSuggested")]
		public System.Nullable<System.Boolean> MarginTopSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to page_number_start.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumberStartSuggested")]
		public System.Nullable<System.Boolean> PageNumberStartSuggested { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base Size have been changed in this suggestion. For any field set to true, the Size has a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSizeSuggestionState")]
		public SizeSuggestionState PageSizeSuggestionState { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to use_custom_header_footer_margins.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useCustomHeaderFooterMarginsSuggested")]
		public System.Nullable<System.Boolean> UseCustomHeaderFooterMarginsSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to use_even_page_header_footer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useEvenPageHeaderFooterSuggested")]
		public System.Nullable<System.Boolean> UseEvenPageHeaderFooterSuggested { get; set; }
		
		/// <summary>
		/// Indicates if there was a suggested change to use_first_page_header_footer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="useFirstPageHeaderFooterSuggested")]
		public System.Nullable<System.Boolean> UseFirstPageHeaderFooterSuggested { get; set; }
	}
	
	/// <summary>
	/// A suggested change to the NamedStyles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuggestedNamedStyles
	{
		
		/// <summary>
		/// The named styles. Paragraphs in the document can inherit their TextStyle and ParagraphStyle from these named styles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedStyles")]
		public NamedStyles NamedStyles { get; set; }
		
		/// <summary>
		/// The suggestion state of a NamedStyles message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedStylesSuggestionState")]
		public NamedStylesSuggestionState NamedStylesSuggestionState { get; set; }
	}
	
	/// <summary>
	/// The suggestion state of a NamedStyles message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NamedStylesSuggestionState
	{
		
		/// <summary>
		/// A mask that indicates which of the fields on the corresponding NamedStyle in styles have been changed in this suggestion. The order of these named style suggestion states matches the order of the corresponding named style within the named styles suggestion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stylesSuggestionStates")]
		public NamedStyleSuggestionState[] StylesSuggestionStates { get; set; }
	}
	
	/// <summary>
	/// A suggestion state of a NamedStyle message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NamedStyleSuggestionState
	{
		
		/// <summary>
		/// The named style type that this suggestion state corresponds to. This field is provided as a convenience for matching the NamedStyleSuggestionState with its corresponding NamedStyle.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="namedStyleType")]
		public ParagraphStyleNamedStyleType NamedStyleType { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base ParagraphStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paragraphStyleSuggestionState")]
		public ParagraphStyleSuggestionState ParagraphStyleSuggestionState { get; set; }
		
		/// <summary>
		/// A mask that indicates which of the fields on the base TextStyle have been changed in this suggestion. For any field set to true, there's a new suggested value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textStyleSuggestionState")]
		public TextStyleSuggestionState TextStyleSuggestionState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DocumentSuggestionsViewMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_FOR_CURRENT_ACCESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUGGESTIONS_INLINE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREVIEW_SUGGESTIONS_ACCEPTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREVIEW_WITHOUT_SUGGESTIONS = 3,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a blank document using the title given in the request. Other fields in the request, including any provided content, are ignored. Returns the created document.
		/// Docs_documents_create v1/documents
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Document> Docs_documents_createAsync(Document requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/documents";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Document>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest version of the specified document.
		/// Docs_documents_get v1/documents/{documentId}
		/// </summary>
		/// <param name="documentId">The ID of the document to retrieve.</param>
		/// <param name="suggestionsViewMode">The suggestions view mode to apply to the document. This allows viewing the document with all suggestions inline, accepted or rejected. If one is not specified, DEFAULT_FOR_CURRENT_ACCESS is used.</param>
		/// <returns>Successful response</returns>
		public async Task<Document> Docs_documents_getAsync(string documentId, DocumentSuggestionsViewMode suggestionsViewMode, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/documents/"+ (documentId==null? "" : System.Uri.EscapeDataString(documentId))+"&suggestionsViewMode=" + suggestionsViewMode;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Document>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Applies one or more updates to the document. Each request is validated before being applied. If any request is not valid, then the entire request will fail and nothing will be applied. Some requests have replies to give you some information about how they are applied. Other requests do not need to return information; these each return an empty reply. The order of replies matches that of the requests. For example, suppose you call batchUpdate with four updates, and only the third one returns information. The response would have two empty replies, the reply to the third request, and another empty reply, in that order. Because other users may be editing the document, the document might not exactly reflect your changes: your changes may be altered with respect to collaborator changes. If there are no collaborators, the document should reflect your changes. In any case, the updates in your request are guaranteed to be applied together atomically.
		/// Docs_documents_batchUpdate v1/documents/{documentId}:batchUpdate
		/// </summary>
		/// <param name="documentId">The ID of the document to update.</param>
		/// <returns>Successful response</returns>
		public async Task<BatchUpdateDocumentResponse> Docs_documents_batchUpdateAsync(string documentId, BatchUpdateDocumentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/documents/"+ (documentId==null? "" : System.Uri.EscapeDataString(documentId))+":batchUpdate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BatchUpdateDocumentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
