//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// A channel grouping defines a set of rules that can be used to categorize events in a path report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChannelGrouping
	{
		
		/// <summary>
		/// The name to apply to an event that does not match any of the rules in the channel grouping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fallbackName")]
		public string FallbackName { get; set; }
		
		/// <summary>
		/// Channel Grouping name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Rules within Channel Grouping. There is a limit of 100 rules that can be set per channel grouping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public Rule[] Rules { get; set; }
	}
	
	/// <summary>
	/// A Rule defines a name, and a boolean expression in [conjunctive normal form] (http://mathworld.wolfram.com/ConjunctiveNormalForm.html){.external} that can be applied to a path event to determine if that name should be applied.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Rule
	{
		
		/// <summary>
		/// DisjunctiveMatchStatements within a Rule. DisjunctiveMatchStatement OR's all contained filters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disjunctiveMatchStatements")]
		public DisjunctiveMatchStatement[] DisjunctiveMatchStatements { get; set; }
		
		/// <summary>
		/// Rule name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// DisjunctiveMatchStatement that OR's all contained filters.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DisjunctiveMatchStatement
	{
		
		/// <summary>
		/// Filters. There is a limit of 100 filters that can be set per disjunctive match statement.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventFilters")]
		public EventFilter[] EventFilters { get; set; }
	}
	
	/// <summary>
	/// Defines the type of filter to be applied to the path, a DV360 event dimension filter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EventFilter
	{
		
		/// <summary>
		/// Dimension filter on path events.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilter")]
		public PathQueryOptionsFilter DimensionFilter { get; set; }
	}
	
	/// <summary>
	/// Dimension filter on path events.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathQueryOptionsFilter
	{
		
		/// <summary>
		/// Dimension the filter is applied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filter")]
		public string Filter { get; set; }
		
		/// <summary>
		/// Match logic of the filter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="match")]
		public System.Nullable<PathQueryOptionsFilterMatch> Match { get; set; }
		
		/// <summary>
		/// Values to filter on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PathQueryOptionsFilterMatch
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXACT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTIAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BEGINS_WITH = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WILDCARD_EXPRESSION = 4,
	}
	
	/// <summary>
	/// Report data range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataRange
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customEndDate")]
		public Date CustomEndDate { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customStartDate")]
		public Date CustomStartDate { get; set; }
		
		/// <summary>
		/// Report data range used to generate the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="range")]
		public System.Nullable<DataRangeRange> Range { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataRangeRange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RANGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_DATES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CURRENT_DAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREVIOUS_DAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEK_TO_DATE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTH_TO_DATE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUARTER_TO_DATE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEAR_TO_DATE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREVIOUS_WEEK = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREVIOUS_MONTH = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREVIOUS_QUARTER = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREVIOUS_YEAR = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_7_DAYS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_30_DAYS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_90_DAYS = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_365_DAYS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALL_TIME = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_14_DAYS = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_60_DAYS = 18,
	}
	
	/// <summary>
	/// Filter used to match traffic data in your report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FilterPair
	{
		
		/// <summary>
		/// Filter type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Filter value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListQueriesResponse
	{
		
		/// <summary>
		/// A token, which can be sent as page_token to retrieve the next page of queries. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of queries.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queries")]
		public Query[] Queries { get; set; }
	}
	
	/// <summary>
	/// Represents a query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Query
	{
		
		/// <summary>
		/// Query metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public QueryMetadata Metadata { get; set; }
		
		/// <summary>
		/// Parameters of a query or report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public Parameters Params { get; set; }
		
		/// <summary>
		/// Output only. Query ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryId")]
		public string QueryId { get; set; }
		
		/// <summary>
		/// Information on when and how frequently to run a query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedule")]
		public QuerySchedule Schedule { get; set; }
	}
	
	/// <summary>
	/// Query metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QueryMetadata
	{
		
		/// <summary>
		/// Report data range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataRange")]
		public DataRange DataRange { get; set; }
		
		/// <summary>
		/// Format of the generated report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public System.Nullable<QueryMetadataFormat> Format { get; set; }
		
		/// <summary>
		/// Whether to send an email notification when a report is ready. Defaults to false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sendNotification")]
		public System.Nullable<System.Boolean> SendNotification { get; set; }
		
		/// <summary>
		/// List of email addresses which are sent email notifications when the report is finished. Separate from send_notification.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shareEmailAddress")]
		public string[] ShareEmailAddress { get; set; }
		
		/// <summary>
		/// Query title. It is used to name the reports generated from this query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum QueryMetadataFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FORMAT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CSV = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		XLSX = 2,
	}
	
	/// <summary>
	/// Parameters of a query or report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Parameters
	{
		
		/// <summary>
		/// Filters used to match traffic data in your report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public FilterPair[] Filters { get; set; }
		
		/// <summary>
		/// Data is grouped by the filters listed in this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupBys")]
		public string[] GroupBys { get; set; }
		
		/// <summary>
		/// Metrics to include as columns in your report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public string[] Metrics { get; set; }
		
		/// <summary>
		/// Additional query options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public Options Options { get; set; }
		
		/// <summary>
		/// The type of the report. The type of the report will dictate what dimesions, filters, and metrics can be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ParametersType> Type { get; set; }
	}
	
	/// <summary>
	/// Additional query options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Options
	{
		
		/// <summary>
		/// Set to true and filter your report by `FILTER_INSERTION_ORDER` or `FILTER_LINE_ITEM` to include data for audience lists specifically targeted by those items.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeOnlyTargetedUserLists")]
		public System.Nullable<System.Boolean> IncludeOnlyTargetedUserLists { get; set; }
		
		/// <summary>
		/// Path Query Options for Report Options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathQueryOptions")]
		public PathQueryOptions PathQueryOptions { get; set; }
	}
	
	/// <summary>
	/// Path Query Options for Report Options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathQueryOptions
	{
		
		/// <summary>
		/// A channel grouping defines a set of rules that can be used to categorize events in a path report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelGrouping")]
		public ChannelGrouping ChannelGrouping { get; set; }
		
		/// <summary>
		/// Path Filters. There is a limit of 100 path filters that can be set per report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathFilters")]
		public PathFilter[] PathFilters { get; set; }
	}
	
	/// <summary>
	/// Path filters specify which paths to include in a report. A path is the result of combining DV360 events based on User ID to create a workflow of users' actions. When a path filter is set, the resulting report will only include paths that match the specified event at the specified position. All other paths will be excluded.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PathFilter
	{
		
		/// <summary>
		/// Filter on an event to be applied to some part of the path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="eventFilters")]
		public EventFilter[] EventFilters { get; set; }
		
		/// <summary>
		/// The position of the path the filter should match to (first, last, or any event in path).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathMatchPosition")]
		public System.Nullable<PathFilterPathMatchPosition> PathMatchPosition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PathFilterPathMatchPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH_MATCH_POSITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParametersType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPORT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_AVAILABILITY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIENCE_COMPOSITION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLOODLIGHT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YOUTUBE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GRP = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YOUTUBE_PROGRAMMATIC_GUARANTEED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REACH = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIQUE_REACH_AUDIENCE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FULL_PATH = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PATH_ATTRIBUTION = 11,
	}
	
	/// <summary>
	/// Information on when and how frequently to run a query.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class QuerySchedule
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public Date EndDate { get; set; }
		
		/// <summary>
		/// How often the query is run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequency")]
		public System.Nullable<QueryScheduleFrequency> Frequency { get; set; }
		
		/// <summary>
		/// Canonical timezone code for report generation time. Defaults to `America/New_York`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextRunTimezoneCode")]
		public string NextRunTimezoneCode { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public Date StartDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum QueryScheduleFrequency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREQUENCY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ONE_TIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAILY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEEKLY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEMI_MONTHLY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHLY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUARTERLY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEARLY = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListReportsResponse
	{
		
		/// <summary>
		/// A token, which can be sent as page_token to retrieve the next page of reports. If this field is omitted, there are no subsequent pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Retrieved reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reports")]
		public Report[] Reports { get; set; }
	}
	
	/// <summary>
	/// Represents a report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Report
	{
		
		/// <summary>
		/// Key used to identify a report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="key")]
		public ReportKey Key { get; set; }
		
		/// <summary>
		/// Report metadata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ReportMetadata Metadata { get; set; }
		
		/// <summary>
		/// Parameters of a query or report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public Parameters Params { get; set; }
	}
	
	/// <summary>
	/// Key used to identify a report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportKey
	{
		
		/// <summary>
		/// Output only. Query ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="queryId")]
		public string QueryId { get; set; }
		
		/// <summary>
		/// Output only. Report ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportId")]
		public string ReportId { get; set; }
	}
	
	/// <summary>
	/// Report metadata.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportMetadata
	{
		
		/// <summary>
		/// Output only. The path to the location in Google Cloud Storage where the report is stored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleCloudStoragePath")]
		public string GoogleCloudStoragePath { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportDataEndDate")]
		public Date ReportDataEndDate { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportDataStartDate")]
		public Date ReportDataStartDate { get; set; }
		
		/// <summary>
		/// Report status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReportStatus Status { get; set; }
	}
	
	/// <summary>
	/// Report status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReportStatus
	{
		
		/// <summary>
		/// Output only. The time when this report either completed successfully or failed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finishTime")]
		public string FinishTime { get; set; }
		
		/// <summary>
		/// The file type of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="format")]
		public QueryMetadataFormat Format { get; set; }
		
		/// <summary>
		/// Output only. The state of the report.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ReportStatusState> State { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReportStatusState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		QUEUED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DONE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 4,
	}
	
	/// <summary>
	/// Request to run a stored query to generate a report.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RunQueryRequest
	{
		
		/// <summary>
		/// Report data range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataRange")]
		public DataRange DataRange { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists queries created by the current user.
		/// Doubleclickbidmanager_queries_list queries
		/// </summary>
		/// <param name="orderBy">Name of a field used to order results. The default sorting order is ascending. To specify descending order for a field, append a " desc" suffix. For example "metadata.title desc". Sorting is only supported for the following fields: * `queryId` * `metadata.title`</param>
		/// <param name="pageSize">Maximum number of results per page. Must be between `1` and `100`. Defaults to `100` if unspecified.</param>
		/// <param name="pageToken">A page token, received from a previous list call. Provide this to retrieve the subsequent page of queries.</param>
		/// <returns>Successful response</returns>
		public async Task<ListQueriesResponse> Doubleclickbidmanager_queries_listAsync(string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "queries?orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListQueriesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a query.
		/// Doubleclickbidmanager_queries_create queries
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Query> Doubleclickbidmanager_queries_createAsync(Query requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "queries";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Query>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a query as well as the associated reports.
		/// Doubleclickbidmanager_queries_delete queries/{queryId}
		/// </summary>
		/// <param name="queryId">Required. ID of query to delete.</param>
		/// <returns>Successful response</returns>
		public async Task Doubleclickbidmanager_queries_deleteAsync(string queryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "queries/"+ (queryId==null? "" : System.Uri.EscapeDataString(queryId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a query.
		/// Doubleclickbidmanager_queries_get queries/{queryId}
		/// </summary>
		/// <param name="queryId">Required. ID of query to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<Query> Doubleclickbidmanager_queries_getAsync(string queryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "queries/"+ (queryId==null? "" : System.Uri.EscapeDataString(queryId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Query>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists reports associated with a query.
		/// Doubleclickbidmanager_queries_reports_list queries/{queryId}/reports
		/// </summary>
		/// <param name="queryId">Required. ID of the query with which the reports are associated.</param>
		/// <param name="orderBy">Name of a field used to order results. The default sorting order is ascending. To specify descending order for a field, append a " desc" suffix. For example "key.reportId desc". Sorting is only supported for the following fields: * `key.reportId`</param>
		/// <param name="pageSize">Maximum number of results per page. Must be between `1` and `100`. Defaults to `100` if unspecified.</param>
		/// <param name="pageToken">A page token, received from a previous list call. Provide this to retrieve the subsequent page of reports.</param>
		/// <returns>Successful response</returns>
		public async Task<ListReportsResponse> Doubleclickbidmanager_queries_reports_listAsync(string queryId, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "queries/"+ (queryId==null? "" : System.Uri.EscapeDataString(queryId))+"/reports&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListReportsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a report.
		/// Doubleclickbidmanager_queries_reports_get queries/{queryId}/reports/{reportId}
		/// </summary>
		/// <param name="queryId">Required. ID of the query the report is associated with.</param>
		/// <param name="reportId">Required. ID of the report to retrieve.</param>
		/// <returns>Successful response</returns>
		public async Task<Report> Doubleclickbidmanager_queries_reports_getAsync(string queryId, string reportId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "queries/"+ (queryId==null? "" : System.Uri.EscapeDataString(queryId))+"/reports/"+ (reportId==null? "" : System.Uri.EscapeDataString(reportId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Report>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Runs a stored query to generate a report.
		/// Doubleclickbidmanager_queries_run queries/{queryId}:run
		/// </summary>
		/// <param name="queryId">Required. ID of query to run.</param>
		/// <param name="synchronous">Whether the query should be run synchronously. When true, this method will not return until the query has finished running. When false or not specified, this method will return immediately.</param>
		/// <returns>Successful response</returns>
		public async Task<Report> Doubleclickbidmanager_queries_runAsync(string queryId, bool synchronous, RunQueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "queries/"+ (queryId==null? "" : System.Uri.EscapeDataString(queryId))+":run&synchronous="+synchronous;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Report>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
