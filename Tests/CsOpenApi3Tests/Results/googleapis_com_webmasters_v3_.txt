//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiDataRow
	{
		
		[System.Runtime.Serialization.DataMember(Name="clicks")]
		public System.Nullable<System.Double> Clicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ctr")]
		public System.Nullable<System.Double> Ctr { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="impressions")]
		public System.Nullable<System.Double> Impressions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="keys")]
		public string[] Keys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<System.Double> Position { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiDimensionFilter
	{
		
		[System.Runtime.Serialization.DataMember(Name="dimension")]
		public string Dimension { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public string Expression { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiDimensionFilterGroup
	{
		
		[System.Runtime.Serialization.DataMember(Name="filters")]
		public ApiDimensionFilter[] Filters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupType")]
		public string GroupType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchAnalyticsQueryRequest
	{
		
		/// <summary>
		/// [Optional; Default is "auto"] How data is aggregated. If aggregated by property, all data for the same property is aggregated; if aggregated by page, all data is aggregated by canonical URI. If you filter or group by page, choose AUTO; otherwise you can aggregate either by property or by page, depending on how you want your data calculated; see  the help documentation to learn how data is calculated differently by site versus by page.
		///
		///Note: If you group or filter by page, you cannot aggregate by property.
		///
		///If you specify any value other than AUTO, the aggregation type in the result will match the requested type, or if you request an invalid type, you will get an error. The API will never change your aggregation type if the requested type is invalid.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="aggregationType")]
		public string AggregationType { get; set; }
		
		/// <summary>
		/// [Optional] If "all" (case-insensitive), data will include fresh data. If "final" (case-insensitive) or if this parameter is omitted, the returned data will include only finalized data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataState")]
		public string DataState { get; set; }
		
		/// <summary>
		/// [Optional] Zero or more filters to apply to the dimension grouping values; for example, 'query contains "buy"' to see only data where the query string contains the substring "buy" (not case-sensitive). You can filter by a dimension without grouping by it.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensionFilterGroups")]
		public ApiDimensionFilterGroup[] DimensionFilterGroups { get; set; }
		
		/// <summary>
		/// [Optional] Zero or more dimensions to group results by. Dimensions are the group-by values in the Search Analytics page. Dimensions are combined to create a unique row key for each row. Results are grouped in the order that you supply these dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public string[] Dimensions { get; set; }
		
		/// <summary>
		/// [Required] End date of the requested date range, in YYYY-MM-DD format, in PST (UTC - 8:00). Must be greater than or equal to the start date. This value is included in the range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public string EndDate { get; set; }
		
		/// <summary>
		/// [Optional; Default is 1000] The maximum number of rows to return. Must be a number from 1 to 5,000 (inclusive).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rowLimit")]
		public System.Nullable<System.Int32> RowLimit { get; set; }
		
		/// <summary>
		/// [Optional; Default is "web"] The search type to filter for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="searchType")]
		public string SearchType { get; set; }
		
		/// <summary>
		/// [Required] Start date of the requested date range, in YYYY-MM-DD format, in PST time (UTC - 8:00). Must be less than or equal to the end date. This value is included in the range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public string StartDate { get; set; }
		
		/// <summary>
		/// [Optional; Default is 0] Zero-based index of the first row in the response. Must be a non-negative number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startRow")]
		public System.Nullable<System.Int32> StartRow { get; set; }
	}
	
	/// <summary>
	/// A list of rows, one per result, grouped by key. Metrics in each row are aggregated for all data grouped by that key either by page or property, as specified by the aggregation type parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchAnalyticsQueryResponse
	{
		
		/// <summary>
		/// How the results were aggregated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="responseAggregationType")]
		public string ResponseAggregationType { get; set; }
		
		/// <summary>
		/// A list of rows grouped by the key values in the order given in the query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rows")]
		public ApiDataRow[] Rows { get; set; }
	}
	
	/// <summary>
	/// List of sitemaps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SitemapsListResponse
	{
		
		/// <summary>
		/// Contains detailed information about a specific URL submitted as a sitemap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sitemap")]
		public WmxSitemap[] Sitemap { get; set; }
	}
	
	/// <summary>
	/// Contains detailed information about a specific URL submitted as a sitemap.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WmxSitemap
	{
		
		/// <summary>
		/// The various content types in the sitemap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public WmxSitemapContent[] Contents { get; set; }
		
		/// <summary>
		/// Number of errors in the sitemap. These are issues with the sitemap itself that need to be fixed before it can be processed correctly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public string Errors { get; set; }
		
		/// <summary>
		/// If true, the sitemap has not been processed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isPending")]
		public System.Nullable<System.Boolean> IsPending { get; set; }
		
		/// <summary>
		/// If true, the sitemap is a collection of sitemaps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isSitemapsIndex")]
		public System.Nullable<System.Boolean> IsSitemapsIndex { get; set; }
		
		/// <summary>
		/// Date & time in which this sitemap was last downloaded. Date format is in RFC 3339 format (yyyy-mm-dd).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastDownloaded")]
		public System.Nullable<System.DateTimeOffset> LastDownloaded { get; set; }
		
		/// <summary>
		/// Date & time in which this sitemap was submitted. Date format is in RFC 3339 format (yyyy-mm-dd).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastSubmitted")]
		public System.Nullable<System.DateTimeOffset> LastSubmitted { get; set; }
		
		/// <summary>
		/// The url of the sitemap.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// The type of the sitemap. For example: rssFeed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Number of warnings for the sitemap. These are generally non-critical issues with URLs in the sitemaps.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warnings")]
		public string Warnings { get; set; }
	}
	
	/// <summary>
	/// Information about the various content types in the sitemap.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WmxSitemapContent
	{
		
		/// <summary>
		/// The number of URLs from the sitemap that were indexed (of the content type).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="indexed")]
		public string Indexed { get; set; }
		
		/// <summary>
		/// The number of URLs in the sitemap (of the content type).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="submitted")]
		public string Submitted { get; set; }
		
		/// <summary>
		/// The specific type of content in this sitemap. For example: web.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// List of sites with access level information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SitesListResponse
	{
		
		/// <summary>
		/// Contains permission level information about a Search Console site. For more information, see Permissions in Search Console.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteEntry")]
		public WmxSite[] SiteEntry { get; set; }
	}
	
	/// <summary>
	/// Contains permission level information about a Search Console site. For more information, see  Permissions in Search Console.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WmxSite
	{
		
		/// <summary>
		/// The user's permission level for the site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissionLevel")]
		public string PermissionLevel { get; set; }
		
		/// <summary>
		/// The URL of the site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="siteUrl")]
		public string SiteUrl { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Lists the user's Search Console sites.
		/// Webmasters_sites_list sites
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SitesListResponse> Webmasters_sites_listAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SitesListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes a site from the set of the user's Search Console sites.
		/// Webmasters_sites_delete sites/{siteUrl}
		/// </summary>
		/// <param name="siteUrl">The URI of the property as defined in Search Console. Examples: http://www.example.com/ or android-app://com.example/ Note: for property-sets, use the URI that starts with sc-set: which is used in Search Console URLs.</param>
		/// <returns>Successful response</returns>
		public async Task Webmasters_sites_deleteAsync(string siteUrl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites/"+ (siteUrl==null? "" : System.Uri.EscapeDataString(siteUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about specific site.
		/// Webmasters_sites_get sites/{siteUrl}
		/// </summary>
		/// <param name="siteUrl">The URI of the property as defined in Search Console. Examples: http://www.example.com/ or android-app://com.example/ Note: for property-sets, use the URI that starts with sc-set: which is used in Search Console URLs.</param>
		/// <returns>Successful response</returns>
		public async Task<WmxSite> Webmasters_sites_getAsync(string siteUrl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites/"+ (siteUrl==null? "" : System.Uri.EscapeDataString(siteUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WmxSite>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds a site to the set of the user's sites in Search Console.
		/// Webmasters_sites_add sites/{siteUrl}
		/// </summary>
		/// <param name="siteUrl">The URL of the site to add.</param>
		/// <returns>Successful response</returns>
		public async Task Webmasters_sites_addAsync(string siteUrl, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites/"+ (siteUrl==null? "" : System.Uri.EscapeDataString(siteUrl));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Query your data with filters and parameters that you define. Returns zero or more rows grouped by the row keys that you define. You must define a date range of one or more days.
		/// 
		/// When date is one of the group by values, any days without data are omitted from the result list. If you need to know which days have data, issue a broad date range query grouped by date for any metric, and see which day rows are returned.
		/// Webmasters_searchanalytics_query sites/{siteUrl}/searchAnalytics/query
		/// </summary>
		/// <param name="siteUrl">The site's URL, including protocol. For example: http://www.example.com/</param>
		/// <returns>Successful response</returns>
		public async Task<SearchAnalyticsQueryResponse> Webmasters_searchanalytics_queryAsync(string siteUrl, SearchAnalyticsQueryRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites/"+ (siteUrl==null? "" : System.Uri.EscapeDataString(siteUrl))+"/searchAnalytics/query";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchAnalyticsQueryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the sitemaps-entries submitted for this site, or included in the sitemap index file (if sitemapIndex is specified in the request).
		/// Webmasters_sitemaps_list sites/{siteUrl}/sitemaps
		/// </summary>
		/// <param name="siteUrl">The site's URL, including protocol. For example: http://www.example.com/</param>
		/// <param name="sitemapIndex">A URL of a site's sitemap index. For example: http://www.example.com/sitemapindex.xml</param>
		/// <returns>Successful response</returns>
		public async Task<SitemapsListResponse> Webmasters_sitemaps_listAsync(string siteUrl, string sitemapIndex, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites/"+ (siteUrl==null? "" : System.Uri.EscapeDataString(siteUrl))+"/sitemaps&sitemapIndex=" + (sitemapIndex==null? "" : System.Uri.EscapeDataString(sitemapIndex));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SitemapsListResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a sitemap from this site.
		/// Webmasters_sitemaps_delete sites/{siteUrl}/sitemaps/{feedpath}
		/// </summary>
		/// <param name="siteUrl">The site's URL, including protocol. For example: http://www.example.com/</param>
		/// <param name="feedpath">The URL of the actual sitemap. For example: http://www.example.com/sitemap.xml</param>
		/// <returns>Successful response</returns>
		public async Task Webmasters_sitemaps_deleteAsync(string siteUrl, string feedpath, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites/"+ (siteUrl==null? "" : System.Uri.EscapeDataString(siteUrl))+"/sitemaps/"+ (feedpath==null? "" : System.Uri.EscapeDataString(feedpath));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about a specific sitemap.
		/// Webmasters_sitemaps_get sites/{siteUrl}/sitemaps/{feedpath}
		/// </summary>
		/// <param name="siteUrl">The site's URL, including protocol. For example: http://www.example.com/</param>
		/// <param name="feedpath">The URL of the actual sitemap. For example: http://www.example.com/sitemap.xml</param>
		/// <returns>Successful response</returns>
		public async Task<WmxSitemap> Webmasters_sitemaps_getAsync(string siteUrl, string feedpath, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites/"+ (siteUrl==null? "" : System.Uri.EscapeDataString(siteUrl))+"/sitemaps/"+ (feedpath==null? "" : System.Uri.EscapeDataString(feedpath));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<WmxSitemap>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submits a sitemap for a site.
		/// Webmasters_sitemaps_submit sites/{siteUrl}/sitemaps/{feedpath}
		/// </summary>
		/// <param name="siteUrl">The site's URL, including protocol. For example: http://www.example.com/</param>
		/// <param name="feedpath">The URL of the sitemap to add. For example: http://www.example.com/sitemap.xml</param>
		/// <returns>Successful response</returns>
		public async Task Webmasters_sitemaps_submitAsync(string siteUrl, string feedpath, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sites/"+ (siteUrl==null? "" : System.Uri.EscapeDataString(siteUrl))+"/sitemaps/"+ (feedpath==null? "" : System.Uri.EscapeDataString(feedpath));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
