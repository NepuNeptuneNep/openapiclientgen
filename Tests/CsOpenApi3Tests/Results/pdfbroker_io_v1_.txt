//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Set color
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ColorDto
	{
		
		/// <summary>
		/// Get or sets B value of RGB color
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="b")]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> B { get; set; }
		
		/// <summary>
		/// Get or sets G value of RGB color
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="g")]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> G { get; set; }
		
		/// <summary>
		/// Get or sets R value of RGB color
		/// Minimum: 0
		/// Maximum: 255
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="r")]
		[System.ComponentModel.DataAnnotations.Range(0, 255)]
		public System.Nullable<System.Int32> R { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorResponseDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// If any error occurs the message will be displayed in here
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusCode")]
		public System.Nullable<System.Int32> StatusCode { get; set; }
	}
	
	/// <summary>
	/// The basic request with the XSL-FO document as a Base64 encoded string with a set of resources provided with a name and the data of the resource as a Base64 encoded string.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FoRequestDto
	{
		
		/// <summary>
		/// This is the complete XSL-FO document provided using Base64 encoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foDocumentBase64String")]
		public string FoDocumentBase64String { get; set; }
		
		/// <summary>
		/// Enter meta data for pdf document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public PdfMetadataDto Metadata { get; set; }
		
		/// <summary>
		/// This is a set of key-value pairs of digital resources like images that is referenced in the XSL-FO document. It uses the filename as key and the data is provided as a Base64 encoded string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public System.Collections.Generic.Dictionary<string, string> Resources { get; set; }
	}
	
	/// <summary>
	/// Enter meta data for pdf document
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PdfMetadataDto
	{
		
		/// <summary>
		/// Pdf document author
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		/// <summary>
		/// Enables or disables adding or modifying text annotations and interactive
		///form fields.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAdd")]
		public System.Nullable<System.Boolean> EnableAdd { get; set; }
		
		/// <summary>
		/// Enables or disables copying of text and graphics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableCopy")]
		public System.Nullable<System.Boolean> EnableCopy { get; set; }
		
		/// <summary>
		/// Enables or disables modifying document contents (other than text annotations and 
		///interactive form fields).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableModify")]
		public System.Nullable<System.Boolean> EnableModify { get; set; }
		
		/// <summary>
		/// Enables or disables printing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePrinting")]
		public System.Nullable<System.Boolean> EnablePrinting { get; set; }
		
		/// <summary>
		/// Pdf document keywords
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywords")]
		public string[] Keywords { get; set; }
		
		/// <summary>
		/// Specifies the owner password that will protect full access to any generated PDF documents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerPassword")]
		public string OwnerPassword { get; set; }
		
		/// <summary>
		/// Pdf document subject
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
		
		/// <summary>
		/// Pdf document title
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Specifies the user password that will protect access to any generated PDF documents.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userPassword")]
		public string UserPassword { get; set; }
	}
	
	/// <summary>
	/// The XSL-FO transform document and xml data document as a Base64 encoded string with a set of resources provided with a name and the data of the resource as a Base64 encoded string.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FoTransformRequestDto
	{
		
		/// <summary>
		/// This is the complete XSL-FO document provided using Base64 encoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="foDocumentBase64String")]
		public string FoDocumentBase64String { get; set; }
		
		/// <summary>
		/// Enter meta data for pdf document
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public PdfMetadataDto Metadata { get; set; }
		
		/// <summary>
		/// This is a set of key-value pairs of digital resources like images that is referenced in the XSL-FO document. It uses the filename as key and the data is provided as a Base64 encoded string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public System.Collections.Generic.Dictionary<string, string> Resources { get; set; }
		
		/// <summary>
		/// This is xml data document on which the XSL-FO transform document is applied. Provided using Base64 encoding.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xmlDataDocumentBase64String")]
		public string XmlDataDocumentBase64String { get; set; }
	}
	
	/// <summary>
	/// The Font dto object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FontDto
	{
		
		/// <summary>
		/// Gets the name of the font
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Gets the size of the font
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="size")]
		public System.Nullable<System.Single> Size { get; set; }
		
		/// <summary>
		/// Font style enum representing Regular, Bold, Italic, BoldItalic
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="style")]
		public FontStyle Style { get; set; }
	}
	
	/// <summary>
	/// Font style enum representing Regular, Bold, Italic, BoldItalic
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum FontStyle
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	/// <summary>
	/// When setting the Accept-header in the request to "application/json" the image file will be return as Base64 encoded string. Note that converting data to Base64 encoded strings increases the response size with approximately 33%, if you can accept the a binary format it's better to use Accept-header "image/jpeg", "image/png" or "image/gif".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImageResponseDto
	{
		
		/// <summary>
		/// If any error occurs the message will be displayed in here
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// The Base64 encoded string that is the image file. This is a complete data uri, including media type that can be used directly as src on a img-tag e.g.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageBase64String")]
		public string ImageBase64String { get; set; }
	}
	
	/// <summary>
	/// Request to concatenate a list of Pdf documents to a single Pdf document.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PdfConcatenationRequestDto
	{
		
		/// <summary>
		/// The list of Pdf documents encoded as Base64 strings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pdfDocumentsAsBase64String")]
		public string[] PdfDocumentsAsBase64String { get; set; }
	}
	
	/// <summary>
	/// When setting the Accept-header in the request to "application/json" the content of the pdf file will be return as Base64 encoded string. Note that converting data to Base64 encoded strings increases the response size with approximately 33%, if you can accept the a binary format it's better to use Accept-header "application/pdf".
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PdfResponseDto
	{
		
		/// <summary>
		/// If any error occurs the message will be displayed in here
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// The Base64 encoded string that is the pdf file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pdfFileBase64String")]
		public string PdfFileBase64String { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PdfToImageOptions
	{
		
		/// <summary>
		/// Set the height of the output image, default value is width of source document. To scale height, and keeping proportions, do not set width;
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		/// <summary>
		/// Set the horizontal resolution, default is 96 dpi;
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="horizontalResolution")]
		public System.Nullable<System.Double> HorizontalResolution { get; set; }
		
		/// <summary>
		/// Valid options are "image/jpeg", "image/png" or "image/gif". Default is "image/png"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imageFormat")]
		public string ImageFormat { get; set; }
		
		/// <summary>
		/// Sets the quality of jpeg images, range 0 to 100, default is 75
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jpegQuality")]
		public System.Nullable<System.Int32> JpegQuality { get; set; }
		
		/// <summary>
		/// Which page of the pdf file to generate image from, default is first page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// Sets the png compression level, range 1 - 9, default is 6
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pngCompressionLevel")]
		public System.Nullable<System.Int32> PngCompressionLevel { get; set; }
		
		/// <summary>
		/// Keep the background of the image transparent. This setting is not available in JPEG-files, since transparency is not supported in the JPEG format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transparent")]
		public System.Nullable<System.Boolean> Transparent { get; set; }
		
		/// <summary>
		/// Set the vertical resolution, default is 96 dpi;
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verticalResolution")]
		public System.Nullable<System.Double> VerticalResolution { get; set; }
		
		/// <summary>
		/// Set the width of the output image, default value is width of source document. To scale width, and keeping proportions, do not set height;
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PdfToImageRequestDto
	{
		
		[System.Runtime.Serialization.DataMember(Name="options")]
		public PdfToImageOptions Options { get; set; }
		
		/// <summary>
		/// The pdf file to generate image from, as Base64 encoded string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pdfFileBase64String")]
		public string PdfFileBase64String { get; set; }
	}
	
	/// <summary>
	/// Options for writing string in pdf page;
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PdfWriteStringOptions
	{
		
		/// <summary>
		/// The Font dto object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="font")]
		public FontDto Font { get; set; }
		
		/// <summary>
		/// Get or set which page in the pdf to write on, default is first page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageNumber")]
		public System.Nullable<System.Int32> PageNumber { get; set; }
		
		/// <summary>
		/// The text to write in the pdf
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Set color
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textColor")]
		public ColorDto TextColor { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xOrigin")]
		public XOriginPoint XOrigin { get; set; }
		
		/// <summary>
		/// Get or set the X axis position on where to write string, in reference to XOrigin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="xPosition")]
		public System.Nullable<System.Single> XPosition { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yOrigin")]
		public YOriginPoint YOrigin { get; set; }
		
		/// <summary>
		/// Get or set the Y axis position on where to write string, in reference to YOrigin.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="yPosition")]
		public System.Nullable<System.Single> YPosition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum XOriginPoint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum YOriginPoint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
	}
	
	/// <summary>
	/// The request dto object to write a string on pdf page
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PdfWriteStringRequestDto
	{
		
		/// <summary>
		/// System fonts are available, but you can provide your own font file to be embedded in the pdf document. Send font as Base64 encoded string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fontFileBase64String")]
		public string FontFileBase64String { get; set; }
		
		/// <summary>
		/// Options for writing string in pdf page;
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="options")]
		public PdfWriteStringOptions Options { get; set; }
		
		/// <summary>
		/// The pdf file to add text to, as Base64 encoded string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pdfFileBase64String")]
		public string PdfFileBase64String { get; set; }
	}
	
	/// <summary>
	/// WkHtmlToPdfRequestDto is the data transfer object for generating a pdf using wkhtmltopdf;
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WkHtmlToPdfRequestDto
	{
		
		/// <summary>
		/// Base64 encoded string with html. If property Url is set, it will be used, not HtmlBase64String.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="htmlBase64String")]
		public string HtmlBase64String { get; set; }
		
		/// <summary>
		/// This is a set of key-value pairs of digital resources like images that is referenced in the HtmlBase64String document. It uses the filename including relative path as key and the data is provided as a Base64 encoded string.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public System.Collections.Generic.Dictionary<string, string> Resources { get; set; }
		
		/// <summary>
		/// The url to generate pdf from. Url has precedence over HtmlBase64String value if both are set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Command line arguments passed to wkhtmltopdf.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wkHtmlToPdfArguments")]
		public System.Collections.Generic.Dictionary<string, string> WkHtmlToPdfArguments { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Basic method to verify api is up and running
		/// ApiPdfGet api/pdf
		/// </summary>
		public async Task ApiPdfGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pdf";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Concatenate multiple pdf files into single pdf file..
		/// ApiPdfPdfconcatPost api/pdf/pdfconcat
		/// </summary>
		/// <param name="requestBody">PdfConcat Request. Add two or more pdf files and concatenate pages into single pdf document.</param>
		/// <returns>Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json</returns>
		public async Task<PdfResponseDto> ApiPdfPdfconcatPostAsync(PdfConcatenationRequestDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pdf/pdfconcat";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PdfResponseDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate an image of to provided pdf file
		/// ApiPdfPdftoimagePost api/pdf/pdftoimage
		/// </summary>
		/// <param name="requestBody">PdfToImage Request. Create an image of a page in an existing pdf document.</param>
		/// <returns>Generate an image of the provided pdf file. Either the image file directly or serialized as Json if Accept-header is set to application/json</returns>
		public async Task<ImageResponseDto> ApiPdfPdftoimagePostAsync(PdfToImageRequestDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pdf/pdftoimage";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ImageResponseDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Write text on a page in a pdf document.
		/// ApiPdfPdfwritestringPost api/pdf/pdfwritestring
		/// </summary>
		/// <param name="requestBody">PdfWriteString Request. Write string on page in pdf document</param>
		/// <returns>Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json</returns>
		public async Task<PdfResponseDto> ApiPdfPdfwritestringPostAsync(PdfWriteStringRequestDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pdf/pdfwritestring";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PdfResponseDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate pdf file from url using the excellent tool wkhtmltopdf.
		/// ApiPdfWkhtmltopdfPost api/pdf/wkhtmltopdf
		/// </summary>
		/// <param name="requestBody">WkHtmlToPdf Request. Generate pdf from html, either from url or base64 encoded html string</param>
		/// <returns>Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json</returns>
		public async Task<PdfResponseDto> ApiPdfWkhtmltopdfPostAsync(WkHtmlToPdfRequestDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pdf/wkhtmltopdf";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PdfResponseDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create pdf-file from complete XSL-FO document.
		/// ApiPdfXslfoPost api/pdf/xslfo
		/// </summary>
		/// <param name="requestBody">XSL-FO Request, the basic XSL-FO request. Post your XSL-FO document and digital resources, either as 'multipart/form-data' or 'application/json'</param>
		/// <returns>Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json</returns>
		public async Task<PdfResponseDto> ApiPdfXslfoPostAsync(FoRequestDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pdf/xslfo";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PdfResponseDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create pdf-file from transforming xml document with Xsl-Fo transform document.
		/// ApiPdfXslfowithtransformPost api/pdf/xslfowithtransform
		/// </summary>
		/// <param name="requestBody">XSL-FO Transform Request. The XSL-FO is transformed on the supplied xml data document. Post your XSL-FO transform document and xml data document aloing with your digital resources, either as 'multipart/form-data' or 'application/json'</param>
		/// <returns>Returns the newly created pdf file. Either the file directly or serialized as Json if Accept-header is set to application/json</returns>
		public async Task<PdfResponseDto> ApiPdfXslfowithtransformPostAsync(FoTransformRequestDto requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/pdf/xslfowithtransform";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PdfResponseDto>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
