//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Contains the AST for the supplied Flux query
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ASTResponse
	{
		
		/// <summary>
		/// Represents a complete package source tree.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ast")]
		public Package Ast { get; set; }
	}
	
	/// <summary>
	/// Represents a complete package source tree.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Package
	{
		
		/// <summary>
		/// Package files
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="files")]
		public File[] Files { get; set; }
		
		/// <summary>
		/// Package name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="package")]
		public string Package1 { get; set; }
		
		/// <summary>
		/// Package import path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public string Path { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents a source from a single file
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class File
	{
		
		/// <summary>
		/// List of Flux statements
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public Statement[] Body { get; set; }
		
		/// <summary>
		/// A list of package imports
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="imports")]
		public ImportDeclaration[] Imports { get; set; }
		
		/// <summary>
		/// The name of the file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Defines a package identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="package")]
		public PackageClause Package { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Statement
	{
	}
	
	/// <summary>
	/// Declares a package import
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportDeclaration
	{
		
		/// <summary>
		/// A valid Flux identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="as")]
		public Identifier As { get; set; }
		
		/// <summary>
		/// Expressions begin and end with double quote marks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="path")]
		public StringLiteral Path { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A valid Flux identifier
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Identifier
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Expressions begin and end with double quote marks
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StringLiteral
	{
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Defines a package identifier
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PackageClause
	{
		
		/// <summary>
		/// A valid Flux identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public Identifier Name { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddResourceMemberRequestBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyzeQueryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public AnalyzeQueryResponseErrors[] AnalyzeQueryResponseErrors { get; set; }
	}
	
	public class AnalyzeQueryResponseErrors
	{
		
		[System.Runtime.Serialization.DataMember(Name="character")]
		public System.Nullable<System.Int32> Character { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="column")]
		public System.Nullable<System.Int32> Column { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="line")]
		public System.Nullable<System.Int32> Line { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Used to create and directly specify the elements of an array object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArrayExpression
	{
		
		/// <summary>
		/// Elements of the array
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public Expression[] Elements { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Expression
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Authorization : AuthorizationUpdateRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public AuthorizationLinks Links { get; set; }
		
		/// <summary>
		/// Name of the org token is scoped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="org")]
		public string Org { get; set; }
		
		/// <summary>
		/// ID of org that authorization is scoped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		/// <summary>
		/// List of permissions for an auth.  An auth must have at least one Permission.
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Permission[] Permissions { get; set; }
		
		/// <summary>
		/// Passed via the Authorization Header and Token Authentication type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// Name of user that created and owns the token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
		
		/// <summary>
		/// ID of user that created and owns the token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userID")]
		public string UserID { get; set; }
	}
	
	public class AuthorizationLinks
	{
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="user")]
		public string User { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Permission
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public PermissionAction Action { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resource")]
		public Resource Resource { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PermissionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		read = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		write = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Resource
	{
		
		/// <summary>
		/// If ID is set that is a permission for a specific resource. if it is not set it is a permission for all resources of that resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Optional name of the resource if the resource has a name field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Optional name of the organization of the organization with orgID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="org")]
		public string Org { get; set; }
		
		/// <summary>
		/// If orgID is set that is a permission for all resources owned my that org. if it is not set it is a permission for all resources of that resource type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ResourceType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ResourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		authorizations = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		buckets = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dashboards = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		orgs = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sources = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		tasks = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		telegrafs = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		users = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		variables = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		scrapers = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		secrets = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		labels = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		views = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		documents = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notificationRules = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notificationEndpoints = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		checks = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dbrp = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notebooks = 18,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizationPostRequest : AuthorizationUpdateRequest
	{
		
		/// <summary>
		/// ID of org that authorization is scoped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		/// <summary>
		/// List of permissions for an auth.  An auth must have at least one Permission.
		/// Minimum items: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public Permission[] Permissions { get; set; }
		
		/// <summary>
		/// ID of user that authorization is scoped to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userID")]
		public string UserID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AuthorizationUpdateRequest
	{
		
		/// <summary>
		/// A description of the token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// If inactive the token is inactive and requests using the token will be rejected.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<AuthorizationUpdateRequestStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AuthorizationUpdateRequestStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inactive = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Authorizations
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizations")]
		public Authorization[] Authorizations1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Links
	{
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="next")]
		public string Next { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prev")]
		public string Prev { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// The viewport for a View's visualizations
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Axes
	{
		
		/// <summary>
		/// The description of a particular axis for a visualization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="x")]
		public Axis X { get; set; }
		
		/// <summary>
		/// The description of a particular axis for a visualization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="y")]
		public Axis Y { get; set; }
	}
	
	/// <summary>
	/// The description of a particular axis for a visualization.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Axis
	{
		
		/// <summary>
		/// Base represents the radix for formatting axis values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="base")]
		public System.Nullable<AxisBase> Base { get; set; }
		
		/// <summary>
		/// The extents of an axis in the form [lower, upper]. Clients determine whether bounds are to be inclusive or exclusive of their limits
		/// Minimum items: 0
		/// Maximum items: 2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bounds")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public string[] Bounds { get; set; }
		
		/// <summary>
		/// Label is a description of this Axis
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// Prefix represents a label prefix for formatting axis values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Scale is the axis formatting scale. Supported: "log", "linear"
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scale")]
		public System.Nullable<AxisScale> Scale { get; set; }
		
		/// <summary>
		/// Suffix represents a label suffix for formatting axis values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AxisBase
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="")]
		_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="10")]
		_10 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AxisScale
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		log = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		linear = 1,
	}
	
	/// <summary>
	/// A placeholder for statements for which no correct statement nodes can be created
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadStatement
	{
		
		/// <summary>
		/// Raw source text
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BandViewProperties
	{
		
		/// <summary>
		/// The viewport for a View's visualizations
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="axes")]
		public Axes Axes { get; set; }
		
		/// <summary>
		/// Colors define color encoding of data into a visualization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public DashboardColor[] Colors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generateXAxisTicks")]
		public string[] GenerateXAxisTicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generateYAxisTicks")]
		public string[] GenerateYAxisTicks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="geom")]
		public BandViewPropertiesGeom Geom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hoverDimension")]
		public System.Nullable<BandViewPropertiesHoverDimension> HoverDimension { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendColorizeRows")]
		public System.Nullable<System.Boolean> LegendColorizeRows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendHide")]
		public System.Nullable<System.Boolean> LegendHide { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendOpacity")]
		public System.Nullable<System.Single> LegendOpacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendOrientationThreshold")]
		public System.Nullable<System.Int32> LegendOrientationThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lowerColumn")]
		public string LowerColumn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mainColumn")]
		public string MainColumn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queries")]
		public DashboardQuery[] Queries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public BandViewPropertiesShape Shape { get; set; }
		
		/// <summary>
		/// If true, will display note when empty
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="showNoteWhenEmpty")]
		public bool ShowNoteWhenEmpty { get; set; }
		
		/// <summary>
		/// StaticLegend represents the options specific to the static legend
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticLegend")]
		public StaticLegend StaticLegend { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeFormat")]
		public string TimeFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public BandViewPropertiesType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="upperColumn")]
		public string UpperColumn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xColumn")]
		public string XColumn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTickStart")]
		public System.Nullable<System.Single> XTickStart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTickStep")]
		public System.Nullable<System.Single> XTickStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTotalTicks")]
		public System.Nullable<System.Int32> XTotalTicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yColumn")]
		public string YColumn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yTickStart")]
		public System.Nullable<System.Single> YTickStart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yTickStep")]
		public System.Nullable<System.Single> YTickStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yTotalTicks")]
		public System.Nullable<System.Int32> YTotalTicks { get; set; }
	}
	
	/// <summary>
	/// Defines an encoding of data value into color space.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DashboardColor
	{
		
		/// <summary>
		/// The hex number of the color
		/// Required
		/// Max length: 7
		/// Min length: 7
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hex")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(7)]
		public string Hex { get; set; }
		
		/// <summary>
		/// The unique ID of the view color.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The user-facing name of the hex color.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Type is how the color is used.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DashboardColorType Type { get; set; }
		
		/// <summary>
		/// The data value mapped to this color.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public float Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DashboardColorType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		min = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		max = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		threshold = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		scale = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		background = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BandViewPropertiesGeom
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		line = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		step = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stacked = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bar = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		monotoneX = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BandViewPropertiesHoverDimension
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		auto = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		x = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		y = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xy = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DashboardQuery
	{
		
		[System.Runtime.Serialization.DataMember(Name="builderConfig")]
		public BuilderConfig BuilderConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editMode")]
		public System.Nullable<DashboardQueryEditMode> EditMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The text of the Flux query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuilderConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="aggregateWindow")]
		public BuilderConfigAggregateWindow AggregateWindow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buckets")]
		public string[] Buckets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="functions")]
		public BuilderFunctionsType[] Functions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public BuilderTagsType[] Tags { get; set; }
	}
	
	public class BuilderConfigAggregateWindow
	{
		
		[System.Runtime.Serialization.DataMember(Name="fillValues")]
		public System.Nullable<System.Boolean> FillValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period")]
		public string Period { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuilderFunctionsType
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuilderTagsType
	{
		
		[System.Runtime.Serialization.DataMember(Name="aggregateFunctionType")]
		public System.Nullable<BuilderTagsTypeAggregateFunctionType> AggregateFunctionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BuilderTagsTypeAggregateFunctionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		filter = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DashboardQueryEditMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		builder = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		advanced = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BandViewPropertiesShape
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chronograf-v2")]
		chronografMinusv2 = 0,
	}
	
	/// <summary>
	/// StaticLegend represents the options specific to the static legend
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StaticLegend
	{
		
		[System.Runtime.Serialization.DataMember(Name="colorizeRows")]
		public System.Nullable<System.Boolean> ColorizeRows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="heightRatio")]
		public System.Nullable<System.Single> HeightRatio { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hide")]
		public System.Nullable<System.Boolean> Hide { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="opacity")]
		public System.Nullable<System.Single> Opacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orientationThreshold")]
		public System.Nullable<System.Int32> OrientationThreshold { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="valueAxis")]
		public string ValueAxis { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="widthRatio")]
		public System.Nullable<System.Single> WidthRatio { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BandViewPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		band = 0,
	}
	
	/// <summary>
	/// uses binary operators to act on two operands in an expression
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BinaryExpression
	{
		
		[System.Runtime.Serialization.DataMember(Name="left")]
		public Expression Left { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="right")]
		public Expression Right { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A set of statements
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Block
	{
		
		/// <summary>
		/// Block body
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public Statement[] Body { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents boolean values
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BooleanLiteral
	{
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Boolean> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Bucket
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public BucketLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		/// <summary>
		/// Rules to expire or retain data.  No rules means data never expires.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="retentionRules")]
		public RetentionRule[] RetentionRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rp")]
		public string Rp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaType")]
		public System.Nullable<BucketSchemaType> SchemaType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<BucketType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Label
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		/// <summary>
		/// Key/Value pairs associated with this label. Keys can be removed by sending an update with an empty value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
	}
	
	public class BucketLinks
	{
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string Labels { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="org")]
		public string Org { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owners")]
		public string Owners { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="write")]
		public string Write { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RetentionRule
	{
		
		/// <summary>
		/// Duration in seconds for how long data will be kept in the database. 0 means infinite.
		/// Required
		/// Minimum: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="everySeconds")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public long EverySeconds { get; set; }
		
		/// <summary>
		/// Shard duration measured in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shardGroupDurationSeconds")]
		public System.Nullable<System.Int64> ShardGroupDurationSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(RetentionRuleType.expire)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public RetentionRuleType Type { get; set; } = RetentionRuleType.expire;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RetentionRuleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		expire = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BucketSchemaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="implicit")]
		_implicit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="explicit")]
		_explicit = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BucketType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		system = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Buckets
	{
		
		[System.Runtime.Serialization.DataMember(Name="buckets")]
		public Bucket[] Buckets1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum BuilderAggregateFunctionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		filter = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group = 1,
	}
	
	/// <summary>
	/// Declares a builtin identifier and its type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BuiltinStatement
	{
		
		/// <summary>
		/// A valid Flux identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public Identifier Id { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents a function call
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CallExpression
	{
		
		/// <summary>
		/// Function arguments
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public Expression[] Arguments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="callee")]
		public Expression Callee { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Cell
	{
		
		[System.Runtime.Serialization.DataMember(Name="h")]
		public System.Nullable<System.Int32> H { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CellLinks Links { get; set; }
		
		/// <summary>
		/// The reference to a view from the views API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewID")]
		public string ViewID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="w")]
		public System.Nullable<System.Int32> W { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="x")]
		public System.Nullable<System.Int32> X { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="y")]
		public System.Nullable<System.Int32> Y { get; set; }
	}
	
	public class CellLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="view")]
		public string View { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CellUpdate
	{
		
		[System.Runtime.Serialization.DataMember(Name="h")]
		public System.Nullable<System.Int32> H { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="w")]
		public System.Nullable<System.Int32> W { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="x")]
		public System.Nullable<System.Int32> X { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="y")]
		public System.Nullable<System.Int32> Y { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CellWithViewProperties
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Check
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// An optional description of the check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastRunError")]
		public string LastRunError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastRunStatus")]
		public System.Nullable<CheckBaseLastRunStatus> LastRunStatus { get; set; }
		
		/// <summary>
		/// Timestamp of latest scheduled, completed run, RFC3339.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestCompleted")]
		public System.Nullable<System.DateTimeOffset> LatestCompleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public CheckBaseLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID of the organization that owns this check.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		/// <summary>
		/// The ID of creator used to create this check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerID")]
		public string OwnerID { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public DashboardQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizationUpdateRequestStatus Status { get; set; }
		
		/// <summary>
		/// The ID of the task associated with this check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskID")]
		public string TaskID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CheckBaseLastRunStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		success = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		canceled = 2,
	}
	
	public class CheckBaseLinks
	{
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string Labels { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owners")]
		public string Owners { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckDiscriminator
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckPatch
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizationUpdateRequestStatus Status { get; set; }
	}
	
	/// <summary>
	/// The state to record if check matches a criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CheckStatusLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRIT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CheckViewProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="check")]
		public Check Check { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="checkID")]
		public string CheckID { get; set; }
		
		/// <summary>
		/// Colors define color encoding of data into a visualization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public DashboardColor[] Colors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendColorizeRows")]
		public System.Nullable<System.Boolean> LegendColorizeRows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendHide")]
		public System.Nullable<System.Boolean> LegendHide { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendOpacity")]
		public System.Nullable<System.Single> LegendOpacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendOrientationThreshold")]
		public System.Nullable<System.Int32> LegendOrientationThreshold { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queries")]
		public DashboardQuery[] Queries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public CheckViewPropertiesShape Shape { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CheckViewPropertiesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CheckViewPropertiesShape
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chronograf-v2")]
		chronografMinusv2 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CheckViewPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		check = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Checks
	{
		
		[System.Runtime.Serialization.DataMember(Name="checks")]
		public Check[] Checks1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
	}
	
	/// <summary>
	/// Selects one of two expressions, `Alternate` or `Consequent`, depending on a third boolean expression, `Test`
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConditionalExpression
	{
		
		[System.Runtime.Serialization.DataMember(Name="alternate")]
		public Expression Alternate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="consequent")]
		public Expression Consequent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="test")]
		public Expression Test { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConstantVariableProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ConstantVariablePropertiesType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ConstantVariablePropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		constant = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateCell
	{
		
		[System.Runtime.Serialization.DataMember(Name="h")]
		public System.Nullable<System.Int32> H { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Makes a copy of the provided view.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usingView")]
		public string UsingView { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="w")]
		public System.Nullable<System.Int32> W { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="x")]
		public System.Nullable<System.Int32> X { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="y")]
		public System.Nullable<System.Int32> Y { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDashboardRequest
	{
		
		/// <summary>
		/// The user-facing description of the dashboard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The user-facing name of the dashboard.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The ID of the organization that owns the dashboard.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomCheck : CheckBase
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public CustomCheckType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CustomCheckType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custom = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBRP
	{
		
		/// <summary>
		/// the bucket ID used as target for the translation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketID")]
		public string BucketID { get; set; }
		
		/// <summary>
		/// InfluxDB v1 database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database")]
		public string Database { get; set; }
		
		/// <summary>
		/// Specify if this mapping represents the default retention policy for the database specificed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Boolean> Default { get; set; }
		
		/// <summary>
		/// the mapping identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		/// <summary>
		/// the organization that owns this mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="org")]
		public string Org { get; set; }
		
		/// <summary>
		/// the organization ID that owns this mapping.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		/// <summary>
		/// InfluxDB v1 retention policy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retention_policy")]
		public string Retention_policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBRPUpdate
	{
		
		/// <summary>
		/// InfluxDB v1 database
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database")]
		public string Database { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Boolean> Default { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		/// <summary>
		/// InfluxDB v1 retention policy
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retention_policy")]
		public string Retention_policy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DBRPs
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public DBRP[] Content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Dashboard
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DashboardWithViewProperties
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Dashboards
	{
		
		[System.Runtime.Serialization.DataMember(Name="dashboards")]
		public Dashboard[] Dashboards1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
	}
	
	/// <summary>
	/// Represents an instant in time with nanosecond precision using the syntax of golang's RFC3339 Nanosecond variant
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DateTimeLiteral
	{
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.DateTimeOffset> Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeadmanCheck : CheckBase
	{
		
		/// <summary>
		/// Check repetition interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="every")]
		public string Every { get; set; }
		
		/// <summary>
		/// The state to record if check matches a criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public CheckStatusLevel Level { get; set; }
		
		/// <summary>
		/// Duration to delay after the schedule, before executing check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
		
		/// <summary>
		/// If only zero values reported since time, trigger an alert
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportZero")]
		public System.Nullable<System.Boolean> ReportZero { get; set; }
		
		/// <summary>
		/// String duration for time that a series is considered stale and should not trigger deadman.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staleTime")]
		public string StaleTime { get; set; }
		
		/// <summary>
		/// The template used to generate and write a status message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessageTemplate")]
		public string StatusMessageTemplate { get; set; }
		
		/// <summary>
		/// List of tags to write to each status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public DeadmanCheckTags[] DeadmanCheckTags { get; set; }
		
		/// <summary>
		/// String duration before deadman triggers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeSince")]
		public string TimeSince { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public DeadmanCheckType Type { get; set; }
	}
	
	public class DeadmanCheckTags
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DeadmanCheckType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		deadman = 0,
	}
	
	/// <summary>
	/// Indicates whether decimal places should be enforced, and how many digits it should show.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DecimalPlaces
	{
		
		/// <summary>
		/// The number of digits after decimal to display
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digits")]
		public System.Nullable<System.Int32> Digits { get; set; }
		
		/// <summary>
		/// Indicates whether decimal point setting should be enforced
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isEnforced")]
		public System.Nullable<System.Boolean> IsEnforced { get; set; }
	}
	
	/// <summary>
	/// The delete predicate request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePredicateRequest
	{
		
		/// <summary>
		/// InfluxQL-like delete statement
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predicate")]
		public string Predicate { get; set; }
		
		/// <summary>
		/// RFC3339Nano
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.DateTimeOffset Start { get; set; }
		
		/// <summary>
		/// RFC3339Nano
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stop")]
		public System.DateTimeOffset Stop { get; set; }
	}
	
	/// <summary>
	/// Dialect are options to change the default CSV output format; https://www.w3.org/TR/2015/REC-tabular-metadata-20151217/#dialect-descriptions
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Dialect
	{
		
		/// <summary>
		/// https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="annotations")]
		public string[] Annotations { get; set; }
		
		/// <summary>
		/// Character prefixed to comment strings
		/// Max length: 1
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DefaultValue("#")]
		[System.Runtime.Serialization.DataMember(Name="commentPrefix")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string CommentPrefix { get; set; } = "#";
		
		/// <summary>
		/// Format of timestamps
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateTimeFormat")]
		public System.Nullable<DialectDateTimeFormat> DateTimeFormat { get; set; }
		
		/// <summary>
		/// Separator between cells; the default is ,
		/// Max length: 1
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DefaultValue(",")]
		[System.Runtime.Serialization.DataMember(Name="delimiter")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1)]
		public string Delimiter { get; set; } = ",";
		
		/// <summary>
		/// If true, the results will contain a header row
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public System.Nullable<System.Boolean> Header { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DialectDateTimeFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RFC3339 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RFC3339Nano = 1,
	}
	
	/// <summary>
	/// Used to create and directly specify the elements of a dictionary
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictExpression
	{
		
		/// <summary>
		/// Elements of the dictionary
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elements")]
		public DictItem[] Elements { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A key/value pair in a dictionary
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DictItem
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public Expression Key { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="val")]
		public Expression Val { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Document
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public DocumentLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public DocumentMeta Meta { get; set; }
	}
	
	public class DocumentLinks
	{
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateID")]
		public string TemplateID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentCreate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// An array of label IDs to be added as labels to the document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string[] Labels { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public DocumentMeta Meta { get; set; }
		
		/// <summary>
		/// The organization Name. Specify either `orgID` or `org`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="org")]
		public string Org { get; set; }
		
		/// <summary>
		/// The organization Name. Specify either `orgID` or `org`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentListEntry
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public DocumentListEntryLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public DocumentMeta Meta { get; set; }
	}
	
	public class DocumentListEntryLinks
	{
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DocumentUpdate
	{
		
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public DocumentMeta Meta { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Documents
	{
		
		[System.Runtime.Serialization.DataMember(Name="documents")]
		public DocumentListEntry[] Documents1 { get; set; }
	}
	
	/// <summary>
	/// A pair consisting of length of time and the unit of time measured. It is the atomic unit from which all duration literals are composed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Duration
	{
		
		[System.Runtime.Serialization.DataMember(Name="magnitude")]
		public System.Nullable<System.Int32> Magnitude { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unit")]
		public string Unit { get; set; }
	}
	
	/// <summary>
	/// Represents the elapsed time between two instants as an int64 nanosecond count with syntax of golang's time.Duration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DurationLiteral
	{
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// Duration values
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="values")]
		public Duration[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Error
	{
		
		/// <summary>
		/// code is the machine-readable error code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public ErrorCode Code { get; set; }
		
		/// <summary>
		/// err is a stack of errors that occurred during processing of the request. Useful for debugging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="err")]
		public string Err { get; set; }
		
		/// <summary>
		/// message is a human-readable message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// op describes the logical code operation during error. Useful for debugging.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="op")]
		public string Op { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="internal error")]
		internal_error = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not found")]
		not_found = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		conflict = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invalid = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unprocessable entity")]
		unprocessable_entity = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="empty value")]
		empty_value = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unavailable = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		forbidden = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="too many requests")]
		too_many_requests = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unauthorized = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="method not allowed")]
		method_not_allowed = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="request too large")]
		request_too_large = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="unsupported media type")]
		unsupported_media_type = 12,
	}
	
	/// <summary>
	/// May consist of an expression that does not return a value and is executed solely for its side-effects
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExpressionStatement
	{
		
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public Expression Expression { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Field
	{
		
		/// <summary>
		/// Alias overrides the field name in the returned response.  Applies only if type is `func`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alias")]
		public string Alias { get; set; }
		
		/// <summary>
		/// Args are the arguments to the function
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="args")]
		public Field[] Args { get; set; }
		
		/// <summary>
		/// `type` describes the field type. `func` is a function. `field` is a field reference.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<FieldType> Type { get; set; }
		
		/// <summary>
		/// value is the value of the field.  Meaning of the value is implied by the `type` key
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FieldType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		func = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		field = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		integer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		number = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		regex = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wildcard = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Flags
	{
	}
	
	/// <summary>
	/// Represents floating point numbers according to the double representations defined by the IEEE-754-1985
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FloatLiteral
	{
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Double> Value { get; set; }
	}
	
	/// <summary>
	/// Rendered flux that backs the check or notification.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FluxResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="flux")]
		public string Flux { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FluxSuggestion
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="params")]
		public System.Collections.Generic.Dictionary<string, string> Params { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FluxSuggestions
	{
		
		[System.Runtime.Serialization.DataMember(Name="funcs")]
		public FluxSuggestion[] Funcs { get; set; }
	}
	
	/// <summary>
	/// Function expression
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FunctionExpression
	{
		
		[System.Runtime.Serialization.DataMember(Name="body")]
		public Node Body { get; set; }
		
		/// <summary>
		/// Function parameters
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public Property[] Params { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// The value associated with a key
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Property
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public PropertyKey Key { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Expression Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GaugeViewProperties
	{
		
		/// <summary>
		/// Colors define color encoding of data into a visualization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public DashboardColor[] Colors { get; set; }
		
		/// <summary>
		/// Indicates whether decimal places should be enforced, and how many digits it should show.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decimalPlaces")]
		public DecimalPlaces DecimalPlaces { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queries")]
		public DashboardQuery[] Queries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public GaugeViewPropertiesShape Shape { get; set; }
		
		/// <summary>
		/// If true, will display note when empty
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="showNoteWhenEmpty")]
		public bool ShowNoteWhenEmpty { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tickPrefix")]
		public string TickPrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tickSuffix")]
		public string TickSuffix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GaugeViewPropertiesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GaugeViewPropertiesShape
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chronograf-v2")]
		chronografMinusv2 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GaugeViewPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gauge = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GeoCircleViewLayer : GeoViewLayerProperties
	{
		
		/// <summary>
		/// The description of a particular axis for a visualization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colorDimension")]
		public Axis ColorDimension { get; set; }
		
		/// <summary>
		/// Circle color field
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colorField")]
		public string ColorField { get; set; }
		
		/// <summary>
		/// Colors define color encoding of data into a visualization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public DashboardColor[] Colors { get; set; }
		
		/// <summary>
		/// Interpolate circle color based on displayed value
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interpolateColors")]
		public System.Nullable<System.Boolean> InterpolateColors { get; set; }
		
		/// <summary>
		/// Maximum radius size in pixels
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="radius")]
		public System.Nullable<System.Int32> Radius { get; set; }
		
		/// <summary>
		/// The description of a particular axis for a visualization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="radiusDimension")]
		public Axis RadiusDimension { get; set; }
		
		/// <summary>
		/// Radius field
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="radiusField")]
		public string RadiusField { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GeoHeatMapViewLayer : GeoViewLayerProperties
	{
		
		/// <summary>
		/// Blur for heatmap points
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="blur")]
		public int Blur { get; set; }
		
		/// <summary>
		/// Colors define color encoding of data into a visualization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public DashboardColor[] Colors { get; set; }
		
		/// <summary>
		/// The description of a particular axis for a visualization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intensityDimension")]
		public Axis IntensityDimension { get; set; }
		
		/// <summary>
		/// Intensity field
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="intensityField")]
		public string IntensityField { get; set; }
		
		/// <summary>
		/// Radius size in pixels
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="radius")]
		public int Radius { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GeoPointMapViewLayer : GeoViewLayerProperties
	{
		
		/// <summary>
		/// The description of a particular axis for a visualization.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colorDimension")]
		public Axis ColorDimension { get; set; }
		
		/// <summary>
		/// Marker color field
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colorField")]
		public string ColorField { get; set; }
		
		/// <summary>
		/// Colors define color encoding of data into a visualization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public DashboardColor[] Colors { get; set; }
		
		/// <summary>
		/// Cluster close markers together
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isClustered")]
		public System.Nullable<System.Boolean> IsClustered { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GeoTrackMapViewLayer : GeoViewLayerProperties
	{
		
		/// <summary>
		/// Colors define color encoding of data into a visualization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public DashboardColor[] Colors { get; set; }
		
		/// <summary>
		/// Assign different colors to different tracks
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="randomColors")]
		public System.Nullable<System.Boolean> RandomColors { get; set; }
		
		/// <summary>
		/// Speed of the track animation
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speed")]
		public System.Nullable<System.Int32> Speed { get; set; }
		
		/// <summary>
		/// Width of the track
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackWidth")]
		public System.Nullable<System.Int32> TrackWidth { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GeoViewLayer
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GeoViewLayerProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GeoViewLayerPropertiesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GeoViewLayerPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		heatmap = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		circleMap = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pointMap = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		trackMap = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GeoViewProperties
	{
		
		/// <summary>
		/// If true, map zoom and pan controls are enabled on the dashboard view
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowPanAndZoom")]
		public bool AllowPanAndZoom { get; set; } = true;
		
		/// <summary>
		/// Coordinates of the center of the map
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="center")]
		public GeoViewPropertiesCenter Center { get; set; }
		
		/// <summary>
		/// Colors define color encoding of data into a visualization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public DashboardColor[] Colors { get; set; }
		
		/// <summary>
		/// If true, search results get automatically regroupped so that lon,lat and value are treated as columns
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(true)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detectCoordinateFields")]
		public bool DetectCoordinateFields { get; set; } = true;
		
		/// <summary>
		/// List of individual layers shown in the map
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="layers")]
		public GeoViewLayer[] Layers { get; set; }
		
		/// <summary>
		/// Define map type - regular, satellite etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mapStyle")]
		public string MapStyle { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queries")]
		public DashboardQuery[] Queries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public GeoViewPropertiesShape Shape { get; set; }
		
		/// <summary>
		/// If true, will display note when empty
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="showNoteWhenEmpty")]
		public bool ShowNoteWhenEmpty { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GeoViewPropertiesType Type { get; set; }
		
		/// <summary>
		/// Zoom level used for initial display of the map
		/// Required
		/// Minimum: 1
		/// Maximum: 28
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zoom")]
		[System.ComponentModel.DataAnnotations.Range(1, 28)]
		public double Zoom { get; set; }
	}
	
	public class GeoViewPropertiesCenter
	{
		
		/// <summary>
		/// Latitude of the center of the map
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public double Lat { get; set; }
		
		/// <summary>
		/// Longitude of the center of the map
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public double Lon { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GeoViewPropertiesShape
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chronograf-v2")]
		chronografMinusv2 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GeoViewPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		geo = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GreaterThreshold : ThresholdBase
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public GreaterThresholdType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public float Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GreaterThresholdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		greater = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HTTPNotificationEndpoint
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HTTPNotificationRule : NotificationRuleBase
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public HTTPNotificationRuleType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HTTPNotificationRuleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		http = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HTTPNotificationRuleBase
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public HTTPNotificationRuleType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HealthCheck
	{
		
		[System.Runtime.Serialization.DataMember(Name="checks")]
		public HealthCheck[] Checks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commit")]
		public string Commit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public HealthCheckStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HealthCheckStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pass = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		fail = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HeatmapViewProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="binSize")]
		public double BinSize { get; set; }
		
		/// <summary>
		/// Colors define color encoding of data into a visualization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public string[] Colors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generateXAxisTicks")]
		public string[] GenerateXAxisTicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generateYAxisTicks")]
		public string[] GenerateYAxisTicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendColorizeRows")]
		public System.Nullable<System.Boolean> LegendColorizeRows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendHide")]
		public System.Nullable<System.Boolean> LegendHide { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendOpacity")]
		public System.Nullable<System.Single> LegendOpacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendOrientationThreshold")]
		public System.Nullable<System.Int32> LegendOrientationThreshold { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queries")]
		public DashboardQuery[] Queries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public HeatmapViewPropertiesShape Shape { get; set; }
		
		/// <summary>
		/// If true, will display note when empty
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="showNoteWhenEmpty")]
		public bool ShowNoteWhenEmpty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeFormat")]
		public string TimeFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public HeatmapViewPropertiesType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xAxisLabel")]
		public string XAxisLabel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xColumn")]
		public string XColumn { get; set; }
		
		/// <summary>
		/// Required
		/// Maximum items: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xDomain")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public double[] XDomain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xPrefix")]
		public string XPrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xSuffix")]
		public string XSuffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTickStart")]
		public System.Nullable<System.Single> XTickStart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTickStep")]
		public System.Nullable<System.Single> XTickStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTotalTicks")]
		public System.Nullable<System.Int32> XTotalTicks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yAxisLabel")]
		public string YAxisLabel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yColumn")]
		public string YColumn { get; set; }
		
		/// <summary>
		/// Required
		/// Maximum items: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yDomain")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public double[] YDomain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yPrefix")]
		public string YPrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ySuffix")]
		public string YSuffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yTickStart")]
		public System.Nullable<System.Single> YTickStart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yTickStep")]
		public System.Nullable<System.Single> YTickStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yTotalTicks")]
		public System.Nullable<System.Int32> YTotalTicks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HeatmapViewPropertiesShape
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chronograf-v2")]
		chronografMinusv2 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HeatmapViewPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		heatmap = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class HistogramViewProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="binCount")]
		public int BinCount { get; set; }
		
		/// <summary>
		/// Colors define color encoding of data into a visualization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public DashboardColor[] Colors { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fillColumns")]
		public string[] FillColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendColorizeRows")]
		public System.Nullable<System.Boolean> LegendColorizeRows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendHide")]
		public System.Nullable<System.Boolean> LegendHide { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendOpacity")]
		public System.Nullable<System.Single> LegendOpacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendOrientationThreshold")]
		public System.Nullable<System.Int32> LegendOrientationThreshold { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="position")]
		public HistogramViewPropertiesPosition Position { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queries")]
		public DashboardQuery[] Queries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public HistogramViewPropertiesShape Shape { get; set; }
		
		/// <summary>
		/// If true, will display note when empty
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="showNoteWhenEmpty")]
		public bool ShowNoteWhenEmpty { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public HistogramViewPropertiesType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xAxisLabel")]
		public string XAxisLabel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xColumn")]
		public string XColumn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xDomain")]
		public double[] XDomain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HistogramViewPropertiesPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		overlaid = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stacked = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HistogramViewPropertiesShape
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chronograf-v2")]
		chronografMinusv2 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum HistogramViewPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		histogram = 0,
	}
	
	/// <summary>
	/// Represents indexing into an array
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IndexExpression
	{
		
		[System.Runtime.Serialization.DataMember(Name="array")]
		public Expression Array { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="index")]
		public Expression Index { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Query influx using the InfluxQL language
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InfluxQLQuery
	{
		
		/// <summary>
		/// Bucket is to be used instead of the database and retention policy specified in the InfluxQL query.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// InfluxQL query execute.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// The type of query. Must be "influxql".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<InfluxQLQueryType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InfluxQLQueryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		influxql = 0,
	}
	
	/// <summary>
	/// Represents integer numbers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IntegerLiteral
	{
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IsOnboarding
	{
		
		/// <summary>
		/// True means that the influxdb instance has NOT had initial setup; false means that the database has been setup.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowed")]
		public System.Nullable<System.Boolean> Allowed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelCreateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		/// <summary>
		/// Key/Value pairs associated with this label. Keys can be removed by sending an update with an empty value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelMapping
	{
		
		[System.Runtime.Serialization.DataMember(Name="labelID")]
		public string LabelID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public Label Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelUpdate
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Key/Value pairs associated with this label. Keys can be removed by sending an update with an empty value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public System.Collections.Generic.Dictionary<string, string> Properties { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LabelsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
	}
	
	/// <summary>
	/// Flux query to be analyzed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LanguageRequest
	{
		
		/// <summary>
		/// Flux query script to be analyzed
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LesserThreshold : ThresholdBase
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public LesserThresholdType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public float Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LesserThresholdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		lesser = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LinePlusSingleStatProperties
	{
		
		/// <summary>
		/// The viewport for a View's visualizations
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="axes")]
		public Axes Axes { get; set; }
		
		/// <summary>
		/// Colors define color encoding of data into a visualization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public DashboardColor[] Colors { get; set; }
		
		/// <summary>
		/// Indicates whether decimal places should be enforced, and how many digits it should show.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decimalPlaces")]
		public DecimalPlaces DecimalPlaces { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generateXAxisTicks")]
		public string[] GenerateXAxisTicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generateYAxisTicks")]
		public string[] GenerateYAxisTicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hoverDimension")]
		public BandViewPropertiesHoverDimension HoverDimension { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendColorizeRows")]
		public System.Nullable<System.Boolean> LegendColorizeRows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendHide")]
		public System.Nullable<System.Boolean> LegendHide { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendOpacity")]
		public System.Nullable<System.Single> LegendOpacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendOrientationThreshold")]
		public System.Nullable<System.Int32> LegendOrientationThreshold { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="position")]
		public HistogramViewPropertiesPosition Position { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queries")]
		public DashboardQuery[] Queries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shadeBelow")]
		public System.Nullable<System.Boolean> ShadeBelow { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public LinePlusSingleStatPropertiesShape Shape { get; set; }
		
		/// <summary>
		/// If true, will display note when empty
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="showNoteWhenEmpty")]
		public bool ShowNoteWhenEmpty { get; set; }
		
		/// <summary>
		/// StaticLegend represents the options specific to the static legend
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticLegend")]
		public StaticLegend StaticLegend { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeFormat")]
		public string TimeFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public LinePlusSingleStatPropertiesType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xColumn")]
		public string XColumn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTickStart")]
		public System.Nullable<System.Single> XTickStart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTickStep")]
		public System.Nullable<System.Single> XTickStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTotalTicks")]
		public System.Nullable<System.Int32> XTotalTicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yColumn")]
		public string YColumn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yTickStart")]
		public System.Nullable<System.Single> YTickStart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yTickStep")]
		public System.Nullable<System.Single> YTickStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yTotalTicks")]
		public System.Nullable<System.Int32> YTotalTicks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LinePlusSingleStatPropertiesShape
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chronograf-v2")]
		chronografMinusv2 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LinePlusSingleStatPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="line-plus-single-stat")]
		lineMinusplusMinussingleMinusstat = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LineProtocolError
	{
		
		/// <summary>
		/// Code is the machine-readable error code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public LineProtocolErrorCode Code { get; set; }
		
		/// <summary>
		/// Err is a stack of errors that occurred during processing of the request. Useful for debugging.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="err")]
		public string Err { get; set; }
		
		/// <summary>
		/// First line within sent body containing malformed data
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line")]
		public System.Nullable<System.Int32> Line { get; set; }
		
		/// <summary>
		/// Message is a human-readable message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// Op describes the logical code operation during error. Useful for debugging.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="op")]
		public string Op { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LineProtocolErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="internal error")]
		internal_error = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="not found")]
		not_found = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		conflict = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invalid = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="empty value")]
		empty_value = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unavailable = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LineProtocolLengthError
	{
		
		/// <summary>
		/// Code is the machine-readable error code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="code")]
		public LineProtocolLengthErrorCode Code { get; set; }
		
		/// <summary>
		/// Max length in bytes for a body of line-protocol.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="maxLength")]
		public int MaxLength { get; set; }
		
		/// <summary>
		/// Message is a human-readable message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LineProtocolLengthErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		invalid = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LogEvent
	{
		
		/// <summary>
		/// A description of the event that occurred.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
		
		/// <summary>
		/// the ID of the task that logged
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runID")]
		public string RunID { get; set; }
		
		/// <summary>
		/// Time event occurred, RFC3339Nano.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.DateTimeOffset> Time { get; set; }
	}
	
	/// <summary>
	/// Represents the rule conditions that collectively evaluate to either true or false
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LogicalExpression
	{
		
		[System.Runtime.Serialization.DataMember(Name="left")]
		public Expression Left { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="right")]
		public Expression Right { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Logs
	{
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public LogEvent[] Events { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MapVariableProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<MapVariablePropertiesType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public System.Collections.Generic.Dictionary<string, string> Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MapVariablePropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		map = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MarkdownViewProperties
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public MarkdownViewPropertiesShape Shape { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public MarkdownViewPropertiesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MarkdownViewPropertiesShape
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chronograf-v2")]
		chronografMinusv2 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MarkdownViewPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		markdown = 0,
	}
	
	/// <summary>
	/// Object property assignment
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberAssignment
	{
		
		[System.Runtime.Serialization.DataMember(Name="init")]
		public Expression Init { get; set; }
		
		/// <summary>
		/// Represents accessing a property of an object
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="member")]
		public MemberExpression Member { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents accessing a property of an object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MemberExpression
	{
		
		[System.Runtime.Serialization.DataMember(Name="object")]
		public Expression Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="property")]
		public PropertyKey Property { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MosaicViewProperties
	{
		
		/// <summary>
		/// Colors define color encoding of data into a visualization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public string[] Colors { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fillColumns")]
		public string[] FillColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generateXAxisTicks")]
		public string[] GenerateXAxisTicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hoverDimension")]
		public BandViewPropertiesHoverDimension HoverDimension { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendColorizeRows")]
		public System.Nullable<System.Boolean> LegendColorizeRows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendHide")]
		public System.Nullable<System.Boolean> LegendHide { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendOpacity")]
		public System.Nullable<System.Single> LegendOpacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendOrientationThreshold")]
		public System.Nullable<System.Int32> LegendOrientationThreshold { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queries")]
		public DashboardQuery[] Queries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public MosaicViewPropertiesShape Shape { get; set; }
		
		/// <summary>
		/// If true, will display note when empty
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="showNoteWhenEmpty")]
		public bool ShowNoteWhenEmpty { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeFormat")]
		public string TimeFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public MosaicViewPropertiesType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xAxisLabel")]
		public string XAxisLabel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xColumn")]
		public string XColumn { get; set; }
		
		/// <summary>
		/// Required
		/// Maximum items: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xDomain")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public double[] XDomain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xPrefix")]
		public string XPrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xSuffix")]
		public string XSuffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTickStart")]
		public System.Nullable<System.Single> XTickStart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTickStep")]
		public System.Nullable<System.Single> XTickStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTotalTicks")]
		public System.Nullable<System.Int32> XTotalTicks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yAxisLabel")]
		public string YAxisLabel { get; set; }
		
		/// <summary>
		/// Required
		/// Maximum items: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yDomain")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public double[] YDomain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yLabelColumnSeparator")]
		public string YLabelColumnSeparator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yLabelColumns")]
		public string[] YLabelColumns { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yPrefix")]
		public string YPrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ySeriesColumns")]
		public string[] YSeriesColumns { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ySuffix")]
		public string YSuffix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MosaicViewPropertiesShape
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chronograf-v2")]
		chronografMinusv2 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MosaicViewPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mosaic = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Node
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationEndpoint
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationEndpointBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// An optional description of the notification endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public NotificationEndpointBaseLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		/// <summary>
		/// The status of the endpoint.
		/// </summary>
		[System.ComponentModel.DefaultValue(AuthorizationUpdateRequestStatus.active)]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizationUpdateRequestStatus Status { get; set; } = AuthorizationUpdateRequestStatus.active;
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public NotificationEndpointBaseType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userID")]
		public string UserID { get; set; }
	}
	
	public class NotificationEndpointBaseLinks
	{
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string Labels { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owners")]
		public string Owners { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NotificationEndpointBaseType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		slack = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pagerduty = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		http = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		telegram = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationEndpointDiscriminator
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum NotificationEndpointType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		slack = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pagerduty = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		http = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		telegram = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationEndpointUpdate
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizationUpdateRequestStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationEndpoints
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationEndpoints")]
		public NotificationEndpoint[] NotificationEndpoints1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationRule
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationRuleBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// An optional description of the notification rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endpointID")]
		public string EndpointID { get; set; }
		
		/// <summary>
		/// The notification repetition interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="every")]
		public string Every { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastRunError")]
		public string LastRunError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastRunStatus")]
		public CheckBaseLastRunStatus LastRunStatus { get; set; }
		
		/// <summary>
		/// Timestamp of latest scheduled, completed run, RFC3339.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestCompleted")]
		public System.Nullable<System.DateTimeOffset> LatestCompleted { get; set; }
		
		/// <summary>
		/// Don't notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limitEvery cannot be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limit")]
		public System.Nullable<System.Int32> Limit { get; set; }
		
		/// <summary>
		/// Don't notify me more than &lt;limit&gt; times every &lt;limitEvery&gt; seconds. If set, limit cannot be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitEvery")]
		public System.Nullable<System.Int32> LimitEvery { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public NotificationRuleBaseLinks Links { get; set; }
		
		/// <summary>
		/// Human-readable name describing the notification rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Duration to delay after the schedule, before executing check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
		
		/// <summary>
		/// The ID of the organization that owns this notification rule.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		/// <summary>
		/// The ID of creator used to create this notification rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ownerID")]
		public string OwnerID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runbookLink")]
		public string RunbookLink { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sleepUntil")]
		public string SleepUntil { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizationUpdateRequestStatus Status { get; set; }
		
		/// <summary>
		/// List of status rules the notification rule attempts to match.
		/// Required
		/// Minimum items: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusRules")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		public StatusRule[] StatusRules { get; set; }
		
		/// <summary>
		/// List of tag rules the notification rule attempts to match.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tagRules")]
		public TagRule[] TagRules { get; set; }
		
		/// <summary>
		/// The ID of the task associated with this notification rule.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taskID")]
		public string TaskID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	public class NotificationRuleBaseLinks
	{
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string Labels { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owners")]
		public string Owners { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatusRule
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		/// <summary>
		/// The state to record if check matches a criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentLevel")]
		public System.Nullable<StatusRuleCurrentLevel> CurrentLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="period")]
		public string Period { get; set; }
		
		/// <summary>
		/// The state to record if check matches a criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="previousLevel")]
		public StatusRuleCurrentLevel PreviousLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StatusRuleCurrentLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRIT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagRule
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public System.Nullable<TagRuleOperator> Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TagRuleOperator
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		equal = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notequal = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		equalregex = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		notequalregex = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationRuleDiscriminator
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationRuleUpdate
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizationUpdateRequestStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotificationRules
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationRules")]
		public NotificationRule[] NotificationRules1 { get; set; }
	}
	
	/// <summary>
	/// Allows the declaration of an anonymous object within a declaration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ObjectExpression
	{
		
		/// <summary>
		/// Object properties
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public Property[] Properties { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OnboardingRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public string Bucket { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="org")]
		public string Org { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// Retention period *in nanoseconds* for the new bucket. This key's name has been misleading since OSS 2.0 GA, please transition to use `retentionPeriodSeconds`
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionPeriodHrs")]
		public System.Nullable<System.Int32> RetentionPeriodHrs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retentionPeriodSeconds")]
		public System.Nullable<System.Int64> RetentionPeriodSeconds { get; set; }
		
		/// <summary>
		/// Authentication token to set on the initial user. If not specified, the server will generate a token.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OnboardingResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="auth")]
		public Authorization Auth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bucket")]
		public Bucket Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org")]
		public Organization Org { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user")]
		public UserResponse User { get; set; }
	}
	
	/// <summary>
	/// A single variable declaration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OptionStatement
	{
		
		[System.Runtime.Serialization.DataMember(Name="assignment")]
		public VariableAssignment Assignment { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents the declaration of a variable
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VariableAssignment
	{
		
		/// <summary>
		/// A valid Flux identifier
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public Identifier Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="init")]
		public Expression Init { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Organization
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public OrganizationLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// If inactive the organization is inactive.
		/// </summary>
		[System.ComponentModel.DefaultValue(AuthorizationUpdateRequestStatus.active)]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizationUpdateRequestStatus Status { get; set; } = AuthorizationUpdateRequestStatus.active;
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	public class OrganizationLinks
	{
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buckets")]
		public string Buckets { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dashboards")]
		public string Dashboards { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string Labels { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owners")]
		public string Owners { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secrets")]
		public string Secrets { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public string Tasks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Organizations
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orgs")]
		public Organization[] Orgs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagerDutyNotificationEndpoint
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagerDutyNotificationRule : NotificationRuleBase
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageTemplate")]
		public string MessageTemplate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PagerDutyNotificationRuleType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PagerDutyNotificationRuleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		pagerduty = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PagerDutyNotificationRuleBase
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageTemplate")]
		public string MessageTemplate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public PagerDutyNotificationRuleType Type { get; set; }
	}
	
	/// <summary>
	/// Represents an expression wrapped in parenthesis
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ParenExpression
	{
		
		[System.Runtime.Serialization.DataMember(Name="expression")]
		public Expression Expression { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PasswordResetBody
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
	}
	
	/// <summary>
	/// Updates to an existing bucket resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatchBucketRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Updates to rules to expire or retain data. No rules means no updates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionRules")]
		public PatchRetentionRule[] RetentionRules { get; set; }
	}
	
	/// <summary>
	/// Updates to a rule to expire or retain data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatchRetentionRule
	{
		
		/// <summary>
		/// Duration in seconds for how long data will be kept in the database. 0 means infinite.
		/// Minimum: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="everySeconds")]
		[System.ComponentModel.DataAnnotations.Range(0, System.Int64.MaxValue)]
		public System.Nullable<System.Int64> EverySeconds { get; set; }
		
		/// <summary>
		/// Shard duration measured in seconds.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shardGroupDurationSeconds")]
		public System.Nullable<System.Int64> ShardGroupDurationSeconds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DefaultValue(RetentionRuleType.expire)]
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public RetentionRuleType Type { get; set; } = RetentionRuleType.expire;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatchOrganizationRequest
	{
		
		/// <summary>
		/// New description to set on the organization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// New name to set on the organization
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Call expression with pipe argument
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipeExpression
	{
		
		[System.Runtime.Serialization.DataMember(Name="argument")]
		public Expression Argument { get; set; }
		
		/// <summary>
		/// Represents a function call
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="call")]
		public CallExpression Call { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents a specialized literal value, indicating the left hand value of a pipe expression
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipeLiteral
	{
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostBucketRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		/// <summary>
		/// Rules to expire or retain data.  No rules means data never expires.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="retentionRules")]
		public RetentionRule[] RetentionRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rp")]
		public string Rp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaType")]
		public System.Nullable<PostBucketRequestSchemaType> SchemaType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PostBucketRequestSchemaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="implicit")]
		_implicit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="explicit")]
		_explicit = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostCheck
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostNotificationEndpoint
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostNotificationRule
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PostOrganizationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PropertyKey
	{
	}
	
	/// <summary>
	/// Query influx using the Flux language
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Query
	{
		
		/// <summary>
		/// Dialect are options to change the default CSV output format; https://www.w3.org/TR/2015/REC-tabular-metadata-20151217/#dialect-descriptions
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dialect")]
		public Dialect Dialect { get; set; }
		
		/// <summary>
		/// Represents a source from a single file
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="extern")]
		public File Extern { get; set; }
		
		/// <summary>
		/// Specifies the time that should be reported as "now" in the query. Default is the server's now time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="now")]
		public System.Nullable<System.DateTimeOffset> Now { get; set; }
		
		/// <summary>
		/// Enumeration of key/value pairs that respresent parameters to be injected into query (can only specify either this field or extern and not both)
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="params")]
		public string Params { get; set; }
		
		/// <summary>
		/// Query script to execute.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query1 { get; set; }
		
		/// <summary>
		/// The type of query. Must be "flux".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<QueryType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum QueryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		flux = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum QueryEditMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		builder = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		advanced = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class QueryVariableProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<QueryVariablePropertiesType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public QueryVariablePropertiesValues Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum QueryVariablePropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		query = 0,
	}
	
	public class QueryVariablePropertiesValues
	{
		
		[System.Runtime.Serialization.DataMember(Name="language")]
		public string Language { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RangeThreshold : ThresholdBase
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="max")]
		public float Max { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="min")]
		public float Min { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public RangeThresholdType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="within")]
		public bool Within { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RangeThresholdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		range = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Ready
	{
		
		[System.Runtime.Serialization.DataMember(Name="started")]
		public System.Nullable<System.DateTimeOffset> Started { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<ReadyStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="up")]
		public string Up { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReadyStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ready = 0,
	}
	
	/// <summary>
	/// Expressions begin and end with `/` and are regular expressions with syntax accepted by RE2
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RegexpLiteral
	{
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// Describes a field that can be renamed and made visible or invisible.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RenamableField
	{
		
		/// <summary>
		/// The name that a field is renamed to by the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The calculated name of a field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="internalName")]
		public string InternalName { get; set; }
		
		/// <summary>
		/// Indicates whether this field should be visible on the table.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceMember : UserResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<ResourceMemberRole> Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ResourceMemberRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		member = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceMembers
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ResourceMembersLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="users")]
		public ResourceMember[] Users { get; set; }
	}
	
	public class ResourceMembersLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceOwner : UserResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<ResourceOwnerRole> Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ResourceOwnerRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		owner = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceOwners
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ResourceOwnersLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="users")]
		public ResourceOwner[] Users { get; set; }
	}
	
	public class ResourceOwnersLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	/// <summary>
	/// Defines an expression to return
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReturnStatement
	{
		
		[System.Runtime.Serialization.DataMember(Name="argument")]
		public Expression Argument { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Routes
	{
		
		[System.Runtime.Serialization.DataMember(Name="authorizations")]
		public string Authorizations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buckets")]
		public string Buckets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dashboards")]
		public string Dashboards { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="external")]
		public RoutesExternal External { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="flags")]
		public string Flags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="me")]
		public string Me { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orgs")]
		public string Orgs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public RoutesQuery Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="setup")]
		public string Setup { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signin")]
		public string Signin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signout")]
		public string Signout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public string Sources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="system")]
		public RoutesSystem System { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public string Tasks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="telegrafs")]
		public string Telegrafs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="users")]
		public string Users { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public string Variables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="write")]
		public string Write { get; set; }
	}
	
	public class RoutesExternal
	{
		
		[System.Runtime.Serialization.DataMember(Name="statusFeed")]
		public string StatusFeed { get; set; }
	}
	
	public class RoutesQuery
	{
		
		[System.Runtime.Serialization.DataMember(Name="analyze")]
		public string Analyze { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ast")]
		public string Ast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="suggestions")]
		public string Suggestions { get; set; }
	}
	
	public class RoutesSystem
	{
		
		[System.Runtime.Serialization.DataMember(Name="debug")]
		public string Debug { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="health")]
		public string Health { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metrics")]
		public string Metrics { get; set; }
	}
	
	/// <summary>
	/// The state to record if check matches a criteria.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RuleStatusLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INFO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CRIT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WARN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANY = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Run
	{
		
		/// <summary>
		/// Time run finished executing, RFC3339Nano.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="finishedAt")]
		public System.Nullable<System.DateTimeOffset> FinishedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public RunLinks Links { get; set; }
		
		/// <summary>
		/// An array of logs associated with the run.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="log")]
		public LogEvent[] Log { get; set; }
		
		/// <summary>
		/// Time run was manually requested, RFC3339Nano.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedAt")]
		public System.Nullable<System.DateTimeOffset> RequestedAt { get; set; }
		
		/// <summary>
		/// Time used for run's "now" option, RFC3339.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledFor")]
		public System.Nullable<System.DateTimeOffset> ScheduledFor { get; set; }
		
		/// <summary>
		/// Time run started executing, RFC3339Nano.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startedAt")]
		public System.Nullable<System.DateTimeOffset> StartedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<RunStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskID")]
		public string TaskID { get; set; }
	}
	
	public class RunLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="retry")]
		public string Retry { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="task")]
		public string Task { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RunStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		scheduled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		started = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		failed = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		success = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		canceled = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RunManually
	{
		
		/// <summary>
		/// Time used for run's "now" option, RFC3339.  Default is the server's now time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scheduledFor")]
		public System.Nullable<System.DateTimeOffset> ScheduledFor { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Runs
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runs")]
		public Run[] Runs1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SMTPNotificationRule : NotificationRuleBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="bodyTemplate")]
		public string BodyTemplate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subjectTemplate")]
		public string SubjectTemplate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SMTPNotificationRuleType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SMTPNotificationRuleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		smtp = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SMTPNotificationRuleBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="bodyTemplate")]
		public string BodyTemplate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subjectTemplate")]
		public string SubjectTemplate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SMTPNotificationRuleType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScatterViewProperties
	{
		
		/// <summary>
		/// Colors define color encoding of data into a visualization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public string[] Colors { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fillColumns")]
		public string[] FillColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generateXAxisTicks")]
		public string[] GenerateXAxisTicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generateYAxisTicks")]
		public string[] GenerateYAxisTicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendColorizeRows")]
		public System.Nullable<System.Boolean> LegendColorizeRows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendHide")]
		public System.Nullable<System.Boolean> LegendHide { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendOpacity")]
		public System.Nullable<System.Single> LegendOpacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendOrientationThreshold")]
		public System.Nullable<System.Int32> LegendOrientationThreshold { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queries")]
		public DashboardQuery[] Queries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public ScatterViewPropertiesShape Shape { get; set; }
		
		/// <summary>
		/// If true, will display note when empty
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="showNoteWhenEmpty")]
		public bool ShowNoteWhenEmpty { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="symbolColumns")]
		public string[] SymbolColumns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeFormat")]
		public string TimeFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ScatterViewPropertiesType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xAxisLabel")]
		public string XAxisLabel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xColumn")]
		public string XColumn { get; set; }
		
		/// <summary>
		/// Required
		/// Maximum items: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xDomain")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public double[] XDomain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xPrefix")]
		public string XPrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="xSuffix")]
		public string XSuffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTickStart")]
		public System.Nullable<System.Single> XTickStart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTickStep")]
		public System.Nullable<System.Single> XTickStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTotalTicks")]
		public System.Nullable<System.Int32> XTotalTicks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yAxisLabel")]
		public string YAxisLabel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yColumn")]
		public string YColumn { get; set; }
		
		/// <summary>
		/// Required
		/// Maximum items: 2
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yDomain")]
		[System.ComponentModel.DataAnnotations.MaxLength(2)]
		public double[] YDomain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="yPrefix")]
		public string YPrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ySuffix")]
		public string YSuffix { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yTickStart")]
		public System.Nullable<System.Single> YTickStart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yTickStep")]
		public System.Nullable<System.Single> YTickStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yTotalTicks")]
		public System.Nullable<System.Int32> YTotalTicks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScatterViewPropertiesShape
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chronograf-v2")]
		chronografMinusv2 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScatterViewPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		scatter = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SchemaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="implicit")]
		_implicit = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="explicit")]
		_explicit = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScraperTargetRequest
	{
		
		/// <summary>
		/// Skip TLS verification on endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowInsecure")]
		public System.Nullable<System.Boolean> AllowInsecure { get; set; }
		
		/// <summary>
		/// The ID of the bucket to write to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bucketID")]
		public string BucketID { get; set; }
		
		/// <summary>
		/// The name of the scraper target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The organization ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		/// <summary>
		/// The type of the metrics to be parsed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ScraperTargetRequestType> Type { get; set; }
		
		/// <summary>
		/// The URL of the metrics endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ScraperTargetRequestType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		prometheus = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScraperTargetResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScraperTargetResponses
	{
		
		[System.Runtime.Serialization.DataMember(Name="configurations")]
		public ScraperTargetResponse[] Configurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SecretKeys
	{
		
		[System.Runtime.Serialization.DataMember(Name="secrets")]
		public string[] Secrets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SecretKeysResponse : SecretKeys
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public SecretKeysResponseLinks Links { get; set; }
	}
	
	public class SecretKeysResponseLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="org")]
		public string Org { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Secrets
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SingleStatViewProperties
	{
		
		/// <summary>
		/// Colors define color encoding of data into a visualization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public DashboardColor[] Colors { get; set; }
		
		/// <summary>
		/// Indicates whether decimal places should be enforced, and how many digits it should show.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decimalPlaces")]
		public DecimalPlaces DecimalPlaces { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queries")]
		public DashboardQuery[] Queries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public SingleStatViewPropertiesShape Shape { get; set; }
		
		/// <summary>
		/// If true, will display note when empty
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="showNoteWhenEmpty")]
		public bool ShowNoteWhenEmpty { get; set; }
		
		/// <summary>
		/// StaticLegend represents the options specific to the static legend
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticLegend")]
		public StaticLegend StaticLegend { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="suffix")]
		public string Suffix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tickPrefix")]
		public string TickPrefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tickSuffix")]
		public string TickSuffix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SingleStatViewPropertiesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SingleStatViewPropertiesShape
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chronograf-v2")]
		chronografMinusv2 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SingleStatViewPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="single-stat")]
		singleMinusstat = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlackNotificationEndpoint
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlackNotificationRule : NotificationRuleBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public string Channel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageTemplate")]
		public string MessageTemplate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SlackNotificationRuleType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SlackNotificationRuleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		slack = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SlackNotificationRuleBase
	{
		
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public string Channel { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageTemplate")]
		public string MessageTemplate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public SlackNotificationRuleType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Source
	{
		
		[System.Runtime.Serialization.DataMember(Name="default")]
		public System.Nullable<System.Boolean> Default { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultRP")]
		public string DefaultRP { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="insecureSkipVerify")]
		public System.Nullable<System.Boolean> InsecureSkipVerify { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public SourceLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metaUrl")]
		public string MetaUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sharedSecret")]
		public string SharedSecret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="telegraf")]
		public string Telegraf { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="token")]
		public string Token { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<SourceType> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	public class SourceLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="buckets")]
		public string Buckets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="health")]
		public string Health { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		v1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		v2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		self = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Sources
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public SourcesLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public Source[] Sources1 { get; set; }
	}
	
	public class SourcesLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Stack
	{
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="events")]
		public StackEvents[] StackEvents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
	}
	
	public class StackEvents
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public string EventType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public StackEventsResources[] StackEventsResources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public string[] Sources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urls")]
		public string[] Urls { get; set; }
	}
	
	public class StackEventsResources
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associations")]
		public StackEventsResourcesAssociations[] StackEventsResourcesAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<StackEventsResourcesKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public StackEventsResourcesLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceID")]
		public string ResourceID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	public class StackEventsResourcesAssociations
	{
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<StackEventsResourcesAssociationsKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metaName")]
		public string MetaName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StackEventsResourcesAssociationsKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StackEventsResourcesKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class StackEventsResourcesLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TableViewProperties
	{
		
		/// <summary>
		/// Colors define color encoding of data into a visualization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public DashboardColor[] Colors { get; set; }
		
		/// <summary>
		/// Indicates whether decimal places should be enforced, and how many digits it should show.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decimalPlaces")]
		public DecimalPlaces DecimalPlaces { get; set; }
		
		/// <summary>
		/// fieldOptions represent the fields retrieved by the query with customization options
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fieldOptions")]
		public RenamableField[] FieldOptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queries")]
		public DashboardQuery[] Queries { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public TableViewPropertiesShape Shape { get; set; }
		
		/// <summary>
		/// If true, will display note when empty
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="showNoteWhenEmpty")]
		public bool ShowNoteWhenEmpty { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tableOptions")]
		public TableViewPropertiesTableOptions TableOptions { get; set; }
		
		/// <summary>
		/// timeFormat describes the display format for time values according to moment.js date formatting
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeFormat")]
		public string TimeFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TableViewPropertiesType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TableViewPropertiesShape
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chronograf-v2")]
		chronografMinusv2 = 0,
	}
	
	public class TableViewPropertiesTableOptions
	{
		
		/// <summary>
		/// fixFirstColumn indicates whether the first column of the table should be locked
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixFirstColumn")]
		public System.Nullable<System.Boolean> FixFirstColumn { get; set; }
		
		/// <summary>
		/// Describes a field that can be renamed and made visible or invisible.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortBy")]
		public RenamableField SortBy { get; set; }
		
		/// <summary>
		/// verticalTimeAxis describes the orientation of the table by indicating whether the time axis will be displayed vertically
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verticalTimeAxis")]
		public System.Nullable<System.Boolean> VerticalTimeAxis { get; set; }
		
		/// <summary>
		/// Wrapping describes the text wrapping style to be used in table views
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wrapping")]
		public System.Nullable<TableViewPropertiesTableOptionsWrapping> Wrapping { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TableViewPropertiesTableOptionsWrapping
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		truncate = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		wrap = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="single-line")]
		singleMinusline = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TableViewPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		table = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Task_
	{
		
		/// <summary>
		/// The ID of the authorization used when this task communicates with the query engine.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizationID")]
		public string AuthorizationID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		/// <summary>
		/// A task repetition schedule in the form '* * * * * *'; parsed from Flux.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cron")]
		public string Cron { get; set; }
		
		/// <summary>
		/// An optional description of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A simple task repetition schedule; parsed from Flux.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="every")]
		public string Every { get; set; }
		
		/// <summary>
		/// The Flux script to run for this task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flux")]
		public string Flux { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastRunError")]
		public string LastRunError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastRunStatus")]
		public CheckBaseLastRunStatus LastRunStatus { get; set; }
		
		/// <summary>
		/// Timestamp of latest scheduled, completed run, RFC3339.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestCompleted")]
		public System.Nullable<System.DateTimeOffset> LatestCompleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Task_Links Links { get; set; }
		
		/// <summary>
		/// The name of the task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Duration to delay after the schedule, before executing the task; parsed from flux, if set to zero it will remove this option and use 0 as the default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
		
		/// <summary>
		/// The name of the organization that owns this Task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="org")]
		public string Org { get; set; }
		
		/// <summary>
		/// The ID of the organization that owns this Task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizationUpdateRequestStatus Status { get; set; }
		
		/// <summary>
		/// The type of task, this can be used for filtering tasks on list actions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	public class Task_Links
	{
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string Labels { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logs")]
		public string Logs { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string Members { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="owners")]
		public string Owners { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="runs")]
		public string Runs { get; set; }
		
		/// <summary>
		/// URI of resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskCreateRequest
	{
		
		/// <summary>
		/// An optional description of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// The Flux script to run for this task.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="flux")]
		public string Flux { get; set; }
		
		/// <summary>
		/// The name of the organization that owns this Task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="org")]
		public string Org { get; set; }
		
		/// <summary>
		/// The ID of the organization that owns this Task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizationUpdateRequestStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TaskStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		inactive = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TaskUpdateRequest
	{
		
		/// <summary>
		/// Override the 'cron' option in the flux script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cron")]
		public string Cron { get; set; }
		
		/// <summary>
		/// An optional description of the task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Override the 'every' option in the flux script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="every")]
		public string Every { get; set; }
		
		/// <summary>
		/// The Flux script to run for this task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flux")]
		public string Flux { get; set; }
		
		/// <summary>
		/// Override the 'name' option in the flux script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Override the 'offset' option in the flux script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizationUpdateRequestStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tasks
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public Links Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public Task_[] Tasks1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Telegraf
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TelegrafPlugin
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TelegrafPlugins
	{
		
		[System.Runtime.Serialization.DataMember(Name="os")]
		public string Os { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="plugins")]
		public TelegrafPlugin[] Plugins { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TelegrafRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="config")]
		public string Config { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public TelegrafRequestMetadata Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
	}
	
	public class TelegrafRequestMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="buckets")]
		public string[] Buckets { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Telegrafs
	{
		
		[System.Runtime.Serialization.DataMember(Name="configurations")]
		public Telegraf[] Configurations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TelegramNotificationEndpoint
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TelegramNotificationRule : NotificationRuleBase
	{
		
		/// <summary>
		/// Disables preview of web links in the sent messages when "true". Defaults to "false" .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableWebPagePreview")]
		public System.Nullable<System.Boolean> DisableWebPagePreview { get; set; }
		
		/// <summary>
		/// The message template as a flux interpolated string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageTemplate")]
		public string MessageTemplate { get; set; }
		
		/// <summary>
		/// Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to "MarkdownV2" .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parseMode")]
		public System.Nullable<TelegramNotificationRuleParseMode> ParseMode { get; set; }
		
		/// <summary>
		/// The discriminator between other types of notification rules is "telegram".
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TelegramNotificationRuleType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TelegramNotificationRuleParseMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MarkdownV2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Markdown = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TelegramNotificationRuleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		telegram = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TelegramNotificationRuleBase
	{
		
		/// <summary>
		/// Disables preview of web links in the sent messages when "true". Defaults to "false" .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableWebPagePreview")]
		public System.Nullable<System.Boolean> DisableWebPagePreview { get; set; }
		
		/// <summary>
		/// The message template as a flux interpolated string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageTemplate")]
		public string MessageTemplate { get; set; }
		
		/// <summary>
		/// Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to "MarkdownV2" .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parseMode")]
		public TelegramNotificationRuleParseMode ParseMode { get; set; }
		
		/// <summary>
		/// The discriminator between other types of notification rules is "telegram".
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TelegramNotificationRuleType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateElement
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateElementKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public TemplateElementMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public string Spec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateElementKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class TemplateElementMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateApply
	{
		
		[System.Runtime.Serialization.DataMember(Name="actions")]
		public string[] Actions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dryRun")]
		public System.Nullable<System.Boolean> DryRun { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="envRefs")]
		public System.Collections.Generic.Dictionary<string, object> EnvRefs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remotes")]
		public TemplateApplyRemotes[] TemplateApplyRemotes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secrets")]
		public System.Collections.Generic.Dictionary<string, string> Secrets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stackID")]
		public string StackID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="template")]
		public TemplateApplyTemplate Template { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templates")]
		public TemplateApplyTemplates[] TemplateApplyTemplates { get; set; }
	}
	
	public class TemplateApplyRemotes
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class TemplateApplyTemplate
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public TemplateElement[] Contents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public string[] Sources { get; set; }
	}
	
	public class TemplateApplyTemplates
	{
		
		[System.Runtime.Serialization.DataMember(Name="contentType")]
		public string ContentType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="contents")]
		public TemplateElement[] Contents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public string[] Sources { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateChart
	{
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Int32> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ViewProperties Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Int32> Width { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xPos")]
		public System.Nullable<System.Int32> XPos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yPos")]
		public System.Nullable<System.Int32> YPos { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateEnvReferencesElement
	{
		
		/// <summary>
		/// Default value that will be provided for the reference when no value is provided
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public string DefaultValue { get; set; }
		
		/// <summary>
		/// Key identified as environment reference and is the key identified in the template
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="envRefKey")]
		public string EnvRefKey { get; set; }
		
		/// <summary>
		/// Field the environment reference corresponds too
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceField")]
		public string ResourceField { get; set; }
		
		/// <summary>
		/// Value provided to fulfill reference
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateExportByID
	{
		
		[System.Runtime.Serialization.DataMember(Name="orgIDs")]
		public TemplateExportByIDOrgIDs[] TemplateExportByIDOrgIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public TemplateExportByIDResources Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stackID")]
		public string StackID { get; set; }
	}
	
	public class TemplateExportByIDOrgIDs
	{
		
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceFilters")]
		public TemplateExportByIDOrgIDsResourceFilters ResourceFilters { get; set; }
	}
	
	public class TemplateExportByIDOrgIDsResourceFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="byLabel")]
		public string[] ByLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="byResourceKind")]
		public TemplateKind[] ByResourceKind { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class TemplateExportByIDResources
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public TemplateExportByIDResourcesKind Kind { get; set; }
		
		/// <summary>
		/// if defined with id, name is used for resource exported by id. if defined independently, resources strictly matching name are exported
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateExportByIDResourcesKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateExportByName
	{
		
		[System.Runtime.Serialization.DataMember(Name="orgIDs")]
		public TemplateExportByNameOrgIDs[] TemplateExportByNameOrgIDs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resources")]
		public TemplateExportByNameResources Resources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stackID")]
		public string StackID { get; set; }
	}
	
	public class TemplateExportByNameOrgIDs
	{
		
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceFilters")]
		public TemplateExportByNameOrgIDsResourceFilters ResourceFilters { get; set; }
	}
	
	public class TemplateExportByNameOrgIDsResourceFilters
	{
		
		[System.Runtime.Serialization.DataMember(Name="byLabel")]
		public string[] ByLabel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="byResourceKind")]
		public TemplateKind[] ByResourceKind { get; set; }
	}
	
	public class TemplateExportByNameResources
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public TemplateExportByNameResourcesKind Kind { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateExportByNameResourcesKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="diff")]
		public TemplateSummaryDiff Diff { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public TemplateSummaryErrors[] TemplateSummaryErrors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sources")]
		public string[] Sources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stackID")]
		public string StackID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public TemplateSummarySummary Summary { get; set; }
	}
	
	public class TemplateSummaryDiff
	{
		
		[System.Runtime.Serialization.DataMember(Name="buckets")]
		public TemplateSummaryDiffBuckets[] TemplateSummaryDiffBuckets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checks")]
		public TemplateSummaryDiffChecks[] TemplateSummaryDiffChecks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dashboards")]
		public TemplateSummaryDiffDashboards[] TemplateSummaryDiffDashboards { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labelMappings")]
		public TemplateSummaryDiffLabelMappings[] TemplateSummaryDiffLabelMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public TemplateSummaryDiffLabels[] TemplateSummaryDiffLabels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationEndpoints")]
		public TemplateSummaryDiffNotificationEndpoints[] TemplateSummaryDiffNotificationEndpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationRules")]
		public TemplateSummaryDiffNotificationRules[] TemplateSummaryDiffNotificationRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public TemplateSummaryDiffTasks[] TemplateSummaryDiffTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="telegrafConfigs")]
		public TemplateSummaryDiffTelegrafConfigs[] TemplateSummaryDiffTelegrafConfigs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public TemplateSummaryDiffVariables[] TemplateSummaryDiffVariables { get; set; }
	}
	
	public class TemplateSummaryDiffBuckets
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateSummaryDiffBucketsKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new")]
		public TemplateSummaryDiffBucketsNew New { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="old")]
		public TemplateSummaryDiffBucketsOld Old { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateStatus")]
		public string StateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateSummaryDiffBucketsKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class TemplateSummaryDiffBucketsNew
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Rules to expire or retain data.  No rules means data never expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionRules")]
		public RetentionRule[] RetentionRules { get; set; }
	}
	
	public class TemplateSummaryDiffBucketsOld
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Rules to expire or retain data.  No rules means data never expires.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="retentionRules")]
		public RetentionRule[] RetentionRules { get; set; }
	}
	
	public class TemplateSummaryDiffChecks
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateSummaryDiffChecksKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new")]
		public CheckDiscriminator New { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="old")]
		public CheckDiscriminator Old { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateStatus")]
		public string StateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateSummaryDiffChecksKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class TemplateSummaryDiffDashboards
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateSummaryDiffDashboardsKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new")]
		public TemplateSummaryDiffDashboardsNew New { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="old")]
		public TemplateSummaryDiffDashboardsOld Old { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateStatus")]
		public string StateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateSummaryDiffDashboardsKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class TemplateSummaryDiffDashboardsNew
	{
		
		[System.Runtime.Serialization.DataMember(Name="charts")]
		public TemplateChart[] Charts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class TemplateSummaryDiffDashboardsOld
	{
		
		[System.Runtime.Serialization.DataMember(Name="charts")]
		public TemplateChart[] Charts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class TemplateSummaryDiffLabelMappings
	{
		
		[System.Runtime.Serialization.DataMember(Name="labelID")]
		public string LabelID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labelName")]
		public string LabelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labelTemplateMetaName")]
		public string LabelTemplateMetaName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceID")]
		public string ResourceID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceTemplateMetaName")]
		public string ResourceTemplateMetaName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class TemplateSummaryDiffLabels
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateSummaryDiffLabelsKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new")]
		public TemplateSummaryDiffLabelsNew New { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="old")]
		public TemplateSummaryDiffLabelsOld Old { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateStatus")]
		public string StateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateSummaryDiffLabelsKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class TemplateSummaryDiffLabelsNew
	{
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class TemplateSummaryDiffLabelsOld
	{
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class TemplateSummaryDiffNotificationEndpoints
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateSummaryDiffNotificationEndpointsKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new")]
		public NotificationEndpointDiscriminator New { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="old")]
		public NotificationEndpointDiscriminator Old { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateStatus")]
		public string StateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateSummaryDiffNotificationEndpointsKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class TemplateSummaryDiffNotificationRules
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateSummaryDiffNotificationRulesKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new")]
		public TemplateSummaryDiffNotificationRulesNew New { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="old")]
		public TemplateSummaryDiffNotificationRulesOld Old { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateStatus")]
		public string StateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateSummaryDiffNotificationRulesKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class TemplateSummaryDiffNotificationRulesNew
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpointID")]
		public string EndpointID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpointName")]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpointType")]
		public string EndpointType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="every")]
		public string Every { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageTemplate")]
		public string MessageTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusRules")]
		public TemplateSummaryDiffNotificationRulesNewStatusRules[] TemplateSummaryDiffNotificationRulesNewStatusRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagRules")]
		public TemplateSummaryDiffNotificationRulesNewTagRules[] TemplateSummaryDiffNotificationRulesNewTagRules { get; set; }
	}
	
	public class TemplateSummaryDiffNotificationRulesNewStatusRules
	{
		
		[System.Runtime.Serialization.DataMember(Name="currentLevel")]
		public string CurrentLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previousLevel")]
		public string PreviousLevel { get; set; }
	}
	
	public class TemplateSummaryDiffNotificationRulesNewTagRules
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class TemplateSummaryDiffNotificationRulesOld
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpointID")]
		public string EndpointID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpointName")]
		public string EndpointName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpointType")]
		public string EndpointType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="every")]
		public string Every { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageTemplate")]
		public string MessageTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusRules")]
		public TemplateSummaryDiffNotificationRulesOldStatusRules[] TemplateSummaryDiffNotificationRulesOldStatusRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagRules")]
		public TemplateSummaryDiffNotificationRulesOldTagRules[] TemplateSummaryDiffNotificationRulesOldTagRules { get; set; }
	}
	
	public class TemplateSummaryDiffNotificationRulesOldStatusRules
	{
		
		[System.Runtime.Serialization.DataMember(Name="currentLevel")]
		public string CurrentLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previousLevel")]
		public string PreviousLevel { get; set; }
	}
	
	public class TemplateSummaryDiffNotificationRulesOldTagRules
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class TemplateSummaryDiffTasks
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateSummaryDiffTasksKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new")]
		public TemplateSummaryDiffTasksNew New { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="old")]
		public TemplateSummaryDiffTasksOld Old { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateStatus")]
		public string StateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateSummaryDiffTasksKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class TemplateSummaryDiffTasksNew
	{
		
		[System.Runtime.Serialization.DataMember(Name="cron")]
		public string Cron { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="every")]
		public string Every { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class TemplateSummaryDiffTasksOld
	{
		
		[System.Runtime.Serialization.DataMember(Name="cron")]
		public string Cron { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="every")]
		public string Every { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class TemplateSummaryDiffTelegrafConfigs
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateSummaryDiffTelegrafConfigsKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new")]
		public TelegrafRequest New { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="old")]
		public TelegrafRequest Old { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateStatus")]
		public string StateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateSummaryDiffTelegrafConfigsKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class TemplateSummaryDiffVariables
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateSummaryDiffVariablesKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="new")]
		public TemplateSummaryDiffVariablesNew New { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="old")]
		public TemplateSummaryDiffVariablesOld Old { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stateStatus")]
		public string StateStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateSummaryDiffVariablesKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class TemplateSummaryDiffVariablesNew
	{
		
		[System.Runtime.Serialization.DataMember(Name="args")]
		public VariableProperties Args { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VariableProperties
	{
	}
	
	public class TemplateSummaryDiffVariablesOld
	{
		
		[System.Runtime.Serialization.DataMember(Name="args")]
		public VariableProperties Args { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class TemplateSummaryErrors
	{
		
		[System.Runtime.Serialization.DataMember(Name="fields")]
		public string[] Fields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="indexes")]
		public int[] Indexes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateSummaryErrorsKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateSummaryErrorsKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class TemplateSummarySummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="buckets")]
		public TemplateSummarySummaryBuckets[] TemplateSummarySummaryBuckets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="checks")]
		public string[] Checks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dashboards")]
		public TemplateSummarySummaryDashboards[] TemplateSummarySummaryDashboards { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labelMappings")]
		public TemplateSummarySummaryLabelMappings[] TemplateSummarySummaryLabelMappings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public TemplateSummaryLabel[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="missingEnvRefs")]
		public string[] MissingEnvRefs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="missingSecrets")]
		public string[] MissingSecrets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationEndpoints")]
		public string[] NotificationEndpoints { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notificationRules")]
		public TemplateSummarySummaryNotificationRules[] TemplateSummarySummaryNotificationRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tasks")]
		public TemplateSummarySummaryTasks[] TemplateSummarySummaryTasks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="telegrafConfigs")]
		public string[] TelegrafConfigs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public TemplateSummarySummaryVariables[] TemplateSummarySummaryVariables { get; set; }
	}
	
	public class TemplateSummarySummaryBuckets
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="envReferences")]
		public TemplateEnvReferencesElement[] EnvReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateSummarySummaryBucketsKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labelAssociations")]
		public TemplateSummaryLabel[] LabelAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="retentionPeriod")]
		public System.Nullable<System.Int32> RetentionPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateSummarySummaryBucketsKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TemplateSummaryLabel
	{
		
		[System.Runtime.Serialization.DataMember(Name="envReferences")]
		public TemplateEnvReferencesElement[] EnvReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateSummaryLabelKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public TemplateSummaryLabelProperties Properties { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateSummaryLabelKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class TemplateSummaryLabelProperties
	{
		
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public class TemplateSummarySummaryDashboards
	{
		
		[System.Runtime.Serialization.DataMember(Name="charts")]
		public TemplateChart[] Charts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="envReferences")]
		public TemplateEnvReferencesElement[] EnvReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateSummarySummaryDashboardsKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labelAssociations")]
		public TemplateSummaryLabel[] LabelAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateSummarySummaryDashboardsKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class TemplateSummarySummaryLabelMappings
	{
		
		[System.Runtime.Serialization.DataMember(Name="labelID")]
		public string LabelID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labelName")]
		public string LabelName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labelTemplateMetaName")]
		public string LabelTemplateMetaName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceID")]
		public string ResourceID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceTemplateMetaName")]
		public string ResourceTemplateMetaName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceType")]
		public string ResourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	public class TemplateSummarySummaryNotificationRules
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpointID")]
		public string EndpointID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpointTemplateMetaName")]
		public string EndpointTemplateMetaName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endpointType")]
		public string EndpointType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="envReferences")]
		public TemplateEnvReferencesElement[] EnvReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="every")]
		public string Every { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateSummarySummaryNotificationRulesKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labelAssociations")]
		public TemplateSummaryLabel[] LabelAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messageTemplate")]
		public string MessageTemplate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusRules")]
		public TemplateSummarySummaryNotificationRulesStatusRules[] TemplateSummarySummaryNotificationRulesStatusRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagRules")]
		public TemplateSummarySummaryNotificationRulesTagRules[] TemplateSummarySummaryNotificationRulesTagRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateSummarySummaryNotificationRulesKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class TemplateSummarySummaryNotificationRulesStatusRules
	{
		
		[System.Runtime.Serialization.DataMember(Name="currentLevel")]
		public string CurrentLevel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previousLevel")]
		public string PreviousLevel { get; set; }
	}
	
	public class TemplateSummarySummaryNotificationRulesTagRules
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class TemplateSummarySummaryTasks
	{
		
		[System.Runtime.Serialization.DataMember(Name="cron")]
		public string Cron { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="envReferences")]
		public TemplateEnvReferencesElement[] EnvReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="every")]
		public string Every { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateSummarySummaryTasksKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateSummarySummaryTasksKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class TemplateSummarySummaryVariables
	{
		
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public VariableProperties Arguments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="envReferences")]
		public TemplateEnvReferencesElement[] EnvReferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<TemplateSummarySummaryVariablesKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labelAssociations")]
		public TemplateSummaryLabel[] LabelAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateSummarySummaryVariablesKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	/// <summary>
	/// Declares a Flux test case
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestStatement
	{
		
		/// <summary>
		/// Represents the declaration of a variable
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignment")]
		public VariableAssignment Assignment { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Threshold
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThresholdBase
	{
		
		/// <summary>
		/// If true, only alert if all values meet threshold.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allValues")]
		public System.Nullable<System.Boolean> AllValues { get; set; }
		
		/// <summary>
		/// The state to record if check matches a criteria.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="level")]
		public CheckStatusLevel Level { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThresholdCheck : CheckBase
	{
		
		/// <summary>
		/// Check repetition interval.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="every")]
		public string Every { get; set; }
		
		/// <summary>
		/// Duration to delay after the schedule, before executing check.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
		
		/// <summary>
		/// The template used to generate and write a status message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="statusMessageTemplate")]
		public string StatusMessageTemplate { get; set; }
		
		/// <summary>
		/// List of tags to write to each status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ThresholdCheckTags[] ThresholdCheckTags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thresholds")]
		public Threshold[] Thresholds { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ThresholdCheckType Type { get; set; }
	}
	
	public class ThresholdCheckTags
	{
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ThresholdCheckType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		threshold = 0,
	}
	
	/// <summary>
	/// Uses operators to act on a single operand in an expression
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnaryExpression
	{
		
		[System.Runtime.Serialization.DataMember(Name="argument")]
		public Expression Argument { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Represents integer numbers
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnsignedIntegerLiteral
	{
		
		/// <summary>
		/// Type of AST node
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oauthID")]
		public string OauthID { get; set; }
		
		/// <summary>
		/// If inactive the user is inactive.
		/// </summary>
		[System.ComponentModel.DefaultValue(AuthorizationUpdateRequestStatus.active)]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizationUpdateRequestStatus Status { get; set; } = AuthorizationUpdateRequestStatus.active;
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public UserResponseLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oauthID")]
		public string OauthID { get; set; }
		
		/// <summary>
		/// If inactive the user is inactive.
		/// </summary>
		[System.ComponentModel.DefaultValue(AuthorizationUpdateRequestStatus.active)]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AuthorizationUpdateRequestStatus Status { get; set; } = AuthorizationUpdateRequestStatus.active;
	}
	
	public class UserResponseLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Users
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public UsersLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="users")]
		public UserResponse[] Users1 { get; set; }
	}
	
	public class UsersLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Variable
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="arguments")]
		public VariableProperties Arguments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.Nullable<System.DateTimeOffset> CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public Label[] Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public VariableLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="selected")]
		public string[] Selected { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public System.Nullable<System.DateTimeOffset> UpdatedAt { get; set; }
	}
	
	public class VariableLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="labels")]
		public string Labels { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="org")]
		public string Org { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Variables
	{
		
		[System.Runtime.Serialization.DataMember(Name="variables")]
		public Variable[] Variables1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class View
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ViewLinks Links { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="properties")]
		public ViewProperties Properties { get; set; }
	}
	
	public class ViewLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ViewProperties
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Views
	{
		
		[System.Runtime.Serialization.DataMember(Name="links")]
		public ViewsLinks Links { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="views")]
		public View[] Views1 { get; set; }
	}
	
	public class ViewsLinks
	{
		
		[System.Runtime.Serialization.DataMember(Name="self")]
		public string Self { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum WritePrecision
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ms = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		s = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		us = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ns = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum XYGeom
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		line = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		step = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stacked = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		bar = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		monotoneX = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class XYViewProperties
	{
		
		/// <summary>
		/// The viewport for a View's visualizations
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="axes")]
		public Axes Axes { get; set; }
		
		/// <summary>
		/// Colors define color encoding of data into a visualization
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public DashboardColor[] Colors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generateXAxisTicks")]
		public string[] GenerateXAxisTicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generateYAxisTicks")]
		public string[] GenerateYAxisTicks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="geom")]
		public BandViewPropertiesGeom Geom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hoverDimension")]
		public BandViewPropertiesHoverDimension HoverDimension { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendColorizeRows")]
		public System.Nullable<System.Boolean> LegendColorizeRows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendHide")]
		public System.Nullable<System.Boolean> LegendHide { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendOpacity")]
		public System.Nullable<System.Single> LegendOpacity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="legendOrientationThreshold")]
		public System.Nullable<System.Int32> LegendOrientationThreshold { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="note")]
		public string Note { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="position")]
		public HistogramViewPropertiesPosition Position { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="queries")]
		public DashboardQuery[] Queries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="shadeBelow")]
		public System.Nullable<System.Boolean> ShadeBelow { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="shape")]
		public XYViewPropertiesShape Shape { get; set; }
		
		/// <summary>
		/// If true, will display note when empty
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="showNoteWhenEmpty")]
		public bool ShowNoteWhenEmpty { get; set; }
		
		/// <summary>
		/// StaticLegend represents the options specific to the static legend
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="staticLegend")]
		public StaticLegend StaticLegend { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeFormat")]
		public string TimeFormat { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public XYViewPropertiesType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xColumn")]
		public string XColumn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTickStart")]
		public System.Nullable<System.Single> XTickStart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTickStep")]
		public System.Nullable<System.Single> XTickStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="xTotalTicks")]
		public System.Nullable<System.Int32> XTotalTicks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yColumn")]
		public string YColumn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yTickStart")]
		public System.Nullable<System.Single> YTickStart { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yTickStep")]
		public System.Nullable<System.Single> YTickStep { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yTotalTicks")]
		public System.Nullable<System.Int32> YTotalTicks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum XYViewPropertiesShape
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="chronograf-v2")]
		chronografMinusv2 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum XYViewPropertiesType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xy = 0,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List all top level routes
		/// GetRoutes 
		/// </summary>
		public async Task GetRoutesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all authorizations
		/// GetAuthorizations authorizations
		/// </summary>
		/// <param name="userID">Only show authorizations that belong to a user ID.</param>
		/// <param name="user">Only show authorizations that belong to a user name.</param>
		/// <param name="orgID">Only show authorizations that belong to an organization ID.</param>
		/// <param name="org">Only show authorizations that belong to a organization name.</param>
		/// <returns>A list of authorizations</returns>
		public async Task<Authorizations> GetAuthorizationsAsync(string userID, string user, string orgID, string org, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authorizations?userID=" + (userID==null? "" : System.Uri.EscapeDataString(userID))+"&user=" + (user==null? "" : System.Uri.EscapeDataString(user))+"&orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"&org=" + (org==null? "" : System.Uri.EscapeDataString(org));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Authorizations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an authorization
		/// PostAuthorizations authorizations
		/// </summary>
		/// <param name="requestBody">Authorization to create</param>
		public async Task PostAuthorizationsAsync(AuthorizationPostRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authorizations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an authorization
		/// DeleteAuthorizationsID authorizations/{authID}
		/// </summary>
		/// <param name="authID">The ID of the authorization to delete.</param>
		public async Task DeleteAuthorizationsIDAsync(string authID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authorizations/"+ (authID==null? "" : System.Uri.EscapeDataString(authID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an authorization
		/// GetAuthorizationsID authorizations/{authID}
		/// </summary>
		/// <param name="authID">The ID of the authorization to get.</param>
		/// <returns>Authorization details</returns>
		public async Task<Authorization> GetAuthorizationsIDAsync(string authID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authorizations/"+ (authID==null? "" : System.Uri.EscapeDataString(authID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Authorization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an authorization to be active or inactive
		/// PatchAuthorizationsID authorizations/{authID}
		/// </summary>
		/// <param name="authID">The ID of the authorization to update.</param>
		/// <param name="requestBody">Authorization to update</param>
		/// <returns>The active or inactie authorization</returns>
		public async Task<Authorization> PatchAuthorizationsIDAsync(string authID, AuthorizationUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "authorizations/"+ (authID==null? "" : System.Uri.EscapeDataString(authID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Authorization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all buckets
		/// GetBuckets buckets
		/// </summary>
		/// <param name="after">The last resource ID from which to seek from (but not including). This is to be used instead of `offset`.
		///</param>
		/// <param name="org">The name of the organization.</param>
		/// <param name="orgID">The organization ID.</param>
		/// <param name="name">Only returns buckets with a specific name.</param>
		/// <param name="id">Only returns buckets with a specific ID.</param>
		/// <returns>A list of buckets</returns>
		public async Task<Buckets> GetBucketsAsync(int offset, int limit, string after, string org, string orgID, string name, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets?offset="+offset+"&limit="+limit+"&after=" + (after==null? "" : System.Uri.EscapeDataString(after))+"&org=" + (org==null? "" : System.Uri.EscapeDataString(org))+"&orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Buckets>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a bucket
		/// PostBuckets buckets
		/// </summary>
		/// <param name="requestBody">Bucket to create</param>
		public async Task PostBucketsAsync(PostBucketRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a bucket
		/// DeleteBucketsID buckets/{bucketID}
		/// </summary>
		/// <param name="bucketID">The ID of the bucket to delete.</param>
		public async Task DeleteBucketsIDAsync(string bucketID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/"+ (bucketID==null? "" : System.Uri.EscapeDataString(bucketID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a bucket
		/// GetBucketsID buckets/{bucketID}
		/// </summary>
		/// <param name="bucketID">The bucket ID.</param>
		/// <returns>Bucket details</returns>
		public async Task<Bucket> GetBucketsIDAsync(string bucketID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/"+ (bucketID==null? "" : System.Uri.EscapeDataString(bucketID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Bucket>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a bucket
		/// PatchBucketsID buckets/{bucketID}
		/// </summary>
		/// <param name="bucketID">The bucket ID.</param>
		/// <param name="requestBody">Bucket update to apply</param>
		/// <returns>An updated bucket</returns>
		public async Task<Bucket> PatchBucketsIDAsync(string bucketID, PatchBucketRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/"+ (bucketID==null? "" : System.Uri.EscapeDataString(bucketID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Bucket>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all labels for a bucket
		/// GetBucketsIDLabels buckets/{bucketID}/labels
		/// </summary>
		/// <param name="bucketID">The bucket ID.</param>
		/// <returns>A list of all labels for a bucket</returns>
		public async Task<LabelsResponse> GetBucketsIDLabelsAsync(string bucketID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/"+ (bucketID==null? "" : System.Uri.EscapeDataString(bucketID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LabelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a label to a bucket
		/// PostBucketsIDLabels buckets/{bucketID}/labels
		/// </summary>
		/// <param name="bucketID">The bucket ID.</param>
		/// <param name="requestBody">Label to add</param>
		public async Task PostBucketsIDLabelsAsync(string bucketID, LabelMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/"+ (bucketID==null? "" : System.Uri.EscapeDataString(bucketID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a label from a bucket
		/// DeleteBucketsIDLabelsID buckets/{bucketID}/labels/{labelID}
		/// </summary>
		/// <param name="bucketID">The bucket ID.</param>
		/// <param name="labelID">The ID of the label to delete.</param>
		public async Task DeleteBucketsIDLabelsIDAsync(string bucketID, string labelID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/"+ (bucketID==null? "" : System.Uri.EscapeDataString(bucketID))+"/labels/"+ (labelID==null? "" : System.Uri.EscapeDataString(labelID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all users with member privileges for a bucket
		/// GetBucketsIDMembers buckets/{bucketID}/members
		/// </summary>
		/// <param name="bucketID">The bucket ID.</param>
		/// <returns>A list of bucket members</returns>
		public async Task<ResourceMembers> GetBucketsIDMembersAsync(string bucketID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/"+ (bucketID==null? "" : System.Uri.EscapeDataString(bucketID))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceMembers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a member to a bucket
		/// PostBucketsIDMembers buckets/{bucketID}/members
		/// </summary>
		/// <param name="bucketID">The bucket ID.</param>
		/// <param name="requestBody">User to add as member</param>
		public async Task PostBucketsIDMembersAsync(string bucketID, AddResourceMemberRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/"+ (bucketID==null? "" : System.Uri.EscapeDataString(bucketID))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a member from a bucket
		/// DeleteBucketsIDMembersID buckets/{bucketID}/members/{userID}
		/// </summary>
		/// <param name="userID">The ID of the member to remove.</param>
		/// <param name="bucketID">The bucket ID.</param>
		public async Task DeleteBucketsIDMembersIDAsync(string userID, string bucketID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/"+ (bucketID==null? "" : System.Uri.EscapeDataString(bucketID))+"/members/"+ (userID==null? "" : System.Uri.EscapeDataString(userID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all owners of a bucket
		/// GetBucketsIDOwners buckets/{bucketID}/owners
		/// </summary>
		/// <param name="bucketID">The bucket ID.</param>
		/// <returns>A list of bucket owners</returns>
		public async Task<ResourceOwners> GetBucketsIDOwnersAsync(string bucketID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/"+ (bucketID==null? "" : System.Uri.EscapeDataString(bucketID))+"/owners";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceOwners>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an owner to a bucket
		/// PostBucketsIDOwners buckets/{bucketID}/owners
		/// </summary>
		/// <param name="bucketID">The bucket ID.</param>
		/// <param name="requestBody">User to add as owner</param>
		public async Task PostBucketsIDOwnersAsync(string bucketID, AddResourceMemberRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/"+ (bucketID==null? "" : System.Uri.EscapeDataString(bucketID))+"/owners";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove an owner from a bucket
		/// DeleteBucketsIDOwnersID buckets/{bucketID}/owners/{userID}
		/// </summary>
		/// <param name="userID">The ID of the owner to remove.</param>
		/// <param name="bucketID">The bucket ID.</param>
		public async Task DeleteBucketsIDOwnersIDAsync(string userID, string bucketID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "buckets/"+ (bucketID==null? "" : System.Uri.EscapeDataString(bucketID))+"/owners/"+ (userID==null? "" : System.Uri.EscapeDataString(userID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all checks
		/// GetChecks checks
		/// </summary>
		/// <param name="orgID">Only show checks that belong to a specific organization ID.</param>
		/// <returns>A list of checks</returns>
		public async Task<Checks> GetChecksAsync(int offset, int limit, string orgID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checks?offset="+offset+"&limit="+limit+"&orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Checks>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add new check
		/// CreateCheck checks
		/// </summary>
		/// <param name="requestBody">Check to create</param>
		public async Task CreateCheckAsync(PostCheck requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a check
		/// DeleteChecksID checks/{checkID}
		/// </summary>
		/// <param name="checkID">The check ID.</param>
		public async Task DeleteChecksIDAsync(string checkID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checks/"+ (checkID==null? "" : System.Uri.EscapeDataString(checkID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a check
		/// GetChecksID checks/{checkID}
		/// </summary>
		/// <param name="checkID">The check ID.</param>
		/// <returns>The check requested</returns>
		public async Task<Check> GetChecksIDAsync(string checkID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checks/"+ (checkID==null? "" : System.Uri.EscapeDataString(checkID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a check
		/// PatchChecksID checks/{checkID}
		/// </summary>
		/// <param name="checkID">The check ID.</param>
		/// <param name="requestBody">Check update to apply</param>
		/// <returns>An updated check</returns>
		public async Task<Check> PatchChecksIDAsync(string checkID, CheckPatch requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checks/"+ (checkID==null? "" : System.Uri.EscapeDataString(checkID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a check
		/// PutChecksID checks/{checkID}
		/// </summary>
		/// <param name="checkID">The check ID.</param>
		/// <param name="requestBody">Check update to apply</param>
		/// <returns>An updated check</returns>
		public async Task<Check> PutChecksIDAsync(string checkID, Check requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checks/"+ (checkID==null? "" : System.Uri.EscapeDataString(checkID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Check>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all labels for a check
		/// GetChecksIDLabels checks/{checkID}/labels
		/// </summary>
		/// <param name="checkID">The check ID.</param>
		/// <returns>A list of all labels for a check</returns>
		public async Task<LabelsResponse> GetChecksIDLabelsAsync(string checkID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checks/"+ (checkID==null? "" : System.Uri.EscapeDataString(checkID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LabelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a label to a check
		/// PostChecksIDLabels checks/{checkID}/labels
		/// </summary>
		/// <param name="checkID">The check ID.</param>
		/// <param name="requestBody">Label to add</param>
		public async Task PostChecksIDLabelsAsync(string checkID, LabelMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checks/"+ (checkID==null? "" : System.Uri.EscapeDataString(checkID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete label from a check
		/// DeleteChecksIDLabelsID checks/{checkID}/labels/{labelID}
		/// </summary>
		/// <param name="checkID">The check ID.</param>
		/// <param name="labelID">The ID of the label to delete.</param>
		public async Task DeleteChecksIDLabelsIDAsync(string checkID, string labelID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checks/"+ (checkID==null? "" : System.Uri.EscapeDataString(checkID))+"/labels/"+ (labelID==null? "" : System.Uri.EscapeDataString(labelID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a check query
		/// GetChecksIDQuery checks/{checkID}/query
		/// </summary>
		/// <param name="checkID">The check ID.</param>
		/// <returns>The check query requested</returns>
		public async Task<FluxResponse> GetChecksIDQueryAsync(string checkID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "checks/"+ (checkID==null? "" : System.Uri.EscapeDataString(checkID))+"/query";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FluxResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all dashboards
		/// GetDashboards dashboards
		/// </summary>
		/// <param name="owner">A user identifier. Returns only dashboards where this user has the `owner` role.</param>
		/// <param name="sortBy">The column to sort by.</param>
		/// <param name="id">A list of dashboard identifiers. Returns only the listed dashboards. If both `id` and `owner` are specified, only `id` is used.</param>
		/// <param name="orgID">The identifier of the organization.</param>
		/// <param name="org">The name of the organization.</param>
		/// <returns>All dashboards</returns>
		public async Task<Dashboards> GetDashboardsAsync(int offset, int limit, bool descending, string owner, GetDashboardsSortBy sortBy, string[] id, string orgID, string org, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards?offset="+offset+"&limit="+limit+"&descending="+descending+"&owner=" + (owner==null? "" : System.Uri.EscapeDataString(owner))+"&sortBy=" + sortBy+"&"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"&org=" + (org==null? "" : System.Uri.EscapeDataString(org));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Dashboards>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a dashboard
		/// PostDashboards dashboards
		/// </summary>
		/// <param name="requestBody">Dashboard to create</param>
		public async Task PostDashboardsAsync(CreateDashboardRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a dashboard
		/// DeleteDashboardsID dashboards/{dashboardID}
		/// </summary>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		public async Task DeleteDashboardsIDAsync(string dashboardID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Dashboard
		/// GetDashboardsID dashboards/{dashboardID}
		/// </summary>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		/// <param name="include">Includes the cell view properties in the response if set to `properties`</param>
		/// <returns>Retrieve a single dashboard</returns>
		public async Task<Dashboard> GetDashboardsIDAsync(string dashboardID, GetDashboardsIDInclude include, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID))+"&include=" + include;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Dashboard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a dashboard
		/// PatchDashboardsID dashboards/{dashboardID}
		/// </summary>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		/// <param name="requestBody">Patching of a dashboard</param>
		/// <returns>Updated dashboard</returns>
		public async Task<Dashboard> PatchDashboardsIDAsync(string dashboardID, PatchDashboardsIDPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Dashboard>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Create a dashboard cell
		/// PostDashboardsIDCells dashboards/{dashboardID}/cells
		/// </summary>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		/// <param name="requestBody">Cell that will be added</param>
		public async Task PostDashboardsIDCellsAsync(string dashboardID, CreateCell requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID))+"/cells";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replace cells in a dashboard
		/// Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
		/// PutDashboardsIDCells dashboards/{dashboardID}/cells
		/// </summary>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		public async Task PutDashboardsIDCellsAsync(string dashboardID, Cell[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID))+"/cells";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a dashboard cell
		/// DeleteDashboardsIDCellsID dashboards/{dashboardID}/cells/{cellID}
		/// </summary>
		/// <param name="dashboardID">The ID of the dashboard to delete.</param>
		/// <param name="cellID">The ID of the cell to delete.</param>
		public async Task DeleteDashboardsIDCellsIDAsync(string dashboardID, string cellID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID))+"/cells/"+ (cellID==null? "" : System.Uri.EscapeDataString(cellID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the non-positional information related to a cell
		/// Updates the non positional information related to a cell. Updates to a single cell's positional data could cause grid conflicts.
		/// PatchDashboardsIDCellsID dashboards/{dashboardID}/cells/{cellID}
		/// </summary>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		/// <param name="cellID">The ID of the cell to update.</param>
		/// <returns>Updated dashboard cell</returns>
		public async Task<Cell> PatchDashboardsIDCellsIDAsync(string dashboardID, string cellID, CellUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID))+"/cells/"+ (cellID==null? "" : System.Uri.EscapeDataString(cellID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Cell>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve the view for a cell
		/// GetDashboardsIDCellsIDView dashboards/{dashboardID}/cells/{cellID}/view
		/// </summary>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <param name="cellID">The cell ID.</param>
		/// <returns>A dashboard cells view</returns>
		public async Task<View> GetDashboardsIDCellsIDViewAsync(string dashboardID, string cellID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID))+"/cells/"+ (cellID==null? "" : System.Uri.EscapeDataString(cellID))+"/view";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<View>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update the view for a cell
		/// PatchDashboardsIDCellsIDView dashboards/{dashboardID}/cells/{cellID}/view
		/// </summary>
		/// <param name="dashboardID">The ID of the dashboard to update.</param>
		/// <param name="cellID">The ID of the cell to update.</param>
		/// <returns>Updated cell view</returns>
		public async Task<View> PatchDashboardsIDCellsIDViewAsync(string dashboardID, string cellID, View requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID))+"/cells/"+ (cellID==null? "" : System.Uri.EscapeDataString(cellID))+"/view";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<View>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all labels for a dashboard
		/// GetDashboardsIDLabels dashboards/{dashboardID}/labels
		/// </summary>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <returns>A list of all labels for a dashboard</returns>
		public async Task<LabelsResponse> GetDashboardsIDLabelsAsync(string dashboardID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LabelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a label to a dashboard
		/// PostDashboardsIDLabels dashboards/{dashboardID}/labels
		/// </summary>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <param name="requestBody">Label to add</param>
		public async Task PostDashboardsIDLabelsAsync(string dashboardID, LabelMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a label from a dashboard
		/// DeleteDashboardsIDLabelsID dashboards/{dashboardID}/labels/{labelID}
		/// </summary>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <param name="labelID">The ID of the label to delete.</param>
		public async Task DeleteDashboardsIDLabelsIDAsync(string dashboardID, string labelID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID))+"/labels/"+ (labelID==null? "" : System.Uri.EscapeDataString(labelID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all dashboard members
		/// GetDashboardsIDMembers dashboards/{dashboardID}/members
		/// </summary>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <returns>A list of users who have member privileges for a dashboard</returns>
		public async Task<ResourceMembers> GetDashboardsIDMembersAsync(string dashboardID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceMembers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a member to a dashboard
		/// PostDashboardsIDMembers dashboards/{dashboardID}/members
		/// </summary>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <param name="requestBody">User to add as member</param>
		public async Task PostDashboardsIDMembersAsync(string dashboardID, AddResourceMemberRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a member from a dashboard
		/// DeleteDashboardsIDMembersID dashboards/{dashboardID}/members/{userID}
		/// </summary>
		/// <param name="userID">The ID of the member to remove.</param>
		/// <param name="dashboardID">The dashboard ID.</param>
		public async Task DeleteDashboardsIDMembersIDAsync(string userID, string dashboardID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID))+"/members/"+ (userID==null? "" : System.Uri.EscapeDataString(userID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all dashboard owners
		/// GetDashboardsIDOwners dashboards/{dashboardID}/owners
		/// </summary>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <returns>A list of users who have owner privileges for a dashboard</returns>
		public async Task<ResourceOwners> GetDashboardsIDOwnersAsync(string dashboardID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID))+"/owners";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceOwners>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an owner to a dashboard
		/// PostDashboardsIDOwners dashboards/{dashboardID}/owners
		/// </summary>
		/// <param name="dashboardID">The dashboard ID.</param>
		/// <param name="requestBody">User to add as owner</param>
		public async Task PostDashboardsIDOwnersAsync(string dashboardID, AddResourceMemberRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID))+"/owners";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove an owner from a dashboard
		/// DeleteDashboardsIDOwnersID dashboards/{dashboardID}/owners/{userID}
		/// </summary>
		/// <param name="userID">The ID of the owner to remove.</param>
		/// <param name="dashboardID">The dashboard ID.</param>
		public async Task DeleteDashboardsIDOwnersIDAsync(string userID, string dashboardID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dashboards/"+ (dashboardID==null? "" : System.Uri.EscapeDataString(dashboardID))+"/owners/"+ (userID==null? "" : System.Uri.EscapeDataString(userID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all database retention policy mappings
		/// GetDBRPs dbrps
		/// </summary>
		/// <param name="orgID">Specifies the organization ID to filter on</param>
		/// <param name="id">Specifies the mapping ID to filter on</param>
		/// <param name="bucketID">Specifies the bucket ID to filter on</param>
		/// <param name="_default">Specifies filtering on default</param>
		/// <param name="db">Specifies the database to filter on</param>
		/// <param name="rp">Specifies the retention policy to filter on</param>
		/// <returns>A list of all database retention policy mappings</returns>
		public async Task<DBRPs> GetDBRPsAsync(string orgID, string id, string bucketID, bool _default, string db, string rp, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dbrps?orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&bucketID=" + (bucketID==null? "" : System.Uri.EscapeDataString(bucketID))+"&default="+_default+"&db=" + (db==null? "" : System.Uri.EscapeDataString(db))+"&rp=" + (rp==null? "" : System.Uri.EscapeDataString(rp));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DBRPs>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a database retention policy mapping
		/// PostDBRP dbrps
		/// </summary>
		/// <param name="requestBody">The database retention policy mapping to add</param>
		public async Task PostDBRPAsync(DBRP requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dbrps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a database retention policy
		/// DeleteDBRPID dbrps/{dbrpID}
		/// </summary>
		/// <param name="orgID">Specifies the organization ID of the mapping</param>
		/// <param name="dbrpID">The database retention policy mapping</param>
		public async Task DeleteDBRPIDAsync(string orgID, string dbrpID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dbrps/"+ (dbrpID==null? "" : System.Uri.EscapeDataString(dbrpID))+"?orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a database retention policy mapping
		/// GetDBRPsID dbrps/{dbrpID}
		/// </summary>
		/// <param name="orgID">Specifies the organization ID of the mapping</param>
		/// <param name="dbrpID">The database retention policy mapping ID</param>
		/// <returns>The database retention policy requested</returns>
		public async Task<DBRP> GetDBRPsIDAsync(string orgID, string dbrpID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dbrps/"+ (dbrpID==null? "" : System.Uri.EscapeDataString(dbrpID))+"?orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DBRP>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a database retention policy mapping
		/// PatchDBRPID dbrps/{dbrpID}
		/// </summary>
		/// <param name="orgID">Specifies the organization ID of the mapping</param>
		/// <param name="dbrpID">The database retention policy mapping.</param>
		/// <param name="requestBody">Database retention policy update to apply</param>
		/// <returns>An updated mapping</returns>
		public async Task<DBRP> PatchDBRPIDAsync(string orgID, string dbrpID, DBRPUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "dbrps/"+ (dbrpID==null? "" : System.Uri.EscapeDataString(dbrpID))+"?orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DBRP>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete time series data from InfluxDB
		/// PostDelete delete
		/// </summary>
		/// <param name="org">Specifies the organization to delete data from.</param>
		/// <param name="bucket">Specifies the bucket to delete data from.</param>
		/// <param name="orgID">Specifies the organization ID of the resource.</param>
		/// <param name="bucketID">Specifies the bucket ID to delete data from.</param>
		/// <param name="requestBody">Predicate delete request</param>
		public async Task PostDeleteAsync(string org, string bucket, string orgID, string bucketID, DeletePredicateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "delete?org=" + (org==null? "" : System.Uri.EscapeDataString(org))+"&bucket=" + (bucket==null? "" : System.Uri.EscapeDataString(bucket))+"&orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"&bucketID=" + (bucketID==null? "" : System.Uri.EscapeDataString(bucketID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all templates
		/// GetDocumentsTemplates documents/templates
		/// </summary>
		/// <param name="org">Specifies the name of the organization of the template.</param>
		/// <param name="orgID">Specifies the organization ID of the template.</param>
		/// <returns>A list of template documents</returns>
		public async Task<Documents> GetDocumentsTemplatesAsync(string org, string orgID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/templates?org=" + (org==null? "" : System.Uri.EscapeDataString(org))+"&orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Documents>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a template
		/// PostDocumentsTemplates documents/templates
		/// </summary>
		/// <param name="requestBody">Template that will be created</param>
		public async Task PostDocumentsTemplatesAsync(DocumentCreate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/templates";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a template
		/// DeleteDocumentsTemplatesID documents/templates/{templateID}
		/// </summary>
		/// <param name="templateID">The template ID.</param>
		public async Task DeleteDocumentsTemplatesIDAsync(string templateID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/templates/"+ (templateID==null? "" : System.Uri.EscapeDataString(templateID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a template
		/// GetDocumentsTemplatesID documents/templates/{templateID}
		/// </summary>
		/// <param name="templateID">The template ID.</param>
		/// <returns>The template requested</returns>
		public async Task<Document> GetDocumentsTemplatesIDAsync(string templateID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/templates/"+ (templateID==null? "" : System.Uri.EscapeDataString(templateID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Document>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a template
		/// PutDocumentsTemplatesID documents/templates/{templateID}
		/// </summary>
		/// <param name="templateID">The template ID.</param>
		/// <param name="requestBody">Template that will be updated</param>
		/// <returns>The newly updated template</returns>
		public async Task<Document> PutDocumentsTemplatesIDAsync(string templateID, DocumentUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/templates/"+ (templateID==null? "" : System.Uri.EscapeDataString(templateID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Document>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all labels for a template
		/// GetDocumentsTemplatesIDLabels documents/templates/{templateID}/labels
		/// </summary>
		/// <param name="templateID">The template ID.</param>
		/// <returns>A list of all labels for a template</returns>
		public async Task<LabelsResponse> GetDocumentsTemplatesIDLabelsAsync(string templateID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/templates/"+ (templateID==null? "" : System.Uri.EscapeDataString(templateID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LabelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a label to a template
		/// PostDocumentsTemplatesIDLabels documents/templates/{templateID}/labels
		/// </summary>
		/// <param name="templateID">The template ID.</param>
		/// <param name="requestBody">Label to add</param>
		public async Task PostDocumentsTemplatesIDLabelsAsync(string templateID, LabelMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/templates/"+ (templateID==null? "" : System.Uri.EscapeDataString(templateID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a label from a template
		/// DeleteDocumentsTemplatesIDLabelsID documents/templates/{templateID}/labels/{labelID}
		/// </summary>
		/// <param name="templateID">The template ID.</param>
		/// <param name="labelID">The label ID.</param>
		public async Task DeleteDocumentsTemplatesIDLabelsIDAsync(string templateID, string labelID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "documents/templates/"+ (templateID==null? "" : System.Uri.EscapeDataString(templateID))+"/labels/"+ (labelID==null? "" : System.Uri.EscapeDataString(labelID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return the feature flags for the currently authenticated user
		/// GetFlags flags
		/// </summary>
		/// <returns>Feature flags for the currently authenticated user</returns>
		public async Task<Flags> GetFlagsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "flags";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Flags>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the health of an instance
		/// GetHealth health
		/// </summary>
		/// <returns>The instance is healthy</returns>
		public async Task<HealthCheck> GetHealthAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "health";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HealthCheck>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all labels
		/// GetLabels labels
		/// </summary>
		/// <param name="orgID">The organization ID.</param>
		/// <returns>A list of labels</returns>
		public async Task<LabelsResponse> GetLabelsAsync(string orgID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "labels?orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LabelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a label
		/// PostLabels labels
		/// </summary>
		/// <param name="requestBody">Label to create</param>
		public async Task PostLabelsAsync(LabelCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a label
		/// DeleteLabelsID labels/{labelID}
		/// </summary>
		/// <param name="labelID">The ID of the label to delete.</param>
		public async Task DeleteLabelsIDAsync(string labelID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "labels/"+ (labelID==null? "" : System.Uri.EscapeDataString(labelID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a label
		/// GetLabelsID labels/{labelID}
		/// </summary>
		/// <param name="labelID">The ID of the label to update.</param>
		/// <returns>A label</returns>
		public async Task<LabelResponse> GetLabelsIDAsync(string labelID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "labels/"+ (labelID==null? "" : System.Uri.EscapeDataString(labelID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LabelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a label
		/// PatchLabelsID labels/{labelID}
		/// </summary>
		/// <param name="labelID">The ID of the label to update.</param>
		/// <param name="requestBody">Label update</param>
		/// <returns>Updated label</returns>
		public async Task<LabelResponse> PatchLabelsIDAsync(string labelID, LabelUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "labels/"+ (labelID==null? "" : System.Uri.EscapeDataString(labelID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LabelResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve the currently authenticated user
		/// GetMe me
		/// </summary>
		/// <returns>The currently authenticated user.</returns>
		public async Task<UserResponse> GetMeAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a password
		/// PutMePassword me/password
		/// </summary>
		/// <param name="requestBody">New password</param>
		public async Task PutMePasswordAsync(PasswordResetBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "me/password";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all notification endpoints
		/// GetNotificationEndpoints notificationEndpoints
		/// </summary>
		/// <param name="orgID">Only show notification endpoints that belong to specific organization ID.</param>
		/// <returns>A list of notification endpoints</returns>
		public async Task<NotificationEndpoints> GetNotificationEndpointsAsync(int offset, int limit, string orgID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationEndpoints?offset="+offset+"&limit="+limit+"&orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NotificationEndpoints>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a notification endpoint
		/// CreateNotificationEndpoint notificationEndpoints
		/// </summary>
		/// <param name="requestBody">Notification endpoint to create</param>
		public async Task CreateNotificationEndpointAsync(PostNotificationEndpoint requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationEndpoints";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a notification endpoint
		/// DeleteNotificationEndpointsID notificationEndpoints/{endpointID}
		/// </summary>
		/// <param name="endpointID">The notification endpoint ID.</param>
		public async Task DeleteNotificationEndpointsIDAsync(string endpointID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationEndpoints/"+ (endpointID==null? "" : System.Uri.EscapeDataString(endpointID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a notification endpoint
		/// GetNotificationEndpointsID notificationEndpoints/{endpointID}
		/// </summary>
		/// <param name="endpointID">The notification endpoint ID.</param>
		/// <returns>The notification endpoint requested</returns>
		public async Task<NotificationEndpoint> GetNotificationEndpointsIDAsync(string endpointID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationEndpoints/"+ (endpointID==null? "" : System.Uri.EscapeDataString(endpointID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NotificationEndpoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a notification endpoint
		/// PatchNotificationEndpointsID notificationEndpoints/{endpointID}
		/// </summary>
		/// <param name="endpointID">The notification endpoint ID.</param>
		/// <param name="requestBody">Check update to apply</param>
		/// <returns>An updated notification endpoint</returns>
		public async Task<NotificationEndpoint> PatchNotificationEndpointsIDAsync(string endpointID, NotificationEndpointUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationEndpoints/"+ (endpointID==null? "" : System.Uri.EscapeDataString(endpointID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NotificationEndpoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a notification endpoint
		/// PutNotificationEndpointsID notificationEndpoints/{endpointID}
		/// </summary>
		/// <param name="endpointID">The notification endpoint ID.</param>
		/// <param name="requestBody">A new notification endpoint to replace the existing endpoint with</param>
		/// <returns>An updated notification endpoint</returns>
		public async Task<NotificationEndpoint> PutNotificationEndpointsIDAsync(string endpointID, NotificationEndpoint requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationEndpoints/"+ (endpointID==null? "" : System.Uri.EscapeDataString(endpointID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NotificationEndpoint>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all labels for a notification endpoint
		/// GetNotificationEndpointsIDLabels notificationEndpoints/{endpointID}/labels
		/// </summary>
		/// <param name="endpointID">The notification endpoint ID.</param>
		/// <returns>A list of all labels for a notification endpoint</returns>
		public async Task<LabelsResponse> GetNotificationEndpointsIDLabelsAsync(string endpointID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationEndpoints/"+ (endpointID==null? "" : System.Uri.EscapeDataString(endpointID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LabelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a label to a notification endpoint
		/// PostNotificationEndpointIDLabels notificationEndpoints/{endpointID}/labels
		/// </summary>
		/// <param name="endpointID">The notification endpoint ID.</param>
		/// <param name="requestBody">Label to add</param>
		public async Task PostNotificationEndpointIDLabelsAsync(string endpointID, LabelMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationEndpoints/"+ (endpointID==null? "" : System.Uri.EscapeDataString(endpointID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a label from a notification endpoint
		/// DeleteNotificationEndpointsIDLabelsID notificationEndpoints/{endpointID}/labels/{labelID}
		/// </summary>
		/// <param name="endpointID">The notification endpoint ID.</param>
		/// <param name="labelID">The ID of the label to delete.</param>
		public async Task DeleteNotificationEndpointsIDLabelsIDAsync(string endpointID, string labelID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationEndpoints/"+ (endpointID==null? "" : System.Uri.EscapeDataString(endpointID))+"/labels/"+ (labelID==null? "" : System.Uri.EscapeDataString(labelID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all notification rules
		/// GetNotificationRules notificationRules
		/// </summary>
		/// <param name="orgID">Only show notification rules that belong to a specific organization ID.</param>
		/// <param name="checkID">Only show notifications that belong to the specific check ID.</param>
		/// <param name="tag">Only return notification rules that "would match" statuses which contain the tag key value pairs provided.</param>
		/// <returns>A list of notification rules</returns>
		public async Task<NotificationRules> GetNotificationRulesAsync(int offset, int limit, string orgID, string checkID, string tag, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationRules?offset="+offset+"&limit="+limit+"&orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"&checkID=" + (checkID==null? "" : System.Uri.EscapeDataString(checkID))+"&tag=" + (tag==null? "" : System.Uri.EscapeDataString(tag));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NotificationRules>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a notification rule
		/// CreateNotificationRule notificationRules
		/// </summary>
		/// <param name="requestBody">Notification rule to create</param>
		public async Task CreateNotificationRuleAsync(PostNotificationRule requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationRules";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a notification rule
		/// DeleteNotificationRulesID notificationRules/{ruleID}
		/// </summary>
		/// <param name="ruleID">The notification rule ID.</param>
		public async Task DeleteNotificationRulesIDAsync(string ruleID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationRules/"+ (ruleID==null? "" : System.Uri.EscapeDataString(ruleID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a notification rule
		/// GetNotificationRulesID notificationRules/{ruleID}
		/// </summary>
		/// <param name="ruleID">The notification rule ID.</param>
		/// <returns>The notification rule requested</returns>
		public async Task<NotificationRule> GetNotificationRulesIDAsync(string ruleID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationRules/"+ (ruleID==null? "" : System.Uri.EscapeDataString(ruleID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NotificationRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a notification rule
		/// PatchNotificationRulesID notificationRules/{ruleID}
		/// </summary>
		/// <param name="ruleID">The notification rule ID.</param>
		/// <param name="requestBody">Notification rule update to apply</param>
		/// <returns>An updated notification rule</returns>
		public async Task<NotificationRule> PatchNotificationRulesIDAsync(string ruleID, NotificationRuleUpdate requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationRules/"+ (ruleID==null? "" : System.Uri.EscapeDataString(ruleID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NotificationRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a notification rule
		/// PutNotificationRulesID notificationRules/{ruleID}
		/// </summary>
		/// <param name="ruleID">The notification rule ID.</param>
		/// <param name="requestBody">Notification rule update to apply</param>
		/// <returns>An updated notification rule</returns>
		public async Task<NotificationRule> PutNotificationRulesIDAsync(string ruleID, NotificationRule requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationRules/"+ (ruleID==null? "" : System.Uri.EscapeDataString(ruleID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<NotificationRule>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all labels for a notification rule
		/// GetNotificationRulesIDLabels notificationRules/{ruleID}/labels
		/// </summary>
		/// <param name="ruleID">The notification rule ID.</param>
		/// <returns>A list of all labels for a notification rule</returns>
		public async Task<LabelsResponse> GetNotificationRulesIDLabelsAsync(string ruleID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationRules/"+ (ruleID==null? "" : System.Uri.EscapeDataString(ruleID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LabelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a label to a notification rule
		/// PostNotificationRuleIDLabels notificationRules/{ruleID}/labels
		/// </summary>
		/// <param name="ruleID">The notification rule ID.</param>
		/// <param name="requestBody">Label to add</param>
		public async Task PostNotificationRuleIDLabelsAsync(string ruleID, LabelMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationRules/"+ (ruleID==null? "" : System.Uri.EscapeDataString(ruleID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete label from a notification rule
		/// DeleteNotificationRulesIDLabelsID notificationRules/{ruleID}/labels/{labelID}
		/// </summary>
		/// <param name="ruleID">The notification rule ID.</param>
		/// <param name="labelID">The ID of the label to delete.</param>
		public async Task DeleteNotificationRulesIDLabelsIDAsync(string ruleID, string labelID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationRules/"+ (ruleID==null? "" : System.Uri.EscapeDataString(ruleID))+"/labels/"+ (labelID==null? "" : System.Uri.EscapeDataString(labelID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a notification rule query
		/// GetNotificationRulesIDQuery notificationRules/{ruleID}/query
		/// </summary>
		/// <param name="ruleID">The notification rule ID.</param>
		/// <returns>The notification rule query requested</returns>
		public async Task<FluxResponse> GetNotificationRulesIDQueryAsync(string ruleID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "notificationRules/"+ (ruleID==null? "" : System.Uri.EscapeDataString(ruleID))+"/query";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FluxResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all organizations
		/// GetOrgs orgs
		/// </summary>
		/// <param name="org">Filter organizations to a specific organization name.</param>
		/// <param name="orgID">Filter organizations to a specific organization ID.</param>
		/// <param name="userID">Filter organizations to a specific user ID.</param>
		/// <returns>A list of organizations</returns>
		public async Task<Organizations> GetOrgsAsync(int offset, int limit, bool descending, string org, string orgID, string userID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orgs?offset="+offset+"&limit="+limit+"&descending="+descending+"&org=" + (org==null? "" : System.Uri.EscapeDataString(org))+"&orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"&userID=" + (userID==null? "" : System.Uri.EscapeDataString(userID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Organizations>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create an organization
		/// PostOrgs orgs
		/// </summary>
		/// <param name="requestBody">Organization to create</param>
		public async Task PostOrgsAsync(PostOrganizationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orgs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete an organization
		/// DeleteOrgsID orgs/{orgID}
		/// </summary>
		/// <param name="orgID">The ID of the organization to delete.</param>
		public async Task DeleteOrgsIDAsync(string orgID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orgs/"+ (orgID==null? "" : System.Uri.EscapeDataString(orgID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve an organization
		/// GetOrgsID orgs/{orgID}
		/// </summary>
		/// <param name="orgID">The ID of the organization to get.</param>
		/// <returns>Organization details</returns>
		public async Task<Organization> GetOrgsIDAsync(string orgID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orgs/"+ (orgID==null? "" : System.Uri.EscapeDataString(orgID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Organization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an organization
		/// PatchOrgsID orgs/{orgID}
		/// </summary>
		/// <param name="orgID">The ID of the organization to get.</param>
		/// <param name="requestBody">Organization update to apply</param>
		/// <returns>Organization updated</returns>
		public async Task<Organization> PatchOrgsIDAsync(string orgID, PatchOrganizationRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orgs/"+ (orgID==null? "" : System.Uri.EscapeDataString(orgID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Organization>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all members of an organization
		/// GetOrgsIDMembers orgs/{orgID}/members
		/// </summary>
		/// <param name="orgID">The organization ID.</param>
		/// <returns>A list of organization members</returns>
		public async Task<ResourceMembers> GetOrgsIDMembersAsync(string orgID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orgs/"+ (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceMembers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a member to an organization
		/// PostOrgsIDMembers orgs/{orgID}/members
		/// </summary>
		/// <param name="orgID">The organization ID.</param>
		/// <param name="requestBody">User to add as member</param>
		public async Task PostOrgsIDMembersAsync(string orgID, AddResourceMemberRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orgs/"+ (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a member from an organization
		/// DeleteOrgsIDMembersID orgs/{orgID}/members/{userID}
		/// </summary>
		/// <param name="userID">The ID of the member to remove.</param>
		/// <param name="orgID">The organization ID.</param>
		public async Task DeleteOrgsIDMembersIDAsync(string userID, string orgID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orgs/"+ (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"/members/"+ (userID==null? "" : System.Uri.EscapeDataString(userID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all owners of an organization
		/// GetOrgsIDOwners orgs/{orgID}/owners
		/// </summary>
		/// <param name="orgID">The organization ID.</param>
		/// <returns>A list of organization owners</returns>
		public async Task<ResourceOwners> GetOrgsIDOwnersAsync(string orgID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orgs/"+ (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"/owners";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceOwners>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an owner to an organization
		/// PostOrgsIDOwners orgs/{orgID}/owners
		/// </summary>
		/// <param name="orgID">The organization ID.</param>
		/// <param name="requestBody">User to add as owner</param>
		public async Task PostOrgsIDOwnersAsync(string orgID, AddResourceMemberRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orgs/"+ (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"/owners";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove an owner from an organization
		/// DeleteOrgsIDOwnersID orgs/{orgID}/owners/{userID}
		/// </summary>
		/// <param name="userID">The ID of the owner to remove.</param>
		/// <param name="orgID">The organization ID.</param>
		public async Task DeleteOrgsIDOwnersIDAsync(string userID, string orgID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orgs/"+ (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"/owners/"+ (userID==null? "" : System.Uri.EscapeDataString(userID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all secret keys for an organization
		/// GetOrgsIDSecrets orgs/{orgID}/secrets
		/// </summary>
		/// <param name="orgID">The organization ID.</param>
		/// <returns>A list of all secret keys</returns>
		public async Task<SecretKeysResponse> GetOrgsIDSecretsAsync(string orgID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orgs/"+ (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"/secrets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SecretKeysResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update secrets in an organization
		/// PatchOrgsIDSecrets orgs/{orgID}/secrets
		/// </summary>
		/// <param name="orgID">The organization ID.</param>
		/// <param name="requestBody">Secret key value pairs to update/add</param>
		public async Task PatchOrgsIDSecretsAsync(string orgID, Secrets requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orgs/"+ (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"/secrets";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete secrets from an organization
		/// PostOrgsIDSecrets orgs/{orgID}/secrets/delete
		/// </summary>
		/// <param name="orgID">The organization ID.</param>
		/// <param name="requestBody">Secret key to delete</param>
		public async Task PostOrgsIDSecretsAsync(string orgID, SecretKeys requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "orgs/"+ (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"/secrets/delete";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Query InfluxDB
		/// PostQuery query
		/// </summary>
		/// <param name="org">Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence.</param>
		/// <param name="orgID">Specifies the ID of the organization executing the query. If both `orgID` and `org` are specified, `org` takes precedence.</param>
		/// <param name="requestBody">Flux query or specification to execute</param>
		/// <returns>Query results</returns>
		public async Task PostQueryAsync(string org, string orgID, Query requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "query?org=" + (org==null? "" : System.Uri.EscapeDataString(org))+"&orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Analyze an InfluxQL or Flux query
		/// PostQueryAnalyze query/analyze
		/// </summary>
		/// <param name="requestBody">Flux or InfluxQL query to analyze</param>
		/// <returns>Query analyze results. Errors will be empty if the query is valid.</returns>
		public async Task<AnalyzeQueryResponse> PostQueryAnalyzeAsync(Query requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "query/analyze";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AnalyzeQueryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Generate an Abstract Syntax Tree (AST) from a query
		/// Analyzes flux query and generates a query specification.
		/// PostQueryAst query/ast
		/// </summary>
		/// <param name="requestBody">Analyzed Flux query to generate abstract syntax tree.</param>
		/// <returns>Abstract syntax tree of the flux query.</returns>
		public async Task<ASTResponse> PostQueryAstAsync(LanguageRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "query/ast";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ASTResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieve query suggestions
		/// GetQuerySuggestions query/suggestions
		/// </summary>
		/// <returns>Suggestions for next functions in call chain</returns>
		public async Task<FluxSuggestions> GetQuerySuggestionsAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "query/suggestions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FluxSuggestions>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve query suggestions for a branching suggestion
		/// GetQuerySuggestionsName query/suggestions/{name}
		/// </summary>
		/// <param name="name">The name of the branching suggestion.</param>
		/// <returns>Suggestions for next functions in call chain</returns>
		public async Task<FluxSuggestion> GetQuerySuggestionsNameAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "query/suggestions/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FluxSuggestion>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the readiness of an instance at startup
		/// GetReady ready
		/// </summary>
		/// <returns>The instance is ready</returns>
		public async Task<Ready> GetReadyAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ready";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Ready>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all scraper targets
		/// GetScrapers scrapers
		/// </summary>
		/// <param name="name">Specifies the name of the scraper target.</param>
		/// <param name="id">List of scraper target IDs to return. If both `id` and `owner` are specified, only `id` is used.</param>
		/// <param name="orgID">Specifies the organization ID of the scraper target.</param>
		/// <param name="org">Specifies the organization name of the scraper target.</param>
		/// <returns>All scraper targets</returns>
		public async Task<ScraperTargetResponses> GetScrapersAsync(string name, string[] id, string orgID, string org, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrapers?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&"+string.Join("&", id.Select(z => $"id={System.Uri.EscapeDataString(z.ToString())}"))+"&orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"&org=" + (org==null? "" : System.Uri.EscapeDataString(org));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScraperTargetResponses>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a scraper target
		/// PostScrapers scrapers
		/// </summary>
		/// <param name="requestBody">Scraper target to create</param>
		public async Task PostScrapersAsync(ScraperTargetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrapers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a scraper target
		/// DeleteScrapersID scrapers/{scraperTargetID}
		/// </summary>
		/// <param name="scraperTargetID">The identifier of the scraper target.</param>
		public async Task DeleteScrapersIDAsync(string scraperTargetID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrapers/"+ (scraperTargetID==null? "" : System.Uri.EscapeDataString(scraperTargetID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a scraper target
		/// GetScrapersID scrapers/{scraperTargetID}
		/// </summary>
		/// <param name="scraperTargetID">The identifier of the scraper target.</param>
		/// <returns>The scraper target</returns>
		public async Task<ScraperTargetResponse> GetScrapersIDAsync(string scraperTargetID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrapers/"+ (scraperTargetID==null? "" : System.Uri.EscapeDataString(scraperTargetID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScraperTargetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a scraper target
		/// PatchScrapersID scrapers/{scraperTargetID}
		/// </summary>
		/// <param name="scraperTargetID">The identifier of the scraper target.</param>
		/// <param name="requestBody">Scraper target update to apply</param>
		/// <returns>Scraper target updated</returns>
		public async Task<ScraperTargetResponse> PatchScrapersIDAsync(string scraperTargetID, ScraperTargetRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrapers/"+ (scraperTargetID==null? "" : System.Uri.EscapeDataString(scraperTargetID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScraperTargetResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all labels for a scraper target
		/// GetScrapersIDLabels scrapers/{scraperTargetID}/labels
		/// </summary>
		/// <param name="scraperTargetID">The scraper target ID.</param>
		/// <returns>A list of labels for a scraper target.</returns>
		public async Task<LabelsResponse> GetScrapersIDLabelsAsync(string scraperTargetID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrapers/"+ (scraperTargetID==null? "" : System.Uri.EscapeDataString(scraperTargetID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LabelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a label to a scraper target
		/// PostScrapersIDLabels scrapers/{scraperTargetID}/labels
		/// </summary>
		/// <param name="scraperTargetID">The scraper target ID.</param>
		/// <param name="requestBody">Label to add</param>
		public async Task PostScrapersIDLabelsAsync(string scraperTargetID, LabelMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrapers/"+ (scraperTargetID==null? "" : System.Uri.EscapeDataString(scraperTargetID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a label from a scraper target
		/// DeleteScrapersIDLabelsID scrapers/{scraperTargetID}/labels/{labelID}
		/// </summary>
		/// <param name="scraperTargetID">The scraper target ID.</param>
		/// <param name="labelID">The label ID.</param>
		public async Task DeleteScrapersIDLabelsIDAsync(string scraperTargetID, string labelID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrapers/"+ (scraperTargetID==null? "" : System.Uri.EscapeDataString(scraperTargetID))+"/labels/"+ (labelID==null? "" : System.Uri.EscapeDataString(labelID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all users with member privileges for a scraper target
		/// GetScrapersIDMembers scrapers/{scraperTargetID}/members
		/// </summary>
		/// <param name="scraperTargetID">The scraper target ID.</param>
		/// <returns>A list of scraper target members</returns>
		public async Task<ResourceMembers> GetScrapersIDMembersAsync(string scraperTargetID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrapers/"+ (scraperTargetID==null? "" : System.Uri.EscapeDataString(scraperTargetID))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceMembers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a member to a scraper target
		/// PostScrapersIDMembers scrapers/{scraperTargetID}/members
		/// </summary>
		/// <param name="scraperTargetID">The scraper target ID.</param>
		/// <param name="requestBody">User to add as member</param>
		public async Task PostScrapersIDMembersAsync(string scraperTargetID, AddResourceMemberRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrapers/"+ (scraperTargetID==null? "" : System.Uri.EscapeDataString(scraperTargetID))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a member from a scraper target
		/// DeleteScrapersIDMembersID scrapers/{scraperTargetID}/members/{userID}
		/// </summary>
		/// <param name="userID">The ID of member to remove.</param>
		/// <param name="scraperTargetID">The scraper target ID.</param>
		public async Task DeleteScrapersIDMembersIDAsync(string userID, string scraperTargetID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrapers/"+ (scraperTargetID==null? "" : System.Uri.EscapeDataString(scraperTargetID))+"/members/"+ (userID==null? "" : System.Uri.EscapeDataString(userID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all owners of a scraper target
		/// GetScrapersIDOwners scrapers/{scraperTargetID}/owners
		/// </summary>
		/// <param name="scraperTargetID">The scraper target ID.</param>
		/// <returns>A list of scraper target owners</returns>
		public async Task<ResourceOwners> GetScrapersIDOwnersAsync(string scraperTargetID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrapers/"+ (scraperTargetID==null? "" : System.Uri.EscapeDataString(scraperTargetID))+"/owners";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceOwners>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an owner to a scraper target
		/// PostScrapersIDOwners scrapers/{scraperTargetID}/owners
		/// </summary>
		/// <param name="scraperTargetID">The scraper target ID.</param>
		/// <param name="requestBody">User to add as owner</param>
		public async Task PostScrapersIDOwnersAsync(string scraperTargetID, AddResourceMemberRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrapers/"+ (scraperTargetID==null? "" : System.Uri.EscapeDataString(scraperTargetID))+"/owners";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove an owner from a scraper target
		/// DeleteScrapersIDOwnersID scrapers/{scraperTargetID}/owners/{userID}
		/// </summary>
		/// <param name="userID">The ID of owner to remove.</param>
		/// <param name="scraperTargetID">The scraper target ID.</param>
		public async Task DeleteScrapersIDOwnersIDAsync(string userID, string scraperTargetID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "scrapers/"+ (scraperTargetID==null? "" : System.Uri.EscapeDataString(scraperTargetID))+"/owners/"+ (userID==null? "" : System.Uri.EscapeDataString(userID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Check if database has default user, org, bucket
		/// Returns `true` if no default user, organization, or bucket has been created.
		/// GetSetup setup
		/// </summary>
		/// <returns>allowed true or false</returns>
		public async Task<IsOnboarding> GetSetupAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<IsOnboarding>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Set up initial user, org and bucket
		/// Post an onboarding request to set up initial user, org and bucket.
		/// PostSetup setup
		/// </summary>
		/// <param name="requestBody">Source to create</param>
		public async Task PostSetupAsync(OnboardingRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "setup";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Exchange basic auth credentials for session
		/// PostSignin signin
		/// </summary>
		public async Task PostSigninAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signin";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Expire the current session
		/// PostSignout signout
		/// </summary>
		public async Task PostSignoutAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signout";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all sources
		/// GetSources sources
		/// </summary>
		/// <param name="org">The name of the organization.</param>
		/// <returns>A list of sources</returns>
		public async Task<Sources> GetSourcesAsync(string org, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources?org=" + (org==null? "" : System.Uri.EscapeDataString(org));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Sources>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a source
		/// PostSources sources
		/// </summary>
		/// <param name="requestBody">Source to create</param>
		public async Task PostSourcesAsync(Source requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a source
		/// DeleteSourcesID sources/{sourceID}
		/// </summary>
		/// <param name="sourceID">The source ID.</param>
		public async Task DeleteSourcesIDAsync(string sourceID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources/"+ (sourceID==null? "" : System.Uri.EscapeDataString(sourceID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a source
		/// GetSourcesID sources/{sourceID}
		/// </summary>
		/// <param name="sourceID">The source ID.</param>
		/// <returns>A source</returns>
		public async Task<Source> GetSourcesIDAsync(string sourceID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources/"+ (sourceID==null? "" : System.Uri.EscapeDataString(sourceID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Source>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Source
		/// PatchSourcesID sources/{sourceID}
		/// </summary>
		/// <param name="sourceID">The source ID.</param>
		/// <param name="requestBody">Source update</param>
		/// <returns>Created Source</returns>
		public async Task<Source> PatchSourcesIDAsync(string sourceID, Source requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources/"+ (sourceID==null? "" : System.Uri.EscapeDataString(sourceID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Source>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get buckets in a source
		/// GetSourcesIDBuckets sources/{sourceID}/buckets
		/// </summary>
		/// <param name="sourceID">The source ID.</param>
		/// <param name="org">The name of the organization.</param>
		/// <returns>A source</returns>
		public async Task<Buckets> GetSourcesIDBucketsAsync(string sourceID, string org, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources/"+ (sourceID==null? "" : System.Uri.EscapeDataString(sourceID))+"/buckets&org=" + (org==null? "" : System.Uri.EscapeDataString(org));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Buckets>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the health of a source
		/// GetSourcesIDHealth sources/{sourceID}/health
		/// </summary>
		/// <param name="sourceID">The source ID.</param>
		/// <returns>The source is healthy</returns>
		public async Task<HealthCheck> GetSourcesIDHealthAsync(string sourceID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "sources/"+ (sourceID==null? "" : System.Uri.EscapeDataString(sourceID))+"/health";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<HealthCheck>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all installed InfluxDB templates
		/// ListStacks stacks
		/// </summary>
		/// <param name="orgID">The organization id of the stacks</param>
		/// <param name="name">A collection of names to filter the list by.</param>
		/// <param name="stackID">A collection of stackIDs to filter the list by.</param>
		/// <returns>Influx stacks found</returns>
		public async Task<ListStacksReturn> ListStacksAsync(string orgID, string name, string stackID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stacks?orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&stackID=" + (stackID==null? "" : System.Uri.EscapeDataString(stackID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListStacksReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new stack
		/// CreateStack stacks
		/// </summary>
		/// <param name="requestBody">Stack to create.</param>
		public async Task CreateStackAsync(CreateStackPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stacks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a stack and associated resources
		/// DeleteStack stacks/{stack_id}
		/// </summary>
		/// <param name="stack_id">Theidentifier of the stack.</param>
		/// <param name="orgID">The identifier of the organization.</param>
		public async Task DeleteStackAsync(string stack_id, string orgID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stacks/"+ (stack_id==null? "" : System.Uri.EscapeDataString(stack_id))+"&orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a stack
		/// ReadStack stacks/{stack_id}
		/// </summary>
		/// <param name="stack_id">Theidentifier of the stack.</param>
		/// <returns>The InfluxDB stack</returns>
		public async Task<Stack> ReadStackAsync(string stack_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stacks/"+ (stack_id==null? "" : System.Uri.EscapeDataString(stack_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Stack>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update an InfluxDB Stack
		/// UpdateStack stacks/{stack_id}
		/// </summary>
		/// <param name="stack_id">Theidentifier of the stack.</param>
		/// <param name="requestBody">Influx stack to update.</param>
		/// <returns>Influx stack updated</returns>
		public async Task<Stack> UpdateStackAsync(string stack_id, UpdateStackPatchBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stacks/"+ (stack_id==null? "" : System.Uri.EscapeDataString(stack_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Stack>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Uninstall an InfluxDB Stack
		/// UninstallStack stacks/{stack_id}/uninstall
		/// </summary>
		/// <param name="stack_id">The stack id</param>
		/// <returns>Influx stack uninstalled</returns>
		public async Task<Stack> UninstallStackAsync(string stack_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stacks/"+ (stack_id==null? "" : System.Uri.EscapeDataString(stack_id))+"/uninstall";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Stack>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all tasks
		/// GetTasks tasks
		/// </summary>
		/// <param name="name">Returns task with a specific name.</param>
		/// <param name="after">Return tasks after a specified ID.</param>
		/// <param name="user">Filter tasks to a specific user ID.</param>
		/// <param name="org">Filter tasks to a specific organization name.</param>
		/// <param name="orgID">Filter tasks to a specific organization ID.</param>
		/// <param name="status">Filter tasks by a status--"inactive" or "active".</param>
		/// <param name="limit">The number of tasks to return</param>
		/// <returns>A list of tasks</returns>
		public async Task<Tasks> GetTasksAsync(string name, string after, string user, string org, string orgID, AuthorizationUpdateRequestStatus status, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&after=" + (after==null? "" : System.Uri.EscapeDataString(after))+"&user=" + (user==null? "" : System.Uri.EscapeDataString(user))+"&org=" + (org==null? "" : System.Uri.EscapeDataString(org))+"&orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID))+"&status=" + status+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Tasks>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a new task
		/// PostTasks tasks
		/// </summary>
		/// <param name="requestBody">Task to create</param>
		public async Task PostTasksAsync(TaskCreateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a task
		/// Deletes a task and all associated records
		/// DeleteTasksID tasks/{taskID}
		/// </summary>
		/// <param name="taskID">The ID of the task to delete.</param>
		public async Task DeleteTasksIDAsync(string taskID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a task
		/// GetTasksID tasks/{taskID}
		/// </summary>
		/// <param name="taskID">The task ID.</param>
		/// <returns>Task details</returns>
		public async Task<Task_> GetTasksIDAsync(string taskID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Task_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a task
		/// Update a task. This will cancel all queued runs.
		/// PatchTasksID tasks/{taskID}
		/// </summary>
		/// <param name="taskID">The task ID.</param>
		/// <param name="requestBody">Task update to apply</param>
		/// <returns>Task updated</returns>
		public async Task<Task_> PatchTasksIDAsync(string taskID, TaskUpdateRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Task_>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all labels for a task
		/// GetTasksIDLabels tasks/{taskID}/labels
		/// </summary>
		/// <param name="taskID">The task ID.</param>
		/// <returns>A list of all labels for a task</returns>
		public async Task<LabelsResponse> GetTasksIDLabelsAsync(string taskID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LabelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a label to a task
		/// PostTasksIDLabels tasks/{taskID}/labels
		/// </summary>
		/// <param name="taskID">The task ID.</param>
		/// <param name="requestBody">Label to add</param>
		public async Task PostTasksIDLabelsAsync(string taskID, LabelMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a label from a task
		/// DeleteTasksIDLabelsID tasks/{taskID}/labels/{labelID}
		/// </summary>
		/// <param name="taskID">The task ID.</param>
		/// <param name="labelID">The label ID.</param>
		public async Task DeleteTasksIDLabelsIDAsync(string taskID, string labelID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID))+"/labels/"+ (labelID==null? "" : System.Uri.EscapeDataString(labelID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all logs for a task
		/// GetTasksIDLogs tasks/{taskID}/logs
		/// </summary>
		/// <param name="taskID">The task ID.</param>
		/// <returns>All logs for a task</returns>
		public async Task<Logs> GetTasksIDLogsAsync(string taskID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID))+"/logs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Logs>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all task members
		/// GetTasksIDMembers tasks/{taskID}/members
		/// </summary>
		/// <param name="taskID">The task ID.</param>
		/// <returns>A list of users who have member privileges for a task</returns>
		public async Task<ResourceMembers> GetTasksIDMembersAsync(string taskID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceMembers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a member to a task
		/// PostTasksIDMembers tasks/{taskID}/members
		/// </summary>
		/// <param name="taskID">The task ID.</param>
		/// <param name="requestBody">User to add as member</param>
		public async Task PostTasksIDMembersAsync(string taskID, AddResourceMemberRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a member from a task
		/// DeleteTasksIDMembersID tasks/{taskID}/members/{userID}
		/// </summary>
		/// <param name="userID">The ID of the member to remove.</param>
		/// <param name="taskID">The task ID.</param>
		public async Task DeleteTasksIDMembersIDAsync(string userID, string taskID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID))+"/members/"+ (userID==null? "" : System.Uri.EscapeDataString(userID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all owners of a task
		/// GetTasksIDOwners tasks/{taskID}/owners
		/// </summary>
		/// <param name="taskID">The task ID.</param>
		/// <returns>A list of users who have owner privileges for a task</returns>
		public async Task<ResourceOwners> GetTasksIDOwnersAsync(string taskID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID))+"/owners";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceOwners>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an owner to a task
		/// PostTasksIDOwners tasks/{taskID}/owners
		/// </summary>
		/// <param name="taskID">The task ID.</param>
		/// <param name="requestBody">User to add as owner</param>
		public async Task PostTasksIDOwnersAsync(string taskID, AddResourceMemberRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID))+"/owners";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove an owner from a task
		/// DeleteTasksIDOwnersID tasks/{taskID}/owners/{userID}
		/// </summary>
		/// <param name="userID">The ID of the owner to remove.</param>
		/// <param name="taskID">The task ID.</param>
		public async Task DeleteTasksIDOwnersIDAsync(string userID, string taskID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID))+"/owners/"+ (userID==null? "" : System.Uri.EscapeDataString(userID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List runs for a task
		/// GetTasksIDRuns tasks/{taskID}/runs
		/// </summary>
		/// <param name="taskID">The ID of the task to get runs for.</param>
		/// <param name="after">Returns runs after a specific ID.</param>
		/// <param name="limit">The number of runs to return</param>
		/// <param name="afterTime">Filter runs to those scheduled after this time, RFC3339</param>
		/// <param name="beforeTime">Filter runs to those scheduled before this time, RFC3339</param>
		/// <returns>A list of task runs</returns>
		public async Task<Runs> GetTasksIDRunsAsync(string taskID, string after, int limit, System.DateTimeOffset afterTime, System.DateTimeOffset beforeTime, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID))+"/runs&after=" + (after==null? "" : System.Uri.EscapeDataString(after))+"&limit="+limit+"&afterTime=" + afterTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&beforeTime=" + beforeTime.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ");
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Runs>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Manually start a task run, overriding the current schedule
		/// PostTasksIDRuns tasks/{taskID}/runs
		/// </summary>
		public async Task PostTasksIDRunsAsync(string taskID, RunManually requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID))+"/runs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Cancel a running task
		/// DeleteTasksIDRunsID tasks/{taskID}/runs/{runID}
		/// </summary>
		/// <param name="taskID">The task ID.</param>
		/// <param name="runID">The run ID.</param>
		public async Task DeleteTasksIDRunsIDAsync(string taskID, string runID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID))+"/runs/"+ (runID==null? "" : System.Uri.EscapeDataString(runID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a single run for a task
		/// GetTasksIDRunsID tasks/{taskID}/runs/{runID}
		/// </summary>
		/// <param name="taskID">The task ID.</param>
		/// <param name="runID">The run ID.</param>
		/// <returns>The run record</returns>
		public async Task<Run> GetTasksIDRunsIDAsync(string taskID, string runID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID))+"/runs/"+ (runID==null? "" : System.Uri.EscapeDataString(runID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Run>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve all logs for a run
		/// GetTasksIDRunsIDLogs tasks/{taskID}/runs/{runID}/logs
		/// </summary>
		/// <param name="taskID">ID of task to get logs for.</param>
		/// <param name="runID">ID of run to get logs for.</param>
		/// <returns>All logs for a run</returns>
		public async Task<Logs> GetTasksIDRunsIDLogsAsync(string taskID, string runID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tasks/"+ (taskID==null? "" : System.Uri.EscapeDataString(taskID))+"/runs/"+ (runID==null? "" : System.Uri.EscapeDataString(runID))+"/logs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Logs>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all Telegraf plugins
		/// GetTelegrafPlugins telegraf/plugins
		/// </summary>
		/// <param name="type">The type of plugin desired.</param>
		/// <returns>A list of Telegraf plugins.</returns>
		public async Task<TelegrafPlugins> GetTelegrafPluginsAsync(string type, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "telegraf/plugins?type=" + (type==null? "" : System.Uri.EscapeDataString(type));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TelegrafPlugins>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all Telegraf configurations
		/// GetTelegrafs telegrafs
		/// </summary>
		/// <param name="orgID">The organization ID the Telegraf config belongs to.</param>
		/// <returns>A list of Telegraf configurations</returns>
		public async Task<Telegrafs> GetTelegrafsAsync(string orgID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "telegrafs?orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Telegrafs>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a Telegraf configuration
		/// PostTelegrafs telegrafs
		/// </summary>
		/// <param name="requestBody">Telegraf configuration to create</param>
		public async Task PostTelegrafsAsync(TelegrafRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "telegrafs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a Telegraf configuration
		/// DeleteTelegrafsID telegrafs/{telegrafID}
		/// </summary>
		/// <param name="telegrafID">The Telegraf configuration ID.</param>
		public async Task DeleteTelegrafsIDAsync(string telegrafID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "telegrafs/"+ (telegrafID==null? "" : System.Uri.EscapeDataString(telegrafID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a Telegraf configuration
		/// GetTelegrafsID telegrafs/{telegrafID}
		/// </summary>
		/// <param name="telegrafID">The Telegraf configuration ID.</param>
		/// <returns>Telegraf configuration details</returns>
		public async Task<Telegraf> GetTelegrafsIDAsync(string telegrafID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "telegrafs/"+ (telegrafID==null? "" : System.Uri.EscapeDataString(telegrafID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Telegraf>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a Telegraf configuration
		/// PutTelegrafsID telegrafs/{telegrafID}
		/// </summary>
		/// <param name="telegrafID">The Telegraf config ID.</param>
		/// <param name="requestBody">Telegraf configuration update to apply</param>
		/// <returns>An updated Telegraf configurations</returns>
		public async Task<Telegraf> PutTelegrafsIDAsync(string telegrafID, TelegrafRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "telegrafs/"+ (telegrafID==null? "" : System.Uri.EscapeDataString(telegrafID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Telegraf>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all labels for a Telegraf config
		/// GetTelegrafsIDLabels telegrafs/{telegrafID}/labels
		/// </summary>
		/// <param name="telegrafID">The Telegraf config ID.</param>
		/// <returns>A list of all labels for a Telegraf config</returns>
		public async Task<LabelsResponse> GetTelegrafsIDLabelsAsync(string telegrafID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "telegrafs/"+ (telegrafID==null? "" : System.Uri.EscapeDataString(telegrafID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LabelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a label to a Telegraf config
		/// PostTelegrafsIDLabels telegrafs/{telegrafID}/labels
		/// </summary>
		/// <param name="telegrafID">The Telegraf config ID.</param>
		/// <param name="requestBody">Label to add</param>
		public async Task PostTelegrafsIDLabelsAsync(string telegrafID, LabelMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "telegrafs/"+ (telegrafID==null? "" : System.Uri.EscapeDataString(telegrafID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a label from a Telegraf config
		/// DeleteTelegrafsIDLabelsID telegrafs/{telegrafID}/labels/{labelID}
		/// </summary>
		/// <param name="telegrafID">The Telegraf config ID.</param>
		/// <param name="labelID">The label ID.</param>
		public async Task DeleteTelegrafsIDLabelsIDAsync(string telegrafID, string labelID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "telegrafs/"+ (telegrafID==null? "" : System.Uri.EscapeDataString(telegrafID))+"/labels/"+ (labelID==null? "" : System.Uri.EscapeDataString(labelID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all users with member privileges for a Telegraf config
		/// GetTelegrafsIDMembers telegrafs/{telegrafID}/members
		/// </summary>
		/// <param name="telegrafID">The Telegraf config ID.</param>
		/// <returns>A list of Telegraf config members</returns>
		public async Task<ResourceMembers> GetTelegrafsIDMembersAsync(string telegrafID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "telegrafs/"+ (telegrafID==null? "" : System.Uri.EscapeDataString(telegrafID))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceMembers>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a member to a Telegraf config
		/// PostTelegrafsIDMembers telegrafs/{telegrafID}/members
		/// </summary>
		/// <param name="telegrafID">The Telegraf config ID.</param>
		/// <param name="requestBody">User to add as member</param>
		public async Task PostTelegrafsIDMembersAsync(string telegrafID, AddResourceMemberRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "telegrafs/"+ (telegrafID==null? "" : System.Uri.EscapeDataString(telegrafID))+"/members";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove a member from a Telegraf config
		/// DeleteTelegrafsIDMembersID telegrafs/{telegrafID}/members/{userID}
		/// </summary>
		/// <param name="userID">The ID of the member to remove.</param>
		/// <param name="telegrafID">The Telegraf config ID.</param>
		public async Task DeleteTelegrafsIDMembersIDAsync(string userID, string telegrafID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "telegrafs/"+ (telegrafID==null? "" : System.Uri.EscapeDataString(telegrafID))+"/members/"+ (userID==null? "" : System.Uri.EscapeDataString(userID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all owners of a Telegraf configuration
		/// GetTelegrafsIDOwners telegrafs/{telegrafID}/owners
		/// </summary>
		/// <param name="telegrafID">The Telegraf configuration ID.</param>
		/// <returns>Returns Telegraf configuration owners as a ResourceOwners list</returns>
		public async Task<ResourceOwners> GetTelegrafsIDOwnersAsync(string telegrafID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "telegrafs/"+ (telegrafID==null? "" : System.Uri.EscapeDataString(telegrafID))+"/owners";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ResourceOwners>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add an owner to a Telegraf configuration
		/// PostTelegrafsIDOwners telegrafs/{telegrafID}/owners
		/// </summary>
		/// <param name="telegrafID">The Telegraf configuration ID.</param>
		/// <param name="requestBody">User to add as owner</param>
		public async Task PostTelegrafsIDOwnersAsync(string telegrafID, AddResourceMemberRequestBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "telegrafs/"+ (telegrafID==null? "" : System.Uri.EscapeDataString(telegrafID))+"/owners";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Remove an owner from a Telegraf config
		/// DeleteTelegrafsIDOwnersID telegrafs/{telegrafID}/owners/{userID}
		/// </summary>
		/// <param name="userID">The ID of the owner to remove.</param>
		/// <param name="telegrafID">The Telegraf config ID.</param>
		public async Task DeleteTelegrafsIDOwnersIDAsync(string userID, string telegrafID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "telegrafs/"+ (telegrafID==null? "" : System.Uri.EscapeDataString(telegrafID))+"/owners/"+ (userID==null? "" : System.Uri.EscapeDataString(userID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Apply or dry-run an InfluxDB Template
		/// ApplyTemplate templates/apply
		/// </summary>
		/// <returns>Influx package dry-run successful, no new resources created. The provided diff and summary will not have IDs for resources that do not exist at the time of the dry run.
		///</returns>
		public async Task<TemplateSummary> ApplyTemplateAsync(TemplateApply requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templates/apply";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TemplateSummary>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Export a new Influx Template
		/// ExportTemplate templates/export
		/// </summary>
		/// <param name="requestBody">Export resources as an InfluxDB template.</param>
		/// <returns>InfluxDB template created</returns>
		public async Task<ExportTemplateReturn[]> ExportTemplateAsync(TemplateExportByID requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "templates/export";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExportTemplateReturn[]>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all users
		/// GetUsers users
		/// </summary>
		/// <param name="after">The last resource ID from which to seek from (but not including). This is to be used instead of `offset`.
		///</param>
		/// <returns>A list of users</returns>
		public async Task<Users> GetUsersAsync(int offset, int limit, string after, string name, string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users?offset="+offset+"&limit="+limit+"&after=" + (after==null? "" : System.Uri.EscapeDataString(after))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Users>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a user
		/// PostUsers users
		/// </summary>
		/// <param name="requestBody">User to create</param>
		public async Task PostUsersAsync(User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a user
		/// DeleteUsersID users/{userID}
		/// </summary>
		/// <param name="userID">The ID of the user to delete.</param>
		public async Task DeleteUsersIDAsync(string userID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userID==null? "" : System.Uri.EscapeDataString(userID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a user
		/// GetUsersID users/{userID}
		/// </summary>
		/// <param name="userID">The user ID.</param>
		/// <returns>User details</returns>
		public async Task<UserResponse> GetUsersIDAsync(string userID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userID==null? "" : System.Uri.EscapeDataString(userID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a user
		/// PatchUsersID users/{userID}
		/// </summary>
		/// <param name="userID">The ID of the user to update.</param>
		/// <param name="requestBody">User update to apply</param>
		/// <returns>User updated</returns>
		public async Task<UserResponse> PatchUsersIDAsync(string userID, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userID==null? "" : System.Uri.EscapeDataString(userID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Update a password
		/// PostUsersIDPassword users/{userID}/password
		/// </summary>
		/// <param name="userID">The user ID.</param>
		/// <param name="requestBody">New password</param>
		public async Task PostUsersIDPasswordAsync(string userID, PasswordResetBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "users/"+ (userID==null? "" : System.Uri.EscapeDataString(userID))+"/password";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all variables
		/// GetVariables variables
		/// </summary>
		/// <param name="org">The name of the organization.</param>
		/// <param name="orgID">The organization ID.</param>
		/// <returns>A list of variables for an organization</returns>
		public async Task<Variables> GetVariablesAsync(string org, string orgID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "variables?org=" + (org==null? "" : System.Uri.EscapeDataString(org))+"&orgID=" + (orgID==null? "" : System.Uri.EscapeDataString(orgID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Variables>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a variable
		/// PostVariables variables
		/// </summary>
		/// <param name="requestBody">Variable to create</param>
		public async Task PostVariablesAsync(Variable requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "variables";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a variable
		/// DeleteVariablesID variables/{variableID}
		/// </summary>
		/// <param name="variableID">The variable ID.</param>
		public async Task DeleteVariablesIDAsync(string variableID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "variables/"+ (variableID==null? "" : System.Uri.EscapeDataString(variableID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve a variable
		/// GetVariablesID variables/{variableID}
		/// </summary>
		/// <param name="variableID">The variable ID.</param>
		/// <returns>Variable found</returns>
		public async Task<Variable> GetVariablesIDAsync(string variableID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "variables/"+ (variableID==null? "" : System.Uri.EscapeDataString(variableID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Variable>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update a variable
		/// PatchVariablesID variables/{variableID}
		/// </summary>
		/// <param name="variableID">The variable ID.</param>
		/// <param name="requestBody">Variable update to apply</param>
		/// <returns>Variable updated</returns>
		public async Task<Variable> PatchVariablesIDAsync(string variableID, Variable requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "variables/"+ (variableID==null? "" : System.Uri.EscapeDataString(variableID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Variable>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Replace a variable
		/// PutVariablesID variables/{variableID}
		/// </summary>
		/// <param name="variableID">The variable ID.</param>
		/// <param name="requestBody">Variable to replace</param>
		/// <returns>Variable updated</returns>
		public async Task<Variable> PutVariablesIDAsync(string variableID, Variable requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "variables/"+ (variableID==null? "" : System.Uri.EscapeDataString(variableID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<Variable>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// List all labels for a variable
		/// GetVariablesIDLabels variables/{variableID}/labels
		/// </summary>
		/// <param name="variableID">The variable ID.</param>
		/// <returns>A list of all labels for a variable</returns>
		public async Task<LabelsResponse> GetVariablesIDLabelsAsync(string variableID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "variables/"+ (variableID==null? "" : System.Uri.EscapeDataString(variableID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<LabelsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Add a label to a variable
		/// PostVariablesIDLabels variables/{variableID}/labels
		/// </summary>
		/// <param name="variableID">The variable ID.</param>
		/// <param name="requestBody">Label to add</param>
		public async Task PostVariablesIDLabelsAsync(string variableID, LabelMapping requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "variables/"+ (variableID==null? "" : System.Uri.EscapeDataString(variableID))+"/labels";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Delete a label from a variable
		/// DeleteVariablesIDLabelsID variables/{variableID}/labels/{labelID}
		/// </summary>
		/// <param name="variableID">The variable ID.</param>
		/// <param name="labelID">The label ID to delete.</param>
		public async Task DeleteVariablesIDLabelsIDAsync(string variableID, string labelID, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "variables/"+ (variableID==null? "" : System.Uri.EscapeDataString(variableID))+"/labels/"+ (labelID==null? "" : System.Uri.EscapeDataString(labelID));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GetDashboardsSortBy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreatedAt = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdatedAt = 2,
	}
	
	public enum GetDashboardsIDInclude
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		properties = 0,
	}
	
	public class PatchDashboardsIDPatchBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="cells")]
		public CellWithViewProperties Cells { get; set; }
		
		/// <summary>
		/// optional, when provided will replace the description
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// optional, when provided will replace the name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public enum PostQueryAccept_Encoding
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		gzip = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		identity = 1,
	}
	
	public enum PostQueryContent_Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/vnd.flux")]
		application_vnd_flux = 1,
	}
	
	public enum PostQueryAnalyzeContent_Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 0,
	}
	
	public enum PostQueryAstContent_Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 0,
	}
	
	public class ListStacksReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="stacks")]
		public Stack[] Stacks { get; set; }
	}
	
	public class CreateStackPostBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="orgID")]
		public string OrgID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urls")]
		public string[] Urls { get; set; }
	}
	
	public class UpdateStackPatchBody
	{
		
		[System.Runtime.Serialization.DataMember(Name="additionalResources")]
		public UpdateStackPatchBodyAdditionalResources[] UpdateStackPatchBodyAdditionalResources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateURLs")]
		public string[] TemplateURLs { get; set; }
	}
	
	public class UpdateStackPatchBodyAdditionalResources
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public string Kind { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceID")]
		public string ResourceID { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="templateMetaName")]
		public string TemplateMetaName { get; set; }
	}
	
	public enum GetTelegrafsIDAccept
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/toml")]
		application_toml = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/octet-stream")]
		application_octetMinusstream = 2,
	}
	
	public class ExportTemplateReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="apiVersion")]
		public string ApiVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kind")]
		public System.Nullable<ExportTemplateReturnKind> Kind { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="meta")]
		public ExportTemplateReturnMeta Meta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="spec")]
		public string Spec { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ExportTemplateReturnKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Bucket = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Check = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckDeadman = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CheckThreshold = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Dashboard = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Label = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpoint = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointHTTP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointPagerDuty = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationEndpointSlack = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NotificationRule = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Task")]
		_Task = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Telegraf = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Variable = 13,
	}
	
	public class ExportTemplateReturnMeta
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public enum PostWriteContent_Type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="text/plain")]
		text_plain = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="text/plain; charset=utf-8")]
		text_plain__charsetEqualutfMinus8 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/vnd.influx.arrow")]
		application_vnd_influx_arrow = 2,
	}
	
	public enum PostWriteAccept
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="application/json")]
		application_json = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
