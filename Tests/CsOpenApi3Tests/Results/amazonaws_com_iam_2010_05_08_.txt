//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidInputException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoSuchEntityException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceFailureException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntityAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnmodifiableEntityException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyNotAttachableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidUserTypeException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntityTemporarilyUnmodifiableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PasswordPolicyViolationException
	{
	}
	
	/// <summary>
	/// Contains the response to a successful <a>CreateAccessKey</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAccessKeyResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccessKey AccessKey { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an Amazon Web Services access key.</p> <p> This data type is used as a response element in the <a>CreateAccessKey</a> and <a>ListAccessKeys</a> operations. </p> <note> <p>The <code>SecretAccessKey</code> value is returned only in response to <a>CreateAccessKey</a>. You can get a secret access key only when you first create an access key; you cannot recover the secret access key later. If you lose a secret access key, you must create a new access key.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessKey
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StatusType Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SecretAccessKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum StatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Inactive = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConcurrentModificationException
	{
	}
	
	/// <summary>
	/// Contains the response to a successful <a>CreateGroup</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateGroupResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Group Group { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an IAM group entity.</p> <p>This data type is used as a response element in the following operations:</p> <ul> <li> <p> <a>CreateGroup</a> </p> </li> <li> <p> <a>GetGroup</a> </p> </li> <li> <p> <a>ListGroups</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Group
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>CreateInstanceProfile</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInstanceProfileResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceProfile InstanceProfile { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an instance profile.</p> <p>This data type is used as a response element in the following operations:</p> <ul> <li> <p> <a>CreateInstanceProfile</a> </p> </li> <li> <p> <a>GetInstanceProfile</a> </p> </li> <li> <p> <a>ListInstanceProfiles</a> </p> </li> <li> <p> <a>ListInstanceProfilesForRole</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InstanceProfile
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceProfileId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Role[] Roles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Contains information about an IAM role. This structure is returned as a response element in several API operations that interact with roles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Role
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssumeRolePolicyDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxSessionDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttachedPermissionsBoundary PermissionsBoundary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RoleLastUsed RoleLastUsed { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an attached permissions boundary.</p> <p>An attached permissions boundary is a managed policy that has been attached to a user or role to set the permissions boundary.</p> <p>For more information about permissions boundaries, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM identities </a> in the <i>IAM User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachedPermissionsBoundary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PermissionsBoundaryAttachmentType PermissionsBoundaryType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PermissionsBoundaryArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PermissionsBoundaryAttachmentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PermissionsBoundaryPolicy = 0,
	}
	
	/// <summary>
	/// A structure that represents user-provided metadata that can be associated with an IAM resource. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about the last time that an IAM role was used. This includes the date and time and the Region in which the role was last used. Activity is only reported for the trailing 400 days. This period can be shorter if your Region began supporting these features within the last year. The role might have been used more than 400 days ago. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions where data is tracked</a> in the <i>IAM user Guide</i>.</p> <p>This data type is returned as a response element in the <a>GetRole</a> and <a>GetAccountAuthorizationDetails</a> operations.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RoleLastUsed
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUsedDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>CreateLoginProfile</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLoginProfileResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoginProfile LoginProfile { get; set; }
	}
	
	/// <summary>
	/// <p>Contains the user name and password create date for a user.</p> <p> This data type is used as a response element in the <a>CreateLoginProfile</a> and <a>GetLoginProfile</a> operations. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LoginProfile
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PasswordResetRequired { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>CreateOpenIDConnectProvider</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOpenIDConnectProviderResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string OpenIDConnectProviderArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>CreatePolicy</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Policy Policy { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about a managed policy.</p> <p>This data type is used as a response element in the <a>CreatePolicy</a>, <a>GetPolicy</a>, and <a>ListPolicies</a> operations. </p> <p>For more information about managed policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Policy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
		
		/// <summary>
		/// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AttachmentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PermissionsBoundaryUsageCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsAttachable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MalformedPolicyDocumentException
	{
	}
	
	/// <summary>
	/// Contains the response to a successful <a>CreatePolicyVersion</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePolicyVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyVersion PolicyVersion { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about a version of a managed policy.</p> <p>This data type is used as a response element in the <a>CreatePolicyVersion</a>, <a>GetPolicyVersion</a>, <a>ListPolicyVersions</a>, and <a>GetAccountAuthorizationDetails</a> operations. </p> <p>For more information about managed policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyVersion
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Document { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string VersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsDefaultVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>CreateRole</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRoleResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Role Role { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>CreateSAMLProvider</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSAMLProviderResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SAMLProviderArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateServiceLinkedRoleResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Role Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateServiceSpecificCredentialResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceSpecificCredential ServiceSpecificCredential { get; set; }
	}
	
	/// <summary>
	/// Contains the details of a service-specific credential.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceSpecificCredential
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceUserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServicePassword { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceSpecificCredentialId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StatusType Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceNotSupportedException
	{
	}
	
	/// <summary>
	/// Contains the response to a successful <a>CreateUser</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateUserResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an IAM user entity.</p> <p>This data type is used as a response element in the following operations:</p> <ul> <li> <p> <a>CreateUser</a> </p> </li> <li> <p> <a>GetUser</a> </p> </li> <li> <p> <a>ListUsers</a> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset PasswordLastUsed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttachedPermissionsBoundary PermissionsBoundary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>CreateVirtualMFADevice</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVirtualMFADeviceResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualMFADevice VirtualMFADevice { get; set; }
	}
	
	/// <summary>
	/// Contains information about a virtual MFA device.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VirtualMFADevice
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Base32StringSeed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string QRCodePNG { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EnableDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteServiceLinkedRoleResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeletionTaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidAuthenticationCodeException
	{
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GenerateCredentialReport</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateCredentialReportResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ReportStateType State { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReportStateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STARTED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INPROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateOrganizationsAccessReportResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReportGenerationLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateServiceLastAccessedDetailsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetAccessKeyLastUsed</a> request. It is also returned as a member of the <a>AccessKeyMetaData</a> structure returned by the <a>ListAccessKeys</a> action.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAccessKeyLastUsedResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccessKeyLastUsed AccessKeyLastUsed { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about the last time an Amazon Web Services access key was used since IAM began tracking this information on April 22, 2015.</p> <p>This data type is used as a response element in the <a>GetAccessKeyLastUsed</a> operation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessKeyLastUsed
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastUsedDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetAccountAuthorizationDetails</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAccountAuthorizationDetailsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public UserDetail[] UserDetailList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public GroupDetail[] GroupDetailList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RoleDetail[] RoleDetailList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ManagedPolicyDetail[] Policies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an IAM user, including all the user's policies and all the IAM groups the user is in.</p> <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> operation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UserDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
		
		/// <summary>
		/// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyDetail[] UserPolicyList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] GroupList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttachedPolicy[] AttachedManagedPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttachedPermissionsBoundary PermissionsBoundary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an IAM policy, including the policy document.</p> <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> operation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an attached policy.</p> <p>An attached policy is a managed policy that has been attached to a user, group, or role. This data type is used as a response element in the <a>ListAttachedGroupPolicies</a>, <a>ListAttachedRolePolicies</a>, <a>ListAttachedUserPolicies</a>, and <a>GetAccountAuthorizationDetails</a> operations. </p> <p>For more information about managed policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachedPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		/// <summary>
		/// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string PolicyArn { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an IAM group, including all of the group's policies.</p> <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> operation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GroupDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
		
		/// <summary>
		/// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyDetail[] GroupPolicyList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttachedPolicy[] AttachedManagedPolicies { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an IAM role, including all of the role's policies.</p> <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> operation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RoleDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleId { get; set; }
		
		/// <summary>
		/// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AssumeRolePolicyDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public InstanceProfile[] InstanceProfileList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyDetail[] RolePolicyList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttachedPolicy[] AttachedManagedPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AttachedPermissionsBoundary PermissionsBoundary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RoleLastUsed RoleLastUsed { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about a managed policy, including the policy's ARN, versions, and the number of principal entities (users, groups, and roles) that the policy is attached to.</p> <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> operation.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagedPolicyDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PolicyId { get; set; }
		
		/// <summary>
		/// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string DefaultVersionId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AttachmentCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PermissionsBoundaryUsageCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsAttachable { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UpdateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyVersion[] PolicyVersionList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		User = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Role = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Group = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LocalManagedPolicy = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWSManagedPolicy = 4,
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetAccountPasswordPolicy</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAccountPasswordPolicyResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PasswordPolicy PasswordPolicy { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about the account password policy.</p> <p> This data type is used as a response element in the <a>GetAccountPasswordPolicy</a> operation. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PasswordPolicy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinimumPasswordLength { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequireSymbols { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequireNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequireUppercaseCharacters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequireLowercaseCharacters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowUsersToChangePassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ExpirePasswords { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxPasswordAge { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PasswordReusePrevention { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HardExpiry { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetAccountSummary</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAccountSummaryResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SummaryMapType SummaryMap { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SummaryMapType
	{
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetContextKeysForPrincipalPolicy</a> or <a>GetContextKeysForCustomPolicy</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContextKeysForPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ContextKeyNames { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetCredentialReport</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetCredentialReportResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Content { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ReportFormatType ReportFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset GeneratedTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReportFormatType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="text/csv")]
		text_csv = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CredentialReportNotPresentException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CredentialReportExpiredException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CredentialReportNotReadyException
	{
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetGroup</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetGroupResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Group Group { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public User[] Users { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetGroupPolicy</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetGroupPolicyResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetInstanceProfile</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceProfileResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceProfile InstanceProfile { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetLoginProfile</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLoginProfileResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public LoginProfile LoginProfile { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMFADeviceResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EnableDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public CertificationMapType Certifications { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CertificationMapType
	{
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetOpenIDConnectProvider</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOpenIDConnectProviderResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClientIDList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ThumbprintList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrganizationsAccessReportResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobStatusType JobStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset JobCreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset JobCompletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfServicesAccessible { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> NumberOfServicesNotAccessed { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccessDetail[] AccessDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		/// <summary>
		/// <p>Contains information about the reason that the operation failed.</p> <p>This data type is used as a response element in the <a>GetOrganizationsAccessReport</a>, <a>GetServiceLastAccessedDetails</a>, and <a>GetServiceLastAccessedDetailsWithEntities</a> operations.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ErrorDetails ErrorDetails { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum JobStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
	}
	
	/// <summary>
	/// <p>An object that contains details about when a principal in the reported Organizations entity last attempted to access an Amazon Web Services service. A principal can be an IAM user, an IAM role, or the Amazon Web Services account root user within the reported Organizations entity.</p> <p>This data type is a response element in the <a>GetOrganizationsAccessReport</a> operation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceNamespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EntityPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastAuthenticatedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalAuthenticatedEntities { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about the reason that the operation failed.</p> <p>This data type is used as a response element in the <a>GetOrganizationsAccessReport</a>, <a>GetServiceLastAccessedDetails</a>, and <a>GetServiceLastAccessedDetailsWithEntities</a> operations.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Message { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Code { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetPolicy</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Policy Policy { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetPolicyVersion</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPolicyVersionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyVersion PolicyVersion { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetRole</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRoleResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Role Role { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetRolePolicy</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRolePolicyResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetSAMLProvider</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSAMLProviderResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SAMLMetadataDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ValidUntil { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetSSHPublicKey</a> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSSHPublicKeyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SSHPublicKey SSHPublicKey { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an SSH public key.</p> <p>This data type is used as a response element in the <a>GetSSHPublicKey</a> and <a>UploadSSHPublicKey</a> operations. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SSHPublicKey
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SSHPublicKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Fingerprint { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SSHPublicKeyBody { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StatusType Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UploadDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnrecognizedPublicKeyEncodingException
	{
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetServerCertificate</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetServerCertificateResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServerCertificate ServerCertificate { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about a server certificate.</p> <p> This data type is used as a response element in the <a>GetServerCertificate</a> operation. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerCertificate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServerCertificateMetadata ServerCertificateMetadata { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CertificateBody { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateChain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about a server certificate without its certificate body, certificate chain, and private key.</p> <p> This data type is used as a response element in the <a>UploadServerCertificate</a> and <a>ListServerCertificates</a> operations. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerCertificateMetadata
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServerCertificateName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServerCertificateId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UploadDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset Expiration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetServiceLastAccessedDetailsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobStatusType JobStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccessAdvisorUsageGranularityType JobType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset JobCreationDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServiceLastAccessed[] ServicesLastAccessed { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset JobCompletionDate { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ErrorDetails Error { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AccessAdvisorUsageGranularityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_LEVEL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTION_LEVEL = 1,
	}
	
	/// <summary>
	/// <p>Contains details about the most recent attempt to access the service.</p> <p>This data type is used as a response element in the <a>GetServiceLastAccessedDetails</a> operation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceLastAccessed
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastAuthenticated { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceNamespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastAuthenticatedEntity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastAuthenticatedRegion { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> TotalAuthenticatedEntities { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public TrackedActionLastAccessed[] TrackedActionsLastAccessed { get; set; }
	}
	
	/// <summary>
	/// <p>Contains details about the most recent attempt to access an action within the service.</p> <p>This data type is used as a response element in the <a>GetServiceLastAccessedDetails</a> operation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TrackedActionLastAccessed
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ActionName { get; set; }
		
		/// <summary>
		/// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string LastAccessedEntity { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastAccessedTime { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string LastAccessedRegion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetServiceLastAccessedDetailsWithEntitiesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public JobStatusType JobStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset JobCreationDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset JobCompletionDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EntityDetails[] EntityDetailsList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ErrorDetails Error { get; set; }
	}
	
	/// <summary>
	/// <p>An object that contains details about when the IAM entities (users or roles) were last used in an attempt to access the specified Amazon Web Services service.</p> <p>This data type is a response element in the <a>GetServiceLastAccessedDetailsWithEntities</a> operation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntityDetails
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EntityInfo EntityInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset LastAuthenticated { get; set; }
	}
	
	/// <summary>
	/// <p>Contains details about the specified entity (user or role).</p> <p>This data type is an element of the <a>EntityDetails</a> object.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EntityInfo
	{
		
		/// <summary>
		/// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
		/// Required
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PolicyOwnerEntityType Type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PolicyOwnerEntityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ROLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GROUP = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetServiceLinkedRoleDeletionStatusResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DeletionTaskStatusType Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public DeletionTaskFailureReasonType Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DeletionTaskStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUCCEEDED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_STARTED = 3,
	}
	
	/// <summary>
	/// <p>The reason that the service-linked role deletion failed.</p> <p>This data type is used as a response element in the <a>GetServiceLinkedRoleDeletionStatus</a> operation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletionTaskFailureReasonType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public RoleUsageType[] RoleUsageList { get; set; }
	}
	
	/// <summary>
	/// <p>An object that contains details about how a service-linked role is used, if that information is returned by the service.</p> <p>This data type is used as a response element in the <a>GetServiceLinkedRoleDeletionStatus</a> operation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RoleUsageType
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Region { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Resources { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetUser</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetUserResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public User User { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>GetUserPolicy</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetUserPolicyResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListAccessKeys</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAccessKeysResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public AccessKeyMetadata[] AccessKeyMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an Amazon Web Services access key, without its secret key.</p> <p>This data type is used as a response element in the <a>ListAccessKeys</a> operation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessKeyMetadata
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AccessKeyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public StatusType Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListAccountAliases</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAccountAliasesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] AccountAliases { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListAttachedGroupPolicies</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAttachedGroupPoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttachedPolicy[] AttachedPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListAttachedRolePolicies</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAttachedRolePoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttachedPolicy[] AttachedPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListAttachedUserPolicies</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAttachedUserPoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AttachedPolicy[] AttachedPolicies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListEntitiesForPolicy</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEntitiesForPolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyGroup[] PolicyGroups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyUser[] PolicyUsers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyRole[] PolicyRoles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about a group that a managed policy is attached to.</p> <p>This data type is used as a response element in the <a>ListEntitiesForPolicy</a> operation. </p> <p>For more information about managed policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyGroup
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string GroupId { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about a user that a managed policy is attached to.</p> <p>This data type is used as a response element in the <a>ListEntitiesForPolicy</a> operation. </p> <p>For more information about managed policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyUser
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserId { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about a role that a managed policy is attached to.</p> <p>This data type is used as a response element in the <a>ListEntitiesForPolicy</a> operation. </p> <p>For more information about managed policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyRole
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string RoleId { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListGroupPolicies</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListGroupPoliciesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] PolicyNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListGroups</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListGroupsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Group[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListGroupsForUser</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListGroupsForUserResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Group[] Groups { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInstanceProfileTagsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListInstanceProfiles</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInstanceProfilesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceProfile[] InstanceProfiles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListInstanceProfilesForRole</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInstanceProfilesForRoleResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public InstanceProfile[] InstanceProfiles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMFADeviceTagsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListMFADevices</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMFADevicesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public MFADevice[] MFADevices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an MFA device.</p> <p>This data type is used as a response element in the <a>ListMFADevices</a> operation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MFADevice
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset EnableDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOpenIDConnectProviderTagsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListOpenIDConnectProviders</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOpenIDConnectProvidersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public OpenIDConnectProviderListEntry[] OpenIDConnectProviderList { get; set; }
	}
	
	/// <summary>
	/// Contains the Amazon Resource Name (ARN) for an IAM OpenID Connect provider.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OpenIDConnectProviderListEntry
	{
		
		/// <summary>
		/// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListPolicies</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPoliciesResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Policy[] Policies { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPoliciesGrantingServiceAccessResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListPoliciesGrantingServiceAccessEntry[] PoliciesGrantingServiceAccess { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p>Contains details about the permissions policies that are attached to the specified identity (user, group, or role).</p> <p>This data type is used as a response element in the <a>ListPoliciesGrantingServiceAccess</a> operation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPoliciesGrantingServiceAccessEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceNamespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyGrantingServiceAccess[] Policies { get; set; }
	}
	
	/// <summary>
	/// <p>Contains details about the permissions policies that are attached to the specified identity (user, group, or role).</p> <p>This data type is an element of the <a>ListPoliciesGrantingServiceAccessEntry</a> object.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyGrantingServiceAccess
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PolicyType PolicyType { get; set; }
		
		/// <summary>
		/// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
		/// Max length: 2048
		/// Min length: 20
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(20)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyOwnerEntityType EntityType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EntityName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PolicyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INLINE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MANAGED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPolicyTagsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListPolicyVersions</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPolicyVersionsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyVersion[] Versions { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListRolePolicies</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRolePoliciesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] PolicyNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRoleTagsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListRoles</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRolesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Role[] Roles { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSAMLProviderTagsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListSAMLProviders</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSAMLProvidersResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SAMLProviderListEntry[] SAMLProviderList { get; set; }
	}
	
	/// <summary>
	/// Contains the list of SAML providers for this account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SAMLProviderListEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset ValidUntil { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListSSHPublicKeys</a> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSSHPublicKeysResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SSHPublicKeyMetadata[] SSHPublicKeys { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an SSH public key, without the key's body or fingerprint.</p> <p>This data type is used as a response element in the <a>ListSSHPublicKeys</a> operation.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SSHPublicKeyMetadata
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SSHPublicKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StatusType Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UploadDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListServerCertificateTagsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListServerCertificates</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListServerCertificatesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ServerCertificateMetadata[] ServerCertificateMetadataList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListServiceSpecificCredentialsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceSpecificCredentialMetadata[] ServiceSpecificCredentials { get; set; }
	}
	
	/// <summary>
	/// Contains additional details about a service-specific credential.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceSpecificCredentialMetadata
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StatusType Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceUserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset CreateDate { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceSpecificCredentialId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListSigningCertificates</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSigningCertificatesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SigningCertificate[] Certificates { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about an X.509 signing certificate.</p> <p>This data type is used as a response element in the <a>UploadSigningCertificate</a> and <a>ListSigningCertificates</a> operations. </p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SigningCertificate
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CertificateId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CertificateBody { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StatusType Status { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.DateTimeOffset UploadDate { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListUserPolicies</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUserPoliciesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] PolicyNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUserTagsResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListUsers</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUsersResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public User[] Users { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>ListVirtualMFADevices</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVirtualMFADevicesResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public VirtualMFADevice[] VirtualMFADevices { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResetServiceSpecificCredentialResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ServiceSpecificCredential ServiceSpecificCredential { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>SimulatePrincipalPolicy</a> or <a>SimulateCustomPolicy</a> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SimulatePolicyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EvaluationResult[] EvaluationResults { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> IsTruncated { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	/// <summary>
	/// <p>Contains the results of a simulation.</p> <p>This data type is used by the return parameter of <code> <a>SimulateCustomPolicy</a> </code> and <code> <a>SimulatePrincipalPolicy</a> </code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EvaluationResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EvalActionName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string EvalResourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PolicyEvaluationDecisionType EvalDecision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Statement[] MatchedStatements { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MissingContextValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public OrganizationsDecisionDetail OrganizationsDecisionDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PermissionsBoundaryDecisionDetail PermissionsBoundaryDecisionDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EvalDecisionDetailsType EvalDecisionDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ResourceSpecificResult[] ResourceSpecificResults { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PolicyEvaluationDecisionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		allowed = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		explicitDeny = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		implicitDeny = 2,
	}
	
	/// <summary>
	/// <p>Contains a reference to a <code>Statement</code> element in a policy document that determines the result of the simulation.</p> <p>This data type is used by the <code>MatchedStatements</code> member of the <code> <a>EvaluationResult</a> </code> type.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Statement
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SourcePolicyId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicySourceType SourcePolicyType { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Position StartPosition { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Position EndPosition { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PolicySourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		user = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		group = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		role = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="aws-managed")]
		awsMinusmanaged = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="user-managed")]
		userMinusmanaged = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		resource = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		none = 6,
	}
	
	/// <summary>
	/// <p>Contains the row and column of a location of a <code>Statement</code> element in a policy document.</p> <p>This data type is used as a member of the <code> <a>Statement</a> </code> type.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Position
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Line { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Column { get; set; }
	}
	
	/// <summary>
	/// Contains information about the effect that Organizations has on a policy simulation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OrganizationsDecisionDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowedByOrganizations { get; set; }
	}
	
	/// <summary>
	/// Contains information about the effect that a permissions boundary has on a policy simulation when the boundary is applied to an IAM entity.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PermissionsBoundaryDecisionDetail
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowedByPermissionsBoundary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EvalDecisionDetailsType
	{
	}
	
	/// <summary>
	/// <p>Contains the result of the simulation of a single API operation call on a single resource.</p> <p>This data type is used by a member of the <a>EvaluationResult</a> data type.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceSpecificResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EvalResourceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public PolicyEvaluationDecisionType EvalResourceDecision { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Statement[] MatchedStatements { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] MissingContextValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EvalDecisionDetailsType EvalDecisionDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PermissionsBoundaryDecisionDetail PermissionsBoundaryDecisionDetail { get; set; }
	}
	
	/// <summary>
	/// <p>Contains information about a condition context key. It includes the name of the key and specifies the value (or values, if the context key supports multiple values) to use in the simulation. This information is used when evaluating the <code>Condition</code> elements of the input policies.</p> <p>This data type is used as an input parameter to <a>SimulateCustomPolicy</a> and <a>SimulatePrincipalPolicy</a>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ContextEntry
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string ContextKeyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ContextKeyValues { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContextKeyTypeEnum ContextKeyType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ContextKeyTypeEnum
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="string")]
		_string = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		stringList = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		numeric = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		numericList = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		boolean = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		booleanList = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ip = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ipList = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		binary = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		binaryList = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		date = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		dateList = 11,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PolicyEvaluationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRoleResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRoleDescriptionResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Role Role { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>UpdateSAMLProvider</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSAMLProviderResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string SAMLProviderArn { get; set; }
	}
	
	/// <summary>
	/// Contains the response to a successful <a>UploadSSHPublicKey</a> request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UploadSSHPublicKeyResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public SSHPublicKey SSHPublicKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidPublicKeyException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DuplicateSSHPublicKeyException
	{
	}
	
	/// <summary>
	/// Contains the response to a successful <a>UploadServerCertificate</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UploadServerCertificateResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ServerCertificateMetadata ServerCertificateMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MalformedCertificateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class KeyPairMismatchException
	{
	}
	
	/// <summary>
	/// Contains the response to a successful <a>UploadSigningCertificate</a> request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UploadSigningCertificateResponse
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SigningCertificate Certificate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InvalidCertificateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DuplicateCertificateException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddClientIDToOpenIDConnectProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OpenIDConnectProviderArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddRoleToInstanceProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AddUserToGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachGroupPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachRolePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AttachUserPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChangePasswordRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OldPassword { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string NewPassword { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAccessKeyRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAccountAliasRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountAlias { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateGroupRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateInstanceProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateLoginProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PasswordResetRequired { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateOpenIDConnectProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ClientIDList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ThumbprintList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreatePolicyVersionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> SetAsDefault { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateRoleRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AssumeRolePolicyDocument { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxSessionDuration { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PermissionsBoundary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateSAMLProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SAMLMetadataDocument { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateServiceLinkedRoleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AWSServiceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CustomSuffix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateServiceSpecificCredentialRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateUserRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PermissionsBoundary { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateVirtualMFADeviceRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VirtualMFADeviceName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeactivateMFADeviceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAccessKeyRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAccountAliasRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccountAlias { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteGroupPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteInstanceProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceProfileName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteLoginProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteOpenIDConnectProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OpenIDConnectProviderArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeletePolicyVersionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VersionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRolePermissionsBoundaryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRolePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteRoleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSAMLProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SAMLProviderArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSSHPublicKeyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SSHPublicKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteServerCertificateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServerCertificateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteServiceLinkedRoleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteServiceSpecificCredentialRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceSpecificCredentialId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteSigningCertificateRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CertificateId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteUserPermissionsBoundaryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteUserPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteUserRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteVirtualMFADeviceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachGroupPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachRolePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DetachUserPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnableMFADeviceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationCode1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationCode2 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateOrganizationsAccessReportRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string EntityPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string OrganizationsPolicyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateServiceLastAccessedDetailsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public AccessAdvisorUsageGranularityType Granularity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAccessKeyLastUsedRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessKeyId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAccountAuthorizationDetailsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public EntityType[] Filter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContextKeysForCustomPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] PolicyInputList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetContextKeysForPrincipalPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicySourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PolicyInputList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetGroupPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetInstanceProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceProfileName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLoginProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetMFADeviceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOpenIDConnectProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OpenIDConnectProviderArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SortKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_NAMESPACE_ASCENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_NAMESPACE_DESCENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_AUTHENTICATED_TIME_ASCENDING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAST_AUTHENTICATED_TIME_DESCENDING = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetOrganizationsAccessReportRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public SortKeyType SortKey { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPolicyVersionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VersionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRolePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRoleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSAMLProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SAMLProviderArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum EncodingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SSH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PEM = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetSSHPublicKeyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SSHPublicKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public EncodingType Encoding { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetServerCertificateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServerCertificateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetServiceLastAccessedDetailsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetServiceLastAccessedDetailsWithEntitiesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string JobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceNamespace { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetServiceLinkedRoleDeletionStatusRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DeletionTaskId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetUserPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetUserRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAccessKeysRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAccountAliasesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAttachedGroupPoliciesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAttachedRolePoliciesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAttachedUserPoliciesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	/// <summary>
	/// <p>The policy usage type that indicates whether the policy is used as a permissions policy or as the permissions boundary for an entity.</p> <p>For more information about permissions boundaries, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM identities </a> in the <i>IAM User Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PolicyUsageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PermissionsPolicy = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PermissionsBoundary = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListEntitiesForPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public EntityType EntityFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyUsageType PolicyUsageFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListGroupPoliciesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListGroupsForUserRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListGroupsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PathPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInstanceProfileTagsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInstanceProfilesForRoleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListInstanceProfilesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PathPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMFADeviceTagsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListMFADevicesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOpenIDConnectProviderTagsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OpenIDConnectProviderArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListOpenIDConnectProvidersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPoliciesGrantingServiceAccessRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Arn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ServiceNamespaces { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum PolicyScopeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		All = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Local = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPoliciesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyScopeType Scope { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> OnlyAttached { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string PathPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public PolicyUsageType PolicyUsageFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPolicyTagsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListPolicyVersionsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRolePoliciesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRoleTagsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListRolesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PathPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSAMLProviderTagsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SAMLProviderArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSAMLProvidersRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSSHPublicKeysRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListServerCertificateTagsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServerCertificateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListServerCertificatesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PathPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListServiceSpecificCredentialsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ServiceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListSigningCertificatesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUserPoliciesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUserTagsRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListUsersRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string PathPrefix { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AssignmentStatusType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Assigned = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Unassigned = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Any = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListVirtualMFADevicesRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public AssignmentStatusType AssignmentStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutGroupPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutRolePermissionsBoundaryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PermissionsBoundary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutRolePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutUserPermissionsBoundaryRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PermissionsBoundary { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutUserPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveClientIDFromOpenIDConnectProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OpenIDConnectProviderArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ClientID { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveRoleFromInstanceProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoveUserFromGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResetServiceSpecificCredentialRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceSpecificCredentialId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResyncMFADeviceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationCode1 { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AuthenticationCode2 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetDefaultPolicyVersionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string VersionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum GlobalEndpointTokenVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		v1Token = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		v2Token = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SetSecurityTokenServicePreferencesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public GlobalEndpointTokenVersion GlobalEndpointTokenVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SimulateCustomPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] PolicyInputList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PermissionsBoundaryPolicyInputList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ActionNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourcePolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CallerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContextEntry[] ContextEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceHandlingOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SimulatePrincipalPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicySourceArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PolicyInputList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] PermissionsBoundaryPolicyInputList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ActionNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] ResourceArns { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourcePolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CallerArn { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public ContextEntry[] ContextEntries { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string ResourceHandlingOption { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxItems { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Marker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagInstanceProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagMFADeviceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagOpenIDConnectProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OpenIDConnectProviderArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagRoleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagSAMLProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SAMLProviderArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagServerCertificateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServerCertificateName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagUserRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagInstanceProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InstanceProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagMFADeviceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SerialNumber { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagOpenIDConnectProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OpenIDConnectProviderArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagPolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagRoleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagSAMLProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SAMLProviderArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagServerCertificateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServerCertificateName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagUserRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAccessKeyRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string AccessKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StatusType Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAccountPasswordPolicyRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MinimumPasswordLength { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequireSymbols { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequireNumbers { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequireUppercaseCharacters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> RequireLowercaseCharacters { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> AllowUsersToChangePassword { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxPasswordAge { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> PasswordReusePrevention { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> HardExpiry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAssumeRolePolicyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PolicyDocument { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateGroupRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string GroupName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NewPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NewGroupName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateLoginProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Password { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> PasswordResetRequired { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateOpenIDConnectProviderThumbprintRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string OpenIDConnectProviderArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] ThumbprintList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRoleDescriptionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateRoleRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string RoleName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxSessionDuration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSAMLProviderRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SAMLMetadataDocument { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SAMLProviderArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSSHPublicKeyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SSHPublicKeyId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StatusType Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateServerCertificateRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServerCertificateName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NewPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NewServerCertificateName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateServiceSpecificCredentialRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServiceSpecificCredentialId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StatusType Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateSigningCertificateRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CertificateId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public StatusType Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateUserRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NewPath { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NewUserName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UploadSSHPublicKeyRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SSHPublicKeyBody { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UploadServerCertificateRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Path { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ServerCertificateName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CertificateBody { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string PrivateKey { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string CertificateChain { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public Tag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UploadSigningCertificateRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string UserName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string CertificateBody { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum SummaryKeyType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Users = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UsersQuota = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Groups = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GroupsQuota = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServerCertificates = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ServerCertificatesQuota = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UserPolicySizeQuota = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GroupPolicySizeQuota = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GroupsPerUserQuota = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SigningCertificatesPerUserQuota = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccessKeysPerUserQuota = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MFADevices = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MFADevicesInUse = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccountMFAEnabled = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccountAccessKeysPresent = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AccountSigningCertificatesPresent = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachedPoliciesPerGroupQuota = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachedPoliciesPerRoleQuota = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachedPoliciesPerUserQuota = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Policies = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PoliciesQuota = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PolicySizeQuota = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PolicyVersionsInUse = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PolicyVersionsInUseQuota = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VersionsPerPolicyQuota = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GlobalEndpointTokenVersion = 25,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Adds a new client ID (also known as audience) to the list of client IDs already registered for the specified IAM OpenID Connect (OIDC) provider resource.</p> <p>This operation is idempotent; it does not fail or return an error if you add an existing client ID to the provider.</p>
		/// GET_AddClientIDToOpenIDConnectProvider #Action=AddClientIDToOpenIDConnectProvider
		/// </summary>
		/// <param name="OpenIDConnectProviderArn">The Amazon Resource Name (ARN) of the IAM OpenID Connect (OIDC) provider resource to add the client ID to. You can get a list of OIDC provider ARNs by using the <a>ListOpenIDConnectProviders</a> operation.</param>
		/// <param name="ClientID">The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.</param>
		/// <returns>Success</returns>
		public async Task GET_AddClientIDToOpenIDConnectProviderAsync(string OpenIDConnectProviderArn, string ClientID, GET_AddClientIDToOpenIDConnectProviderAction Action, GET_AddClientIDToOpenIDConnectProviderVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AddClientIDToOpenIDConnectProvider?OpenIDConnectProviderArn=" + (OpenIDConnectProviderArn==null? "" : System.Uri.EscapeDataString(OpenIDConnectProviderArn))+"&ClientID=" + (ClientID==null? "" : System.Uri.EscapeDataString(ClientID))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds the specified IAM role to the specified instance profile. An instance profile can contain only one role, and this quota cannot be increased. You can remove the existing role and then add a different role to an instance profile. You must then wait for the change to appear across all of Amazon Web Services because of <a href="https://en.wikipedia.org/wiki/Eventual_consistency">eventual consistency</a>. To force the change, you must <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DisassociateIamInstanceProfile.html">disassociate the instance profile</a> and then <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_AssociateIamInstanceProfile.html">associate the instance profile</a>, or you can stop your instance and then restart it.</p> <note> <p>The caller of this operation must be granted the <code>PassRole</code> permission on the IAM role by a permissions policy.</p> </note> <p> For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>IAM User Guide</i>. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html">Using instance profiles</a> in the <i>IAM User Guide</i>.</p>
		/// GET_AddRoleToInstanceProfile #Action=AddRoleToInstanceProfile
		/// </summary>
		/// <param name="InstanceProfileName"><p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="RoleName"><p>The name of the role to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_AddRoleToInstanceProfileAsync(string InstanceProfileName, string RoleName, GET_AddRoleToInstanceProfileAction Action, GET_AddRoleToInstanceProfileVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AddRoleToInstanceProfile?InstanceProfileName=" + (InstanceProfileName==null? "" : System.Uri.EscapeDataString(InstanceProfileName))+"&RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds the specified user to the specified group.
		/// GET_AddUserToGroup #Action=AddUserToGroup
		/// </summary>
		/// <param name="GroupName"><p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="UserName"><p>The name of the user to add.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_AddUserToGroupAsync(string GroupName, string UserName, GET_AddUserToGroupAction Action, GET_AddUserToGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AddUserToGroup?GroupName=" + (GroupName==null? "" : System.Uri.EscapeDataString(GroupName))+"&UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches the specified managed policy to the specified IAM group.</p> <p>You use this operation to attach a managed policy to a group. To embed an inline policy in a group, use <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_PutGroupPolicy.html"> <code>PutGroupPolicy</code> </a>.</p> <p>As a best practice, you can validate your IAM policies. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_AttachGroupPolicy #Action=AttachGroupPolicy
		/// </summary>
		/// <param name="GroupName"><p>The name (friendly name, not ARN) of the group to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyArn"><p>The Amazon Resource Name (ARN) of the IAM policy you want to attach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_AttachGroupPolicyAsync(string GroupName, string PolicyArn, GET_AttachGroupPolicyAction Action, GET_AttachGroupPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachGroupPolicy?GroupName=" + (GroupName==null? "" : System.Uri.EscapeDataString(GroupName))+"&PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches the specified managed policy to the specified IAM role. When you attach a managed policy to a role, the managed policy becomes part of the role's permission (access) policy.</p> <note> <p>You cannot use a managed policy as the role's trust policy. The role's trust policy is created at the same time as the role, using <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html"> <code>CreateRole</code> </a>. You can update a role's trust policy using <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_UpdateAssumeRolePolicy.html"> <code>UpdateAssumerolePolicy</code> </a>.</p> </note> <p>Use this operation to attach a <i>managed</i> policy to a role. To embed an inline policy in a role, use <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_PutRolePolicy.html"> <code>PutRolePolicy</code> </a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>As a best practice, you can validate your IAM policies. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_AttachRolePolicy #Action=AttachRolePolicy
		/// </summary>
		/// <param name="RoleName"><p>The name (friendly name, not ARN) of the role to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyArn"><p>The Amazon Resource Name (ARN) of the IAM policy you want to attach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_AttachRolePolicyAsync(string RoleName, string PolicyArn, GET_AttachRolePolicyAction Action, GET_AttachRolePolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachRolePolicy?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Attaches the specified managed policy to the specified user.</p> <p>You use this operation to attach a <i>managed</i> policy to a user. To embed an inline policy in a user, use <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_PutUserPolicy.html"> <code>PutUserPolicy</code> </a>.</p> <p>As a best practice, you can validate your IAM policies. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_AttachUserPolicy #Action=AttachUserPolicy
		/// </summary>
		/// <param name="UserName"><p>The name (friendly name, not ARN) of the IAM user to attach the policy to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyArn"><p>The Amazon Resource Name (ARN) of the IAM policy you want to attach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_AttachUserPolicyAsync(string UserName, string PolicyArn, GET_AttachUserPolicyAction Action, GET_AttachUserPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=AttachUserPolicy?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Changes the password of the IAM user who is calling this operation. This operation can be performed using the CLI, the Amazon Web Services API, or the <b>My Security Credentials</b> page in the Amazon Web Services Management Console. The Amazon Web Services account root user password is not affected by this operation.</p> <p>Use <a>UpdateLoginProfile</a> to use the CLI, the Amazon Web Services API, or the <b>Users</b> page in the IAM console to change the password for any IAM user. For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing passwords</a> in the <i>IAM User Guide</i>.</p>
		/// GET_ChangePassword #Action=ChangePassword
		/// </summary>
		/// <param name="OldPassword">The IAM user's current password.</param>
		/// <param name="NewPassword"><p>The new password. The new password must conform to the Amazon Web Services account's password policy, if one exists.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the Amazon Web Services Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ChangePasswordAsync(string OldPassword, string NewPassword, GET_ChangePasswordAction Action, GET_ChangePasswordVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ChangePassword?OldPassword=" + (OldPassword==null? "" : System.Uri.EscapeDataString(OldPassword))+"&NewPassword=" + (NewPassword==null? "" : System.Uri.EscapeDataString(NewPassword))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Creates a new Amazon Web Services secret access key and corresponding Amazon Web Services access key ID for the specified user. The default status for new keys is <code>Active</code>.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the Amazon Web Services access key ID signing the request. This operation works for access keys under the Amazon Web Services account. Consequently, you can use this operation to manage Amazon Web Services account root user credentials. This is true even if the Amazon Web Services account has no associated users.</p> <p> For information about quotas on the number of keys you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p> <important> <p>To ensure the security of your Amazon Web Services account, the secret access key is accessible only during key and user creation. You must save the key (for example, in a text file) if you want to be able to access it again. If a secret key is lost, you can delete the access keys for the associated user and then create new keys.</p> </important>
		/// GET_CreateAccessKey #Action=CreateAccessKey
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user that the new key will belong to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreateAccessKeyAsync(string UserName, GET_CreateAccessKeyAction Action, GET_CreateAccessKeyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateAccessKey?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an alias for your Amazon Web Services account. For information about using an Amazon Web Services account alias, see <a href="https://docs.aws.amazon.com/signin/latest/userguide/CreateAccountAlias.html">Creating, deleting, and listing an Amazon Web Services account alias</a> in the <i>Amazon Web Services Sign-In User Guide</i>.
		/// GET_CreateAccountAlias #Action=CreateAccountAlias
		/// </summary>
		/// <param name="AccountAlias"><p>The account alias to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreateAccountAliasAsync(string AccountAlias, GET_CreateAccountAliasAction Action, GET_CreateAccountAliasVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateAccountAlias?AccountAlias=" + (AccountAlias==null? "" : System.Uri.EscapeDataString(AccountAlias))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new group.</p> <p> For information about the number of groups you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p>
		/// GET_CreateGroup #Action=CreateGroup
		/// </summary>
		/// <param name="Path"><p> The path to the group. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="GroupName"><p>The name of the group to create. Do not include the path in this value.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreateGroupAsync(string Path, string GroupName, GET_CreateGroupAction Action, GET_CreateGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateGroup?Path=" + (Path==null? "" : System.Uri.EscapeDataString(Path))+"&GroupName=" + (GroupName==null? "" : System.Uri.EscapeDataString(GroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Creates a new instance profile. For information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2.html">Using roles for applications on Amazon EC2</a> in the <i>IAM User Guide</i>, and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html#ec2-instance-profile">Instance profiles</a> in the <i>Amazon EC2 User Guide</i>.</p> <p> For information about the number of instance profiles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM object quotas</a> in the <i>IAM User Guide</i>.</p>
		/// GET_CreateInstanceProfile #Action=CreateInstanceProfile
		/// </summary>
		/// <param name="InstanceProfileName"><p>The name of the instance profile to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Path"><p> The path to the instance profile. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="Tags"><p>A list of tags that you want to attach to the newly created IAM instance profile. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.</p> </note></param>
		/// <returns>Success</returns>
		public async Task GET_CreateInstanceProfileAsync(string InstanceProfileName, string Path, Tag[] Tags, GET_CreateInstanceProfileAction Action, GET_CreateInstanceProfileVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateInstanceProfile?InstanceProfileName=" + (InstanceProfileName==null? "" : System.Uri.EscapeDataString(InstanceProfileName))+"&Path=" + (Path==null? "" : System.Uri.EscapeDataString(Path))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a password for the specified IAM user. A password allows an IAM user to access Amazon Web Services services through the Amazon Web Services Management Console.</p> <p>You can use the CLI, the Amazon Web Services API, or the <b>Users</b> page in the IAM console to create a password for any IAM user. Use <a>ChangePassword</a> to update your own existing password in the <b>My Security Credentials</b> page in the Amazon Web Services Management Console.</p> <p>For more information about managing passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing passwords</a> in the <i>IAM User Guide</i>.</p>
		/// GET_CreateLoginProfile #Action=CreateLoginProfile
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user to create a password for. The user must already exist.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Password"><p>The new password for the user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> that is used to validate this parameter is a string of characters. That string can include almost any printable ASCII character from the space (<code>\u0020</code>) through the end of the ASCII character range (<code>\u00FF</code>). You can also include the tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>) characters. Any of these characters are valid in a password. However, many tools, such as the Amazon Web Services Management Console, might restrict the ability to type certain characters because they have special meaning within that tool.</p></param>
		/// <param name="PasswordResetRequired">Specifies whether the user is required to set a new password on next sign-in.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateLoginProfileAsync(string UserName, string Password, bool PasswordResetRequired, GET_CreateLoginProfileAction Action, GET_CreateLoginProfileVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateLoginProfile?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Password=" + (Password==null? "" : System.Uri.EscapeDataString(Password))+"&PasswordResetRequired="+PasswordResetRequired+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an IAM entity to describe an identity provider (IdP) that supports <a href="http://openid.net/connect/">OpenID Connect (OIDC)</a>.</p> <p>The OIDC provider that you create with this operation can be used as a principal in a role's trust policy. Such a policy establishes a trust relationship between Amazon Web Services and the OIDC provider.</p> <p>If you are using an OIDC identity provider from Google, Facebook, or Amazon Cognito, you don't need to create a separate IAM identity provider. These OIDC identity providers are already built-in to Amazon Web Services and are available for your use. Instead, you can move directly to creating new roles using your identity provider. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_create_for-idp_oidc.html">Creating a role for web identity or OpenID connect federation</a> in the <i>IAM User Guide</i>.</p> <p>When you create the IAM OIDC provider, you specify the following:</p> <ul> <li> <p>The URL of the OIDC identity provider (IdP) to trust</p> </li> <li> <p>A list of client IDs (also known as audiences) that identify the application or applications allowed to authenticate using the OIDC provider</p> </li> <li> <p>A list of tags that are attached to the specified IAM OIDC provider</p> </li> <li> <p>A list of thumbprints of one or more server certificates that the IdP uses</p> </li> </ul> <p>You get all of this information from the OIDC IdP you want to use to access Amazon Web Services.</p> <note> <p>Amazon Web Services secures communication with some OIDC identity providers (IdPs) through our library of trusted root certificate authorities (CAs) instead of using a certificate thumbprint to verify your IdP server certificate. These OIDC IdPs include Auth0, GitHub, Google, and those that use an Amazon S3 bucket to host a JSON Web Key Set (JWKS) endpoint. In these cases, your legacy thumbprint remains in your configuration, but is no longer used for validation.</p> </note> <note> <p>The trust for the OIDC provider is derived from the IAM provider that this operation creates. Therefore, it is best to limit access to the <a>CreateOpenIDConnectProvider</a> operation to highly privileged users.</p> </note>
		/// GET_CreateOpenIDConnectProvider #Action=CreateOpenIDConnectProvider
		/// </summary>
		/// <param name="Url"><p>The URL of the identity provider. The URL must begin with <code>https://</code> and should correspond to the <code>iss</code> claim in the provider's OpenID Connect ID tokens. Per the OIDC standard, path components are allowed but query parameters are not. Typically the URL consists of only a hostname, like <code>https://server.example.org</code> or <code>https://example.com</code>. The URL should not contain a port number. </p> <p>You cannot register the same provider multiple times in a single Amazon Web Services account. If you try to submit a URL that has already been used for an OpenID Connect provider in the Amazon Web Services account, you will get an error.</p></param>
		/// <param name="ClientIDList"><p>Provides a list of client IDs, also known as audiences. When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. This is the value that's sent as the <code>client_id</code> parameter on OAuth requests.</p> <p>You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider.</p> <p>There is no defined format for a client ID. The <code>CreateOpenIDConnectProviderRequest</code> operation accepts client IDs up to 255 characters long.</p></param>
		/// <param name="ThumbprintList"><p>A list of server certificate thumbprints for the OpenID Connect (OIDC) identity provider's server certificates. Typically this list includes only one entry. However, IAM lets you have up to five thumbprints for an OIDC provider. This lets you maintain multiple thumbprints if the identity provider is rotating certificates.</p> <p>The server certificate thumbprint is the hex-encoded SHA-1 hash value of the X.509 certificate used by the domain where the OpenID Connect provider makes its keys available. It is always a 40-character string.</p> <p>You must provide at least one thumbprint when creating an IAM OIDC provider. For example, assume that the OIDC provider is <code>server.example.com</code> and the provider stores its keys at https://keys.server.example.com/openid-connect. In that case, the thumbprint string would be the hex-encoded SHA-1 hash value of the certificate used by <code>https://keys.server.example.com.</code> </p> <p>For more information about obtaining the OIDC provider thumbprint, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/identity-providers-oidc-obtain-thumbprint.html">Obtaining the thumbprint for an OpenID Connect provider</a> in the <i>IAM user Guide</i>.</p></param>
		/// <param name="Tags"><p>A list of tags that you want to attach to the new IAM OpenID Connect (OIDC) provider. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.</p> </note></param>
		/// <returns>Success</returns>
		public async Task GET_CreateOpenIDConnectProviderAsync(string Url, string[] ClientIDList, string[] ThumbprintList, Tag[] Tags, GET_CreateOpenIDConnectProviderAction Action, GET_CreateOpenIDConnectProviderVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateOpenIDConnectProvider?Url=" + (Url==null? "" : System.Uri.EscapeDataString(Url))+"&"+string.Join("&", ClientIDList.Select(z => $"ClientIDList={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ThumbprintList.Select(z => $"ThumbprintList={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new managed policy for your Amazon Web Services account.</p> <p>This operation creates a policy version with a version identifier of <code>v1</code> and sets v1 as the policy's default version. For more information about policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed policies</a> in the <i>IAM User Guide</i>.</p> <p>As a best practice, you can validate your IAM policies. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_policy-validator.html">Validating IAM policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policies in general, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_CreatePolicy #Action=CreatePolicy
		/// </summary>
		/// <param name="PolicyName"><p>The friendly name of the policy.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p></param>
		/// <param name="Path"><p>The path for the policy.</p> <p>For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p>You cannot use an asterisk (*) in the path name.</p> </note></param>
		/// <param name="PolicyDocument"><p>The JSON policy document that you want to use as the content for the new policy.</p> <p>You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p> <p>To learn more about JSON policy grammar, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_grammar.html">Grammar of the IAM JSON policy language</a> in the <i>IAM User Guide</i>. </p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <param name="Description"><p>A friendly description of the policy.</p> <p>Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables."</p> <p>The policy description is immutable. After a value is assigned, it cannot be changed.</p></param>
		/// <param name="Tags"><p>A list of tags that you want to attach to the new IAM customer managed policy. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.</p> </note></param>
		/// <returns>Success</returns>
		public async Task GET_CreatePolicyAsync(string PolicyName, string Path, string PolicyDocument, string Description, Tag[] Tags, GET_CreatePolicyAction Action, GET_CreatePolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreatePolicy?PolicyName=" + (PolicyName==null? "" : System.Uri.EscapeDataString(PolicyName))+"&Path=" + (Path==null? "" : System.Uri.EscapeDataString(Path))+"&PolicyDocument=" + (PolicyDocument==null? "" : System.Uri.EscapeDataString(PolicyDocument))+"&Description=" + (Description==null? "" : System.Uri.EscapeDataString(Description))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new version of the specified managed policy. To update a managed policy, you create a new policy version. A managed policy can have up to five versions. If the policy has five versions, you must delete an existing version using <a>DeletePolicyVersion</a> before you create a new version.</p> <p>Optionally, you can set the new version as the policy's default version. The default version is the version that is in effect for the IAM users, groups, and roles to which the policy is attached.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_CreatePolicyVersion #Action=CreatePolicyVersion
		/// </summary>
		/// <param name="PolicyArn"><p>The Amazon Resource Name (ARN) of the IAM policy to which you want to add a new version.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <param name="PolicyDocument"><p>The JSON policy document that you want to use as the content for this new version of the policy.</p> <p>You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <param name="SetAsDefault"><p>Specifies whether to set this version as the policy's default version.</p> <p>When this parameter is <code>true</code>, the new policy version becomes the operative version. That is, it becomes the version that is in effect for the IAM users, groups, and roles that the policy is attached to.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed policies</a> in the <i>IAM User Guide</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreatePolicyVersionAsync(string PolicyArn, string PolicyDocument, bool SetAsDefault, GET_CreatePolicyVersionAction Action, GET_CreatePolicyVersionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreatePolicyVersion?PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&PolicyDocument=" + (PolicyDocument==null? "" : System.Uri.EscapeDataString(PolicyDocument))+"&SetAsDefault="+SetAsDefault+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new role for your Amazon Web Services account.</p> <p> For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>IAM User Guide</i>. For information about quotas for role names and the number of roles you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p>
		/// GET_CreateRole #Action=CreateRole
		/// </summary>
		/// <param name="Path"><p> The path to the role. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM Identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="RoleName"><p>The name of the role to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="AssumeRolePolicyDocument"><p>The trust relationship policy document that grants an entity permission to assume the role.</p> <p>In IAM, you must provide a JSON policy that has been converted to a string. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p> Upon success, the response includes the same trust policy in JSON format.</p></param>
		/// <param name="Description">A description of the role.</param>
		/// <param name="MaxSessionDuration"><p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default value of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM roles</a> in the <i>IAM User Guide</i>.</p></param>
		/// <param name="PermissionsBoundary"><p>The ARN of the managed policy that is used to set the permissions boundary for the role.</p> <p>A permissions boundary policy defines the maximum permissions that identity-based policies can grant to an entity, but does not grant permissions. Permissions boundaries do not define the maximum permissions that a resource-based policy can grant to an entity. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM entities</a> in the <i>IAM User Guide</i>.</p> <p>For more information about policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policy-types">Policy types </a> in the <i>IAM User Guide</i>.</p></param>
		/// <param name="Tags"><p>A list of tags that you want to attach to the new role. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.</p> </note></param>
		/// <returns>Success</returns>
		public async Task GET_CreateRoleAsync(string Path, string RoleName, string AssumeRolePolicyDocument, string Description, int MaxSessionDuration, string PermissionsBoundary, Tag[] Tags, GET_CreateRoleAction Action, GET_CreateRoleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateRole?Path=" + (Path==null? "" : System.Uri.EscapeDataString(Path))+"&RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&AssumeRolePolicyDocument=" + (AssumeRolePolicyDocument==null? "" : System.Uri.EscapeDataString(AssumeRolePolicyDocument))+"&Description=" + (Description==null? "" : System.Uri.EscapeDataString(Description))+"&MaxSessionDuration="+MaxSessionDuration+"&PermissionsBoundary=" + (PermissionsBoundary==null? "" : System.Uri.EscapeDataString(PermissionsBoundary))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an IAM resource that describes an identity provider (IdP) that supports SAML 2.0.</p> <p>The SAML provider resource that you create with this operation can be used as a principal in an IAM role's trust policy. Such a policy can enable federated users who sign in using the SAML IdP to assume the role. You can create an IAM role that supports Web-based single sign-on (SSO) to the Amazon Web Services Management Console or one that supports API access to Amazon Web Services.</p> <p>When you create the SAML provider resource, you upload a SAML metadata document that you get from your IdP. That document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that the IdP sends. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note> <p> For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_enable-console-saml.html">Enabling SAML 2.0 federated users to access the Amazon Web Services Management Console</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based federation</a> in the <i>IAM User Guide</i>.</p>
		/// GET_CreateSAMLProvider #Action=CreateSAMLProvider
		/// </summary>
		/// <param name="SAMLMetadataDocument"><p>An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based federation</a> in the <i>IAM User Guide</i> </p></param>
		/// <param name="Name"><p>The name of the provider to create.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Tags"><p>A list of tags that you want to attach to the new IAM SAML provider. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.</p> </note></param>
		/// <returns>Success</returns>
		public async Task GET_CreateSAMLProviderAsync(string SAMLMetadataDocument, string Name, Tag[] Tags, GET_CreateSAMLProviderAction Action, GET_CreateSAMLProviderVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateSAMLProvider?SAMLMetadataDocument=" + (SAMLMetadataDocument==null? "" : System.Uri.EscapeDataString(SAMLMetadataDocument))+"&Name=" + (Name==null? "" : System.Uri.EscapeDataString(Name))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates an IAM role that is linked to a specific Amazon Web Services service. The service controls the attached policies and when the role can be deleted. This helps ensure that the service is not broken by an unexpectedly changed or deleted role, which could put your Amazon Web Services resources into an unknown state. Allowing the service to control the role helps improve service stability and proper cleanup when a service and its role are no longer needed. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/using-service-linked-roles.html">Using service-linked roles</a> in the <i>IAM User Guide</i>. </p> <p>To attach a policy to this service-linked role, you must make the request using the Amazon Web Services service that depends on this role.</p>
		/// GET_CreateServiceLinkedRole #Action=CreateServiceLinkedRole
		/// </summary>
		/// <param name="AWSServiceName"><p>The service principal for the Amazon Web Services service to which this role is attached. You use a string similar to a URL but without the http:// in front. For example: <code>elasticbeanstalk.amazonaws.com</code>. </p> <p>Service principals are unique and case-sensitive. To find the exact service principal for your service-linked role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-services-that-work-with-iam.html">Amazon Web Services services that work with IAM</a> in the <i>IAM User Guide</i>. Look for the services that have <b>Yes </b>in the <b>Service-Linked Role</b> column. Choose the <b>Yes</b> link to view the service-linked role documentation for that service.</p></param>
		/// <param name="Description">The description of the role.</param>
		/// <param name="CustomSuffix"><p/> <p>A string that you provide, which is combined with the service-provided prefix to form the complete role name. If you make multiple requests for the same service, then you must supply a different <code>CustomSuffix</code> for each request. Otherwise the request fails with a duplicate role name error. For example, you could add <code>-1</code> or <code>-debug</code> to the suffix.</p> <p>Some services do not support the <code>CustomSuffix</code> parameter. If you provide an optional suffix and the operation fails, try the operation again without the suffix.</p></param>
		/// <returns>Success</returns>
		public async Task GET_CreateServiceLinkedRoleAsync(string AWSServiceName, string Description, string CustomSuffix, GET_CreateServiceLinkedRoleAction Action, GET_CreateServiceLinkedRoleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateServiceLinkedRole?AWSServiceName=" + (AWSServiceName==null? "" : System.Uri.EscapeDataString(AWSServiceName))+"&Description=" + (Description==null? "" : System.Uri.EscapeDataString(Description))+"&CustomSuffix=" + (CustomSuffix==null? "" : System.Uri.EscapeDataString(CustomSuffix))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Generates a set of credentials consisting of a user name and password that can be used to access the service specified in the request. These credentials are generated by IAM, and can be used only for the specified service. </p> <p>You can have a maximum of two sets of service-specific credentials for each supported service per user.</p> <p>You can create service-specific credentials for CodeCommit and Amazon Keyspaces (for Apache Cassandra).</p> <p>You can reset the password to a new service-generated value by calling <a>ResetServiceSpecificCredential</a>.</p> <p>For more information about service-specific credentials, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_ssh-keys.html">Using IAM with CodeCommit: Git credentials, SSH keys, and Amazon Web Services access keys</a> in the <i>IAM User Guide</i>.</p>
		/// GET_CreateServiceSpecificCredential #Action=CreateServiceSpecificCredential
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="ServiceName">The name of the Amazon Web Services service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateServiceSpecificCredentialAsync(string UserName, string ServiceName, GET_CreateServiceSpecificCredentialAction Action, GET_CreateServiceSpecificCredentialVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateServiceSpecificCredential?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&ServiceName=" + (ServiceName==null? "" : System.Uri.EscapeDataString(ServiceName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new IAM user for your Amazon Web Services account.</p> <p> For information about quotas for the number of IAM users you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p>
		/// GET_CreateUser #Action=CreateUser
		/// </summary>
		/// <param name="Path"><p> The path for the user name. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="UserName"><p>The name of the user to create.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p></param>
		/// <param name="PermissionsBoundary"><p>The ARN of the managed policy that is used to set the permissions boundary for the user.</p> <p>A permissions boundary policy defines the maximum permissions that identity-based policies can grant to an entity, but does not grant permissions. Permissions boundaries do not define the maximum permissions that a resource-based policy can grant to an entity. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM entities</a> in the <i>IAM User Guide</i>.</p> <p>For more information about policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policy-types">Policy types </a> in the <i>IAM User Guide</i>.</p></param>
		/// <param name="Tags"><p>A list of tags that you want to attach to the new user. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.</p> </note></param>
		/// <returns>Success</returns>
		public async Task GET_CreateUserAsync(string Path, string UserName, string PermissionsBoundary, Tag[] Tags, GET_CreateUserAction Action, GET_CreateUserVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateUser?Path=" + (Path==null? "" : System.Uri.EscapeDataString(Path))+"&UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&PermissionsBoundary=" + (PermissionsBoundary==null? "" : System.Uri.EscapeDataString(PermissionsBoundary))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Creates a new virtual MFA device for the Amazon Web Services account. After creating the virtual MFA, use <a>EnableMFADevice</a> to attach the MFA device to an IAM user. For more information about creating and working with virtual MFA devices, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a virtual MFA device</a> in the <i>IAM User Guide</i>.</p> <p>For information about the maximum number of MFA devices you can create, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p> <important> <p>The seed information contained in the QR code and the Base32 string should be treated like any other secret access information. In other words, protect the seed information as you would your Amazon Web Services access keys or your passwords. After you provision your virtual device, you should ensure that the information is destroyed following secure procedures.</p> </important>
		/// GET_CreateVirtualMFADevice #Action=CreateVirtualMFADevice
		/// </summary>
		/// <param name="Path"><p> The path for the virtual MFA device. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/).</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="VirtualMFADeviceName"><p>The name of the virtual MFA device, which must be unique. Use with path to uniquely identify a virtual MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Tags"><p>A list of tags that you want to attach to the new IAM virtual MFA device. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.</p> </note></param>
		/// <returns>Success</returns>
		public async Task GET_CreateVirtualMFADeviceAsync(string Path, string VirtualMFADeviceName, Tag[] Tags, GET_CreateVirtualMFADeviceAction Action, GET_CreateVirtualMFADeviceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateVirtualMFADevice?Path=" + (Path==null? "" : System.Uri.EscapeDataString(Path))+"&VirtualMFADeviceName=" + (VirtualMFADeviceName==null? "" : System.Uri.EscapeDataString(VirtualMFADeviceName))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deactivates the specified MFA device and removes it from association with the user name for which it was originally enabled.</p> <p>For more information about creating and working with virtual MFA devices, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Enabling a virtual multi-factor authentication (MFA) device</a> in the <i>IAM User Guide</i>.</p>
		/// GET_DeactivateMFADevice #Action=DeactivateMFADevice
		/// </summary>
		/// <param name="UserName"><p>The name of the user whose MFA device you want to deactivate.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="SerialNumber"><p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeactivateMFADeviceAsync(string UserName, string SerialNumber, GET_DeactivateMFADeviceAction Action, GET_DeactivateMFADeviceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeactivateMFADevice?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&SerialNumber=" + (SerialNumber==null? "" : System.Uri.EscapeDataString(SerialNumber))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the access key pair associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the Amazon Web Services access key ID signing the request. This operation works for access keys under the Amazon Web Services account. Consequently, you can use this operation to manage Amazon Web Services account root user credentials even if the Amazon Web Services account has no associated users.</p>
		/// GET_DeleteAccessKey #Action=DeleteAccessKey
		/// </summary>
		/// <param name="UserName"><p>The name of the user whose access key pair you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="AccessKeyId"><p>The access key ID for the access key ID and secret access key you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteAccessKeyAsync(string UserName, string AccessKeyId, GET_DeleteAccessKeyAction Action, GET_DeleteAccessKeyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteAccessKey?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&AccessKeyId=" + (AccessKeyId==null? "" : System.Uri.EscapeDataString(AccessKeyId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified Amazon Web Services account alias. For information about using an Amazon Web Services account alias, see <a href="https://docs.aws.amazon.com/signin/latest/userguide/CreateAccountAlias.html">Creating, deleting, and listing an Amazon Web Services account alias</a> in the <i>Amazon Web Services Sign-In User Guide</i>.
		/// GET_DeleteAccountAlias #Action=DeleteAccountAlias
		/// </summary>
		/// <param name="AccountAlias"><p>The name of the account alias to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteAccountAliasAsync(string AccountAlias, GET_DeleteAccountAliasAction Action, GET_DeleteAccountAliasVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteAccountAlias?AccountAlias=" + (AccountAlias==null? "" : System.Uri.EscapeDataString(AccountAlias))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the password policy for the Amazon Web Services account. There are no parameters.
		/// GET_DeleteAccountPasswordPolicy #Action=DeleteAccountPasswordPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_DeleteAccountPasswordPolicyAsync(GET_DeleteAccountPasswordPolicyAction Action, GET_DeleteAccountPasswordPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteAccountPasswordPolicy?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the password policy for the Amazon Web Services account. There are no parameters.
		/// POST_DeleteAccountPasswordPolicy #Action=DeleteAccountPasswordPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_DeleteAccountPasswordPolicyAsync(GET_DeleteAccountPasswordPolicyAction Action, POST_DeleteAccountPasswordPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteAccountPasswordPolicy?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified IAM group. The group must not contain any users or have any attached policies.
		/// GET_DeleteGroup #Action=DeleteGroup
		/// </summary>
		/// <param name="GroupName"><p>The name of the IAM group to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteGroupAsync(string GroupName, GET_DeleteGroupAction Action, GET_DeleteGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteGroup?GroupName=" + (GroupName==null? "" : System.Uri.EscapeDataString(GroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified inline policy that is embedded in the specified IAM group.</p> <p>A group can also have managed policies attached to it. To detach a managed policy from a group, use <a>DetachGroupPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_DeleteGroupPolicy #Action=DeleteGroupPolicy
		/// </summary>
		/// <param name="GroupName"><p>The name (friendly name, not ARN) identifying the group that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyName"><p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteGroupPolicyAsync(string GroupName, string PolicyName, GET_DeleteGroupPolicyAction Action, GET_DeleteGroupPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteGroupPolicy?GroupName=" + (GroupName==null? "" : System.Uri.EscapeDataString(GroupName))+"&PolicyName=" + (PolicyName==null? "" : System.Uri.EscapeDataString(PolicyName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified instance profile. The instance profile must not have an associated role.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the instance profile you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important> <p>For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html">Using instance profiles</a> in the <i>IAM User Guide</i>.</p>
		/// GET_DeleteInstanceProfile #Action=DeleteInstanceProfile
		/// </summary>
		/// <param name="InstanceProfileName"><p>The name of the instance profile to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteInstanceProfileAsync(string InstanceProfileName, GET_DeleteInstanceProfileAction Action, GET_DeleteInstanceProfileVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteInstanceProfile?InstanceProfileName=" + (InstanceProfileName==null? "" : System.Uri.EscapeDataString(InstanceProfileName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the password for the specified IAM user, For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_admin-change-user.html">Managing passwords for IAM users</a>.</p> <p>You can use the CLI, the Amazon Web Services API, or the <b>Users</b> page in the IAM console to delete a password for any IAM user. You can use <a>ChangePassword</a> to update, but not delete, your own password in the <b>My Security Credentials</b> page in the Amazon Web Services Management Console.</p> <important> <p>Deleting a user's password does not prevent a user from accessing Amazon Web Services through the command line interface or the API. To prevent all user access, you must also either make any access keys inactive or delete them. For more information about making keys inactive or deleting them, see <a>UpdateAccessKey</a> and <a>DeleteAccessKey</a>.</p> </important>
		/// GET_DeleteLoginProfile #Action=DeleteLoginProfile
		/// </summary>
		/// <param name="UserName"><p>The name of the user whose password you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteLoginProfileAsync(string UserName, GET_DeleteLoginProfileAction Action, GET_DeleteLoginProfileVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteLoginProfile?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes an OpenID Connect identity provider (IdP) resource object in IAM.</p> <p>Deleting an IAM OIDC provider resource does not update any roles that reference the provider as a principal in their trust policies. Any attempt to assume a role that references a deleted provider fails.</p> <p>This operation is idempotent; it does not fail or return an error if you call the operation for a provider that does not exist.</p>
		/// GET_DeleteOpenIDConnectProvider #Action=DeleteOpenIDConnectProvider
		/// </summary>
		/// <param name="OpenIDConnectProviderArn">The Amazon Resource Name (ARN) of the IAM OpenID Connect provider resource object to delete. You can get a list of OpenID Connect provider resource ARNs by using the <a>ListOpenIDConnectProviders</a> operation.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteOpenIDConnectProviderAsync(string OpenIDConnectProviderArn, GET_DeleteOpenIDConnectProviderAction Action, GET_DeleteOpenIDConnectProviderVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteOpenIDConnectProvider?OpenIDConnectProviderArn=" + (OpenIDConnectProviderArn==null? "" : System.Uri.EscapeDataString(OpenIDConnectProviderArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified managed policy.</p> <p>Before you can delete a managed policy, you must first detach the policy from all users, groups, and roles that it is attached to. In addition, you must delete all the policy's versions. The following steps describe the process for deleting a managed policy:</p> <ul> <li> <p>Detach the policy from all users, groups, and roles that the policy is attached to, using <a>DetachUserPolicy</a>, <a>DetachGroupPolicy</a>, or <a>DetachRolePolicy</a>. To list all the users, groups, and roles that a policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> </li> <li> <p>Delete all versions of the policy using <a>DeletePolicyVersion</a>. To list the policy's versions, use <a>ListPolicyVersions</a>. You cannot use <a>DeletePolicyVersion</a> to delete the version that is marked as the default version. You delete the policy's default version in the next step of the process.</p> </li> <li> <p>Delete the policy (this automatically deletes the policy's default version) using this operation.</p> </li> </ul> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_DeletePolicy #Action=DeletePolicy
		/// </summary>
		/// <param name="PolicyArn"><p>The Amazon Resource Name (ARN) of the IAM policy you want to delete.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeletePolicyAsync(string PolicyArn, GET_DeletePolicyAction Action, GET_DeletePolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeletePolicy?PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified version from the specified managed policy.</p> <p>You cannot delete the default version from a policy using this operation. To delete the default version from a policy, use <a>DeletePolicy</a>. To find out which version of a policy is marked as the default version, use <a>ListPolicyVersions</a>.</p> <p>For information about versions for managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_DeletePolicyVersion #Action=DeletePolicyVersion
		/// </summary>
		/// <param name="PolicyArn"><p>The Amazon Resource Name (ARN) of the IAM policy from which you want to delete a version.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <param name="VersionId"><p>The policy version to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed policies</a> in the <i>IAM User Guide</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeletePolicyVersionAsync(string PolicyArn, string VersionId, GET_DeletePolicyVersionAction Action, GET_DeletePolicyVersionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeletePolicyVersion?PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&VersionId=" + (VersionId==null? "" : System.Uri.EscapeDataString(VersionId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified role. Unlike the Amazon Web Services Management Console, when you delete a role programmatically, you must delete the items attached to the role manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_manage_delete.html#roles-managingrole-deleting-cli">Deleting an IAM role</a>. Before attempting to delete a role, remove the following attached items: </p> <ul> <li> <p>Inline policies (<a>DeleteRolePolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachRolePolicy</a>)</p> </li> <li> <p>Instance profile (<a>RemoveRoleFromInstanceProfile</a>)</p> </li> <li> <p>Optional – Delete instance profile after detaching from role for resource clean up (<a>DeleteInstanceProfile</a>)</p> </li> </ul> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to delete. Deleting a role or instance profile that is associated with a running instance will break any applications running on the instance.</p> </important>
		/// GET_DeleteRole #Action=DeleteRole
		/// </summary>
		/// <param name="RoleName"><p>The name of the role to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteRoleAsync(string RoleName, GET_DeleteRoleAction Action, GET_DeleteRoleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteRole?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the permissions boundary for the specified IAM role. </p> <p>You cannot set the boundary for a service-linked role.</p> <important> <p>Deleting the permissions boundary for a role might increase its permissions. For example, it might allow anyone who assumes the role to perform all the actions granted in its permissions policies.</p> </important>
		/// GET_DeleteRolePermissionsBoundary #Action=DeleteRolePermissionsBoundary
		/// </summary>
		/// <param name="RoleName">The name (friendly name, not ARN) of the IAM role from which you want to remove the permissions boundary.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteRolePermissionsBoundaryAsync(string RoleName, GET_DeleteRolePermissionsBoundaryAction Action, GET_DeleteRolePermissionsBoundaryVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteRolePermissionsBoundary?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified inline policy that is embedded in the specified IAM role.</p> <p>A role can also have managed policies attached to it. To detach a managed policy from a role, use <a>DetachRolePolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_DeleteRolePolicy #Action=DeleteRolePolicy
		/// </summary>
		/// <param name="RoleName"><p>The name (friendly name, not ARN) identifying the role that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyName"><p>The name of the inline policy to delete from the specified IAM role.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteRolePolicyAsync(string RoleName, string PolicyName, GET_DeleteRolePolicyAction Action, GET_DeleteRolePolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteRolePolicy?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&PolicyName=" + (PolicyName==null? "" : System.Uri.EscapeDataString(PolicyName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a SAML provider resource in IAM.</p> <p>Deleting the provider resource from IAM does not update any roles that reference the SAML provider resource's ARN as a principal in their trust policies. Any attempt to assume a role that references a non-existent provider resource ARN fails.</p> <note> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
		/// GET_DeleteSAMLProvider #Action=DeleteSAMLProvider
		/// </summary>
		/// <param name="SAMLProviderArn">The Amazon Resource Name (ARN) of the SAML provider to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteSAMLProviderAsync(string SAMLProviderArn, GET_DeleteSAMLProviderAction Action, GET_DeleteSAMLProviderVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteSAMLProvider?SAMLProviderArn=" + (SAMLProviderArn==null? "" : System.Uri.EscapeDataString(SAMLProviderArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified SSH public key.</p> <p>The SSH public key deleted by this operation is used only for authenticating the associated IAM user to an CodeCommit repository. For more information about using SSH keys to authenticate to an CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up CodeCommit for SSH connections</a> in the <i>CodeCommit User Guide</i>.</p>
		/// GET_DeleteSSHPublicKey #Action=DeleteSSHPublicKey
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="SSHPublicKeyId"><p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteSSHPublicKeyAsync(string UserName, string SSHPublicKeyId, GET_DeleteSSHPublicKeyAction Action, GET_DeleteSSHPublicKeyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteSSHPublicKey?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&SSHPublicKeyId=" + (SSHPublicKeyId==null? "" : System.Uri.EscapeDataString(SSHPublicKeyId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified server certificate.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with server certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of Amazon Web Services services that can use the server certificates that you manage with IAM.</p> <important> <p> If you are using a server certificate with Elastic Load Balancing, deleting the certificate could have implications for your application. If Elastic Load Balancing doesn't detect the deletion of bound certificates, it may continue to use the certificates. This could cause Elastic Load Balancing to stop accepting traffic. We recommend that you remove the reference to the certificate from Elastic Load Balancing before using this command to delete the certificate. For more information, see <a href="https://docs.aws.amazon.com/ElasticLoadBalancing/latest/APIReference/API_DeleteLoadBalancerListeners.html">DeleteLoadBalancerListeners</a> in the <i>Elastic Load Balancing API Reference</i>.</p> </important>
		/// GET_DeleteServerCertificate #Action=DeleteServerCertificate
		/// </summary>
		/// <param name="ServerCertificateName"><p>The name of the server certificate you want to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteServerCertificateAsync(string ServerCertificateName, GET_DeleteServerCertificateAction Action, GET_DeleteServerCertificateVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteServerCertificate?ServerCertificateName=" + (ServerCertificateName==null? "" : System.Uri.EscapeDataString(ServerCertificateName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Submits a service-linked role deletion request and returns a <code>DeletionTaskId</code>, which you can use to check the status of the deletion. Before you call this operation, confirm that the role has no active sessions and that any resources used by the role in the linked service are deleted. If you call this operation more than once for the same service-linked role and an earlier deletion task is not complete, then the <code>DeletionTaskId</code> of the earlier request is returned.</p> <p>If you submit a deletion request for a service-linked role whose linked service is still accessing a resource, then the deletion task fails. If it fails, the <a>GetServiceLinkedRoleDeletionStatus</a> operation returns the reason for the failure, usually including the resources that must be deleted. To delete the service-linked role, you must first remove those resources from the linked service and then submit the deletion request again. Resources are specific to the service that is linked to the role. For more information about removing resources from a service, see the <a href="http://docs.aws.amazon.com/">Amazon Web Services documentation</a> for your service.</p> <p>For more information about service-linked roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_terms-and-concepts.html#iam-term-service-linked-role">Roles terms and concepts: Amazon Web Services service-linked role</a> in the <i>IAM User Guide</i>.</p>
		/// GET_DeleteServiceLinkedRole #Action=DeleteServiceLinkedRole
		/// </summary>
		/// <param name="RoleName">The name of the service-linked role to be deleted.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteServiceLinkedRoleAsync(string RoleName, GET_DeleteServiceLinkedRoleAction Action, GET_DeleteServiceLinkedRoleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteServiceLinkedRole?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the specified service-specific credential.
		/// GET_DeleteServiceSpecificCredential #Action=DeleteServiceSpecificCredential
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="ServiceSpecificCredentialId"><p>The unique identifier of the service-specific credential. You can get this value by calling <a>ListServiceSpecificCredentials</a>.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteServiceSpecificCredentialAsync(string UserName, string ServiceSpecificCredentialId, GET_DeleteServiceSpecificCredentialAction Action, GET_DeleteServiceSpecificCredentialVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteServiceSpecificCredential?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&ServiceSpecificCredentialId=" + (ServiceSpecificCredentialId==null? "" : System.Uri.EscapeDataString(ServiceSpecificCredentialId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a signing certificate associated with the specified IAM user.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the Amazon Web Services access key ID signing the request. This operation works for access keys under the Amazon Web Services account. Consequently, you can use this operation to manage Amazon Web Services account root user credentials even if the Amazon Web Services account has no associated IAM users.</p>
		/// GET_DeleteSigningCertificate #Action=DeleteSigningCertificate
		/// </summary>
		/// <param name="UserName"><p>The name of the user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="CertificateId"><p>The ID of the signing certificate to delete.</p> <p>The format of this parameter, as described by its <a href="http://wikipedia.org/wiki/regex">regex</a> pattern, is a string of characters that can be upper- or lower-cased letters or digits.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteSigningCertificateAsync(string UserName, string CertificateId, GET_DeleteSigningCertificateAction Action, GET_DeleteSigningCertificateVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteSigningCertificate?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&CertificateId=" + (CertificateId==null? "" : System.Uri.EscapeDataString(CertificateId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified IAM user. Unlike the Amazon Web Services Management Console, when you delete a user programmatically, you must delete the items attached to the user manually, or the deletion fails. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_deleting_cli">Deleting an IAM user</a>. Before attempting to delete a user, remove the following items:</p> <ul> <li> <p>Password (<a>DeleteLoginProfile</a>)</p> </li> <li> <p>Access keys (<a>DeleteAccessKey</a>)</p> </li> <li> <p>Signing certificate (<a>DeleteSigningCertificate</a>)</p> </li> <li> <p>SSH public key (<a>DeleteSSHPublicKey</a>)</p> </li> <li> <p>Git credentials (<a>DeleteServiceSpecificCredential</a>)</p> </li> <li> <p>Multi-factor authentication (MFA) device (<a>DeactivateMFADevice</a>, <a>DeleteVirtualMFADevice</a>)</p> </li> <li> <p>Inline policies (<a>DeleteUserPolicy</a>)</p> </li> <li> <p>Attached managed policies (<a>DetachUserPolicy</a>)</p> </li> <li> <p>Group memberships (<a>RemoveUserFromGroup</a>)</p> </li> </ul>
		/// GET_DeleteUser #Action=DeleteUser
		/// </summary>
		/// <param name="UserName"><p>The name of the user to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteUserAsync(string UserName, GET_DeleteUserAction Action, GET_DeleteUserVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteUser?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the permissions boundary for the specified IAM user.</p> <important> <p>Deleting the permissions boundary for a user might increase its permissions by allowing the user to perform all the actions granted in its permissions policies. </p> </important>
		/// GET_DeleteUserPermissionsBoundary #Action=DeleteUserPermissionsBoundary
		/// </summary>
		/// <param name="UserName">The name (friendly name, not ARN) of the IAM user from which you want to remove the permissions boundary.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteUserPermissionsBoundaryAsync(string UserName, GET_DeleteUserPermissionsBoundaryAction Action, GET_DeleteUserPermissionsBoundaryVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteUserPermissionsBoundary?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes the specified inline policy that is embedded in the specified IAM user.</p> <p>A user can also have managed policies attached to it. To detach a managed policy from a user, use <a>DetachUserPolicy</a>. For more information about policies, refer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_DeleteUserPolicy #Action=DeleteUserPolicy
		/// </summary>
		/// <param name="UserName"><p>The name (friendly name, not ARN) identifying the user that the policy is embedded in.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyName"><p>The name identifying the policy document to delete.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteUserPolicyAsync(string UserName, string PolicyName, GET_DeleteUserPolicyAction Action, GET_DeleteUserPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteUserPolicy?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&PolicyName=" + (PolicyName==null? "" : System.Uri.EscapeDataString(PolicyName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deletes a virtual MFA device.</p> <note> <p> You must deactivate a user's virtual MFA device before you can delete it. For information about deactivating MFA devices, see <a>DeactivateMFADevice</a>. </p> </note>
		/// GET_DeleteVirtualMFADevice #Action=DeleteVirtualMFADevice
		/// </summary>
		/// <param name="SerialNumber"><p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p></param>
		/// <returns>Success</returns>
		public async Task GET_DeleteVirtualMFADeviceAsync(string SerialNumber, GET_DeleteVirtualMFADeviceAction Action, GET_DeleteVirtualMFADeviceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteVirtualMFADevice?SerialNumber=" + (SerialNumber==null? "" : System.Uri.EscapeDataString(SerialNumber))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified managed policy from the specified IAM group.</p> <p>A group can also have inline policies embedded with it. To delete an inline policy, use <a>DeleteGroupPolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_DetachGroupPolicy #Action=DetachGroupPolicy
		/// </summary>
		/// <param name="GroupName"><p>The name (friendly name, not ARN) of the IAM group to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyArn"><p>The Amazon Resource Name (ARN) of the IAM policy you want to detach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DetachGroupPolicyAsync(string GroupName, string PolicyArn, GET_DetachGroupPolicyAction Action, GET_DetachGroupPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachGroupPolicy?GroupName=" + (GroupName==null? "" : System.Uri.EscapeDataString(GroupName))+"&PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified managed policy from the specified role.</p> <p>A role can also have inline policies embedded with it. To delete an inline policy, use <a>DeleteRolePolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_DetachRolePolicy #Action=DetachRolePolicy
		/// </summary>
		/// <param name="RoleName"><p>The name (friendly name, not ARN) of the IAM role to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyArn"><p>The Amazon Resource Name (ARN) of the IAM policy you want to detach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DetachRolePolicyAsync(string RoleName, string PolicyArn, GET_DetachRolePolicyAction Action, GET_DetachRolePolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachRolePolicy?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified managed policy from the specified user.</p> <p>A user can also have inline policies embedded with it. To delete an inline policy, use <a>DeleteUserPolicy</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_DetachUserPolicy #Action=DetachUserPolicy
		/// </summary>
		/// <param name="UserName"><p>The name (friendly name, not ARN) of the IAM user to detach the policy from.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyArn"><p>The Amazon Resource Name (ARN) of the IAM policy you want to detach.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_DetachUserPolicyAsync(string UserName, string PolicyArn, GET_DetachUserPolicyAction Action, GET_DetachUserPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DetachUserPolicy?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Enables the specified MFA device and associates it with the specified IAM user. When enabled, the MFA device is required for every subsequent login by the IAM user associated with the device.
		/// GET_EnableMFADevice #Action=EnableMFADevice
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user for whom you want to enable the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="SerialNumber"><p>The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@:/-</p></param>
		/// <param name="AuthenticationCode1"><p>An authentication code emitted by the device. </p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important></param>
		/// <param name="AuthenticationCode2"><p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a string of six digits.</p> <important> <p>Submit your request immediately after generating the authentication codes. If you generate the codes and then wait too long to submit the request, the MFA device successfully associates with the user but the MFA device becomes out of sync. This happens because time-based one-time passwords (TOTP) expire after a short period of time. If this happens, you can <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_mfa_sync.html">resync the device</a>.</p> </important></param>
		/// <returns>Success</returns>
		public async Task GET_EnableMFADeviceAsync(string UserName, string SerialNumber, string AuthenticationCode1, string AuthenticationCode2, GET_EnableMFADeviceAction Action, GET_EnableMFADeviceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=EnableMFADevice?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&SerialNumber=" + (SerialNumber==null? "" : System.Uri.EscapeDataString(SerialNumber))+"&AuthenticationCode1=" + (AuthenticationCode1==null? "" : System.Uri.EscapeDataString(AuthenticationCode1))+"&AuthenticationCode2=" + (AuthenticationCode2==null? "" : System.Uri.EscapeDataString(AuthenticationCode2))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a credential report for the Amazon Web Services account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting credential reports</a> in the <i>IAM User Guide</i>.
		/// GET_GenerateCredentialReport #Action=GenerateCredentialReport
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_GenerateCredentialReportAsync(GET_GenerateCredentialReportAction Action, GET_GenerateCredentialReportVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GenerateCredentialReport?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Generates a credential report for the Amazon Web Services account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting credential reports</a> in the <i>IAM User Guide</i>.
		/// POST_GenerateCredentialReport #Action=GenerateCredentialReport
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_GenerateCredentialReportAsync(GET_GenerateCredentialReportAction Action, POST_GenerateCredentialReportVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GenerateCredentialReport?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Generates a report for service last accessed data for Organizations. You can generate a report for any entities (organization root, organizational unit, or account) or policies in your organization.</p> <p>To call this operation, you must be signed in using your Organizations management account credentials. You can use your long-term IAM user or root user credentials, or temporary credentials from assuming an IAM role. SCPs must be enabled for your organization root. You must have the required IAM and Organizations permissions. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining permissions using service last accessed data</a> in the <i>IAM User Guide</i>.</p> <p>You can generate a service last accessed data report for entities by specifying only the entity's path. This data includes a list of services that are allowed by any service control policies (SCPs) that apply to the entity.</p> <p>You can generate a service last accessed data report for a policy by specifying an entity's path and an optional Organizations policy ID. This data includes a list of services that are allowed by the specified SCP.</p> <p>For each service in both report types, the data includes the most recent account activity that the policy allows to account principals in the entity or the entity's children. For important information about the data, reporting period, permissions required, troubleshooting, and supported Regions see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing permissions using service last accessed data</a> in the <i>IAM User Guide</i>.</p> <important> <p>The data includes all attempts to access Amazon Web Services, not just the successful ones. This includes all attempts that were made using the Amazon Web Services Management Console, the Amazon Web Services API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that an account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>This operation returns a <code>JobId</code>. Use this parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation to check the status of the report generation. To check the status of this request, use the <code>JobId</code> parameter in the <code> <a>GetOrganizationsAccessReport</a> </code> operation and test the <code>JobStatus</code> response parameter. When the job is complete, you can retrieve the report.</p> <p>To generate a service last accessed data report for entities, specify an entity path without specifying the optional Organizations policy ID. The type of entity that you specify determines the data returned in the report.</p> <ul> <li> <p> <b>Root</b> – When you specify the organizations root as the entity, the resulting report lists all of the services allowed by SCPs that are attached to your root. For each service, the report includes data for all accounts in your organization except the management account, because the management account is not limited by SCPs.</p> </li> <li> <p> <b>OU</b> – When you specify an organizational unit (OU) as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the OU and its parents. For each service, the report includes data for all accounts in the OU or its children. This data excludes the management account, because the management account is not limited by SCPs.</p> </li> <li> <p> <b>management account</b> – When you specify the management account, the resulting report lists all Amazon Web Services services, because the management account is not limited by SCPs. For each service, the report includes data for only the management account.</p> </li> <li> <p> <b>Account</b> – When you specify another account as the entity, the resulting report lists all of the services allowed by SCPs that are attached to the account and its parents. For each service, the report includes data for only the specified account.</p> </li> </ul> <p>To generate a service last accessed data report for policies, specify an entity path and the optional Organizations policy ID. The type of entity that you specify determines the data returned for each service.</p> <ul> <li> <p> <b>Root</b> – When you specify the root entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in your organization to which the SCP applies. This data excludes the management account, because the management account is not limited by SCPs. If the SCP is not attached to any entities in the organization, then the report will return a list of services with no data.</p> </li> <li> <p> <b>OU</b> – When you specify an OU entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for all accounts in the OU or its children to which the SCP applies. This means that other accounts outside the OU that are affected by the SCP might not be included in the data. This data excludes the management account, because the management account is not limited by SCPs. If the SCP is not attached to the OU or one of its children, the report will return a list of services with no data.</p> </li> <li> <p> <b>management account</b> – When you specify the management account, the resulting report lists all Amazon Web Services services, because the management account is not limited by SCPs. If you specify a policy ID in the CLI or API, the policy is ignored. For each service, the report includes data for only the management account.</p> </li> <li> <p> <b>Account</b> – When you specify another account entity and a policy ID, the resulting report lists all of the services that are allowed by the specified SCP. For each service, the report includes data for only the specified account. This means that other accounts in the organization that are affected by the SCP might not be included in the data. If the SCP is not attached to the account, the report will return a list of services with no data.</p> </li> </ul> <note> <p>Service last accessed data does not use other policy types when determining whether a principal could access a service. These other policy types include identity-based policies, resource-based policies, access control lists, IAM permissions boundaries, and STS assume role policies. It only applies SCP logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing policy scope by viewing user activity</a> in the <i>IAM User Guide</i>.</p>
		/// GET_GenerateOrganizationsAccessReport #Action=GenerateOrganizationsAccessReport
		/// </summary>
		/// <param name="EntityPath">The path of the Organizations entity (root, OU, or account). You can build an entity path using the known structure of your organization. For example, assume that your account ID is <code>123456789012</code> and its parent OU ID is <code>ou-rge0-awsabcde</code>. The organization root ID is <code>r-f6g7h8i9j0example</code> and your organization ID is <code>o-a1b2c3d4e5</code>. Your entity path is <code>o-a1b2c3d4e5/r-f6g7h8i9j0example/ou-rge0-awsabcde/123456789012</code>.</param>
		/// <param name="OrganizationsPolicyId"><p>The identifier of the Organizations service control policy (SCP). This parameter is optional.</p> <p>This ID is used to generate information about when an account principal that is limited by the SCP attempted to access an Amazon Web Services service.</p></param>
		/// <returns>Success</returns>
		public async Task GET_GenerateOrganizationsAccessReportAsync(string EntityPath, string OrganizationsPolicyId, GET_GenerateOrganizationsAccessReportAction Action, GET_GenerateOrganizationsAccessReportVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GenerateOrganizationsAccessReport?EntityPath=" + (EntityPath==null? "" : System.Uri.EscapeDataString(EntityPath))+"&OrganizationsPolicyId=" + (OrganizationsPolicyId==null? "" : System.Uri.EscapeDataString(OrganizationsPolicyId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Generates a report that includes details about when an IAM resource (user, group, role, or policy) was last used in an attempt to access Amazon Web Services services. Recent activity usually appears within four hours. IAM reports activity for at least the last 400 days, or less if your Region began supporting this feature within the last year. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html#access-advisor_tracking-period">Regions where data is tracked</a>.</p> <important> <p>The service last accessed data includes all attempts to access an Amazon Web Services API, not just the successful ones. This includes all attempts that were made using the Amazon Web Services Management Console, the Amazon Web Services API through any of the SDKs, or any of the command line tools. An unexpected entry in the service last accessed data does not mean that your account has been compromised, because the request might have been denied. Refer to your CloudTrail logs as the authoritative source for information about all API calls and whether they were successful or denied access. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/cloudtrail-integration.html">Logging IAM events with CloudTrail</a> in the <i>IAM User Guide</i>.</p> </important> <p>The <code>GenerateServiceLastAccessedDetails</code> operation returns a <code>JobId</code>. Use this parameter in the following operations to retrieve the following details from your report: </p> <ul> <li> <p> <a>GetServiceLastAccessedDetails</a> – Use this operation for users, groups, roles, or policies to list every Amazon Web Services service that the resource could access using permissions policies. For each service, the response includes information about the most recent access attempt.</p> <p>The <code>JobId</code> returned by <code>GenerateServiceLastAccessedDetail</code> must be used by the same role within a session, or by the same user when used to call <code>GetServiceLastAccessedDetail</code>.</p> </li> <li> <p> <a>GetServiceLastAccessedDetailsWithEntities</a> – Use this operation for groups and policies to list information about the associated entities (users or roles) that attempted to access a specific Amazon Web Services service. </p> </li> </ul> <p>To check the status of the <code>GenerateServiceLastAccessedDetails</code> request, use the <code>JobId</code> parameter in the same operations and test the <code>JobStatus</code> response parameter.</p> <p>For additional information about the permissions policies that allow an identity (user, group, or role) to access specific services, use the <a>ListPoliciesGrantingServiceAccess</a> operation.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, Organizations policies, IAM permissions boundaries, and STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For more information about service and action last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing permissions using service last accessed data</a> in the <i>IAM User Guide</i>.</p>
		/// GET_GenerateServiceLastAccessedDetails #Action=GenerateServiceLastAccessedDetails
		/// </summary>
		/// <param name="Arn">The ARN of the IAM resource (user, group, role, or managed policy) used to generate information about when the resource was last used in an attempt to access an Amazon Web Services service.</param>
		/// <param name="Granularity">The level of detail that you want to generate. You can specify whether you want to generate information about the last attempt to access services or actions. If you specify service-level granularity, this operation generates only service data. If you specify action-level granularity, it generates service and action data. If you don't include this optional parameter, the operation generates service data.</param>
		/// <returns>Success</returns>
		public async Task GET_GenerateServiceLastAccessedDetailsAsync(string Arn, AccessAdvisorUsageGranularityType Granularity, GET_GenerateServiceLastAccessedDetailsAction Action, GET_GenerateServiceLastAccessedDetailsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GenerateServiceLastAccessedDetails?Arn=" + (Arn==null? "" : System.Uri.EscapeDataString(Arn))+"&Granularity=" + Granularity+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about when the specified access key was last used. The information includes the date and time of last use, along with the Amazon Web Services service and Region that were specified in the last request made with that key.
		/// GET_GetAccessKeyLastUsed #Action=GetAccessKeyLastUsed
		/// </summary>
		/// <param name="AccessKeyId"><p>The identifier of an access key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetAccessKeyLastUsedAsync(string AccessKeyId, GET_GetAccessKeyLastUsedAction Action, GET_GetAccessKeyLastUsedVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetAccessKeyLastUsed?AccessKeyId=" + (AccessKeyId==null? "" : System.Uri.EscapeDataString(AccessKeyId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves information about all IAM users, groups, roles, and policies in your Amazon Web Services account, including their relationships to one another. Use this operation to obtain a snapshot of the configuration of IAM permissions (users, groups, roles, and policies) in your account.</p> <note> <p>Policies returned by this operation are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>You can optionally filter the results using the <code>Filter</code> parameter. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
		/// GET_GetAccountAuthorizationDetails #Action=GetAccountAuthorizationDetails
		/// </summary>
		/// <param name="Filter"><p>A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value <code>LocalManagedPolicy</code> to include customer managed policies.</p> <p>The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.</p></param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <returns>Success</returns>
		public async Task GET_GetAccountAuthorizationDetailsAsync(EntityType[] Filter, int MaxItems, string Marker, GET_GetAccountAuthorizationDetailsAction Action, GET_GetAccountAuthorizationDetailsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetAccountAuthorizationDetails?"+string.Join("&", Filter.Select(z => $"Filter={z}"))+"&MaxItems="+MaxItems+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the password policy for the Amazon Web Services account. This tells you the complexity requirements and mandatory rotation periods for the IAM user passwords in your account. For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM password policy</a>.
		/// GET_GetAccountPasswordPolicy #Action=GetAccountPasswordPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_GetAccountPasswordPolicyAsync(GET_GetAccountPasswordPolicyAction Action, GET_GetAccountPasswordPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetAccountPasswordPolicy?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the password policy for the Amazon Web Services account. This tells you the complexity requirements and mandatory rotation periods for the IAM user passwords in your account. For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM password policy</a>.
		/// POST_GetAccountPasswordPolicy #Action=GetAccountPasswordPolicy
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_GetAccountPasswordPolicyAsync(GET_GetAccountPasswordPolicyAction Action, POST_GetAccountPasswordPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetAccountPasswordPolicy?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves information about IAM entity usage and IAM quotas in the Amazon Web Services account.</p> <p> For information about IAM quotas, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p>
		/// GET_GetAccountSummary #Action=GetAccountSummary
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_GetAccountSummaryAsync(GET_GetAccountSummaryAction Action, GET_GetAccountSummaryVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetAccountSummary?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves information about IAM entity usage and IAM quotas in the Amazon Web Services account.</p> <p> For information about IAM quotas, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p>
		/// POST_GetAccountSummary #Action=GetAccountSummary
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_GetAccountSummaryAsync(GET_GetAccountSummaryAction Action, POST_GetAccountSummaryVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetAccountSummary?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a list of all of the context keys referenced in the input policies. The policies are supplied as a list of one or more strings. To get the context keys from policies associated with an IAM user, group, or role, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>Context keys are variables maintained by Amazon Web Services and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value specified in an IAM policy. Use <code>GetContextKeysForCustomPolicy</code> to understand what key names and values you must supply when you call <a>SimulateCustomPolicy</a>. Note that all parameters are shown in unencoded form here for clarity but must be URL encoded to be included as a part of a real HTML request.</p>
		/// GET_GetContextKeysForCustomPolicy #Action=GetContextKeysForCustomPolicy
		/// </summary>
		/// <param name="PolicyInputList"><p>A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_GetContextKeysForCustomPolicyAsync(string[] PolicyInputList, GET_GetContextKeysForCustomPolicyAction Action, GET_GetContextKeysForCustomPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetContextKeysForCustomPolicy?"+string.Join("&", PolicyInputList.Select(z => $"PolicyInputList={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Gets a list of all of the context keys referenced in all the IAM policies that are attached to the specified IAM entity. The entity can be an IAM user, group, or role. If you specify a user, then the request also includes all of the policies attached to groups that the user is a member of.</p> <p>You can optionally include a list of one or more additional policies, specified as strings. If you want to include <i>only</i> a list of policies by string, use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p> <b>Note:</b> This operation discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>GetContextKeysForCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by Amazon Web Services and its services that provide details about the context of an API query request. Context keys can be evaluated by testing against a value in an IAM policy. Use <a>GetContextKeysForPrincipalPolicy</a> to understand what key names and values you must supply when you call <a>SimulatePrincipalPolicy</a>.</p>
		/// GET_GetContextKeysForPrincipalPolicy #Action=GetContextKeysForPrincipalPolicy
		/// </summary>
		/// <param name="PolicySourceArn"><p>The ARN of a user, group, or role whose policies contain the context keys that you want listed. If you specify a user, the list includes context keys that are found in all policies that are attached to the user. The list also includes all groups that the user is a member of. If you pick a group or a role, then it includes only those context keys that are found in policies attached to that entity. Note that all parameters are shown in unencoded form here for clarity, but must be URL encoded to be included as a part of a real HTML request.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <param name="PolicyInputList"><p>An optional list of additional policies for which you want the list of context keys that are referenced.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_GetContextKeysForPrincipalPolicyAsync(string PolicySourceArn, string[] PolicyInputList, GET_GetContextKeysForPrincipalPolicyAction Action, GET_GetContextKeysForPrincipalPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetContextKeysForPrincipalPolicy?PolicySourceArn=" + (PolicySourceArn==null? "" : System.Uri.EscapeDataString(PolicySourceArn))+"&"+string.Join("&", PolicyInputList.Select(z => $"PolicyInputList={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a credential report for the Amazon Web Services account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting credential reports</a> in the <i>IAM User Guide</i>.
		/// GET_GetCredentialReport #Action=GetCredentialReport
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_GetCredentialReportAsync(GET_GetCredentialReportAction Action, GET_GetCredentialReportVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetCredentialReport?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a credential report for the Amazon Web Services account. For more information about the credential report, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/credential-reports.html">Getting credential reports</a> in the <i>IAM User Guide</i>.
		/// POST_GetCredentialReport #Action=GetCredentialReport
		/// </summary>
		/// <returns>Success</returns>
		public async Task POST_GetCredentialReportAsync(GET_GetCredentialReportAction Action, POST_GetCredentialReportVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetCredentialReport?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of IAM users that are in the specified IAM group. You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.
		/// GET_GetGroup #Action=GetGroup
		/// </summary>
		/// <param name="GroupName"><p>The name of the group.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetGroupAsync(string GroupName, string Marker, int MaxItems, GET_GetGroupAction Action, GET_GetGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetGroup?GroupName=" + (GroupName==null? "" : System.Uri.EscapeDataString(GroupName))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the specified inline policy document that is embedded in the specified IAM group.</p> <note> <p>Policies returned by this operation are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM group can also have managed policies attached to it. To retrieve a managed policy document that is attached to a group, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_GetGroupPolicy #Action=GetGroupPolicy
		/// </summary>
		/// <param name="GroupName"><p>The name of the group the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyName"><p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetGroupPolicyAsync(string GroupName, string PolicyName, GET_GetGroupPolicyAction Action, GET_GetGroupPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetGroupPolicy?GroupName=" + (GroupName==null? "" : System.Uri.EscapeDataString(GroupName))+"&PolicyName=" + (PolicyName==null? "" : System.Uri.EscapeDataString(PolicyName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about the specified instance profile, including the instance profile's path, GUID, ARN, and role. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html">Using instance profiles</a> in the <i>IAM User Guide</i>.
		/// GET_GetInstanceProfile #Action=GetInstanceProfile
		/// </summary>
		/// <param name="InstanceProfileName"><p>The name of the instance profile to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetInstanceProfileAsync(string InstanceProfileName, GET_GetInstanceProfileAction Action, GET_GetInstanceProfileVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetInstanceProfile?InstanceProfileName=" + (InstanceProfileName==null? "" : System.Uri.EscapeDataString(InstanceProfileName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the user name for the specified IAM user. A login profile is created when you create a password for the user to access the Amazon Web Services Management Console. If the user does not exist or does not have a password, the operation returns a 404 (<code>NoSuchEntity</code>) error.</p> <p>If you create an IAM user with access to the console, the <code>CreateDate</code> reflects the date you created the initial password for the user.</p> <p>If you create an IAM user with programmatic access, and then later add a password for the user to access the Amazon Web Services Management Console, the <code>CreateDate</code> reflects the initial password creation date. A user with programmatic access does not have a login profile unless you create a password for the user to access the Amazon Web Services Management Console.</p>
		/// GET_GetLoginProfile #Action=GetLoginProfile
		/// </summary>
		/// <param name="UserName"><p>The name of the user whose login profile you want to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetLoginProfileAsync(string UserName, GET_GetLoginProfileAction Action, GET_GetLoginProfileVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetLoginProfile?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves information about an MFA device for a specified user.
		/// GET_GetMFADevice #Action=GetMFADevice
		/// </summary>
		/// <param name="SerialNumber">Serial number that uniquely identifies the MFA device. For this API, we only accept FIDO security key <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html">ARNs</a>.</param>
		/// <param name="UserName">The friendly name identifying the user.</param>
		/// <returns>Success</returns>
		public async Task GET_GetMFADeviceAsync(string SerialNumber, string UserName, GET_GetMFADeviceAction Action, GET_GetMFADeviceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetMFADevice?SerialNumber=" + (SerialNumber==null? "" : System.Uri.EscapeDataString(SerialNumber))+"&UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the specified OpenID Connect (OIDC) provider resource object in IAM.
		/// GET_GetOpenIDConnectProvider #Action=GetOpenIDConnectProvider
		/// </summary>
		/// <param name="OpenIDConnectProviderArn"><p>The Amazon Resource Name (ARN) of the OIDC provider resource object in IAM to get information for. You can get a list of OIDC provider resource ARNs by using the <a>ListOpenIDConnectProviders</a> operation.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetOpenIDConnectProviderAsync(string OpenIDConnectProviderArn, GET_GetOpenIDConnectProviderAction Action, GET_GetOpenIDConnectProviderVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetOpenIDConnectProvider?OpenIDConnectProviderArn=" + (OpenIDConnectProviderArn==null? "" : System.Uri.EscapeDataString(OpenIDConnectProviderArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the service last accessed data report for Organizations that was previously generated using the <code> <a>GenerateOrganizationsAccessReport</a> </code> operation. This operation retrieves the status of your report job and the report contents.</p> <p>Depending on the parameters that you passed when you generated the report, the data returned could include different information. For details, see <a>GenerateOrganizationsAccessReport</a>.</p> <p>To call this operation, you must be signed in to the management account in your organization. SCPs must be enabled for your organization root. You must have permissions to perform this operation. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Refining permissions using service last accessed data</a> in the <i>IAM User Guide</i>.</p> <p>For each service that principals in an account (root user, IAM users, or IAM roles) could access using SCPs, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, it returns the reason that it failed.</p> <p>By default, the list is sorted by service namespace.</p>
		/// GET_GetOrganizationsAccessReport #Action=GetOrganizationsAccessReport
		/// </summary>
		/// <param name="JobId">The identifier of the request generated by the <a>GenerateOrganizationsAccessReport</a> operation.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="SortKey">The key that is used to sort the results. If you choose the namespace key, the results are returned in alphabetical order. If you choose the time key, the results are sorted numerically by the date and time.</param>
		/// <returns>Success</returns>
		public async Task GET_GetOrganizationsAccessReportAsync(string JobId, int MaxItems, string Marker, SortKeyType SortKey, GET_GetOrganizationsAccessReportAction Action, GET_GetOrganizationsAccessReportVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetOrganizationsAccessReport?JobId=" + (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"&MaxItems="+MaxItems+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&SortKey=" + SortKey+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves information about the specified managed policy, including the policy's default version and the total number of IAM users, groups, and roles to which the policy is attached. To retrieve the list of the specific users, groups, and roles that the policy is attached to, use <a>ListEntitiesForPolicy</a>. This operation returns metadata about the policy. To retrieve the actual policy document for a specific version of the policy, use <a>GetPolicyVersion</a>.</p> <p>This operation retrieves information about managed policies. To retrieve information about an inline policy that is embedded with an IAM user, group, or role, use <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a>.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_GetPolicy #Action=GetPolicy
		/// </summary>
		/// <param name="PolicyArn"><p>The Amazon Resource Name (ARN) of the managed policy that you want information about.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetPolicyAsync(string PolicyArn, GET_GetPolicyAction Action, GET_GetPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetPolicy?PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves information about the specified version of the specified managed policy, including the policy document.</p> <note> <p>Policies returned by this operation are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>To list the available versions for a policy, use <a>ListPolicyVersions</a>.</p> <p>This operation retrieves information about managed policies. To retrieve information about an inline policy that is embedded in a user, group, or role, use <a>GetUserPolicy</a>, <a>GetGroupPolicy</a>, or <a>GetRolePolicy</a>.</p> <p>For more information about the types of policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_GetPolicyVersion #Action=GetPolicyVersion
		/// </summary>
		/// <param name="PolicyArn"><p>The Amazon Resource Name (ARN) of the managed policy that you want information about.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <param name="VersionId"><p>Identifies the policy version to retrieve.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetPolicyVersionAsync(string PolicyArn, string VersionId, GET_GetPolicyVersionAction Action, GET_GetPolicyVersionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetPolicyVersion?PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&VersionId=" + (VersionId==null? "" : System.Uri.EscapeDataString(VersionId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves information about the specified role, including the role's path, GUID, ARN, and the role's trust policy that grants permission to assume the role. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>IAM User Guide</i>.</p> <note> <p>Policies returned by this operation are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note>
		/// GET_GetRole #Action=GetRole
		/// </summary>
		/// <param name="RoleName"><p>The name of the IAM role to get information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetRoleAsync(string RoleName, GET_GetRoleAction Action, GET_GetRoleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetRole?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the specified inline policy document that is embedded with the specified IAM role.</p> <note> <p>Policies returned by this operation are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM role can also have managed policies attached to it. To retrieve a managed policy document that is attached to a role, use <a>GetPolicy</a> to determine the policy's default version, then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p> For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>IAM User Guide</i>.</p>
		/// GET_GetRolePolicy #Action=GetRolePolicy
		/// </summary>
		/// <param name="RoleName"><p>The name of the role associated with the policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyName"><p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetRolePolicyAsync(string RoleName, string PolicyName, GET_GetRolePolicyAction Action, GET_GetRolePolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetRolePolicy?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&PolicyName=" + (PolicyName==null? "" : System.Uri.EscapeDataString(PolicyName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the SAML provider metadocument that was uploaded when the IAM SAML provider resource object was created or updated.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
		/// GET_GetSAMLProvider #Action=GetSAMLProvider
		/// </summary>
		/// <param name="SAMLProviderArn"><p>The Amazon Resource Name (ARN) of the SAML provider resource object in IAM to get information about.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetSAMLProviderAsync(string SAMLProviderArn, GET_GetSAMLProviderAction Action, GET_GetSAMLProviderVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetSAMLProvider?SAMLProviderArn=" + (SAMLProviderArn==null? "" : System.Uri.EscapeDataString(SAMLProviderArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the specified SSH public key, including metadata about the key.</p> <p>The SSH public key retrieved by this operation is used only for authenticating the associated IAM user to an CodeCommit repository. For more information about using SSH keys to authenticate to an CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up CodeCommit for SSH connections</a> in the <i>CodeCommit User Guide</i>.</p>
		/// GET_GetSSHPublicKey #Action=GetSSHPublicKey
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="SSHPublicKeyId"><p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p></param>
		/// <param name="Encoding">Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use <code>SSH</code>. To retrieve the public key in PEM format, use <code>PEM</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_GetSSHPublicKeyAsync(string UserName, string SSHPublicKeyId, EncodingType Encoding, GET_GetSSHPublicKeyAction Action, GET_GetSSHPublicKeyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetSSHPublicKey?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&SSHPublicKeyId=" + (SSHPublicKeyId==null? "" : System.Uri.EscapeDataString(SSHPublicKeyId))+"&Encoding=" + Encoding+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves information about the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with server certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of Amazon Web Services services that can use the server certificates that you manage with IAM.</p>
		/// GET_GetServerCertificate #Action=GetServerCertificate
		/// </summary>
		/// <param name="ServerCertificateName"><p>The name of the server certificate you want to retrieve information about.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetServerCertificateAsync(string ServerCertificateName, GET_GetServerCertificateAction Action, GET_GetServerCertificateVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetServerCertificate?ServerCertificateName=" + (ServerCertificateName==null? "" : System.Uri.EscapeDataString(ServerCertificateName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves a service last accessed report that was created using the <code>GenerateServiceLastAccessedDetails</code> operation. You can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetails</code> to retrieve the status of your report job. When the report is complete, you can retrieve the generated report. The report includes a list of Amazon Web Services services that the resource (user, group, role, or managed policy) can access.</p> <note> <p>Service last accessed data does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, Organizations policies, IAM permissions boundaries, and STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>For each service that the resource could access using permissions policies, the operation returns details about the most recent access attempt. If there was no attempt, the service is listed without details about the most recent attempt to access the service. If the operation fails, the <code>GetServiceLastAccessedDetails</code> operation returns the reason that it failed.</p> <p>The <code>GetServiceLastAccessedDetails</code> operation returns a list of services. This list includes the number of entities that have attempted to access the service and the date and time of the last attempt. It also returns the ARN of the following entity, depending on the resource ARN that you used to generate the report:</p> <ul> <li> <p> <b>User</b> – Returns the user ARN that you used to generate the report</p> </li> <li> <p> <b>Group</b> – Returns the ARN of the group member (user) that last attempted to access the service</p> </li> <li> <p> <b>Role</b> – Returns the role ARN that you used to generate the report</p> </li> <li> <p> <b>Policy</b> – Returns the ARN of the user or role that last used the policy to attempt to access the service</p> </li> </ul> <p>By default, the list is sorted by service namespace.</p> <p>If you specified <code>ACTION_LEVEL</code> granularity when you generated the report, this operation returns service and action last accessed data. This includes the most recent access attempt for each tracked action within a service. Otherwise, this operation returns only service data.</p> <p>For more information about service and action last accessed data, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_access-advisor.html">Reducing permissions using service last accessed data</a> in the <i>IAM User Guide</i>.</p>
		/// GET_GetServiceLastAccessedDetails #Action=GetServiceLastAccessedDetails
		/// </summary>
		/// <param name="JobId">The ID of the request generated by the <a>GenerateServiceLastAccessedDetails</a> operation. The <code>JobId</code> returned by <code>GenerateServiceLastAccessedDetail</code> must be used by the same role within a session, or by the same user when used to call <code>GetServiceLastAccessedDetail</code>.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <returns>Success</returns>
		public async Task GET_GetServiceLastAccessedDetailsAsync(string JobId, int MaxItems, string Marker, GET_GetServiceLastAccessedDetailsAction Action, GET_GetServiceLastAccessedDetailsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetServiceLastAccessedDetails?JobId=" + (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"&MaxItems="+MaxItems+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>After you generate a group or policy report using the <code>GenerateServiceLastAccessedDetails</code> operation, you can use the <code>JobId</code> parameter in <code>GetServiceLastAccessedDetailsWithEntities</code>. This operation retrieves the status of your report job and a list of entities that could have used group or policy permissions to access the specified service.</p> <ul> <li> <p> <b>Group</b> – For a group report, this operation returns a list of users in the group that could have used the group’s policies in an attempt to access the service.</p> </li> <li> <p> <b>Policy</b> – For a policy report, this operation returns a list of entities (users or roles) that could have used the policy in an attempt to access the service.</p> </li> </ul> <p>You can also use this operation for user or role reports to retrieve details about those entities.</p> <p>If the operation fails, the <code>GetServiceLastAccessedDetailsWithEntities</code> operation returns the reason that it failed.</p> <p>By default, the list of associated entities is sorted by date, with the most recent access listed first.</p>
		/// GET_GetServiceLastAccessedDetailsWithEntities #Action=GetServiceLastAccessedDetailsWithEntities
		/// </summary>
		/// <param name="JobId">The ID of the request generated by the <code>GenerateServiceLastAccessedDetails</code> operation.</param>
		/// <param name="ServiceNamespace"><p>The service namespace for an Amazon Web Services service. Provide the service namespace to learn when the IAM entity last attempted to access the specified service.</p> <p>To learn the service namespace for a service, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html">Actions, resources, and condition keys for Amazon Web Services services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">Amazon Web Services service namespaces</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <returns>Success</returns>
		public async Task GET_GetServiceLastAccessedDetailsWithEntitiesAsync(string JobId, string ServiceNamespace, int MaxItems, string Marker, GET_GetServiceLastAccessedDetailsWithEntitiesAction Action, GET_GetServiceLastAccessedDetailsWithEntitiesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetServiceLastAccessedDetailsWithEntities?JobId=" + (JobId==null? "" : System.Uri.EscapeDataString(JobId))+"&ServiceNamespace=" + (ServiceNamespace==null? "" : System.Uri.EscapeDataString(ServiceNamespace))+"&MaxItems="+MaxItems+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the status of your service-linked role deletion. After you use <a>DeleteServiceLinkedRole</a> to submit a service-linked role for deletion, you can use the <code>DeletionTaskId</code> parameter in <code>GetServiceLinkedRoleDeletionStatus</code> to check the status of the deletion. If the deletion fails, this operation returns the reason that it failed, if that information is returned by the service.
		/// GET_GetServiceLinkedRoleDeletionStatus #Action=GetServiceLinkedRoleDeletionStatus
		/// </summary>
		/// <param name="DeletionTaskId">The deletion task identifier. This identifier is returned by the <a>DeleteServiceLinkedRole</a> operation in the format <code>task/aws-service-role/&lt;service-principal-name&gt;/&lt;role-name&gt;/&lt;task-uuid&gt;</code>.</param>
		/// <returns>Success</returns>
		public async Task GET_GetServiceLinkedRoleDeletionStatusAsync(string DeletionTaskId, GET_GetServiceLinkedRoleDeletionStatusAction Action, GET_GetServiceLinkedRoleDeletionStatusVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetServiceLinkedRoleDeletionStatus?DeletionTaskId=" + (DeletionTaskId==null? "" : System.Uri.EscapeDataString(DeletionTaskId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves information about the specified IAM user, including the user's creation date, path, unique ID, and ARN.</p> <p>If you do not specify a user name, IAM determines the user name implicitly based on the Amazon Web Services access key ID used to sign the request to this operation.</p>
		/// GET_GetUser #Action=GetUser
		/// </summary>
		/// <param name="UserName"><p>The name of the user to get information about.</p> <p>This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetUserAsync(string UserName, GET_GetUserAction Action, GET_GetUserVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetUser?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves the specified inline policy document that is embedded in the specified IAM user.</p> <note> <p>Policies returned by this operation are URL-encoded compliant with <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a>. You can use a URL decoding method to convert the policy back to plain JSON text. For example, if you use Java, you can use the <code>decode</code> method of the <code>java.net.URLDecoder</code> utility class in the Java SDK. Other languages and SDKs provide similar functionality.</p> </note> <p>An IAM user can also have managed policies attached to it. To retrieve a managed policy document that is attached to a user, use <a>GetPolicy</a> to determine the policy's default version. Then use <a>GetPolicyVersion</a> to retrieve the policy document.</p> <p>For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_GetUserPolicy #Action=GetUserPolicy
		/// </summary>
		/// <param name="UserName"><p>The name of the user who the policy is associated with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyName"><p>The name of the policy document to get.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_GetUserPolicyAsync(string UserName, string PolicyName, GET_GetUserPolicyAction Action, GET_GetUserPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetUserPolicy?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&PolicyName=" + (PolicyName==null? "" : System.Uri.EscapeDataString(PolicyName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the access key IDs associated with the specified IAM user. If there is none, the operation returns an empty list.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the Amazon Web Services access key ID used to sign the request. If a temporary access key is used, then <code>UserName</code> is required. If a long-term key is assigned to the user, then <code>UserName</code> is not required. This operation works for access keys under the Amazon Web Services account. Consequently, you can use this operation to manage Amazon Web Services account root user credentials even if the Amazon Web Services account has no associated users.</p> <note> <p>To ensure the security of your Amazon Web Services account, the secret access key is accessible only during key and user creation.</p> </note>
		/// GET_ListAccessKeys #Action=ListAccessKeys
		/// </summary>
		/// <param name="UserName"><p>The name of the user.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListAccessKeysAsync(string UserName, string Marker, int MaxItems, GET_ListAccessKeysAction Action, GET_ListAccessKeysVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListAccessKeys?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the account alias associated with the Amazon Web Services account (Note: you can have only one). For information about using an Amazon Web Services account alias, see <a href="https://docs.aws.amazon.com/signin/latest/userguide/CreateAccountAlias.html">Creating, deleting, and listing an Amazon Web Services account alias</a> in the <i>Amazon Web Services Sign-In User Guide</i>.
		/// GET_ListAccountAliases #Action=ListAccountAliases
		/// </summary>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListAccountAliasesAsync(string Marker, int MaxItems, GET_ListAccountAliasesAction Action, GET_ListAccountAliasesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListAccountAliases?Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all managed policies that are attached to the specified IAM group.</p> <p>An IAM group can also have inline policies embedded with it. To list the inline policies for a group, use <a>ListGroupPolicies</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
		/// GET_ListAttachedGroupPolicies #Action=ListAttachedGroupPolicies
		/// </summary>
		/// <param name="GroupName"><p>The name (friendly name, not ARN) of the group to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PathPrefix"><p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListAttachedGroupPoliciesAsync(string GroupName, string PathPrefix, string Marker, int MaxItems, GET_ListAttachedGroupPoliciesAction Action, GET_ListAttachedGroupPoliciesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListAttachedGroupPolicies?GroupName=" + (GroupName==null? "" : System.Uri.EscapeDataString(GroupName))+"&PathPrefix=" + (PathPrefix==null? "" : System.Uri.EscapeDataString(PathPrefix))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all managed policies that are attached to the specified IAM role.</p> <p>An IAM role can also have inline policies embedded with it. To list the inline policies for a role, use <a>ListRolePolicies</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified role (or none that match the specified path prefix), the operation returns an empty list.</p>
		/// GET_ListAttachedRolePolicies #Action=ListAttachedRolePolicies
		/// </summary>
		/// <param name="RoleName"><p>The name (friendly name, not ARN) of the role to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PathPrefix"><p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListAttachedRolePoliciesAsync(string RoleName, string PathPrefix, string Marker, int MaxItems, GET_ListAttachedRolePoliciesAction Action, GET_ListAttachedRolePoliciesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListAttachedRolePolicies?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&PathPrefix=" + (PathPrefix==null? "" : System.Uri.EscapeDataString(PathPrefix))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all managed policies that are attached to the specified IAM user.</p> <p>An IAM user can also have inline policies embedded with it. To list the inline policies for a user, use <a>ListUserPolicies</a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. You can use the <code>PathPrefix</code> parameter to limit the list of policies to only those matching the specified path prefix. If there are no policies attached to the specified group (or none that match the specified path prefix), the operation returns an empty list.</p>
		/// GET_ListAttachedUserPolicies #Action=ListAttachedUserPolicies
		/// </summary>
		/// <param name="UserName"><p>The name (friendly name, not ARN) of the user to list attached policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PathPrefix"><p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListAttachedUserPoliciesAsync(string UserName, string PathPrefix, string Marker, int MaxItems, GET_ListAttachedUserPoliciesAction Action, GET_ListAttachedUserPoliciesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListAttachedUserPolicies?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&PathPrefix=" + (PathPrefix==null? "" : System.Uri.EscapeDataString(PathPrefix))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all IAM users, groups, and roles that the specified managed policy is attached to.</p> <p>You can use the optional <code>EntityFilter</code> parameter to limit the results to a particular type of entity (users, groups, or roles). For example, to list only the roles that are attached to the specified policy, set <code>EntityFilter</code> to <code>Role</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
		/// GET_ListEntitiesForPolicy #Action=ListEntitiesForPolicy
		/// </summary>
		/// <param name="PolicyArn"><p>The Amazon Resource Name (ARN) of the IAM policy for which you want the versions.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <param name="EntityFilter"><p>The entity type to use for filtering the results.</p> <p>For example, when <code>EntityFilter</code> is <code>Role</code>, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.</p></param>
		/// <param name="PathPrefix"><p>The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="PolicyUsageFilter"><p>The policy usage method to use for filtering the results.</p> <p>To list only permissions policies, set <code>PolicyUsageFilter</code> to <code>PermissionsPolicy</code>. To list only the policies used to set permissions boundaries, set the value to <code>PermissionsBoundary</code>.</p> <p>This parameter is optional. If it is not included, all policies are returned. </p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListEntitiesForPolicyAsync(string PolicyArn, EntityType EntityFilter, string PathPrefix, PolicyUsageType PolicyUsageFilter, string Marker, int MaxItems, GET_ListEntitiesForPolicyAction Action, GET_ListEntitiesForPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListEntitiesForPolicy?PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&EntityFilter=" + EntityFilter+"&PathPrefix=" + (PathPrefix==null? "" : System.Uri.EscapeDataString(PathPrefix))+"&PolicyUsageFilter=" + PolicyUsageFilter+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the names of the inline policies that are embedded in the specified IAM group.</p> <p>An IAM group can also have managed policies attached to it. To list the managed policies that are attached to a group, use <a>ListAttachedGroupPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified group, the operation returns an empty list.</p>
		/// GET_ListGroupPolicies #Action=ListGroupPolicies
		/// </summary>
		/// <param name="GroupName"><p>The name of the group to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListGroupPoliciesAsync(string GroupName, string Marker, int MaxItems, GET_ListGroupPoliciesAction Action, GET_ListGroupPoliciesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListGroupPolicies?GroupName=" + (GroupName==null? "" : System.Uri.EscapeDataString(GroupName))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the IAM groups that have the specified path prefix.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
		/// GET_ListGroups #Action=ListGroups
		/// </summary>
		/// <param name="PathPrefix"><p> The path prefix for filtering the results. For example, the prefix <code>/division_abc/subdivision_xyz/</code> gets all groups whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListGroupsAsync(string PathPrefix, string Marker, int MaxItems, GET_ListGroupsAction Action, GET_ListGroupsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListGroups?PathPrefix=" + (PathPrefix==null? "" : System.Uri.EscapeDataString(PathPrefix))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the IAM groups that the specified IAM user belongs to.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
		/// GET_ListGroupsForUser #Action=ListGroupsForUser
		/// </summary>
		/// <param name="UserName"><p>The name of the user to list groups for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListGroupsForUserAsync(string UserName, string Marker, int MaxItems, GET_ListGroupsForUserAction Action, GET_ListGroupsForUserVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListGroupsForUser?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags that are attached to the specified IAM instance profile. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.
		/// GET_ListInstanceProfileTags #Action=ListInstanceProfileTags
		/// </summary>
		/// <param name="InstanceProfileName"><p>The name of the IAM instance profile whose tags you want to see.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListInstanceProfileTagsAsync(string InstanceProfileName, string Marker, int MaxItems, GET_ListInstanceProfileTagsAction Action, GET_ListInstanceProfileTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListInstanceProfileTags?InstanceProfileName=" + (InstanceProfileName==null? "" : System.Uri.EscapeDataString(InstanceProfileName))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the instance profiles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html">Using instance profiles</a> in the <i>IAM User Guide</i>.</p> <note> <p>IAM resource-listing operations return a subset of the available attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for an instance profile, see <a>GetInstanceProfile</a>.</p> </note> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
		/// GET_ListInstanceProfiles #Action=ListInstanceProfiles
		/// </summary>
		/// <param name="PathPrefix"><p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all instance profiles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListInstanceProfilesAsync(string PathPrefix, string Marker, int MaxItems, GET_ListInstanceProfilesAction Action, GET_ListInstanceProfilesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListInstanceProfiles?PathPrefix=" + (PathPrefix==null? "" : System.Uri.EscapeDataString(PathPrefix))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the instance profiles that have the specified associated IAM role. If there are none, the operation returns an empty list. For more information about instance profiles, go to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html">Using instance profiles</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
		/// GET_ListInstanceProfilesForRole #Action=ListInstanceProfilesForRole
		/// </summary>
		/// <param name="RoleName"><p>The name of the role to list instance profiles for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListInstanceProfilesForRoleAsync(string RoleName, string Marker, int MaxItems, GET_ListInstanceProfilesForRoleAction Action, GET_ListInstanceProfilesForRoleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListInstanceProfilesForRole?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags that are attached to the specified IAM virtual multi-factor authentication (MFA) device. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.
		/// GET_ListMFADeviceTags #Action=ListMFADeviceTags
		/// </summary>
		/// <param name="SerialNumber"><p>The unique identifier for the IAM virtual MFA device whose tags you want to see. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListMFADeviceTagsAsync(string SerialNumber, string Marker, int MaxItems, GET_ListMFADeviceTagsAction Action, GET_ListMFADeviceTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListMFADeviceTags?SerialNumber=" + (SerialNumber==null? "" : System.Uri.EscapeDataString(SerialNumber))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the MFA devices for an IAM user. If the request includes a IAM user name, then this operation lists all the MFA devices associated with the specified user. If you do not specify a user name, IAM determines the user name implicitly based on the Amazon Web Services access key ID signing the request for this operation.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
		/// GET_ListMFADevices #Action=ListMFADevices
		/// </summary>
		/// <param name="UserName"><p>The name of the user whose MFA devices you want to list.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListMFADevicesAsync(string UserName, string Marker, int MaxItems, GET_ListMFADevicesAction Action, GET_ListMFADevicesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListMFADevices?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the tags that are attached to the specified OpenID Connect (OIDC)-compatible identity provider. The returned list of tags is sorted by tag key. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html">About web identity federation</a>.</p> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p>
		/// GET_ListOpenIDConnectProviderTags #Action=ListOpenIDConnectProviderTags
		/// </summary>
		/// <param name="OpenIDConnectProviderArn"><p>The ARN of the OpenID Connect (OIDC) identity provider whose tags you want to see.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListOpenIDConnectProviderTagsAsync(string OpenIDConnectProviderArn, string Marker, int MaxItems, GET_ListOpenIDConnectProviderTagsAction Action, GET_ListOpenIDConnectProviderTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListOpenIDConnectProviderTags?OpenIDConnectProviderArn=" + (OpenIDConnectProviderArn==null? "" : System.Uri.EscapeDataString(OpenIDConnectProviderArn))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists information about the IAM OpenID Connect (OIDC) provider resource objects defined in the Amazon Web Services account.</p> <note> <p>IAM resource-listing operations return a subset of the available attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for an OIDC provider, see <a>GetOpenIDConnectProvider</a>.</p> </note>
		/// GET_ListOpenIDConnectProviders #Action=ListOpenIDConnectProviders
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_ListOpenIDConnectProvidersAsync(GET_ListOpenIDConnectProvidersAction Action, GET_ListOpenIDConnectProvidersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListOpenIDConnectProviders?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists all the managed policies that are available in your Amazon Web Services account, including your own customer-defined managed policies and all Amazon Web Services managed policies.</p> <p>You can filter the list of policies that is returned using the optional <code>OnlyAttached</code>, <code>Scope</code>, and <code>PathPrefix</code> parameters. For example, to list only the customer managed policies in your Amazon Web Services account, set <code>Scope</code> to <code>Local</code>. To list only Amazon Web Services managed policies, set <code>Scope</code> to <code>AWS</code>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <note> <p>IAM resource-listing operations return a subset of the available attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for a customer manged policy, see <a>GetPolicy</a>.</p> </note>
		/// GET_ListPolicies #Action=ListPolicies
		/// </summary>
		/// <param name="Scope"><p>The scope to use for filtering the results.</p> <p>To list only Amazon Web Services managed policies, set <code>Scope</code> to <code>AWS</code>. To list only the customer managed policies in your Amazon Web Services account, set <code>Scope</code> to <code>Local</code>.</p> <p>This parameter is optional. If it is not included, or if it is set to <code>All</code>, all policies are returned.</p></param>
		/// <param name="OnlyAttached"><p>A flag to filter the results to only the attached policies.</p> <p>When <code>OnlyAttached</code> is <code>true</code>, the returned list contains only the policies that are attached to an IAM user, group, or role. When <code>OnlyAttached</code> is <code>false</code>, or when the parameter is not included, all policies are returned.</p></param>
		/// <param name="PathPrefix">The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</param>
		/// <param name="PolicyUsageFilter"><p>The policy usage method to use for filtering the results.</p> <p>To list only permissions policies, set <code>PolicyUsageFilter</code> to <code>PermissionsPolicy</code>. To list only the policies used to set permissions boundaries, set the value to <code>PermissionsBoundary</code>.</p> <p>This parameter is optional. If it is not included, all policies are returned. </p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListPoliciesAsync(PolicyScopeType Scope, bool OnlyAttached, string PathPrefix, PolicyUsageType PolicyUsageFilter, string Marker, int MaxItems, GET_ListPoliciesAction Action, GET_ListPoliciesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListPolicies?Scope=" + Scope+"&OnlyAttached="+OnlyAttached+"&PathPrefix=" + (PathPrefix==null? "" : System.Uri.EscapeDataString(PathPrefix))+"&PolicyUsageFilter=" + PolicyUsageFilter+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Retrieves a list of policies that the IAM identity (user, group, or role) can use to access each specified service.</p> <note> <p>This operation does not use other policy types when determining whether a resource could access a service. These other policy types include resource-based policies, access control lists, Organizations policies, IAM permissions boundaries, and STS assume role policies. It only applies permissions policy logic. For more about the evaluation of policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html#policy-eval-basics">Evaluating policies</a> in the <i>IAM User Guide</i>.</p> </note> <p>The list of policies returned by the operation depends on the ARN of the identity that you provide.</p> <ul> <li> <p> <b>User</b> – The list of policies includes the managed and inline policies that are attached to the user directly. The list also includes any additional managed and inline policies that are attached to the group to which the user belongs. </p> </li> <li> <p> <b>Group</b> – The list of policies includes only the managed and inline policies that are attached to the group directly. Policies that are attached to the group’s user are not included.</p> </li> <li> <p> <b>Role</b> – The list of policies includes only the managed and inline policies that are attached to the role.</p> </li> </ul> <p>For each managed policy, this operation returns the ARN and policy name. For each inline policy, it returns the policy name and the entity to which it is attached. Inline policies do not have an ARN. For more information about these policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>Policies that are attached to users and roles as permissions boundaries are not returned. To view which managed policy is currently used to set the permissions boundary for a user or role, use the <a>GetUser</a> or <a>GetRole</a> operations.</p>
		/// GET_ListPoliciesGrantingServiceAccess #Action=ListPoliciesGrantingServiceAccess
		/// </summary>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="Arn">The ARN of the IAM identity (user, group, or role) whose policies you want to list.</param>
		/// <param name="ServiceNamespaces"><p>The service namespace for the Amazon Web Services services whose policies you want to list.</p> <p>To learn the service namespace for a service, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html">Actions, resources, and condition keys for Amazon Web Services services</a> in the <i>IAM User Guide</i>. Choose the name of the service to view details for that service. In the first paragraph, find the service prefix. For example, <code>(service prefix: a4b)</code>. For more information about service namespaces, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#genref-aws-service-namespaces">Amazon Web Services service namespaces</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListPoliciesGrantingServiceAccessAsync(string Marker, string Arn, string[] ServiceNamespaces, GET_ListPoliciesGrantingServiceAccessAction Action, GET_ListPoliciesGrantingServiceAccessVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListPoliciesGrantingServiceAccess?Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Arn=" + (Arn==null? "" : System.Uri.EscapeDataString(Arn))+"&"+string.Join("&", ServiceNamespaces.Select(z => $"ServiceNamespaces={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags that are attached to the specified IAM customer managed policy. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.
		/// GET_ListPolicyTags #Action=ListPolicyTags
		/// </summary>
		/// <param name="PolicyArn"><p>The ARN of the IAM customer managed policy whose tags you want to see.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListPolicyTagsAsync(string PolicyArn, string Marker, int MaxItems, GET_ListPolicyTagsAction Action, GET_ListPolicyTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListPolicyTags?PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists information about the versions of the specified managed policy, including the version that is currently set as the policy's default version.</p> <p>For more information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_ListPolicyVersions #Action=ListPolicyVersions
		/// </summary>
		/// <param name="PolicyArn"><p>The Amazon Resource Name (ARN) of the IAM policy for which you want the versions.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListPolicyVersionsAsync(string PolicyArn, string Marker, int MaxItems, GET_ListPolicyVersionsAction Action, GET_ListPolicyVersionsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListPolicyVersions?PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the names of the inline policies that are embedded in the specified IAM role.</p> <p>An IAM role can also have managed policies attached to it. To list the managed policies that are attached to a role, use <a>ListAttachedRolePolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified role, the operation returns an empty list.</p>
		/// GET_ListRolePolicies #Action=ListRolePolicies
		/// </summary>
		/// <param name="RoleName"><p>The name of the role to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListRolePoliciesAsync(string RoleName, string Marker, int MaxItems, GET_ListRolePoliciesAction Action, GET_ListRolePoliciesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListRolePolicies?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags that are attached to the specified role. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.
		/// GET_ListRoleTags #Action=ListRoleTags
		/// </summary>
		/// <param name="RoleName"><p>The name of the IAM role for which you want to see the list of tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListRoleTagsAsync(string RoleName, string Marker, int MaxItems, GET_ListRoleTagsAction Action, GET_ListRoleTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListRoleTags?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the IAM roles that have the specified path prefix. If there are none, the operation returns an empty list. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>IAM User Guide</i>.</p> <note> <p>IAM resource-listing operations return a subset of the available attributes for the resource. This operation does not return the following attributes, even though they are an attribute of the returned object:</p> <ul> <li> <p>PermissionsBoundary</p> </li> <li> <p>RoleLastUsed</p> </li> <li> <p>Tags</p> </li> </ul> <p>To view all of the information for a role, see <a>GetRole</a>.</p> </note> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
		/// GET_ListRoles #Action=ListRoles
		/// </summary>
		/// <param name="PathPrefix"><p> The path prefix for filtering the results. For example, the prefix <code>/application_abc/component_xyz/</code> gets all roles whose path starts with <code>/application_abc/component_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListRolesAsync(string PathPrefix, string Marker, int MaxItems, GET_ListRolesAction Action, GET_ListRolesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListRoles?PathPrefix=" + (PathPrefix==null? "" : System.Uri.EscapeDataString(PathPrefix))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the tags that are attached to the specified Security Assertion Markup Language (SAML) identity provider. The returned list of tags is sorted by tag key. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based federation</a>.</p> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p>
		/// GET_ListSAMLProviderTags #Action=ListSAMLProviderTags
		/// </summary>
		/// <param name="SAMLProviderArn"><p>The ARN of the Security Assertion Markup Language (SAML) identity provider whose tags you want to see.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListSAMLProviderTagsAsync(string SAMLProviderArn, string Marker, int MaxItems, GET_ListSAMLProviderTagsAction Action, GET_ListSAMLProviderTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListSAMLProviderTags?SAMLProviderArn=" + (SAMLProviderArn==null? "" : System.Uri.EscapeDataString(SAMLProviderArn))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the SAML provider resource objects defined in IAM in the account. IAM resource-listing operations return a subset of the available attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for a SAML provider, see <a>GetSAMLProvider</a>.</p> <important> <p> This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </important>
		/// GET_ListSAMLProviders #Action=ListSAMLProviders
		/// </summary>
		/// <returns>Success</returns>
		public async Task GET_ListSAMLProvidersAsync(GET_ListSAMLProvidersAction Action, GET_ListSAMLProvidersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListSAMLProviders?Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the SSH public keys associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>The SSH public keys returned by this operation are used only for authenticating the IAM user to an CodeCommit repository. For more information about using SSH keys to authenticate to an CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up CodeCommit for SSH connections</a> in the <i>CodeCommit User Guide</i>.</p> <p>Although each user is limited to a small number of keys, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
		/// GET_ListSSHPublicKeys #Action=ListSSHPublicKeys
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user to list SSH public keys for. If none is specified, the <code>UserName</code> field is determined implicitly based on the Amazon Web Services access key used to sign the request.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListSSHPublicKeysAsync(string UserName, string Marker, int MaxItems, GET_ListSSHPublicKeysAction Action, GET_ListSSHPublicKeysVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListSSHPublicKeys?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the tags that are attached to the specified IAM server certificate. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> <note> <p>For certificates in a Region supported by Certificate Manager (ACM), we recommend that you don't use IAM server certificates. Instead, use ACM to provision, manage, and deploy your server certificates. For more information about IAM server certificates, <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with server certificates</a> in the <i>IAM User Guide</i>.</p> </note>
		/// GET_ListServerCertificateTags #Action=ListServerCertificateTags
		/// </summary>
		/// <param name="ServerCertificateName"><p>The name of the IAM server certificate whose tags you want to see.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListServerCertificateTagsAsync(string ServerCertificateName, string Marker, int MaxItems, GET_ListServerCertificateTagsAction Action, GET_ListServerCertificateTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListServerCertificateTags?ServerCertificateName=" + (ServerCertificateName==null? "" : System.Uri.EscapeDataString(ServerCertificateName))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the server certificates stored in IAM that have the specified path prefix. If none exist, the operation returns an empty list.</p> <p> You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with server certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of Amazon Web Services services that can use the server certificates that you manage with IAM.</p> <note> <p>IAM resource-listing operations return a subset of the available attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view all of the information for a servercertificate, see <a>GetServerCertificate</a>.</p> </note>
		/// GET_ListServerCertificates #Action=ListServerCertificates
		/// </summary>
		/// <param name="PathPrefix"><p> The path prefix for filtering the results. For example: <code>/company/servercerts</code> would get all server certificates for which the path starts with <code>/company/servercerts</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListServerCertificatesAsync(string PathPrefix, string Marker, int MaxItems, GET_ListServerCertificatesAction Action, GET_ListServerCertificatesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListServerCertificates?PathPrefix=" + (PathPrefix==null? "" : System.Uri.EscapeDataString(PathPrefix))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the service-specific credentials associated with the specified IAM user. If none exists, the operation returns an empty list. The service-specific credentials returned by this operation are used only for authenticating the IAM user to a specific service. For more information about using service-specific credentials to authenticate to an Amazon Web Services service, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-gc.html">Set up service-specific credentials</a> in the CodeCommit User Guide.
		/// GET_ListServiceSpecificCredentials #Action=ListServiceSpecificCredentials
		/// </summary>
		/// <param name="UserName"><p>The name of the user whose service-specific credentials you want information about. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="ServiceName">Filters the returned results to only those for the specified Amazon Web Services service. If not specified, then Amazon Web Services returns service-specific credentials for all services.</param>
		/// <returns>Success</returns>
		public async Task GET_ListServiceSpecificCredentialsAsync(string UserName, string ServiceName, GET_ListServiceSpecificCredentialsAction Action, GET_ListServiceSpecificCredentialsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListServiceSpecificCredentials?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&ServiceName=" + (ServiceName==null? "" : System.Uri.EscapeDataString(ServiceName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the signing certificates associated with the specified IAM user. If none exists, the operation returns an empty list.</p> <p>Although each user is limited to a small number of signing certificates, you can still paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the Amazon Web Services access key ID used to sign the request for this operation. This operation works for access keys under the Amazon Web Services account. Consequently, you can use this operation to manage Amazon Web Services account root user credentials even if the Amazon Web Services account has no associated users.</p>
		/// GET_ListSigningCertificates #Action=ListSigningCertificates
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user whose signing certificates you want to examine.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListSigningCertificatesAsync(string UserName, string Marker, int MaxItems, GET_ListSigningCertificatesAction Action, GET_ListSigningCertificatesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListSigningCertificates?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the names of the inline policies embedded in the specified IAM user.</p> <p>An IAM user can also have managed policies attached to it. To list the managed policies that are attached to a user, use <a>ListAttachedUserPolicies</a>. For more information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters. If there are no inline policies embedded with the specified user, the operation returns an empty list.</p>
		/// GET_ListUserPolicies #Action=ListUserPolicies
		/// </summary>
		/// <param name="UserName"><p>The name of the user to list policies for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListUserPoliciesAsync(string UserName, string Marker, int MaxItems, GET_ListUserPoliciesAction Action, GET_ListUserPoliciesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListUserPolicies?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the tags that are attached to the specified IAM user. The returned list of tags is sorted by tag key. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.
		/// GET_ListUserTags #Action=ListUserTags
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user whose tags you want to see.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListUserTagsAsync(string UserName, string Marker, int MaxItems, GET_ListUserTagsAction Action, GET_ListUserTagsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListUserTags?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the IAM users that have the specified path prefix. If no path prefix is specified, the operation returns all users in the Amazon Web Services account. If there are none, the operation returns an empty list.</p> <note> <p>IAM resource-listing operations return a subset of the available attributes for the resource. This operation does not return the following attributes, even though they are an attribute of the returned object:</p> <ul> <li> <p>PermissionsBoundary</p> </li> <li> <p>Tags</p> </li> </ul> <p>To view all of the information for a user, see <a>GetUser</a>.</p> </note> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
		/// GET_ListUsers #Action=ListUsers
		/// </summary>
		/// <param name="PathPrefix"><p> The path prefix for filtering the results. For example: <code>/division_abc/subdivision_xyz/</code>, which would get all user names whose path starts with <code>/division_abc/subdivision_xyz/</code>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListUsersAsync(string PathPrefix, string Marker, int MaxItems, GET_ListUsersAction Action, GET_ListUsersVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListUsers?PathPrefix=" + (PathPrefix==null? "" : System.Uri.EscapeDataString(PathPrefix))+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Lists the virtual MFA devices defined in the Amazon Web Services account by assignment status. If you do not specify an assignment status, the operation returns a list of all virtual MFA devices. Assignment status can be <code>Assigned</code>, <code>Unassigned</code>, or <code>Any</code>.</p> <note> <p>IAM resource-listing operations return a subset of the available attributes for the resource. For example, this operation does not return tags, even though they are an attribute of the returned object. To view tag information for a virtual MFA device, see <a>ListMFADeviceTags</a>.</p> </note> <p>You can paginate the results using the <code>MaxItems</code> and <code>Marker</code> parameters.</p>
		/// GET_ListVirtualMFADevices #Action=ListVirtualMFADevices
		/// </summary>
		/// <param name="AssignmentStatus"> The status (<code>Unassigned</code> or <code>Assigned</code>) of the devices to list. If you do not specify an <code>AssignmentStatus</code>, the operation defaults to <code>Any</code>, which lists both assigned and unassigned virtual MFA devices.,</param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ListVirtualMFADevicesAsync(AssignmentStatusType AssignmentStatus, string Marker, int MaxItems, GET_ListVirtualMFADevicesAction Action, GET_ListVirtualMFADevicesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListVirtualMFADevices?AssignmentStatus=" + AssignmentStatus+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&MaxItems="+MaxItems+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds or updates an inline policy document that is embedded in the specified IAM group.</p> <p>A user can also have managed policies attached to it. To attach a managed policy to a group, use <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AttachGroupPolicy.html"> <code>AttachGroupPolicy</code> </a>. To create a new managed policy, use <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreatePolicy.html"> <code>CreatePolicy</code> </a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about the maximum number of inline policies that you can embed in a group, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutGroupPolicy</code>. For general information about using the Query API with IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query requests</a> in the <i>IAM User Guide</i>.</p> </note>
		/// GET_PutGroupPolicy #Action=PutGroupPolicy
		/// </summary>
		/// <param name="GroupName"><p>The name of the group to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-.</p></param>
		/// <param name="PolicyName"><p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyDocument"><p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_PutGroupPolicyAsync(string GroupName, string PolicyName, string PolicyDocument, GET_PutGroupPolicyAction Action, GET_PutGroupPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutGroupPolicy?GroupName=" + (GroupName==null? "" : System.Uri.EscapeDataString(GroupName))+"&PolicyName=" + (PolicyName==null? "" : System.Uri.EscapeDataString(PolicyName))+"&PolicyDocument=" + (PolicyDocument==null? "" : System.Uri.EscapeDataString(PolicyDocument))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds or updates the policy that is specified as the IAM role's permissions boundary. You can use an Amazon Web Services managed policy or a customer managed policy to set the boundary for a role. Use the boundary to control the maximum permissions that the role can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the role.</p> <p>You cannot set the boundary for a service-linked role.</p> <important> <p>Policies used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the role. To learn how the effective permissions for a role are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON policy evaluation logic</a> in the IAM User Guide. </p> </important>
		/// GET_PutRolePermissionsBoundary #Action=PutRolePermissionsBoundary
		/// </summary>
		/// <param name="RoleName">The name (friendly name, not ARN) of the IAM role for which you want to set the permissions boundary.</param>
		/// <param name="PermissionsBoundary"><p>The ARN of the managed policy that is used to set the permissions boundary for the role.</p> <p>A permissions boundary policy defines the maximum permissions that identity-based policies can grant to an entity, but does not grant permissions. Permissions boundaries do not define the maximum permissions that a resource-based policy can grant to an entity. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM entities</a> in the <i>IAM User Guide</i>.</p> <p>For more information about policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policy-types">Policy types </a> in the <i>IAM User Guide</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_PutRolePermissionsBoundaryAsync(string RoleName, string PermissionsBoundary, GET_PutRolePermissionsBoundaryAction Action, GET_PutRolePermissionsBoundaryVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutRolePermissionsBoundary?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&PermissionsBoundary=" + (PermissionsBoundary==null? "" : System.Uri.EscapeDataString(PermissionsBoundary))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds or updates an inline policy document that is embedded in the specified IAM role.</p> <p>When you embed an inline policy in a role, the inline policy is used as part of the role's access (permissions) policy. The role's trust policy is created at the same time as the role, using <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreateRole.html"> <code>CreateRole</code> </a>. You can update a role's trust policy using <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_UpdateAssumeRolePolicy.html"> <code>UpdateAssumeRolePolicy</code> </a>. For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">IAM roles</a> in the <i>IAM User Guide</i>.</p> <p>A role can also have a managed policy attached to it. To attach a managed policy to a role, use <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AttachRolePolicy.html"> <code>AttachRolePolicy</code> </a>. To create a new managed policy, use <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreatePolicy.html"> <code>CreatePolicy</code> </a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about the maximum number of inline policies that you can embed with a role, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutRolePolicy</code>. For general information about using the Query API with IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query requests</a> in the <i>IAM User Guide</i>.</p> </note>
		/// GET_PutRolePolicy #Action=PutRolePolicy
		/// </summary>
		/// <param name="RoleName"><p>The name of the role to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyName"><p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyDocument"><p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_PutRolePolicyAsync(string RoleName, string PolicyName, string PolicyDocument, GET_PutRolePolicyAction Action, GET_PutRolePolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutRolePolicy?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&PolicyName=" + (PolicyName==null? "" : System.Uri.EscapeDataString(PolicyName))+"&PolicyDocument=" + (PolicyDocument==null? "" : System.Uri.EscapeDataString(PolicyDocument))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds or updates the policy that is specified as the IAM user's permissions boundary. You can use an Amazon Web Services managed policy or a customer managed policy to set the boundary for a user. Use the boundary to control the maximum permissions that the user can have. Setting a permissions boundary is an advanced feature that can affect the permissions for the user.</p> <important> <p>Policies that are used as permissions boundaries do not provide permissions. You must also attach a permissions policy to the user. To learn how the effective permissions for a user are evaluated, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_evaluation-logic.html">IAM JSON policy evaluation logic</a> in the IAM User Guide. </p> </important>
		/// GET_PutUserPermissionsBoundary #Action=PutUserPermissionsBoundary
		/// </summary>
		/// <param name="UserName">The name (friendly name, not ARN) of the IAM user for which you want to set the permissions boundary.</param>
		/// <param name="PermissionsBoundary"><p>The ARN of the managed policy that is used to set the permissions boundary for the user.</p> <p>A permissions boundary policy defines the maximum permissions that identity-based policies can grant to an entity, but does not grant permissions. Permissions boundaries do not define the maximum permissions that a resource-based policy can grant to an entity. To learn more, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM entities</a> in the <i>IAM User Guide</i>.</p> <p>For more information about policy types, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html#access_policy-types">Policy types </a> in the <i>IAM User Guide</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_PutUserPermissionsBoundaryAsync(string UserName, string PermissionsBoundary, GET_PutUserPermissionsBoundaryAction Action, GET_PutUserPermissionsBoundaryVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutUserPermissionsBoundary?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&PermissionsBoundary=" + (PermissionsBoundary==null? "" : System.Uri.EscapeDataString(PermissionsBoundary))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds or updates an inline policy document that is embedded in the specified IAM user.</p> <p>An IAM user can also have a managed policy attached to it. To attach a managed policy to a user, use <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AttachUserPolicy.html"> <code>AttachUserPolicy</code> </a>. To create a new managed policy, use <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_CreatePolicy.html"> <code>CreatePolicy</code> </a>. For information about policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p> <p>For information about the maximum number of inline policies that you can embed in a user, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because policy documents can be large, you should use POST rather than GET when calling <code>PutUserPolicy</code>. For general information about using the Query API with IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query requests</a> in the <i>IAM User Guide</i>.</p> </note>
		/// GET_PutUserPolicy #Action=PutUserPolicy
		/// </summary>
		/// <param name="UserName"><p>The name of the user to associate the policy with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyName"><p>The name of the policy document.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyDocument"><p>The policy document.</p> <p>You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_PutUserPolicyAsync(string UserName, string PolicyName, string PolicyDocument, GET_PutUserPolicyAction Action, GET_PutUserPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutUserPolicy?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&PolicyName=" + (PolicyName==null? "" : System.Uri.EscapeDataString(PolicyName))+"&PolicyDocument=" + (PolicyDocument==null? "" : System.Uri.EscapeDataString(PolicyDocument))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified client ID (also known as audience) from the list of client IDs registered for the specified IAM OpenID Connect (OIDC) provider resource object.</p> <p>This operation is idempotent; it does not fail or return an error if you try to remove a client ID that does not exist.</p>
		/// GET_RemoveClientIDFromOpenIDConnectProvider #Action=RemoveClientIDFromOpenIDConnectProvider
		/// </summary>
		/// <param name="OpenIDConnectProviderArn"><p>The Amazon Resource Name (ARN) of the IAM OIDC provider resource to remove the client ID from. You can get a list of OIDC provider ARNs by using the <a>ListOpenIDConnectProviders</a> operation.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <param name="ClientID">The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see <a>CreateOpenIDConnectProvider</a>.</param>
		/// <returns>Success</returns>
		public async Task GET_RemoveClientIDFromOpenIDConnectProviderAsync(string OpenIDConnectProviderArn, string ClientID, GET_RemoveClientIDFromOpenIDConnectProviderAction Action, GET_RemoveClientIDFromOpenIDConnectProviderVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RemoveClientIDFromOpenIDConnectProvider?OpenIDConnectProviderArn=" + (OpenIDConnectProviderArn==null? "" : System.Uri.EscapeDataString(OpenIDConnectProviderArn))+"&ClientID=" + (ClientID==null? "" : System.Uri.EscapeDataString(ClientID))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified IAM role from the specified EC2 instance profile.</p> <important> <p>Make sure that you do not have any Amazon EC2 instances running with the role you are about to remove from the instance profile. Removing a role from an instance profile that is associated with a running instance might break any applications running on the instance.</p> </important> <p> For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles.html">IAM roles</a> in the <i>IAM User Guide</i>. For more information about instance profiles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html">Using instance profiles</a> in the <i>IAM User Guide</i>.</p>
		/// GET_RemoveRoleFromInstanceProfile #Action=RemoveRoleFromInstanceProfile
		/// </summary>
		/// <param name="InstanceProfileName"><p>The name of the instance profile to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="RoleName"><p>The name of the role to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_RemoveRoleFromInstanceProfileAsync(string InstanceProfileName, string RoleName, GET_RemoveRoleFromInstanceProfileAction Action, GET_RemoveRoleFromInstanceProfileVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RemoveRoleFromInstanceProfile?InstanceProfileName=" + (InstanceProfileName==null? "" : System.Uri.EscapeDataString(InstanceProfileName))+"&RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the specified user from the specified group.
		/// GET_RemoveUserFromGroup #Action=RemoveUserFromGroup
		/// </summary>
		/// <param name="GroupName"><p>The name of the group to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="UserName"><p>The name of the user to remove.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_RemoveUserFromGroupAsync(string GroupName, string UserName, GET_RemoveUserFromGroupAction Action, GET_RemoveUserFromGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=RemoveUserFromGroup?GroupName=" + (GroupName==null? "" : System.Uri.EscapeDataString(GroupName))+"&UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Resets the password for a service-specific credential. The new password is Amazon Web Services generated and cryptographically strong. It cannot be configured by the user. Resetting the password immediately invalidates the previous password associated with this user.
		/// GET_ResetServiceSpecificCredential #Action=ResetServiceSpecificCredential
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="ServiceSpecificCredentialId"><p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ResetServiceSpecificCredentialAsync(string UserName, string ServiceSpecificCredentialId, GET_ResetServiceSpecificCredentialAction Action, GET_ResetServiceSpecificCredentialVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResetServiceSpecificCredential?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&ServiceSpecificCredentialId=" + (ServiceSpecificCredentialId==null? "" : System.Uri.EscapeDataString(ServiceSpecificCredentialId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Synchronizes the specified MFA device with its IAM resource object on the Amazon Web Services servers.</p> <p>For more information about creating and working with virtual MFA devices, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_VirtualMFA.html">Using a virtual MFA device</a> in the <i>IAM User Guide</i>.</p>
		/// GET_ResyncMFADevice #Action=ResyncMFADevice
		/// </summary>
		/// <param name="UserName"><p>The name of the user whose MFA device you want to resynchronize.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="SerialNumber"><p>Serial number that uniquely identifies the MFA device.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="AuthenticationCode1"><p>An authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p></param>
		/// <param name="AuthenticationCode2"><p>A subsequent authentication code emitted by the device.</p> <p>The format for this parameter is a sequence of six digits.</p></param>
		/// <returns>Success</returns>
		public async Task GET_ResyncMFADeviceAsync(string UserName, string SerialNumber, string AuthenticationCode1, string AuthenticationCode2, GET_ResyncMFADeviceAction Action, GET_ResyncMFADeviceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ResyncMFADevice?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&SerialNumber=" + (SerialNumber==null? "" : System.Uri.EscapeDataString(SerialNumber))+"&AuthenticationCode1=" + (AuthenticationCode1==null? "" : System.Uri.EscapeDataString(AuthenticationCode1))+"&AuthenticationCode2=" + (AuthenticationCode2==null? "" : System.Uri.EscapeDataString(AuthenticationCode2))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the specified version of the specified policy as the policy's default (operative) version.</p> <p>This operation affects all users, groups, and roles that the policy is attached to. To list the users, groups, and roles that the policy is attached to, use <a>ListEntitiesForPolicy</a>.</p> <p>For information about managed policies, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-vs-inline.html">Managed policies and inline policies</a> in the <i>IAM User Guide</i>.</p>
		/// GET_SetDefaultPolicyVersion #Action=SetDefaultPolicyVersion
		/// </summary>
		/// <param name="PolicyArn"><p>The Amazon Resource Name (ARN) of the IAM policy whose default version you want to set.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <param name="VersionId"><p>The version of the policy to set as the default (operative) version.</p> <p>For more information about managed policy versions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/policies-managed-versions.html">Versioning for managed policies</a> in the <i>IAM User Guide</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_SetDefaultPolicyVersionAsync(string PolicyArn, string VersionId, GET_SetDefaultPolicyVersionAction Action, GET_SetDefaultPolicyVersionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SetDefaultPolicyVersion?PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&VersionId=" + (VersionId==null? "" : System.Uri.EscapeDataString(VersionId))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the specified version of the global endpoint token as the token version used for the Amazon Web Services account.</p> <p>By default, Security Token Service (STS) is available as a global service, and all STS requests go to a single endpoint at <code>https://sts.amazonaws.com</code>. Amazon Web Services recommends using Regional STS endpoints to reduce latency, build in redundancy, and increase session token availability. For information about Regional endpoints for STS, see <a href="https://docs.aws.amazon.com/general/latest/gr/sts.html">Security Token Service endpoints and quotas</a> in the <i>Amazon Web Services General Reference</i>.</p> <p>If you make an STS call to the global endpoint, the resulting session tokens might be valid in some Regions but not others. It depends on the version that is set in this operation. Version 1 tokens are valid only in Amazon Web Services Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens. For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and deactivating STS in an Amazon Web Services Region</a> in the <i>IAM User Guide</i>.</p> <p>To view the current session token version, see the <code>GlobalEndpointTokenVersion</code> entry in the response of the <a>GetAccountSummary</a> operation.</p>
		/// GET_SetSecurityTokenServicePreferences #Action=SetSecurityTokenServicePreferences
		/// </summary>
		/// <param name="GlobalEndpointTokenVersion"><p>The version of the global endpoint token. Version 1 tokens are valid only in Amazon Web Services Regions that are available by default. These tokens do not work in manually enabled Regions, such as Asia Pacific (Hong Kong). Version 2 tokens are valid in all Regions. However, version 2 tokens are longer and might affect systems where you temporarily store tokens.</p> <p>For information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html">Activating and deactivating STS in an Amazon Web Services Region</a> in the <i>IAM User Guide</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_SetSecurityTokenServicePreferencesAsync(GlobalEndpointTokenVersion GlobalEndpointTokenVersion, GET_SetSecurityTokenServicePreferencesAction Action, GET_SetSecurityTokenServicePreferencesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SetSecurityTokenServicePreferences?GlobalEndpointTokenVersion=" + GlobalEndpointTokenVersion+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Simulate how a set of IAM policies and optionally a resource-based policy works with a list of API operations and Amazon Web Services resources to determine the policies' effective permissions. The policies are provided as strings.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations. You can simulate resources that don't exist in your account.</p> <p>If you want to simulate existing policies that are attached to an IAM user, group, or role, use <a>SimulatePrincipalPolicy</a> instead.</p> <p>Context keys are variables that are maintained by Amazon Web Services and its services and which provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForCustomPolicy</a>.</p> <p>If the output is long, you can use <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p> <note> <p>The IAM policy simulator evaluates statements in the identity-based policy and the inputs that you provide during simulation. The policy simulator results can differ from your live Amazon Web Services environment. We recommend that you check your policies against your live Amazon Web Services environment after testing using the policy simulator to confirm that you have the desired results. For more information about using the policy simulator, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html">Testing IAM policies with the IAM policy simulator </a>in the <i>IAM User Guide</i>.</p> </note>
		/// GET_SimulateCustomPolicy #Action=SimulateCustomPolicy
		/// </summary>
		/// <param name="PolicyInputList"><p>A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the <code>ResourcePolicy</code> parameter. The policies cannot be "scope-down" policies, such as you could include in a call to <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_GetFederationToken.html">GetFederationToken</a> or one of the <a href="https://docs.aws.amazon.com/IAM/latest/APIReference/API_AssumeRole.html">AssumeRole</a> API operations. In other words, do not use policies designed to restrict what a user can do while using the temporary credentials.</p> <p>The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <param name="PermissionsBoundaryPolicyInputList"><p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that an IAM entity can have. You can input only one permissions boundary when you pass a policy to this operation. For more information about permissions boundaries, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string that contains the complete, valid JSON text of a permissions boundary policy.</p> <p>The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <param name="ActionNames">A list of names of API operations to evaluate in the simulation. Each operation is evaluated against each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>. This operation does not support using wildcards (*) in an action name.</param>
		/// <param name="ResourceArns"><p>A list of ARNs of Amazon Web Services resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response. You can simulate resources that don't exist in your account.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>If you include a <code>ResourcePolicy</code>, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p> <note> <p>Simulation of resource-based policies isn't supported for IAM roles.</p> </note></param>
		/// <param name="ResourcePolicy"><p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <note> <p>Simulation of resource-based policies isn't supported for IAM roles.</p> </note></param>
		/// <param name="ResourceOwner"><p>An ARN representing the Amazon Web Services account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</p> <p>The ARN for an account uses the following syntax: <code>arn:aws:iam::<i>AWS-account-ID</i>:root</code>. For example, to represent the account with the 112233445566 ID, use the following ARN: <code>arn:aws:iam::112233445566-ID:root</code>. </p></param>
		/// <param name="CallerArn"><p>The ARN of the IAM user that you want to use as the simulated caller of the API operations. <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> so that the policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p></param>
		/// <param name="ContextEntries">A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.</param>
		/// <param name="ResourceHandlingOption"><p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul></param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <returns>Success</returns>
		public async Task GET_SimulateCustomPolicyAsync(string[] PolicyInputList, string[] PermissionsBoundaryPolicyInputList, string[] ActionNames, string[] ResourceArns, string ResourcePolicy, string ResourceOwner, string CallerArn, ContextEntry[] ContextEntries, string ResourceHandlingOption, int MaxItems, string Marker, GET_SimulateCustomPolicyAction Action, GET_SimulateCustomPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SimulateCustomPolicy?"+string.Join("&", PolicyInputList.Select(z => $"PolicyInputList={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", PermissionsBoundaryPolicyInputList.Select(z => $"PermissionsBoundaryPolicyInputList={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ActionNames.Select(z => $"ActionNames={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ResourceArns.Select(z => $"ResourceArns={System.Uri.EscapeDataString(z.ToString())}"))+"&ResourcePolicy=" + (ResourcePolicy==null? "" : System.Uri.EscapeDataString(ResourcePolicy))+"&ResourceOwner=" + (ResourceOwner==null? "" : System.Uri.EscapeDataString(ResourceOwner))+"&CallerArn=" + (CallerArn==null? "" : System.Uri.EscapeDataString(CallerArn))+"&"+string.Join("&", ContextEntries.Select(z => $"ContextEntries={z}"))+"&ResourceHandlingOption=" + (ResourceHandlingOption==null? "" : System.Uri.EscapeDataString(ResourceHandlingOption))+"&MaxItems="+MaxItems+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Simulate how a set of IAM policies attached to an IAM entity works with a list of API operations and Amazon Web Services resources to determine the policies' effective permissions. The entity can be an IAM user, group, or role. If you specify a user, then the simulation also includes all of the policies that are attached to groups that the user belongs to. You can simulate resources that don't exist in your account.</p> <p>You can optionally include a list of one or more additional policies specified as strings to include in the simulation. If you want to simulate only policies specified as strings, use <a>SimulateCustomPolicy</a> instead.</p> <p>You can also optionally include one resource-based policy to be evaluated with each of the resources included in the simulation for IAM users only.</p> <p>The simulation does not perform the API operations; it only checks the authorization to determine if the simulated policies allow or deny the operations.</p> <p> <b>Note:</b> This operation discloses information about the permissions granted to other users. If you do not want users to see other user's permissions, then consider allowing them to use <a>SimulateCustomPolicy</a> instead.</p> <p>Context keys are variables maintained by Amazon Web Services and its services that provide details about the context of an API query request. You can use the <code>Condition</code> element of an IAM policy to evaluate context keys. To get the list of context keys that the policies require for correct simulation, use <a>GetContextKeysForPrincipalPolicy</a>.</p> <p>If the output is long, you can use the <code>MaxItems</code> and <code>Marker</code> parameters to paginate the results.</p> <note> <p>The IAM policy simulator evaluates statements in the identity-based policy and the inputs that you provide during simulation. The policy simulator results can differ from your live Amazon Web Services environment. We recommend that you check your policies against your live Amazon Web Services environment after testing using the policy simulator to confirm that you have the desired results. For more information about using the policy simulator, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_testing-policies.html">Testing IAM policies with the IAM policy simulator </a>in the <i>IAM User Guide</i>.</p> </note>
		/// GET_SimulatePrincipalPolicy #Action=SimulatePrincipalPolicy
		/// </summary>
		/// <param name="PolicySourceArn"><p>The Amazon Resource Name (ARN) of a user, group, or role whose policies you want to include in the simulation. If you specify a user, group, or role, the simulation includes all policies that are associated with that entity. If you specify a user, the simulation also includes all policies that are attached to any groups the user belongs to.</p> <p>The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <param name="PolicyInputList"><p>An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <param name="PermissionsBoundaryPolicyInputList"><p>The IAM permissions boundary policy to simulate. The permissions boundary sets the maximum permissions that the entity can have. You can input only one permissions boundary when you pass a policy to this operation. An IAM entity can only have one permissions boundary in effect at a time. For example, if a permissions boundary is attached to an entity and you pass in a different permissions boundary policy using this parameter, then the new permissions boundary policy is used for the simulation. For more information about permissions boundaries, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html">Permissions boundaries for IAM entities</a> in the <i>IAM User Guide</i>. The policy input is specified as a string containing the complete, valid JSON text of a permissions boundary policy.</p> <p>The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <param name="ActionNames">A list of names of API operations to evaluate in the simulation. Each operation is evaluated for each resource. Each operation must include the service identifier, such as <code>iam:CreateUser</code>.</param>
		/// <param name="ResourceArns"><p>A list of ARNs of Amazon Web Services resources to include in the simulation. If this parameter is not provided, then the value defaults to <code>*</code> (all resources). Each API in the <code>ActionNames</code> parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response. You can simulate resources that don't exist in your account.</p> <p>The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the <code>ResourcePolicy</code> parameter.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p> <note> <p>Simulation of resource-based policies isn't supported for IAM roles.</p> </note></param>
		/// <param name="ResourcePolicy"><p>A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation.</p> <p>The maximum length of the policy document that you can pass in this operation, including whitespace, is listed below. To view the maximum character counts of a managed policy with no whitespaces, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html#reference_iam-quotas-entity-length">IAM and STS character quotas</a>.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <note> <p>Simulation of resource-based policies isn't supported for IAM roles.</p> </note></param>
		/// <param name="ResourceOwner">An Amazon Web Services account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN. Examples of resource ARNs include an S3 bucket or object. If <code>ResourceOwner</code> is specified, it is also used as the account owner of any <code>ResourcePolicy</code> included in the simulation. If the <code>ResourceOwner</code> parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in <code>CallerArn</code>. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user <code>CallerArn</code>.</param>
		/// <param name="CallerArn"><p>The ARN of the IAM user that you want to specify as the simulated caller of the API operations. If you do not specify a <code>CallerArn</code>, it defaults to the ARN of the user that you specify in <code>PolicySourceArn</code>, if you specified a user. If you include both a <code>PolicySourceArn</code> (for example, <code>arn:aws:iam::123456789012:user/David</code>) and a <code>CallerArn</code> (for example, <code>arn:aws:iam::123456789012:user/Bob</code>), the result is that you simulate calling the API operations as Bob, as if Bob had David's policies.</p> <p>You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.</p> <p> <code>CallerArn</code> is required if you include a <code>ResourcePolicy</code> and the <code>PolicySourceArn</code> is not the ARN for an IAM user. This is required so that the resource-based policy's <code>Principal</code> element has a value to use in evaluating the policy.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <param name="ContextEntries">A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permissions policies, the corresponding value is supplied.</param>
		/// <param name="ResourceHandlingOption"><p>Specifies the type of simulation to run. Different API operations that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation.</p> <p>Each of the EC2 scenarios requires that you specify instance, image, and security group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-supported-platforms.html">Supported platforms</a> in the <i>Amazon EC2 User Guide</i>.</p> <ul> <li> <p> <b>EC2-VPC-InstanceStore</b> </p> <p>instance, image, security group, network interface</p> </li> <li> <p> <b>EC2-VPC-InstanceStore-Subnet</b> </p> <p>instance, image, security group, network interface, subnet</p> </li> <li> <p> <b>EC2-VPC-EBS</b> </p> <p>instance, image, security group, network interface, volume</p> </li> <li> <p> <b>EC2-VPC-EBS-Subnet</b> </p> <p>instance, image, security group, network interface, subnet, volume</p> </li> </ul></param>
		/// <param name="MaxItems"><p>Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the <code>IsTruncated</code> response element is <code>true</code>.</p> <p>If you do not include this parameter, the number of items defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the <code>IsTruncated</code> response element returns <code>true</code>, and <code>Marker</code> contains a value to include in the subsequent call that tells the service where to continue from.</p></param>
		/// <param name="Marker">Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the <code>Marker</code> element in the response that you received to indicate where the next call should start.</param>
		/// <returns>Success</returns>
		public async Task GET_SimulatePrincipalPolicyAsync(string PolicySourceArn, string[] PolicyInputList, string[] PermissionsBoundaryPolicyInputList, string[] ActionNames, string[] ResourceArns, string ResourcePolicy, string ResourceOwner, string CallerArn, ContextEntry[] ContextEntries, string ResourceHandlingOption, int MaxItems, string Marker, GET_SimulatePrincipalPolicyAction Action, GET_SimulatePrincipalPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=SimulatePrincipalPolicy?PolicySourceArn=" + (PolicySourceArn==null? "" : System.Uri.EscapeDataString(PolicySourceArn))+"&"+string.Join("&", PolicyInputList.Select(z => $"PolicyInputList={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", PermissionsBoundaryPolicyInputList.Select(z => $"PermissionsBoundaryPolicyInputList={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ActionNames.Select(z => $"ActionNames={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", ResourceArns.Select(z => $"ResourceArns={System.Uri.EscapeDataString(z.ToString())}"))+"&ResourcePolicy=" + (ResourcePolicy==null? "" : System.Uri.EscapeDataString(ResourcePolicy))+"&ResourceOwner=" + (ResourceOwner==null? "" : System.Uri.EscapeDataString(ResourceOwner))+"&CallerArn=" + (CallerArn==null? "" : System.Uri.EscapeDataString(CallerArn))+"&"+string.Join("&", ContextEntries.Select(z => $"ContextEntries={z}"))+"&ResourceHandlingOption=" + (ResourceHandlingOption==null? "" : System.Uri.EscapeDataString(ResourceHandlingOption))+"&MaxItems="+MaxItems+"&Marker=" + (Marker==null? "" : System.Uri.EscapeDataString(Marker))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds one or more tags to an IAM instance profile. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>Each tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Include tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM instance profile that has a specified tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the <i>IAM User Guide</i>.</p> </li> </ul> <note> <ul> <li> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note>
		/// GET_TagInstanceProfile #Action=TagInstanceProfile
		/// </summary>
		/// <param name="InstanceProfileName"><p>The name of the IAM instance profile to which you want to add tags.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Tags">The list of tags that you want to attach to the IAM instance profile. Each tag consists of a key name and an associated value.</param>
		/// <returns>Success</returns>
		public async Task GET_TagInstanceProfileAsync(string InstanceProfileName, Tag[] Tags, GET_TagInstanceProfileAction Action, GET_TagInstanceProfileVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=TagInstanceProfile?InstanceProfileName=" + (InstanceProfileName==null? "" : System.Uri.EscapeDataString(InstanceProfileName))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds one or more tags to an IAM virtual multi-factor authentication (MFA) device. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Include tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM virtual MFA device that has a specified tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the <i>IAM User Guide</i>.</p> </li> </ul> <note> <ul> <li> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note>
		/// GET_TagMFADevice #Action=TagMFADevice
		/// </summary>
		/// <param name="SerialNumber"><p>The unique identifier for the IAM virtual MFA device to which you want to add tags. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Tags">The list of tags that you want to attach to the IAM virtual MFA device. Each tag consists of a key name and an associated value.</param>
		/// <returns>Success</returns>
		public async Task GET_TagMFADeviceAsync(string SerialNumber, Tag[] Tags, GET_TagMFADeviceAction Action, GET_TagMFADeviceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=TagMFADevice?SerialNumber=" + (SerialNumber==null? "" : System.Uri.EscapeDataString(SerialNumber))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds one or more tags to an OpenID Connect (OIDC)-compatible identity provider. For more information about these providers, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html">About web identity federation</a>. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Include tags in IAM identity-based and resource-based policies. You can use tags to restrict access to only an OIDC provider that has a specified tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the <i>IAM User Guide</i>.</p> </li> </ul> <note> <ul> <li> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note>
		/// GET_TagOpenIDConnectProvider #Action=TagOpenIDConnectProvider
		/// </summary>
		/// <param name="OpenIDConnectProviderArn"><p>The ARN of the OIDC identity provider in IAM to which you want to add tags.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Tags">The list of tags that you want to attach to the OIDC identity provider in IAM. Each tag consists of a key name and an associated value.</param>
		/// <returns>Success</returns>
		public async Task GET_TagOpenIDConnectProviderAsync(string OpenIDConnectProviderArn, Tag[] Tags, GET_TagOpenIDConnectProviderAction Action, GET_TagOpenIDConnectProviderVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=TagOpenIDConnectProvider?OpenIDConnectProviderArn=" + (OpenIDConnectProviderArn==null? "" : System.Uri.EscapeDataString(OpenIDConnectProviderArn))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds one or more tags to an IAM customer managed policy. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Include tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM customer managed policy that has a specified tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the <i>IAM User Guide</i>.</p> </li> </ul> <note> <ul> <li> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note>
		/// GET_TagPolicy #Action=TagPolicy
		/// </summary>
		/// <param name="PolicyArn"><p>The ARN of the IAM customer managed policy to which you want to add tags.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Tags">The list of tags that you want to attach to the IAM customer managed policy. Each tag consists of a key name and an associated value.</param>
		/// <returns>Success</returns>
		public async Task GET_TagPolicyAsync(string PolicyArn, Tag[] Tags, GET_TagPolicyAction Action, GET_TagPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=TagPolicy?PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds one or more tags to an IAM role. The role can be a regular role or a service-linked role. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Include tags in IAM user-based and resource-based policies. You can use tags to restrict access to only an IAM role that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which Amazon Web Services resources.</p> </li> </ul> <note> <ul> <li> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM identities</a> in the <i>IAM User Guide</i>.</p>
		/// GET_TagRole #Action=TagRole
		/// </summary>
		/// <param name="RoleName"><p>The name of the IAM role to which you want to add tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Tags">The list of tags that you want to attach to the IAM role. Each tag consists of a key name and an associated value.</param>
		/// <returns>Success</returns>
		public async Task GET_TagRoleAsync(string RoleName, Tag[] Tags, GET_TagRoleAction Action, GET_TagRoleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=TagRole?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds one or more tags to a Security Assertion Markup Language (SAML) identity provider. For more information about these providers, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_saml.html">About SAML 2.0-based federation </a>. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Include tags in IAM user-based and resource-based policies. You can use tags to restrict access to only a SAML identity provider that has a specified tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the <i>IAM User Guide</i>.</p> </li> </ul> <note> <ul> <li> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note>
		/// GET_TagSAMLProvider #Action=TagSAMLProvider
		/// </summary>
		/// <param name="SAMLProviderArn"><p>The ARN of the SAML identity provider in IAM to which you want to add tags.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Tags">The list of tags that you want to attach to the SAML identity provider in IAM. Each tag consists of a key name and an associated value.</param>
		/// <returns>Success</returns>
		public async Task GET_TagSAMLProviderAsync(string SAMLProviderArn, Tag[] Tags, GET_TagSAMLProviderAction Action, GET_TagSAMLProviderVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=TagSAMLProvider?SAMLProviderArn=" + (SAMLProviderArn==null? "" : System.Uri.EscapeDataString(SAMLProviderArn))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds one or more tags to an IAM server certificate. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <note> <p>For certificates in a Region supported by Certificate Manager (ACM), we recommend that you don't use IAM server certificates. Instead, use ACM to provision, manage, and deploy your server certificates. For more information about IAM server certificates, <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with server certificates</a> in the <i>IAM User Guide</i>.</p> </note> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Include tags in IAM user-based and resource-based policies. You can use tags to restrict access to only a server certificate that has a specified tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which Amazon Web Services resources.</p> </li> </ul> <note> <ul> <li> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note>
		/// GET_TagServerCertificate #Action=TagServerCertificate
		/// </summary>
		/// <param name="ServerCertificateName"><p>The name of the IAM server certificate to which you want to add tags.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Tags">The list of tags that you want to attach to the IAM server certificate. Each tag consists of a key name and an associated value.</param>
		/// <returns>Success</returns>
		public async Task GET_TagServerCertificateAsync(string ServerCertificateName, Tag[] Tags, GET_TagServerCertificateAction Action, GET_TagServerCertificateVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=TagServerCertificate?ServerCertificateName=" + (ServerCertificateName==null? "" : System.Uri.EscapeDataString(ServerCertificateName))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Adds one or more tags to an IAM user. If a tag with the same key name already exists, then that tag is overwritten with the new value.</p> <p>A tag consists of a key name and an associated value. By assigning tags to your resources, you can do the following:</p> <ul> <li> <p> <b>Administrative grouping and discovery</b> - Attach tags to resources to aid in organization and search. For example, you could search for all resources with the key name <i>Project</i> and the value <i>MyImportantProject</i>. Or search for all resources with the key name <i>Cost Center</i> and the value <i>41200</i>. </p> </li> <li> <p> <b>Access control</b> - Include tags in IAM identity-based and resource-based policies. You can use tags to restrict access to only an IAM requesting user that has a specified tag attached. You can also restrict access to only those resources that have a certain tag attached. For examples of policies that show how to use tags to control access, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html">Control access using IAM tags</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p> <b>Cost allocation</b> - Use tags to help track which individuals and teams are using which Amazon Web Services resources.</p> </li> </ul> <note> <ul> <li> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> </li> <li> <p>Amazon Web Services always interprets the tag <code>Value</code> as a single string. If you need to store an array, you can store comma-separated values in the string. However, you must interpret the value in your code.</p> </li> </ul> </note> <p>For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM identities</a> in the <i>IAM User Guide</i>.</p>
		/// GET_TagUser #Action=TagUser
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user to which you want to add tags.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Tags">The list of tags that you want to attach to the IAM user. Each tag consists of a key name and an associated value.</param>
		/// <returns>Success</returns>
		public async Task GET_TagUserAsync(string UserName, Tag[] Tags, GET_TagUserAction Action, GET_TagUserVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=TagUser?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from the IAM instance profile. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.
		/// GET_UntagInstanceProfile #Action=UntagInstanceProfile
		/// </summary>
		/// <param name="InstanceProfileName"><p>The name of the IAM instance profile from which you want to remove tags.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="TagKeys">A list of key names as a simple array of strings. The tags with matching keys are removed from the specified instance profile.</param>
		/// <returns>Success</returns>
		public async Task GET_UntagInstanceProfileAsync(string InstanceProfileName, string[] TagKeys, GET_UntagInstanceProfileAction Action, GET_UntagInstanceProfileVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UntagInstanceProfile?InstanceProfileName=" + (InstanceProfileName==null? "" : System.Uri.EscapeDataString(InstanceProfileName))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from the IAM virtual multi-factor authentication (MFA) device. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.
		/// GET_UntagMFADevice #Action=UntagMFADevice
		/// </summary>
		/// <param name="SerialNumber"><p>The unique identifier for the IAM virtual MFA device from which you want to remove tags. For virtual MFA devices, the serial number is the same as the ARN.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="TagKeys">A list of key names as a simple array of strings. The tags with matching keys are removed from the specified instance profile.</param>
		/// <returns>Success</returns>
		public async Task GET_UntagMFADeviceAsync(string SerialNumber, string[] TagKeys, GET_UntagMFADeviceAction Action, GET_UntagMFADeviceVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UntagMFADevice?SerialNumber=" + (SerialNumber==null? "" : System.Uri.EscapeDataString(SerialNumber))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from the specified OpenID Connect (OIDC)-compatible identity provider in IAM. For more information about OIDC providers, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html">About web identity federation</a>. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.
		/// GET_UntagOpenIDConnectProvider #Action=UntagOpenIDConnectProvider
		/// </summary>
		/// <param name="OpenIDConnectProviderArn"><p>The ARN of the OIDC provider in IAM from which you want to remove tags.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="TagKeys">A list of key names as a simple array of strings. The tags with matching keys are removed from the specified OIDC provider.</param>
		/// <returns>Success</returns>
		public async Task GET_UntagOpenIDConnectProviderAsync(string OpenIDConnectProviderArn, string[] TagKeys, GET_UntagOpenIDConnectProviderAction Action, GET_UntagOpenIDConnectProviderVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UntagOpenIDConnectProvider?OpenIDConnectProviderArn=" + (OpenIDConnectProviderArn==null? "" : System.Uri.EscapeDataString(OpenIDConnectProviderArn))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from the customer managed policy. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.
		/// GET_UntagPolicy #Action=UntagPolicy
		/// </summary>
		/// <param name="PolicyArn"><p>The ARN of the IAM customer managed policy from which you want to remove tags.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="TagKeys">A list of key names as a simple array of strings. The tags with matching keys are removed from the specified policy.</param>
		/// <returns>Success</returns>
		public async Task GET_UntagPolicyAsync(string PolicyArn, string[] TagKeys, GET_UntagPolicyAction Action, GET_UntagPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UntagPolicy?PolicyArn=" + (PolicyArn==null? "" : System.Uri.EscapeDataString(PolicyArn))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from the role. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.
		/// GET_UntagRole #Action=UntagRole
		/// </summary>
		/// <param name="RoleName"><p>The name of the IAM role from which you want to remove tags.</p> <p>This parameter accepts (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that consist of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="TagKeys">A list of key names as a simple array of strings. The tags with matching keys are removed from the specified role.</param>
		/// <returns>Success</returns>
		public async Task GET_UntagRoleAsync(string RoleName, string[] TagKeys, GET_UntagRoleAction Action, GET_UntagRoleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UntagRole?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from the specified Security Assertion Markup Language (SAML) identity provider in IAM. For more information about these providers, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_providers_oidc.html">About web identity federation</a>. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.
		/// GET_UntagSAMLProvider #Action=UntagSAMLProvider
		/// </summary>
		/// <param name="SAMLProviderArn"><p>The ARN of the SAML identity provider in IAM from which you want to remove tags.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="TagKeys">A list of key names as a simple array of strings. The tags with matching keys are removed from the specified SAML identity provider.</param>
		/// <returns>Success</returns>
		public async Task GET_UntagSAMLProviderAsync(string SAMLProviderArn, string[] TagKeys, GET_UntagSAMLProviderAction Action, GET_UntagSAMLProviderVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UntagSAMLProvider?SAMLProviderArn=" + (SAMLProviderArn==null? "" : System.Uri.EscapeDataString(SAMLProviderArn))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Removes the specified tags from the IAM server certificate. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> <note> <p>For certificates in a Region supported by Certificate Manager (ACM), we recommend that you don't use IAM server certificates. Instead, use ACM to provision, manage, and deploy your server certificates. For more information about IAM server certificates, <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with server certificates</a> in the <i>IAM User Guide</i>.</p> </note>
		/// GET_UntagServerCertificate #Action=UntagServerCertificate
		/// </summary>
		/// <param name="ServerCertificateName"><p>The name of the IAM server certificate from which you want to remove tags.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="TagKeys">A list of key names as a simple array of strings. The tags with matching keys are removed from the specified IAM server certificate.</param>
		/// <returns>Success</returns>
		public async Task GET_UntagServerCertificateAsync(string ServerCertificateName, string[] TagKeys, GET_UntagServerCertificateAction Action, GET_UntagServerCertificateVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UntagServerCertificate?ServerCertificateName=" + (ServerCertificateName==null? "" : System.Uri.EscapeDataString(ServerCertificateName))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes the specified tags from the user. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.
		/// GET_UntagUser #Action=UntagUser
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user from which you want to remove tags.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="TagKeys">A list of key names as a simple array of strings. The tags with matching keys are removed from the specified user.</param>
		/// <returns>Success</returns>
		public async Task GET_UntagUserAsync(string UserName, string[] TagKeys, GET_UntagUserAction Action, GET_UntagUserVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UntagUser?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&"+string.Join("&", TagKeys.Select(z => $"TagKeys={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Changes the status of the specified access key from Active to Inactive, or vice versa. This operation can be used to disable a user's key as part of a key rotation workflow.</p> <p>If the <code>UserName</code> is not specified, the user name is determined implicitly based on the Amazon Web Services access key ID used to sign the request. If a temporary access key is used, then <code>UserName</code> is required. If a long-term key is assigned to the user, then <code>UserName</code> is not required. This operation works for access keys under the Amazon Web Services account. Consequently, you can use this operation to manage Amazon Web Services account root user credentials even if the Amazon Web Services account has no associated users.</p> <p>For information about rotating keys, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/ManagingCredentials.html">Managing keys and certificates</a> in the <i>IAM User Guide</i>.</p>
		/// GET_UpdateAccessKey #Action=UpdateAccessKey
		/// </summary>
		/// <param name="UserName"><p>The name of the user whose key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="AccessKeyId"><p>The access key ID of the secret access key you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p></param>
		/// <param name="Status"> The status you want to assign to the secret access key. <code>Active</code> means that the key can be used for programmatic calls to Amazon Web Services, while <code>Inactive</code> means that the key cannot be used.</param>
		/// <returns>Success</returns>
		public async Task GET_UpdateAccessKeyAsync(string UserName, string AccessKeyId, StatusType Status, GET_UpdateAccessKeyAction Action, GET_UpdateAccessKeyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateAccessKey?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&AccessKeyId=" + (AccessKeyId==null? "" : System.Uri.EscapeDataString(AccessKeyId))+"&Status=" + Status+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the password policy settings for the Amazon Web Services account.</p> <note> <p>This operation does not support partial updates. No parameters are required, but if you do not specify a parameter, that parameter's value reverts to its default value. See the <b>Request Parameters</b> section for each parameter's default value. Also note that some parameters do not allow the default parameter to be explicitly set. Instead, to invoke the default value, do not include that parameter when you invoke the operation.</p> </note> <p> For more information about using a password policy, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingPasswordPolicies.html">Managing an IAM password policy</a> in the <i>IAM User Guide</i>.</p>
		/// GET_UpdateAccountPasswordPolicy #Action=UpdateAccountPasswordPolicy
		/// </summary>
		/// <param name="MinimumPasswordLength"><p>The minimum number of characters allowed in an IAM user password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>6</code>.</p></param>
		/// <param name="RequireSymbols"><p>Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters:</p> <p>! @ # $ % ^ &amp; * ( ) _ + - = [ ] { } | '</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one symbol character.</p></param>
		/// <param name="RequireNumbers"><p>Specifies whether IAM user passwords must contain at least one numeric character (0 to 9).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one numeric character.</p></param>
		/// <param name="RequireUppercaseCharacters"><p>Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one uppercase character.</p></param>
		/// <param name="RequireLowercaseCharacters"><p>Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z).</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that passwords do not require at least one lowercase character.</p></param>
		/// <param name="AllowUsersToChangePassword"><p> Allows all IAM users in your account to use the Amazon Web Services Management Console to change their own passwords. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_passwords_enable-user-change.html">Permitting IAM users to change their own passwords</a> in the <i>IAM User Guide</i>.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users in the account do not automatically have permissions to change their own password.</p></param>
		/// <param name="MaxPasswordAge"><p>The number of days that an IAM user password is valid.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM user passwords never expire.</p></param>
		/// <param name="PasswordReusePrevention"><p>Specifies the number of previous passwords that IAM users are prevented from reusing.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>0</code>. The result is that IAM users are not prevented from reusing previous passwords.</p></param>
		/// <param name="HardExpiry"><p> Prevents IAM users who are accessing the account via the Amazon Web Services Management Console from setting a new console password after their password has expired. The IAM user cannot access the console until an administrator resets the password.</p> <p>If you do not specify a value for this parameter, then the operation uses the default value of <code>false</code>. The result is that IAM users can change their passwords after they expire and continue to sign in as the user.</p> <note> <p> In the Amazon Web Services Management Console, the custom password policy option <b>Allow users to change their own password</b> gives IAM users permissions to <code>iam:ChangePassword</code> for only their user and to the <code>iam:GetAccountPasswordPolicy</code> action. This option does not attach a permissions policy to each user, rather the permissions are applied at the account-level for all users by IAM. IAM users with <code>iam:ChangePassword</code> permission and active access keys can reset their own expired console password using the CLI or API.</p> </note></param>
		/// <returns>Success</returns>
		public async Task GET_UpdateAccountPasswordPolicyAsync(int MinimumPasswordLength, bool RequireSymbols, bool RequireNumbers, bool RequireUppercaseCharacters, bool RequireLowercaseCharacters, bool AllowUsersToChangePassword, int MaxPasswordAge, int PasswordReusePrevention, bool HardExpiry, GET_UpdateAccountPasswordPolicyAction Action, GET_UpdateAccountPasswordPolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateAccountPasswordPolicy?MinimumPasswordLength="+MinimumPasswordLength+"&RequireSymbols="+RequireSymbols+"&RequireNumbers="+RequireNumbers+"&RequireUppercaseCharacters="+RequireUppercaseCharacters+"&RequireLowercaseCharacters="+RequireLowercaseCharacters+"&AllowUsersToChangePassword="+AllowUsersToChangePassword+"&MaxPasswordAge="+MaxPasswordAge+"&PasswordReusePrevention="+PasswordReusePrevention+"&HardExpiry="+HardExpiry+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the policy that grants an IAM entity permission to assume a role. This is typically referred to as the "role trust policy". For more information about roles, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html">Using roles to delegate permissions and federate identities</a>.
		/// GET_UpdateAssumeRolePolicy #Action=UpdateAssumeRolePolicy
		/// </summary>
		/// <param name="RoleName"><p>The name of the role to update with the new policy.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="PolicyDocument"><p>The policy that grants an entity permission to assume the role.</p> <p>You must provide policies in JSON format in IAM. However, for CloudFormation templates formatted in YAML, you can provide the policy in JSON or YAML format. CloudFormation always converts a YAML policy to JSON format before submitting it to IAM.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_UpdateAssumeRolePolicyAsync(string RoleName, string PolicyDocument, GET_UpdateAssumeRolePolicyAction Action, GET_UpdateAssumeRolePolicyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateAssumeRolePolicy?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&PolicyDocument=" + (PolicyDocument==null? "" : System.Uri.EscapeDataString(PolicyDocument))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the name and/or the path of the specified IAM group.</p> <important> <p> You should understand the implications of changing a group's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_WorkingWithGroupsAndUsers.html">Renaming users and groups</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the role group with the old name and the new name. For example, to change the group named <code>Managers</code> to <code>MGRs</code>, the principal must have a policy that allows them to update both groups. If the principal has permission to update the <code>Managers</code> group, but not the <code>MGRs</code> group, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access management</a>. </p> </note>
		/// GET_UpdateGroup #Action=UpdateGroup
		/// </summary>
		/// <param name="GroupName"><p>Name of the IAM group to update. If you're changing the name of the group, this is the original name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="NewPath"><p>New path for the IAM group. Only include this if changing the group's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="NewGroupName"><p>New name for the IAM group. Only include this if changing the group's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p></param>
		/// <returns>Success</returns>
		public async Task GET_UpdateGroupAsync(string GroupName, string NewPath, string NewGroupName, GET_UpdateGroupAction Action, GET_UpdateGroupVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateGroup?GroupName=" + (GroupName==null? "" : System.Uri.EscapeDataString(GroupName))+"&NewPath=" + (NewPath==null? "" : System.Uri.EscapeDataString(NewPath))+"&NewGroupName=" + (NewGroupName==null? "" : System.Uri.EscapeDataString(NewGroupName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Changes the password for the specified IAM user. You can use the CLI, the Amazon Web Services API, or the <b>Users</b> page in the IAM console to change the password for any IAM user. Use <a>ChangePassword</a> to change your own password in the <b>My Security Credentials</b> page in the Amazon Web Services Management Console.</p> <p>For more information about modifying passwords, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_ManagingLogins.html">Managing passwords</a> in the <i>IAM User Guide</i>.</p>
		/// GET_UpdateLoginProfile #Action=UpdateLoginProfile
		/// </summary>
		/// <param name="UserName"><p>The name of the user whose password you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="Password"><p>The new password for the specified IAM user.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul> <p>However, the format can be further restricted by the account administrator by setting a password policy on the Amazon Web Services account. For more information, see <a>UpdateAccountPasswordPolicy</a>.</p></param>
		/// <param name="PasswordResetRequired">Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.</param>
		/// <returns>Success</returns>
		public async Task GET_UpdateLoginProfileAsync(string UserName, string Password, bool PasswordResetRequired, GET_UpdateLoginProfileAction Action, GET_UpdateLoginProfileVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateLoginProfile?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&Password=" + (Password==null? "" : System.Uri.EscapeDataString(Password))+"&PasswordResetRequired="+PasswordResetRequired+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Replaces the existing list of server certificate thumbprints associated with an OpenID Connect (OIDC) provider resource object with a new list of thumbprints.</p> <p>The list that you pass with this operation completely replaces the existing list of thumbprints. (The lists are not merged.)</p> <p>Typically, you need to update a thumbprint only when the identity provider certificate changes, which occurs rarely. However, if the provider's certificate <i>does</i> change, any attempt to assume an IAM role that specifies the OIDC provider as a principal fails until the certificate thumbprint is updated.</p> <note> <p>Amazon Web Services secures communication with some OIDC identity providers (IdPs) through our library of trusted root certificate authorities (CAs) instead of using a certificate thumbprint to verify your IdP server certificate. These OIDC IdPs include Auth0, GitHub, Google, and those that use an Amazon S3 bucket to host a JSON Web Key Set (JWKS) endpoint. In these cases, your legacy thumbprint remains in your configuration, but is no longer used for validation.</p> </note> <note> <p>Trust for the OIDC provider is derived from the provider certificate and is validated by the thumbprint. Therefore, it is best to limit access to the <code>UpdateOpenIDConnectProviderThumbprint</code> operation to highly privileged users.</p> </note>
		/// GET_UpdateOpenIDConnectProviderThumbprint #Action=UpdateOpenIDConnectProviderThumbprint
		/// </summary>
		/// <param name="OpenIDConnectProviderArn"><p>The Amazon Resource Name (ARN) of the IAM OIDC provider resource object for which you want to update the thumbprint. You can get a list of OIDC provider ARNs by using the <a>ListOpenIDConnectProviders</a> operation.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <param name="ThumbprintList">A list of certificate thumbprints that are associated with the specified IAM OpenID Connect provider. For more information, see <a>CreateOpenIDConnectProvider</a>. </param>
		/// <returns>Success</returns>
		public async Task GET_UpdateOpenIDConnectProviderThumbprintAsync(string OpenIDConnectProviderArn, string[] ThumbprintList, GET_UpdateOpenIDConnectProviderThumbprintAction Action, GET_UpdateOpenIDConnectProviderThumbprintVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateOpenIDConnectProviderThumbprint?OpenIDConnectProviderArn=" + (OpenIDConnectProviderArn==null? "" : System.Uri.EscapeDataString(OpenIDConnectProviderArn))+"&"+string.Join("&", ThumbprintList.Select(z => $"ThumbprintList={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the description or maximum session duration setting of a role.
		/// GET_UpdateRole #Action=UpdateRole
		/// </summary>
		/// <param name="RoleName">The name of the role that you want to modify.</param>
		/// <param name="Description">The new description that you want to apply to the specified role.</param>
		/// <param name="MaxSessionDuration"><p>The maximum session duration (in seconds) that you want to set for the specified role. If you do not specify a value for this setting, the default value of one hour is applied. This setting can have a value from 1 hour to 12 hours.</p> <p>Anyone who assumes the role from the CLI or API can use the <code>DurationSeconds</code> API parameter or the <code>duration-seconds</code> CLI parameter to request a longer session. The <code>MaxSessionDuration</code> setting determines the maximum duration that can be requested using the <code>DurationSeconds</code> parameter. If users don't specify a value for the <code>DurationSeconds</code> parameter, their security credentials are valid for one hour by default. This applies when you use the <code>AssumeRole*</code> API operations or the <code>assume-role*</code> CLI operations but does not apply when you use those operations to create a console URL. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use.html">Using IAM roles</a> in the <i>IAM User Guide</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_UpdateRoleAsync(string RoleName, string Description, int MaxSessionDuration, GET_UpdateRoleAction Action, GET_UpdateRoleVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateRole?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&Description=" + (Description==null? "" : System.Uri.EscapeDataString(Description))+"&MaxSessionDuration="+MaxSessionDuration+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Use <a>UpdateRole</a> instead.</p> <p>Modifies only the description of a role. This operation performs the same function as the <code>Description</code> parameter in the <code>UpdateRole</code> operation.</p>
		/// GET_UpdateRoleDescription #Action=UpdateRoleDescription
		/// </summary>
		/// <param name="RoleName">The name of the role that you want to modify.</param>
		/// <param name="Description">The new description that you want to apply to the specified role.</param>
		/// <returns>Success</returns>
		public async Task GET_UpdateRoleDescriptionAsync(string RoleName, string Description, GET_UpdateRoleDescriptionAction Action, GET_UpdateRoleDescriptionVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateRoleDescription?RoleName=" + (RoleName==null? "" : System.Uri.EscapeDataString(RoleName))+"&Description=" + (Description==null? "" : System.Uri.EscapeDataString(Description))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the metadata document for an existing SAML provider resource object.</p> <note> <p>This operation requires <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4</a>.</p> </note>
		/// GET_UpdateSAMLProvider #Action=UpdateSAMLProvider
		/// </summary>
		/// <param name="SAMLMetadataDocument">An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.</param>
		/// <param name="SAMLProviderArn"><p>The Amazon Resource Name (ARN) of the SAML provider to update.</p> <p>For more information about ARNs, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>.</p></param>
		/// <returns>Success</returns>
		public async Task GET_UpdateSAMLProviderAsync(string SAMLMetadataDocument, string SAMLProviderArn, GET_UpdateSAMLProviderAction Action, GET_UpdateSAMLProviderVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateSAMLProvider?SAMLMetadataDocument=" + (SAMLMetadataDocument==null? "" : System.Uri.EscapeDataString(SAMLMetadataDocument))+"&SAMLProviderArn=" + (SAMLProviderArn==null? "" : System.Uri.EscapeDataString(SAMLProviderArn))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Sets the status of an IAM user's SSH public key to active or inactive. SSH public keys that are inactive cannot be used for authentication. This operation can be used to disable a user's SSH public key as part of a key rotation work flow.</p> <p>The SSH public key affected by this operation is used only for authenticating the associated IAM user to an CodeCommit repository. For more information about using SSH keys to authenticate to an CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up CodeCommit for SSH connections</a> in the <i>CodeCommit User Guide</i>.</p>
		/// GET_UpdateSSHPublicKey #Action=UpdateSSHPublicKey
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user associated with the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="SSHPublicKeyId"><p>The unique identifier for the SSH public key.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p></param>
		/// <param name="Status">The status to assign to the SSH public key. <code>Active</code> means that the key can be used for authentication with an CodeCommit repository. <code>Inactive</code> means that the key cannot be used.</param>
		/// <returns>Success</returns>
		public async Task GET_UpdateSSHPublicKeyAsync(string UserName, string SSHPublicKeyId, StatusType Status, GET_UpdateSSHPublicKeyAction Action, GET_UpdateSSHPublicKeyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateSSHPublicKey?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&SSHPublicKeyId=" + (SSHPublicKeyId==null? "" : System.Uri.EscapeDataString(SSHPublicKeyId))+"&Status=" + Status+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the name and/or the path of the specified server certificate stored in IAM.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with server certificates</a> in the <i>IAM User Guide</i>. This topic also includes a list of Amazon Web Services services that can use the server certificates that you manage with IAM.</p> <important> <p>You should understand the implications of changing a server certificate's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs_manage.html#RenamingServerCerts">Renaming a server certificate</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p>The person making the request (the principal), must have permission to change the server certificate with the old name and the new name. For example, to change the certificate named <code>ProductionCert</code> to <code>ProdCert</code>, the principal must have a policy that allows them to update both certificates. If the principal has permission to update the <code>ProductionCert</code> group, but not the <code>ProdCert</code> certificate, then the update fails. For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html">Access management</a> in the <i>IAM User Guide</i>.</p> </note>
		/// GET_UpdateServerCertificate #Action=UpdateServerCertificate
		/// </summary>
		/// <param name="ServerCertificateName"><p>The name of the server certificate that you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="NewPath"><p>The new path for the server certificate. Include this only if you are updating the server certificate's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="NewServerCertificateName"><p>The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <returns>Success</returns>
		public async Task GET_UpdateServerCertificateAsync(string ServerCertificateName, string NewPath, string NewServerCertificateName, GET_UpdateServerCertificateAction Action, GET_UpdateServerCertificateVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateServerCertificate?ServerCertificateName=" + (ServerCertificateName==null? "" : System.Uri.EscapeDataString(ServerCertificateName))+"&NewPath=" + (NewPath==null? "" : System.Uri.EscapeDataString(NewPath))+"&NewServerCertificateName=" + (NewServerCertificateName==null? "" : System.Uri.EscapeDataString(NewServerCertificateName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Sets the status of a service-specific credential to <code>Active</code> or <code>Inactive</code>. Service-specific credentials that are inactive cannot be used for authentication to the service. This operation can be used to disable a user's service-specific credential as part of a credential rotation work flow.
		/// GET_UpdateServiceSpecificCredential #Action=UpdateServiceSpecificCredential
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="ServiceSpecificCredentialId"><p>The unique identifier of the service-specific credential.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p></param>
		/// <param name="Status">The status to be assigned to the service-specific credential.</param>
		/// <returns>Success</returns>
		public async Task GET_UpdateServiceSpecificCredentialAsync(string UserName, string ServiceSpecificCredentialId, StatusType Status, GET_UpdateServiceSpecificCredentialAction Action, GET_UpdateServiceSpecificCredentialVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateServiceSpecificCredential?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&ServiceSpecificCredentialId=" + (ServiceSpecificCredentialId==null? "" : System.Uri.EscapeDataString(ServiceSpecificCredentialId))+"&Status=" + Status+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Changes the status of the specified user signing certificate from active to disabled, or vice versa. This operation can be used to disable an IAM user's signing certificate as part of a certificate rotation work flow.</p> <p>If the <code>UserName</code> field is not specified, the user name is determined implicitly based on the Amazon Web Services access key ID used to sign the request. This operation works for access keys under the Amazon Web Services account. Consequently, you can use this operation to manage Amazon Web Services account root user credentials even if the Amazon Web Services account has no associated users.</p>
		/// GET_UpdateSigningCertificate #Action=UpdateSigningCertificate
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user the signing certificate belongs to.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="CertificateId"><p>The ID of the signing certificate you want to update.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters that can consist of any upper or lowercased letter or digit.</p></param>
		/// <param name="Status"> The status you want to assign to the certificate. <code>Active</code> means that the certificate can be used for programmatic calls to Amazon Web Services <code>Inactive</code> means that the certificate cannot be used.</param>
		/// <returns>Success</returns>
		public async Task GET_UpdateSigningCertificateAsync(string UserName, string CertificateId, StatusType Status, GET_UpdateSigningCertificateAction Action, GET_UpdateSigningCertificateVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateSigningCertificate?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&CertificateId=" + (CertificateId==null? "" : System.Uri.EscapeDataString(CertificateId))+"&Status=" + Status+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Updates the name and/or the path of the specified IAM user.</p> <important> <p> You should understand the implications of changing an IAM user's path or name. For more information, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_users_manage.html#id_users_renaming">Renaming an IAM user</a> and <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_groups_manage_rename.html">Renaming an IAM group</a> in the <i>IAM User Guide</i>.</p> </important> <note> <p> To change a user name, the requester must have appropriate permissions on both the source object and the target object. For example, to change Bob to Robert, the entity making the request must have permission on Bob and Robert, or must have permission on all (*). For more information about permissions, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/PermissionsAndPolicies.html">Permissions and policies</a>. </p> </note>
		/// GET_UpdateUser #Action=UpdateUser
		/// </summary>
		/// <param name="UserName"><p>Name of the user to update. If you're changing the name of the user, this is the original user name.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="NewPath"><p>New path for the IAM user. Include this parameter only if you're changing the user's path.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p></param>
		/// <param name="NewUserName"><p>New name for the user. Include this parameter only if you're changing the user's name.</p> <p>IAM user, group, role, and policy names must be unique within the account. Names are not distinguished by case. For example, you cannot create resources named both "MyResource" and "myresource".</p></param>
		/// <returns>Success</returns>
		public async Task GET_UpdateUserAsync(string UserName, string NewPath, string NewUserName, GET_UpdateUserAction Action, GET_UpdateUserVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UpdateUser?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&NewPath=" + (NewPath==null? "" : System.Uri.EscapeDataString(NewPath))+"&NewUserName=" + (NewUserName==null? "" : System.Uri.EscapeDataString(NewUserName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Uploads an SSH public key and associates it with the specified IAM user.</p> <p>The SSH public key uploaded by this operation can be used only for authenticating the associated IAM user to an CodeCommit repository. For more information about using SSH keys to authenticate to an CodeCommit repository, see <a href="https://docs.aws.amazon.com/codecommit/latest/userguide/setting-up-credentials-ssh.html">Set up CodeCommit for SSH connections</a> in the <i>CodeCommit User Guide</i>.</p>
		/// GET_UploadSSHPublicKey #Action=UploadSSHPublicKey
		/// </summary>
		/// <param name="UserName"><p>The name of the IAM user to associate the SSH public key with.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="SSHPublicKeyBody"><p>The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The minimum bit-length of the public key is 2048 bits. For example, you can generate a 2048-bit key, and the resulting PEM file is 1679 bytes long.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_UploadSSHPublicKeyAsync(string UserName, string SSHPublicKeyBody, GET_UploadSSHPublicKeyAction Action, GET_UploadSSHPublicKeyVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UploadSSHPublicKey?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&SSHPublicKeyBody=" + (SSHPublicKeyBody==null? "" : System.Uri.EscapeDataString(SSHPublicKeyBody))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Uploads a server certificate entity for the Amazon Web Services account. The server certificate entity includes a public key certificate, a private key, and an optional certificate chain, which should all be PEM-encoded.</p> <p>We recommend that you use <a href="https://docs.aws.amazon.com/acm/">Certificate Manager</a> to provision, manage, and deploy your server certificates. With ACM you can request a certificate, deploy it to Amazon Web Services resources, and let ACM handle certificate renewals for you. Certificates provided by ACM are free. For more information about using ACM, see the <a href="https://docs.aws.amazon.com/acm/latest/userguide/">Certificate Manager User Guide</a>.</p> <p>For more information about working with server certificates, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Working with server certificates</a> in the <i>IAM User Guide</i>. This topic includes a list of Amazon Web Services services that can use the server certificates that you manage with IAM.</p> <p>For information about the number of server certificates you can upload, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_iam-quotas.html">IAM and STS quotas</a> in the <i>IAM User Guide</i>.</p> <note> <p>Because the body of the public key certificate, private key, and the certificate chain can be large, you should use POST rather than GET when calling <code>UploadServerCertificate</code>. For information about setting up signatures and authorization through the API, see <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing Amazon Web Services API requests</a> in the <i>Amazon Web Services General Reference</i>. For general information about using the Query API with IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/programming.html">Calling the API by making HTTP query requests</a> in the <i>IAM User Guide</i>.</p> </note>
		/// GET_UploadServerCertificate #Action=UploadServerCertificate
		/// </summary>
		/// <param name="Path"><p>The path for the server certificate. For more information about paths, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/Using_Identifiers.html">IAM identifiers</a> in the <i>IAM User Guide</i>.</p> <p>This parameter is optional. If it is not included, it defaults to a slash (/). This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes. In addition, it can contain any ASCII character from the ! (<code>\u0021</code>) through the DEL character (<code>\u007F</code>), including most punctuation characters, digits, and upper and lowercased letters.</p> <note> <p> If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the <code>path</code> parameter. The path must begin with <code>/cloudfront</code> and must include a trailing slash (for example, <code>/cloudfront/test/</code>).</p> </note></param>
		/// <param name="ServerCertificateName"><p>The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="CertificateBody"><p>The contents of the public key certificate in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <param name="PrivateKey"><p>The contents of the private key in PEM-encoded format.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <param name="CertificateChain"><p>The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <param name="Tags"><p>A list of tags that you want to attach to the new IAM server certificate resource. Each tag consists of a key name and an associated value. For more information about tagging, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_tags.html">Tagging IAM resources</a> in the <i>IAM User Guide</i>.</p> <note> <p>If any one of the tags is invalid or if you exceed the allowed maximum number of tags, then the entire request fails and the resource is not created.</p> </note></param>
		/// <returns>Success</returns>
		public async Task GET_UploadServerCertificateAsync(string Path, string ServerCertificateName, string CertificateBody, string PrivateKey, string CertificateChain, Tag[] Tags, GET_UploadServerCertificateAction Action, GET_UploadServerCertificateVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UploadServerCertificate?Path=" + (Path==null? "" : System.Uri.EscapeDataString(Path))+"&ServerCertificateName=" + (ServerCertificateName==null? "" : System.Uri.EscapeDataString(ServerCertificateName))+"&CertificateBody=" + (CertificateBody==null? "" : System.Uri.EscapeDataString(CertificateBody))+"&PrivateKey=" + (PrivateKey==null? "" : System.Uri.EscapeDataString(PrivateKey))+"&CertificateChain=" + (CertificateChain==null? "" : System.Uri.EscapeDataString(CertificateChain))+"&"+string.Join("&", Tags.Select(z => $"Tags={z}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Uploads an X.509 signing certificate and associates it with the specified IAM user. Some Amazon Web Services services require you to use certificates to validate requests that are signed with a corresponding private key. When you upload the certificate, its default status is <code>Active</code>.</p> <p>For information about when you would use an X.509 signing certificate, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html">Managing server certificates in IAM</a> in the <i>IAM User Guide</i>.</p> <p>If the <code>UserName</code> is not specified, the IAM user name is determined implicitly based on the Amazon Web Services access key ID used to sign the request. This operation works for access keys under the Amazon Web Services account. Consequently, you can use this operation to manage Amazon Web Services account root user credentials even if the Amazon Web Services account has no associated users.</p> <note> <p>Because the body of an X.509 certificate can be large, you should use POST rather than GET when calling <code>UploadSigningCertificate</code>. For information about setting up signatures and authorization through the API, see <a href="https://docs.aws.amazon.com/general/latest/gr/signing_aws_api_requests.html">Signing Amazon Web Services API requests</a> in the <i>Amazon Web Services General Reference</i>. For general information about using the Query API with IAM, see <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/IAM_UsingQueryAPI.html">Making query requests</a> in the <i>IAM User Guide</i>.</p> </note>
		/// GET_UploadSigningCertificate #Action=UploadSigningCertificate
		/// </summary>
		/// <param name="UserName"><p>The name of the user the signing certificate is for.</p> <p>This parameter allows (through its <a href="http://wikipedia.org/wiki/regex">regex pattern</a>) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: _+=,.@-</p></param>
		/// <param name="CertificateBody"><p>The contents of the signing certificate.</p> <p>The <a href="http://wikipedia.org/wiki/regex">regex pattern</a> used to validate this parameter is a string of characters consisting of the following:</p> <ul> <li> <p>Any printable ASCII character ranging from the space character (<code>\u0020</code>) through the end of the ASCII character range</p> </li> <li> <p>The printable characters in the Basic Latin and Latin-1 Supplement character set (through <code>\u00FF</code>)</p> </li> <li> <p>The special characters tab (<code>\u0009</code>), line feed (<code>\u000A</code>), and carriage return (<code>\u000D</code>)</p> </li> </ul></param>
		/// <returns>Success</returns>
		public async Task GET_UploadSigningCertificateAsync(string UserName, string CertificateBody, GET_UploadSigningCertificateAction Action, GET_UploadSigningCertificateVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=UploadSigningCertificate?UserName=" + (UserName==null? "" : System.Uri.EscapeDataString(UserName))+"&CertificateBody=" + (CertificateBody==null? "" : System.Uri.EscapeDataString(CertificateBody))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GET_AddClientIDToOpenIDConnectProviderAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AddClientIDToOpenIDConnectProvider = 0,
	}
	
	public enum GET_AddClientIDToOpenIDConnectProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_AddClientIDToOpenIDConnectProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_AddRoleToInstanceProfileAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AddRoleToInstanceProfile = 0,
	}
	
	public enum GET_AddRoleToInstanceProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_AddRoleToInstanceProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_AddUserToGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AddUserToGroup = 0,
	}
	
	public enum GET_AddUserToGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_AddUserToGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_AttachGroupPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachGroupPolicy = 0,
	}
	
	public enum GET_AttachGroupPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_AttachGroupPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_AttachRolePolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachRolePolicy = 0,
	}
	
	public enum GET_AttachRolePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_AttachRolePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_AttachUserPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AttachUserPolicy = 0,
	}
	
	public enum GET_AttachUserPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_AttachUserPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ChangePasswordAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChangePassword = 0,
	}
	
	public enum GET_ChangePasswordVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ChangePasswordVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_CreateAccessKeyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateAccessKey = 0,
	}
	
	public enum GET_CreateAccessKeyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_CreateAccessKeyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_CreateAccountAliasAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateAccountAlias = 0,
	}
	
	public enum GET_CreateAccountAliasVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_CreateAccountAliasVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_CreateGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateGroup = 0,
	}
	
	public enum GET_CreateGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_CreateGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_CreateInstanceProfileAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateInstanceProfile = 0,
	}
	
	public enum GET_CreateInstanceProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_CreateInstanceProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_CreateLoginProfileAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateLoginProfile = 0,
	}
	
	public enum GET_CreateLoginProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_CreateLoginProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_CreateOpenIDConnectProviderAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateOpenIDConnectProvider = 0,
	}
	
	public enum GET_CreateOpenIDConnectProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_CreateOpenIDConnectProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_CreatePolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreatePolicy = 0,
	}
	
	public enum GET_CreatePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_CreatePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_CreatePolicyVersionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreatePolicyVersion = 0,
	}
	
	public enum GET_CreatePolicyVersionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_CreatePolicyVersionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_CreateRoleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateRole = 0,
	}
	
	public enum GET_CreateRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_CreateRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_CreateSAMLProviderAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateSAMLProvider = 0,
	}
	
	public enum GET_CreateSAMLProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_CreateSAMLProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_CreateServiceLinkedRoleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateServiceLinkedRole = 0,
	}
	
	public enum GET_CreateServiceLinkedRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_CreateServiceLinkedRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_CreateServiceSpecificCredentialAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateServiceSpecificCredential = 0,
	}
	
	public enum GET_CreateServiceSpecificCredentialVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_CreateServiceSpecificCredentialVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_CreateUserAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateUser = 0,
	}
	
	public enum GET_CreateUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_CreateUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_CreateVirtualMFADeviceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateVirtualMFADevice = 0,
	}
	
	public enum GET_CreateVirtualMFADeviceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_CreateVirtualMFADeviceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeactivateMFADeviceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeactivateMFADevice = 0,
	}
	
	public enum GET_DeactivateMFADeviceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeactivateMFADeviceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteAccessKeyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteAccessKey = 0,
	}
	
	public enum GET_DeleteAccessKeyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteAccessKeyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteAccountAliasAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteAccountAlias = 0,
	}
	
	public enum GET_DeleteAccountAliasVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteAccountAliasVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteAccountPasswordPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteAccountPasswordPolicy = 0,
	}
	
	public enum GET_DeleteAccountPasswordPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteAccountPasswordPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteGroup = 0,
	}
	
	public enum GET_DeleteGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteGroupPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteGroupPolicy = 0,
	}
	
	public enum GET_DeleteGroupPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteGroupPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteInstanceProfileAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteInstanceProfile = 0,
	}
	
	public enum GET_DeleteInstanceProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteInstanceProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteLoginProfileAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteLoginProfile = 0,
	}
	
	public enum GET_DeleteLoginProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteLoginProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteOpenIDConnectProviderAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteOpenIDConnectProvider = 0,
	}
	
	public enum GET_DeleteOpenIDConnectProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteOpenIDConnectProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeletePolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeletePolicy = 0,
	}
	
	public enum GET_DeletePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeletePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeletePolicyVersionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeletePolicyVersion = 0,
	}
	
	public enum GET_DeletePolicyVersionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeletePolicyVersionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteRoleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteRole = 0,
	}
	
	public enum GET_DeleteRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteRolePermissionsBoundaryAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteRolePermissionsBoundary = 0,
	}
	
	public enum GET_DeleteRolePermissionsBoundaryVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteRolePermissionsBoundaryVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteRolePolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteRolePolicy = 0,
	}
	
	public enum GET_DeleteRolePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteRolePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteSAMLProviderAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteSAMLProvider = 0,
	}
	
	public enum GET_DeleteSAMLProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteSAMLProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteSSHPublicKeyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteSSHPublicKey = 0,
	}
	
	public enum GET_DeleteSSHPublicKeyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteSSHPublicKeyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteServerCertificateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteServerCertificate = 0,
	}
	
	public enum GET_DeleteServerCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteServerCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteServiceLinkedRoleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteServiceLinkedRole = 0,
	}
	
	public enum GET_DeleteServiceLinkedRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteServiceLinkedRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteServiceSpecificCredentialAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteServiceSpecificCredential = 0,
	}
	
	public enum GET_DeleteServiceSpecificCredentialVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteServiceSpecificCredentialVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteSigningCertificateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteSigningCertificate = 0,
	}
	
	public enum GET_DeleteSigningCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteSigningCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteUserAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteUser = 0,
	}
	
	public enum GET_DeleteUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteUserPermissionsBoundaryAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteUserPermissionsBoundary = 0,
	}
	
	public enum GET_DeleteUserPermissionsBoundaryVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteUserPermissionsBoundaryVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteUserPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteUserPolicy = 0,
	}
	
	public enum GET_DeleteUserPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteUserPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DeleteVirtualMFADeviceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteVirtualMFADevice = 0,
	}
	
	public enum GET_DeleteVirtualMFADeviceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DeleteVirtualMFADeviceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DetachGroupPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DetachGroupPolicy = 0,
	}
	
	public enum GET_DetachGroupPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DetachGroupPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DetachRolePolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DetachRolePolicy = 0,
	}
	
	public enum GET_DetachRolePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DetachRolePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_DetachUserPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DetachUserPolicy = 0,
	}
	
	public enum GET_DetachUserPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_DetachUserPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_EnableMFADeviceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EnableMFADevice = 0,
	}
	
	public enum GET_EnableMFADeviceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_EnableMFADeviceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GenerateCredentialReportAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GenerateCredentialReport = 0,
	}
	
	public enum GET_GenerateCredentialReportVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GenerateCredentialReportVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GenerateOrganizationsAccessReportAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GenerateOrganizationsAccessReport = 0,
	}
	
	public enum GET_GenerateOrganizationsAccessReportVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GenerateOrganizationsAccessReportVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GenerateServiceLastAccessedDetailsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GenerateServiceLastAccessedDetails = 0,
	}
	
	public enum GET_GenerateServiceLastAccessedDetailsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GenerateServiceLastAccessedDetailsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetAccessKeyLastUsedAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetAccessKeyLastUsed = 0,
	}
	
	public enum GET_GetAccessKeyLastUsedVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetAccessKeyLastUsedVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetAccountAuthorizationDetailsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetAccountAuthorizationDetails = 0,
	}
	
	public enum GET_GetAccountAuthorizationDetailsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetAccountAuthorizationDetailsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetAccountPasswordPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetAccountPasswordPolicy = 0,
	}
	
	public enum GET_GetAccountPasswordPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetAccountPasswordPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetAccountSummaryAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetAccountSummary = 0,
	}
	
	public enum GET_GetAccountSummaryVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetAccountSummaryVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetContextKeysForCustomPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetContextKeysForCustomPolicy = 0,
	}
	
	public enum GET_GetContextKeysForCustomPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetContextKeysForCustomPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetContextKeysForPrincipalPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetContextKeysForPrincipalPolicy = 0,
	}
	
	public enum GET_GetContextKeysForPrincipalPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetContextKeysForPrincipalPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetCredentialReportAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetCredentialReport = 0,
	}
	
	public enum GET_GetCredentialReportVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetCredentialReportVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetGroup = 0,
	}
	
	public enum GET_GetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetGroupPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetGroupPolicy = 0,
	}
	
	public enum GET_GetGroupPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetGroupPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetInstanceProfileAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetInstanceProfile = 0,
	}
	
	public enum GET_GetInstanceProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetInstanceProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetLoginProfileAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetLoginProfile = 0,
	}
	
	public enum GET_GetLoginProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetLoginProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetMFADeviceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetMFADevice = 0,
	}
	
	public enum GET_GetMFADeviceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetMFADeviceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetOpenIDConnectProviderAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetOpenIDConnectProvider = 0,
	}
	
	public enum GET_GetOpenIDConnectProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetOpenIDConnectProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetOrganizationsAccessReportAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetOrganizationsAccessReport = 0,
	}
	
	public enum GET_GetOrganizationsAccessReportVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetOrganizationsAccessReportVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetPolicy = 0,
	}
	
	public enum GET_GetPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetPolicyVersionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetPolicyVersion = 0,
	}
	
	public enum GET_GetPolicyVersionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetPolicyVersionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetRoleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetRole = 0,
	}
	
	public enum GET_GetRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetRolePolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetRolePolicy = 0,
	}
	
	public enum GET_GetRolePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetRolePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetSAMLProviderAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetSAMLProvider = 0,
	}
	
	public enum GET_GetSAMLProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetSAMLProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetSSHPublicKeyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetSSHPublicKey = 0,
	}
	
	public enum GET_GetSSHPublicKeyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetSSHPublicKeyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetServerCertificateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetServerCertificate = 0,
	}
	
	public enum GET_GetServerCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetServerCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetServiceLastAccessedDetailsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetServiceLastAccessedDetails = 0,
	}
	
	public enum GET_GetServiceLastAccessedDetailsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetServiceLastAccessedDetailsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetServiceLastAccessedDetailsWithEntitiesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetServiceLastAccessedDetailsWithEntities = 0,
	}
	
	public enum GET_GetServiceLastAccessedDetailsWithEntitiesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetServiceLastAccessedDetailsWithEntitiesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetServiceLinkedRoleDeletionStatusAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetServiceLinkedRoleDeletionStatus = 0,
	}
	
	public enum GET_GetServiceLinkedRoleDeletionStatusVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetServiceLinkedRoleDeletionStatusVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetUserAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetUser = 0,
	}
	
	public enum GET_GetUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_GetUserPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetUserPolicy = 0,
	}
	
	public enum GET_GetUserPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_GetUserPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListAccessKeysAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListAccessKeys = 0,
	}
	
	public enum GET_ListAccessKeysVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListAccessKeysVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListAccountAliasesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListAccountAliases = 0,
	}
	
	public enum GET_ListAccountAliasesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListAccountAliasesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListAttachedGroupPoliciesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListAttachedGroupPolicies = 0,
	}
	
	public enum GET_ListAttachedGroupPoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListAttachedGroupPoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListAttachedRolePoliciesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListAttachedRolePolicies = 0,
	}
	
	public enum GET_ListAttachedRolePoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListAttachedRolePoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListAttachedUserPoliciesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListAttachedUserPolicies = 0,
	}
	
	public enum GET_ListAttachedUserPoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListAttachedUserPoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListEntitiesForPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListEntitiesForPolicy = 0,
	}
	
	public enum GET_ListEntitiesForPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListEntitiesForPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListGroupPoliciesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListGroupPolicies = 0,
	}
	
	public enum GET_ListGroupPoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListGroupPoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListGroupsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListGroups = 0,
	}
	
	public enum GET_ListGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListGroupsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListGroupsForUserAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListGroupsForUser = 0,
	}
	
	public enum GET_ListGroupsForUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListGroupsForUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListInstanceProfileTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListInstanceProfileTags = 0,
	}
	
	public enum GET_ListInstanceProfileTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListInstanceProfileTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListInstanceProfilesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListInstanceProfiles = 0,
	}
	
	public enum GET_ListInstanceProfilesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListInstanceProfilesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListInstanceProfilesForRoleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListInstanceProfilesForRole = 0,
	}
	
	public enum GET_ListInstanceProfilesForRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListInstanceProfilesForRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListMFADeviceTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListMFADeviceTags = 0,
	}
	
	public enum GET_ListMFADeviceTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListMFADeviceTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListMFADevicesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListMFADevices = 0,
	}
	
	public enum GET_ListMFADevicesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListMFADevicesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListOpenIDConnectProviderTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListOpenIDConnectProviderTags = 0,
	}
	
	public enum GET_ListOpenIDConnectProviderTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListOpenIDConnectProviderTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListOpenIDConnectProvidersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListOpenIDConnectProviders = 0,
	}
	
	public enum GET_ListOpenIDConnectProvidersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListOpenIDConnectProvidersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListPoliciesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListPolicies = 0,
	}
	
	public enum GET_ListPoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListPoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListPoliciesGrantingServiceAccessAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListPoliciesGrantingServiceAccess = 0,
	}
	
	public enum GET_ListPoliciesGrantingServiceAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListPoliciesGrantingServiceAccessVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListPolicyTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListPolicyTags = 0,
	}
	
	public enum GET_ListPolicyTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListPolicyTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListPolicyVersionsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListPolicyVersions = 0,
	}
	
	public enum GET_ListPolicyVersionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListPolicyVersionsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListRolePoliciesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListRolePolicies = 0,
	}
	
	public enum GET_ListRolePoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListRolePoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListRoleTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListRoleTags = 0,
	}
	
	public enum GET_ListRoleTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListRoleTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListRolesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListRoles = 0,
	}
	
	public enum GET_ListRolesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListRolesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListSAMLProviderTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListSAMLProviderTags = 0,
	}
	
	public enum GET_ListSAMLProviderTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListSAMLProviderTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListSAMLProvidersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListSAMLProviders = 0,
	}
	
	public enum GET_ListSAMLProvidersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListSAMLProvidersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListSSHPublicKeysAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListSSHPublicKeys = 0,
	}
	
	public enum GET_ListSSHPublicKeysVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListSSHPublicKeysVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListServerCertificateTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListServerCertificateTags = 0,
	}
	
	public enum GET_ListServerCertificateTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListServerCertificateTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListServerCertificatesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListServerCertificates = 0,
	}
	
	public enum GET_ListServerCertificatesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListServerCertificatesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListServiceSpecificCredentialsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListServiceSpecificCredentials = 0,
	}
	
	public enum GET_ListServiceSpecificCredentialsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListServiceSpecificCredentialsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListSigningCertificatesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListSigningCertificates = 0,
	}
	
	public enum GET_ListSigningCertificatesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListSigningCertificatesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListUserPoliciesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListUserPolicies = 0,
	}
	
	public enum GET_ListUserPoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListUserPoliciesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListUserTagsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListUserTags = 0,
	}
	
	public enum GET_ListUserTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListUserTagsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListUsersAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListUsers = 0,
	}
	
	public enum GET_ListUsersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListUsersVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ListVirtualMFADevicesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListVirtualMFADevices = 0,
	}
	
	public enum GET_ListVirtualMFADevicesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ListVirtualMFADevicesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_PutGroupPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PutGroupPolicy = 0,
	}
	
	public enum GET_PutGroupPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_PutGroupPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_PutRolePermissionsBoundaryAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PutRolePermissionsBoundary = 0,
	}
	
	public enum GET_PutRolePermissionsBoundaryVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_PutRolePermissionsBoundaryVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_PutRolePolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PutRolePolicy = 0,
	}
	
	public enum GET_PutRolePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_PutRolePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_PutUserPermissionsBoundaryAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PutUserPermissionsBoundary = 0,
	}
	
	public enum GET_PutUserPermissionsBoundaryVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_PutUserPermissionsBoundaryVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_PutUserPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PutUserPolicy = 0,
	}
	
	public enum GET_PutUserPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_PutUserPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_RemoveClientIDFromOpenIDConnectProviderAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RemoveClientIDFromOpenIDConnectProvider = 0,
	}
	
	public enum GET_RemoveClientIDFromOpenIDConnectProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_RemoveClientIDFromOpenIDConnectProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_RemoveRoleFromInstanceProfileAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RemoveRoleFromInstanceProfile = 0,
	}
	
	public enum GET_RemoveRoleFromInstanceProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_RemoveRoleFromInstanceProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_RemoveUserFromGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RemoveUserFromGroup = 0,
	}
	
	public enum GET_RemoveUserFromGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_RemoveUserFromGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ResetServiceSpecificCredentialAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResetServiceSpecificCredential = 0,
	}
	
	public enum GET_ResetServiceSpecificCredentialVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ResetServiceSpecificCredentialVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_ResyncMFADeviceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ResyncMFADevice = 0,
	}
	
	public enum GET_ResyncMFADeviceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_ResyncMFADeviceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_SetDefaultPolicyVersionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SetDefaultPolicyVersion = 0,
	}
	
	public enum GET_SetDefaultPolicyVersionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_SetDefaultPolicyVersionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_SetSecurityTokenServicePreferencesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SetSecurityTokenServicePreferences = 0,
	}
	
	public enum GET_SetSecurityTokenServicePreferencesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_SetSecurityTokenServicePreferencesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_SimulateCustomPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SimulateCustomPolicy = 0,
	}
	
	public enum GET_SimulateCustomPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_SimulateCustomPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_SimulatePrincipalPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SimulatePrincipalPolicy = 0,
	}
	
	public enum GET_SimulatePrincipalPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_SimulatePrincipalPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_TagInstanceProfileAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TagInstanceProfile = 0,
	}
	
	public enum GET_TagInstanceProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_TagInstanceProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_TagMFADeviceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TagMFADevice = 0,
	}
	
	public enum GET_TagMFADeviceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_TagMFADeviceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_TagOpenIDConnectProviderAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TagOpenIDConnectProvider = 0,
	}
	
	public enum GET_TagOpenIDConnectProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_TagOpenIDConnectProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_TagPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TagPolicy = 0,
	}
	
	public enum GET_TagPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_TagPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_TagRoleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TagRole = 0,
	}
	
	public enum GET_TagRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_TagRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_TagSAMLProviderAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TagSAMLProvider = 0,
	}
	
	public enum GET_TagSAMLProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_TagSAMLProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_TagServerCertificateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TagServerCertificate = 0,
	}
	
	public enum GET_TagServerCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_TagServerCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_TagUserAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TagUser = 0,
	}
	
	public enum GET_TagUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_TagUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UntagInstanceProfileAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UntagInstanceProfile = 0,
	}
	
	public enum GET_UntagInstanceProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UntagInstanceProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UntagMFADeviceAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UntagMFADevice = 0,
	}
	
	public enum GET_UntagMFADeviceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UntagMFADeviceVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UntagOpenIDConnectProviderAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UntagOpenIDConnectProvider = 0,
	}
	
	public enum GET_UntagOpenIDConnectProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UntagOpenIDConnectProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UntagPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UntagPolicy = 0,
	}
	
	public enum GET_UntagPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UntagPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UntagRoleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UntagRole = 0,
	}
	
	public enum GET_UntagRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UntagRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UntagSAMLProviderAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UntagSAMLProvider = 0,
	}
	
	public enum GET_UntagSAMLProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UntagSAMLProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UntagServerCertificateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UntagServerCertificate = 0,
	}
	
	public enum GET_UntagServerCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UntagServerCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UntagUserAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UntagUser = 0,
	}
	
	public enum GET_UntagUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UntagUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UpdateAccessKeyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateAccessKey = 0,
	}
	
	public enum GET_UpdateAccessKeyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UpdateAccessKeyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UpdateAccountPasswordPolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateAccountPasswordPolicy = 0,
	}
	
	public enum GET_UpdateAccountPasswordPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UpdateAccountPasswordPolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UpdateAssumeRolePolicyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateAssumeRolePolicy = 0,
	}
	
	public enum GET_UpdateAssumeRolePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UpdateAssumeRolePolicyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UpdateGroupAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateGroup = 0,
	}
	
	public enum GET_UpdateGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UpdateGroupVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UpdateLoginProfileAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateLoginProfile = 0,
	}
	
	public enum GET_UpdateLoginProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UpdateLoginProfileVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UpdateOpenIDConnectProviderThumbprintAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateOpenIDConnectProviderThumbprint = 0,
	}
	
	public enum GET_UpdateOpenIDConnectProviderThumbprintVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UpdateOpenIDConnectProviderThumbprintVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UpdateRoleAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateRole = 0,
	}
	
	public enum GET_UpdateRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UpdateRoleVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UpdateRoleDescriptionAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateRoleDescription = 0,
	}
	
	public enum GET_UpdateRoleDescriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UpdateRoleDescriptionVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UpdateSAMLProviderAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateSAMLProvider = 0,
	}
	
	public enum GET_UpdateSAMLProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UpdateSAMLProviderVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UpdateSSHPublicKeyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateSSHPublicKey = 0,
	}
	
	public enum GET_UpdateSSHPublicKeyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UpdateSSHPublicKeyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UpdateServerCertificateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateServerCertificate = 0,
	}
	
	public enum GET_UpdateServerCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UpdateServerCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UpdateServiceSpecificCredentialAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateServiceSpecificCredential = 0,
	}
	
	public enum GET_UpdateServiceSpecificCredentialVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UpdateServiceSpecificCredentialVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UpdateSigningCertificateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateSigningCertificate = 0,
	}
	
	public enum GET_UpdateSigningCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UpdateSigningCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UpdateUserAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UpdateUser = 0,
	}
	
	public enum GET_UpdateUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UpdateUserVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UploadSSHPublicKeyAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadSSHPublicKey = 0,
	}
	
	public enum GET_UploadSSHPublicKeyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UploadSSHPublicKeyVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UploadServerCertificateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadServerCertificate = 0,
	}
	
	public enum GET_UploadServerCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UploadServerCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum GET_UploadSigningCertificateAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UploadSigningCertificate = 0,
	}
	
	public enum GET_UploadSigningCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
	
	public enum POST_UploadSigningCertificateVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2010-05-08")]
		_2010Minus05Minus08 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
