//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get List of Brands
		/// >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).
		/// 
		/// Retrieves general information about all brands of the store. It is mandatory to use at least one query parameter.
		/// 
		/// ## Response body example
		/// 
		/// ```json
		/// {
		/// "data": [
		/// {
		/// "id": "7",
		/// "name": "All For Paws",
		/// "isActive": true,
		/// "createdAt": "2022-01-17T19:43:14.18678Z",
		/// "updatedAt": "2022-01-17T19:43:14.18678Z"
		/// },
		/// {
		/// "id": "1",
		/// "name": "AOC",
		/// "isActive": true,
		/// "createdAt": "2021-08-16T21:13:40.55189Z",
		/// "updatedAt": "2021-08-16T21:13:40.55189Z"
		/// }
		/// ],
		/// "_metadata": {
		/// "total": 18,
		/// "from": 1,
		/// "to": 2,
		/// "orderBy": "name,asc"
		/// }
		/// }
		/// ```
		/// ListBrand api/catalog-seller-portal/brands
		/// </summary>
		/// <param name="q">Search word.</param>
		/// <param name="from">The first page of the interval of the brand list.</param>
		/// <param name="to">The last page of the interval of the brand list.</param>
		/// <param name="orderBy">The order that the list is displayed. You can select `name`, or `updated_at` to select the order criteria. Then you can add `,` , `asc` or `desc` to define the brands order.</param>
		/// <param name="name">Brand name.</param>
		/// <returns>OK</returns>
		public async Task<ListBrandReturn> ListBrandAsync(string q, string from, string to, string orderBy, string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/catalog-seller-portal/brands?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&from=" + (from==null? "" : System.Uri.EscapeDataString(from))+"&to=" + (to==null? "" : System.Uri.EscapeDataString(to))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&name=" + (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListBrandReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Brand
		/// >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).
		/// 
		/// Creates a new brand.
		/// 
		/// ## Request body example
		/// 
		/// ```json
		/// {
		/// "name": "Zwilling",
		/// "isActive": true
		/// }
		/// ```
		/// 
		/// ## Response body example
		/// 
		/// ```json
		/// {
		/// "id": "20",
		/// "name": "Zwilling",
		/// "isActive": true,
		/// "createdAt": "2021-05-17T15:20:36.077253+00:00",
		/// "updatedAt": "2021-01-18T14:41:45.696488+00:00"
		/// }
		/// ```
		/// PostBrand api/catalog-seller-portal/brands
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PostBrandReturn> PostBrandAsync(PostBrandPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/catalog-seller-portal/brands";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PostBrandReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Brand by ID
		/// >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).
		/// 
		/// Retrieves general information about a brand by its ID.
		/// 
		/// ## Response body example
		/// 
		/// ```json
		/// {
		/// "id": "863",
		/// "name": "Zwilling",
		/// "isActive": false,
		/// "createdAt": "2021-01-18T14:41:45.696488+00:00",
		/// "updatedAt": "2021-01-18T14:41:45.696488+00:00"
		/// }
		/// ```
		/// GetBrand api/catalog-seller-portal/brands/{brandId}
		/// </summary>
		/// <param name="brandId">Brand unique identifier number.</param>
		/// <returns>OK</returns>
		public async Task<GetBrandReturn> GetBrandAsync(string brandId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/catalog-seller-portal/brands/"+ (brandId==null? "" : System.Uri.EscapeDataString(brandId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetBrandReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Brand
		/// >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).
		/// 
		/// Updates an existing brand.
		/// 
		/// ## Request body example
		/// 
		/// ```json
		/// {
		/// "id": "20",
		/// "name": "Zwilling",
		/// "isActive": true
		/// }
		/// ```
		/// PutBrand api/catalog-seller-portal/brands/{brandId}
		/// </summary>
		/// <param name="brandId">Brand unique identifier number.</param>
		public async Task PutBrandAsync(string brandId, PutBrandPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/catalog-seller-portal/brands/"+ (brandId==null? "" : System.Uri.EscapeDataString(brandId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Category Tree
		/// >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).
		/// 
		/// Retrieves general information about the category tree from the store.
		/// 
		/// ## Response body example
		/// 
		/// ```json
		/// {
		/// "roots": [
		/// {
		/// "value": {
		/// "id": "2",
		/// "name": "Departamento Artesanato",
		/// "isActive": true
		/// },
		/// "children": [
		/// {
		/// "value": {
		/// "id": "3",
		/// "name": "Artesanato de Barro",
		/// "isActive": false
		/// },
		/// "children": [
		/// {
		/// "value": {
		/// "id": "4",
		/// "name": "Artesanato de Barro Vermelho",
		/// "isActive": false
		/// },
		/// "children": []
		/// }
		/// ]
		/// }
		/// ]
		/// },
		/// {
		/// "value": {
		/// "id": "5",
		/// "name": "Perfumes",
		/// "isActive": false
		/// },
		/// "children": [
		/// {
		/// "value": {
		/// "id": "6",
		/// "name": "Perfume Feminino",
		/// "isActive": false
		/// },
		/// "children": []
		/// },
		/// {
		/// "value": {
		/// "id": "7",
		/// "name": "Perfume Masculino",
		/// "isActive": false,
		/// "displayOnMenu": false,
		/// "score": 0,
		/// "filterByBrand": false,
		/// "isClickable": false
		/// },
		/// "children": []
		/// }
		/// ]
		/// }
		/// ],
		/// "createdAt": "2021-08-16T20:57:13.070813Z",
		/// "updatedAt": "2022-07-07T14:24:56.416337Z"
		/// }
		/// ```
		/// GetCategoryTree api/catalog-seller-portal/category-tree
		/// </summary>
		/// <param name="depth">Category tree level.</param>
		/// <returns>OK</returns>
		public async Task<GetCategoryTreeReturn> GetCategoryTreeAsync(int depth, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/catalog-seller-portal/category-tree?depth="+depth;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetCategoryTreeReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Category Tree
		/// >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).
		/// 
		/// Updates the existing categories in the category tree.
		/// 
		/// ## Request body example
		/// 
		/// ```json
		/// {
		/// "roots": [
		/// {
		/// "value": {
		/// "id": "2",
		/// "name": "Departamento Artesanato",
		/// "isActive": true
		/// },
		/// "children": [
		/// {
		/// "value": {
		/// "id": "3",
		/// "name": "Artesanato de Barro",
		/// "isActive": false
		/// },
		/// "children": [
		/// {
		/// "value": {
		/// "id": "4",
		/// "name": "Artesanato de Barro Vermelho",
		/// "isActive": false
		/// },
		/// "children": []
		/// }
		/// ]
		/// }
		/// ]
		/// },
		/// {
		/// "value": {
		/// "id": "5",
		/// "name": "Perfumes",
		/// "isActive": false
		/// },
		/// "children": [
		/// {
		/// "value": {
		/// "id": "6",
		/// "name": "Perfume Feminino",
		/// "isActive": false
		/// },
		/// "children": []
		/// },
		/// {
		/// "value": {
		/// "id": "7",
		/// "name": "Perfume Masculino",
		/// "isActive": false,
		/// "displayOnMenu": false,
		/// "score": 0,
		/// "filterByBrand": false,
		/// "isClickable": false
		/// },
		/// "children": []
		/// }
		/// ]
		/// }
		/// ]
		/// }
		/// ```
		/// UpdateCategoryTree api/catalog-seller-portal/category-tree
		/// </summary>
		/// <param name="requestBody">OK</param>
		public async Task UpdateCategoryTreeAsync(UpdateCategoryTreePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/catalog-seller-portal/category-tree";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Category
		/// >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).
		/// 
		/// Creates a new category.
		/// 
		/// ## Request body example
		/// 
		/// ```json
		/// {
		/// "parentId": "567",
		/// "Name": "Beauty"
		/// }
		/// ```
		/// 
		/// ## Response body example
		/// 
		/// ```json
		/// {
		/// "value": {
		/// "id": "1",
		/// "name": "Beauty",
		/// "isActive": false
		/// },
		/// "children": [
		/// {
		/// "value": {
		/// "id": "2",
		/// "name": "Perfumes",
		/// "isActive": false
		/// }
		/// }
		/// ]
		/// }
		/// ```
		/// CreateCategory api/catalog-seller-portal/category-tree/categories
		/// </summary>
		/// <returns>OK</returns>
		public async Task<CreateCategoryReturn> CreateCategoryAsync(CreateCategoryPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/catalog-seller-portal/category-tree/categories";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CreateCategoryReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Category by ID
		/// >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).
		/// 
		/// Retrieves general information about a category by its ID.
		/// 
		/// ## Response body example
		/// 
		/// ```json
		/// {
		/// "value": {
		/// "id": "1",
		/// "name": "sandboxintegracao",
		/// "isActive": false
		/// },
		/// "children": [
		/// {
		/// "value": {
		/// "id": "2",
		/// "name": "Perfumes",
		/// "isActive": false
		/// }
		/// }
		/// ]
		/// }
		/// ```
		/// Getbyid api/catalog-seller-portal/category-tree/categories/{categoryId}
		/// </summary>
		/// <param name="categoryId">Category unique identifier number.</param>
		/// <returns>OK</returns>
		public async Task<GetbyidReturn> GetbyidAsync(string categoryId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/catalog-seller-portal/category-tree/categories/"+ (categoryId==null? "" : System.Uri.EscapeDataString(categoryId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetbyidReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create Product
		/// >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).
		/// 
		/// Creates a new product and its SKUs.
		/// 
		/// 
		/// ## Request body example
		/// 
		/// ```json
		/// {
		/// "status": "active",
		/// "name": "VTEX 10 Shirt",
		/// "description": "Shirt number 10 by VTEX.",
		/// "brandId": "1",
		/// "categoryIds": [
		/// "732"
		/// ],
		/// "specs": [
		/// {
		/// "name": "Color",
		/// "values": [
		/// "Black",
		/// "White"
		/// ]
		/// },
		/// {
		/// "name": "Size",
		/// "values": [
		/// "S",
		/// "M",
		/// "L"
		/// ]
		/// }
		/// ],
		/// "attributes": [
		/// {
		/// "name": "Fabric",
		/// "value": "Cotton"
		/// },
		/// {
		/// "name": "Gender",
		/// "value": "Feminine"
		/// }
		/// ],
		/// "slug": "/vtex-shirt",
		/// "images": [
		/// {
		/// "id": "vtex_logo.jpg",
		/// "url": "https://vtxleo7778.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg",
		/// "alt": "VTEX"
		/// }
		/// ],
		/// "skus": [
		/// {
		/// "name": "VTEX Shirt Black Size S",
		/// "externalId": "1909621862",
		/// "manufacturerCode": "1234567",
		/// "isActive": true,
		/// "weight": 300,
		/// "dimensions": {
		/// "width": 1.5,
		/// "height": 2.1,
		/// "length": 1.6
		/// },
		/// "specs": [
		/// {
		/// "name": "Color",
		/// "value": "Black"
		/// },
		/// {
		/// "name": "Size",
		/// "value": "S"
		/// }
		/// ],
		/// "images": [
		/// "vtex_logo.jpg"
		/// ]
		/// },
		/// {
		/// "name": "VTEX Shirt White Size L",
		/// "externalId": "1909621862",
		/// "manufacturerCode": "1234568",
		/// "isActive": true,
		/// "weight": 300,
		/// "dimensions": {
		/// "width": 1.5,
		/// "height": 2.1,
		/// "length": 1.6
		/// },
		/// "specs": [
		/// {
		/// "name": "Color",
		/// "value": "White"
		/// },
		/// {
		/// "name": "Size",
		/// "value": "L"
		/// }
		/// ],
		/// "images": [
		/// "vtex_logo.jpg"
		/// ]
		/// }
		/// ],
		/// "origin": "vtxleo7778",
		/// "transportModal": "110",
		/// "taxCode": "234"
		/// }
		/// ```
		/// 
		/// ## Response body example
		/// 
		/// ```json
		/// {
		/// "id": "189371",
		/// "status": "active",
		/// "name": "VTEX 10 Shirt",
		/// "brandId": "1",
		/// "brandName": "AOC",
		/// "categoryIds": [
		/// "732"
		/// ],
		/// "categoryNames": [
		/// "/Men/Acessories/"
		/// ],
		/// "specs": [
		/// {
		/// "name": "Color",
		/// "values": [
		/// "Black",
		/// "White"
		/// ]
		/// },
		/// {
		/// "name": "Size",
		/// "values": [
		/// "S",
		/// "M",
		/// "L"
		/// ]
		/// }
		/// ],
		/// "attributes": [
		/// {
		/// "name": "Fabric",
		/// "value": "Cotton"
		/// },
		/// {
		/// "name": "Gender",
		/// "value": "Feminine"
		/// }
		/// ],
		/// "slug": "/vtex-shirt",
		/// "images": [
		/// {
		/// "id": "vtex_logo.jpg",
		/// "url": "https://vtxleo7778.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg",
		/// "alt": "VTEX"
		/// }
		/// ],
		/// "skus": [
		/// {
		/// "id": "182907",
		/// "name": "VTEX Shirt Black Size S",
		/// "externalId": "1909621862",
		/// "manufacturerCode": "1234567",
		/// "isActive": true,
		/// "weight": 300,
		/// "dimensions": {
		/// "width": 1.5,
		/// "height": 2.1,
		/// "length": 1.6
		/// },
		/// "specs": [
		/// {
		/// "name": "Color",
		/// "value": "Black"
		/// },
		/// {
		/// "name": "Size",
		/// "value": "S"
		/// }
		/// ],
		/// "images": [
		/// "vtex_logo.jpg"
		/// ]
		/// },
		/// {
		/// "id": "182908",
		/// "name": "VTEX Shirt White Size L",
		/// "externalId": "1909621862",
		/// "manufacturerCode": "1234568",
		/// "isActive": true,
		/// "weight": 300,
		/// "dimensions": {
		/// "width": 1.5,
		/// "height": 2.1,
		/// "length": 1.6
		/// },
		/// "specs": [
		/// {
		/// "name": "Color",
		/// "value": "White"
		/// },
		/// {
		/// "name": "Size",
		/// "value": "L"
		/// }
		/// ],
		/// "images": [
		/// "vtex_logo.jpg"
		/// ]
		/// }
		/// ],
		/// "origin": "vtxleo7778",
		/// "transportModal": "110",
		/// "taxCode": "234",
		/// "createdAt": "2022-11-01T14:15:54.262702Z",
		/// "updatedAt": "2022-11-01T14:15:54.262702Z"
		/// }
		/// ```
		/// PostProduct api/catalog-seller-portal/products
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PostProductReturn> PostProductAsync(PostProductPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/catalog-seller-portal/products";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PostProductReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Product by external ID,  SKU ID, SKU external ID or slug
		/// >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).
		/// 
		/// Retrieves general information about a product by its external ID, SKU ID, SKU external ID or product slug. The response also has information about the product's SKUs.
		/// ## Response body example
		/// 
		/// ```json
		/// {
		/// "id": "189371",
		/// "status": "active",
		/// "name": "VTEX 10 Shirt",
		/// "brandId": "1",
		/// "brandName": "AOC",
		/// "categoryIds": [
		/// "732"
		/// ],
		/// "categoryNames": [
		/// "/sandboxintegracao/AcessÃ³rios/"
		/// ],
		/// "specs": [
		/// {
		/// "name": "Color",
		/// "values": [
		/// "Black",
		/// "White"
		/// ]
		/// },
		/// {
		/// "name": "Size",
		/// "values": [
		/// "S",
		/// "M",
		/// "L"
		/// ]
		/// }
		/// ],
		/// "attributes": [
		/// {
		/// "name": "Fabric",
		/// "value": "Cotton"
		/// },
		/// {
		/// "name": "Gender",
		/// "value": "Feminine"
		/// }
		/// ],
		/// "slug": "/vtex-shirt",
		/// "images": [
		/// {
		/// "id": "vtex_logo.jpg",
		/// "url": "https://vtxleo7778.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg",
		/// "alt": "VTEX"
		/// }
		/// ],
		/// "skus": [
		/// {
		/// "id": "182907",
		/// "name": "VTEX Shirt Black Size S",
		/// "externalId": "1909621862",
		/// "manufacturerCode": "1234567",
		/// "isActive": true,
		/// "weight": 300,
		/// "dimensions": {
		/// "width": 1.5,
		/// "height": 2.1,
		/// "length": 1.6
		/// },
		/// "specs": [
		/// {
		/// "name": "Color",
		/// "value": "Black"
		/// },
		/// {
		/// "name": "Size",
		/// "value": "S"
		/// }
		/// ],
		/// "images": [
		/// "vtex_logo.jpg"
		/// ]
		/// },
		/// {
		/// "id": "182908",
		/// "name": "VTEX Shirt White Size L",
		/// "externalId": "1909621862",
		/// "manufacturerCode": "1234568",
		/// "isActive": true,
		/// "weight": 300,
		/// "dimensions": {
		/// "width": 1.5,
		/// "height": 2.1,
		/// "length": 1.6
		/// },
		/// "specs": [
		/// {
		/// "name": "Color",
		/// "value": "White"
		/// },
		/// {
		/// "name": "Size",
		/// "value": "L"
		/// }
		/// ],
		/// "images": [
		/// "vtex_logo.jpg"
		/// ]
		/// }
		/// ],
		/// "transportModal": "123",
		/// "taxCode": "100",
		/// "origin": "vtxleo7778",
		/// "createdAt": "2022-10-31T16:28:25.578067Z",
		/// "updatedAt": "2022-10-31T16:28:25.578067Z"
		/// }
		/// ```
		/// GetProductQuery api/catalog-seller-portal/products/{param}
		/// </summary>
		/// <param name="param">This part of the path must follow this format: `{param}={value}`. Replace `{param}` with the name of the parameter used to fetch a product, which can be one of the following: `external-id` (product reference unique identifier number in the store), `sku-id` (SKU unique identifier number), `sku-external-id` (SKU reference unique identifier number in the store) or `slug` (reference of the product in the URL of the store). Replace `{value}` with the value of the selected param. Make sure there is a `=` between them.</param>
		/// <returns>OK</returns>
		public async Task<GetProductQueryReturn> GetProductQueryAsync(string param, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/catalog-seller-portal/products/"+ (param==null? "" : System.Uri.EscapeDataString(param));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetProductQueryReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Product by ID
		/// >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).
		/// 
		/// Retrieves general information about a product by its ID. The response also has information about the product's SKUs.
		/// 
		/// ## Response body example
		/// 
		/// ```json
		/// {
		/// "id": "189371",
		/// "status": "active",
		/// "name": "VTEX 10 Shirt",
		/// "brandId": "1",
		/// "brandName": "AOC",
		/// "categoryIds": [
		/// "732"
		/// ],
		/// "categoryNames": [
		/// "/sandboxintegracao/AcessÃ³rios/"
		/// ],
		/// "specs": [
		/// {
		/// "name": "Color",
		/// "values": [
		/// "Black",
		/// "White"
		/// ]
		/// },
		/// {
		/// "name": "Size",
		/// "values": [
		/// "S",
		/// "M",
		/// "L"
		/// ]
		/// }
		/// ],
		/// "attributes": [
		/// {
		/// "name": "Fabric",
		/// "value": "Cotton"
		/// },
		/// {
		/// "name": "Gender",
		/// "value": "Feminine"
		/// }
		/// ],
		/// "slug": "/vtex-shirt",
		/// "images": [
		/// {
		/// "id": "vtex_logo.jpg",
		/// "url": "https://vtxleo7778.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg",
		/// "alt": "VTEX"
		/// }
		/// ],
		/// "skus": [
		/// {
		/// "id": "182907",
		/// "externalId": "1909621862",
		/// "manufacturerCode": "1234567",
		/// "isActive": true,
		/// "weight": 300,
		/// "dimensions": {
		/// "width": 1.5,
		/// "height": 2.1,
		/// "length": 1.6
		/// },
		/// "specs": [
		/// {
		/// "name": "Color",
		/// "value": "Black"
		/// },
		/// {
		/// "name": "Size",
		/// "value": "S"
		/// }
		/// ],
		/// "images": [
		/// "vtex_logo.jpg"
		/// ]
		/// },
		/// {
		/// "id": "182908",
		/// "externalId": "1909621862",
		/// "manufacturerCode": "1234568",
		/// "isActive": true,
		/// "weight": 300,
		/// "dimensions": {
		/// "width": 1.5,
		/// "height": 2.1,
		/// "length": 1.6
		/// },
		/// "specs": [
		/// {
		/// "name": "Color",
		/// "value": "White"
		/// },
		/// {
		/// "name": "Size",
		/// "value": "L"
		/// }
		/// ],
		/// "images": [
		/// "vtex_logo.jpg"
		/// ]
		/// }
		/// ],
		/// "transportModal": "123",
		/// "taxCode": "100",
		/// "origin": "vtxleo7778",
		/// "createdAt": "2022-10-31T16:28:25.578067Z",
		/// "updatedAt": "2022-10-31T17:09:12.639088Z"
		/// }
		/// ```
		/// GetProduct api/catalog-seller-portal/products/{productId}
		/// </summary>
		/// <param name="productId">Product unique identifier number.</param>
		/// <returns>OK</returns>
		public async Task<GetProductReturn> GetProductAsync(string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/catalog-seller-portal/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetProductReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Product
		/// >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).
		/// 
		/// Updates an existing product and its SKUs.
		/// 
		/// ## Request body example
		/// 
		/// ```json
		/// {
		/// "id": "189371",
		/// "status": "active",
		/// "name": "VTEX 10 Shirt",
		/// "description": "Shirt number 10 by VTEX.",
		/// "brandId": "1",
		/// "categoryIds": [
		/// "732"
		/// ],
		/// "specs": [
		/// {
		/// "name": "Color",
		/// "values": [
		/// "Black",
		/// "White"
		/// ]
		/// },
		/// {
		/// "name": "Size",
		/// "values": [
		/// "S",
		/// "M",
		/// "L"
		/// ]
		/// }
		/// ],
		/// "attributes": [
		/// {
		/// "name": "Fabric",
		/// "value": "Cotton"
		/// },
		/// {
		/// "name": "Gender",
		/// "value": "Feminine"
		/// }
		/// ],
		/// "slug": "/vtex-shirt",
		/// "transportModal": null,
		/// "taxCode": null,
		/// "images": [
		/// {
		/// "id": "vtex_logo.jpg",
		/// "url": "https://vtxleo7778.vtexassets.com/assets/vtex.catalog-images/products/vtex_logo.jpg",
		/// "alt": "VTEX"
		/// }
		/// ],
		/// "skus": [
		/// {
		/// "name": "VTEX Shirt Black Size S",
		/// "externalId": "1909621862",
		/// "manufacturerCode": "1234567",
		/// "isActive": true,
		/// "weight": 300,
		/// "dimensions": {
		/// "width": 1.5,
		/// "height": 2.1,
		/// "length": 1.6
		/// },
		/// "specs": [
		/// {
		/// "name": "Color",
		/// "value": "Black"
		/// },
		/// {
		/// "name": "Size",
		/// "value": "S"
		/// }
		/// ],
		/// "images": [
		/// "vtex_logo.jpg"
		/// ]
		/// },
		/// {
		/// "name": "VTEX Shirt White Size L",
		/// "externalId": "1909621862",
		/// "manufacturerCode": "1234568",
		/// "isActive": true,
		/// "weight": 300,
		/// "dimensions": {
		/// "width": 1.5,
		/// "height": 2.1,
		/// "length": 1.6
		/// },
		/// "specs": [
		/// {
		/// "name": "Color",
		/// "value": "White"
		/// },
		/// {
		/// "name": "Size",
		/// "value": "L"
		/// }
		/// ],
		/// "images": [
		/// "vtex_logo.jpg"
		/// ]
		/// }
		/// ],
		/// "origin": "vtxleo7778"
		/// }
		/// ```
		/// PutProduct api/catalog-seller-portal/products/{productId}
		/// </summary>
		/// <param name="productId">Product unique identifier number.</param>
		public async Task PutProductAsync(string productId, PutProductPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/catalog-seller-portal/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get Product Description by Product ID
		/// >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).
		/// 
		/// Retrieves the description of a product given a Product ID.
		/// 
		/// ## Response body example
		/// 
		/// ```json
		/// {
		/// "productId": "61",
		/// "description": "Beautifully handmade laptop case/sleeve made in the Nepal Himalaya. It can be slipped inside your backpack or carried alone with space for all your work bits and pieces!",
		/// "createdAt": "2022-10-10T19:18:45.612317Z",
		/// "updatedAt": "2022-10-11T18:12:58.825544Z"
		/// }
		/// ```
		/// GetProductDescription api/catalog-seller-portal/products/{productId}/description
		/// </summary>
		/// <param name="productId">Product unique identifier number.</param>
		/// <returns>OK</returns>
		public async Task<GetProductDescriptionReturn> GetProductDescriptionAsync(string productId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/catalog-seller-portal/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/description";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetProductDescriptionReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Update Product Description by Product ID
		/// >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).
		/// 
		/// Updates the description of a product given a Product ID.
		/// 
		/// ## Request body example
		/// 
		/// ```json
		/// {
		/// "productId": "71",
		/// "description": "White shirt."
		/// }
		/// ```
		/// PutProductDescription api/catalog-seller-portal/products/{productId}/description
		/// </summary>
		/// <param name="productId">Product unique identifier number.</param>
		public async Task PutProductDescriptionAsync(string productId, PutProductDescriptionPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/catalog-seller-portal/products/"+ (productId==null? "" : System.Uri.EscapeDataString(productId))+"/description";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search for SKU
		/// >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).
		/// 
		/// Retrieves general information about an SKU taking into consideration the defined search criteria. It is mandatory to use at least one query parameter.
		/// 
		/// ## Response body example
		/// 
		/// ```json
		/// {
		/// "data": [
		/// {
		/// "id": "2",
		/// "productId": "2",
		/// "externalId": "1909621862"
		/// }
		/// ],
		/// "_metadata": {
		/// "total": 1,
		/// "from": 1,
		/// "to": 15
		/// }
		/// }
		/// ```
		/// SearchSKU api/catalog-seller-portal/skus/_search
		/// </summary>
		/// <param name="from">The first page of the interval of the product list.</param>
		/// <param name="to">The last page of the interval of the product list.</param>
		/// <param name="id">SKU unique idenfier number.</param>
		/// <param name="externalid">SKU reference unique identifier number in the store.</param>
		/// <returns>OK</returns>
		public async Task<SearchSKUReturn> SearchSKUAsync(string from, string to, int id, int externalid, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/catalog-seller-portal/skus/_search?from=" + (from==null? "" : System.Uri.EscapeDataString(from))+"&to=" + (to==null? "" : System.Uri.EscapeDataString(to))+"&id="+id+"&externalid="+externalid;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchSKUReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get List of SKUs
		/// >ðŸ“˜ This API is part of the [Seller Portal Catalog](https://help.vtex.com/en/tutorial/how-the-seller-portal-catalog-works--7pMB6YOt6YQDQQbzFB4Pxp). This functionality is in the Beta stage and can be discontinued at any moment at VTEX's discretion. VTEX will not be responsible for any instabilities caused by its use or discontinuity. If you have any questions, please contact [our Support Center](https://support.vtex.com/hc/en-us/requests).
		/// 
		/// Retrieves general information about all SKUs.
		/// 
		/// ## Response body example
		/// 
		/// ```json
		/// {
		/// "data": [
		/// "1",
		/// "10",
		/// "11",
		/// "12",
		/// "13",
		/// "14",
		/// "15",
		/// "16",
		/// "19",
		/// "2",
		/// "20",
		/// "21",
		/// "22",
		/// "23",
		/// "24"
		/// ],
		/// "_metadata": {
		/// "total": 65,
		/// "from": 1,
		/// "to": 15
		/// }
		/// }
		/// ```
		/// ListSKU api/catalog-seller-portal/skus/ids
		/// </summary>
		/// <param name="from">The first page of the interval of the product list.</param>
		/// <param name="to">The last page of the interval of the product list.</param>
		/// <returns>OK</returns>
		public async Task<ListSKUReturn> ListSKUAsync(string from, string to, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/catalog-seller-portal/skus/ids?from=" + (from==null? "" : System.Uri.EscapeDataString(from))+"&to=" + (to==null? "" : System.Uri.EscapeDataString(to));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSKUReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class ListBrandReturn
	{
		
		/// <summary>
		/// Information about the organization and exhibition of the brand list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public ListBrandReturn_metadata _metadata { get; set; }
		
		/// <summary>
		/// List with information about the store's brands.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="data")]
		public ListBrandReturnData[] ListBrandReturnData { get; set; }
	}
	
	public class ListBrandReturn_metadata
	{
		
		/// <summary>
		/// The first page of the interval of the brand list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from")]
		public int From { get; set; }
		
		/// <summary>
		/// The order that the list is displayed. You can select `name`, or `updated_at` to select the order criteria. Then you can add `,` , `asc` or `desc` to define the brands order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="orderBy")]
		public string OrderBy { get; set; }
		
		/// <summary>
		/// The last page of the interval of the brand list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public int To { get; set; }
		
		/// <summary>
		/// Total of brands on the list.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="total")]
		public int Total { get; set; }
	}
	
	public class ListBrandReturnData
	{
		
		/// <summary>
		/// Date when the brand was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		/// <summary>
		/// Brand unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The condition defines if the brand is active (`true`) or inactive (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// Brand Name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Last date when the brand was updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class PostBrandPostBody
	{
		
		/// <summary>
		/// The condition defines if the brand is active (`true`) or inactive (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// Brand Name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class PostBrandReturn
	{
		
		/// <summary>
		/// Date when the brand was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		/// <summary>
		/// Brand unique identifier number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The condition defines if the brand is active (`true`) or inactive (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Brand Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Last date when the brand was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class GetBrandReturn
	{
		
		/// <summary>
		/// Date when the brand was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		/// <summary>
		/// Brand unique identifier number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The condition defines if the brand is active (`true`) or inactive (`false`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public System.Nullable<System.Boolean> IsActive { get; set; }
		
		/// <summary>
		/// Brand Name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Last date when the brand was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class PutBrandPutBody
	{
		
		/// <summary>
		/// Brand unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The condition defines if the brand is active (`true`) or inactive (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// Brand Name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class GetCategoryTreeReturn
	{
		
		/// <summary>
		/// Date when the category tree was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		/// <summary>
		/// List of all categories of the store.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roots")]
		public GetCategoryTreeReturnRoots[] GetCategoryTreeReturnRoots { get; set; }
		
		/// <summary>
		/// Last date when the category tree was updated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class GetCategoryTreeReturnRoots
	{
		
		/// <summary>
		/// List of all children categories of the parent category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="children")]
		public GetCategoryTreeReturnRootsChildren[] GetCategoryTreeReturnRootsChildren { get; set; }
		
		/// <summary>
		/// Object with values of a category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GetCategoryTreeReturnRootsValue Value { get; set; }
	}
	
	public class GetCategoryTreeReturnRootsChildren
	{
		
		/// <summary>
		/// Object with values of a children category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GetCategoryTreeReturnRootsChildrenValue Value { get; set; }
	}
	
	public class GetCategoryTreeReturnRootsChildrenValue
	{
		
		/// <summary>
		/// Children category unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The condition defines if the children category is active (`true`) or inactive (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// Children category Name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class GetCategoryTreeReturnRootsValue
	{
		
		/// <summary>
		/// Category unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The condition defines if the category is active (`true`) or inactive (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// Category Name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class UpdateCategoryTreePutBody
	{
		
		/// <summary>
		/// List of all categories of the store.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="roots")]
		public UpdateCategoryTreePutBodyRoots[] UpdateCategoryTreePutBodyRoots { get; set; }
	}
	
	public class UpdateCategoryTreePutBodyRoots
	{
		
		/// <summary>
		/// List of all children categories of the parent category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="children")]
		public UpdateCategoryTreePutBodyRootsChildren[] UpdateCategoryTreePutBodyRootsChildren { get; set; }
		
		/// <summary>
		/// Object with values of a category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public UpdateCategoryTreePutBodyRootsValue Value { get; set; }
	}
	
	public class UpdateCategoryTreePutBodyRootsChildren
	{
		
		/// <summary>
		/// Object with values of a children category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public UpdateCategoryTreePutBodyRootsChildrenValue Value { get; set; }
	}
	
	public class UpdateCategoryTreePutBodyRootsChildrenValue
	{
		
		/// <summary>
		/// Children category unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The condition defines if the children category is active (`true`) or inactive (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// Children category Name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class UpdateCategoryTreePutBodyRootsValue
	{
		
		/// <summary>
		/// Category unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The condition defines if the category is active (`true`) or inactive (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// Category Name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class CreateCategoryPostBody
	{
		
		/// <summary>
		/// Category name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Parent category unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="parentId")]
		public string ParentId { get; set; }
	}
	
	public class CreateCategoryReturn
	{
		
		/// <summary>
		/// List of all children categories of the parent category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="children")]
		public CreateCategoryReturnChildren[] CreateCategoryReturnChildren { get; set; }
		
		/// <summary>
		/// Object with values of a category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CreateCategoryReturnValue Value { get; set; }
	}
	
	public class CreateCategoryReturnChildren
	{
		
		/// <summary>
		/// Object with values of a children category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public CreateCategoryReturnChildrenValue Value { get; set; }
	}
	
	public class CreateCategoryReturnChildrenValue
	{
		
		/// <summary>
		/// Children category unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The condition defines if the children category is active (`true`) or inactive (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// Children category Name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class CreateCategoryReturnValue
	{
		
		/// <summary>
		/// Category unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The condition defines if the category is active (`true`) or inactive (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// Category Name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class GetbyidReturn
	{
		
		/// <summary>
		/// List of all children categories of the parent category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="children")]
		public GetbyidReturnChildren[] GetbyidReturnChildren { get; set; }
		
		/// <summary>
		/// Object with values of a category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GetbyidReturnValue Value { get; set; }
	}
	
	public class GetbyidReturnChildren
	{
		
		/// <summary>
		/// Object with values of a children category.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public GetbyidReturnChildrenValue Value { get; set; }
	}
	
	public class GetbyidReturnChildrenValue
	{
		
		/// <summary>
		/// Children category unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The condition defines if the children category is active (`true`) or inactive (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// Children category Name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class GetbyidReturnValue
	{
		
		/// <summary>
		/// Category unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The condition defines if the category is active (`true`) or inactive (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// Category Name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	public class PostProductPostBody
	{
		
		/// <summary>
		/// Attributes of the product. Attributes are additional properties used to create site browsing filters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public PostProductPostBodyAttributes[] PostProductPostBodyAttributes { get; set; }
		
		/// <summary>
		/// Product's Brand unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brandId")]
		public string BrandId { get; set; }
		
		/// <summary>
		/// Product's Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryIds")]
		public string[] CategoryIds { get; set; }
		
		/// <summary>
		/// Description of the primary information related to the product. A simple and easy-to-understand summary for the customer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Product reference unique identifier number in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// Information of the images of the product.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public PostProductPostBodyImages[] PostProductPostBodyImages { get; set; }
		
		/// <summary>
		/// Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Origin account of the product. It is not possible to alter products where the origin is `marketplace`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// SKUs of the product.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="skus")]
		public PostProductPostBodySkus[] PostProductPostBodySkus { get; set; }
		
		/// <summary>
		/// Reference of the product in the URL of the store.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slug")]
		public string Slug { get; set; }
		
		/// <summary>
		/// Specifications that will differentiate the possible product SKUs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="specs")]
		public PostProductPostBodySpecs[] PostProductPostBodySpecs { get; set; }
		
		/// <summary>
		/// Status of the product. Its values can be `active` or `inactive`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Product tax code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		/// <summary>
		/// Transport modal of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transportModal")]
		public string TransportModal { get; set; }
	}
	
	public class PostProductPostBodyAttributes
	{
		
		/// <summary>
		/// Attribute name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Attribute value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class PostProductPostBodyImages
	{
		
		/// <summary>
		/// Image alternative description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alt")]
		public string Alt { get; set; }
		
		/// <summary>
		/// Image ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image URL, which must be in the following format: `https://{accountName}.vtexassets.com/assets/{path}`, saved using the [Catalog Images app](https://developers.vtex.com/vtex-developer-docs/docs/vtex-catalog-images).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PostProductPostBodySkus
	{
		
		/// <summary>
		/// SKU dimensions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public PostProductPostBodySkusDimensions Dimensions { get; set; }
		
		/// <summary>
		/// Unique SKU identification code (barcode), composed of up to 13 numeric characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// Unique reference code created to improve the store's organization. This is not a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// SKU's images IDs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public string[] Images { get; set; }
		
		/// <summary>
		/// If the SKU is active (`true`) or inactive (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// SKU reference code in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturerCode")]
		public string ManufacturerCode { get; set; }
		
		/// <summary>
		/// SKU Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// SKU specifications. This field is mandatory, but nullable if there is only one SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="specs")]
		public PostProductPostBodySkusSpecs[] PostProductPostBodySkusSpecs { get; set; }
		
		/// <summary>
		/// SKU weight.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public int Weight { get; set; }
	}
	
	public class PostProductPostBodySkusDimensions
	{
		
		/// <summary>
		/// SKU height.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="height")]
		public double Height { get; set; }
		
		/// <summary>
		/// SKU length.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="length")]
		public double Length { get; set; }
		
		/// <summary>
		/// SKU width.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="width")]
		public double Width { get; set; }
	}
	
	public class PostProductPostBodySkusSpecs
	{
		
		/// <summary>
		/// SKU's specification name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// SKU's specification values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class PostProductPostBodySpecs
	{
		
		/// <summary>
		/// Specification name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specification values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	public class PostProductReturn
	{
		
		/// <summary>
		/// Attributes of the product. Attributes are additional properties used to create site browsing filters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public PostProductReturnAttributes[] PostProductReturnAttributes { get; set; }
		
		/// <summary>
		/// Product's Brand unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brandId")]
		public string BrandId { get; set; }
		
		/// <summary>
		/// Name of the Brand associated with the product.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		/// <summary>
		/// Product's Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryIds")]
		public string[] CategoryIds { get; set; }
		
		/// <summary>
		/// Names of the product's categories, displayed in a path format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryNames")]
		public string[] CategoryNames { get; set; }
		
		/// <summary>
		/// Date when the product was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		/// <summary>
		/// Product reference unique identifier number in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// Product's unique identifier number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Information of the images of the product.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public PostProductReturnImages[] PostProductReturnImages { get; set; }
		
		/// <summary>
		/// Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Origin account of the product. It is not possible to alter products where the origin is `marketplace`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// SKUs of the product.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="skus")]
		public PostProductReturnSkus[] PostProductReturnSkus { get; set; }
		
		/// <summary>
		/// Reference of the product in the URL of the store.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slug")]
		public string Slug { get; set; }
		
		/// <summary>
		/// Specifications that will differentiate the possible product SKUs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="specs")]
		public PostProductReturnSpecs[] PostProductReturnSpecs { get; set; }
		
		/// <summary>
		/// Status of the product. Its values can be `active` or `inactive`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Product tax code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		/// <summary>
		/// Transport modal of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transportModal")]
		public string TransportModal { get; set; }
		
		/// <summary>
		/// Last date when the product was updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class PostProductReturnAttributes
	{
		
		/// <summary>
		/// Attribute name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Attribute value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class PostProductReturnImages
	{
		
		/// <summary>
		/// Image alternative description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alt")]
		public string Alt { get; set; }
		
		/// <summary>
		/// Image ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image URL, which must be in the following format: `https://{accountName}.vtexassets.com/assets/{path}`, saved using the [Catalog Images app](https://developers.vtex.com/vtex-developer-docs/docs/vtex-catalog-images).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PostProductReturnSkus
	{
		
		/// <summary>
		/// SKU dimensions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public PostProductReturnSkusDimensions Dimensions { get; set; }
		
		/// <summary>
		/// Unique SKU identification code (barcode), composed of up to 13 numeric characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// Unique reference code created to improve the store's organization. This is not a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// SKU unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// SKU's images IDs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public string[] Images { get; set; }
		
		/// <summary>
		/// If the SKU is active (`true`) or inactive (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// SKU reference code in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturerCode")]
		public string ManufacturerCode { get; set; }
		
		/// <summary>
		/// SKU Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// SKU specifications. This field is mandatory, but nullable if there is only one SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="specs")]
		public PostProductReturnSkusSpecs[] PostProductReturnSkusSpecs { get; set; }
		
		/// <summary>
		/// SKU weight.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public int Weight { get; set; }
	}
	
	public class PostProductReturnSkusDimensions
	{
		
		/// <summary>
		/// SKU height.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="height")]
		public double Height { get; set; }
		
		/// <summary>
		/// SKU length.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="length")]
		public double Length { get; set; }
		
		/// <summary>
		/// SKU width.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="width")]
		public double Width { get; set; }
	}
	
	public class PostProductReturnSkusSpecs
	{
		
		/// <summary>
		/// SKU's specification name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// SKU's specification values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class PostProductReturnSpecs
	{
		
		/// <summary>
		/// Specification name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specification values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	public class GetProductQueryReturn
	{
		
		/// <summary>
		/// Attributes of the product. Attributes are additional properties used to create site browsing filters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public GetProductQueryReturnAttributes[] GetProductQueryReturnAttributes { get; set; }
		
		/// <summary>
		/// Product's Brand unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brandId")]
		public string BrandId { get; set; }
		
		/// <summary>
		/// Name of the Brand associated with the product.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		/// <summary>
		/// Product's Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryIds")]
		public string[] CategoryIds { get; set; }
		
		/// <summary>
		/// Names of the product's categories, displayed in a path format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryNames")]
		public string[] CategoryNames { get; set; }
		
		/// <summary>
		/// Date when the product was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		/// <summary>
		/// Product reference unique identifier number in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// Product's unique identifier number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Information of the images of the product.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public GetProductQueryReturnImages[] GetProductQueryReturnImages { get; set; }
		
		/// <summary>
		/// Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Origin account of the product. It is not possible to alter products where the origin is `marketplace`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// SKUs of the product.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="skus")]
		public GetProductQueryReturnSkus[] GetProductQueryReturnSkus { get; set; }
		
		/// <summary>
		/// Reference of the product in the URL of the store.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slug")]
		public string Slug { get; set; }
		
		/// <summary>
		/// Specifications that will differentiate the possible product SKUs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="specs")]
		public GetProductQueryReturnSpecs[] GetProductQueryReturnSpecs { get; set; }
		
		/// <summary>
		/// Status of the product. Its values can be `active` or `inactive`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Product tax code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		/// <summary>
		/// Transport modal of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transportModal")]
		public string TransportModal { get; set; }
		
		/// <summary>
		/// Last date when the product was updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class GetProductQueryReturnAttributes
	{
		
		/// <summary>
		/// Attribute name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Attribute value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class GetProductQueryReturnImages
	{
		
		/// <summary>
		/// Image alternative description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alt")]
		public string Alt { get; set; }
		
		/// <summary>
		/// Image ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image URL, which must be in the following format: `https://{accountName}.vtexassets.com/assets/{path}`, saved using the [Catalog Images app](https://developers.vtex.com/vtex-developer-docs/docs/vtex-catalog-images).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class GetProductQueryReturnSkus
	{
		
		/// <summary>
		/// SKU dimensions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public GetProductQueryReturnSkusDimensions Dimensions { get; set; }
		
		/// <summary>
		/// Unique SKU identification code (barcode), composed of up to 13 numeric characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// Unique reference code created to improve the store's organization. This is not a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// SKU unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// SKU's images IDs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public string[] Images { get; set; }
		
		/// <summary>
		/// If the SKU is active (`true`) or inactive (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// SKU reference code in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturerCode")]
		public string ManufacturerCode { get; set; }
		
		/// <summary>
		/// SKU specifications. This field is mandatory, but nullable if there is only one SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="specs")]
		public GetProductQueryReturnSkusSpecs[] GetProductQueryReturnSkusSpecs { get; set; }
		
		/// <summary>
		/// SKU weight.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public int Weight { get; set; }
	}
	
	public class GetProductQueryReturnSkusDimensions
	{
		
		/// <summary>
		/// SKU height.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="height")]
		public double Height { get; set; }
		
		/// <summary>
		/// SKU length.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="length")]
		public double Length { get; set; }
		
		/// <summary>
		/// SKU width.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="width")]
		public double Width { get; set; }
	}
	
	public class GetProductQueryReturnSkusSpecs
	{
		
		/// <summary>
		/// SKU's specification name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// SKU's specification values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class GetProductQueryReturnSpecs
	{
		
		/// <summary>
		/// Specification name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specification values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	public class GetProductReturn
	{
		
		/// <summary>
		/// Attributes of the product. Attributes are additional properties used to create site browsing filters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public GetProductReturnAttributes[] GetProductReturnAttributes { get; set; }
		
		/// <summary>
		/// Product's Brand unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brandId")]
		public string BrandId { get; set; }
		
		/// <summary>
		/// Name of the Brand associated with the product.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brandName")]
		public string BrandName { get; set; }
		
		/// <summary>
		/// Product's Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryIds")]
		public string[] CategoryIds { get; set; }
		
		/// <summary>
		/// Names of the product's categories, displayed in a path format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryNames")]
		public string[] CategoryNames { get; set; }
		
		/// <summary>
		/// Date when the product was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		/// <summary>
		/// Product reference unique identifier number in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// Product's unique identifier number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Information of the images of the product.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public GetProductReturnImages[] GetProductReturnImages { get; set; }
		
		/// <summary>
		/// Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Origin account of the product. It is not possible to alter products where the origin is `marketplace`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// SKUs of the product.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="skus")]
		public GetProductReturnSkus[] GetProductReturnSkus { get; set; }
		
		/// <summary>
		/// Reference of the product in the URL of the store.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slug")]
		public string Slug { get; set; }
		
		/// <summary>
		/// Specifications that will differentiate the possible product SKUs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="specs")]
		public GetProductReturnSpecs[] GetProductReturnSpecs { get; set; }
		
		/// <summary>
		/// Status of the product. Its values can be `active` or `inactive`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Product tax code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		/// <summary>
		/// Transport modal of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transportModal")]
		public string TransportModal { get; set; }
		
		/// <summary>
		/// Last date when the product was updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class GetProductReturnAttributes
	{
		
		/// <summary>
		/// Attribute name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Attribute value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class GetProductReturnImages
	{
		
		/// <summary>
		/// Image alternative description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alt")]
		public string Alt { get; set; }
		
		/// <summary>
		/// Image ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image URL, which must be in the following format: `https://{accountName}.vtexassets.com/assets/{path}`, saved using the [Catalog Images app](https://developers.vtex.com/vtex-developer-docs/docs/vtex-catalog-images).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class GetProductReturnSkus
	{
		
		/// <summary>
		/// SKU dimensions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public GetProductReturnSkusDimensions Dimensions { get; set; }
		
		/// <summary>
		/// Unique SKU identification code (barcode), composed of up to 13 numeric characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// Unique reference code created to improve the store's organization. This is not a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// SKU unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// SKU's images IDs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public string[] Images { get; set; }
		
		/// <summary>
		/// If the SKU is active (`true`) or inactive (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// SKU reference code in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturerCode")]
		public string ManufacturerCode { get; set; }
		
		/// <summary>
		/// SKU specifications. This field is mandatory, but nullable if there is only one SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="specs")]
		public GetProductReturnSkusSpecs[] GetProductReturnSkusSpecs { get; set; }
		
		/// <summary>
		/// SKU weight.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public int Weight { get; set; }
	}
	
	public class GetProductReturnSkusDimensions
	{
		
		/// <summary>
		/// SKU height.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="height")]
		public double Height { get; set; }
		
		/// <summary>
		/// SKU length.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="length")]
		public double Length { get; set; }
		
		/// <summary>
		/// SKU width.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="width")]
		public double Width { get; set; }
	}
	
	public class GetProductReturnSkusSpecs
	{
		
		/// <summary>
		/// SKU's specification name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// SKU's specification values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class GetProductReturnSpecs
	{
		
		/// <summary>
		/// Specification name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specification values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	public class PutProductPutBody
	{
		
		/// <summary>
		/// Attributes of the product. Attributes are additional properties used to create site browsing filters.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public PutProductPutBodyAttributes[] PutProductPutBodyAttributes { get; set; }
		
		/// <summary>
		/// Product's Brand unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="brandId")]
		public string BrandId { get; set; }
		
		/// <summary>
		/// Product's Categories unique identifier numbers. It can have multiples IDs for each Category and Subcategories.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="categoryIds")]
		public string[] CategoryIds { get; set; }
		
		/// <summary>
		/// Product reference unique identifier number in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// Product's unique identifier number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Information of the images of the product.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public PutProductPutBodyImages[] PutProductPutBodyImages { get; set; }
		
		/// <summary>
		/// Product Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Origin account of the product. It is not possible to alter products where the origin is `marketplace`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public string Origin { get; set; }
		
		/// <summary>
		/// SKUs of the product.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="skus")]
		public PutProductPutBodySkus[] PutProductPutBodySkus { get; set; }
		
		/// <summary>
		/// Reference of the product in the URL of the store.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="slug")]
		public string Slug { get; set; }
		
		/// <summary>
		/// Specifications that will differentiate the possible product SKUs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="specs")]
		public PutProductPutBodySpecs[] PutProductPutBodySpecs { get; set; }
		
		/// <summary>
		/// Status of the product. Its values can be `active` or `inactive`.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// Product tax code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxCode")]
		public string TaxCode { get; set; }
		
		/// <summary>
		/// Transport modal of the product.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transportModal")]
		public string TransportModal { get; set; }
	}
	
	public class PutProductPutBodyAttributes
	{
		
		/// <summary>
		/// Attribute name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Attribute value.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class PutProductPutBodyImages
	{
		
		/// <summary>
		/// Image alternative description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alt")]
		public string Alt { get; set; }
		
		/// <summary>
		/// Image ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Image URL, which must be in the following format: `https://{accountName}.vtexassets.com/assets/{path}`, saved using the [Catalog Images app](https://developers.vtex.com/vtex-developer-docs/docs/vtex-catalog-images).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class PutProductPutBodySkus
	{
		
		/// <summary>
		/// SKU dimensions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public PutProductPutBodySkusDimensions Dimensions { get; set; }
		
		/// <summary>
		/// Unique SKU identification code (barcode), composed of up to 13 numeric characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ean")]
		public string Ean { get; set; }
		
		/// <summary>
		/// Unique reference code created to improve the store's organization. This is not a required field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// SKU unique identifier number. Do not include this field when adding a new SKU, only when editing existing SKUs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// SKU's images IDs.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="images")]
		public string[] Images { get; set; }
		
		/// <summary>
		/// Defines if the SKU is active (`true`) or inactive (`false`).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="isActive")]
		public bool IsActive { get; set; }
		
		/// <summary>
		/// SKU reference code in the store.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manufacturerCode")]
		public string ManufacturerCode { get; set; }
		
		/// <summary>
		/// SKU Name. Use simple words and avoid other languages or complex writing. This field is essential for SEO and must respect the 150 character limit.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// SKU specifications. This field is mandatory, but nullable if there is only one SKU.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="specs")]
		public PutProductPutBodySkusSpecs[] PutProductPutBodySkusSpecs { get; set; }
		
		/// <summary>
		/// SKU weight.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="weight")]
		public int Weight { get; set; }
	}
	
	public class PutProductPutBodySkusDimensions
	{
		
		/// <summary>
		/// SKU height.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="height")]
		public double Height { get; set; }
		
		/// <summary>
		/// SKU length.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="length")]
		public double Length { get; set; }
		
		/// <summary>
		/// SKU width.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="width")]
		public double Width { get; set; }
	}
	
	public class PutProductPutBodySkusSpecs
	{
		
		/// <summary>
		/// SKU's specification name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// SKU's specification values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	public class PutProductPutBodySpecs
	{
		
		/// <summary>
		/// Specification name.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Specification values.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	public class GetProductDescriptionReturn
	{
		
		/// <summary>
		/// Date when the brand was created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public string CreatedAt { get; set; }
		
		/// <summary>
		/// Product's unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
		
		/// <summary>
		/// Last date when the brand was updated.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updatedAt")]
		public string UpdatedAt { get; set; }
	}
	
	public class PutProductDescriptionPutBody
	{
		
		/// <summary>
		/// Product description.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Product's unique identifier number.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	public class SearchSKUReturn
	{
		
		/// <summary>
		/// Information about the organization and exhibition of the SKU list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public SearchSKUReturn_metadata _metadata { get; set; }
		
		/// <summary>
		/// List with information about the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public SearchSKUReturnData[] SearchSKUReturnData { get; set; }
	}
	
	public class SearchSKUReturn_metadata
	{
		
		/// <summary>
		/// The first page of the interval of the SKU list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public System.Nullable<System.Int32> From { get; set; }
		
		/// <summary>
		/// The last page of the interval of the SKU list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public System.Nullable<System.Int32> To { get; set; }
		
		/// <summary>
		/// Total of SKUs on the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
	
	public class SearchSKUReturnData
	{
		
		/// <summary>
		/// Unique identifier number of the association of the SKU with a Franchise Account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalId")]
		public string ExternalId { get; set; }
		
		/// <summary>
		/// SKU unique identifier number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Product unique identifier number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="productId")]
		public string ProductId { get; set; }
	}
	
	public class ListSKUReturn
	{
		
		/// <summary>
		/// Information about the organization and exhibition of the SKU list.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ListSKUReturn_metadata _metadata { get; set; }
		
		/// <summary>
		/// List with information about the SKU.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string[] Data { get; set; }
	}
	
	public class ListSKUReturn_metadata
	{
		
		/// <summary>
		/// The first page of the interval of the SKU list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public System.Nullable<System.Int32> From { get; set; }
		
		/// <summary>
		/// The last page of the interval of the SKU list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public System.Nullable<System.Int32> To { get; set; }
		
		/// <summary>
		/// Total of SKUs on the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Int32> Total { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
