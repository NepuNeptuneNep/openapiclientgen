//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddProfilePermissionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceLimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TooManyRequestsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InternalServiceErrorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSigningJobResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingMaterial")]
		public SigningMaterial SigningMaterial { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platformId")]
		public string PlatformId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platformDisplayName")]
		public string PlatformDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileVersion")]
		public string ProfileVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public SigningPlatformOverrides Overrides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingParameters")]
		public SigningParameters SigningParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completedAt")]
		public System.DateTimeOffset CompletedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signatureExpiresAt")]
		public System.DateTimeOffset SignatureExpiresAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestedBy")]
		public string RequestedBy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public SigningStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revocationRecord")]
		public SigningJobRevocationRecord RevocationRecord { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signedObject")]
		public SignedObject SignedObject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobOwner")]
		public string JobOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobInvoker")]
		public string JobInvoker { get; set; }
	}
	
	/// <summary>
	/// An <code>S3Source</code> object that contains information about the S3 bucket where you saved your unsigned code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Source
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3")]
		public S3Source S3 { get; set; }
	}
	
	/// <summary>
	/// Information about the S3 bucket where you saved your unsigned code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3Source
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// The ACM certificate that is used to sign your code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SigningMaterial
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
	}
	
	/// <summary>
	/// Any overrides that are applied to the signing configuration of a code signing platform.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SigningPlatformOverrides
	{
		
		[System.Runtime.Serialization.DataMember(Name="signingConfiguration")]
		public SigningConfigurationOverrides SigningConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingImageFormat")]
		public ImageFormat SigningImageFormat { get; set; }
	}
	
	/// <summary>
	/// A signing configuration that overrides the default encryption or hash algorithm of a signing job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SigningConfigurationOverrides
	{
		
		[System.Runtime.Serialization.DataMember(Name="encryptionAlgorithm")]
		public EncryptionAlgorithm EncryptionAlgorithm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hashAlgorithm")]
		public HashAlgorithm HashAlgorithm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EncryptionAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RSA = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ECDSA = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HashAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA256 = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ImageFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSONEmbedded = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSONDetached = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SigningParameters
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SigningStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		InProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Failed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Succeeded = 2,
	}
	
	/// <summary>
	/// Revocation information for a signing job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SigningJobRevocationRecord
	{
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revokedAt")]
		public System.DateTimeOffset RevokedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revokedBy")]
		public string RevokedBy { get; set; }
	}
	
	/// <summary>
	/// Points to an <code>S3SignedObject</code> object that contains information about your signed code image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SignedObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3")]
		public S3SignedObject S3 { get; set; }
	}
	
	/// <summary>
	/// The S3 bucket name and key where code signing saved your signed code image.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3SignedObject
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRevocationStatusResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="revokedEntities")]
		public string[] RevokedEntities { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSigningPlatformResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="platformId")]
		public string PlatformId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partner")]
		public string Partner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Category Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingConfiguration")]
		public SigningConfiguration SigningConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingImageFormat")]
		public SigningImageFormat SigningImageFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxSizeInMB")]
		public System.Nullable<System.Int32> MaxSizeInMB { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revocationSupported")]
		public System.Nullable<System.Boolean> RevocationSupported { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum Category
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AWSIoT = 0,
	}
	
	/// <summary>
	/// The configuration of a code signing operation.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SigningConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="encryptionAlgorithmOptions")]
		public EncryptionAlgorithmOptions EncryptionAlgorithmOptions { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="hashAlgorithmOptions")]
		public HashAlgorithmOptions HashAlgorithmOptions { get; set; }
	}
	
	/// <summary>
	/// The encryption algorithm options that are available to a code signing job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EncryptionAlgorithmOptions
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowedValues")]
		public EncryptionAlgorithm[] AllowedValues { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public EncryptionAlgorithm DefaultValue { get; set; }
	}
	
	/// <summary>
	/// The hash algorithms that are available to a code signing job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HashAlgorithmOptions
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="allowedValues")]
		public HashAlgorithm[] AllowedValues { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultValue")]
		public HashAlgorithm DefaultValue { get; set; }
	}
	
	/// <summary>
	/// The image format of a code signing platform or profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SigningImageFormat
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="supportedFormats")]
		public ImageFormat[] SupportedFormats { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultFormat")]
		public ImageFormat DefaultFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSigningProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileVersion")]
		public string ProfileVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileVersionArn")]
		public string ProfileVersionArn { get; set; }
		
		/// <summary>
		/// Revocation information for a signing profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revocationRecord")]
		public SigningProfileRevocationRecord RevocationRecord { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingMaterial")]
		public SigningMaterial SigningMaterial { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platformId")]
		public string PlatformId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platformDisplayName")]
		public string PlatformDisplayName { get; set; }
		
		/// <summary>
		/// The validity period for a signing job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signatureValidityPeriod")]
		public SignatureValidityPeriod SignatureValidityPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public SigningPlatformOverrides Overrides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingParameters")]
		public SigningParameters SigningParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public SigningProfileStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	/// Revocation information for a signing profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SigningProfileRevocationRecord
	{
		
		[System.Runtime.Serialization.DataMember(Name="revocationEffectiveFrom")]
		public System.DateTimeOffset RevocationEffectiveFrom { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revokedAt")]
		public System.DateTimeOffset RevokedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revokedBy")]
		public string RevokedBy { get; set; }
	}
	
	/// <summary>
	/// The validity period for a signing job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SignatureValidityPeriod
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ValidityType Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ValidityType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAYS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONTHS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YEARS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SigningProfileStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Active = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Canceled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Revoked = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProfilePermissionsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="policySizeBytes")]
		public System.Nullable<System.Int32> PolicySizeBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public Permission[] Permissions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// A cross-account permission for a signing profile.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Permission
	{
		
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statementId")]
		public string StatementId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileVersion")]
		public string ProfileVersion { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSigningJobsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobs")]
		public SigningJob[] Jobs { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about a signing job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SigningJob
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signedObject")]
		public SignedObject SignedObject { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingMaterial")]
		public SigningMaterial SigningMaterial { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="createdAt")]
		public System.DateTimeOffset CreatedAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public SigningStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isRevoked")]
		public System.Nullable<System.Boolean> IsRevoked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileVersion")]
		public string ProfileVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platformId")]
		public string PlatformId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platformDisplayName")]
		public string PlatformDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signatureExpiresAt")]
		public System.DateTimeOffset SignatureExpiresAt { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobOwner")]
		public string JobOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobInvoker")]
		public string JobInvoker { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSigningPlatformsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="platforms")]
		public SigningPlatform[] Platforms { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about the signing configurations and parameters that are used to perform a code signing job.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SigningPlatform
	{
		
		[System.Runtime.Serialization.DataMember(Name="platformId")]
		public string PlatformId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="partner")]
		public string Partner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="category")]
		public Category Category { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingConfiguration")]
		public SigningConfiguration SigningConfiguration { get; set; }
		
		/// <summary>
		/// The image format of a code signing platform or profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signingImageFormat")]
		public SigningImageFormat SigningImageFormat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxSizeInMB")]
		public System.Nullable<System.Int32> MaxSizeInMB { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revocationSupported")]
		public System.Nullable<System.Boolean> RevocationSupported { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSigningProfilesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="profiles")]
		public SigningProfile[] Profiles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Contains information about the ACM certificates and code signing configuration parameters that can be used by a given code signing user.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SigningProfile
	{
		
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileVersion")]
		public string ProfileVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileVersionArn")]
		public string ProfileVersionArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingMaterial")]
		public SigningMaterial SigningMaterial { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signatureValidityPeriod")]
		public SignatureValidityPeriod SignatureValidityPeriod { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platformId")]
		public string PlatformId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platformDisplayName")]
		public string PlatformDisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingParameters")]
		public SigningParameters SigningParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public SigningProfileStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutSigningProfileResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileVersion")]
		public string ProfileVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileVersionArn")]
		public string ProfileVersionArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveProfilePermissionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SignPayloadResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobOwner")]
		public string JobOwner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public Metadata Metadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signature")]
		public string Signature { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Metadata
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSigningJobResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobOwner")]
		public string JobOwner { get; set; }
	}
	
	/// <summary>
	/// The name and prefix of the S3 bucket where code signing saves your signed objects.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class S3Destination
	{
		
		[System.Runtime.Serialization.DataMember(Name="bucketName")]
		public string BucketName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AddProfilePermissionRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="profileVersion")]
		public string ProfileVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statementId")]
		public string StatementId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelSigningProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeSigningJobRequest
	{
	}
	
	/// <summary>
	/// Points to an <code>S3Destination</code> object that contains information about your S3 bucket.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Destination
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3")]
		public S3Destination S3 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetRevocationStatusRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSigningPlatformRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetSigningProfileRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProfilePermissionsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSigningJobsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSigningPlatformsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSigningProfilesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutSigningProfileRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="signingMaterial")]
		public SigningMaterial SigningMaterial { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signatureValidityPeriod")]
		public SignatureValidityPeriod SignatureValidityPeriod { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="platformId")]
		public string PlatformId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public SigningPlatformOverrides Overrides { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingParameters")]
		public SigningParameters SigningParameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RemoveProfilePermissionRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RevokeSignatureRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobOwner")]
		public string JobOwner { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RevokeSigningProfileRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profileVersion")]
		public string ProfileVersion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="effectiveTime")]
		public System.DateTimeOffset EffectiveTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SignPayloadRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileOwner")]
		public string ProfileOwner { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payload")]
		public string Payload { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payloadFormat")]
		public string PayloadFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartSigningJobRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public Source Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public Destination Destination { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileOwner")]
		public string ProfileOwner { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceRequest
	{
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Adds cross-account permissions to a signing profile.
		/// AddProfilePermission signing-profiles/{profileName}/permissions
		/// </summary>
		/// <param name="profileName">The human-readable name of the signing profile.
		/// Min length: 2
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<AddProfilePermissionResponse> AddProfilePermissionAsync(string profileName, AddProfilePermissionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signing-profiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/permissions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AddProfilePermissionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the cross-account permissions associated with a signing profile.
		/// ListProfilePermissions signing-profiles/{profileName}/permissions
		/// </summary>
		/// <param name="profileName">Name of the signing profile containing the cross-account permissions.
		/// Min length: 2
		/// Max length: 64
		// </param>
		/// <param name="nextToken">String for specifying the next set of paginated results.</param>
		/// <returns>Success</returns>
		public async Task<ListProfilePermissionsResponse> ListProfilePermissionsAsync(string profileName, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signing-profiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/permissions&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListProfilePermissionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Changes the state of an <code>ACTIVE</code> signing profile to <code>CANCELED</code>. A canceled profile is still viewable with the <code>ListSigningProfiles</code> operation, but it cannot perform new signing jobs, and is deleted two years after cancelation.
		/// CancelSigningProfile signing-profiles/{profileName}
		/// </summary>
		/// <param name="profileName">The name of the signing profile to be canceled.
		/// Min length: 2
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task CancelSigningProfileAsync(string profileName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signing-profiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information on a specific signing profile.
		/// GetSigningProfile signing-profiles/{profileName}
		/// </summary>
		/// <param name="profileName">The name of the target signing profile.
		/// Min length: 2
		/// Max length: 64
		// </param>
		/// <param name="profileOwner">The AWS account ID of the profile owner.
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <returns>Success</returns>
		public async Task<GetSigningProfileResponse> GetSigningProfileAsync(string profileName, string profileOwner, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signing-profiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"&profileOwner=" + (profileOwner==null? "" : System.Uri.EscapeDataString(profileOwner));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetSigningProfileResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a signing profile. A signing profile is a code signing template that can be used to carry out a pre-defined signing job.
		/// PutSigningProfile signing-profiles/{profileName}
		/// </summary>
		/// <param name="profileName">The name of the signing profile to be created.
		/// Min length: 2
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task<PutSigningProfileResponse> PutSigningProfileAsync(string profileName, PutSigningProfilePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signing-profiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutSigningProfileResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about a specific code signing job. You specify the job by using the <code>jobId</code> value that is returned by the <a>StartSigningJob</a> operation.
		/// DescribeSigningJob signing-jobs/{jobId}
		/// </summary>
		/// <param name="jobId">The ID of the signing job on input.</param>
		/// <returns>Success</returns>
		public async Task<DescribeSigningJobResponse> DescribeSigningJobAsync(string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signing-jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DescribeSigningJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the revocation status of one or more of the signing profile, signing job, and signing certificate.
		/// GetRevocationStatus revocations#signatureTimestamp&platformId&profileVersionArn&jobArn&certificateHashes
		/// </summary>
		/// <param name="signatureTimestamp">The timestamp of the signature that validates the profile or job.</param>
		/// <param name="platformId">The ID of a signing platform. </param>
		/// <param name="profileVersionArn">The version of a signing profile.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="jobArn">The ARN of a signing job.
		/// Min length: 20
		/// Max length: 2048
		// </param>
		/// <param name="certificateHashes"><p>A list of composite signed hashes that identify certificates.</p> <p>A certificate identifier consists of a subject certificate TBS hash (signed by the parent CA) combined with a parent CA TBS hash (signed by the parent CA’s CA). Root certificates are defined as their own CA.</p></param>
		/// <returns>Success</returns>
		public async Task<GetRevocationStatusResponse> GetRevocationStatusAsync(System.DateTimeOffset signatureTimestamp, string platformId, string profileVersionArn, string jobArn, string[] certificateHashes, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "revocations#signatureTimestamp&platformId&profileVersionArn&jobArn&certificateHashes?signatureTimestamp=" + signatureTimestamp.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&platformId=" + (platformId==null? "" : System.Uri.EscapeDataString(platformId))+"&profileVersionArn=" + (profileVersionArn==null? "" : System.Uri.EscapeDataString(profileVersionArn))+"&jobArn=" + (jobArn==null? "" : System.Uri.EscapeDataString(jobArn))+"&"+string.Join("&", certificateHashes.Select(z => $"certificateHashes={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetRevocationStatusResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information on a specific signing platform.
		/// GetSigningPlatform signing-platforms/{platformId}
		/// </summary>
		/// <param name="platformId">The ID of the target signing platform.</param>
		/// <returns>Success</returns>
		public async Task<GetSigningPlatformResponse> GetSigningPlatformAsync(string platformId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signing-platforms/"+ (platformId==null? "" : System.Uri.EscapeDataString(platformId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetSigningPlatformResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all your signing jobs. You can use the <code>maxResults</code> parameter to limit the number of signing jobs that are returned in the response. If additional jobs remain to be listed, code signing returns a <code>nextToken</code> value. Use this value in subsequent calls to <code>ListSigningJobs</code> to fetch the remaining values. You can continue calling <code>ListSigningJobs</code> with your <code>maxResults</code> parameter and with new values that code signing returns in the <code>nextToken</code> parameter until all of your signing jobs have been returned.
		/// ListSigningJobs signing-jobs
		/// </summary>
		/// <param name="status">A status value with which to filter your results.</param>
		/// <param name="platformId">The ID of microcontroller platform that you specified for the distribution of your code image.</param>
		/// <param name="requestedBy">The IAM principal that requested the signing job.</param>
		/// <param name="maxResults">Specifies the maximum number of items to return in the response. Use this parameter when paginating results. If additional items exist beyond the number you specify, the <code>nextToken</code> element is set in the response. Use the <code>nextToken</code> value in a subsequent request to retrieve additional items. 
		/// Minimum: 1
		/// Maximum: 25
		// </param>
		/// <param name="nextToken">String for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.</param>
		/// <param name="isRevoked">Filters results to return only signing jobs with revoked signatures.</param>
		/// <param name="signatureExpiresBefore">Filters results to return only signing jobs with signatures expiring before a specified timestamp.</param>
		/// <param name="signatureExpiresAfter">Filters results to return only signing jobs with signatures expiring after a specified timestamp.</param>
		/// <param name="jobInvoker">Filters results to return only signing jobs initiated by a specified IAM entity.
		/// Min length: 12
		/// Max length: 12
		// </param>
		/// <returns>Success</returns>
		public async Task<ListSigningJobsResponse> ListSigningJobsAsync(SigningStatus status, string platformId, string requestedBy, int maxResults, string nextToken, bool isRevoked, System.DateTimeOffset signatureExpiresBefore, System.DateTimeOffset signatureExpiresAfter, string jobInvoker, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signing-jobs?status=" + status+"&platformId=" + (platformId==null? "" : System.Uri.EscapeDataString(platformId))+"&requestedBy=" + (requestedBy==null? "" : System.Uri.EscapeDataString(requestedBy))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&isRevoked="+isRevoked+"&signatureExpiresBefore=" + signatureExpiresBefore.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&signatureExpiresAfter=" + signatureExpiresAfter.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&jobInvoker=" + (jobInvoker==null? "" : System.Uri.EscapeDataString(jobInvoker));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSigningJobsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Initiates a signing job to be performed on the code provided. Signing jobs are viewable by the <code>ListSigningJobs</code> operation for two years after they are performed. Note the following requirements: </p> <ul> <li> <p> You must create an Amazon S3 source bucket. For more information, see <a href="http://docs.aws.amazon.com/AmazonS3/latest/gsg/CreatingABucket.html">Creating a Bucket</a> in the <i>Amazon S3 Getting Started Guide</i>. </p> </li> <li> <p>Your S3 source bucket must be version enabled.</p> </li> <li> <p>You must create an S3 destination bucket. Code signing uses your S3 destination bucket to write your signed code.</p> </li> <li> <p>You specify the name of the source and destination buckets when calling the <code>StartSigningJob</code> operation.</p> </li> <li> <p>You must also specify a request token that identifies your request to code signing.</p> </li> </ul> <p>You can call the <a>DescribeSigningJob</a> and the <a>ListSigningJobs</a> actions after you call <code>StartSigningJob</code>.</p> <p>For a Java example that shows how to use this action, see <a href="https://docs.aws.amazon.com/signer/latest/developerguide/api-startsigningjob.html">StartSigningJob</a>.</p>
		/// StartSigningJob signing-jobs
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartSigningJobResponse> StartSigningJobAsync(StartSigningJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signing-jobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartSigningJobResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all signing platforms available in code signing that match the request parameters. If additional jobs remain to be listed, code signing returns a <code>nextToken</code> value. Use this value in subsequent calls to <code>ListSigningJobs</code> to fetch the remaining values. You can continue calling <code>ListSigningJobs</code> with your <code>maxResults</code> parameter and with new values that code signing returns in the <code>nextToken</code> parameter until all of your signing jobs have been returned.
		/// ListSigningPlatforms signing-platforms
		/// </summary>
		/// <param name="category">The category type of a signing platform.</param>
		/// <param name="partner">Any partner entities connected to a signing platform.</param>
		/// <param name="target">The validation template that is used by the target signing platform.</param>
		/// <param name="maxResults">The maximum number of results to be returned by this operation.
		/// Minimum: 1
		/// Maximum: 25
		// </param>
		/// <param name="nextToken">Value for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.</param>
		/// <returns>Success</returns>
		public async Task<ListSigningPlatformsResponse> ListSigningPlatformsAsync(string category, string partner, string target, int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signing-platforms?category=" + (category==null? "" : System.Uri.EscapeDataString(category))+"&partner=" + (partner==null? "" : System.Uri.EscapeDataString(partner))+"&target=" + (target==null? "" : System.Uri.EscapeDataString(target))+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSigningPlatformsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists all available signing profiles in your AWS account. Returns only profiles with an <code>ACTIVE</code> status unless the <code>includeCanceled</code> request field is set to <code>true</code>. If additional jobs remain to be listed, code signing returns a <code>nextToken</code> value. Use this value in subsequent calls to <code>ListSigningJobs</code> to fetch the remaining values. You can continue calling <code>ListSigningJobs</code> with your <code>maxResults</code> parameter and with new values that code signing returns in the <code>nextToken</code> parameter until all of your signing jobs have been returned.
		/// ListSigningProfiles signing-profiles
		/// </summary>
		/// <param name="includeCanceled">Designates whether to include profiles with the status of <code>CANCELED</code>.</param>
		/// <param name="maxResults">The maximum number of profiles to be returned.
		/// Minimum: 1
		/// Maximum: 25
		// </param>
		/// <param name="nextToken">Value for specifying the next set of paginated results to return. After you receive a response with truncated results, use this parameter in a subsequent request. Set it to the value of <code>nextToken</code> from the response that you just received.</param>
		/// <param name="platformId">Filters results to return only signing jobs initiated for a specified signing platform.</param>
		/// <param name="statuses">Filters results to return only signing jobs with statuses in the specified list.</param>
		/// <returns>Success</returns>
		public async Task<ListSigningProfilesResponse> ListSigningProfilesAsync(bool includeCanceled, int maxResults, string nextToken, string platformId, SigningProfileStatus[] statuses, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signing-profiles?includeCanceled="+includeCanceled+"&maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&platformId=" + (platformId==null? "" : System.Uri.EscapeDataString(platformId))+"&"+string.Join("&", statuses.Select(z => $"statuses={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSigningProfilesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the tags associated with a signing profile resource.
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) for the signing profile.</param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Adds one or more tags to a signing profile. Tags are labels that you can use to identify and organize your AWS resources. Each tag consists of a key and an optional value. To specify the signing profile, use its Amazon Resource Name (ARN). To specify the tag, use a key-value pair.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) for the signing profile.</param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TagResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes cross-account permissions from a signing profile.
		/// RemoveProfilePermission signing-profiles/{profileName}/permissions/{statementId}#revisionId
		/// </summary>
		/// <param name="profileName">A human-readable name for the signing profile with permissions to be removed.
		/// Min length: 2
		/// Max length: 64
		// </param>
		/// <param name="revisionId">An identifier for the current revision of the signing profile permissions.</param>
		/// <param name="statementId">A unique identifier for the cross-account permissions statement.</param>
		/// <returns>Success</returns>
		public async Task<RemoveProfilePermissionResponse> RemoveProfilePermissionAsync(string profileName, string revisionId, string statementId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signing-profiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/permissions/"+ (statementId==null? "" : System.Uri.EscapeDataString(statementId))+"#revisionId&revisionId=" + (revisionId==null? "" : System.Uri.EscapeDataString(revisionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<RemoveProfilePermissionResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Changes the state of a signing job to REVOKED. This indicates that the signature is no longer valid.
		/// RevokeSignature signing-jobs/{jobId}/revoke
		/// </summary>
		/// <param name="jobId">ID of the signing job to be revoked.</param>
		/// <returns>Success</returns>
		public async Task RevokeSignatureAsync(string jobId, RevokeSignaturePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signing-jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/revoke";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Changes the state of a signing profile to REVOKED. This indicates that signatures generated using the signing profile after an effective start date are no longer valid.
		/// RevokeSigningProfile signing-profiles/{profileName}/revoke
		/// </summary>
		/// <param name="profileName">The name of the signing profile to be revoked.
		/// Min length: 2
		/// Max length: 64
		// </param>
		/// <returns>Success</returns>
		public async Task RevokeSigningProfileAsync(string profileName, RevokeSigningProfilePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signing-profiles/"+ (profileName==null? "" : System.Uri.EscapeDataString(profileName))+"/revoke";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Signs a binary payload and returns a signature envelope.
		/// SignPayload signing-jobs/with-payload
		/// </summary>
		/// <returns>Success</returns>
		public async Task<SignPayloadResponse> SignPayloadAsync(SignPayloadPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "signing-jobs/with-payload";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SignPayloadResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Removes one or more tags from a signing profile. To remove the tags, specify a list of tag keys.
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn">The Amazon Resource Name (ARN) for the signing profile.</param>
		/// <param name="tagKeys">A list of tag keys to be removed from the signing profile.
		/// Minimum items: 1
		/// Maximum items: 200
		// </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<UntagResourceResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class AddProfilePermissionPostBody
	{
		
		/// <summary>
		/// The version of the signing profile.
		/// Min length: 10
		/// Max length: 10
		/// Pattern: ^[a-zA-Z0-9]{10}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileVersion")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9]{10}$")]
		public string ProfileVersion { get; set; }
		
		/// <summary>
		/// The AWS Signer action permitted as part of cross-account permissions.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="action")]
		public string Action { get; set; }
		
		/// <summary>
		/// The AWS principal receiving cross-account permissions. This may be an IAM role or another AWS account ID.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="principal")]
		public string Principal { get; set; }
		
		/// <summary>
		/// A unique identifier for the current profile revision.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="revisionId")]
		public string RevisionId { get; set; }
		
		/// <summary>
		/// A unique identifier for the cross-account permission statement.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statementId")]
		public string StatementId { get; set; }
	}
	
	public class PutSigningProfilePutBody
	{
		
		/// <summary>
		/// The ACM certificate that is used to sign your code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signingMaterial")]
		public PutSigningProfilePutBodySigningMaterial SigningMaterial { get; set; }
		
		/// <summary>
		/// The validity period for a signing job.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signatureValidityPeriod")]
		public PutSigningProfilePutBodySignatureValidityPeriod SignatureValidityPeriod { get; set; }
		
		/// <summary>
		/// The ID of the signing platform to be created.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="platformId")]
		public string PlatformId { get; set; }
		
		/// <summary>
		/// Any overrides that are applied to the signing configuration of a code signing platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overrides")]
		public PutSigningProfilePutBodyOverrides Overrides { get; set; }
		
		/// <summary>
		/// Map of key-value pairs for signing. These can include any information that you want to use during signing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signingParameters")]
		public System.Collections.Generic.Dictionary<string, string> SigningParameters { get; set; }
		
		/// <summary>
		/// Tags to be associated with the signing profile that is being created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class PutSigningProfilePutBodySigningMaterial
	{
		
		[System.Runtime.Serialization.DataMember(Name="certificateArn")]
		public string CertificateArn { get; set; }
	}
	
	public class PutSigningProfilePutBodySignatureValidityPeriod
	{
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Int32> Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public ValidityType Type { get; set; }
	}
	
	public class PutSigningProfilePutBodyOverrides
	{
		
		[System.Runtime.Serialization.DataMember(Name="signingConfiguration")]
		public SigningConfigurationOverrides SigningConfiguration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signingImageFormat")]
		public ImageFormat SigningImageFormat { get; set; }
	}
	
	public class StartSigningJobPostBody
	{
		
		/// <summary>
		/// An <code>S3Source</code> object that contains information about the S3 bucket where you saved your unsigned code.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public StartSigningJobPostBodySource Source { get; set; }
		
		/// <summary>
		/// Points to an <code>S3Destination</code> object that contains information about your S3 bucket.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="destination")]
		public StartSigningJobPostBodyDestination Destination { get; set; }
		
		/// <summary>
		/// The name of the signing profile.
		/// Required
		/// Min length: 2
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9_]{2,}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9_]{2,}")]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// String that identifies the signing request. All calls after the first that use this token return the same response as the first call.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="clientRequestToken")]
		public string ClientRequestToken { get; set; }
		
		/// <summary>
		/// The AWS account ID of the signing profile owner.
		/// Min length: 12
		/// Max length: 12
		/// Pattern: ^[0-9]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileOwner")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{12}$")]
		public string ProfileOwner { get; set; }
	}
	
	public class StartSigningJobPostBodySource
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3")]
		public S3Source S3 { get; set; }
	}
	
	public class StartSigningJobPostBodyDestination
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3")]
		public S3Destination S3 { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		/// One or more tags to be associated with the signing profile.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class RevokeSignaturePutBody
	{
		
		/// <summary>
		/// AWS account ID of the job owner.
		/// Min length: 12
		/// Max length: 12
		/// Pattern: ^[0-9]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobOwner")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{12}$")]
		public string JobOwner { get; set; }
		
		/// <summary>
		/// The reason for revoking the signing job.
		/// Required
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Reason { get; set; }
	}
	
	public class RevokeSigningProfilePutBody
	{
		
		/// <summary>
		/// The version of the signing profile to be revoked.
		/// Required
		/// Min length: 10
		/// Max length: 10
		/// Pattern: ^[a-zA-Z0-9]{10}$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profileVersion")]
		[System.ComponentModel.DataAnnotations.MinLength(10)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9]{10}$")]
		public string ProfileVersion { get; set; }
		
		/// <summary>
		/// The reason for revoking a signing profile.
		/// Required
		/// Min length: 1
		/// Max length: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reason")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public string Reason { get; set; }
		
		/// <summary>
		/// A timestamp for when revocation of a Signing Profile should become effective. Signatures generated using the signing profile after this timestamp are not trusted.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="effectiveTime")]
		public System.DateTimeOffset EffectiveTime { get; set; }
	}
	
	public class SignPayloadPostBody
	{
		
		/// <summary>
		/// The name of the signing profile.
		/// Required
		/// Min length: 2
		/// Max length: 64
		/// Pattern: ^[a-zA-Z0-9_]{2,}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="profileName")]
		[System.ComponentModel.DataAnnotations.MinLength(2)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[a-zA-Z0-9_]{2,}")]
		public string ProfileName { get; set; }
		
		/// <summary>
		/// The AWS account ID of the profile owner.
		/// Min length: 12
		/// Max length: 12
		/// Pattern: ^[0-9]{12}$
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profileOwner")]
		[System.ComponentModel.DataAnnotations.MinLength(12)]
		[System.ComponentModel.DataAnnotations.MaxLength(12)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^[0-9]{12}$")]
		public string ProfileOwner { get; set; }
		
		/// <summary>
		/// Specifies the object digest (hash) to sign.
		/// Required
		/// Min length: 1
		/// Max length: 4096
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payload")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(4096)]
		public string Payload { get; set; }
		
		/// <summary>
		/// Payload content type
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="payloadFormat")]
		public string PayloadFormat { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
