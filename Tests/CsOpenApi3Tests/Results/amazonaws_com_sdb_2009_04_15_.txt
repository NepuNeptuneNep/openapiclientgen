//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletableItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceableItem
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Attributes { get; set; }
	}
	
	/// <summary>
	/// The item name was specified more than once. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DuplicateItemName
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	/// <summary>
	/// The value for a parameter is invalid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidParameterValue
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	/// <summary>
	/// The request must contain the specified missing parameter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MissingParameter
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	/// <summary>
	/// The specified domain does not exist.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NoSuchDomain
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	/// <summary>
	/// Too many attributes in this item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NumberItemAttributesExceeded
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	/// <summary>
	/// Too many attributes in this domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NumberDomainAttributesExceeded
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	/// <summary>
	/// Too many bytes in this domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NumberDomainBytesExceeded
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	/// <summary>
	/// Too many items exist in a single call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NumberSubmittedItemsExceeded
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	/// <summary>
	/// Too many attributes exist in a single call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NumberSubmittedAttributesExceeded
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	/// <summary>
	/// Too many domains exist per this account.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NumberDomainsExceeded
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeletableAttribute
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
	}
	
	/// <summary>
	/// The specified attribute does not exist.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeDoesNotExist
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainMetadataResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ItemCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ItemNamesSizeBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AttributeNameCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AttributeNamesSizeBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AttributeValueCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> AttributeValuesSizeBytes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAttributesResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDomainsResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] DomainNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// The specified NextToken is not valid. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidNextToken
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceableAttribute
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Replace { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SelectResult
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Items { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Too many predicates exist in the query expression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidNumberPredicates
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	/// <summary>
	/// Too many predicates exist in the query expression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidNumberValueTests
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	/// <summary>
	/// The specified query expression syntax is not valid.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InvalidQueryExpression
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	/// <summary>
	/// A timeout occurred when attempting to query the specified domain with specified query expression.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestTimeout
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	/// <summary>
	/// Too many attributes requested.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TooManyRequestedAttributes
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Single> BoxUsage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Attribute
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlternateNameEncoding { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlternateValueEncoding { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchDeleteAttributesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BatchPutAttributesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Items { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	///  Specifies the conditions under which data should be updated. If an update condition is specified for a request, the data will only be updated if the condition is satisfied. For example, if an attribute with a specific name and value exists, or if a specific attribute doesn't exist. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UpdateCondition
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Exists { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteAttributesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ItemName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateCondition Expected { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteDomainRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainMetadataRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetAttributesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ItemName { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string[] AttributeNames { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConsistentRead { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Item
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string AlternateNameEncoding { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Attributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDomainsRequest
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> MaxNumberOfDomains { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutAttributesRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ItemName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string[] Attributes { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public UpdateCondition Expected { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SelectRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string SelectExpression { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ConsistentRead { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p> Performs multiple DeleteAttributes operations in a single call, which reduces round trips and latencies. This enables Amazon SimpleDB to optimize requests, which generally yields better throughput. </p> <note> <p> If you specify BatchDeleteAttributes without attributes or values, all the attributes for the item are deleted. </p> <p> BatchDeleteAttributes is an idempotent operation; running it multiple times on the same item or attribute doesn't result in an error. </p> <p> The BatchDeleteAttributes operation succeeds or fails in its entirety. There are no partial deletes. You can execute multiple BatchDeleteAttributes operations and other operations in parallel. However, large numbers of concurrent BatchDeleteAttributes calls can result in Service Unavailable (503) responses. </p> <p> This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. </p> <p> This operation does not support conditions using Expected.X.Name, Expected.X.Value, or Expected.X.Exists. </p> </note> <p> The following limitations are enforced for this operation: <ul> <li>1 MB request size</li> <li>25 item limit per BatchDeleteAttributes operation</li> </ul> </p>
		/// GET_BatchDeleteAttributes #Action=BatchDeleteAttributes
		/// </summary>
		/// <param name="DomainName">The name of the domain in which the attributes are being deleted.</param>
		/// <param name="Items">A list of items on which to perform the operation.</param>
		/// <returns>Success</returns>
		public async Task GET_BatchDeleteAttributesAsync(string DomainName, string[] Items, GET_BatchDeleteAttributesAction Action, GET_BatchDeleteAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=BatchDeleteAttributes?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&"+string.Join("&", Items.Select(z => $"Items={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> The <code>BatchPutAttributes</code> operation creates or replaces attributes within one or more items. By using this operation, the client can perform multiple <a>PutAttribute</a> operation with a single call. This helps yield savings in round trips and latencies, enabling Amazon SimpleDB to optimize requests and generally produce better throughput. </p> <p> The client may specify the item name with the <code>Item.X.ItemName</code> parameter. The client may specify new attributes using a combination of the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code> parameters. The client may specify the first attribute for the first item using the parameters <code>Item.0.Attribute.0.Name</code> and <code>Item.0.Attribute.0.Value</code>, and for the second attribute for the first item by the parameters <code>Item.0.Attribute.1.Name</code> and <code>Item.0.Attribute.1.Value</code>, and so on. </p> <p> Attributes are uniquely identified within an item by their name/value combination. For example, a single item can have the attributes <code>{ "first_name", "first_value" }</code> and <code>{ "first_name", "second_value" }</code>. However, it cannot have two attribute instances where both the <code>Item.X.Attribute.Y.Name</code> and <code>Item.X.Attribute.Y.Value</code> are the same. </p> <p> Optionally, the requester can supply the <code>Replace</code> parameter for each individual value. Setting this value to <code>true</code> will cause the new attribute values to replace the existing attribute values. For example, if an item <code>I</code> has the attributes <code>{ 'a', '1' }, { 'b', '2'}</code> and <code>{ 'b', '3' }</code> and the requester does a BatchPutAttributes of <code>{'I', 'b', '4' }</code> with the Replace parameter set to true, the final attributes of the item will be <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>, replacing the previous values of the 'b' attribute with the new value. </p> <note> You cannot specify an empty string as an item or as an attribute name. The <code>BatchPutAttributes</code> operation succeeds or fails in its entirety. There are no partial puts. </note> <important> This operation is vulnerable to exceeding the maximum URL size when making a REST request using the HTTP GET method. This operation does not support conditions using <code>Expected.X.Name</code>, <code>Expected.X.Value</code>, or <code>Expected.X.Exists</code>. </important> <p> You can execute multiple <code>BatchPutAttributes</code> operations and other operations in parallel. However, large numbers of concurrent <code>BatchPutAttributes</code> calls can result in Service Unavailable (503) responses. </p> <p> The following limitations are enforced for this operation: <ul> <li>256 attribute name-value pairs per item</li> <li>1 MB request size</li> <li>1 billion attributes per domain</li> <li>10 GB of total user data storage per domain</li> <li>25 item limit per <code>BatchPutAttributes</code> operation</li> </ul> </p>
		/// GET_BatchPutAttributes #Action=BatchPutAttributes
		/// </summary>
		/// <param name="DomainName">The name of the domain in which the attributes are being stored.</param>
		/// <param name="Items">A list of items on which to perform the operation.</param>
		/// <returns>Success</returns>
		public async Task GET_BatchPutAttributesAsync(string DomainName, string[] Items, GET_BatchPutAttributesAction Action, GET_BatchPutAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=BatchPutAttributes?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&"+string.Join("&", Items.Select(z => $"Items={System.Uri.EscapeDataString(z.ToString())}"))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> The <code>CreateDomain</code> operation creates a new domain. The domain name should be unique among the domains associated with the Access Key ID provided in the request. The <code>CreateDomain</code> operation may take 10 or more seconds to complete. </p> <note> CreateDomain is an idempotent operation; running it multiple times using the same domain name will not result in an error response. </note> <p> The client can create up to 100 domains per account. </p> <p> If the client requires additional domains, go to <a href="http://aws.amazon.com/contact-us/simpledb-limit-request/"> http://aws.amazon.com/contact-us/simpledb-limit-request/</a>. </p>
		/// GET_CreateDomain #Action=CreateDomain
		/// </summary>
		/// <param name="DomainName">The name of the domain to create. The name can range between 3 and 255 characters and can contain the following characters: a-z, A-Z, 0-9, '_', '-', and '.'.</param>
		/// <returns>Success</returns>
		public async Task GET_CreateDomainAsync(string DomainName, GET_CreateDomainAction Action, GET_CreateDomainVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=CreateDomain?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Deletes one or more attributes associated with an item. If all attributes of the item are deleted, the item is deleted. </p> <note> If <code>DeleteAttributes</code> is called without being passed any attributes or values specified, all the attributes for the item are deleted. </note> <p> <code>DeleteAttributes</code> is an idempotent operation; running it multiple times on the same item or attribute does not result in an error response. </p> <p> Because Amazon SimpleDB makes multiple copies of item data and uses an eventual consistency update model, performing a <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a <code>DeleteAttributes</code> or <a>PutAttributes</a> operation (write) might not return updated item data. </p>
		/// GET_DeleteAttributes #Action=DeleteAttributes
		/// </summary>
		/// <param name="DomainName">The name of the domain in which to perform the operation.</param>
		/// <param name="ItemName">The name of the item. Similar to rows on a spreadsheet, items represent individual objects that contain one or more value-attribute pairs.</param>
		/// <param name="Attributes">A list of Attributes. Similar to columns on a spreadsheet, attributes represent categories of data that can be assigned to items.</param>
		/// <param name="Expected">The update condition which, if specified, determines whether the specified attributes will be deleted or not. The update condition must be satisfied in order for this request to be processed and the attributes to be deleted.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteAttributesAsync(string DomainName, string ItemName, string[] Attributes, GET_DeleteAttributesExpected Expected, GET_DeleteAttributesAction Action, GET_DeleteAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteAttributes?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&ItemName=" + (ItemName==null? "" : System.Uri.EscapeDataString(ItemName))+"&"+string.Join("&", Attributes.Select(z => $"Attributes={System.Uri.EscapeDataString(z.ToString())}"))+"&Expected=" + Expected+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> The <code>DeleteDomain</code> operation deletes a domain. Any items (and their attributes) in the domain are deleted as well. The <code>DeleteDomain</code> operation might take 10 or more seconds to complete. </p> <note> Running <code>DeleteDomain</code> on a domain that does not exist or running the function multiple times using the same domain name will not result in an error response. </note>
		/// GET_DeleteDomain #Action=DeleteDomain
		/// </summary>
		/// <param name="DomainName">The name of the domain to delete.</param>
		/// <returns>Success</returns>
		public async Task GET_DeleteDomainAsync(string DomainName, GET_DeleteDomainAction Action, GET_DeleteDomainVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DeleteDomain?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns information about the domain, including when the domain was created, the number of items and attributes in the domain, and the size of the attribute names and values.
		/// GET_DomainMetadata #Action=DomainMetadata
		/// </summary>
		/// <param name="DomainName">The name of the domain for which to display the metadata of.</param>
		/// <returns>Success</returns>
		public async Task GET_DomainMetadataAsync(string DomainName, GET_DomainMetadataAction Action, GET_DomainMetadataVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=DomainMetadata?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> Returns all of the attributes associated with the specified item. Optionally, the attributes returned can be limited to one or more attributes by specifying an attribute name parameter. </p> <p> If the item does not exist on the replica that was accessed for this operation, an empty set is returned. The system does not return an error as it cannot guarantee the item does not exist on other replicas. </p> <note> If GetAttributes is called without being passed any attribute names, all the attributes for the item are returned. </note>
		/// GET_GetAttributes #Action=GetAttributes
		/// </summary>
		/// <param name="DomainName">The name of the domain in which to perform the operation.</param>
		/// <param name="ItemName">The name of the item.</param>
		/// <param name="AttributeNames">The names of the attributes.</param>
		/// <param name="ConsistentRead">Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If <code>true</code>, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.</param>
		/// <returns>Success</returns>
		public async Task GET_GetAttributesAsync(string DomainName, string ItemName, string[] AttributeNames, bool ConsistentRead, GET_GetAttributesAction Action, GET_GetAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=GetAttributes?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&ItemName=" + (ItemName==null? "" : System.Uri.EscapeDataString(ItemName))+"&"+string.Join("&", AttributeNames.Select(z => $"AttributeNames={System.Uri.EscapeDataString(z.ToString())}"))+"&ConsistentRead="+ConsistentRead+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// The <code>ListDomains</code> operation lists all domains associated with the Access Key ID. It returns domain names up to the limit set by <a href="#MaxNumberOfDomains">MaxNumberOfDomains</a>. A <a href="#NextToken">NextToken</a> is returned if there are more than <code>MaxNumberOfDomains</code> domains. Calling <code>ListDomains</code> successive times with the <code>NextToken</code> provided by the operation returns up to <code>MaxNumberOfDomains</code> more domain names with each successive operation call.
		/// GET_ListDomains #Action=ListDomains
		/// </summary>
		/// <param name="MaxNumberOfDomains">The maximum number of domain names you want returned. The range is 1 to 100. The default setting is 100.</param>
		/// <param name="NextToken">A string informing Amazon SimpleDB where to start the next list of domain names.</param>
		/// <returns>Success</returns>
		public async Task GET_ListDomainsAsync(int MaxNumberOfDomains, string NextToken, GET_ListDomainsAction Action, GET_ListDomainsVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=ListDomains?MaxNumberOfDomains="+MaxNumberOfDomains+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> The PutAttributes operation creates or replaces attributes in an item. The client may specify new attributes using a combination of the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> parameters. The client specifies the first attribute by the parameters <code>Attribute.0.Name</code> and <code>Attribute.0.Value</code>, the second attribute by the parameters <code>Attribute.1.Name</code> and <code>Attribute.1.Value</code>, and so on. </p> <p> Attributes are uniquely identified in an item by their name/value combination. For example, a single item can have the attributes <code>{ "first_name", "first_value" }</code> and <code>{ "first_name", second_value" }</code>. However, it cannot have two attribute instances where both the <code>Attribute.X.Name</code> and <code>Attribute.X.Value</code> are the same. </p> <p> Optionally, the requestor can supply the <code>Replace</code> parameter for each individual attribute. Setting this value to <code>true</code> causes the new attribute value to replace the existing attribute value(s). For example, if an item has the attributes <code>{ 'a', '1' }</code>, <code>{ 'b', '2'}</code> and <code>{ 'b', '3' }</code> and the requestor calls <code>PutAttributes</code> using the attributes <code>{ 'b', '4' }</code> with the <code>Replace</code> parameter set to true, the final attributes of the item are changed to <code>{ 'a', '1' }</code> and <code>{ 'b', '4' }</code>, which replaces the previous values of the 'b' attribute with the new value. </p> <note> Using <code>PutAttributes</code> to replace attribute values that do not exist will not result in an error response. </note> <p> You cannot specify an empty string as an attribute name. </p> <p> Because Amazon SimpleDB makes multiple copies of client data and uses an eventual consistency update model, an immediate <a>GetAttributes</a> or <a>Select</a> operation (read) immediately after a <a>PutAttributes</a> or <a>DeleteAttributes</a> operation (write) might not return the updated data. </p> <p> The following limitations are enforced for this operation: <ul> <li>256 total attribute name-value pairs per item</li> <li>One billion attributes per domain</li> <li>10 GB of total user data storage per domain</li> </ul> </p>
		/// GET_PutAttributes #Action=PutAttributes
		/// </summary>
		/// <param name="DomainName">The name of the domain in which to perform the operation.</param>
		/// <param name="ItemName">The name of the item.</param>
		/// <param name="Attributes">The list of attributes.</param>
		/// <param name="Expected">The update condition which, if specified, determines whether the specified attributes will be updated or not. The update condition must be satisfied in order for this request to be processed and the attributes to be updated.</param>
		/// <returns>Success</returns>
		public async Task GET_PutAttributesAsync(string DomainName, string ItemName, string[] Attributes, GET_PutAttributesExpected Expected, GET_PutAttributesAction Action, GET_PutAttributesVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=PutAttributes?DomainName=" + (DomainName==null? "" : System.Uri.EscapeDataString(DomainName))+"&ItemName=" + (ItemName==null? "" : System.Uri.EscapeDataString(ItemName))+"&"+string.Join("&", Attributes.Select(z => $"Attributes={System.Uri.EscapeDataString(z.ToString())}"))+"&Expected=" + Expected+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p> The <code>Select</code> operation returns a set of attributes for <code>ItemNames</code> that match the select expression. <code>Select</code> is similar to the standard SQL SELECT statement. </p> <p> The total size of the response cannot exceed 1 MB in total size. Amazon SimpleDB automatically adjusts the number of items returned per page to enforce this limit. For example, if the client asks to retrieve 2500 items, but each individual item is 10 kB in size, the system returns 100 items and an appropriate <code>NextToken</code> so the client can access the next page of results. </p> <p> For information on how to construct select expressions, see Using Select to Create Amazon SimpleDB Queries in the Developer Guide. </p>
		/// GET_Select #Action=Select
		/// </summary>
		/// <param name="SelectExpression">The expression used to query the domain.</param>
		/// <param name="NextToken">A string informing Amazon SimpleDB where to start the next list of <code>ItemNames</code>.</param>
		/// <param name="ConsistentRead">Determines whether or not strong consistency should be enforced when data is read from SimpleDB. If <code>true</code>, any data previously written to SimpleDB will be returned. Otherwise, results will be consistent eventually, and the client may not see data that was written immediately before your read.</param>
		/// <returns>Success</returns>
		public async Task GET_SelectAsync(string SelectExpression, string NextToken, bool ConsistentRead, GET_SelectAction Action, GET_SelectVersion Version, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#Action=Select?SelectExpression=" + (SelectExpression==null? "" : System.Uri.EscapeDataString(SelectExpression))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken))+"&ConsistentRead="+ConsistentRead+"&Action=" + Action+"&Version=" + Version;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum GET_BatchDeleteAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BatchDeleteAttributes = 0,
	}
	
	public enum GET_BatchDeleteAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum POST_BatchDeleteAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum GET_BatchPutAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BatchPutAttributes = 0,
	}
	
	public enum GET_BatchPutAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum POST_BatchPutAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum GET_CreateDomainAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CreateDomain = 0,
	}
	
	public enum GET_CreateDomainVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum POST_CreateDomainVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public class GET_DeleteAttributesExpected
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Exists { get; set; }
	}
	
	public enum GET_DeleteAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteAttributes = 0,
	}
	
	public enum GET_DeleteAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum POST_DeleteAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum GET_DeleteDomainAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DeleteDomain = 0,
	}
	
	public enum GET_DeleteDomainVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum POST_DeleteDomainVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum GET_DomainMetadataAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DomainMetadata = 0,
	}
	
	public enum GET_DomainMetadataVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum POST_DomainMetadataVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum GET_GetAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GetAttributes = 0,
	}
	
	public enum GET_GetAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum POST_GetAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum GET_ListDomainsAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ListDomains = 0,
	}
	
	public enum GET_ListDomainsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum POST_ListDomainsVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public class GET_PutAttributesExpected
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string Value { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> Exists { get; set; }
	}
	
	public enum GET_PutAttributesAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PutAttributes = 0,
	}
	
	public enum GET_PutAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum POST_PutAttributesVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum GET_SelectAction
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		Select = 0,
	}
	
	public enum GET_SelectVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
	
	public enum POST_SelectVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2009-04-15")]
		_2009Minus04Minus15 = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
