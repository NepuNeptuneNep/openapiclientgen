//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetApplicationComponentDetailsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationComponentDetail")]
		public ApplicationComponentDetail ApplicationComponentDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associatedApplications")]
		public AssociatedApplication[] AssociatedApplications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associatedServerIds")]
		public string[] AssociatedServerIds { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moreApplicationResource")]
		public System.Nullable<System.Boolean> MoreApplicationResource { get; set; }
	}
	
	/// <summary>
	///  Contains detailed information about an application component. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationComponentDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="analysisStatus")]
		public SrcCodeOrDbAnalysisStatus AnalysisStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="antipatternReportS3Object")]
		public S3Object AntipatternReportS3Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="antipatternReportStatus")]
		public AntipatternReportStatus AntipatternReportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="antipatternReportStatusMessage")]
		public string AntipatternReportStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appType")]
		public AppType AppType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="appUnitError")]
		public AppUnitError AppUnitError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associatedServerId")]
		public string AssociatedServerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="databaseConfigDetail")]
		public DatabaseConfigDetail DatabaseConfigDetail { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inclusionStatus")]
		public InclusionStatus InclusionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastAnalyzedTimestamp")]
		public System.DateTimeOffset LastAnalyzedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listAntipatternSeveritySummary")]
		public AntipatternSeveritySummary[] ListAntipatternSeveritySummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moreServerAssociationExists")]
		public System.Nullable<System.Boolean> MoreServerAssociationExists { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osDriver")]
		public string OsDriver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osVersion")]
		public string OsVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recommendationSet")]
		public RecommendationSet RecommendationSet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resourceSubType")]
		public ResourceSubType ResourceSubType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultList")]
		public Result[] ResultList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runtimeStatus")]
		public RuntimeAnalysisStatus RuntimeStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runtimeStatusMessage")]
		public string RuntimeStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceCodeRepositories")]
		public SourceCodeRepository[] SourceCodeRepositories { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SrcCodeOrDbAnalysisStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANALYSIS_TO_BE_SCHEDULED")]
		ANALYSIS_TO_BE_SCHEDULED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANALYSIS_STARTED")]
		ANALYSIS_STARTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANALYSIS_SUCCESS")]
		ANALYSIS_SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANALYSIS_FAILED")]
		ANALYSIS_FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANALYSIS_PARTIAL_SUCCESS")]
		ANALYSIS_PARTIAL_SUCCESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNCONFIGURED")]
		UNCONFIGURED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONFIGURED")]
		CONFIGURED = 6,
	}
	
	/// <summary>
	///  Contains the S3 bucket name and the Amazon S3 key name. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class S3Object
	{
		
		[System.Runtime.Serialization.DataMember(Name="s3Bucket")]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3key")]
		public string S3key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AntipatternReportStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESS")]
		SUCCESS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AppType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DotNetFramework")]
		DotNetFramework = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Java")]
		Java = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQLServer")]
		SQLServer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IIS")]
		IIS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Oracle")]
		Oracle = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tomcat")]
		Tomcat = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JBoss")]
		JBoss = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Spring")]
		Spring = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mongo DB")]
		Mongo_DB = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DB2")]
		DB2 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Maria DB")]
		Maria_DB = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MySQL")]
		MySQL = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sybase")]
		Sybase = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PostgreSQLServer")]
		PostgreSQLServer = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cassandra")]
		Cassandra = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IBM WebSphere")]
		IBM_WebSphere = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Oracle WebLogic")]
		Oracle_WebLogic = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Visual Basic")]
		Visual_Basic = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown")]
		Unknown = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DotnetCore")]
		DotnetCore = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Dotnet")]
		Dotnet = 21,
	}
	
	/// <summary>
	/// Error in the analysis of the application unit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppUnitError
	{
		
		[System.Runtime.Serialization.DataMember(Name="appUnitErrorCategory")]
		public AppUnitErrorCategory AppUnitErrorCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AppUnitErrorCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREDENTIAL_ERROR")]
		CREDENTIAL_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONNECTIVITY_ERROR")]
		CONNECTIVITY_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERMISSION_ERROR")]
		PERMISSION_ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNSUPPORTED_ERROR")]
		UNSUPPORTED_ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER_ERROR")]
		OTHER_ERROR = 4,
	}
	
	/// <summary>
	///  Configuration information used for assessing databases. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DatabaseConfigDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="secretName")]
		public string SecretName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum InclusionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="excludeFromAssessment")]
		excludeFromAssessment = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="includeInAssessment")]
		includeInAssessment = 1,
	}
	
	/// <summary>
	///  Contains the summary of anti-patterns and their severity. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AntipatternSeveritySummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="severity")]
		public Severity Severity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Severity
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH")]
		HIGH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIUM")]
		MEDIUM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOW")]
		LOW = 2,
	}
	
	/// <summary>
	///  Contains a recommendation set. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecommendationSet
	{
		
		[System.Runtime.Serialization.DataMember(Name="strategy")]
		public Strategy Strategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetDestination")]
		public TargetDestination TargetDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transformationTool")]
		public TransformationTool TransformationTool { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Strategy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Rehost")]
		Rehost = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Retirement")]
		Retirement = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Refactor")]
		Refactor = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Replatform")]
		Replatform = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Retain")]
		Retain = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Relocate")]
		Relocate = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Repurchase")]
		Repurchase = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TargetDestination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None specified")]
		None_specified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS Elastic BeanStalk")]
		AWS_Elastic_BeanStalk = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS Fargate")]
		AWS_Fargate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon Elastic Cloud Compute (EC2)")]
		Amazon_Elastic_Cloud_Compute_EC2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon Elastic Container Service (ECS)")]
		Amazon_Elastic_Container_Service_ECS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon Elastic Kubernetes Service (EKS)")]
		Amazon_Elastic_Kubernetes_Service_EKS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Aurora MySQL")]
		Aurora_MySQL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Aurora PostgreSQL")]
		Aurora_PostgreSQL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon Relational Database Service on MySQL")]
		Amazon_Relational_Database_Service_on_MySQL = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon Relational Database Service on PostgreSQL")]
		Amazon_Relational_Database_Service_on_PostgreSQL = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon DocumentDB")]
		Amazon_DocumentDB = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon DynamoDB")]
		Amazon_DynamoDB = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon Relational Database Service")]
		Amazon_Relational_Database_Service = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Babelfish for Aurora PostgreSQL")]
		Babelfish_for_Aurora_PostgreSQL = 13,
	}
	
	/// <summary>
	///  Information of the transformation tool that can be used to migrate and modernize the application. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransformationTool
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public TransformationToolName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tranformationToolInstallationLink")]
		public string TranformationToolInstallationLink { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransformationToolName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="App2Container")]
		App2Container = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Porting Assistant For .NET")]
		Porting_Assistant_For__NET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="End of Support Migration")]
		End_of_Support_Migration = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Windows Web Application Migration Assistant")]
		Windows_Web_Application_Migration_Assistant = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Application Migration Service")]
		Application_Migration_Service = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Strategy Recommendation Support")]
		Strategy_Recommendation_Support = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="In Place Operating System Upgrade")]
		In_Place_Operating_System_Upgrade = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Schema Conversion Tool")]
		Schema_Conversion_Tool = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Database Migration Service")]
		Database_Migration_Service = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Native SQL Server Backup/Restore")]
		Native_SQL_Server_Backup_Restore = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ResourceSubType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Database")]
		Database = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Process")]
		Process = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DatabaseProcess")]
		DatabaseProcess = 2,
	}
	
	/// <summary>
	/// The error in server analysis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Result
	{
		
		[System.Runtime.Serialization.DataMember(Name="analysisStatus")]
		public AnalysisStatusUnion AnalysisStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="analysisType")]
		public AnalysisType AnalysisType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="antipatternReportResultList")]
		public AntipatternReportResult[] AntipatternReportResultList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
	}
	
	/// <summary>
	/// A combination of existing analysis statuses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalysisStatusUnion
	{
		
		[System.Runtime.Serialization.DataMember(Name="runtimeAnalysisStatus")]
		public RuntimeAnalysisStatus RuntimeAnalysisStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="srcCodeOrDbAnalysisStatus")]
		public SrcCodeOrDbAnalysisStatus SrcCodeOrDbAnalysisStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RuntimeAnalysisStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANALYSIS_TO_BE_SCHEDULED")]
		ANALYSIS_TO_BE_SCHEDULED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANALYSIS_STARTED")]
		ANALYSIS_STARTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANALYSIS_SUCCESS")]
		ANALYSIS_SUCCESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANALYSIS_FAILED")]
		ANALYSIS_FAILED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AnalysisType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOURCE_CODE_ANALYSIS")]
		SOURCE_CODE_ANALYSIS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATABASE_ANALYSIS")]
		DATABASE_ANALYSIS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNTIME_ANALYSIS")]
		RUNTIME_ANALYSIS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BINARY_ANALYSIS")]
		BINARY_ANALYSIS = 3,
	}
	
	/// <summary>
	/// The anti-pattern report result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AntipatternReportResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="analyzerName")]
		public AnalyzerNameUnion AnalyzerName { get; set; }
		
		/// <summary>
		///  Contains the S3 bucket name and the Amazon S3 key name. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="antiPatternReportS3Object")]
		public S3Object AntiPatternReportS3Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="antipatternReportStatus")]
		public AntipatternReportStatus AntipatternReportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="antipatternReportStatusMessage")]
		public string AntipatternReportStatusMessage { get; set; }
	}
	
	/// <summary>
	/// The combination of the existing analyzers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AnalyzerNameUnion
	{
		
		[System.Runtime.Serialization.DataMember(Name="binaryAnalyzerName")]
		public BinaryAnalyzerName BinaryAnalyzerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runTimeAnalyzerName")]
		public RunTimeAnalyzerName RunTimeAnalyzerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceCodeAnalyzerName")]
		public SourceCodeAnalyzerName SourceCodeAnalyzerName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BinaryAnalyzerName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DLL_ANALYZER")]
		DLL_ANALYZER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BYTECODE_ANALYZER")]
		BYTECODE_ANALYZER = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RunTimeAnalyzerName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="A2C_ANALYZER")]
		A2C_ANALYZER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REHOST_ANALYZER")]
		REHOST_ANALYZER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EMP_PA_ANALYZER")]
		EMP_PA_ANALYZER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DATABASE_ANALYZER")]
		DATABASE_ANALYZER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SCT_ANALYZER")]
		SCT_ANALYZER = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SourceCodeAnalyzerName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CSHARP_ANALYZER")]
		CSHARP_ANALYZER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JAVA_ANALYZER")]
		JAVA_ANALYZER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BYTECODE_ANALYZER")]
		BYTECODE_ANALYZER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PORTING_ASSISTANT")]
		PORTING_ASSISTANT = 3,
	}
	
	/// <summary>
	///  Object containing source code information that is linked to an application component. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceCodeRepository
	{
		
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public string Branch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionControlType")]
		public string VersionControlType { get; set; }
	}
	
	/// <summary>
	///  Object containing details about applications as defined in Application Discovery Service. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssociatedApplication
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetApplicationComponentStrategiesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationComponentStrategies")]
		public ApplicationComponentStrategy[] ApplicationComponentStrategies { get; set; }
	}
	
	/// <summary>
	///  Contains information about a strategy recommendation for an application component. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationComponentStrategy
	{
		
		[System.Runtime.Serialization.DataMember(Name="isPreferred")]
		public System.Nullable<System.Boolean> IsPreferred { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recommendation")]
		public RecommendationSet Recommendation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StrategyRecommendation Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum StrategyRecommendation
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="recommended")]
		recommended = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="viableOption")]
		viableOption = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="notRecommended")]
		notRecommended = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="potential")]
		potential = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAssessmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="assessmentTargets")]
		public AssessmentTarget[] AssessmentTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataCollectionDetails")]
		public DataCollectionDetails DataCollectionDetails { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	/// <summary>
	/// Defines the criteria of assessment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentTarget
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public Condition Condition { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="values")]
		public string[] Values { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Condition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EQUALS")]
		EQUALS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_EQUALS")]
		NOT_EQUALS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTAINS")]
		CONTAINS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_CONTAINS")]
		NOT_CONTAINS = 3,
	}
	
	/// <summary>
	///  Detailed information about an assessment. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DataCollectionDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failed")]
		public System.Nullable<System.Int32> Failed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inProgress")]
		public System.Nullable<System.Int32> InProgress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="servers")]
		public System.Nullable<System.Int32> Servers { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AssessmentStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="success")]
		public System.Nullable<System.Int32> Success { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AssessmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COMPLETE")]
		COMPLETE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOPPED")]
		STOPPED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImportFileTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importName")]
		public string ImportName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputS3Bucket")]
		public string InputS3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputS3Key")]
		public string InputS3Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfRecordsFailed")]
		public System.Nullable<System.Int32> NumberOfRecordsFailed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfRecordsSuccess")]
		public System.Nullable<System.Int32> NumberOfRecordsSuccess { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ImportFileTaskStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReportS3Bucket")]
		public string StatusReportS3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReportS3Key")]
		public string StatusReportS3Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ImportFileTaskStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ImportInProgress")]
		ImportInProgress = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ImportFailed")]
		ImportFailed = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ImportPartialSuccess")]
		ImportPartialSuccess = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ImportSuccess")]
		ImportSuccess = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteInProgress")]
		DeleteInProgress = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteFailed")]
		DeleteFailed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeletePartialSuccess")]
		DeletePartialSuccess = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DeleteSuccess")]
		DeleteSuccess = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ValidationException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLatestAssessmentIdResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DependencyException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPortfolioPreferencesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationMode")]
		public ApplicationMode ApplicationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicationPreferences")]
		public ApplicationPreferences ApplicationPreferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="databasePreferences")]
		public DatabasePreferences DatabasePreferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prioritizeBusinessGoals")]
		public PrioritizeBusinessGoals PrioritizeBusinessGoals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ALL")]
		ALL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="KNOWN")]
		KNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 2,
	}
	
	/// <summary>
	///  Application preferences that you specify. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationPreferences
	{
		
		[System.Runtime.Serialization.DataMember(Name="managementPreference")]
		public ManagementPreference ManagementPreference { get; set; }
	}
	
	/// <summary>
	///  Preferences for migrating an application to AWS. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ManagementPreference
	{
		
		[System.Runtime.Serialization.DataMember(Name="awsManagedResources")]
		public AwsManagedResources AwsManagedResources { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noPreference")]
		public NoManagementPreference NoPreference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="selfManageResources")]
		public SelfManageResources SelfManageResources { get; set; }
	}
	
	/// <summary>
	///  Object containing the choice of application destination that you specify. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AwsManagedResources
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetDestination")]
		public AwsManagedTargetDestination[] TargetDestination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AwsManagedTargetDestination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None specified")]
		None_specified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS Elastic BeanStalk")]
		AWS_Elastic_BeanStalk = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS Fargate")]
		AWS_Fargate = 2,
	}
	
	/// <summary>
	///  Object containing the choice of application destination that you specify. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoManagementPreference
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetDestination")]
		public NoPreferenceTargetDestination[] TargetDestination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum NoPreferenceTargetDestination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None specified")]
		None_specified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS Elastic BeanStalk")]
		AWS_Elastic_BeanStalk = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS Fargate")]
		AWS_Fargate = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon Elastic Cloud Compute (EC2)")]
		Amazon_Elastic_Cloud_Compute_EC2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon Elastic Container Service (ECS)")]
		Amazon_Elastic_Container_Service_ECS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon Elastic Kubernetes Service (EKS)")]
		Amazon_Elastic_Kubernetes_Service_EKS = 5,
	}
	
	/// <summary>
	///  Self-managed resources. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SelfManageResources
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetDestination")]
		public SelfManageTargetDestination[] TargetDestination { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SelfManageTargetDestination
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None specified")]
		None_specified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon Elastic Cloud Compute (EC2)")]
		Amazon_Elastic_Cloud_Compute_EC2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon Elastic Container Service (ECS)")]
		Amazon_Elastic_Container_Service_ECS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon Elastic Kubernetes Service (EKS)")]
		Amazon_Elastic_Kubernetes_Service_EKS = 3,
	}
	
	/// <summary>
	///  Preferences on managing your databases on AWS. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DatabasePreferences
	{
		
		[System.Runtime.Serialization.DataMember(Name="databaseManagementPreference")]
		public DatabaseManagementPreference DatabaseManagementPreference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="databaseMigrationPreference")]
		public DatabaseMigrationPreference DatabaseMigrationPreference { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DatabaseManagementPreference
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS-managed")]
		AWSMinusmanaged = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Self-manage")]
		SelfMinusmanage = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="No preference")]
		No_preference = 2,
	}
	
	/// <summary>
	///  Preferences for migrating a database to AWS. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DatabaseMigrationPreference
	{
		
		[System.Runtime.Serialization.DataMember(Name="heterogeneous")]
		public Heterogeneous Heterogeneous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="homogeneous")]
		public Homogeneous Homogeneous { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noPreference")]
		public NoDatabaseMigrationPreference NoPreference { get; set; }
	}
	
	/// <summary>
	///  The object containing details about heterogeneous database preferences. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Heterogeneous
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetDatabaseEngine")]
		public HeterogeneousTargetDatabaseEngine[] TargetDatabaseEngine { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HeterogeneousTargetDatabaseEngine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None specified")]
		None_specified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon Aurora")]
		Amazon_Aurora = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS PostgreSQL")]
		AWS_PostgreSQL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MySQL")]
		MySQL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft SQL Server")]
		Microsoft_SQL_Server = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Oracle Database")]
		Oracle_Database = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MariaDB")]
		MariaDB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAP")]
		SAP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Db2 LUW")]
		Db2_LUW = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MongoDB")]
		MongoDB = 9,
	}
	
	/// <summary>
	///  The object containing details about homogeneous database preferences. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Homogeneous
	{
		
		[System.Runtime.Serialization.DataMember(Name="targetDatabaseEngine")]
		public HomogeneousTargetDatabaseEngine[] TargetDatabaseEngine { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum HomogeneousTargetDatabaseEngine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None specified")]
		None_specified = 0,
	}
	
	/// <summary>
	///  The object containing details about database migration preferences, when you have no particular preference. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NoDatabaseMigrationPreference
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="targetDatabaseEngine")]
		public TargetDatabaseEngine[] TargetDatabaseEngine { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TargetDatabaseEngine
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="None specified")]
		None_specified = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Amazon Aurora")]
		Amazon_Aurora = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AWS PostgreSQL")]
		AWS_PostgreSQL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MySQL")]
		MySQL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Microsoft SQL Server")]
		Microsoft_SQL_Server = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Oracle Database")]
		Oracle_Database = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MariaDB")]
		MariaDB = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAP")]
		SAP = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Db2 LUW")]
		Db2_LUW = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MongoDB")]
		MongoDB = 9,
	}
	
	/// <summary>
	///  Rank of business goals based on priority. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PrioritizeBusinessGoals
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessGoals")]
		public BusinessGoals BusinessGoals { get; set; }
	}
	
	/// <summary>
	///  Business goals that you specify. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BusinessGoals
	{
		
		[System.Runtime.Serialization.DataMember(Name="licenseCostReduction")]
		public System.Nullable<System.Int32> LicenseCostReduction { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="modernizeInfrastructureWithCloudNativeTechnologies")]
		public System.Nullable<System.Int32> ModernizeInfrastructureWithCloudNativeTechnologies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reduceOperationalOverheadWithManagedServices")]
		public System.Nullable<System.Int32> ReduceOperationalOverheadWithManagedServices { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="speedOfMigration")]
		public System.Nullable<System.Int32> SpeedOfMigration { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPortfolioSummaryResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="assessmentSummary")]
		public AssessmentSummary AssessmentSummary { get; set; }
	}
	
	/// <summary>
	///  Contains the summary of the assessment results. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AssessmentSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="antipatternReportS3Object")]
		public S3Object AntipatternReportS3Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="antipatternReportStatus")]
		public AntipatternReportStatus AntipatternReportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="antipatternReportStatusMessage")]
		public string AntipatternReportStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastAnalyzedTimestamp")]
		public System.DateTimeOffset LastAnalyzedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listAntipatternSeveritySummary")]
		public AntipatternSeveritySummary[] ListAntipatternSeveritySummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listApplicationComponentStatusSummary")]
		public ApplicationComponentStatusSummary[] ListApplicationComponentStatusSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listApplicationComponentStrategySummary")]
		public StrategySummary[] ListApplicationComponentStrategySummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listApplicationComponentSummary")]
		public ApplicationComponentSummary[] ListApplicationComponentSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listServerStatusSummary")]
		public ServerStatusSummary[] ListServerStatusSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listServerStrategySummary")]
		public StrategySummary[] ListServerStrategySummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listServerSummary")]
		public ServerSummary[] ListServerSummary { get; set; }
	}
	
	/// <summary>
	/// Summary of the analysis status of the application component.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationComponentStatusSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="srcCodeOrDbAnalysisStatus")]
		public SrcCodeOrDbAnalysisStatus SrcCodeOrDbAnalysisStatus { get; set; }
	}
	
	/// <summary>
	///  Object containing the summary of the strategy recommendations. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StrategySummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategy")]
		public Strategy Strategy { get; set; }
	}
	
	/// <summary>
	///  Contains the summary of application components. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApplicationComponentSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="appType")]
		public AppType AppType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	/// <summary>
	/// The status summary of the server analysis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerStatusSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runTimeAssessmentStatus")]
		public RunTimeAssessmentStatus RunTimeAssessmentStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RunTimeAssessmentStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dataCollectionTaskToBeScheduled")]
		dataCollectionTaskToBeScheduled = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dataCollectionTaskScheduled")]
		dataCollectionTaskScheduled = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dataCollectionTaskStarted")]
		dataCollectionTaskStarted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dataCollectionTaskStopped")]
		dataCollectionTaskStopped = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dataCollectionTaskSuccess")]
		dataCollectionTaskSuccess = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dataCollectionTaskFailed")]
		dataCollectionTaskFailed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="dataCollectionTaskPartialSuccess")]
		dataCollectionTaskPartialSuccess = 6,
	}
	
	/// <summary>
	///  Object containing details about the servers imported by Application Discovery Service 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerSummary
	{
		
		[System.Runtime.Serialization.DataMember()]
		public ServerOsType ServerOsType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServerOsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WindowsServer")]
		WindowsServer = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AmazonLinux")]
		AmazonLinux = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EndOfSupportWindowsServer")]
		EndOfSupportWindowsServer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Redhat")]
		Redhat = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRecommendationReportDetailsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recommendationReportDetails")]
		public RecommendationReportDetails RecommendationReportDetails { get; set; }
	}
	
	/// <summary>
	///  Contains detailed information about a recommendation report. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecommendationReportDetails
	{
		
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Bucket")]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3Keys")]
		public string[] S3Keys { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AntipatternReportStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetServerDetailsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="associatedApplications")]
		public AssociatedApplication[] AssociatedApplications { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverDetail")]
		public ServerDetail ServerDetail { get; set; }
	}
	
	/// <summary>
	///  Detailed information about a server. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerDetail
	{
		
		[System.Runtime.Serialization.DataMember(Name="antipatternReportS3Object")]
		public S3Object AntipatternReportS3Object { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="antipatternReportStatus")]
		public AntipatternReportStatus AntipatternReportStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="antipatternReportStatusMessage")]
		public string AntipatternReportStatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicationComponentStrategySummary")]
		public StrategySummary[] ApplicationComponentStrategySummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataCollectionStatus")]
		public RunTimeAssessmentStatus DataCollectionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastAnalyzedTimestamp")]
		public System.DateTimeOffset LastAnalyzedTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="listAntipatternSeveritySummary")]
		public AntipatternSeveritySummary[] ListAntipatternSeveritySummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recommendationSet")]
		public RecommendationSet RecommendationSet { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverError")]
		public ServerError ServerError { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverType")]
		public string ServerType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusMessage")]
		public string StatusMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="systemInfo")]
		public SystemInfo SystemInfo { get; set; }
	}
	
	/// <summary>
	/// The error in server analysis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerError
	{
		
		[System.Runtime.Serialization.DataMember(Name="serverErrorCategory")]
		public ServerErrorCategory ServerErrorCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServerErrorCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONNECTIVITY_ERROR")]
		CONNECTIVITY_ERROR = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREDENTIAL_ERROR")]
		CREDENTIAL_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PERMISSION_ERROR")]
		PERMISSION_ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ARCHITECTURE_ERROR")]
		ARCHITECTURE_ERROR = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER_ERROR")]
		OTHER_ERROR = 4,
	}
	
	/// <summary>
	///  Information about the server that hosts application components. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SystemInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="cpuArchitecture")]
		public string CpuArchitecture { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fileSystemType")]
		public string FileSystemType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="networkInfoList")]
		public NetworkInfo[] NetworkInfoList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osInfo")]
		public OSInfo OsInfo { get; set; }
	}
	
	/// <summary>
	///  Information about the server's network for which the assessment was run. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NetworkInfo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="interfaceName")]
		public string InterfaceName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="macAddress")]
		public string MacAddress { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="netMask")]
		public string NetMask { get; set; }
	}
	
	/// <summary>
	///  Information about the operating system. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OSInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public OSType Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OSType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LINUX")]
		LINUX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WINDOWS")]
		WINDOWS = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetServerStrategiesResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="serverStrategies")]
		public ServerStrategy[] ServerStrategies { get; set; }
	}
	
	/// <summary>
	///  Contains information about a strategy recommendation for a server. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServerStrategy
	{
		
		[System.Runtime.Serialization.DataMember(Name="isPreferred")]
		public System.Nullable<System.Boolean> IsPreferred { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfApplicationComponents")]
		public System.Nullable<System.Int32> NumberOfApplicationComponents { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recommendation")]
		public RecommendationSet Recommendation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public StrategyRecommendation Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListApplicationComponentsResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationComponentInfos")]
		public ApplicationComponentDetail[] ApplicationComponentInfos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  The object containing information about distinct imports or groups for Strategy Recommendations. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Group
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public GroupName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum GroupName
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ExternalId")]
		ExternalId = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ExternalSourceType")]
		ExternalSourceType = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceLinkedRoleLockClientException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCollectorsResponse
	{
		
		[System.Runtime.Serialization.DataMember()]
		public Collector[] Collectors { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Process data collector that runs in the environment that you specify. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Collector
	{
		
		[System.Runtime.Serialization.DataMember(Name="collectorHealth")]
		public CollectorHealth CollectorHealth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collectorId")]
		public string CollectorId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="collectorVersion")]
		public string CollectorVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configurationSummary")]
		public ConfigurationSummary ConfigurationSummary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="hostName")]
		public string HostName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddress")]
		public string IpAddress { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastActivityTimeStamp")]
		public string LastActivityTimeStamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="registeredTimeStamp")]
		public string RegisteredTimeStamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum CollectorHealth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COLLECTOR_HEALTHY")]
		COLLECTOR_HEALTHY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COLLECTOR_UNHEALTHY")]
		COLLECTOR_UNHEALTHY = 1,
	}
	
	/// <summary>
	/// Summary of the collector configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConfigurationSummary
	{
		
		[System.Runtime.Serialization.DataMember(Name="ipAddressBasedRemoteInfoList")]
		public IPAddressBasedRemoteInfo[] IpAddressBasedRemoteInfoList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipelineInfoList")]
		public PipelineInfo[] PipelineInfoList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remoteSourceCodeAnalysisServerInfo")]
		public RemoteSourceCodeAnalysisServerInfo RemoteSourceCodeAnalysisServerInfo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vcenterBasedRemoteInfoList")]
		public VcenterBasedRemoteInfo[] VcenterBasedRemoteInfoList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionControlInfoList")]
		public VersionControlInfo[] VersionControlInfoList { get; set; }
	}
	
	/// <summary>
	/// IP address based configurations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class IPAddressBasedRemoteInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="authType")]
		public AuthType AuthType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ipAddressConfigurationTimeStamp")]
		public string IpAddressConfigurationTimeStamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public OSType OsType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AuthType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NTLM")]
		NTLM = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSH")]
		SSH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CERT")]
		CERT = 2,
	}
	
	/// <summary>
	/// Detailed information of the pipeline.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PipelineInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="pipelineConfigurationTimeStamp")]
		public string PipelineConfigurationTimeStamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pipelineType")]
		public PipelineType PipelineType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PipelineType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AZURE_DEVOPS")]
		AZURE_DEVOPS = 0,
	}
	
	/// <summary>
	/// Information about the server configured for source code analysis.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RemoteSourceCodeAnalysisServerInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="remoteSourceCodeAnalysisServerConfigurationTimestamp")]
		public string RemoteSourceCodeAnalysisServerConfigurationTimestamp { get; set; }
	}
	
	/// <summary>
	/// Details about the server in vCenter.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VcenterBasedRemoteInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="osType")]
		public OSType OsType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="vcenterConfigurationTimeStamp")]
		public string VcenterConfigurationTimeStamp { get; set; }
	}
	
	/// <summary>
	/// Details about the version control configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VersionControlInfo
	{
		
		[System.Runtime.Serialization.DataMember(Name="versionControlConfigurationTimeStamp")]
		public string VersionControlConfigurationTimeStamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionControlType")]
		public VersionControlType VersionControlType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VersionControlType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GITHUB")]
		GITHUB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GITHUB_ENTERPRISE")]
		GITHUB_ENTERPRISE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AZURE_DEVOPS_GIT")]
		AZURE_DEVOPS_GIT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImportFileTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskInfos")]
		public ImportFileTaskInformation[] TaskInfos { get; set; }
	}
	
	/// <summary>
	///  Information about the import file tasks you request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ImportFileTaskInformation
	{
		
		[System.Runtime.Serialization.DataMember(Name="completionTime")]
		public System.DateTimeOffset CompletionTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="importName")]
		public string ImportName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputS3Bucket")]
		public string InputS3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inputS3Key")]
		public string InputS3Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfRecordsFailed")]
		public System.Nullable<System.Int32> NumberOfRecordsFailed { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfRecordsSuccess")]
		public System.Nullable<System.Int32> NumberOfRecordsSuccess { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ImportFileTaskStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReportS3Bucket")]
		public string StatusReportS3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReportS3Key")]
		public string StatusReportS3Key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListServersResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverInfos")]
		public ServerDetail[] ServerInfos { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutPortfolioPreferencesResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ConflictException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartAssessmentResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="assessmentId")]
		public string AssessmentId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceQuotaExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartImportFileTaskResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartRecommendationReportGenerationResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopAssessmentResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateApplicationComponentConfigResponse
	{
	}
	
	/// <summary>
	///  Object containing source code information that is linked to an application component. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SourceCode
	{
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="projectName")]
		public string ProjectName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceVersion")]
		public string SourceVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="versionControl")]
		public VersionControlType VersionControl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateServerConfigResponse
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApplicationComponentCriteria
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_DEFINED")]
		NOT_DEFINED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_NAME")]
		APP_NAME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SERVER_ID")]
		SERVER_ID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="APP_TYPE")]
		APP_TYPE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRATEGY")]
		STRATEGY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESTINATION")]
		DESTINATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANALYSIS_STATUS")]
		ANALYSIS_STATUS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR_CATEGORY")]
		ERROR_CATEGORY = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DataSourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ApplicationDiscoveryService")]
		ApplicationDiscoveryService = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MPA")]
		MPA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Import")]
		Import = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetApplicationComponentDetailsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetApplicationComponentStrategiesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAssessmentRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetImportFileTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetLatestAssessmentIdRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPortfolioPreferencesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetPortfolioSummaryRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetRecommendationReportDetailsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetServerDetailsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetServerStrategiesRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum SortOrder
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ASC")]
		ASC = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESC")]
		DESC = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListApplicationComponentsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationComponentCriteria")]
		public ApplicationComponentCriteria ApplicationComponentCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="filterValue")]
		public string FilterValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupIdFilter")]
		public Group[] GroupIdFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public SortOrder Sort { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListCollectorsRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListImportFileTaskRequest
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ServerCriteria
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_DEFINED")]
		NOT_DEFINED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OS_NAME")]
		OS_NAME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STRATEGY")]
		STRATEGY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DESTINATION")]
		DESTINATION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SERVER_ID")]
		SERVER_ID = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ANALYSIS_STATUS")]
		ANALYSIS_STATUS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR_CATEGORY")]
		ERROR_CATEGORY = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListServersRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="filterValue")]
		public string FilterValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupIdFilter")]
		public Group[] GroupIdFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="serverCriteria")]
		public ServerCriteria ServerCriteria { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public SortOrder Sort { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum OutputFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Excel")]
		Excel = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Json")]
		Json = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PutPortfolioPreferencesRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="applicationMode")]
		public ApplicationMode ApplicationMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="applicationPreferences")]
		public ApplicationPreferences ApplicationPreferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="databasePreferences")]
		public DatabasePreferences DatabasePreferences { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prioritizeBusinessGoals")]
		public PrioritizeBusinessGoals PrioritizeBusinessGoals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RecommendationReportStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCESS")]
		SUCCESS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum VersionControl
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GITHUB")]
		GITHUB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GITHUB_ENTERPRISE")]
		GITHUB_ENTERPRISE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AZURE_DEVOPS_GIT")]
		AZURE_DEVOPS_GIT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartAssessmentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="assessmentTargets")]
		public AssessmentTarget[] AssessmentTargets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3bucketForAnalysisData")]
		public string S3bucketForAnalysisData { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3bucketForReportData")]
		public string S3bucketForReportData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartImportFileTaskRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string S3Bucket { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dataSourceType")]
		public DataSourceType DataSourceType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public Group[] GroupId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s3bucketForReportData")]
		public string S3bucketForReportData { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3key")]
		public string S3key { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartRecommendationReportGenerationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="groupIdFilter")]
		public Group[] GroupIdFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="outputFormat")]
		public OutputFormat OutputFormat { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopAssessmentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="assessmentId")]
		public string AssessmentId { get; set; }
	}
	
	/// <summary>
	///  Information about all the available strategy options for migrating and modernizing an application component. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StrategyOption
	{
		
		[System.Runtime.Serialization.DataMember(Name="isPreferred")]
		public System.Nullable<System.Boolean> IsPreferred { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategy")]
		public Strategy Strategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetDestination")]
		public TargetDestination TargetDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toolName")]
		public TransformationToolName ToolName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateApplicationComponentConfigRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="appType")]
		public AppType AppType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationComponentId")]
		public string ApplicationComponentId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="configureOnly")]
		public System.Nullable<System.Boolean> ConfigureOnly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="inclusionStatus")]
		public InclusionStatus InclusionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secretsManagerKey")]
		public string SecretsManagerKey { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceCodeList")]
		public SourceCode[] SourceCodeList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategyOption")]
		public StrategyOption StrategyOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateServerConfigRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverId")]
		public string ServerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategyOption")]
		public StrategyOption StrategyOption { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Retrieves details about an application component.
		/// GetApplicationComponentDetails get-applicationcomponent-details/{applicationComponentId}
		/// </summary>
		/// <param name="applicationComponentId"> The ID of the application component. The ID is unique within an AWS account.</param>
		/// <returns>Success</returns>
		public async Task<GetApplicationComponentDetailsResponse> GetApplicationComponentDetailsAsync(string applicationComponentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "get-applicationcomponent-details/"+ (applicationComponentId==null? "" : System.Uri.EscapeDataString(applicationComponentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetApplicationComponentDetailsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of all the recommended strategies and tools for an application component running on a server.
		/// GetApplicationComponentStrategies get-applicationcomponent-strategies/{applicationComponentId}
		/// </summary>
		/// <param name="applicationComponentId"> The ID of the application component. The ID is unique within an AWS account.</param>
		/// <returns>Success</returns>
		public async Task<GetApplicationComponentStrategiesResponse> GetApplicationComponentStrategiesAsync(string applicationComponentId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "get-applicationcomponent-strategies/"+ (applicationComponentId==null? "" : System.Uri.EscapeDataString(applicationComponentId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetApplicationComponentStrategiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the status of an on-going assessment.
		/// GetAssessment get-assessment/{id}
		/// </summary>
		/// <param name="id"> The <code>assessmentid</code> returned by <a>StartAssessment</a>.</param>
		/// <returns>Success</returns>
		public async Task<GetAssessmentResponse> GetAssessmentAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "get-assessment/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAssessmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the details about a specific import task.
		/// GetImportFileTask get-import-file-task/{id}
		/// </summary>
		/// <param name="id"> The ID of the import file task. This ID is returned in the response of <a>StartImportFileTask</a>. </param>
		/// <returns>Success</returns>
		public async Task<GetImportFileTaskResponse> GetImportFileTaskAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "get-import-file-task/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetImportFileTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieve the latest ID of a specific assessment task.
		/// GetLatestAssessmentId get-latest-assessment-id
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetLatestAssessmentIdResponse> GetLatestAssessmentIdAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "get-latest-assessment-id";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetLatestAssessmentIdResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves your migration and modernization preferences.
		/// GetPortfolioPreferences get-portfolio-preferences
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPortfolioPreferencesResponse> GetPortfolioPreferencesAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "get-portfolio-preferences";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPortfolioPreferencesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves overall summary including the number of servers to rehost and the overall number of anti-patterns.
		/// GetPortfolioSummary get-portfolio-summary
		/// </summary>
		/// <returns>Success</returns>
		public async Task<GetPortfolioSummaryResponse> GetPortfolioSummaryAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "get-portfolio-summary";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetPortfolioSummaryResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves detailed information about the specified recommendation report.
		/// GetRecommendationReportDetails get-recommendation-report-details/{id}
		/// </summary>
		/// <param name="id"> The recommendation report generation task <code>id</code> returned by <a>StartRecommendationReportGeneration</a>. </param>
		/// <returns>Success</returns>
		public async Task<GetRecommendationReportDetailsResponse> GetRecommendationReportDetailsAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "get-recommendation-report-details/"+ (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetRecommendationReportDetailsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves detailed information about a specified server.
		/// GetServerDetails get-server-details/{serverId}
		/// </summary>
		/// <param name="maxResults"> The maximum number of items to include in the response. The maximum value is 100. </param>
		/// <param name="nextToken"> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </param>
		/// <param name="serverId"> The ID of the server. </param>
		/// <returns>Success</returns>
		public async Task<GetServerDetailsResponse> GetServerDetailsAsync(int maxResults, string nextToken, string serverId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "get-server-details/"+ (serverId==null? "" : System.Uri.EscapeDataString(serverId))+"?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetServerDetailsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves recommended strategies and tools for the specified server.
		/// GetServerStrategies get-server-strategies/{serverId}
		/// </summary>
		/// <param name="serverId"> The ID of the server. </param>
		/// <returns>Success</returns>
		public async Task<GetServerStrategiesResponse> GetServerStrategiesAsync(string serverId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "get-server-strategies/"+ (serverId==null? "" : System.Uri.EscapeDataString(serverId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetServerStrategiesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of all the application components (processes).
		/// ListApplicationComponents list-applicationcomponents
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListApplicationComponentsResponse> ListApplicationComponentsAsync(string maxResults, string nextToken, ListApplicationComponentsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "list-applicationcomponents?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListApplicationComponentsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of all the installed collectors.
		/// ListCollectors list-collectors
		/// </summary>
		/// <param name="maxResults"> The maximum number of items to include in the response. The maximum value is 100. </param>
		/// <param name="nextToken"> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </param>
		/// <returns>Success</returns>
		public async Task<ListCollectorsResponse> ListCollectorsAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "list-collectors?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListCollectorsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of all the imports performed.
		/// ListImportFileTask list-import-file-task
		/// </summary>
		/// <param name="maxResults"> The total number of items to return. The maximum value is 100. </param>
		/// <param name="nextToken"> The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. </param>
		/// <returns>Success</returns>
		public async Task<ListImportFileTaskResponse> ListImportFileTaskAsync(int maxResults, string nextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "list-import-file-task?maxResults="+maxResults+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListImportFileTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of all the servers.
		/// ListServers list-servers
		/// </summary>
		/// <param name="maxResults">Pagination limit</param>
		/// <param name="nextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListServersResponse> ListServersAsync(string maxResults, string nextToken, ListServersPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "list-servers?maxResults=" + (maxResults==null? "" : System.Uri.EscapeDataString(maxResults))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListServersResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Saves the specified migration and modernization preferences.
		/// PutPortfolioPreferences put-portfolio-preferences
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PutPortfolioPreferencesResponse> PutPortfolioPreferencesAsync(PutPortfolioPreferencesPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "put-portfolio-preferences";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PutPortfolioPreferencesResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts the assessment of an on-premises environment.
		/// StartAssessment start-assessment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartAssessmentResponse> StartAssessmentAsync(StartAssessmentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "start-assessment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartAssessmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts a file import.
		/// StartImportFileTask start-import-file-task
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartImportFileTaskResponse> StartImportFileTaskAsync(StartImportFileTaskPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "start-import-file-task";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartImportFileTaskResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts generating a recommendation report.
		/// StartRecommendationReportGeneration start-recommendation-report-generation
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StartRecommendationReportGenerationResponse> StartRecommendationReportGenerationAsync(StartRecommendationReportGenerationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "start-recommendation-report-generation";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartRecommendationReportGenerationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops the assessment of an on-premises environment.
		/// StopAssessment stop-assessment
		/// </summary>
		/// <returns>Success</returns>
		public async Task<StopAssessmentResponse> StopAssessmentAsync(StopAssessmentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "stop-assessment";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopAssessmentResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the configuration of an application component.
		/// UpdateApplicationComponentConfig update-applicationcomponent-config/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateApplicationComponentConfigResponse> UpdateApplicationComponentConfigAsync(UpdateApplicationComponentConfigPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "update-applicationcomponent-config/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateApplicationComponentConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Updates the configuration of the specified server.
		/// UpdateServerConfig update-server-config/
		/// </summary>
		/// <returns>Success</returns>
		public async Task<UpdateServerConfigResponse> UpdateServerConfigAsync(UpdateServerConfigPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "update-server-config/";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateServerConfigResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class ListApplicationComponentsPostBody
	{
		
		/// <summary>
		///  Criteria for filtering the list of application components. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationComponentCriteria")]
		public ApplicationComponentCriteria ApplicationComponentCriteria { get; set; }
		
		/// <summary>
		///  Specify the value based on the application component criteria type. For example, if <code>applicationComponentCriteria</code> is set to <code>SERVER_ID</code> and <code>filterValue</code> is set to <code>server1</code>, then <a>ListApplicationComponents</a> returns all the application components running on server1. 
		/// Max length: 256
		/// Min length: 0
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterValue")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(256)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string FilterValue { get; set; }
		
		/// <summary>
		///  The group ID specified in to filter on. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupIdFilter")]
		public Group[] GroupIdFilter { get; set; }
		
		/// <summary>
		///  The maximum number of items to include in the response. The maximum value is 100. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		///  The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. 
		/// Max length: 2048
		/// Min length: 0
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string NextToken { get; set; }
		
		/// <summary>
		///  Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public SortOrder Sort { get; set; }
	}
	
	public class ListServersPostBody
	{
		
		/// <summary>
		///  Specifies the filter value, which is based on the type of server criteria. For example, if <code>serverCriteria</code> is <code>OS_NAME</code>, and the <code>filterValue</code> is equal to <code>WindowsServer</code>, then <code>ListServers</code> returns all of the servers matching the OS name <code>WindowsServer</code>. 
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterValue")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string FilterValue { get; set; }
		
		/// <summary>
		///  Specifies the group ID to filter on. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupIdFilter")]
		public Group[] GroupIdFilter { get; set; }
		
		/// <summary>
		///  The maximum number of items to include in the response. The maximum value is 100. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxResults")]
		public System.Nullable<System.Int32> MaxResults { get; set; }
		
		/// <summary>
		///  The token from a previous call that you use to retrieve the next set of results. For example, if a previous call to this action returned 100 items, but you set <code>maxResults</code> to 10. You'll receive a set of 10 results along with a token. You then use the returned token to retrieve the next set of 10. 
		/// Max length: 2048
		/// Min length: 0
		/// Pattern: .*\S.*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(2048)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string NextToken { get; set; }
		
		/// <summary>
		///  Criteria for filtering servers. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serverCriteria")]
		public ServerCriteria ServerCriteria { get; set; }
		
		/// <summary>
		///  Specifies whether to sort by ascending (<code>ASC</code>) or descending (<code>DESC</code>) order. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sort")]
		public SortOrder Sort { get; set; }
	}
	
	public class PutPortfolioPreferencesPostBody
	{
		
		/// <summary>
		/// The classification for application component types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationMode")]
		public ApplicationMode ApplicationMode { get; set; }
		
		/// <summary>
		///  Application preferences that you specify. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="applicationPreferences")]
		public PutPortfolioPreferencesPostBodyApplicationPreferences ApplicationPreferences { get; set; }
		
		/// <summary>
		///  Preferences on managing your databases on AWS. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="databasePreferences")]
		public PutPortfolioPreferencesPostBodyDatabasePreferences DatabasePreferences { get; set; }
		
		/// <summary>
		///  Rank of business goals based on priority. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prioritizeBusinessGoals")]
		public PutPortfolioPreferencesPostBodyPrioritizeBusinessGoals PrioritizeBusinessGoals { get; set; }
	}
	
	public class PutPortfolioPreferencesPostBodyApplicationPreferences
	{
		
		[System.Runtime.Serialization.DataMember(Name="managementPreference")]
		public ManagementPreference ManagementPreference { get; set; }
	}
	
	public class PutPortfolioPreferencesPostBodyDatabasePreferences
	{
		
		[System.Runtime.Serialization.DataMember(Name="databaseManagementPreference")]
		public DatabaseManagementPreference DatabaseManagementPreference { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="databaseMigrationPreference")]
		public DatabaseMigrationPreference DatabaseMigrationPreference { get; set; }
	}
	
	public class PutPortfolioPreferencesPostBodyPrioritizeBusinessGoals
	{
		
		[System.Runtime.Serialization.DataMember(Name="businessGoals")]
		public BusinessGoals BusinessGoals { get; set; }
	}
	
	public class StartAssessmentPostBody
	{
		
		/// <summary>
		/// List of criteria for assessment.
		/// Minimum items: 0
		/// Maximum items: 10
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assessmentTargets")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public AssessmentTarget[] AssessmentTargets { get; set; }
		
		/// <summary>
		///  The S3 bucket used by the collectors to send analysis data to the service. The bucket name must begin with <code>migrationhub-strategy-</code>. 
		/// Max length: 63
		/// Min length: 0
		/// Pattern: [0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s3bucketForAnalysisData")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+")]
		public string S3bucketForAnalysisData { get; set; }
		
		/// <summary>
		///  The S3 bucket where all the reports generated by the service are stored. The bucket name must begin with <code>migrationhub-strategy-</code>. 
		/// Max length: 63
		/// Min length: 0
		/// Pattern: [0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s3bucketForReportData")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+")]
		public string S3bucketForReportData { get; set; }
	}
	
	public class StartImportFileTaskPostBody
	{
		
		/// <summary>
		///  The S3 bucket where the import file is located. The bucket name is required to begin with <code>migrationhub-strategy-</code>.
		/// Required
		/// Max length: 63
		/// Min length: 0
		/// Pattern: [0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+")]
		public string S3Bucket { get; set; }
		
		/// <summary>
		/// Specifies the source that the servers are coming from. By default, Strategy Recommendations assumes that the servers specified in the import file are available in AWS Application Discovery Service. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataSourceType")]
		public DataSourceType DataSourceType { get; set; }
		
		/// <summary>
		/// Groups the resources in the import file together with a unique name. This ID can be as filter in <code>ListApplicationComponents</code> and <code>ListServers</code>. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public Group[] GroupId { get; set; }
		
		/// <summary>
		///  A descriptive name for the request. 
		/// Required
		/// Max length: 50
		/// Min length: 1
		/// Pattern: [a-zA-Z0-9_-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[a-zA-Z0-9_-]+")]
		public string Name { get; set; }
		
		/// <summary>
		///  The S3 bucket where Strategy Recommendations uploads import results. The bucket name is required to begin with migrationhub-strategy-. 
		/// Max length: 63
		/// Min length: 0
		/// Pattern: [0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="s3bucketForReportData")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(63)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-z]+[0-9a-z\.\-]*[0-9a-z]+")]
		public string S3bucketForReportData { get; set; }
		
		/// <summary>
		///  The Amazon S3 key name of the import file. 
		/// Required
		/// Max length: 1024
		/// Min length: 0
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="s3key")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1024)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string S3key { get; set; }
	}
	
	public class StartRecommendationReportGenerationPostBody
	{
		
		/// <summary>
		///  Groups the resources in the recommendation report with a unique name. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupIdFilter")]
		public Group[] GroupIdFilter { get; set; }
		
		/// <summary>
		///  The output format for the recommendation report file. The default format is Microsoft Excel. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outputFormat")]
		public OutputFormat OutputFormat { get; set; }
	}
	
	public class StopAssessmentPostBody
	{
		
		/// <summary>
		///  The <code>assessmentId</code> returned by <a>StartAssessment</a>. 
		/// Required
		/// Max length: 52
		/// Min length: 0
		/// Pattern: [0-9a-z-:]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="assessmentId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(52)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-z-:]+")]
		public string AssessmentId { get; set; }
	}
	
	public class UpdateApplicationComponentConfigPostBody
	{
		
		/// <summary>
		/// The type of known component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appType")]
		public System.Nullable<UpdateApplicationComponentConfigPostBodyAppType> AppType { get; set; }
		
		/// <summary>
		///  The ID of the application component. The ID is unique within an AWS account. 
		/// Required
		/// Max length: 44
		/// Min length: 0
		/// Pattern: [0-9a-zA-Z-]+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="applicationComponentId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(44)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9a-zA-Z-]+")]
		public string ApplicationComponentId { get; set; }
		
		/// <summary>
		/// Update the configuration request of an application component. If it is set to true, the source code and/or database credentials are updated. If it is set to false, the source code and/or database credentials are updated and an analysis is initiated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configureOnly")]
		public System.Nullable<System.Boolean> ConfigureOnly { get; set; }
		
		/// <summary>
		///  Indicates whether the application component has been included for server recommendation or not. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inclusionStatus")]
		public InclusionStatus InclusionStatus { get; set; }
		
		/// <summary>
		///  Database credentials. 
		/// Max length: 512
		/// Min length: 1
		/// Pattern: .*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="secretsManagerKey")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(512)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*")]
		public string SecretsManagerKey { get; set; }
		
		/// <summary>
		///  The list of source code configurations to update for the application component. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceCodeList")]
		public SourceCode[] SourceCodeList { get; set; }
		
		/// <summary>
		///  Information about all the available strategy options for migrating and modernizing an application component. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strategyOption")]
		public UpdateApplicationComponentConfigPostBodyStrategyOption StrategyOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum UpdateApplicationComponentConfigPostBodyAppType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DotNetFramework")]
		DotNetFramework = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Java")]
		Java = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SQLServer")]
		SQLServer = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IIS")]
		IIS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Oracle")]
		Oracle = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Other")]
		Other = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Tomcat")]
		Tomcat = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="JBoss")]
		JBoss = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Spring")]
		Spring = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Mongo DB")]
		Mongo_DB = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DB2")]
		DB2 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Maria DB")]
		Maria_DB = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MySQL")]
		MySQL = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Sybase")]
		Sybase = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PostgreSQLServer")]
		PostgreSQLServer = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Cassandra")]
		Cassandra = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IBM WebSphere")]
		IBM_WebSphere = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Oracle WebLogic")]
		Oracle_WebLogic = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Visual Basic")]
		Visual_Basic = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Unknown")]
		Unknown = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DotnetCore")]
		DotnetCore = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="Dotnet")]
		Dotnet = 21,
	}
	
	public class UpdateApplicationComponentConfigPostBodyStrategyOption
	{
		
		[System.Runtime.Serialization.DataMember(Name="isPreferred")]
		public System.Nullable<System.Boolean> IsPreferred { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategy")]
		public Strategy Strategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetDestination")]
		public TargetDestination TargetDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toolName")]
		public TransformationToolName ToolName { get; set; }
	}
	
	public class UpdateServerConfigPostBody
	{
		
		/// <summary>
		///  The ID of the server. 
		/// Required
		/// Max length: 27
		/// Min length: 1
		/// Pattern: .*\S.*
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="serverId")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(27)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@".*\S.*")]
		public string ServerId { get; set; }
		
		/// <summary>
		///  Information about all the available strategy options for migrating and modernizing an application component. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strategyOption")]
		public UpdateServerConfigPostBodyStrategyOption StrategyOption { get; set; }
	}
	
	public class UpdateServerConfigPostBodyStrategyOption
	{
		
		[System.Runtime.Serialization.DataMember(Name="isPreferred")]
		public System.Nullable<System.Boolean> IsPreferred { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="strategy")]
		public Strategy Strategy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="targetDestination")]
		public TargetDestination TargetDestination { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="toolName")]
		public TransformationToolName ToolName { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
