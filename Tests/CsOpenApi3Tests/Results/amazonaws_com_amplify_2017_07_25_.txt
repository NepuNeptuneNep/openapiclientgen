//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAppResult
	{
		
		/// <summary>
		///  Represents the different branches of a repository for building, deploying, and hosting an Amplify app. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="app")]
		public App App { get; set; }
	}
	
	/// <summary>
	///  Represents the different branches of a repository for building, deploying, and hosting an Amplify app. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class App
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="appArn")]
		public string AppArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.DateTimeOffset CreateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.DateTimeOffset UpdateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamServiceRoleArn")]
		public string IamServiceRoleArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public EnvironmentVariables EnvironmentVariables { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="defaultDomain")]
		public string DefaultDomain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableBranchAutoBuild")]
		public bool EnableBranchAutoBuild { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableBranchAutoDeletion")]
		public System.Nullable<System.Boolean> EnableBranchAutoDeletion { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableBasicAuth")]
		public bool EnableBasicAuth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public string BasicAuthCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customRules")]
		public CustomRule[] CustomRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="productionBranch")]
		public ProductionBranch ProductionBranch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildSpec")]
		public string BuildSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customHeaders")]
		public string CustomHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableAutoBranchCreation")]
		public System.Nullable<System.Boolean> EnableAutoBranchCreation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoBranchCreationPatterns")]
		public string[] AutoBranchCreationPatterns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoBranchCreationConfig")]
		public AutoBranchCreationConfig AutoBranchCreationConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repositoryCloneMethod")]
		public RepositoryCloneMethod RepositoryCloneMethod { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagMap
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Platform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEB")]
		WEB = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEB_DYNAMIC")]
		WEB_DYNAMIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEB_COMPUTE")]
		WEB_COMPUTE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentVariables
	{
	}
	
	/// <summary>
	///  Describes a custom rewrite or redirect rule. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CustomRule
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="target")]
		public string Target { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="condition")]
		public string Condition { get; set; }
	}
	
	/// <summary>
	///  Describes the information about a production branch for an Amplify app. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ProductionBranch
	{
		
		[System.Runtime.Serialization.DataMember(Name="lastDeployTime")]
		public System.DateTimeOffset LastDeployTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
	}
	
	/// <summary>
	///  Describes the automated branch creation configuration. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AutoBranchCreationConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public Stage Stage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="framework")]
		public string Framework { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableAutoBuild")]
		public System.Nullable<System.Boolean> EnableAutoBuild { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public EnvironmentVariables EnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public string BasicAuthCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableBasicAuth")]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enablePerformanceMode")]
		public System.Nullable<System.Boolean> EnablePerformanceMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildSpec")]
		public string BuildSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enablePullRequestPreview")]
		public System.Nullable<System.Boolean> EnablePullRequestPreview { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestEnvironmentName")]
		public string PullRequestEnvironmentName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Stage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRODUCTION")]
		PRODUCTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BETA")]
		BETA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEVELOPMENT")]
		DEVELOPMENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EXPERIMENTAL")]
		EXPERIMENTAL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PULL_REQUEST")]
		PULL_REQUEST = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RepositoryCloneMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SSH")]
		SSH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOKEN")]
		TOKEN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SIGV4")]
		SIGV4 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UnauthorizedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalFailureException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class LimitExceededException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DependentServiceFailureException
	{
	}
	
	/// <summary>
	///  The result structure for the create backend environment request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendEnvironmentResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="backendEnvironment")]
		public BackendEnvironment BackendEnvironment { get; set; }
	}
	
	/// <summary>
	///  Describes the backend environment for an Amplify app. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BackendEnvironment
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="backendEnvironmentArn")]
		public string BackendEnvironmentArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentName")]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stackName")]
		public string StackName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentArtifacts")]
		public string DeploymentArtifacts { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.DateTimeOffset CreateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.DateTimeOffset UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundException
	{
	}
	
	/// <summary>
	///  The result structure for create branch request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBranchResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public Branch Branch { get; set; }
	}
	
	/// <summary>
	///  The branch for an Amplify app, which maps to a third-party repository branch. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Branch
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branchArn")]
		public string BranchArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public Stage Stage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableNotification")]
		public bool EnableNotification { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.DateTimeOffset CreateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.DateTimeOffset UpdateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public EnvironmentVariables EnvironmentVariables { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableAutoBuild")]
		public bool EnableAutoBuild { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="customDomains")]
		public string[] CustomDomains { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="framework")]
		public string Framework { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activeJobId")]
		public string ActiveJobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="totalNumberOfJobs")]
		public string TotalNumberOfJobs { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableBasicAuth")]
		public bool EnableBasicAuth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enablePerformanceMode")]
		public System.Nullable<System.Boolean> EnablePerformanceMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumbnailUrl")]
		public string ThumbnailUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public string BasicAuthCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildSpec")]
		public string BuildSpec { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="associatedResources")]
		public string[] AssociatedResources { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enablePullRequestPreview")]
		public bool EnablePullRequestPreview { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestEnvironmentName")]
		public string PullRequestEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="destinationBranch")]
		public string DestinationBranch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceBranch")]
		public string SourceBranch { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backendEnvironmentArn")]
		public string BackendEnvironmentArn { get; set; }
	}
	
	/// <summary>
	///  The result structure for the create a new deployment request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDeploymentResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="fileUploadUrls")]
		public FileUploadUrls FileUploadUrls { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="zipUploadUrl")]
		public string ZipUploadUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileUploadUrls
	{
	}
	
	/// <summary>
	///  The result structure for the create domain association request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDomainAssociationResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainAssociation")]
		public DomainAssociation DomainAssociation { get; set; }
	}
	
	/// <summary>
	///  Describes a domain association that associates a custom domain with an Amplify app. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DomainAssociation
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainAssociationArn")]
		public string DomainAssociationArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="enableAutoSubDomain")]
		public bool EnableAutoSubDomain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoSubDomainCreationPatterns")]
		public string[] AutoSubDomainCreationPatterns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoSubDomainIAMRole")]
		public string AutoSubDomainIAMRole { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainStatus")]
		public DomainStatus DomainStatus { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="certificateVerificationDNSRecord")]
		public string CertificateVerificationDNSRecord { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subDomains")]
		public SubDomain[] SubDomains { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum DomainStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_VERIFICATION")]
		PENDING_VERIFICATION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_PROGRESS")]
		IN_PROGRESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AVAILABLE")]
		AVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING_DEPLOYMENT")]
		PENDING_DEPLOYMENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CREATING")]
		CREATING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REQUESTING_CERTIFICATE")]
		REQUESTING_CERTIFICATE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UPDATING")]
		UPDATING = 7,
	}
	
	/// <summary>
	///  The subdomain for the domain association. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubDomain
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subDomainSetting")]
		public SubDomainSetting SubDomainSetting { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="verified")]
		public bool Verified { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dnsRecord")]
		public string DnsRecord { get; set; }
	}
	
	/// <summary>
	///  Describes the settings for the subdomain. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SubDomainSetting
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="prefix")]
		public string Prefix { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
	}
	
	/// <summary>
	///  The result structure for the create webhook request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWebhookResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhook")]
		public Webhook Webhook { get; set; }
	}
	
	/// <summary>
	///  Describes a webhook that connects repository events to an Amplify app. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Webhook
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhookArn")]
		public string WebhookArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhookId")]
		public string WebhookId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhookUrl")]
		public string WebhookUrl { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public System.DateTimeOffset CreateTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public System.DateTimeOffset UpdateTime { get; set; }
	}
	
	/// <summary>
	///  The result structure for the delete app request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAppResult
	{
		
		/// <summary>
		///  Represents the different branches of a repository for building, deploying, and hosting an Amplify app. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="app")]
		public App App { get; set; }
	}
	
	/// <summary>
	///  The result structure of the delete backend environment result. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBackendEnvironmentResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="backendEnvironment")]
		public BackendEnvironment BackendEnvironment { get; set; }
	}
	
	/// <summary>
	///  The result structure for the delete branch request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBranchResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public Branch Branch { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDomainAssociationResult
	{
		
		/// <summary>
		///  Describes a domain association that associates a custom domain with an Amplify app. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainAssociation")]
		public DomainAssociation DomainAssociation { get; set; }
	}
	
	/// <summary>
	///  The result structure for the delete job request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteJobResult
	{
		
		/// <summary>
		///  Describes the summary for an execution job for an Amplify app. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobSummary")]
		public JobSummary JobSummary { get; set; }
	}
	
	/// <summary>
	///  Describes the summary for an execution job for an Amplify app. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class JobSummary
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobArn")]
		public string JobArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commitMessage")]
		public string CommitMessage { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="commitTime")]
		public System.DateTimeOffset CommitTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobType")]
		public JobType JobType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JobStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PENDING")]
		PENDING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PROVISIONING")]
		PROVISIONING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RUNNING")]
		RUNNING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAILED")]
		FAILED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUCCEED")]
		SUCCEED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLING")]
		CANCELLING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CANCELLED")]
		CANCELLED = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum JobType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RELEASE")]
		RELEASE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RETRY")]
		RETRY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MANUAL")]
		MANUAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEB_HOOK")]
		WEB_HOOK = 3,
	}
	
	/// <summary>
	///  The result structure for the delete webhook request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWebhookResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhook")]
		public Webhook Webhook { get; set; }
	}
	
	/// <summary>
	///  The result structure for the generate access logs request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateAccessLogsResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="logUrl")]
		public string LogUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAppResult
	{
		
		/// <summary>
		///  Represents the different branches of a repository for building, deploying, and hosting an Amplify app. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="app")]
		public App App { get; set; }
	}
	
	/// <summary>
	///  Returns the result structure for the get artifact request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetArtifactUrlResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="artifactId")]
		public string ArtifactId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="artifactUrl")]
		public string ArtifactUrl { get; set; }
	}
	
	/// <summary>
	///  The result structure for the get backend environment result. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBackendEnvironmentResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="backendEnvironment")]
		public BackendEnvironment BackendEnvironment { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBranchResult
	{
		
		/// <summary>
		///  The branch for an Amplify app, which maps to a third-party repository branch. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public Branch Branch { get; set; }
	}
	
	/// <summary>
	///  The result structure for the get domain association request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDomainAssociationResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainAssociation")]
		public DomainAssociation DomainAssociation { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetJobResult
	{
		
		/// <summary>
		///  Describes an execution job for an Amplify app. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="job")]
		public Job Job { get; set; }
	}
	
	/// <summary>
	///  Describes an execution job for an Amplify app. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Job
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public JobSummary Summary { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public Step[] Steps { get; set; }
	}
	
	/// <summary>
	///  Describes an execution step, for an execution job, for an Amplify app. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Step
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="stepName")]
		public string StepName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public JobStatus Status { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="logUrl")]
		public string LogUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="artifactsUrl")]
		public string ArtifactsUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testArtifactsUrl")]
		public string TestArtifactsUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="testConfigUrl")]
		public string TestConfigUrl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="screenshots")]
		public Screenshots Screenshots { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="statusReason")]
		public string StatusReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="context")]
		public string Context { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Screenshots
	{
	}
	
	/// <summary>
	///  The result structure for the get webhook request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetWebhookResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhook")]
		public Webhook Webhook { get; set; }
	}
	
	/// <summary>
	///  The result structure for an Amplify app list request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="apps")]
		public App[] Apps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  The result structure for the list artifacts request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListArtifactsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="artifacts")]
		public Artifact[] Artifacts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  Describes an artifact. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Artifact
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="artifactFileName")]
		public string ArtifactFileName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="artifactId")]
		public string ArtifactId { get; set; }
	}
	
	/// <summary>
	///  The result structure for the list backend environments result. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBackendEnvironmentsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="backendEnvironments")]
		public BackendEnvironment[] BackendEnvironments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  The result structure for the list branches request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBranchesResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branches")]
		public Branch[] Branches { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  The result structure for the list domain association request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDomainAssociationsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainAssociations")]
		public DomainAssociation[] DomainAssociations { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  The maximum number of records to list in a single response. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListJobsResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobSummaries")]
		public JobSummary[] JobSummaries { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  The response for the list tags for resource request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResourceNotFoundException
	{
	}
	
	/// <summary>
	///  The result structure for the list webhooks request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWebhooksResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhooks")]
		public Webhook[] Webhooks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextToken")]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	///  The result structure for the start a deployment request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartDeploymentResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobSummary")]
		public JobSummary JobSummary { get; set; }
	}
	
	/// <summary>
	///  The result structure for the run job request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartJobResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobSummary")]
		public JobSummary JobSummary { get; set; }
	}
	
	/// <summary>
	///  The result structure for the stop job request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopJobResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobSummary")]
		public JobSummary JobSummary { get; set; }
	}
	
	/// <summary>
	///  The response for the tag resource request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceResponse
	{
	}
	
	/// <summary>
	///  The response for the untag resource request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceResponse
	{
	}
	
	/// <summary>
	///  The result structure for an Amplify app update request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAppResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="app")]
		public App App { get; set; }
	}
	
	/// <summary>
	///  The result structure for the update branch request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBranchResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branch")]
		public Branch Branch { get; set; }
	}
	
	/// <summary>
	///  The result structure for the update domain association request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDomainAssociationResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainAssociation")]
		public DomainAssociation DomainAssociation { get; set; }
	}
	
	/// <summary>
	///  The result structure for the update webhook request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWebhookResult
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="webhook")]
		public Webhook Webhook { get; set; }
	}
	
	/// <summary>
	///  The request structure used to create apps in Amplify. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateAppRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamServiceRoleArn")]
		public string IamServiceRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oauthToken")]
		public string OauthToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public EnvironmentVariables EnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableBranchAutoBuild")]
		public System.Nullable<System.Boolean> EnableBranchAutoBuild { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableBranchAutoDeletion")]
		public System.Nullable<System.Boolean> EnableBranchAutoDeletion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableBasicAuth")]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public string BasicAuthCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customRules")]
		public CustomRule[] CustomRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildSpec")]
		public string BuildSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customHeaders")]
		public string CustomHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableAutoBranchCreation")]
		public System.Nullable<System.Boolean> EnableAutoBranchCreation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoBranchCreationPatterns")]
		public string[] AutoBranchCreationPatterns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoBranchCreationConfig")]
		public AutoBranchCreationConfig AutoBranchCreationConfig { get; set; }
	}
	
	/// <summary>
	///  The request structure for the backend environment create request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBackendEnvironmentRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentName")]
		public string EnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stackName")]
		public string StackName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deploymentArtifacts")]
		public string DeploymentArtifacts { get; set; }
	}
	
	/// <summary>
	///  The request structure for the create branch request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateBranchRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public Stage Stage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="framework")]
		public string Framework { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableNotification")]
		public System.Nullable<System.Boolean> EnableNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableAutoBuild")]
		public System.Nullable<System.Boolean> EnableAutoBuild { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public EnvironmentVariables EnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public string BasicAuthCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableBasicAuth")]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enablePerformanceMode")]
		public System.Nullable<System.Boolean> EnablePerformanceMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildSpec")]
		public string BuildSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enablePullRequestPreview")]
		public System.Nullable<System.Boolean> EnablePullRequestPreview { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestEnvironmentName")]
		public string PullRequestEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backendEnvironmentArn")]
		public string BackendEnvironmentArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class FileMap
	{
	}
	
	/// <summary>
	///  The request structure for the create a new deployment request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDeploymentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="fileMap")]
		public FileMap FileMap { get; set; }
	}
	
	/// <summary>
	///  The request structure for the create domain association request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateDomainAssociationRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableAutoSubDomain")]
		public System.Nullable<System.Boolean> EnableAutoSubDomain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subDomainSettings")]
		public SubDomainSetting[] SubDomainSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoSubDomainCreationPatterns")]
		public string[] AutoSubDomainCreationPatterns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoSubDomainIAMRole")]
		public string AutoSubDomainIAMRole { get; set; }
	}
	
	/// <summary>
	///  The request structure for the create webhook request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CreateWebhookRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	/// <summary>
	///  Describes the request structure for the delete app request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteAppRequest
	{
	}
	
	/// <summary>
	///  The request structure for the delete backend environment request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBackendEnvironmentRequest
	{
	}
	
	/// <summary>
	///  The request structure for the delete branch request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteBranchRequest
	{
	}
	
	/// <summary>
	///  The request structure for the delete domain association request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteDomainAssociationRequest
	{
	}
	
	/// <summary>
	///  The request structure for the delete job request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteJobRequest
	{
	}
	
	/// <summary>
	///  The request structure for the delete webhook request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeleteWebhookRequest
	{
	}
	
	/// <summary>
	///  The request structure for the generate access logs request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GenerateAccessLogsRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.DateTimeOffset StartTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.DateTimeOffset EndTime { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		public string DomainName { get; set; }
	}
	
	/// <summary>
	///  The request structure for the get app request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetAppRequest
	{
	}
	
	/// <summary>
	///  Returns the request structure for the get artifact request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetArtifactUrlRequest
	{
	}
	
	/// <summary>
	///  The request structure for the get backend environment request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBackendEnvironmentRequest
	{
	}
	
	/// <summary>
	///  The request structure for the get branch request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetBranchRequest
	{
	}
	
	/// <summary>
	///  The request structure for the get domain association request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetDomainAssociationRequest
	{
	}
	
	/// <summary>
	///  The request structure for the get job request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetJobRequest
	{
	}
	
	/// <summary>
	///  The request structure for the get webhook request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class GetWebhookRequest
	{
	}
	
	/// <summary>
	///  The request structure for the list apps request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListAppsRequest
	{
	}
	
	/// <summary>
	///  Describes the request structure for the list artifacts request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListArtifactsRequest
	{
	}
	
	/// <summary>
	///  The request structure for the list backend environments request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBackendEnvironmentsRequest
	{
	}
	
	/// <summary>
	///  The request structure for the list branches request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListBranchesRequest
	{
	}
	
	/// <summary>
	///  The request structure for the list domain associations request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListDomainAssociationsRequest
	{
	}
	
	/// <summary>
	///  The request structure for the list jobs request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListJobsRequest
	{
	}
	
	/// <summary>
	///  The request structure to use to list tags for a resource. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListTagsForResourceRequest
	{
	}
	
	/// <summary>
	///  The request structure for the list webhooks request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ListWebhooksRequest
	{
	}
	
	/// <summary>
	///  The request structure for the start a deployment request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartDeploymentRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sourceUrl")]
		public string SourceUrl { get; set; }
	}
	
	/// <summary>
	///  The request structure for the start job request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StartJobRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		public string JobId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobType")]
		public JobType JobType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="jobReason")]
		public string JobReason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		public string CommitId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitMessage")]
		public string CommitMessage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="commitTime")]
		public System.DateTimeOffset CommitTime { get; set; }
	}
	
	/// <summary>
	///  The request structure for the stop job request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopJobRequest
	{
	}
	
	/// <summary>
	///  The request structure to tag a resource with a tag key and value. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TagResourceRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public TagMap Tags { get; set; }
	}
	
	/// <summary>
	///  The request structure for the untag resource request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UntagResourceRequest
	{
	}
	
	/// <summary>
	///  The request structure for the update app request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateAppRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iamServiceRoleArn")]
		public string IamServiceRoleArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public EnvironmentVariables EnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableBranchAutoBuild")]
		public System.Nullable<System.Boolean> EnableBranchAutoBuild { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableBranchAutoDeletion")]
		public System.Nullable<System.Boolean> EnableBranchAutoDeletion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableBasicAuth")]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public string BasicAuthCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customRules")]
		public CustomRule[] CustomRules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildSpec")]
		public string BuildSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="customHeaders")]
		public string CustomHeaders { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableAutoBranchCreation")]
		public System.Nullable<System.Boolean> EnableAutoBranchCreation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoBranchCreationPatterns")]
		public string[] AutoBranchCreationPatterns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoBranchCreationConfig")]
		public AutoBranchCreationConfig AutoBranchCreationConfig { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="repository")]
		public string Repository { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="oauthToken")]
		public string OauthToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		public string AccessToken { get; set; }
	}
	
	/// <summary>
	///  The request structure for the update branch request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateBranchRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="framework")]
		public string Framework { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public Stage Stage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableNotification")]
		public System.Nullable<System.Boolean> EnableNotification { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableAutoBuild")]
		public System.Nullable<System.Boolean> EnableAutoBuild { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public EnvironmentVariables EnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public string BasicAuthCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableBasicAuth")]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enablePerformanceMode")]
		public System.Nullable<System.Boolean> EnablePerformanceMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildSpec")]
		public string BuildSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		public string Ttl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enablePullRequestPreview")]
		public System.Nullable<System.Boolean> EnablePullRequestPreview { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestEnvironmentName")]
		public string PullRequestEnvironmentName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="backendEnvironmentArn")]
		public string BackendEnvironmentArn { get; set; }
	}
	
	/// <summary>
	///  The request structure for the update domain association request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateDomainAssociationRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="enableAutoSubDomain")]
		public System.Nullable<System.Boolean> EnableAutoSubDomain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subDomainSettings")]
		public SubDomainSetting[] SubDomainSettings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoSubDomainCreationPatterns")]
		public string[] AutoSubDomainCreationPatterns { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="autoSubDomainIAMRole")]
		public string AutoSubDomainIAMRole { get; set; }
	}
	
	/// <summary>
	///  The request structure for the update webhook request. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateWebhookRequest
	{
		
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		public string BranchName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Creates a new Amplify app.
		/// CreateApp apps
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CreateAppResult> CreateAppAsync(CreateAppPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateAppResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the existing Amplify apps.
		/// ListApps apps
		/// </summary>
		/// <param name="nextToken"> A pagination token. If non-null, the pagination token is returned in a result. Pass its value in another request to retrieve more entries. </param>
		/// <param name="maxResults"> The maximum number of records to list in a single response. </param>
		/// <returns>Success</returns>
		public async Task<ListAppsResult> ListAppsAsync(string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps?nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListAppsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new backend environment for an Amplify app.
		/// CreateBackendEnvironment apps/{appId}/backendenvironments
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <returns>Success</returns>
		public async Task<CreateBackendEnvironmentResult> CreateBackendEnvironmentAsync(string appId, CreateBackendEnvironmentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/backendenvironments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateBackendEnvironmentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the backend environments for an Amplify app.
		/// ListBackendEnvironments apps/{appId}/backendenvironments
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <param name="environmentName"> The name of the backend environment </param>
		/// <param name="nextToken"> A pagination token. Set to null to start listing backend environments from the start. If a non-null pagination token is returned in a result, pass its value in here to list more backend environments. </param>
		/// <param name="maxResults"> The maximum number of records to list in a single response. </param>
		/// <returns>Success</returns>
		public async Task<ListBackendEnvironmentsResult> ListBackendEnvironmentsAsync(string appId, string environmentName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/backendenvironments&environmentName=" + (environmentName==null? "" : System.Uri.EscapeDataString(environmentName))+"&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBackendEnvironmentsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new branch for an Amplify app.
		/// CreateBranch apps/{appId}/branches
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <returns>Success</returns>
		public async Task<CreateBranchResult> CreateBranchAsync(string appId, CreateBranchPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/branches";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateBranchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Lists the branches of an Amplify app.
		/// ListBranches apps/{appId}/branches
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <param name="nextToken"> A pagination token. Set to null to start listing branches from the start. If a non-null pagination token is returned in a result, pass its value in here to list more branches. </param>
		/// <param name="maxResults"> The maximum number of records to list in a single response. </param>
		/// <returns>Success</returns>
		public async Task<ListBranchesResult> ListBranchesAsync(string appId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/branches&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListBranchesResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a deployment for a manually deployed Amplify app. Manually deployed apps are not connected to a repository.
		/// CreateDeployment apps/{appId}/branches/{branchName}/deployments
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <param name="branchName"> The name for the branch, for the job. </param>
		/// <returns>Success</returns>
		public async Task<CreateDeploymentResult> CreateDeploymentAsync(string appId, string branchName, CreateDeploymentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : System.Uri.EscapeDataString(branchName))+"/deployments";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDeploymentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Creates a new domain association for an Amplify app. This action associates a custom domain with the Amplify app
		/// CreateDomainAssociation apps/{appId}/domains
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <returns>Success</returns>
		public async Task<CreateDomainAssociationResult> CreateDomainAssociationAsync(string appId, CreateDomainAssociationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/domains";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateDomainAssociationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the domain associations for an Amplify app.
		/// ListDomainAssociations apps/{appId}/domains
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <param name="nextToken"> A pagination token. Set to null to start listing apps from the start. If non-null, a pagination token is returned in a result. Pass its value in here to list more projects. </param>
		/// <param name="maxResults"> The maximum number of records to list in a single response. </param>
		/// <returns>Success</returns>
		public async Task<ListDomainAssociationsResult> ListDomainAssociationsAsync(string appId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/domains&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListDomainAssociationsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new webhook on an Amplify app.
		/// CreateWebhook apps/{appId}/webhooks
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <returns>Success</returns>
		public async Task<CreateWebhookResult> CreateWebhookAsync(string appId, CreateWebhookPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/webhooks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CreateWebhookResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of webhooks for an Amplify app.
		/// ListWebhooks apps/{appId}/webhooks
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <param name="nextToken"> A pagination token. Set to null to start listing webhooks from the start. If non-null,the pagination token is returned in a result. Pass its value in here to list more webhooks. </param>
		/// <param name="maxResults"> The maximum number of records to list in a single response. </param>
		/// <returns>Success</returns>
		public async Task<ListWebhooksResult> ListWebhooksAsync(string appId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/webhooks&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListWebhooksResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an existing Amplify app specified by an app ID.
		/// DeleteApp apps/{appId}
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <returns>Success</returns>
		public async Task<DeleteAppResult> DeleteAppAsync(string appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteAppResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an existing Amplify app by appID.
		/// GetApp apps/{appId}
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <returns>Success</returns>
		public async Task<GetAppResult> GetAppAsync(string appId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetAppResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing Amplify app.
		/// UpdateApp apps/{appId}
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <returns>Success</returns>
		public async Task<UpdateAppResult> UpdateAppAsync(string appId, UpdateAppPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateAppResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a backend environment for an Amplify app.
		/// DeleteBackendEnvironment apps/{appId}/backendenvironments/{environmentName}
		/// </summary>
		/// <param name="appId"> The unique ID of an Amplify app. </param>
		/// <param name="environmentName"> The name of a backend environment of an Amplify app. </param>
		/// <returns>Success</returns>
		public async Task<DeleteBackendEnvironmentResult> DeleteBackendEnvironmentAsync(string appId, string environmentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/backendenvironments/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteBackendEnvironmentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a backend environment for an Amplify app.
		/// GetBackendEnvironment apps/{appId}/backendenvironments/{environmentName}
		/// </summary>
		/// <param name="appId"> The unique id for an Amplify app. </param>
		/// <param name="environmentName"> The name for the backend environment. </param>
		/// <returns>Success</returns>
		public async Task<GetBackendEnvironmentResult> GetBackendEnvironmentAsync(string appId, string environmentName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/backendenvironments/"+ (environmentName==null? "" : System.Uri.EscapeDataString(environmentName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBackendEnvironmentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a branch for an Amplify app.
		/// DeleteBranch apps/{appId}/branches/{branchName}
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <param name="branchName"> The name for the branch. </param>
		/// <returns>Success</returns>
		public async Task<DeleteBranchResult> DeleteBranchAsync(string appId, string branchName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : System.Uri.EscapeDataString(branchName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteBranchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a branch for an Amplify app.
		/// GetBranch apps/{appId}/branches/{branchName}
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <param name="branchName"> The name for the branch. </param>
		/// <returns>Success</returns>
		public async Task<GetBranchResult> GetBranchAsync(string appId, string branchName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : System.Uri.EscapeDataString(branchName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetBranchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a branch for an Amplify app.
		/// UpdateBranch apps/{appId}/branches/{branchName}
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <param name="branchName"> The name for the branch. </param>
		/// <returns>Success</returns>
		public async Task<UpdateBranchResult> UpdateBranchAsync(string appId, string branchName, UpdateBranchPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : System.Uri.EscapeDataString(branchName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateBranchResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a domain association for an Amplify app.
		/// DeleteDomainAssociation apps/{appId}/domains/{domainName}
		/// </summary>
		/// <param name="appId"> The unique id for an Amplify app. </param>
		/// <param name="domainName"> The name of the domain. </param>
		/// <returns>Success</returns>
		public async Task<DeleteDomainAssociationResult> DeleteDomainAssociationAsync(string appId, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteDomainAssociationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the domain information for an Amplify app.
		/// GetDomainAssociation apps/{appId}/domains/{domainName}
		/// </summary>
		/// <param name="appId"> The unique id for an Amplify app. </param>
		/// <param name="domainName"> The name of the domain. </param>
		/// <returns>Success</returns>
		public async Task<GetDomainAssociationResult> GetDomainAssociationAsync(string appId, string domainName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetDomainAssociationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new domain association for an Amplify app.
		/// UpdateDomainAssociation apps/{appId}/domains/{domainName}
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <param name="domainName"> The name of the domain. </param>
		/// <returns>Success</returns>
		public async Task<UpdateDomainAssociationResult> UpdateDomainAssociationAsync(string appId, string domainName, UpdateDomainAssociationPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/domains/"+ (domainName==null? "" : System.Uri.EscapeDataString(domainName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateDomainAssociationResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Deletes a job for a branch of an Amplify app.
		/// DeleteJob apps/{appId}/branches/{branchName}/jobs/{jobId}
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <param name="branchName"> The name for the branch, for the job. </param>
		/// <param name="jobId"> The unique ID for the job. </param>
		/// <returns>Success</returns>
		public async Task<DeleteJobResult> DeleteJobAsync(string appId, string branchName, string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : System.Uri.EscapeDataString(branchName))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a job for a branch of an Amplify app.
		/// GetJob apps/{appId}/branches/{branchName}/jobs/{jobId}
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <param name="branchName"> The branch name for the job. </param>
		/// <param name="jobId"> The unique ID for the job. </param>
		/// <returns>Success</returns>
		public async Task<GetJobResult> GetJobAsync(string appId, string branchName, string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : System.Uri.EscapeDataString(branchName))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a webhook.
		/// DeleteWebhook webhooks/{webhookId}
		/// </summary>
		/// <param name="webhookId"> The unique ID for a webhook. </param>
		/// <returns>Success</returns>
		public async Task<DeleteWebhookResult> DeleteWebhookAsync(string webhookId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DeleteWebhookResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the webhook information that corresponds to a specified webhook ID.
		/// GetWebhook webhooks/{webhookId}
		/// </summary>
		/// <param name="webhookId"> The unique ID for a webhook. </param>
		/// <returns>Success</returns>
		public async Task<GetWebhookResult> GetWebhookAsync(string webhookId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetWebhookResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a webhook.
		/// UpdateWebhook webhooks/{webhookId}
		/// </summary>
		/// <param name="webhookId"> The unique ID for a webhook. </param>
		/// <returns>Success</returns>
		public async Task<UpdateWebhookResult> UpdateWebhookAsync(string webhookId, UpdateWebhookPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "webhooks/"+ (webhookId==null? "" : System.Uri.EscapeDataString(webhookId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UpdateWebhookResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the website access logs for a specific time range using a presigned URL.
		/// GenerateAccessLogs apps/{appId}/accesslogs
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <returns>Success</returns>
		public async Task<GenerateAccessLogsResult> GenerateAccessLogsAsync(string appId, GenerateAccessLogsPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/accesslogs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GenerateAccessLogsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns the artifact info that corresponds to an artifact id.
		/// GetArtifactUrl artifacts/{artifactId}
		/// </summary>
		/// <param name="artifactId"> The unique ID for an artifact. </param>
		/// <returns>Success</returns>
		public async Task<GetArtifactUrlResult> GetArtifactUrlAsync(string artifactId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "artifacts/"+ (artifactId==null? "" : System.Uri.EscapeDataString(artifactId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<GetArtifactUrlResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of artifacts for a specified app, branch, and job.
		/// ListArtifacts apps/{appId}/branches/{branchName}/jobs/{jobId}/artifacts
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <param name="branchName"> The name of a branch that is part of an Amplify app. </param>
		/// <param name="jobId"> The unique ID for a job. </param>
		/// <param name="nextToken"> A pagination token. Set to null to start listing artifacts from start. If a non-null pagination token is returned in a result, pass its value in here to list more artifacts. </param>
		/// <param name="maxResults"> The maximum number of records to list in a single response. </param>
		/// <returns>Success</returns>
		public async Task<ListArtifactsResult> ListArtifactsAsync(string appId, string branchName, string jobId, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : System.Uri.EscapeDataString(branchName))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/artifacts&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListArtifactsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the jobs for a branch of an Amplify app.
		/// ListJobs apps/{appId}/branches/{branchName}/jobs
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <param name="branchName"> The name for a branch. </param>
		/// <param name="nextToken"> A pagination token. Set to null to start listing steps from the start. If a non-null pagination token is returned in a result, pass its value in here to list more steps. </param>
		/// <param name="maxResults"> The maximum number of records to list in a single response. </param>
		/// <returns>Success</returns>
		public async Task<ListJobsResult> ListJobsAsync(string appId, string branchName, string nextToken, int maxResults, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : System.Uri.EscapeDataString(branchName))+"/jobs&nextToken=" + (nextToken==null? "" : System.Uri.EscapeDataString(nextToken))+"&maxResults="+maxResults;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListJobsResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Starts a new job for a branch of an Amplify app.
		/// StartJob apps/{appId}/branches/{branchName}/jobs
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <param name="branchName"> The branch name for the job. </param>
		/// <returns>Success</returns>
		public async Task<StartJobResult> StartJobAsync(string appId, string branchName, StartJobPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : System.Uri.EscapeDataString(branchName))+"/jobs";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Returns a list of tags for a specified Amazon Resource Name (ARN).
		/// ListTagsForResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn"> The Amazon Resource Name (ARN) to use to list tags. </param>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceResponse> ListTagsForResourceAsync(string resourceArn, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListTagsForResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Tags the resource with a tag key and value.
		/// TagResource tags/{resourceArn}
		/// </summary>
		/// <param name="resourceArn"> The Amazon Resource Name (ARN) to use to tag a resource. </param>
		/// <returns>Success</returns>
		public async Task<TagResourceResponse> TagResourceAsync(string resourceArn, TagResourcePostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Starts a deployment for a manually deployed app. Manually deployed apps are not connected to a repository.
		/// StartDeployment apps/{appId}/branches/{branchName}/deployments/start
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <param name="branchName"> The name for the branch, for the job. </param>
		/// <returns>Success</returns>
		public async Task<StartDeploymentResult> StartDeploymentAsync(string appId, string branchName, StartDeploymentPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : System.Uri.EscapeDataString(branchName))+"/deployments/start";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StartDeploymentResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Stops a job that is in progress for a branch of an Amplify app.
		/// StopJob apps/{appId}/branches/{branchName}/jobs/{jobId}/stop
		/// </summary>
		/// <param name="appId"> The unique ID for an Amplify app. </param>
		/// <param name="branchName"> The name for the branch, for the job. </param>
		/// <param name="jobId"> The unique id for the job. </param>
		/// <returns>Success</returns>
		public async Task<StopJobResult> StopJobAsync(string appId, string branchName, string jobId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "apps/"+ (appId==null? "" : System.Uri.EscapeDataString(appId))+"/branches/"+ (branchName==null? "" : System.Uri.EscapeDataString(branchName))+"/jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/stop";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopJobResult>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Untags a resource with a specified Amazon Resource Name (ARN).
		/// UntagResource tags/{resourceArn}#tagKeys
		/// </summary>
		/// <param name="resourceArn"> The Amazon Resource Name (ARN) to use to untag a resource. </param>
		/// <param name="tagKeys"> The tag keys to use to untag a resource. </param>
		/// <returns>Success</returns>
		public async Task<UntagResourceResponse> UntagResourceAsync(string resourceArn, string[] tagKeys, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tags/"+ (resourceArn==null? "" : System.Uri.EscapeDataString(resourceArn))+"#tagKeys&"+string.Join("&", tagKeys.Select(z => $"tagKeys={System.Uri.EscapeDataString(z.ToString())}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UntagResourceResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class CreateAppPostBody
	{
		
		/// <summary>
		///  The name for an Amplify app. 
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// Pattern: \(\?s\).\+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).\+")]
		public string Name { get; set; }
		
		/// <summary>
		///  The description for an Amplify app. 
		/// Max length: 1000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string Description { get; set; }
		
		/// <summary>
		///  The repository for an Amplify app. 
		/// Max length: 1000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string Repository { get; set; }
		
		/// <summary>
		///  The platform for the Amplify app. For a static app, set the platform type to <code>WEB</code>. For a dynamic server-side rendered (SSR) app, set the platform type to <code>WEB_COMPUTE</code>. For an app requiring Amplify Hosting's original SSR support only, set the platform type to <code>WEB_DYNAMIC</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		/// <summary>
		///  The AWS Identity and Access Management (IAM) service role for an Amplify app. 
		/// Max length: 1000
		/// Min length: 0
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iamServiceRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string IamServiceRoleArn { get; set; }
		
		/// <summary>
		/// <p>The OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key using SSH cloning. The OAuth token is not stored.</p> <p>Use <code>oauthToken</code> for repository providers other than GitHub, such as Bitbucket or CodeCommit. To authorize access to GitHub as your repository provider, use <code>accessToken</code>.</p> <p>You must specify either <code>oauthToken</code> or <code>accessToken</code> when you create a new app.</p> <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href="https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>
		/// Max length: 1000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string OauthToken { get; set; }
		
		/// <summary>
		/// <p>The personal access token for a GitHub repository for an Amplify app. The personal access token is used to authorize access to a GitHub repository using the Amplify GitHub App. The token is not stored.</p> <p>Use <code>accessToken</code> for GitHub repositories only. To authorize access to a repository provider such as Bitbucket or CodeCommit, use <code>oauthToken</code>.</p> <p>You must specify either <code>accessToken</code> or <code>oauthToken</code> when you create a new app.</p> <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href="https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>
		/// Max length: 255
		/// Min length: 1
		/// Pattern: \(\?s\).\+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).\+")]
		public string AccessToken { get; set; }
		
		/// <summary>
		///  The environment variables map for an Amplify app. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public System.Collections.Generic.Dictionary<string, string> EnvironmentVariables { get; set; }
		
		/// <summary>
		///  Enables the auto building of branches for an Amplify app. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableBranchAutoBuild")]
		public System.Nullable<System.Boolean> EnableBranchAutoBuild { get; set; }
		
		/// <summary>
		///  Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableBranchAutoDeletion")]
		public System.Nullable<System.Boolean> EnableBranchAutoDeletion { get; set; }
		
		/// <summary>
		///  Enables basic authorization for an Amplify app. This will apply to all branches that are part of this app. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableBasicAuth")]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		/// <summary>
		///  The credentials for basic authorization for an Amplify app. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.
		/// Max length: 2000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string BasicAuthCredentials { get; set; }
		
		/// <summary>
		///  The custom rewrite and redirect rules for an Amplify app. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customRules")]
		public CustomRule[] CustomRules { get; set; }
		
		/// <summary>
		///  The tag for an Amplify app. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		///  The build specification (build spec) file for an Amplify app build. 
		/// Max length: 25000
		/// Min length: 1
		/// Pattern: \(\?s\).\+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildSpec")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).\+")]
		public string BuildSpec { get; set; }
		
		/// <summary>
		/// The custom HTTP headers for an Amplify app.
		/// Max length: 25000
		/// Min length: 0
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customHeaders")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string CustomHeaders { get; set; }
		
		/// <summary>
		///  Enables automated branch creation for an Amplify app. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutoBranchCreation")]
		public System.Nullable<System.Boolean> EnableAutoBranchCreation { get; set; }
		
		/// <summary>
		///  The automated branch creation glob patterns for an Amplify app. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoBranchCreationPatterns")]
		public string[] AutoBranchCreationPatterns { get; set; }
		
		/// <summary>
		///  Describes the automated branch creation configuration. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoBranchCreationConfig")]
		public CreateAppPostBodyAutoBranchCreationConfig AutoBranchCreationConfig { get; set; }
	}
	
	public class CreateAppPostBodyAutoBranchCreationConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public Stage Stage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="framework")]
		public string Framework { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableAutoBuild")]
		public System.Nullable<System.Boolean> EnableAutoBuild { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public EnvironmentVariables EnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public string BasicAuthCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableBasicAuth")]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enablePerformanceMode")]
		public System.Nullable<System.Boolean> EnablePerformanceMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildSpec")]
		public string BuildSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enablePullRequestPreview")]
		public System.Nullable<System.Boolean> EnablePullRequestPreview { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestEnvironmentName")]
		public string PullRequestEnvironmentName { get; set; }
	}
	
	public class CreateBackendEnvironmentPostBody
	{
		
		/// <summary>
		///  The name for the backend environment. 
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// Pattern: \(\?s\).\+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="environmentName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).\+")]
		public string EnvironmentName { get; set; }
		
		/// <summary>
		///  The AWS CloudFormation stack name of a backend environment. 
		/// Max length: 255
		/// Min length: 1
		/// Pattern: \(\?s\).\+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stackName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).\+")]
		public string StackName { get; set; }
		
		/// <summary>
		///  The name of deployment artifacts. 
		/// Max length: 1000
		/// Min length: 1
		/// Pattern: \(\?s\).\+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deploymentArtifacts")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).\+")]
		public string DeploymentArtifacts { get; set; }
	}
	
	public class CreateBranchPostBody
	{
		
		/// <summary>
		///  The name for the branch. 
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// Pattern: \(\?s\).\+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).\+")]
		public string BranchName { get; set; }
		
		/// <summary>
		///  The description for the branch. 
		/// Max length: 1000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string Description { get; set; }
		
		/// <summary>
		///  Describes the current stage for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public Stage Stage { get; set; }
		
		/// <summary>
		///  The framework for the branch. 
		/// Max length: 255
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="framework")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string Framework { get; set; }
		
		/// <summary>
		///  Enables notifications for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableNotification")]
		public System.Nullable<System.Boolean> EnableNotification { get; set; }
		
		/// <summary>
		///  Enables auto building for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutoBuild")]
		public System.Nullable<System.Boolean> EnableAutoBuild { get; set; }
		
		/// <summary>
		///  The environment variables for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public System.Collections.Generic.Dictionary<string, string> EnvironmentVariables { get; set; }
		
		/// <summary>
		///  The basic authorization credentials for the branch. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.
		/// Max length: 2000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string BasicAuthCredentials { get; set; }
		
		/// <summary>
		///  Enables basic authorization for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableBasicAuth")]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		/// <summary>
		/// <p>Enables performance mode for the branch.</p> <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePerformanceMode")]
		public System.Nullable<System.Boolean> EnablePerformanceMode { get; set; }
		
		/// <summary>
		///  The tag for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
		
		/// <summary>
		///  The build specification (build spec) file for an Amplify app build. 
		/// Max length: 25000
		/// Min length: 1
		/// Pattern: \(\?s\).\+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildSpec")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).\+")]
		public string BuildSpec { get; set; }
		
		/// <summary>
		///  The content Time to Live (TTL) for the website in seconds. 
		/// Max length: 32
		/// Min length: 0
		/// Pattern: \d*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\d*")]
		public string Ttl { get; set; }
		
		/// <summary>
		///  The display name for a branch. This is used as the default domain prefix. 
		/// Max length: 255
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string DisplayName { get; set; }
		
		/// <summary>
		///  Enables pull request previews for this branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePullRequestPreview")]
		public System.Nullable<System.Boolean> EnablePullRequestPreview { get; set; }
		
		/// <summary>
		///  The Amplify environment name for the pull request. 
		/// Max length: 20
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestEnvironmentName")]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string PullRequestEnvironmentName { get; set; }
		
		/// <summary>
		///  The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app. 
		/// Max length: 1000
		/// Min length: 0
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backendEnvironmentArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string BackendEnvironmentArn { get; set; }
	}
	
	public class CreateDeploymentPostBody
	{
		
		/// <summary>
		///  An optional file map that contains the file name as the key and the file content md5 hash as the value. If this argument is provided, the service will generate a unique upload URL per file. Otherwise, the service will only generate a single upload URL for the zipped files. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileMap")]
		public System.Collections.Generic.Dictionary<string, string> FileMap { get; set; }
	}
	
	public class CreateDomainAssociationPostBody
	{
		
		/// <summary>
		///  The domain name for the domain association. 
		/// Required
		/// Max length: 64
		/// Pattern: ^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\.)?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\.)?$")]
		public string DomainName { get; set; }
		
		/// <summary>
		///  Enables the automated creation of subdomains for branches. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutoSubDomain")]
		public System.Nullable<System.Boolean> EnableAutoSubDomain { get; set; }
		
		/// <summary>
		///  The setting for the subdomain. 
		/// Required
		/// Maximum items: 500
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="subDomainSettings")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public SubDomainSetting[] SubDomainSettings { get; set; }
		
		/// <summary>
		///  Sets the branch patterns for automatic subdomain creation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoSubDomainCreationPatterns")]
		public string[] AutoSubDomainCreationPatterns { get; set; }
		
		/// <summary>
		///  The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. 
		/// Max length: 1000
		/// Pattern: ^$|^arn:aws:iam::\d{12}:role.+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoSubDomainIAMRole")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^$|^arn:aws:iam::\d{12}:role.+")]
		public string AutoSubDomainIAMRole { get; set; }
	}
	
	public class CreateWebhookPostBody
	{
		
		/// <summary>
		///  The name for a branch that is part of an Amplify app. 
		/// Required
		/// Max length: 255
		/// Min length: 1
		/// Pattern: \(\?s\).\+
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).\+")]
		public string BranchName { get; set; }
		
		/// <summary>
		///  The description for a webhook. 
		/// Max length: 1000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string Description { get; set; }
	}
	
	public class UpdateAppPostBody
	{
		
		/// <summary>
		///  The name for an Amplify app. 
		/// Max length: 255
		/// Min length: 1
		/// Pattern: \(\?s\).\+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).\+")]
		public string Name { get; set; }
		
		/// <summary>
		///  The description for an Amplify app. 
		/// Max length: 1000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string Description { get; set; }
		
		/// <summary>
		///  The platform for the Amplify app. For a static app, set the platform type to <code>WEB</code>. For a dynamic server-side rendered (SSR) app, set the platform type to <code>WEB_COMPUTE</code>. For an app requiring Amplify Hosting's original SSR support only, set the platform type to <code>WEB_DYNAMIC</code>.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public Platform Platform { get; set; }
		
		/// <summary>
		///  The AWS Identity and Access Management (IAM) service role for an Amplify app. 
		/// Max length: 1000
		/// Min length: 0
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iamServiceRoleArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string IamServiceRoleArn { get; set; }
		
		/// <summary>
		///  The environment variables for an Amplify app. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public System.Collections.Generic.Dictionary<string, string> EnvironmentVariables { get; set; }
		
		/// <summary>
		///  Enables branch auto-building for an Amplify app. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableBranchAutoBuild")]
		public System.Nullable<System.Boolean> EnableBranchAutoBuild { get; set; }
		
		/// <summary>
		///  Automatically disconnects a branch in the Amplify Console when you delete a branch from your Git repository. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableBranchAutoDeletion")]
		public System.Nullable<System.Boolean> EnableBranchAutoDeletion { get; set; }
		
		/// <summary>
		///  Enables basic authorization for an Amplify app. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableBasicAuth")]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		/// <summary>
		///  The basic authorization credentials for an Amplify app. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.
		/// Max length: 2000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string BasicAuthCredentials { get; set; }
		
		/// <summary>
		///  The custom redirect and rewrite rules for an Amplify app. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customRules")]
		public CustomRule[] CustomRules { get; set; }
		
		/// <summary>
		///  The build specification (build spec) file for an Amplify app build. 
		/// Max length: 25000
		/// Min length: 1
		/// Pattern: \(\?s\).\+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildSpec")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).\+")]
		public string BuildSpec { get; set; }
		
		/// <summary>
		/// The custom HTTP headers for an Amplify app.
		/// Max length: 25000
		/// Min length: 0
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customHeaders")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(25000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string CustomHeaders { get; set; }
		
		/// <summary>
		///  Enables automated branch creation for an Amplify app. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutoBranchCreation")]
		public System.Nullable<System.Boolean> EnableAutoBranchCreation { get; set; }
		
		/// <summary>
		///  Describes the automated branch creation glob patterns for an Amplify app. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoBranchCreationPatterns")]
		public string[] AutoBranchCreationPatterns { get; set; }
		
		/// <summary>
		///  Describes the automated branch creation configuration. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoBranchCreationConfig")]
		public UpdateAppPostBodyAutoBranchCreationConfig AutoBranchCreationConfig { get; set; }
		
		/// <summary>
		///  The name of the repository for an Amplify app 
		/// Max length: 1000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="repository")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string Repository { get; set; }
		
		/// <summary>
		/// <p>The OAuth token for a third-party source control system for an Amplify app. The OAuth token is used to create a webhook and a read-only deploy key using SSH cloning. The OAuth token is not stored.</p> <p>Use <code>oauthToken</code> for repository providers other than GitHub, such as Bitbucket or CodeCommit.</p> <p>To authorize access to GitHub as your repository provider, use <code>accessToken</code>.</p> <p>You must specify either <code>oauthToken</code> or <code>accessToken</code> when you update an app.</p> <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href="https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>
		/// Max length: 1000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oauthToken")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string OauthToken { get; set; }
		
		/// <summary>
		/// <p>The personal access token for a GitHub repository for an Amplify app. The personal access token is used to authorize access to a GitHub repository using the Amplify GitHub App. The token is not stored.</p> <p>Use <code>accessToken</code> for GitHub repositories only. To authorize access to a repository provider such as Bitbucket or CodeCommit, use <code>oauthToken</code>.</p> <p>You must specify either <code>accessToken</code> or <code>oauthToken</code> when you update an app.</p> <p>Existing Amplify apps deployed from a GitHub repository using OAuth continue to work with CI/CD. However, we strongly recommend that you migrate these apps to use the GitHub App. For more information, see <a href="https://docs.aws.amazon.com/amplify/latest/UserGuide/setting-up-GitHub-access.html#migrating-to-github-app-auth">Migrating an existing OAuth app to the Amplify GitHub App</a> in the <i>Amplify User Guide</i> .</p>
		/// Max length: 255
		/// Min length: 1
		/// Pattern: \(\?s\).\+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accessToken")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).\+")]
		public string AccessToken { get; set; }
	}
	
	public class UpdateAppPostBodyAutoBranchCreationConfig
	{
		
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public Stage Stage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="framework")]
		public string Framework { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableAutoBuild")]
		public System.Nullable<System.Boolean> EnableAutoBuild { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public EnvironmentVariables EnvironmentVariables { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		public string BasicAuthCredentials { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enableBasicAuth")]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enablePerformanceMode")]
		public System.Nullable<System.Boolean> EnablePerformanceMode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="buildSpec")]
		public string BuildSpec { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="enablePullRequestPreview")]
		public System.Nullable<System.Boolean> EnablePullRequestPreview { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pullRequestEnvironmentName")]
		public string PullRequestEnvironmentName { get; set; }
	}
	
	public class UpdateBranchPostBody
	{
		
		/// <summary>
		///  The description for the branch. 
		/// Max length: 1000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string Description { get; set; }
		
		/// <summary>
		///  The framework for the branch. 
		/// Max length: 255
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="framework")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string Framework { get; set; }
		
		/// <summary>
		///  Describes the current stage for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stage")]
		public Stage Stage { get; set; }
		
		/// <summary>
		///  Enables notifications for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableNotification")]
		public System.Nullable<System.Boolean> EnableNotification { get; set; }
		
		/// <summary>
		///  Enables auto building for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutoBuild")]
		public System.Nullable<System.Boolean> EnableAutoBuild { get; set; }
		
		/// <summary>
		///  The environment variables for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentVariables")]
		public System.Collections.Generic.Dictionary<string, string> EnvironmentVariables { get; set; }
		
		/// <summary>
		///  The basic authorization credentials for the branch. You must base64-encode the authorization credentials and provide them in the format <code>user:password</code>.
		/// Max length: 2000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="basicAuthCredentials")]
		[System.ComponentModel.DataAnnotations.MaxLength(2000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string BasicAuthCredentials { get; set; }
		
		/// <summary>
		///  Enables basic authorization for the branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableBasicAuth")]
		public System.Nullable<System.Boolean> EnableBasicAuth { get; set; }
		
		/// <summary>
		/// <p>Enables performance mode for the branch.</p> <p>Performance mode optimizes for faster hosting performance by keeping content cached at the edge for a longer interval. When performance mode is enabled, hosting configuration or code changes can take up to 10 minutes to roll out. </p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePerformanceMode")]
		public System.Nullable<System.Boolean> EnablePerformanceMode { get; set; }
		
		/// <summary>
		///  The build specification (build spec) file for an Amplify app build. 
		/// Max length: 25000
		/// Min length: 1
		/// Pattern: \(\?s\).\+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="buildSpec")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(25000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).\+")]
		public string BuildSpec { get; set; }
		
		/// <summary>
		///  The content Time to Live (TTL) for the website in seconds. 
		/// Max length: 32
		/// Min length: 0
		/// Pattern: \d*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\d*")]
		public string Ttl { get; set; }
		
		/// <summary>
		///  The display name for a branch. This is used as the default domain prefix. 
		/// Max length: 255
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string DisplayName { get; set; }
		
		/// <summary>
		///  Enables pull request previews for this branch. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enablePullRequestPreview")]
		public System.Nullable<System.Boolean> EnablePullRequestPreview { get; set; }
		
		/// <summary>
		///  The Amplify environment name for the pull request. 
		/// Max length: 20
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pullRequestEnvironmentName")]
		[System.ComponentModel.DataAnnotations.MaxLength(20)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string PullRequestEnvironmentName { get; set; }
		
		/// <summary>
		///  The Amazon Resource Name (ARN) for a backend environment that is part of an Amplify app. 
		/// Max length: 1000
		/// Min length: 0
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="backendEnvironmentArn")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string BackendEnvironmentArn { get; set; }
	}
	
	public class UpdateDomainAssociationPostBody
	{
		
		/// <summary>
		///  Enables the automated creation of subdomains for branches. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enableAutoSubDomain")]
		public System.Nullable<System.Boolean> EnableAutoSubDomain { get; set; }
		
		/// <summary>
		///  Describes the settings for the subdomain. 
		/// Maximum items: 500
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subDomainSettings")]
		[System.ComponentModel.DataAnnotations.MaxLength(500)]
		public SubDomainSetting[] SubDomainSettings { get; set; }
		
		/// <summary>
		///  Sets the branch patterns for automatic subdomain creation. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoSubDomainCreationPatterns")]
		public string[] AutoSubDomainCreationPatterns { get; set; }
		
		/// <summary>
		///  The required AWS Identity and Access Management (IAM) service role for the Amazon Resource Name (ARN) for automatically creating subdomains. 
		/// Max length: 1000
		/// Pattern: ^$|^arn:aws:iam::\d{12}:role.+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="autoSubDomainIAMRole")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^$|^arn:aws:iam::\d{12}:role.+")]
		public string AutoSubDomainIAMRole { get; set; }
	}
	
	public class UpdateWebhookPostBody
	{
		
		/// <summary>
		///  The name for a branch that is part of an Amplify app. 
		/// Max length: 255
		/// Min length: 1
		/// Pattern: \(\?s\).\+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="branchName")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).\+")]
		public string BranchName { get; set; }
		
		/// <summary>
		///  The description for a webhook. 
		/// Max length: 1000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		[System.ComponentModel.DataAnnotations.MaxLength(1000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string Description { get; set; }
	}
	
	public class GenerateAccessLogsPostBody
	{
		
		/// <summary>
		///  The time at which the logs should start. The time range specified is inclusive of the start time. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		///  The time at which the logs should end. The time range specified is inclusive of the end time. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		///  The name of the domain. 
		/// Required
		/// Max length: 64
		/// Pattern: ^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\.)?$
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainName")]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"^(((?!-)[A-Za-z0-9-]{0,62}[A-Za-z0-9])\.)+((?!-)[A-Za-z0-9-]{1,62}[A-Za-z0-9])(\.)?$")]
		public string DomainName { get; set; }
	}
	
	public class StartJobPostBody
	{
		
		/// <summary>
		///  The unique ID for an existing job. This is required if the value of <code>jobType</code> is <code>RETRY</code>. 
		/// Max length: 255
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]+")]
		public string JobId { get; set; }
		
		/// <summary>
		///  Describes the type for the job. The job type <code>RELEASE</code> starts a new job with the latest change from the specified branch. This value is available only for apps that are connected to a repository. The job type <code>RETRY</code> retries an existing job. If the job type value is <code>RETRY</code>, the <code>jobId</code> is also required. 
		/// Required
		/// Max length: 10
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="jobType")]
		[System.ComponentModel.DataAnnotations.MaxLength(10)]
		public JobType JobType { get; set; }
		
		/// <summary>
		///  A descriptive reason for starting this job. 
		/// Max length: 255
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobReason")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string JobReason { get; set; }
		
		/// <summary>
		///  The commit ID from a third-party repository provider for the job. 
		/// Max length: 255
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string CommitId { get; set; }
		
		/// <summary>
		///  The commit message from a third-party repository provider for the job. 
		/// Max length: 10000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitMessage")]
		[System.ComponentModel.DataAnnotations.MaxLength(10000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string CommitMessage { get; set; }
		
		/// <summary>
		///  The commit date and time for the job. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitTime")]
		public System.Nullable<System.DateTimeOffset> CommitTime { get; set; }
	}
	
	public class TagResourcePostBody
	{
		
		/// <summary>
		///  The tags used to tag the resource. 
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public System.Collections.Generic.Dictionary<string, string> Tags { get; set; }
	}
	
	public class StartDeploymentPostBody
	{
		
		/// <summary>
		///  The job ID for this deployment, generated by the create deployment request. 
		/// Max length: 255
		/// Pattern: [0-9]+
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jobId")]
		[System.ComponentModel.DataAnnotations.MaxLength(255)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"[0-9]+")]
		public string JobId { get; set; }
		
		/// <summary>
		///  The source URL for this deployment, used when calling start deployment without create deployment. The source URL can be any HTTP GET URL that is publicly accessible and downloads a single .zip file. 
		/// Max length: 3000
		/// Pattern: \(\?s\).*
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sourceUrl")]
		[System.ComponentModel.DataAnnotations.MaxLength(3000)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\(\?s\).*")]
		public string SourceUrl { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
