//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeliveryReceipt
	{
		
		/// <summary>
		/// The API key that sent the SMS. This is useful when multiple accounts are sending webhooks to the same endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="api-key")]
		public string Api_key { get; set; }
		
		/// <summary>
		/// If the `client-ref` is set when the SMS is sent, it will be included in the delivery receipt
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client-ref")]
		public string Client_ref { get; set; }
		
		/// <summary>
		/// The status of the request. Will be a non `0` value if there has been an error, or if the status is unknown. See the [Delivery Receipt documentation](/messaging/sms/guides/delivery-receipts#dlr-error-codes) for more details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="err-code")]
		public string Err_code { get; set; }
		
		/// <summary>
		/// The time when Vonage started to push this Delivery Receipt to your webhook endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message-timestamp")]
		public string Message_timestamp { get; set; }
		
		/// <summary>
		/// The Vonage ID for this message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		/// <summary>
		/// The number the message was sent to. Numbers are specified in E.164 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="msisdn")]
		public string Msisdn { get; set; }
		
		/// <summary>
		/// The Mobile Country Code Mobile Network Code (MCCMNC) of the carrier this phone number is registered with.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network-code")]
		public string Network_code { get; set; }
		
		/// <summary>
		/// A random string to be used when calculating the signature. _Only included if you have signatures enabled_
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonce")]
		public string Nonce { get; set; }
		
		/// <summary>
		/// The cost of the message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
		
		/// <summary>
		/// When the DLR was received from the carrier in the following format `YYMMDDHHMM`. For example, `2001011400` is at `2020-01-01 14:00`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scts")]
		public string Scts { get; set; }
		
		/// <summary>
		/// The signature to enable verification of the source of this webhook. Please see the [developer documentation for validating signatures](/concepts/guides/signing-messages) for more information, or use one of our published SDKs. _Only included if you have signatures enabled_
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sig")]
		public string Sig { get; set; }
		
		/// <summary>
		/// A code that explains where the message is in the delivery process.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// A timestamp in Unix (seconds since the epoch) format. _Only included if you have signatures enabled_
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// The SenderID you set in `from` in your request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
	}
	
	/// <summary>
	/// Error
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Error
	{
		
		/// <summary>
		/// The amount of messages in the request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message-count")]
		public string Message_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public ErrorMessage[] Messages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorMessage
	{
		
		/// <summary>
		/// The description of the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error-text")]
		public string Error_text { get; set; }
		
		/// <summary>
		/// The error status of the message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
	}
	
	/// <summary>
	/// Error
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ErrorXml
	{
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public ErrorMessage[] Messages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InboundMessage
	{
		
		/// <summary>
		/// The Vonage API Key of the receiving account.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api-key")]
		public string Api_key { get; set; }
		
		/// <summary>
		/// True - if this is a concatenated message. This field does not exist if it is a single message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concat")]
		public string Concat { get; set; }
		
		/// <summary>
		/// The number of this part in the message. Counting starts at 1.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concat-part")]
		public string Concat_part { get; set; }
		
		/// <summary>
		/// The transaction reference. All parts of this message share this value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concat-ref")]
		public string Concat_ref { get; set; }
		
		/// <summary>
		/// The number of parts in this concatenated message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="concat-total")]
		public string Concat_total { get; set; }
		
		/// <summary>
		/// The content of this message, if type is binary.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public string Data { get; set; }
		
		/// <summary>
		/// The first word in the message body. Converted to upper case.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="keyword")]
		public string Keyword { get; set; }
		
		/// <summary>
		/// The time when Vonage started to push this Delivery Receipt to your webhook endpoint.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message-timestamp")]
		public string Message_timestamp { get; set; }
		
		/// <summary>
		/// The ID of the message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="messageId")]
		public string MessageId { get; set; }
		
		/// <summary>
		/// The phone number that this inbound message was sent from. Numbers are specified in E.164 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="msisdn")]
		public string Msisdn { get; set; }
		
		/// <summary>
		/// A random string that forms part of the signed set of parameters, it adds an extra element of unpredictability into the signature for the request. You use the nonce and timestamp parameters with your shared secret to calculate and validate the signature for inbound messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonce")]
		public string Nonce { get; set; }
		
		/// <summary>
		/// The message body for this inbound message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A unix timestamp representation of message-timestamp.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// The phone number the message was sent to. **This is your virtual number**. Numbers are specified in E.164 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
		
		/// <summary>
		/// Possible values are:
		///
		///  - `text` - standard text.
		///  - `unicode` - URLencoded   unicode  . This is valid for standard GSM, Arabic, Chinese, double-encoded characters and so on.
		///  - `binary` - a binary message.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
		
		/// <summary>
		/// The hex encoded User Data Header, if type is binary
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="udh")]
		public string Udh { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Message
	{
		
		/// <summary>
		/// **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account-ref")]
		public string Account_ref { get; set; }
		
		/// <summary>
		/// If a `client-ref` was included when sending the SMS, this field will be included and hold the value that was sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client-ref")]
		public string Client_ref { get; set; }
		
		/// <summary>
		/// The ID of the message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message-id")]
		public string Message_id { get; set; }
		
		/// <summary>
		/// The estimated cost of the message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message-price")]
		public string Message_price { get; set; }
		
		/// <summary>
		/// The estimated ID of the network of the recipient
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="network")]
		public string Network { get; set; }
		
		/// <summary>
		/// Your estimated remaining balance
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="remaining-balance")]
		public string Remaining_balance { get; set; }
		
		/// <summary>
		/// The status of the message. See [Troubleshooting Failed SMS](/messaging/sms/guides/troubleshooting-sms).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public string Status { get; set; }
		
		/// <summary>
		/// The number the message was sent to. Numbers are specified in E.164 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public string To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NewMessage
	{
		
		/// <summary>
		/// **Advanced**: An optional string used to identify separate accounts using the SMS endpoint for billing purposes. To use this feature, please email [support@nexmo.com](mailto:support@nexmo.com)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="account-ref")]
		public string Account_ref { get; set; }
		
		/// <summary>
		/// Your API key
		/// Required
		/// Min length: 8
		/// Max length: 8
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="api_key")]
		[System.ComponentModel.DataAnnotations.MinLength(8)]
		[System.ComponentModel.DataAnnotations.MaxLength(8)]
		public string Api_key { get; set; }
		
		/// <summary>
		/// Your API secret. Required unless `sig` is provided
		/// Min length: 6
		/// Max length: 32
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="api_secret")]
		[System.ComponentModel.DataAnnotations.MinLength(6)]
		[System.ComponentModel.DataAnnotations.MaxLength(32)]
		public string Api_secret { get; set; }
		
		/// <summary>
		/// **Advanced**: Hex encoded binary data. Depends on `type` parameter having the value `binary`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="body")]
		public string Body { get; set; }
		
		/// <summary>
		/// **Advanced**: The webhook endpoint the delivery receipt for this sms is sent to. This parameter overrides the webhook endpoint you set in Dashboard. Max 100 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="callback")]
		public string Callback { get; set; }
		
		/// <summary>
		/// **Advanced**: You can optionally include your own reference of up to 100 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client-ref")]
		public string Client_ref { get; set; }
		
		/// <summary>
		/// **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content-id")]
		public string Content_id { get; set; }
		
		/// <summary>
		/// **Advanced**: A string parameter that satisfies regulatory requirements when sending an SMS to specific countries. For more information please refer to the [Country-Specific Outbound SMS Features](https://help.nexmo.com/hc/en-us/articles/115011781468)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entity-id")]
		public string Entity_id { get; set; }
		
		/// <summary>
		/// The name or number the message should be sent from. Alphanumeric senderID's are not supported in all countries, see [Global Messaging](/messaging/sms/guides/global-messaging#country-specific-features) for more details. If alphanumeric, spaces will be ignored. Numbers are specified in E.164 format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// **Advanced**: The Data Coding Scheme value of the message
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message-class")]
		public System.Nullable<NewMessageMessage_class> Message_class { get; set; }
		
		/// <summary>
		/// **Advanced**: The value of the [protocol identifier](https://en.wikipedia.org/wiki/GSM_03.40#Protocol_Identifier) to use. Ensure that the value is aligned with `udh`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol-id")]
		public System.Nullable<System.Int32> Protocol_id { get; set; }
		
		/// <summary>
		/// The hash of the request parameters in alphabetical order, a timestamp and the signature secret. See [Signing Requests](/concepts/guides/signing-messages) for more details.
		/// Min length: 16
		/// Max length: 60
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sig")]
		[System.ComponentModel.DataAnnotations.MinLength(16)]
		[System.ComponentModel.DataAnnotations.MaxLength(60)]
		public string Sig { get; set; }
		
		/// <summary>
		/// **Advanced**: Boolean indicating if you like to receive a [Delivery Receipt](/messaging/sms/building-blocks/receive-a-delivery-receipt).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status-report-req")]
		public System.Nullable<System.Boolean> Status_report_req { get; set; }
		
		/// <summary>
		/// The body of the message being sent. If your message contains characters that can be encoded according to the GSM Standard and Extended tables then you can set the `type` to `text`. If your message contains characters outside this range, then you will need to set the `type` to `unicode`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The number that the message should be sent to. Numbers are specified in E.164 format.
		/// Required
		/// Min length: 7
		/// Max length: 15
		/// Pattern: \d{7,15}
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		[System.ComponentModel.DataAnnotations.RegularExpressionAttribute(@"\d{7,15}")]
		public string To { get; set; }
		
		/// <summary>
		/// **Advanced**: The duration in milliseconds the delivery of an SMS will be attempted.§§ By default Vonage attempts delivery for 72 hours, however the maximum effective value depends on the operator and is typically 24 - 48 hours. We recommend this value should be kept at its default or at least 30 minutes.
		/// Minimum: 20000
		/// Maximum: 604800000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		[System.ComponentModel.DataAnnotations.Range(20000, 604800000)]
		public System.Nullable<System.Int32> Ttl { get; set; }
		
		/// <summary>
		/// **Advanced**: The format of the message body
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<NewMessageType> Type { get; set; }
		
		/// <summary>
		/// **Advanced**: Your custom Hex encoded [User Data Header](https://en.wikipedia.org/wiki/User_Data_Header). Depends on `type` parameter having the value `binary`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="udh")]
		public string Udh { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NewMessageMessage_class
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NewMessageType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		binary = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unicode = 2,
	}
	
	/// <summary>
	/// Message sent
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SMS
	{
		
		/// <summary>
		/// The amount of messages in the request
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message-count")]
		public string Message_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
	}
	
	/// <summary>
	/// Message sent
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SMSXml
	{
		
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public Message[] Messages { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
	}
	
	public enum Send_an_smsFormat
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		json = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		xml = 1,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
