//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Address
	{
		
		/// <summary>
		/// Country name component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Full mailing address, formatted for display or use on a mailing label. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair or as a single line feed character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formatted")]
		public string Formatted { get; set; }
		
		/// <summary>
		/// City or locality component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Zip code or postal code component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		/// <summary>
		/// State, province, prefecture, or region component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Full street address component, which MAY include house number, street name, post office box, and multi-line extended street address information. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair or as a single line feed character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_address")]
		public string Street_address { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Client
	{
		
		/// <summary>
		/// URL of the Client's JSON representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		/// <summary>
		/// OAuth 2.0 client identifier string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		/// <summary>
		/// Human-readable string name of the client to be presented to the end-user during authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_name")]
		public string Client_name { get; set; }
		
		/// <summary>
		/// OAuth 2.0 client secret string. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_secret")]
		public string Client_secret { get; set; }
		
		/// <summary>
		/// URL string of a web page providing information about the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_uri")]
		public string Client_uri { get; set; }
		
		/// <summary>
		/// Array of strings representing ways to contact people responsible for this client, typically email addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public string[] Contacts { get; set; }
		
		/// <summary>
		/// Array of OAuth 2.0 grant type strings that the client can use at the token endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grant_types")]
		public string[] Grant_types { get; set; }
		
		/// <summary>
		/// Client's JSON Web Key Set [RFC7517] document value, which contains the client's public keys.  The value of this field MUST be a JSON object containing a valid JWK Set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwks")]
		public string[] Jwks { get; set; }
		
		/// <summary>
		/// URL string referencing the client's JSON Web Key (JWK) Set [RFC7517] document, which contains the client's public keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwks_uri")]
		public string Jwks_uri { get; set; }
		
		/// <summary>
		/// An email address used to generate a gravatar.com logo_uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo_email")]
		public string Logo_email { get; set; }
		
		/// <summary>
		/// URL string that references a logo for the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo_uri")]
		public string Logo_uri { get; set; }
		
		/// <summary>
		/// URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy_uri")]
		public string Policy_uri { get; set; }
		
		/// <summary>
		/// Array of redirection URI strings for use in redirect-based flows such as the authorization code and implicit flows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_uris")]
		public string[] Redirect_uris { get; set; }
		
		/// <summary>
		/// Array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response_types")]
		public string[] Response_types { get; set; }
		
		/// <summary>
		/// String containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// A unique identifier string (e.g., a Universally Unique Identifier (UUID)) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="software_id")]
		public string Software_id { get; set; }
		
		/// <summary>
		/// A version identifier string for the client software identified by software_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="software_version")]
		public string Software_version { get; set; }
		
		/// <summary>
		/// String indicator of the requested authentication method for the token endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token_endpoint_auth_method")]
		public string Token_endpoint_auth_method { get; set; }
		
		/// <summary>
		/// URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tos_uri")]
		public string Tos_uri { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Domain
	{
		
		/// <summary>
		/// The URL of the domain's JSON representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		/// <summary>
		/// The URL of the domain logo. The image from this address is displayed on the webpage of the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// The tenants included in a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// The displayed domain name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The URL of the domain's webpage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public string Profile { get; set; }
		
		/// <summary>
		/// The fully qualified DNS name of the domain (e.g. phantauth.net).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Fleet
	{
		
		/// <summary>
		/// URL of the Fleet's JSON representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		/// <summary>
		/// The URL of the fleet logo, which can be customized by the gravatar associated with the email address in the `logo_email` property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// The email address of the fleet, either generated or provided in the `sub` property. The fleet logo can be customized by the use of the gravater associated with this email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo_email")]
		public string Logo_email { get; set; }
		
		/// <summary>
		/// The client objects included in a fleet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// The displayed fleet name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The URL of the Fleet profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public string Profile { get; set; }
		
		/// <summary>
		/// The name or email address of a given fleet. The fleet properties and fleet members are generated from this name. If provide an email address, you can customize the fleet logo by the use of the gravatar associated with the email address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Team
	{
		
		/// <summary>
		/// URL of the Teams's JSON representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		/// <summary>
		/// The URL of the team logo, which can be customized by the gravatar associated with the email address in the `logo_email` property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// The email address of the team, either generated or provided in the `sub` property. The team logo can be customized by the use of the gravater associated with this email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo_email")]
		public string Logo_email { get; set; }
		
		/// <summary>
		/// The user objects that generate a team member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// The displayed team name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The URL of the Team profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public string Profile { get; set; }
		
		/// <summary>
		/// The name or email address of a given team. The team properties and team members are generated from this name. If you provide an email address, you can customize the team logo by the use of the gravatar associated with the email address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Tenant
	{
		
		/// <summary>
		/// The URL of the tenant's JSON representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		/// <summary>
		/// A detailed description of the tenant. If it takes the value of an URL, the description is downloaded from the given URL, otherwise the value it takes is the description itself. Markdown formatting can be used in the description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="about")]
		public string About { get; set; }
		
		/// <summary>
		/// The attribution of the external data source or random user generator. Its value can have markdown formatting, that is, the external source can contain highlights and links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribution")]
		public string Attribution { get; set; }
		
		/// <summary>
		/// It defines the place of the CSV file containing the resource data in [RFC 6570 - URI temaplate](https://tools.ietf.org/html/rfc6570) format.
		///The URI template receives the type of the object to be generated (user, team) in the `kind` parameter.
		///
		///The first line of the CSV file contains the resource property names, the following lines, on the other hand, contain the relevant data.
		///In the case of nested properties, a '.' character separates the elements of the property name (e.g. address.formatted).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="depot")]
		public string Depot { get; set; }
		
		/// <summary>
		/// A list of resource types supported by the external CSV set in `depot`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="depots")]
		public string[] Depots { get; set; }
		
		/// <summary>
		/// True in the case of a domain tenant collecting several tenants, otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public System.Nullable<System.Boolean> Domain { get; set; }
		
		/// <summary>
		/// A list of resource types supported by the external generator set in `factory`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factories")]
		public string[] Factories { get; set; }
		
		/// <summary>
		/// The address of the custom random resource generator (user, team) in [RFC 6570 - URI temaplate](https://tools.ietf.org/html/rfc6570) format.
		///The URI template receives the type of the object to be generated (user, team) in the `kind` parameter, and the identifier of the object to be generated in the `name` parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factory")]
		public string Factory { get; set; }
		
		/// <summary>
		/// The URL of the tenant favicon. The image from this address appears as a shortcut icon in the browser when a user visits the tenant's webpages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="favicon")]
		public string Favicon { get; set; }
		
		/// <summary>
		/// The URL of the tenant OpenID Connect issuer. This value allows you to get, for example, the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
		///As a webpage, it contains information on the use if the given tenant.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		/// <summary>
		/// The URL of the tenant logo. The image from this address appears in the address bar of the tenant's webpages and the pages that contain the list of available tenants.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// The displayed tenant name. In lack of such name, the DNS name of the tenant is displayed in the address bar of the tenant's webpages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The URL of a custom JavaScript file can be automatically inserted in the login.html, consent.html, és test.html pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// It is used to give the identifyer of a public Google Sheet document. The first line of the table contains the user property names, the following lines, on the other hand, contain the relevant data.
		///In the case of nested properties, a '.' character separates the elements of the property name (e.g. address.formatted).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheet")]
		public string Sheet { get; set; }
		
		/// <summary>
		/// The fully qualified DNS domain name of the tenant. In the case of official and shared tenants (phantauth.net and phantauth.cf DNS domain), the DNS domain can be omitted (e.g. *default* or *faker*).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
		
		/// <summary>
		/// True in the case of a tenant referred to in a domain tenant, otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtenant")]
		public System.Nullable<System.Boolean> Subtenant { get; set; }
		
		/// <summary>
		/// A one-line description, the watchword of the tenant. It appears on the tenant's startup page and the pages that contain the list of available tenants. It takes the valua of an unformatted text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// It defines the place of the templates of the HTML pages of the tenant in [RFC 6570 - URI temaplate](https://tools.ietf.org/html/rfc6570) format.
		///The URI template receives the page name in a `resource` parameter. By default, it takes the following value: `https://default.phantauth.net{/resource}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
		
		/// <summary>
		/// The URL of the CSS style sheet used for the tenant's webpages.
		///The default webpage templates were created by the use of the Bootstrap library, therefore, the Bootstrap CSS URL has to be provided when such a webpage is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public string Theme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userinfo")]
		public string Userinfo { get; set; }
		
		/// <summary>
		/// The website address associated with the tenant. If a tenant doesn't have a website, its value is identical with that of the `issuer` property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class User
	{
		
		/// <summary>
		/// The URL of the user's JSON representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public Address Address { get; set; }
		
		/// <summary>
		/// The user's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birthdate")]
		public string Birthdate { get; set; }
		
		/// <summary>
		/// The user's preferred email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// True if the user's e-mail address has been verified; otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_verified")]
		public System.Nullable<System.Boolean> Email_verified { get; set; }
		
		/// <summary>
		/// The user's surname(s) or last name(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family_name")]
		public string Family_name { get; set; }
		
		/// <summary>
		/// The enduser's gender. Possible values are: female, male, and unknown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		/// <summary>
		/// The user's given name(s) or first name(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="given_name")]
		public string Given_name { get; set; }
		
		/// <summary>
		/// The user's locale, represented as a BCP47 [RFC5646] language tag. It is an ISO 639-1 Alpha-2 language code in lowercase and an ISO 3166-1 Alpha-2 country code in uppercase letters, separated by a dash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// The simplified URL of the user's profile page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="me")]
		public string Me { get; set; }
		
		/// <summary>
		/// The user's middle name(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="middle_name")]
		public string Middle_name { get; set; }
		
		/// <summary>
		/// The user's full name in displayable form, including all name parts, possibly including titles and suffixes, ordered according to the enduser's locale and preferences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A casual name of the User that may or may not be the same as the given_name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		/// <summary>
		/// The user's generated password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The user's preferred telephone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// True if the enduser's phone number has been verified; otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number_verified")]
		public System.Nullable<System.Boolean> Phone_number_verified { get; set; }
		
		/// <summary>
		/// The URL of the user's profile picture.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="picture")]
		public string Picture { get; set; }
		
		/// <summary>
		/// A shorthand name by which the user wishes to be referred to at the Relying Party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferred_username")]
		public string Preferred_username { get; set; }
		
		/// <summary>
		/// The URL of the user's profile page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public string Profile { get; set; }
		
		/// <summary>
		/// Subject - User identifier at the issuer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
		
		/// <summary>
		/// The user's simplified, shortened identifier at the Issuer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// The time when the User's information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.Double> Updated_at { get; set; }
		
		/// <summary>
		/// The URL of user's mailbox in a webmail application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webmail")]
		public string Webmail { get; set; }
		
		/// <summary>
		/// The URL of the user's webpage or blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
		
		/// <summary>
		/// A string from the zoneinfo time zone database representing the user's time zone. For example, Europe/Paris or America/Los_Angeles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zoneinfo")]
		public string Zoneinfo { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Create a Client Selfie
		/// To create a selfie token from the client data, you need an opaqe string token, which contains the encoded client properties sent in the request.
		/// Later, the selfie token can be used as a client ID. In this case, the client data is included in the selfie token, that is, the client properties are taken from the token.
		/// By the use of a selfie token, you can use your own client objects in the authentication process.
		/// ClientPost client
		/// </summary>
		/// <returns>OK</returns>
		public async Task ClientPostAsync(ClientPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "client";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a Client
		/// Use this endpoint to generate a random client. The client is generated in a deterministic way, on the bases of the client ID given as a path parameter.
		/// In the case of identical client IDs, the endpoint will generate the same client object. The properties of the generated client object are randomly generated on the basis of the client ID.
		/// In lack of a client ID, all calls generate a different client object to the randomly generated client ID.
		/// 
		/// By providing an email address as the `client_id` parameter, you can customize the client logo by the use of the gravatar associated with the email address.
		/// 
		/// If the `client_id` parameter contains minimum one dot (`.`) or space (` `) character, the client_name is produced from the parameter, rather than being generated.`
		/// 
		/// The result is always a client object. If you want to generate multiple clients in one single step, you can do it by the use of *Fleet* generation.
		/// The members of a fleet are clients randomly generated from the fleet name.
		/// ClientGetByClient_id client/{client_id}
		/// </summary>
		/// <param name="client_id">A client ID or email.</param>
		/// <returns>OK</returns>
		public async Task<ClientGetByClient_idReturn> ClientGetByClient_idAsync(string client_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "client/"+ (client_id==null? "" : System.Uri.EscapeDataString(client_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ClientGetByClient_idReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Client Token
		/// It is used to generate a OpenID Connect token as a path parameter to a client of a given client ID.
		/// 
		/// It is primarily used for testing purposes, when, for example, the token from the standard authentication flow is not available to the test code.
		/// ClientGetByClient_idAndKind client/{client_id}/token/{kind}
		/// </summary>
		/// <param name="client_id">A client ID or email.</param>
		/// <param name="kind">Token type</param>
		/// <returns>OK</returns>
		public async Task ClientGetByClient_idAndKindAsync(string client_id, ClientGetByClient_idAndKindKind kind, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "client/"+ (client_id==null? "" : System.Uri.EscapeDataString(client_id))+"/token/"+kind;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Domain
		/// This endpoint allows you to get the data of a given PhantAuth domain. To use the PhantAuth services, you don't need this endpoint.
		/// It is, therefore, mainly used for debug/diagnostic purposes in tenant customization.
		/// 
		/// Domainname is the fully qualified DNS name of the domain you get (e.g. *phantauth.net* or *phantauth.cf*).
		/// DomainGetByDomainname domain/{domainname}
		/// </summary>
		/// <param name="domainname">The domain ID integrated in the `sub` property.</param>
		/// <returns>OK</returns>
		public async Task<DomainGetByDomainnameReturn> DomainGetByDomainnameAsync(string domainname, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "domain/"+ (domainname==null? "" : System.Uri.EscapeDataString(domainname));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DomainGetByDomainnameReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Fleet
		/// Use this endpoint to generate a random group of clients. The feleet is generated in a deterministic way, on the basis of a fleet name given as a path parameter.
		/// In the case of identical fleet names, the endpoint will generate the same fleet object. The properties of the generated fleet object are randomly generated on the basis of the fleet name.
		/// In lack of a fleet name, all calls generate a different fleet object to the randomly generated fleet name.
		/// FleetGetByFleetname fleet/{fleetname}
		/// </summary>
		/// <param name="fleetname">
		///The identifier or email address of the fleet; it is integrated in the `sub` property and is the basis of the other generated properties.
		///</param>
		/// <returns>OK</returns>
		public async Task<FleetGetByFleetnameReturn> FleetGetByFleetnameAsync(string fleetname, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "fleet/"+ (fleetname==null? "" : System.Uri.EscapeDataString(fleetname));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<FleetGetByFleetnameReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Team
		/// Use this endpoint to generate a random group of users. The team is generated in a deterministic way, on the basis of the team name given as the path parameter.
		/// In the case of identical team names, the endpoint will generate the same team object. The properties of the generated team object are randomly generated on the basis of the team name.
		/// In lack of a team name, all calls generate a different team object to the randomly generated team name.
		/// TeamGetByTeamname team/{teamname}
		/// </summary>
		/// <param name="teamname">
		///The identifier or email address of the team; it is integrated in the `sub` property and is the basis of the other generated properties.
		///</param>
		/// <returns>OK</returns>
		public async Task<TeamGetByTeamnameReturn> TeamGetByTeamnameAsync(string teamname, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "team/"+ (teamname==null? "" : System.Uri.EscapeDataString(teamname));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TeamGetByTeamnameReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a Tenant
		/// This endpoint allows you to get the data of a given PhantAuth tenant. To use the PhantAuth services, you don't need this endpoint.
		/// It is, therefore, mainly used for debug/diagnostic purposes in tenant customization.
		/// 
		/// Tenantname is the name of the full DNS domain of the tenant you get.
		/// In the case of an official and shared tenant (phantauth.net and phantauth.cf DNS domains), the DNS domain can be omitted (e.g. *default* or *faker*).
		/// TenantGetByTenantname tenant/{tenantname}
		/// </summary>
		/// <param name="tenantname">The tenant ID integrated in the `sub` property.</param>
		/// <returns>OK</returns>
		public async Task<TenantGetByTenantnameReturn> TenantGetByTenantnameAsync(string tenantname, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "tenant/"+ (tenantname==null? "" : System.Uri.EscapeDataString(tenantname));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TenantGetByTenantnameReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Create a User Selfie
		/// To create a selfie token from the user data, you need an opaqe string token, which contains the encoded user properties sent in the request.
		/// Later, the selfie token can be used as a login name. In this case, the user data is included in the selfie token, that is, the user properties are taken from the token.
		/// By the use of a selfie token, you can use your own user objects during the authentication process.
		/// 
		/// Its use, however, is limited by its relatively large size (more than 100 characters), which exceeds the maximum size of the user name in several systems.
		/// UserPost user
		/// </summary>
		/// <returns>OK</returns>
		public async Task UserPostAsync(UserPostPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Get a User
		/// Use this endpoint to generate a random user. The user is generated in a deterministic way, on the bases of the user name given as a path parameter.
		/// In the case of identical user names, the endpoint will generate the same user object. The properties of the generated user object are randomly generated on the basis of the user name.
		/// In lack of a user name, all calls generate a different user object to the randomly generated user name.
		/// 
		/// By providing an email address as the `username` parameter, you can customize the user picture by the use of the gravatar associated with the email address.
		/// 
		/// If the `username` parameter contains at least one dot (`.`) or space (` `) character, the whole name is produced from the parameter, rather than being generated.
		/// In this case, these cahracters play the role of separator between the units of the full name (family name, given name).`
		/// 
		/// The result is always a user object. If you want to generate multiple users in one single step, you can do it by the use of *Team* generation.
		/// The members of a team are users randomly generated from the team name.
		/// UserGetByUsername user/{username}
		/// </summary>
		/// <param name="username">The username or email used for generation purposes.</param>
		/// <returns>OK</returns>
		public async Task<UserGetByUsernameReturn> UserGetByUsernameAsync(string username, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (username==null? "" : System.Uri.EscapeDataString(username));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<UserGetByUsernameReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a User Token
		/// It is used to generate OpenID Connect tokens as path parameters to a user of a given name.
		/// 
		/// This method is mainly used in the testing process, when, for example, the token received from the normal authenticaton flow is not available to the test code.
		/// Generating an access token, for example, will let you avoid authentication, and immediately call an operation requiring the access token.
		/// UserGetByUsernameAndKindAndScope user/{username}/token/{kind}
		/// </summary>
		/// <param name="username">A username or email.</param>
		/// <param name="kind">Token type</param>
		/// <param name="scope">OpenID Connect scope</param>
		/// <returns>OK</returns>
		public async Task UserGetByUsernameAndKindAndScopeAsync(string username, UserGetByUsernameAndKindAndScopeKind kind, string scope, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "user/"+ (username==null? "" : System.Uri.EscapeDataString(username))+"/token/"+kind+"&scope=" + (scope==null? "" : System.Uri.EscapeDataString(scope));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class ClientPostPostBody
	{
		
		/// <summary>
		/// URL of the Client's JSON representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		/// <summary>
		/// OAuth 2.0 client identifier string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		/// <summary>
		/// Human-readable string name of the client to be presented to the end-user during authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_name")]
		public string Client_name { get; set; }
		
		/// <summary>
		/// OAuth 2.0 client secret string. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_secret")]
		public string Client_secret { get; set; }
		
		/// <summary>
		/// URL string of a web page providing information about the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_uri")]
		public string Client_uri { get; set; }
		
		/// <summary>
		/// Array of strings representing ways to contact people responsible for this client, typically email addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public string[] Contacts { get; set; }
		
		/// <summary>
		/// Array of OAuth 2.0 grant type strings that the client can use at the token endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grant_types")]
		public string[] Grant_types { get; set; }
		
		/// <summary>
		/// Client's JSON Web Key Set [RFC7517] document value, which contains the client's public keys.  The value of this field MUST be a JSON object containing a valid JWK Set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwks")]
		public string[] Jwks { get; set; }
		
		/// <summary>
		/// URL string referencing the client's JSON Web Key (JWK) Set [RFC7517] document, which contains the client's public keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwks_uri")]
		public string Jwks_uri { get; set; }
		
		/// <summary>
		/// An email address used to generate a gravatar.com logo_uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo_email")]
		public string Logo_email { get; set; }
		
		/// <summary>
		/// URL string that references a logo for the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo_uri")]
		public string Logo_uri { get; set; }
		
		/// <summary>
		/// URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy_uri")]
		public string Policy_uri { get; set; }
		
		/// <summary>
		/// Array of redirection URI strings for use in redirect-based flows such as the authorization code and implicit flows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_uris")]
		public string[] Redirect_uris { get; set; }
		
		/// <summary>
		/// Array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response_types")]
		public string[] Response_types { get; set; }
		
		/// <summary>
		/// String containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// A unique identifier string (e.g., a Universally Unique Identifier (UUID)) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="software_id")]
		public string Software_id { get; set; }
		
		/// <summary>
		/// A version identifier string for the client software identified by software_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="software_version")]
		public string Software_version { get; set; }
		
		/// <summary>
		/// String indicator of the requested authentication method for the token endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token_endpoint_auth_method")]
		public string Token_endpoint_auth_method { get; set; }
		
		/// <summary>
		/// URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tos_uri")]
		public string Tos_uri { get; set; }
	}
	
	public class ClientGetByClient_idReturn
	{
		
		/// <summary>
		/// URL of the Client's JSON representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		/// <summary>
		/// OAuth 2.0 client identifier string.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="client_id")]
		public string Client_id { get; set; }
		
		/// <summary>
		/// Human-readable string name of the client to be presented to the end-user during authorization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_name")]
		public string Client_name { get; set; }
		
		/// <summary>
		/// OAuth 2.0 client secret string. 
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_secret")]
		public string Client_secret { get; set; }
		
		/// <summary>
		/// URL string of a web page providing information about the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_uri")]
		public string Client_uri { get; set; }
		
		/// <summary>
		/// Array of strings representing ways to contact people responsible for this client, typically email addresses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contacts")]
		public string[] Contacts { get; set; }
		
		/// <summary>
		/// Array of OAuth 2.0 grant type strings that the client can use at the token endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="grant_types")]
		public string[] Grant_types { get; set; }
		
		/// <summary>
		/// Client's JSON Web Key Set [RFC7517] document value, which contains the client's public keys.  The value of this field MUST be a JSON object containing a valid JWK Set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwks")]
		public string[] Jwks { get; set; }
		
		/// <summary>
		/// URL string referencing the client's JSON Web Key (JWK) Set [RFC7517] document, which contains the client's public keys.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jwks_uri")]
		public string Jwks_uri { get; set; }
		
		/// <summary>
		/// An email address used to generate a gravatar.com logo_uri.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo_email")]
		public string Logo_email { get; set; }
		
		/// <summary>
		/// URL string that references a logo for the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo_uri")]
		public string Logo_uri { get; set; }
		
		/// <summary>
		/// URL string that points to a human-readable privacy policy document that describes how the deployment organization collects, uses, retains, and discloses personal data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="policy_uri")]
		public string Policy_uri { get; set; }
		
		/// <summary>
		/// Array of redirection URI strings for use in redirect-based flows such as the authorization code and implicit flows.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="redirect_uris")]
		public string[] Redirect_uris { get; set; }
		
		/// <summary>
		/// Array of the OAuth 2.0 response type strings that the client can use at the authorization endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response_types")]
		public string[] Response_types { get; set; }
		
		/// <summary>
		/// String containing a space-separated list of scope values (as described in Section 3.3 of OAuth 2.0 [RFC6749]) that the client can use when requesting access tokens.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scope")]
		public string Scope { get; set; }
		
		/// <summary>
		/// A unique identifier string (e.g., a Universally Unique Identifier (UUID)) assigned by the client developer or software publisher used by registration endpoints to identify the client software to be dynamically registered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="software_id")]
		public string Software_id { get; set; }
		
		/// <summary>
		/// A version identifier string for the client software identified by software_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="software_version")]
		public string Software_version { get; set; }
		
		/// <summary>
		/// String indicator of the requested authentication method for the token endpoint.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="token_endpoint_auth_method")]
		public string Token_endpoint_auth_method { get; set; }
		
		/// <summary>
		/// URL string that points to a human-readable terms of service document for the client that describes a contractual relationship between the end-user and the client that the end-user accepts when authorizing the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tos_uri")]
		public string Tos_uri { get; set; }
	}
	
	public enum ClientGetByClient_idAndKindKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="'registration'")]
		_registration_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="'selfie'")]
		_selfie_ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="'plain'")]
		_plain_ = 2,
	}
	
	public class DomainGetByDomainnameReturn
	{
		
		/// <summary>
		/// The URL of the domain's JSON representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		/// <summary>
		/// The URL of the domain logo. The image from this address is displayed on the webpage of the domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// The tenants included in a domain.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// The displayed domain name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The URL of the domain's webpage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public string Profile { get; set; }
		
		/// <summary>
		/// The fully qualified DNS name of the domain (e.g. phantauth.net).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
	}
	
	public class FleetGetByFleetnameReturn
	{
		
		/// <summary>
		/// URL of the Fleet's JSON representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		/// <summary>
		/// The URL of the fleet logo, which can be customized by the gravatar associated with the email address in the `logo_email` property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// The email address of the fleet, either generated or provided in the `sub` property. The fleet logo can be customized by the use of the gravater associated with this email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo_email")]
		public string Logo_email { get; set; }
		
		/// <summary>
		/// The client objects included in a fleet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// The displayed fleet name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The URL of the Fleet profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public string Profile { get; set; }
		
		/// <summary>
		/// The name or email address of a given fleet. The fleet properties and fleet members are generated from this name. If provide an email address, you can customize the fleet logo by the use of the gravatar associated with the email address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
	}
	
	public class TeamGetByTeamnameReturn
	{
		
		/// <summary>
		/// URL of the Teams's JSON representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		/// <summary>
		/// The URL of the team logo, which can be customized by the gravatar associated with the email address in the `logo_email` property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// The email address of the team, either generated or provided in the `sub` property. The team logo can be customized by the use of the gravater associated with this email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo_email")]
		public string Logo_email { get; set; }
		
		/// <summary>
		/// The user objects that generate a team member.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="members")]
		public string[] Members { get; set; }
		
		/// <summary>
		/// The displayed team name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The URL of the Team profile.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public string Profile { get; set; }
		
		/// <summary>
		/// The name or email address of a given team. The team properties and team members are generated from this name. If you provide an email address, you can customize the team logo by the use of the gravatar associated with the email address.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
	}
	
	public class TenantGetByTenantnameReturn
	{
		
		/// <summary>
		/// The URL of the tenant's JSON representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		/// <summary>
		/// A detailed description of the tenant. If it takes the value of an URL, the description is downloaded from the given URL, otherwise the value it takes is the description itself. Markdown formatting can be used in the description.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="about")]
		public string About { get; set; }
		
		/// <summary>
		/// The attribution of the external data source or random user generator. Its value can have markdown formatting, that is, the external source can contain highlights and links.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attribution")]
		public string Attribution { get; set; }
		
		/// <summary>
		/// It defines the place of the CSV file containing the resource data in [RFC 6570 - URI temaplate](https://tools.ietf.org/html/rfc6570) format.
		///The URI template receives the type of the object to be generated (user, team) in the `kind` parameter.
		///
		///The first line of the CSV file contains the resource property names, the following lines, on the other hand, contain the relevant data.
		///In the case of nested properties, a '.' character separates the elements of the property name (e.g. address.formatted).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="depot")]
		public string Depot { get; set; }
		
		/// <summary>
		/// A list of resource types supported by the external CSV set in `depot`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="depots")]
		public string[] Depots { get; set; }
		
		/// <summary>
		/// True in the case of a domain tenant collecting several tenants, otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public System.Nullable<System.Boolean> Domain { get; set; }
		
		/// <summary>
		/// A list of resource types supported by the external generator set in `factory`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factories")]
		public string[] Factories { get; set; }
		
		/// <summary>
		/// The address of the custom random resource generator (user, team) in [RFC 6570 - URI temaplate](https://tools.ietf.org/html/rfc6570) format.
		///The URI template receives the type of the object to be generated (user, team) in the `kind` parameter, and the identifier of the object to be generated in the `name` parameter.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="factory")]
		public string Factory { get; set; }
		
		/// <summary>
		/// The URL of the tenant favicon. The image from this address appears as a shortcut icon in the browser when a user visits the tenant's webpages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="favicon")]
		public string Favicon { get; set; }
		
		/// <summary>
		/// The URL of the tenant OpenID Connect issuer. This value allows you to get, for example, the [OpenID Provider Metadata](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
		///As a webpage, it contains information on the use if the given tenant.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="issuer")]
		public string Issuer { get; set; }
		
		/// <summary>
		/// The URL of the tenant logo. The image from this address appears in the address bar of the tenant's webpages and the pages that contain the list of available tenants.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="logo")]
		public string Logo { get; set; }
		
		/// <summary>
		/// The displayed tenant name. In lack of such name, the DNS name of the tenant is displayed in the address bar of the tenant's webpages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The URL of a custom JavaScript file can be automatically inserted in the login.html, consent.html, és test.html pages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public string Script { get; set; }
		
		/// <summary>
		/// It is used to give the identifyer of a public Google Sheet document. The first line of the table contains the user property names, the following lines, on the other hand, contain the relevant data.
		///In the case of nested properties, a '.' character separates the elements of the property name (e.g. address.formatted).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sheet")]
		public string Sheet { get; set; }
		
		/// <summary>
		/// The fully qualified DNS domain name of the tenant. In the case of official and shared tenants (phantauth.net and phantauth.cf DNS domain), the DNS domain can be omitted (e.g. *default* or *faker*).
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
		
		/// <summary>
		/// True in the case of a tenant referred to in a domain tenant, otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtenant")]
		public System.Nullable<System.Boolean> Subtenant { get; set; }
		
		/// <summary>
		/// A one-line description, the watchword of the tenant. It appears on the tenant's startup page and the pages that contain the list of available tenants. It takes the valua of an unformatted text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summary")]
		public string Summary { get; set; }
		
		/// <summary>
		/// It defines the place of the templates of the HTML pages of the tenant in [RFC 6570 - URI temaplate](https://tools.ietf.org/html/rfc6570) format.
		///The URI template receives the page name in a `resource` parameter. By default, it takes the following value: `https://default.phantauth.net{/resource}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="template")]
		public string Template { get; set; }
		
		/// <summary>
		/// The URL of the CSS style sheet used for the tenant's webpages.
		///The default webpage templates were created by the use of the Bootstrap library, therefore, the Bootstrap CSS URL has to be provided when such a webpage is used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="theme")]
		public string Theme { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="userinfo")]
		public string Userinfo { get; set; }
		
		/// <summary>
		/// The website address associated with the tenant. If a tenant doesn't have a website, its value is identical with that of the `issuer` property.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
	}
	
	public class UserPostPostBody
	{
		
		/// <summary>
		/// The URL of the user's JSON representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		/// <summary>
		/// The user's preferred postal address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public UserPostPostBodyAddress Address { get; set; }
		
		/// <summary>
		/// The user's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birthdate")]
		public string Birthdate { get; set; }
		
		/// <summary>
		/// The user's preferred email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// True if the user's e-mail address has been verified; otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_verified")]
		public System.Nullable<System.Boolean> Email_verified { get; set; }
		
		/// <summary>
		/// The user's surname(s) or last name(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family_name")]
		public string Family_name { get; set; }
		
		/// <summary>
		/// The enduser's gender. Possible values are: female, male, and unknown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		/// <summary>
		/// The user's given name(s) or first name(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="given_name")]
		public string Given_name { get; set; }
		
		/// <summary>
		/// The user's locale, represented as a BCP47 [RFC5646] language tag. It is an ISO 639-1 Alpha-2 language code in lowercase and an ISO 3166-1 Alpha-2 country code in uppercase letters, separated by a dash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// The simplified URL of the user's profile page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="me")]
		public string Me { get; set; }
		
		/// <summary>
		/// The user's middle name(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="middle_name")]
		public string Middle_name { get; set; }
		
		/// <summary>
		/// The user's full name in displayable form, including all name parts, possibly including titles and suffixes, ordered according to the enduser's locale and preferences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A casual name of the User that may or may not be the same as the given_name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		/// <summary>
		/// The user's generated password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The user's preferred telephone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// True if the enduser's phone number has been verified; otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number_verified")]
		public System.Nullable<System.Boolean> Phone_number_verified { get; set; }
		
		/// <summary>
		/// The URL of the user's profile picture.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="picture")]
		public string Picture { get; set; }
		
		/// <summary>
		/// A shorthand name by which the user wishes to be referred to at the Relying Party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferred_username")]
		public string Preferred_username { get; set; }
		
		/// <summary>
		/// The URL of the user's profile page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public string Profile { get; set; }
		
		/// <summary>
		/// Subject - User identifier at the issuer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
		
		/// <summary>
		/// The user's simplified, shortened identifier at the Issuer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// The time when the User's information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.Double> Updated_at { get; set; }
		
		/// <summary>
		/// The URL of user's mailbox in a webmail application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webmail")]
		public string Webmail { get; set; }
		
		/// <summary>
		/// The URL of the user's webpage or blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
		
		/// <summary>
		/// A string from the zoneinfo time zone database representing the user's time zone. For example, Europe/Paris or America/Los_Angeles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zoneinfo")]
		public string Zoneinfo { get; set; }
	}
	
	public class UserPostPostBodyAddress
	{
		
		/// <summary>
		/// Country name component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Full mailing address, formatted for display or use on a mailing label. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair or as a single line feed character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formatted")]
		public string Formatted { get; set; }
		
		/// <summary>
		/// City or locality component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Zip code or postal code component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		/// <summary>
		/// State, province, prefecture, or region component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Full street address component, which MAY include house number, street name, post office box, and multi-line extended street address information. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair or as a single line feed character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_address")]
		public string Street_address { get; set; }
	}
	
	public class UserGetByUsernameReturn
	{
		
		/// <summary>
		/// The URL of the user's JSON representation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="@id")]
		public string _id { get; set; }
		
		/// <summary>
		/// The user's preferred postal address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public UserGetByUsernameReturnAddress Address { get; set; }
		
		/// <summary>
		/// The user's birthday, represented as an ISO 8601:2004 [ISO8601‑2004] YYYY-MM-DD format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="birthdate")]
		public string Birthdate { get; set; }
		
		/// <summary>
		/// The user's preferred email address.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// True if the user's e-mail address has been verified; otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email_verified")]
		public System.Nullable<System.Boolean> Email_verified { get; set; }
		
		/// <summary>
		/// The user's surname(s) or last name(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="family_name")]
		public string Family_name { get; set; }
		
		/// <summary>
		/// The enduser's gender. Possible values are: female, male, and unknown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public string Gender { get; set; }
		
		/// <summary>
		/// The user's given name(s) or first name(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="given_name")]
		public string Given_name { get; set; }
		
		/// <summary>
		/// The user's locale, represented as a BCP47 [RFC5646] language tag. It is an ISO 639-1 Alpha-2 language code in lowercase and an ISO 3166-1 Alpha-2 country code in uppercase letters, separated by a dash.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locale")]
		public string Locale { get; set; }
		
		/// <summary>
		/// The simplified URL of the user's profile page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="me")]
		public string Me { get; set; }
		
		/// <summary>
		/// The user's middle name(s).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="middle_name")]
		public string Middle_name { get; set; }
		
		/// <summary>
		/// The user's full name in displayable form, including all name parts, possibly including titles and suffixes, ordered according to the enduser's locale and preferences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A casual name of the User that may or may not be the same as the given_name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nickname")]
		public string Nickname { get; set; }
		
		/// <summary>
		/// The user's generated password.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="password")]
		public string Password { get; set; }
		
		/// <summary>
		/// The user's preferred telephone number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number")]
		public string Phone_number { get; set; }
		
		/// <summary>
		/// True if the enduser's phone number has been verified; otherwise false.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone_number_verified")]
		public System.Nullable<System.Boolean> Phone_number_verified { get; set; }
		
		/// <summary>
		/// The URL of the user's profile picture.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="picture")]
		public string Picture { get; set; }
		
		/// <summary>
		/// A shorthand name by which the user wishes to be referred to at the Relying Party.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preferred_username")]
		public string Preferred_username { get; set; }
		
		/// <summary>
		/// The URL of the user's profile page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public string Profile { get; set; }
		
		/// <summary>
		/// Subject - User identifier at the issuer.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sub")]
		public string Sub { get; set; }
		
		/// <summary>
		/// The user's simplified, shortened identifier at the Issuer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uid")]
		public string Uid { get; set; }
		
		/// <summary>
		/// The time when the User's information was last updated. Its value is a JSON number representing the number of seconds from 1970-01-01T0:0:0Z as measured in UTC until the date/time.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updated_at")]
		public System.Nullable<System.Double> Updated_at { get; set; }
		
		/// <summary>
		/// The URL of user's mailbox in a webmail application.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webmail")]
		public string Webmail { get; set; }
		
		/// <summary>
		/// The URL of the user's webpage or blog.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="website")]
		public string Website { get; set; }
		
		/// <summary>
		/// A string from the zoneinfo time zone database representing the user's time zone. For example, Europe/Paris or America/Los_Angeles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zoneinfo")]
		public string Zoneinfo { get; set; }
	}
	
	public class UserGetByUsernameReturnAddress
	{
		
		/// <summary>
		/// Country name component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="country")]
		public string Country { get; set; }
		
		/// <summary>
		/// Full mailing address, formatted for display or use on a mailing label. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair or as a single line feed character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formatted")]
		public string Formatted { get; set; }
		
		/// <summary>
		/// City or locality component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locality")]
		public string Locality { get; set; }
		
		/// <summary>
		/// Zip code or postal code component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postal_code")]
		public string Postal_code { get; set; }
		
		/// <summary>
		/// State, province, prefecture, or region component.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="region")]
		public string Region { get; set; }
		
		/// <summary>
		/// Full street address component, which MAY include house number, street name, post office box, and multi-line extended street address information. This field MAY contain multiple lines, separated by newlines. Newlines can be represented either as a carriage return/line feed pair or as a single line feed character.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="street_address")]
		public string Street_address { get; set; }
	}
	
	public enum UserGetByUsernameAndKindAndScopeKind
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="'access'")]
		_access_ = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="'refresh'")]
		_refresh_ = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="'authorization'")]
		_authorization_ = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="'id'")]
		_id_ = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="'selfie'")]
		_selfie_ = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="'plain'")]
		_plain_ = 5,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
