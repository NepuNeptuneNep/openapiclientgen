//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Contains the count of workflow executions returned from <a>CountOpenWorkflowExecutions</a> or <a>CountClosedWorkflowExecutions</a> 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionCount
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="truncated")]
		public System.Nullable<System.Boolean> Truncated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CountClosedWorkflowExecutionsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTimeFilter")]
		public ExecutionTimeFilter StartTimeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closeTimeFilter")]
		public ExecutionTimeFilter CloseTimeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionFilter")]
		public WorkflowExecutionFilter ExecutionFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeFilter")]
		public WorkflowTypeFilter TypeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagFilter")]
		public TagFilter TagFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closeStatusFilter")]
		public CloseStatusFilter CloseStatusFilter { get; set; }
	}
	
	/// <summary>
	/// Used to filter the workflow executions in visibility APIs by various time-based rules. Each parameter, if specified, defines a rule that must be satisfied by each returned query result. The parameter values are in the <a href="https://en.wikipedia.org/wiki/Unix_time">Unix Time format</a>. For example: <code>"oldestDate": 1325376070.</code> 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExecutionTimeFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="oldestDate")]
		public System.DateTimeOffset OldestDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestDate")]
		public System.DateTimeOffset LatestDate { get; set; }
	}
	
	/// <summary>
	/// Used to filter the workflow executions in visibility APIs by their <code>workflowId</code>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
	}
	
	/// <summary>
	/// Used to filter workflow execution query results by type. Each parameter, if specified, defines a rule that must be satisfied by each returned result.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowTypeFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Used to filter the workflow executions in visibility APIs based on a tag.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	/// <summary>
	/// Used to filter the closed workflow executions in visibility APIs by their close status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CloseStatusFilter
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public CloseStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CloseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FAILED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CANCELED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUED_AS_NEW = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMED_OUT = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UnknownResourceFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperationNotPermittedFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CountOpenWorkflowExecutionsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTimeFilter")]
		public ExecutionTimeFilter StartTimeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeFilter")]
		public WorkflowTypeFilter TypeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagFilter")]
		public TagFilter TagFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionFilter")]
		public WorkflowExecutionFilter ExecutionFilter { get; set; }
	}
	
	/// <summary>
	/// Contains the count of tasks in a task list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PendingTaskCount
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="count")]
		public int Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="truncated")]
		public System.Nullable<System.Boolean> Truncated { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CountPendingActivityTasksInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskList")]
		public TaskList TaskList { get; set; }
	}
	
	/// <summary>
	/// Represents a task list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TaskList
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CountPendingDecisionTasksInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskList")]
		public TaskList TaskList { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeprecateActivityTypeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityType")]
		public ActivityType ActivityType { get; set; }
	}
	
	/// <summary>
	/// Represents an activity type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivityType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypeDeprecatedFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeprecateDomainInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainDeprecatedFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeprecateWorkflowTypeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
	}
	
	/// <summary>
	/// Represents a workflow type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
	}
	
	/// <summary>
	/// Detailed information about an activity type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivityTypeDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeInfo")]
		public ActivityTypeInfo TypeInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public ActivityTypeConfiguration Configuration { get; set; }
	}
	
	/// <summary>
	/// Detailed information about an activity type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivityTypeInfo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityType")]
		public ActivityType ActivityType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public RegistrationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deprecationDate")]
		public System.DateTimeOffset DeprecationDate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RegistrationStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REGISTERED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED = 1,
	}
	
	/// <summary>
	/// Configuration settings registered with the activity type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivityTypeConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskStartToCloseTimeout")]
		public string DefaultTaskStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskHeartbeatTimeout")]
		public string DefaultTaskHeartbeatTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskList")]
		public TaskList DefaultTaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskPriority")]
		public string DefaultTaskPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskScheduleToStartTimeout")]
		public string DefaultTaskScheduleToStartTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskScheduleToCloseTimeout")]
		public string DefaultTaskScheduleToCloseTimeout { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeActivityTypeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityType")]
		public ActivityType ActivityType { get; set; }
	}
	
	/// <summary>
	/// Contains details of a domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainInfo")]
		public DomainInfo DomainInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public DomainConfiguration Configuration { get; set; }
	}
	
	/// <summary>
	/// Contains general information about a domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainInfo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public RegistrationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arn")]
		public string Arn { get; set; }
	}
	
	/// <summary>
	/// Contains the configuration settings of a domain.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionRetentionPeriodInDays")]
		public string WorkflowExecutionRetentionPeriodInDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeDomainInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Contains details about a workflow execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionInfo")]
		public WorkflowExecutionInfo ExecutionInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionConfiguration")]
		public WorkflowExecutionConfiguration ExecutionConfiguration { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="openCounts")]
		public WorkflowExecutionOpenCounts OpenCounts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestActivityTaskTimestamp")]
		public System.DateTimeOffset LatestActivityTaskTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestExecutionContext")]
		public string LatestExecutionContext { get; set; }
	}
	
	/// <summary>
	/// Contains information about a workflow execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionInfo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="execution")]
		public WorkflowExecution Execution { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTimestamp")]
		public System.DateTimeOffset StartTimestamp { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closeTimestamp")]
		public System.DateTimeOffset CloseTimestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionStatus")]
		public ExecutionStatus ExecutionStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closeStatus")]
		public CloseStatus CloseStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parent")]
		public WorkflowExecution Parent { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagList")]
		public string[] TagList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancelRequested")]
		public System.Nullable<System.Boolean> CancelRequested { get; set; }
	}
	
	/// <summary>
	/// Represents a workflow execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecution
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExecutionStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLOSED = 1,
	}
	
	/// <summary>
	/// The configuration settings for a workflow execution including timeout values, tasklist etc. These configuration settings are determined from the defaults specified when registering the workflow type and those specified when starting the workflow execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionConfiguration
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskStartToCloseTimeout")]
		public string TaskStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionStartToCloseTimeout")]
		public string ExecutionStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskList")]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskPriority")]
		public string TaskPriority { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="childPolicy")]
		public ChildPolicy ChildPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambdaRole")]
		public string LambdaRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ChildPolicy
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TERMINATE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ABANDON = 2,
	}
	
	/// <summary>
	/// Contains the counts of open tasks, child workflow executions and timers for a workflow execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionOpenCounts
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="openActivityTasks")]
		public int OpenActivityTasks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="openDecisionTasks")]
		public int OpenDecisionTasks { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="openTimers")]
		public int OpenTimers { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="openChildWorkflowExecutions")]
		public int OpenChildWorkflowExecutions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="openLambdaFunctions")]
		public System.Nullable<System.Int32> OpenLambdaFunctions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeWorkflowExecutionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="execution")]
		public WorkflowExecution Execution { get; set; }
	}
	
	/// <summary>
	/// Contains details about a workflow type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowTypeDetail
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeInfo")]
		public WorkflowTypeInfo TypeInfo { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="configuration")]
		public WorkflowTypeConfiguration Configuration { get; set; }
	}
	
	/// <summary>
	/// Contains information about a workflow type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowTypeInfo
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public RegistrationStatus Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="creationDate")]
		public System.DateTimeOffset CreationDate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="deprecationDate")]
		public System.DateTimeOffset DeprecationDate { get; set; }
	}
	
	/// <summary>
	/// The configuration settings of a workflow type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowTypeConfiguration
	{
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskStartToCloseTimeout")]
		public string DefaultTaskStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultExecutionStartToCloseTimeout")]
		public string DefaultExecutionStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskList")]
		public TaskList DefaultTaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskPriority")]
		public string DefaultTaskPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultChildPolicy")]
		public ChildPolicy DefaultChildPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultLambdaRole")]
		public string DefaultLambdaRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DescribeWorkflowTypeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
	}
	
	/// <summary>
	/// Paginated representation of a workflow history for a workflow execution. This is the up to date, complete and authoritative record of the events related to all tasks and events in the life of the workflow execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class History
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="events")]
		public HistoryEvent[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// <p>Event within a workflow execution. A history event can be one of these types:</p> <ul> <li> <p> <code>ActivityTaskCancelRequested</code> – A <code>RequestCancelActivityTask</code> decision was received by the system.</p> </li> <li> <p> <code>ActivityTaskCanceled</code> – The activity task was successfully canceled.</p> </li> <li> <p> <code>ActivityTaskCompleted</code> – An activity worker successfully completed an activity task by calling <a>RespondActivityTaskCompleted</a>.</p> </li> <li> <p> <code>ActivityTaskFailed</code> – An activity worker failed an activity task by calling <a>RespondActivityTaskFailed</a>.</p> </li> <li> <p> <code>ActivityTaskScheduled</code> – An activity task was scheduled for execution.</p> </li> <li> <p> <code>ActivityTaskStarted</code> – The scheduled activity task was dispatched to a worker.</p> </li> <li> <p> <code>ActivityTaskTimedOut</code> – The activity task timed out.</p> </li> <li> <p> <code>CancelTimerFailed</code> – Failed to process CancelTimer decision. This happens when the decision isn't configured properly, for example no timer exists with the specified timer Id.</p> </li> <li> <p> <code>CancelWorkflowExecutionFailed</code> – A request to cancel a workflow execution failed.</p> </li> <li> <p> <code>ChildWorkflowExecutionCanceled</code> – A child workflow execution, started by this workflow execution, was canceled and closed.</p> </li> <li> <p> <code>ChildWorkflowExecutionCompleted</code> – A child workflow execution, started by this workflow execution, completed successfully and was closed.</p> </li> <li> <p> <code>ChildWorkflowExecutionFailed</code> – A child workflow execution, started by this workflow execution, failed to complete successfully and was closed.</p> </li> <li> <p> <code>ChildWorkflowExecutionStarted</code> – A child workflow execution was successfully started.</p> </li> <li> <p> <code>ChildWorkflowExecutionTerminated</code> – A child workflow execution, started by this workflow execution, was terminated.</p> </li> <li> <p> <code>ChildWorkflowExecutionTimedOut</code> – A child workflow execution, started by this workflow execution, timed out and was closed.</p> </li> <li> <p> <code>CompleteWorkflowExecutionFailed</code> – The workflow execution failed to complete.</p> </li> <li> <p> <code>ContinueAsNewWorkflowExecutionFailed</code> – The workflow execution failed to complete after being continued as a new workflow execution.</p> </li> <li> <p> <code>DecisionTaskCompleted</code> – The decider successfully completed a decision task by calling <a>RespondDecisionTaskCompleted</a>.</p> </li> <li> <p> <code>DecisionTaskScheduled</code> – A decision task was scheduled for the workflow execution.</p> </li> <li> <p> <code>DecisionTaskStarted</code> – The decision task was dispatched to a decider.</p> </li> <li> <p> <code>DecisionTaskTimedOut</code> – The decision task timed out.</p> </li> <li> <p> <code>ExternalWorkflowExecutionCancelRequested</code> – Request to cancel an external workflow execution was successfully delivered to the target execution.</p> </li> <li> <p> <code>ExternalWorkflowExecutionSignaled</code> – A signal, requested by this workflow execution, was successfully delivered to the target external workflow execution.</p> </li> <li> <p> <code>FailWorkflowExecutionFailed</code> – A request to mark a workflow execution as failed, itself failed.</p> </li> <li> <p> <code>MarkerRecorded</code> – A marker was recorded in the workflow history as the result of a <code>RecordMarker</code> decision.</p> </li> <li> <p> <code>RecordMarkerFailed</code> – A <code>RecordMarker</code> decision was returned as failed.</p> </li> <li> <p> <code>RequestCancelActivityTaskFailed</code> – Failed to process RequestCancelActivityTask decision. This happens when the decision isn't configured properly.</p> </li> <li> <p> <code>RequestCancelExternalWorkflowExecutionFailed</code> – Request to cancel an external workflow execution failed.</p> </li> <li> <p> <code>RequestCancelExternalWorkflowExecutionInitiated</code> – A request was made to request the cancellation of an external workflow execution.</p> </li> <li> <p> <code>ScheduleActivityTaskFailed</code> – Failed to process ScheduleActivityTask decision. This happens when the decision isn't configured properly, for example the activity type specified isn't registered.</p> </li> <li> <p> <code>SignalExternalWorkflowExecutionFailed</code> – The request to signal an external workflow execution failed.</p> </li> <li> <p> <code>SignalExternalWorkflowExecutionInitiated</code> – A request to signal an external workflow was made.</p> </li> <li> <p> <code>StartActivityTaskFailed</code> – A scheduled activity task failed to start.</p> </li> <li> <p> <code>StartChildWorkflowExecutionFailed</code> – Failed to process StartChildWorkflowExecution decision. This happens when the decision isn't configured properly, for example the workflow type specified isn't registered.</p> </li> <li> <p> <code>StartChildWorkflowExecutionInitiated</code> – A request was made to start a child workflow execution.</p> </li> <li> <p> <code>StartTimerFailed</code> – Failed to process StartTimer decision. This happens when the decision isn't configured properly, for example a timer already exists with the specified timer Id.</p> </li> <li> <p> <code>TimerCanceled</code> – A timer, previously started for this workflow execution, was successfully canceled.</p> </li> <li> <p> <code>TimerFired</code> – A timer, previously started for this workflow execution, fired.</p> </li> <li> <p> <code>TimerStarted</code> – A timer was started for the workflow execution due to a <code>StartTimer</code> decision.</p> </li> <li> <p> <code>WorkflowExecutionCancelRequested</code> – A request to cancel this workflow execution was made.</p> </li> <li> <p> <code>WorkflowExecutionCanceled</code> – The workflow execution was successfully canceled and closed.</p> </li> <li> <p> <code>WorkflowExecutionCompleted</code> – The workflow execution was closed due to successful completion.</p> </li> <li> <p> <code>WorkflowExecutionContinuedAsNew</code> – The workflow execution was closed and a new execution of the same type was created with the same workflowId.</p> </li> <li> <p> <code>WorkflowExecutionFailed</code> – The workflow execution closed due to a failure.</p> </li> <li> <p> <code>WorkflowExecutionSignaled</code> – An external signal was received for the workflow execution.</p> </li> <li> <p> <code>WorkflowExecutionStarted</code> – The workflow execution was started.</p> </li> <li> <p> <code>WorkflowExecutionTerminated</code> – The workflow execution was terminated.</p> </li> <li> <p> <code>WorkflowExecutionTimedOut</code> – The workflow execution was closed because a time out was exceeded.</p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HistoryEvent
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventTimestamp")]
		public System.DateTimeOffset EventTimestamp { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventType")]
		public EventType EventType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="eventId")]
		public int EventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionStartedEventAttributes")]
		public WorkflowExecutionStartedEventAttributes WorkflowExecutionStartedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionCompletedEventAttributes")]
		public WorkflowExecutionCompletedEventAttributes WorkflowExecutionCompletedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completeWorkflowExecutionFailedEventAttributes")]
		public CompleteWorkflowExecutionFailedEventAttributes CompleteWorkflowExecutionFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionFailedEventAttributes")]
		public WorkflowExecutionFailedEventAttributes WorkflowExecutionFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failWorkflowExecutionFailedEventAttributes")]
		public FailWorkflowExecutionFailedEventAttributes FailWorkflowExecutionFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionTimedOutEventAttributes")]
		public WorkflowExecutionTimedOutEventAttributes WorkflowExecutionTimedOutEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionCanceledEventAttributes")]
		public WorkflowExecutionCanceledEventAttributes WorkflowExecutionCanceledEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancelWorkflowExecutionFailedEventAttributes")]
		public CancelWorkflowExecutionFailedEventAttributes CancelWorkflowExecutionFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionContinuedAsNewEventAttributes")]
		public WorkflowExecutionContinuedAsNewEventAttributes WorkflowExecutionContinuedAsNewEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="continueAsNewWorkflowExecutionFailedEventAttributes")]
		public ContinueAsNewWorkflowExecutionFailedEventAttributes ContinueAsNewWorkflowExecutionFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionTerminatedEventAttributes")]
		public WorkflowExecutionTerminatedEventAttributes WorkflowExecutionTerminatedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionCancelRequestedEventAttributes")]
		public WorkflowExecutionCancelRequestedEventAttributes WorkflowExecutionCancelRequestedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="decisionTaskScheduledEventAttributes")]
		public DecisionTaskScheduledEventAttributes DecisionTaskScheduledEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="decisionTaskStartedEventAttributes")]
		public DecisionTaskStartedEventAttributes DecisionTaskStartedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventAttributes")]
		public DecisionTaskCompletedEventAttributes DecisionTaskCompletedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="decisionTaskTimedOutEventAttributes")]
		public DecisionTaskTimedOutEventAttributes DecisionTaskTimedOutEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activityTaskScheduledEventAttributes")]
		public ActivityTaskScheduledEventAttributes ActivityTaskScheduledEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activityTaskStartedEventAttributes")]
		public ActivityTaskStartedEventAttributes ActivityTaskStartedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activityTaskCompletedEventAttributes")]
		public ActivityTaskCompletedEventAttributes ActivityTaskCompletedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activityTaskFailedEventAttributes")]
		public ActivityTaskFailedEventAttributes ActivityTaskFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activityTaskTimedOutEventAttributes")]
		public ActivityTaskTimedOutEventAttributes ActivityTaskTimedOutEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activityTaskCanceledEventAttributes")]
		public ActivityTaskCanceledEventAttributes ActivityTaskCanceledEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="activityTaskCancelRequestedEventAttributes")]
		public ActivityTaskCancelRequestedEventAttributes ActivityTaskCancelRequestedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionSignaledEventAttributes")]
		public WorkflowExecutionSignaledEventAttributes WorkflowExecutionSignaledEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="markerRecordedEventAttributes")]
		public MarkerRecordedEventAttributes MarkerRecordedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recordMarkerFailedEventAttributes")]
		public RecordMarkerFailedEventAttributes RecordMarkerFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timerStartedEventAttributes")]
		public TimerStartedEventAttributes TimerStartedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timerFiredEventAttributes")]
		public TimerFiredEventAttributes TimerFiredEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timerCanceledEventAttributes")]
		public TimerCanceledEventAttributes TimerCanceledEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startChildWorkflowExecutionInitiatedEventAttributes")]
		public StartChildWorkflowExecutionInitiatedEventAttributes StartChildWorkflowExecutionInitiatedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childWorkflowExecutionStartedEventAttributes")]
		public ChildWorkflowExecutionStartedEventAttributes ChildWorkflowExecutionStartedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childWorkflowExecutionCompletedEventAttributes")]
		public ChildWorkflowExecutionCompletedEventAttributes ChildWorkflowExecutionCompletedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childWorkflowExecutionFailedEventAttributes")]
		public ChildWorkflowExecutionFailedEventAttributes ChildWorkflowExecutionFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childWorkflowExecutionTimedOutEventAttributes")]
		public ChildWorkflowExecutionTimedOutEventAttributes ChildWorkflowExecutionTimedOutEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childWorkflowExecutionCanceledEventAttributes")]
		public ChildWorkflowExecutionCanceledEventAttributes ChildWorkflowExecutionCanceledEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childWorkflowExecutionTerminatedEventAttributes")]
		public ChildWorkflowExecutionTerminatedEventAttributes ChildWorkflowExecutionTerminatedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signalExternalWorkflowExecutionInitiatedEventAttributes")]
		public SignalExternalWorkflowExecutionInitiatedEventAttributes SignalExternalWorkflowExecutionInitiatedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalWorkflowExecutionSignaledEventAttributes")]
		public ExternalWorkflowExecutionSignaledEventAttributes ExternalWorkflowExecutionSignaledEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signalExternalWorkflowExecutionFailedEventAttributes")]
		public SignalExternalWorkflowExecutionFailedEventAttributes SignalExternalWorkflowExecutionFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalWorkflowExecutionCancelRequestedEventAttributes")]
		public ExternalWorkflowExecutionCancelRequestedEventAttributes ExternalWorkflowExecutionCancelRequestedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestCancelExternalWorkflowExecutionInitiatedEventAttributes")]
		public RequestCancelExternalWorkflowExecutionInitiatedEventAttributes RequestCancelExternalWorkflowExecutionInitiatedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestCancelExternalWorkflowExecutionFailedEventAttributes")]
		public RequestCancelExternalWorkflowExecutionFailedEventAttributes RequestCancelExternalWorkflowExecutionFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduleActivityTaskFailedEventAttributes")]
		public ScheduleActivityTaskFailedEventAttributes ScheduleActivityTaskFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestCancelActivityTaskFailedEventAttributes")]
		public RequestCancelActivityTaskFailedEventAttributes RequestCancelActivityTaskFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTimerFailedEventAttributes")]
		public StartTimerFailedEventAttributes StartTimerFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancelTimerFailedEventAttributes")]
		public CancelTimerFailedEventAttributes CancelTimerFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startChildWorkflowExecutionFailedEventAttributes")]
		public StartChildWorkflowExecutionFailedEventAttributes StartChildWorkflowExecutionFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambdaFunctionScheduledEventAttributes")]
		public LambdaFunctionScheduledEventAttributes LambdaFunctionScheduledEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambdaFunctionStartedEventAttributes")]
		public LambdaFunctionStartedEventAttributes LambdaFunctionStartedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambdaFunctionCompletedEventAttributes")]
		public LambdaFunctionCompletedEventAttributes LambdaFunctionCompletedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambdaFunctionFailedEventAttributes")]
		public LambdaFunctionFailedEventAttributes LambdaFunctionFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambdaFunctionTimedOutEventAttributes")]
		public LambdaFunctionTimedOutEventAttributes LambdaFunctionTimedOutEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduleLambdaFunctionFailedEventAttributes")]
		public ScheduleLambdaFunctionFailedEventAttributes ScheduleLambdaFunctionFailedEventAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startLambdaFunctionFailedEventAttributes")]
		public StartLambdaFunctionFailedEventAttributes StartLambdaFunctionFailedEventAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionStarted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionCancelRequested = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionCompleted = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CompleteWorkflowExecutionFailed = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionFailed = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailWorkflowExecutionFailed = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionTimedOut = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionCanceled = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancelWorkflowExecutionFailed = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionContinuedAsNew = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContinueAsNewWorkflowExecutionFailed = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionTerminated = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DecisionTaskScheduled = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DecisionTaskStarted = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DecisionTaskCompleted = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DecisionTaskTimedOut = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskScheduled = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduleActivityTaskFailed = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskStarted = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskCompleted = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskFailed = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskTimedOut = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskCanceled = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ActivityTaskCancelRequested = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCancelActivityTaskFailed = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WorkflowExecutionSignaled = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MarkerRecorded = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecordMarkerFailed = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimerStarted = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartTimerFailed = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimerFired = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TimerCanceled = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancelTimerFailed = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartChildWorkflowExecutionInitiated = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartChildWorkflowExecutionFailed = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionStarted = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionCompleted = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionFailed = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionTimedOut = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionCanceled = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ChildWorkflowExecutionTerminated = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignalExternalWorkflowExecutionInitiated = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignalExternalWorkflowExecutionFailed = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExternalWorkflowExecutionSignaled = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCancelExternalWorkflowExecutionInitiated = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCancelExternalWorkflowExecutionFailed = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ExternalWorkflowExecutionCancelRequested = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaFunctionScheduled = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaFunctionStarted = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaFunctionCompleted = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaFunctionFailed = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LambdaFunctionTimedOut = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduleLambdaFunctionFailed = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartLambdaFunctionFailed = 53,
	}
	
	/// <summary>
	/// Provides details of <code>WorkflowExecutionStarted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionStartedEventAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionStartToCloseTimeout")]
		public string ExecutionStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskStartToCloseTimeout")]
		public string TaskStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="childPolicy")]
		public ChildPolicy ChildPolicy { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskList")]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskPriority")]
		public string TaskPriority { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagList")]
		public string[] TagList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="continuedExecutionRunId")]
		public string ContinuedExecutionRunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentWorkflowExecution")]
		public WorkflowExecution ParentWorkflowExecution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parentInitiatedEventId")]
		public System.Nullable<System.Int32> ParentInitiatedEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambdaRole")]
		public string LambdaRole { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>WorkflowExecutionCompleted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionCompletedEventAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>CompleteWorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompleteWorkflowExecutionFailedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public CompleteWorkflowExecutionFailedCause Cause { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CompleteWorkflowExecutionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHANDLED_DECISION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 1,
	}
	
	/// <summary>
	/// Provides the details of the <code>WorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionFailedEventAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>FailWorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FailWorkflowExecutionFailedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public CompleteWorkflowExecutionFailedCause Cause { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>WorkflowExecutionTimedOut</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionTimedOutEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeoutType")]
		public WorkflowExecutionTimeoutType TimeoutType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="childPolicy")]
		public ChildPolicy ChildPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WorkflowExecutionTimeoutType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_TO_CLOSE = 0,
	}
	
	/// <summary>
	/// Provides the details of the <code>WorkflowExecutionCanceled</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionCanceledEventAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>CancelWorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelWorkflowExecutionFailedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public CompleteWorkflowExecutionFailedCause Cause { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>WorkflowExecutionContinuedAsNew</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionContinuedAsNewEventAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="newExecutionRunId")]
		public string NewExecutionRunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionStartToCloseTimeout")]
		public string ExecutionStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskList")]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskPriority")]
		public string TaskPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskStartToCloseTimeout")]
		public string TaskStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="childPolicy")]
		public ChildPolicy ChildPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagList")]
		public string[] TagList { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambdaRole")]
		public string LambdaRole { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ContinueAsNewWorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContinueAsNewWorkflowExecutionFailedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public ContinueAsNewWorkflowExecutionFailedCause Cause { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ContinueAsNewWorkflowExecutionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHANDLED_DECISION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOW_TYPE_DEPRECATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOW_TYPE_DOES_NOT_EXIST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_TASK_LIST_UNDEFINED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_CHILD_POLICY_UNDEFINED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTINUE_AS_NEW_WORKFLOW_EXECUTION_RATE_EXCEEDED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 8,
	}
	
	/// <summary>
	/// Provides the details of the <code>WorkflowExecutionTerminated</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionTerminatedEventAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="childPolicy")]
		public ChildPolicy ChildPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public WorkflowExecutionTerminatedCause Cause { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WorkflowExecutionTerminatedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD_POLICY_APPLIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EVENT_LIMIT_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATOR_INITIATED = 2,
	}
	
	/// <summary>
	/// Provides the details of the <code>WorkflowExecutionCancelRequested</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionCancelRequestedEventAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="externalWorkflowExecution")]
		public WorkflowExecution ExternalWorkflowExecution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalInitiatedEventId")]
		public System.Nullable<System.Int32> ExternalInitiatedEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public WorkflowExecutionCancelRequestedCause Cause { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum WorkflowExecutionCancelRequestedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD_POLICY_APPLIED = 0,
	}
	
	/// <summary>
	/// Provides details about the <code>DecisionTaskScheduled</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DecisionTaskScheduledEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskList")]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskPriority")]
		public string TaskPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startToCloseTimeout")]
		public string StartToCloseTimeout { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>DecisionTaskStarted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DecisionTaskStartedEventAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public string Identity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledEventId")]
		public int ScheduledEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>DecisionTaskCompleted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DecisionTaskCompletedEventAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="executionContext")]
		public string ExecutionContext { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledEventId")]
		public int ScheduledEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>DecisionTaskTimedOut</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DecisionTaskTimedOutEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeoutType")]
		public WorkflowExecutionTimeoutType TimeoutType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledEventId")]
		public int ScheduledEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ActivityTaskScheduled</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivityTaskScheduledEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityType")]
		public ActivityType ActivityType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityId")]
		public string ActivityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public string Control { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduleToStartTimeout")]
		public string ScheduleToStartTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduleToCloseTimeout")]
		public string ScheduleToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startToCloseTimeout")]
		public string StartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskList")]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskPriority")]
		public string TaskPriority { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="heartbeatTimeout")]
		public string HeartbeatTimeout { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ActivityTaskStarted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivityTaskStartedEventAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public string Identity { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledEventId")]
		public int ScheduledEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ActivityTaskCompleted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivityTaskCompletedEventAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledEventId")]
		public int ScheduledEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ActivityTaskFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivityTaskFailedEventAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledEventId")]
		public int ScheduledEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ActivityTaskTimedOut</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivityTaskTimedOutEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeoutType")]
		public ActivityTaskTimeoutType TimeoutType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledEventId")]
		public int ScheduledEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ActivityTaskTimeoutType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_TO_CLOSE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULE_TO_START = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCHEDULE_TO_CLOSE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HEARTBEAT = 3,
	}
	
	/// <summary>
	/// Provides the details of the <code>ActivityTaskCanceled</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivityTaskCanceledEventAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledEventId")]
		public int ScheduledEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="latestCancelRequestedEventId")]
		public System.Nullable<System.Int32> LatestCancelRequestedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ActivityTaskCancelRequested</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivityTaskCancelRequestedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityId")]
		public string ActivityId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>WorkflowExecutionSignaled</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionSignaledEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signalName")]
		public string SignalName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalWorkflowExecution")]
		public WorkflowExecution ExternalWorkflowExecution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="externalInitiatedEventId")]
		public System.Nullable<System.Int32> ExternalInitiatedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>MarkerRecorded</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MarkerRecordedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="markerName")]
		public string MarkerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>RecordMarkerFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecordMarkerFailedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="markerName")]
		public string MarkerName { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public RecordMarkerFailedCause Cause { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RecordMarkerFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 0,
	}
	
	/// <summary>
	/// Provides the details of the <code>TimerStarted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimerStartedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timerId")]
		public string TimerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public string Control { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startToFireTimeout")]
		public string StartToFireTimeout { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>TimerFired</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimerFiredEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timerId")]
		public string TimerId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	///  Provides the details of the <code>TimerCanceled</code> event. 
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimerCanceledEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timerId")]
		public string TimerId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>StartChildWorkflowExecutionInitiated</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartChildWorkflowExecutionInitiatedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public string Control { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionStartToCloseTimeout")]
		public string ExecutionStartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskList")]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskPriority")]
		public string TaskPriority { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="childPolicy")]
		public ChildPolicy ChildPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskStartToCloseTimeout")]
		public string TaskStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagList")]
		public string[] TagList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambdaRole")]
		public string LambdaRole { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ChildWorkflowExecutionStarted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChildWorkflowExecutionStartedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowExecution")]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="initiatedEventId")]
		public int InitiatedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ChildWorkflowExecutionCompleted</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChildWorkflowExecutionCompletedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowExecution")]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="initiatedEventId")]
		public int InitiatedEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ChildWorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChildWorkflowExecutionFailedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowExecution")]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="initiatedEventId")]
		public int InitiatedEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ChildWorkflowExecutionTimedOut</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChildWorkflowExecutionTimedOutEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowExecution")]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timeoutType")]
		public WorkflowExecutionTimeoutType TimeoutType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="initiatedEventId")]
		public int InitiatedEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	/// Provide details of the <code>ChildWorkflowExecutionCanceled</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChildWorkflowExecutionCanceledEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowExecution")]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="initiatedEventId")]
		public int InitiatedEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ChildWorkflowExecutionTerminated</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChildWorkflowExecutionTerminatedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowExecution")]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="initiatedEventId")]
		public int InitiatedEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>SignalExternalWorkflowExecutionInitiated</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SignalExternalWorkflowExecutionInitiatedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signalName")]
		public string SignalName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public string Control { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ExternalWorkflowExecutionSignaled</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternalWorkflowExecutionSignaledEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowExecution")]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="initiatedEventId")]
		public int InitiatedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>SignalExternalWorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SignalExternalWorkflowExecutionFailedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public SignalExternalWorkflowExecutionFailedCause Cause { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="initiatedEventId")]
		public int InitiatedEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public string Control { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SignalExternalWorkflowExecutionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 2,
	}
	
	/// <summary>
	/// Provides the details of the <code>ExternalWorkflowExecutionCancelRequested</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExternalWorkflowExecutionCancelRequestedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowExecution")]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="initiatedEventId")]
		public int InitiatedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>RequestCancelExternalWorkflowExecutionInitiated</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestCancelExternalWorkflowExecutionInitiatedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public string Control { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>RequestCancelExternalWorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestCancelExternalWorkflowExecutionFailedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public RequestCancelExternalWorkflowExecutionFailedCause Cause { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="initiatedEventId")]
		public int InitiatedEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public string Control { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RequestCancelExternalWorkflowExecutionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 2,
	}
	
	/// <summary>
	/// Provides the details of the <code>ScheduleActivityTaskFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScheduleActivityTaskFailedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityType")]
		public ActivityType ActivityType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityId")]
		public string ActivityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public ScheduleActivityTaskFailedCause Cause { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScheduleActivityTaskFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_TYPE_DEPRECATED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_TYPE_DOES_NOT_EXIST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_ID_ALREADY_IN_USE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_ACTIVITIES_LIMIT_EXCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_CREATION_RATE_EXCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_TASK_LIST_UNDEFINED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 10,
	}
	
	/// <summary>
	/// Provides the details of the <code>RequestCancelActivityTaskFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestCancelActivityTaskFailedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityId")]
		public string ActivityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public RequestCancelActivityTaskFailedCause Cause { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RequestCancelActivityTaskFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_ID_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 1,
	}
	
	/// <summary>
	/// Provides the details of the <code>StartTimerFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartTimerFailedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timerId")]
		public string TimerId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public StartTimerFailedCause Cause { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StartTimerFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMER_ID_ALREADY_IN_USE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_TIMERS_LIMIT_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMER_CREATION_RATE_EXCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 3,
	}
	
	/// <summary>
	/// Provides the details of the <code>CancelTimerFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelTimerFailedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timerId")]
		public string TimerId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public CancelTimerFailedCause Cause { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CancelTimerFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMER_ID_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 1,
	}
	
	/// <summary>
	/// Provides the details of the <code>StartChildWorkflowExecutionFailed</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartChildWorkflowExecutionFailedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public StartChildWorkflowExecutionFailedCause Cause { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="initiatedEventId")]
		public int InitiatedEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public string Control { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StartChildWorkflowExecutionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOW_TYPE_DOES_NOT_EXIST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOW_TYPE_DEPRECATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_CHILDREN_LIMIT_EXCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_WORKFLOWS_LIMIT_EXCEEDED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CHILD_CREATION_RATE_EXCEEDED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WORKFLOW_ALREADY_RUNNING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_TASK_LIST_UNDEFINED = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEFAULT_CHILD_POLICY_UNDEFINED = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 10,
	}
	
	/// <summary>
	/// Provides the details of the <code>LambdaFunctionScheduled</code> event. It isn't set for other event types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaFunctionScheduledEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public string Control { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startToCloseTimeout")]
		public string StartToCloseTimeout { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>LambdaFunctionStarted</code> event. It isn't set for other event types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaFunctionStartedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledEventId")]
		public int ScheduledEventId { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>LambdaFunctionCompleted</code> event. It isn't set for other event types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaFunctionCompletedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledEventId")]
		public int ScheduledEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>LambdaFunctionFailed</code> event. It isn't set for other event types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaFunctionFailedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledEventId")]
		public int ScheduledEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
	}
	
	/// <summary>
	/// Provides details of the <code>LambdaFunctionTimedOut</code> event.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LambdaFunctionTimedOutEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="scheduledEventId")]
		public int ScheduledEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeoutType")]
		public WorkflowExecutionTimeoutType TimeoutType { get; set; }
	}
	
	/// <summary>
	/// Provides the details of the <code>ScheduleLambdaFunctionFailed</code> event. It isn't set for other event types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScheduleLambdaFunctionFailedEventAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public ScheduleLambdaFunctionFailedCause Cause { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionTaskCompletedEventId")]
		public int DecisionTaskCompletedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScheduleLambdaFunctionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ID_ALREADY_IN_USE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION = 3,
	}
	
	/// <summary>
	/// Provides the details of the <code>StartLambdaFunctionFailed</code> event. It isn't set for other event types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartLambdaFunctionFailedEventAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="scheduledEventId")]
		public System.Nullable<System.Int32> ScheduledEventId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cause")]
		public StartLambdaFunctionFailedCause Cause { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum StartLambdaFunctionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSUME_ROLE_FAILED = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetWorkflowExecutionHistoryInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="execution")]
		public WorkflowExecution Execution { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumPageSize")]
		public System.Nullable<System.Int32> MaximumPageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reverseOrder")]
		public System.Nullable<System.Boolean> ReverseOrder { get; set; }
	}
	
	/// <summary>
	/// Contains a paginated list of activity type information structures.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivityTypeInfos
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeInfos")]
		public ActivityTypeInfo[] TypeInfos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListActivityTypesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="registrationStatus")]
		public RegistrationStatus RegistrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumPageSize")]
		public System.Nullable<System.Int32> MaximumPageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reverseOrder")]
		public System.Nullable<System.Boolean> ReverseOrder { get; set; }
	}
	
	/// <summary>
	/// Contains a paginated list of information about workflow executions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionInfos
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="executionInfos")]
		public WorkflowExecutionInfo[] ExecutionInfos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListClosedWorkflowExecutionsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTimeFilter")]
		public ExecutionTimeFilter StartTimeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closeTimeFilter")]
		public ExecutionTimeFilter CloseTimeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionFilter")]
		public WorkflowExecutionFilter ExecutionFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="closeStatusFilter")]
		public CloseStatusFilter CloseStatusFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeFilter")]
		public WorkflowTypeFilter TypeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagFilter")]
		public TagFilter TagFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumPageSize")]
		public System.Nullable<System.Int32> MaximumPageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reverseOrder")]
		public System.Nullable<System.Boolean> ReverseOrder { get; set; }
	}
	
	/// <summary>
	/// Contains a paginated collection of DomainInfo structures.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainInfos
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domainInfos")]
		public DomainInfo[] DomainInfos1 { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListDomainsInput
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="registrationStatus")]
		public RegistrationStatus RegistrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumPageSize")]
		public System.Nullable<System.Int32> MaximumPageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reverseOrder")]
		public System.Nullable<System.Boolean> ReverseOrder { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListOpenWorkflowExecutionsInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startTimeFilter")]
		public ExecutionTimeFilter StartTimeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeFilter")]
		public WorkflowTypeFilter TypeFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagFilter")]
		public TagFilter TagFilter { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumPageSize")]
		public System.Nullable<System.Int32> MaximumPageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reverseOrder")]
		public System.Nullable<System.Boolean> ReverseOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionFilter")]
		public WorkflowExecutionFilter ExecutionFilter { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceOutput
	{
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ResourceTag[] Tags { get; set; }
	}
	
	/// <summary>
	/// <p>Tags are key-value pairs that can be associated with Amazon SWF state machines and activities.</p> <p>Tags may only contain unicode letters, digits, whitespace, or these symbols: <code>_ . : / = + - @</code>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceTag
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="key")]
		public string Key { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public string Value { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTagsForResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LimitExceededFault
	{
	}
	
	/// <summary>
	/// Contains a paginated list of information structures about workflow types.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowTypeInfos
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="typeInfos")]
		public WorkflowTypeInfo[] TypeInfos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListWorkflowTypesInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="registrationStatus")]
		public RegistrationStatus RegistrationStatus { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumPageSize")]
		public System.Nullable<System.Int32> MaximumPageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reverseOrder")]
		public System.Nullable<System.Boolean> ReverseOrder { get; set; }
	}
	
	/// <summary>
	/// Unit of work sent to an activity worker.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivityTask
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskToken")]
		public string TaskToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityId")]
		public string ActivityId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowExecution")]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityType")]
		public ActivityType ActivityType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PollForActivityTaskInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskList")]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public string Identity { get; set; }
	}
	
	/// <summary>
	/// A structure that represents a decision task. Decision tasks are sent to deciders in order for them to make decisions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DecisionTask
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskToken")]
		public string TaskToken { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startedEventId")]
		public int StartedEventId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowExecution")]
		public WorkflowExecution WorkflowExecution { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="events")]
		public HistoryEvent[] Events { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previousStartedEventId")]
		public System.Nullable<System.Int32> PreviousStartedEventId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PollForDecisionTaskInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskList")]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="identity")]
		public string Identity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="maximumPageSize")]
		public System.Nullable<System.Int32> MaximumPageSize { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reverseOrder")]
		public System.Nullable<System.Boolean> ReverseOrder { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startAtPreviousStartedEvent")]
		public System.Nullable<System.Boolean> StartAtPreviousStartedEvent { get; set; }
	}
	
	/// <summary>
	/// Status information about an activity task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivityTaskStatus
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="cancelRequested")]
		public bool CancelRequested { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecordActivityTaskHeartbeatInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskToken")]
		public string TaskToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegisterActivityTypeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskStartToCloseTimeout")]
		public string DefaultTaskStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskHeartbeatTimeout")]
		public string DefaultTaskHeartbeatTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskList")]
		public TaskList DefaultTaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskPriority")]
		public string DefaultTaskPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskScheduleToStartTimeout")]
		public string DefaultTaskScheduleToStartTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskScheduleToCloseTimeout")]
		public string DefaultTaskScheduleToCloseTimeout { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TypeAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegisterDomainInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowExecutionRetentionPeriodInDays")]
		public string WorkflowExecutionRetentionPeriodInDays { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ResourceTag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DomainAlreadyExistsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TooManyTagsFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegisterWorkflowTypeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskStartToCloseTimeout")]
		public string DefaultTaskStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultExecutionStartToCloseTimeout")]
		public string DefaultExecutionStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskList")]
		public TaskList DefaultTaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultTaskPriority")]
		public string DefaultTaskPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultChildPolicy")]
		public ChildPolicy DefaultChildPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="defaultLambdaRole")]
		public string DefaultLambdaRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestCancelWorkflowExecutionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RespondActivityTaskCanceledInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskToken")]
		public string TaskToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RespondActivityTaskCompletedInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskToken")]
		public string TaskToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RespondActivityTaskFailedInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskToken")]
		public string TaskToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
	}
	
	/// <summary>
	/// Input data for a TaskCompleted response to a decision task.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RespondDecisionTaskCompletedInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="taskToken")]
		public string TaskToken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="decisions")]
		public Decision[] Decisions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionContext")]
		public string ExecutionContext { get; set; }
	}
	
	/// <summary>
	/// <p>Specifies a decision made by the decider. A decision can be one of these types:</p> <ul> <li> <p> <code>CancelTimer</code> – Cancels a previously started timer and records a <code>TimerCanceled</code> event in the history.</p> </li> <li> <p> <code>CancelWorkflowExecution</code> – Closes the workflow execution and records a <code>WorkflowExecutionCanceled</code> event in the history.</p> </li> <li> <p> <code>CompleteWorkflowExecution</code> – Closes the workflow execution and records a <code>WorkflowExecutionCompleted</code> event in the history .</p> </li> <li> <p> <code>ContinueAsNewWorkflowExecution</code> – Closes the workflow execution and starts a new workflow execution of the same type using the same workflow ID and a unique run Id. A <code>WorkflowExecutionContinuedAsNew</code> event is recorded in the history.</p> </li> <li> <p> <code>FailWorkflowExecution</code> – Closes the workflow execution and records a <code>WorkflowExecutionFailed</code> event in the history.</p> </li> <li> <p> <code>RecordMarker</code> – Records a <code>MarkerRecorded</code> event in the history. Markers can be used for adding custom information in the history for instance to let deciders know that they don't need to look at the history beyond the marker event.</p> </li> <li> <p> <code>RequestCancelActivityTask</code> – Attempts to cancel a previously scheduled activity task. If the activity task was scheduled but has not been assigned to a worker, then it is canceled. If the activity task was already assigned to a worker, then the worker is informed that cancellation has been requested in the response to <a>RecordActivityTaskHeartbeat</a>.</p> </li> <li> <p> <code>RequestCancelExternalWorkflowExecution</code> – Requests that a request be made to cancel the specified external workflow execution and records a <code>RequestCancelExternalWorkflowExecutionInitiated</code> event in the history.</p> </li> <li> <p> <code>ScheduleActivityTask</code> – Schedules an activity task.</p> </li> <li> <p> <code>SignalExternalWorkflowExecution</code> – Requests a signal to be delivered to the specified external workflow execution and records a <code>SignalExternalWorkflowExecutionInitiated</code> event in the history.</p> </li> <li> <p> <code>StartChildWorkflowExecution</code> – Requests that a child workflow execution be started and records a <code>StartChildWorkflowExecutionInitiated</code> event in the history. The child workflow execution is a separate workflow execution with its own history.</p> </li> <li> <p> <code>StartTimer</code> – Starts a timer for this workflow execution and records a <code>TimerStarted</code> event in the history. This timer fires after the specified delay and record a <code>TimerFired</code> event.</p> </li> </ul> <p> <b>Access Control</b> </p> <p>If you grant permission to use <code>RespondDecisionTaskCompleted</code>, you can use IAM policies to express permissions for the list of decisions returned by this action as if they were members of the API. Treating decisions as a pseudo API maintains a uniform conceptual model and helps keep policies readable. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> <p> <b>Decision Failure</b> </p> <p>Decisions can fail for several reasons</p> <ul> <li> <p>The ordering of decisions should follow a logical flow. Some decisions might not make sense in the current context of the workflow execution and therefore fails.</p> </li> <li> <p>A limit on your account was reached.</p> </li> <li> <p>The decision lacks sufficient permissions.</p> </li> </ul> <p>One of the following events might be added to the history to indicate an error. The event attribute's <code>cause</code> parameter indicates the cause. If <code>cause</code> is set to <code>OPERATION_NOT_PERMITTED</code>, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p> <ul> <li> <p> <code>ScheduleActivityTaskFailed</code> – A <code>ScheduleActivityTask</code> decision failed. This could happen if the activity type specified in the decision isn't registered, is in a deprecated state, or the decision isn't properly configured.</p> </li> <li> <p> <code>RequestCancelActivityTaskFailed</code> – A <code>RequestCancelActivityTask</code> decision failed. This could happen if there is no open activity task with the specified activityId.</p> </li> <li> <p> <code>StartTimerFailed</code> – A <code>StartTimer</code> decision failed. This could happen if there is another open timer with the same timerId.</p> </li> <li> <p> <code>CancelTimerFailed</code> – A <code>CancelTimer</code> decision failed. This could happen if there is no open timer with the specified timerId.</p> </li> <li> <p> <code>StartChildWorkflowExecutionFailed</code> – A <code>StartChildWorkflowExecution</code> decision failed. This could happen if the workflow type specified isn't registered, is deprecated, or the decision isn't properly configured.</p> </li> <li> <p> <code>SignalExternalWorkflowExecutionFailed</code> – A <code>SignalExternalWorkflowExecution</code> decision failed. This could happen if the <code>workflowID</code> specified in the decision was incorrect.</p> </li> <li> <p> <code>RequestCancelExternalWorkflowExecutionFailed</code> – A <code>RequestCancelExternalWorkflowExecution</code> decision failed. This could happen if the <code>workflowID</code> specified in the decision was incorrect.</p> </li> <li> <p> <code>CancelWorkflowExecutionFailed</code> – A <code>CancelWorkflowExecution</code> decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.</p> </li> <li> <p> <code>CompleteWorkflowExecutionFailed</code> – A <code>CompleteWorkflowExecution</code> decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.</p> </li> <li> <p> <code>ContinueAsNewWorkflowExecutionFailed</code> – A <code>ContinueAsNewWorkflowExecution</code> decision failed. This could happen if there is an unhandled decision task pending in the workflow execution or the ContinueAsNewWorkflowExecution decision was not configured correctly.</p> </li> <li> <p> <code>FailWorkflowExecutionFailed</code> – A <code>FailWorkflowExecution</code> decision failed. This could happen if there is an unhandled decision task pending in the workflow execution.</p> </li> </ul> <p>The preceding error events might occur due to an error in the decider logic, which might put the workflow execution in an unstable state The cause field in the event structure for the error event indicates the cause of the error.</p> <note> <p>A workflow execution may be closed by the decider by returning one of the following decisions when completing a decision task: <code>CompleteWorkflowExecution</code>, <code>FailWorkflowExecution</code>, <code>CancelWorkflowExecution</code> and <code>ContinueAsNewWorkflowExecution</code>. An <code>UnhandledDecision</code> fault is returned if a workflow closing decision is specified and a signal or activity event had been added to the history while the decision task was being performed by the decider. Unlike the above situations which are logic issues, this fault is always possible because of race conditions in a distributed system. The right action here is to call <a>RespondDecisionTaskCompleted</a> without any decisions. This would result in another decision task with these new events included in the history. The decider should handle the new events and may decide to close the workflow execution.</p> </note> <p> <b>How to Code a Decision</b> </p> <p>You code a decision by first setting the decision type field to one of the above decision values, and then set the corresponding attributes field shown below:</p> <ul> <li> <p> <code> <a>ScheduleActivityTaskDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>RequestCancelActivityTaskDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>CompleteWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>FailWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>CancelWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>ContinueAsNewWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>RecordMarkerDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>StartTimerDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>CancelTimerDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>SignalExternalWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>RequestCancelExternalWorkflowExecutionDecisionAttributes</a> </code> </p> </li> <li> <p> <code> <a>StartChildWorkflowExecutionDecisionAttributes</a> </code> </p> </li> </ul>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Decision
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="decisionType")]
		public DecisionType DecisionType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduleActivityTaskDecisionAttributes")]
		public ScheduleActivityTaskDecisionAttributes ScheduleActivityTaskDecisionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestCancelActivityTaskDecisionAttributes")]
		public RequestCancelActivityTaskDecisionAttributes RequestCancelActivityTaskDecisionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="completeWorkflowExecutionDecisionAttributes")]
		public CompleteWorkflowExecutionDecisionAttributes CompleteWorkflowExecutionDecisionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="failWorkflowExecutionDecisionAttributes")]
		public FailWorkflowExecutionDecisionAttributes FailWorkflowExecutionDecisionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancelWorkflowExecutionDecisionAttributes")]
		public CancelWorkflowExecutionDecisionAttributes CancelWorkflowExecutionDecisionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="continueAsNewWorkflowExecutionDecisionAttributes")]
		public ContinueAsNewWorkflowExecutionDecisionAttributes ContinueAsNewWorkflowExecutionDecisionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recordMarkerDecisionAttributes")]
		public RecordMarkerDecisionAttributes RecordMarkerDecisionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startTimerDecisionAttributes")]
		public StartTimerDecisionAttributes StartTimerDecisionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancelTimerDecisionAttributes")]
		public CancelTimerDecisionAttributes CancelTimerDecisionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signalExternalWorkflowExecutionDecisionAttributes")]
		public SignalExternalWorkflowExecutionDecisionAttributes SignalExternalWorkflowExecutionDecisionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="requestCancelExternalWorkflowExecutionDecisionAttributes")]
		public RequestCancelExternalWorkflowExecutionDecisionAttributes RequestCancelExternalWorkflowExecutionDecisionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startChildWorkflowExecutionDecisionAttributes")]
		public StartChildWorkflowExecutionDecisionAttributes StartChildWorkflowExecutionDecisionAttributes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduleLambdaFunctionDecisionAttributes")]
		public ScheduleLambdaFunctionDecisionAttributes ScheduleLambdaFunctionDecisionAttributes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DecisionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduleActivityTask = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCancelActivityTask = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CompleteWorkflowExecution = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FailWorkflowExecution = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancelWorkflowExecution = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ContinueAsNewWorkflowExecution = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RecordMarker = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartTimer = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CancelTimer = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SignalExternalWorkflowExecution = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RequestCancelExternalWorkflowExecution = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		StartChildWorkflowExecution = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ScheduleLambdaFunction = 12,
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>ScheduleActivityTask</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>activityType.name</code> – String constraint. The key is <code>swf:activityType.name</code>.</p> </li> <li> <p> <code>activityType.version</code> – String constraint. The key is <code>swf:activityType.version</code>.</p> </li> <li> <p> <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScheduleActivityTaskDecisionAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityType")]
		public ActivityType ActivityType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityId")]
		public string ActivityId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public string Control { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduleToCloseTimeout")]
		public string ScheduleToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskList")]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskPriority")]
		public string TaskPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scheduleToStartTimeout")]
		public string ScheduleToStartTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startToCloseTimeout")]
		public string StartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="heartbeatTimeout")]
		public string HeartbeatTimeout { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>RequestCancelActivityTask</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestCancelActivityTaskDecisionAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityId")]
		public string ActivityId { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>CompleteWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CompleteWorkflowExecutionDecisionAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>FailWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FailWorkflowExecutionDecisionAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>CancelWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelWorkflowExecutionDecisionAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>ContinueAsNewWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tag</code> – A tag used to identify the workflow execution</p> </li> <li> <p> <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p> </li> <li> <p> <code>workflowType.version</code> – String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContinueAsNewWorkflowExecutionDecisionAttributes
	{
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionStartToCloseTimeout")]
		public string ExecutionStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskList")]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskPriority")]
		public string TaskPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskStartToCloseTimeout")]
		public string TaskStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childPolicy")]
		public ChildPolicy ChildPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagList")]
		public string[] TagList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="workflowTypeVersion")]
		public string WorkflowTypeVersion { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambdaRole")]
		public string LambdaRole { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>RecordMarker</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RecordMarkerDecisionAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="markerName")]
		public string MarkerName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>StartTimer</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartTimerDecisionAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timerId")]
		public string TimerId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public string Control { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="startToFireTimeout")]
		public string StartToFireTimeout { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>CancelTimer</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CancelTimerDecisionAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timerId")]
		public string TimerId { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>SignalExternalWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SignalExternalWorkflowExecutionDecisionAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signalName")]
		public string SignalName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public string Control { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>RequestCancelExternalWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RequestCancelExternalWorkflowExecutionDecisionAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public string Control { get; set; }
	}
	
	/// <summary>
	/// <p>Provides the details of the <code>StartChildWorkflowExecution</code> decision.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this decision's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagList.member.N</code> – The key is "swf:tagList.N" where N is the tag number from 0 to 4, inclusive.</p> </li> <li> <p> <code>taskList</code> – String constraint. The key is <code>swf:taskList.name</code>.</p> </li> <li> <p> <code>workflowType.name</code> – String constraint. The key is <code>swf:workflowType.name</code>.</p> </li> <li> <p> <code>workflowType.version</code> – String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartChildWorkflowExecutionDecisionAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public string Control { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionStartToCloseTimeout")]
		public string ExecutionStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskList")]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskPriority")]
		public string TaskPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskStartToCloseTimeout")]
		public string TaskStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childPolicy")]
		public ChildPolicy ChildPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagList")]
		public string[] TagList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambdaRole")]
		public string LambdaRole { get; set; }
	}
	
	/// <summary>
	/// Decision attributes specified in <code>scheduleLambdaFunctionDecisionAttributes</code> within the list of decisions <code>decisions</code> passed to <a>RespondDecisionTaskCompleted</a>.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScheduleLambdaFunctionDecisionAttributes
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="control")]
		public string Control { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="startToCloseTimeout")]
		public string StartToCloseTimeout { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SignalWorkflowExecutionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="signalName")]
		public string SignalName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
	}
	
	/// <summary>
	/// Specifies the <code>runId</code> of a workflow execution.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Run
	{
		
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartWorkflowExecutionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskList")]
		public TaskList TaskList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskPriority")]
		public string TaskPriority { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="input")]
		public string Input { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="executionStartToCloseTimeout")]
		public string ExecutionStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagList")]
		public string[] TagList { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taskStartToCloseTimeout")]
		public string TaskStartToCloseTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childPolicy")]
		public ChildPolicy ChildPolicy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lambdaRole")]
		public string LambdaRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class WorkflowExecutionAlreadyStartedFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DefaultUndefinedFault
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TagResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public ResourceTag[] Tags { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TerminateWorkflowExecutionInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowId")]
		public string WorkflowId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="runId")]
		public string RunId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="childPolicy")]
		public ChildPolicy ChildPolicy { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UndeprecateActivityTypeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="activityType")]
		public ActivityType ActivityType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UndeprecateDomainInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UndeprecateWorkflowTypeInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="domain")]
		public string Domain { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="workflowType")]
		public WorkflowType WorkflowType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UntagResourceInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="tagKeys")]
		public string[] TagKeys { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CancelWorkflowExecutionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHANDLED_DECISION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DecisionTaskTimeoutType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_TO_CLOSE = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FailWorkflowExecutionFailedCause
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNHANDLED_DECISION = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OPERATION_NOT_PERMITTED = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LambdaFunctionTimeoutType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		START_TO_CLOSE = 0,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Returns the number of closed workflow executions within the given domain that meet the specified filtering criteria.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagFilter.tag</code>: String constraint. The key is <code>swf:tagFilter.tag</code>.</p> </li> <li> <p> <code>typeFilter.name</code>: String constraint. The key is <code>swf:typeFilter.name</code>.</p> </li> <li> <p> <code>typeFilter.version</code>: String constraint. The key is <code>swf:typeFilter.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// CountClosedWorkflowExecutions #X-Amz-Target=SimpleWorkflowService.CountClosedWorkflowExecutions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<WorkflowExecutionCount> CountClosedWorkflowExecutionsAsync(CountClosedWorkflowExecutionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.CountClosedWorkflowExecutions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WorkflowExecutionCount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the number of open workflow executions within the given domain that meet the specified filtering criteria.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagFilter.tag</code>: String constraint. The key is <code>swf:tagFilter.tag</code>.</p> </li> <li> <p> <code>typeFilter.name</code>: String constraint. The key is <code>swf:typeFilter.name</code>.</p> </li> <li> <p> <code>typeFilter.version</code>: String constraint. The key is <code>swf:typeFilter.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// CountOpenWorkflowExecutions #X-Amz-Target=SimpleWorkflowService.CountOpenWorkflowExecutions
		/// </summary>
		/// <returns>Success</returns>
		public async Task<WorkflowExecutionCount> CountOpenWorkflowExecutionsAsync(CountOpenWorkflowExecutionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.CountOpenWorkflowExecutions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WorkflowExecutionCount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the estimated number of activity tasks in the specified task list. The count returned is an approximation and isn't guaranteed to be exact. If you specify a task list that no activity task was ever scheduled in then <code>0</code> is returned.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the <code>taskList.name</code> parameter by using a <code>Condition</code> element with the <code>swf:taskList.name</code> key to allow the action to access only certain task lists.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// CountPendingActivityTasks #X-Amz-Target=SimpleWorkflowService.CountPendingActivityTasks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PendingTaskCount> CountPendingActivityTasksAsync(CountPendingActivityTasksInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.CountPendingActivityTasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PendingTaskCount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the estimated number of decision tasks in the specified task list. The count returned is an approximation and isn't guaranteed to be exact. If you specify a task list that no decision task was ever scheduled in then <code>0</code> is returned.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the <code>taskList.name</code> parameter by using a <code>Condition</code> element with the <code>swf:taskList.name</code> key to allow the action to access only certain task lists.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// CountPendingDecisionTasks #X-Amz-Target=SimpleWorkflowService.CountPendingDecisionTasks
		/// </summary>
		/// <returns>Success</returns>
		public async Task<PendingTaskCount> CountPendingDecisionTasksAsync(CountPendingDecisionTasksInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.CountPendingDecisionTasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PendingTaskCount>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deprecates the specified <i>activity type</i>. After an activity type has been deprecated, you cannot create new tasks of that activity type. Tasks of this type that were scheduled before the type was deprecated continue to run.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>activityType.name</code>: String constraint. The key is <code>swf:activityType.name</code>.</p> </li> <li> <p> <code>activityType.version</code>: String constraint. The key is <code>swf:activityType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// DeprecateActivityType #X-Amz-Target=SimpleWorkflowService.DeprecateActivityType
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeprecateActivityTypeAsync(DeprecateActivityTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.DeprecateActivityType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deprecates the specified domain. After a domain has been deprecated it cannot be used to create new workflow executions or register new types. However, you can still use visibility actions on this domain. Deprecating a domain also deprecates all activity and workflow types registered in the domain. Executions that were started before the domain was deprecated continues to run.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// DeprecateDomain #X-Amz-Target=SimpleWorkflowService.DeprecateDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeprecateDomainAsync(DeprecateDomainInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.DeprecateDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Deprecates the specified <i>workflow type</i>. After a workflow type has been deprecated, you cannot create new executions of that type. Executions that were started before the type was deprecated continues to run. A deprecated workflow type may still be used when calling visibility actions.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>workflowType.name</code>: String constraint. The key is <code>swf:workflowType.name</code>.</p> </li> <li> <p> <code>workflowType.version</code>: String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// DeprecateWorkflowType #X-Amz-Target=SimpleWorkflowService.DeprecateWorkflowType
		/// </summary>
		/// <returns>Success</returns>
		public async Task DeprecateWorkflowTypeAsync(DeprecateWorkflowTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.DeprecateWorkflowType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the specified activity type. This includes configuration settings provided when the type was registered and other general information about the type.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>activityType.name</code>: String constraint. The key is <code>swf:activityType.name</code>.</p> </li> <li> <p> <code>activityType.version</code>: String constraint. The key is <code>swf:activityType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// DescribeActivityType #X-Amz-Target=SimpleWorkflowService.DescribeActivityType
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ActivityTypeDetail> DescribeActivityTypeAsync(DescribeActivityTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.DescribeActivityType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActivityTypeDetail>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the specified domain, including description and status.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// DescribeDomain #X-Amz-Target=SimpleWorkflowService.DescribeDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task<DomainDetail> DescribeDomainAsync(DescribeDomainInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.DescribeDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DomainDetail>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the specified workflow execution including its type and some statistics.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// DescribeWorkflowExecution #X-Amz-Target=SimpleWorkflowService.DescribeWorkflowExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<WorkflowExecutionDetail> DescribeWorkflowExecutionAsync(DescribeWorkflowExecutionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.DescribeWorkflowExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WorkflowExecutionDetail>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about the specified <i>workflow type</i>. This includes configuration settings specified when the type was registered and other information such as creation date, current status, etc.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>workflowType.name</code>: String constraint. The key is <code>swf:workflowType.name</code>.</p> </li> <li> <p> <code>workflowType.version</code>: String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// DescribeWorkflowType #X-Amz-Target=SimpleWorkflowService.DescribeWorkflowType
		/// </summary>
		/// <returns>Success</returns>
		public async Task<WorkflowTypeDetail> DescribeWorkflowTypeAsync(DescribeWorkflowTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.DescribeWorkflowType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WorkflowTypeDetail>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the history of the specified workflow execution. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the <code>nextPageToken</code> returned by the initial call.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// GetWorkflowExecutionHistory #X-Amz-Target=SimpleWorkflowService.GetWorkflowExecutionHistory
		/// </summary>
		/// <param name="maximumPageSize">Pagination limit</param>
		/// <param name="nextPageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<History> GetWorkflowExecutionHistoryAsync(string maximumPageSize, string nextPageToken, GetWorkflowExecutionHistoryInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.GetWorkflowExecutionHistory?maximumPageSize=" + (maximumPageSize==null? "" : System.Uri.EscapeDataString(maximumPageSize))+"&nextPageToken=" + (nextPageToken==null? "" : System.Uri.EscapeDataString(nextPageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<History>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about all activities registered in the specified domain that match the specified name and registration status. The result includes information like creation date, current status of the activity, etc. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the <code>nextPageToken</code> returned by the initial call.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// ListActivityTypes #X-Amz-Target=SimpleWorkflowService.ListActivityTypes
		/// </summary>
		/// <param name="maximumPageSize">Pagination limit</param>
		/// <param name="nextPageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ActivityTypeInfos> ListActivityTypesAsync(string maximumPageSize, string nextPageToken, ListActivityTypesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.ListActivityTypes?maximumPageSize=" + (maximumPageSize==null? "" : System.Uri.EscapeDataString(maximumPageSize))+"&nextPageToken=" + (nextPageToken==null? "" : System.Uri.EscapeDataString(nextPageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActivityTypeInfos>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of closed workflow executions in the specified domain that meet the filtering criteria. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the nextPageToken returned by the initial call.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagFilter.tag</code>: String constraint. The key is <code>swf:tagFilter.tag</code>.</p> </li> <li> <p> <code>typeFilter.name</code>: String constraint. The key is <code>swf:typeFilter.name</code>.</p> </li> <li> <p> <code>typeFilter.version</code>: String constraint. The key is <code>swf:typeFilter.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// ListClosedWorkflowExecutions #X-Amz-Target=SimpleWorkflowService.ListClosedWorkflowExecutions
		/// </summary>
		/// <param name="maximumPageSize">Pagination limit</param>
		/// <param name="nextPageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<WorkflowExecutionInfos> ListClosedWorkflowExecutionsAsync(string maximumPageSize, string nextPageToken, ListClosedWorkflowExecutionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.ListClosedWorkflowExecutions?maximumPageSize=" + (maximumPageSize==null? "" : System.Uri.EscapeDataString(maximumPageSize))+"&nextPageToken=" + (nextPageToken==null? "" : System.Uri.EscapeDataString(nextPageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WorkflowExecutionInfos>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns the list of domains registered in the account. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the nextPageToken returned by the initial call.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains. The element must be set to <code>arn:aws:swf::AccountID:domain/*</code>, where <i>AccountID</i> is the account ID, with no dashes.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// ListDomains #X-Amz-Target=SimpleWorkflowService.ListDomains
		/// </summary>
		/// <param name="maximumPageSize">Pagination limit</param>
		/// <param name="nextPageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DomainInfos> ListDomainsAsync(string maximumPageSize, string nextPageToken, ListDomainsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.ListDomains?maximumPageSize=" + (maximumPageSize==null? "" : System.Uri.EscapeDataString(maximumPageSize))+"&nextPageToken=" + (nextPageToken==null? "" : System.Uri.EscapeDataString(nextPageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DomainInfos>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns a list of open workflow executions in the specified domain that meet the filtering criteria. The results may be split into multiple pages. To retrieve subsequent pages, make the call again using the nextPageToken returned by the initial call.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagFilter.tag</code>: String constraint. The key is <code>swf:tagFilter.tag</code>.</p> </li> <li> <p> <code>typeFilter.name</code>: String constraint. The key is <code>swf:typeFilter.name</code>.</p> </li> <li> <p> <code>typeFilter.version</code>: String constraint. The key is <code>swf:typeFilter.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// ListOpenWorkflowExecutions #X-Amz-Target=SimpleWorkflowService.ListOpenWorkflowExecutions
		/// </summary>
		/// <param name="maximumPageSize">Pagination limit</param>
		/// <param name="nextPageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<WorkflowExecutionInfos> ListOpenWorkflowExecutionsAsync(string maximumPageSize, string nextPageToken, ListOpenWorkflowExecutionsInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.ListOpenWorkflowExecutions?maximumPageSize=" + (maximumPageSize==null? "" : System.Uri.EscapeDataString(maximumPageSize))+"&nextPageToken=" + (nextPageToken==null? "" : System.Uri.EscapeDataString(nextPageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WorkflowExecutionInfos>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List tags for a given domain.
		/// ListTagsForResource #X-Amz-Target=SimpleWorkflowService.ListTagsForResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ListTagsForResourceOutput> ListTagsForResourceAsync(ListTagsForResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.ListTagsForResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTagsForResourceOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Returns information about workflow types in the specified domain. The results may be split into multiple pages that can be retrieved by making the call repeatedly.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// ListWorkflowTypes #X-Amz-Target=SimpleWorkflowService.ListWorkflowTypes
		/// </summary>
		/// <param name="maximumPageSize">Pagination limit</param>
		/// <param name="nextPageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<WorkflowTypeInfos> ListWorkflowTypesAsync(string maximumPageSize, string nextPageToken, ListWorkflowTypesInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.ListWorkflowTypes?maximumPageSize=" + (maximumPageSize==null? "" : System.Uri.EscapeDataString(maximumPageSize))+"&nextPageToken=" + (nextPageToken==null? "" : System.Uri.EscapeDataString(nextPageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<WorkflowTypeInfos>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Used by workers to get an <a>ActivityTask</a> from the specified activity <code>taskList</code>. This initiates a long poll, where the service holds the HTTP connection open and responds as soon as a task becomes available. The maximum time the service holds on to the request before responding is 60 seconds. If no task is available within 60 seconds, the poll returns an empty result. An empty result, in this context, means that an ActivityTask is returned, but that the value of taskToken is an empty string. If a task is returned, the worker should use its type to identify and process it correctly.</p> <important> <p>Workers should set their client side socket timeout to at least 70 seconds (10 seconds higher than the maximum time service may hold the poll request).</p> </important> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the <code>taskList.name</code> parameter by using a <code>Condition</code> element with the <code>swf:taskList.name</code> key to allow the action to access only certain task lists.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// PollForActivityTask #X-Amz-Target=SimpleWorkflowService.PollForActivityTask
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ActivityTask> PollForActivityTaskAsync(PollForActivityTaskInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.PollForActivityTask";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActivityTask>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Used by deciders to get a <a>DecisionTask</a> from the specified decision <code>taskList</code>. A decision task may be returned for any open workflow execution that is using the specified task list. The task includes a paginated view of the history of the workflow execution. The decider should use the workflow type and the history to determine how to properly handle the task.</p> <p>This action initiates a long poll, where the service holds the HTTP connection open and responds as soon a task becomes available. If no decision task is available in the specified task list before the timeout of 60 seconds expires, an empty result is returned. An empty result, in this context, means that a DecisionTask is returned, but that the value of taskToken is an empty string.</p> <important> <p>Deciders should set their client side socket timeout to at least 70 seconds (10 seconds higher than the timeout).</p> </important> <important> <p>Because the number of workflow history events for a single workflow execution might be very large, the result returned might be split up across a number of pages. To retrieve subsequent pages, make additional calls to <code>PollForDecisionTask</code> using the <code>nextPageToken</code> returned by the initial call. Note that you do <i>not</i> call <code>GetWorkflowExecutionHistory</code> with this <code>nextPageToken</code>. Instead, call <code>PollForDecisionTask</code> again.</p> </important> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the <code>taskList.name</code> parameter by using a <code>Condition</code> element with the <code>swf:taskList.name</code> key to allow the action to access only certain task lists.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// PollForDecisionTask #X-Amz-Target=SimpleWorkflowService.PollForDecisionTask
		/// </summary>
		/// <param name="maximumPageSize">Pagination limit</param>
		/// <param name="nextPageToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<DecisionTask> PollForDecisionTaskAsync(string maximumPageSize, string nextPageToken, PollForDecisionTaskInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.PollForDecisionTask?maximumPageSize=" + (maximumPageSize==null? "" : System.Uri.EscapeDataString(maximumPageSize))+"&nextPageToken=" + (nextPageToken==null? "" : System.Uri.EscapeDataString(nextPageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<DecisionTask>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Used by activity workers to report to the service that the <a>ActivityTask</a> represented by the specified <code>taskToken</code> is still making progress. The worker can also specify details of the progress, for example percent complete, using the <code>details</code> parameter. This action can also be used by the worker as a mechanism to check if cancellation is being requested for the activity task. If a cancellation is being attempted for the specified task, then the boolean <code>cancelRequested</code> flag returned by the service is set to <code>true</code>.</p> <p>This action resets the <code>taskHeartbeatTimeout</code> clock. The <code>taskHeartbeatTimeout</code> is specified in <a>RegisterActivityType</a>.</p> <p>This action doesn't in itself create an event in the workflow execution history. However, if the task times out, the workflow execution history contains a <code>ActivityTaskTimedOut</code> event that contains the information from the last heartbeat generated by the activity worker.</p> <note> <p>The <code>taskStartToCloseTimeout</code> of an activity type is the maximum duration of an activity task, regardless of the number of <a>RecordActivityTaskHeartbeat</a> requests received. The <code>taskStartToCloseTimeout</code> is also specified in <a>RegisterActivityType</a>.</p> </note> <note> <p>This operation is only useful for long-lived activities to report liveliness of the task and to determine if a cancellation is being attempted.</p> </note> <important> <p>If the <code>cancelRequested</code> flag returns <code>true</code>, a cancellation is being attempted. If the worker can cancel the activity, it should respond with <a>RespondActivityTaskCanceled</a>. Otherwise, it should ignore the cancellation request.</p> </important> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RecordActivityTaskHeartbeat #X-Amz-Target=SimpleWorkflowService.RecordActivityTaskHeartbeat
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ActivityTaskStatus> RecordActivityTaskHeartbeatAsync(RecordActivityTaskHeartbeatInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.RecordActivityTaskHeartbeat";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ActivityTaskStatus>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Registers a new <i>activity type</i> along with its configuration settings in the specified domain.</p> <important> <p>A <code>TypeAlreadyExists</code> fault is returned if the type already exists in the domain. You cannot change any configuration settings of the type after its registration, and it must be registered as a new version.</p> </important> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>defaultTaskList.name</code>: String constraint. The key is <code>swf:defaultTaskList.name</code>.</p> </li> <li> <p> <code>name</code>: String constraint. The key is <code>swf:name</code>.</p> </li> <li> <p> <code>version</code>: String constraint. The key is <code>swf:version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RegisterActivityType #X-Amz-Target=SimpleWorkflowService.RegisterActivityType
		/// </summary>
		/// <returns>Success</returns>
		public async Task RegisterActivityTypeAsync(RegisterActivityTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.RegisterActivityType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Registers a new domain.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>You cannot use an IAM policy to control domain access for this action. The name of the domain being registered is available as the resource of this action.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RegisterDomain #X-Amz-Target=SimpleWorkflowService.RegisterDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task RegisterDomainAsync(RegisterDomainInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.RegisterDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Registers a new <i>workflow type</i> and its configuration settings in the specified domain.</p> <p>The retention period for the workflow history is set by the <a>RegisterDomain</a> action.</p> <important> <p>If the type already exists, then a <code>TypeAlreadyExists</code> fault is returned. You cannot change the configuration settings of a workflow type once it is registered and it must be registered as a new version.</p> </important> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>defaultTaskList.name</code>: String constraint. The key is <code>swf:defaultTaskList.name</code>.</p> </li> <li> <p> <code>name</code>: String constraint. The key is <code>swf:name</code>.</p> </li> <li> <p> <code>version</code>: String constraint. The key is <code>swf:version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RegisterWorkflowType #X-Amz-Target=SimpleWorkflowService.RegisterWorkflowType
		/// </summary>
		/// <returns>Success</returns>
		public async Task RegisterWorkflowTypeAsync(RegisterWorkflowTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.RegisterWorkflowType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Records a <code>WorkflowExecutionCancelRequested</code> event in the currently running workflow execution identified by the given domain, workflowId, and runId. This logically requests the cancellation of the workflow execution as a whole. It is up to the decider to take appropriate actions when it receives an execution history with this event.</p> <note> <p>If the runId isn't specified, the <code>WorkflowExecutionCancelRequested</code> event is recorded in the history of the current open workflow execution with the specified workflowId in the domain.</p> </note> <note> <p>Because this action allows the workflow to properly clean up and gracefully close, it should be used instead of <a>TerminateWorkflowExecution</a> when possible.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RequestCancelWorkflowExecution #X-Amz-Target=SimpleWorkflowService.RequestCancelWorkflowExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task RequestCancelWorkflowExecutionAsync(RequestCancelWorkflowExecutionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.RequestCancelWorkflowExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Used by workers to tell the service that the <a>ActivityTask</a> identified by the <code>taskToken</code> was successfully canceled. Additional <code>details</code> can be provided using the <code>details</code> argument.</p> <p>These <code>details</code> (if provided) appear in the <code>ActivityTaskCanceled</code> event added to the workflow history.</p> <important> <p>Only use this operation if the <code>canceled</code> flag of a <a>RecordActivityTaskHeartbeat</a> request returns <code>true</code> and if the activity can be safely undone or abandoned.</p> </important> <p>A task is considered open from the time that it is scheduled until it is closed. Therefore a task is reported as open while a worker is processing it. A task is closed after it has been specified in a call to <a>RespondActivityTaskCompleted</a>, RespondActivityTaskCanceled, <a>RespondActivityTaskFailed</a>, or the task has <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-basic.html#swf-dev-timeout-types">timed out</a>.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RespondActivityTaskCanceled #X-Amz-Target=SimpleWorkflowService.RespondActivityTaskCanceled
		/// </summary>
		/// <returns>Success</returns>
		public async Task RespondActivityTaskCanceledAsync(RespondActivityTaskCanceledInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.RespondActivityTaskCanceled";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Used by workers to tell the service that the <a>ActivityTask</a> identified by the <code>taskToken</code> completed successfully with a <code>result</code> (if provided). The <code>result</code> appears in the <code>ActivityTaskCompleted</code> event in the workflow history.</p> <important> <p>If the requested task doesn't complete successfully, use <a>RespondActivityTaskFailed</a> instead. If the worker finds that the task is canceled through the <code>canceled</code> flag returned by <a>RecordActivityTaskHeartbeat</a>, it should cancel the task, clean up and then call <a>RespondActivityTaskCanceled</a>.</p> </important> <p>A task is considered open from the time that it is scheduled until it is closed. Therefore a task is reported as open while a worker is processing it. A task is closed after it has been specified in a call to RespondActivityTaskCompleted, <a>RespondActivityTaskCanceled</a>, <a>RespondActivityTaskFailed</a>, or the task has <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-basic.html#swf-dev-timeout-types">timed out</a>.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RespondActivityTaskCompleted #X-Amz-Target=SimpleWorkflowService.RespondActivityTaskCompleted
		/// </summary>
		/// <returns>Success</returns>
		public async Task RespondActivityTaskCompletedAsync(RespondActivityTaskCompletedInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.RespondActivityTaskCompleted";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Used by workers to tell the service that the <a>ActivityTask</a> identified by the <code>taskToken</code> has failed with <code>reason</code> (if specified). The <code>reason</code> and <code>details</code> appear in the <code>ActivityTaskFailed</code> event added to the workflow history.</p> <p>A task is considered open from the time that it is scheduled until it is closed. Therefore a task is reported as open while a worker is processing it. A task is closed after it has been specified in a call to <a>RespondActivityTaskCompleted</a>, <a>RespondActivityTaskCanceled</a>, RespondActivityTaskFailed, or the task has <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dg-basic.html#swf-dev-timeout-types">timed out</a>.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RespondActivityTaskFailed #X-Amz-Target=SimpleWorkflowService.RespondActivityTaskFailed
		/// </summary>
		/// <returns>Success</returns>
		public async Task RespondActivityTaskFailedAsync(RespondActivityTaskFailedInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.RespondActivityTaskFailed";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Used by deciders to tell the service that the <a>DecisionTask</a> identified by the <code>taskToken</code> has successfully completed. The <code>decisions</code> argument specifies the list of decisions made while processing the task.</p> <p>A <code>DecisionTaskCompleted</code> event is added to the workflow history. The <code>executionContext</code> specified is attached to the event in the workflow execution history.</p> <p> <b>Access Control</b> </p> <p>If an IAM policy grants permission to use <code>RespondDecisionTaskCompleted</code>, it can express permissions for the list of decisions in the <code>decisions</code> parameter. Each of the decisions has one or more parameters, much like a regular API call. To allow for policies to be as readable as possible, you can express permissions on decisions as if they were actual API calls, including applying conditions to some parameters. For more information, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// RespondDecisionTaskCompleted #X-Amz-Target=SimpleWorkflowService.RespondDecisionTaskCompleted
		/// </summary>
		/// <returns>Success</returns>
		public async Task RespondDecisionTaskCompletedAsync(RespondDecisionTaskCompletedInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.RespondDecisionTaskCompleted";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Records a <code>WorkflowExecutionSignaled</code> event in the workflow execution history and creates a decision task for the workflow execution identified by the given domain, workflowId and runId. The event is recorded with the specified user defined signalName and input (if provided).</p> <note> <p>If a runId isn't specified, then the <code>WorkflowExecutionSignaled</code> event is recorded in the history of the current open workflow with the matching workflowId in the domain.</p> </note> <note> <p>If the specified workflow execution isn't open, this method fails with <code>UnknownResource</code>.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// SignalWorkflowExecution #X-Amz-Target=SimpleWorkflowService.SignalWorkflowExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task SignalWorkflowExecutionAsync(SignalWorkflowExecutionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.SignalWorkflowExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Starts an execution of the workflow type in the specified domain using the provided <code>workflowId</code> and input data.</p> <p>This action returns the newly started workflow execution.</p> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>tagList.member.0</code>: The key is <code>swf:tagList.member.0</code>.</p> </li> <li> <p> <code>tagList.member.1</code>: The key is <code>swf:tagList.member.1</code>.</p> </li> <li> <p> <code>tagList.member.2</code>: The key is <code>swf:tagList.member.2</code>.</p> </li> <li> <p> <code>tagList.member.3</code>: The key is <code>swf:tagList.member.3</code>.</p> </li> <li> <p> <code>tagList.member.4</code>: The key is <code>swf:tagList.member.4</code>.</p> </li> <li> <p> <code>taskList</code>: String constraint. The key is <code>swf:taskList.name</code>.</p> </li> <li> <p> <code>workflowType.name</code>: String constraint. The key is <code>swf:workflowType.name</code>.</p> </li> <li> <p> <code>workflowType.version</code>: String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// StartWorkflowExecution #X-Amz-Target=SimpleWorkflowService.StartWorkflowExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task<Run> StartWorkflowExecutionAsync(StartWorkflowExecutionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.StartWorkflowExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Run>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Add a tag to a Amazon SWF domain.</p> <note> <p>Amazon SWF supports a maximum of 50 tags per resource.</p> </note>
		/// TagResource #X-Amz-Target=SimpleWorkflowService.TagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task TagResourceAsync(TagResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.TagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Records a <code>WorkflowExecutionTerminated</code> event and forces closure of the workflow execution identified by the given domain, runId, and workflowId. The child policy, registered with the workflow type or specified when starting this execution, is applied to any open child workflow executions of this workflow execution.</p> <important> <p>If the identified workflow execution was in progress, it is terminated immediately.</p> </important> <note> <p>If a runId isn't specified, then the <code>WorkflowExecutionTerminated</code> event is recorded in the history of the current open workflow with the matching workflowId in the domain.</p> </note> <note> <p>You should consider using <a>RequestCancelWorkflowExecution</a> action instead because it allows the workflow to gracefully close while <a>TerminateWorkflowExecution</a> doesn't.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// TerminateWorkflowExecution #X-Amz-Target=SimpleWorkflowService.TerminateWorkflowExecution
		/// </summary>
		/// <returns>Success</returns>
		public async Task TerminateWorkflowExecutionAsync(TerminateWorkflowExecutionInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.TerminateWorkflowExecution";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Undeprecates a previously deprecated <i>activity type</i>. After an activity type has been undeprecated, you can create new tasks of that activity type.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>activityType.name</code>: String constraint. The key is <code>swf:activityType.name</code>.</p> </li> <li> <p> <code>activityType.version</code>: String constraint. The key is <code>swf:activityType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// UndeprecateActivityType #X-Amz-Target=SimpleWorkflowService.UndeprecateActivityType
		/// </summary>
		/// <returns>Success</returns>
		public async Task UndeprecateActivityTypeAsync(UndeprecateActivityTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.UndeprecateActivityType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Undeprecates a previously deprecated domain. After a domain has been undeprecated it can be used to create new workflow executions or register new types.</p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>You cannot use an IAM policy to constrain this action's parameters.</p> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// UndeprecateDomain #X-Amz-Target=SimpleWorkflowService.UndeprecateDomain
		/// </summary>
		/// <returns>Success</returns>
		public async Task UndeprecateDomainAsync(UndeprecateDomainInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.UndeprecateDomain";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// <p>Undeprecates a previously deprecated <i>workflow type</i>. After a workflow type has been undeprecated, you can create new executions of that type. </p> <note> <p>This operation is eventually consistent. The results are best effort and may not exactly reflect recent updates and changes.</p> </note> <p> <b>Access Control</b> </p> <p>You can use IAM policies to control this action's access to Amazon SWF resources as follows:</p> <ul> <li> <p>Use a <code>Resource</code> element with the domain name to limit the action to only specified domains.</p> </li> <li> <p>Use an <code>Action</code> element to allow or deny permission to call this action.</p> </li> <li> <p>Constrain the following parameters by using a <code>Condition</code> element with the appropriate keys.</p> <ul> <li> <p> <code>workflowType.name</code>: String constraint. The key is <code>swf:workflowType.name</code>.</p> </li> <li> <p> <code>workflowType.version</code>: String constraint. The key is <code>swf:workflowType.version</code>.</p> </li> </ul> </li> </ul> <p>If the caller doesn't have sufficient permissions to invoke the action, or the parameter values fall outside the specified constraints, the action fails. The associated event attribute's <code>cause</code> parameter is set to <code>OPERATION_NOT_PERMITTED</code>. For details and example IAM policies, see <a href="https://docs.aws.amazon.com/amazonswf/latest/developerguide/swf-dev-iam.html">Using IAM to Manage Access to Amazon SWF Workflows</a> in the <i>Amazon SWF Developer Guide</i>.</p>
		/// UndeprecateWorkflowType #X-Amz-Target=SimpleWorkflowService.UndeprecateWorkflowType
		/// </summary>
		/// <returns>Success</returns>
		public async Task UndeprecateWorkflowTypeAsync(UndeprecateWorkflowTypeInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.UndeprecateWorkflowType";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Remove a tag from a Amazon SWF domain.
		/// UntagResource #X-Amz-Target=SimpleWorkflowService.UntagResource
		/// </summary>
		/// <returns>Success</returns>
		public async Task UntagResourceAsync(UntagResourceInput requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "#X-Amz-Target=SimpleWorkflowService.UntagResource";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum CountClosedWorkflowExecutionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.CountClosedWorkflowExecutions")]
		SimpleWorkflowService_CountClosedWorkflowExecutions = 0,
	}
	
	public enum CountOpenWorkflowExecutionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.CountOpenWorkflowExecutions")]
		SimpleWorkflowService_CountOpenWorkflowExecutions = 0,
	}
	
	public enum CountPendingActivityTasksX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.CountPendingActivityTasks")]
		SimpleWorkflowService_CountPendingActivityTasks = 0,
	}
	
	public enum CountPendingDecisionTasksX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.CountPendingDecisionTasks")]
		SimpleWorkflowService_CountPendingDecisionTasks = 0,
	}
	
	public enum DeprecateActivityTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.DeprecateActivityType")]
		SimpleWorkflowService_DeprecateActivityType = 0,
	}
	
	public enum DeprecateDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.DeprecateDomain")]
		SimpleWorkflowService_DeprecateDomain = 0,
	}
	
	public enum DeprecateWorkflowTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.DeprecateWorkflowType")]
		SimpleWorkflowService_DeprecateWorkflowType = 0,
	}
	
	public enum DescribeActivityTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.DescribeActivityType")]
		SimpleWorkflowService_DescribeActivityType = 0,
	}
	
	public enum DescribeDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.DescribeDomain")]
		SimpleWorkflowService_DescribeDomain = 0,
	}
	
	public enum DescribeWorkflowExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.DescribeWorkflowExecution")]
		SimpleWorkflowService_DescribeWorkflowExecution = 0,
	}
	
	public enum DescribeWorkflowTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.DescribeWorkflowType")]
		SimpleWorkflowService_DescribeWorkflowType = 0,
	}
	
	public enum GetWorkflowExecutionHistoryX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.GetWorkflowExecutionHistory")]
		SimpleWorkflowService_GetWorkflowExecutionHistory = 0,
	}
	
	public enum ListActivityTypesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.ListActivityTypes")]
		SimpleWorkflowService_ListActivityTypes = 0,
	}
	
	public enum ListClosedWorkflowExecutionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.ListClosedWorkflowExecutions")]
		SimpleWorkflowService_ListClosedWorkflowExecutions = 0,
	}
	
	public enum ListDomainsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.ListDomains")]
		SimpleWorkflowService_ListDomains = 0,
	}
	
	public enum ListOpenWorkflowExecutionsX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.ListOpenWorkflowExecutions")]
		SimpleWorkflowService_ListOpenWorkflowExecutions = 0,
	}
	
	public enum ListTagsForResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.ListTagsForResource")]
		SimpleWorkflowService_ListTagsForResource = 0,
	}
	
	public enum ListWorkflowTypesX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.ListWorkflowTypes")]
		SimpleWorkflowService_ListWorkflowTypes = 0,
	}
	
	public enum PollForActivityTaskX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.PollForActivityTask")]
		SimpleWorkflowService_PollForActivityTask = 0,
	}
	
	public enum PollForDecisionTaskX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.PollForDecisionTask")]
		SimpleWorkflowService_PollForDecisionTask = 0,
	}
	
	public enum RecordActivityTaskHeartbeatX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.RecordActivityTaskHeartbeat")]
		SimpleWorkflowService_RecordActivityTaskHeartbeat = 0,
	}
	
	public enum RegisterActivityTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.RegisterActivityType")]
		SimpleWorkflowService_RegisterActivityType = 0,
	}
	
	public enum RegisterDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.RegisterDomain")]
		SimpleWorkflowService_RegisterDomain = 0,
	}
	
	public enum RegisterWorkflowTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.RegisterWorkflowType")]
		SimpleWorkflowService_RegisterWorkflowType = 0,
	}
	
	public enum RequestCancelWorkflowExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.RequestCancelWorkflowExecution")]
		SimpleWorkflowService_RequestCancelWorkflowExecution = 0,
	}
	
	public enum RespondActivityTaskCanceledX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.RespondActivityTaskCanceled")]
		SimpleWorkflowService_RespondActivityTaskCanceled = 0,
	}
	
	public enum RespondActivityTaskCompletedX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.RespondActivityTaskCompleted")]
		SimpleWorkflowService_RespondActivityTaskCompleted = 0,
	}
	
	public enum RespondActivityTaskFailedX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.RespondActivityTaskFailed")]
		SimpleWorkflowService_RespondActivityTaskFailed = 0,
	}
	
	public enum RespondDecisionTaskCompletedX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.RespondDecisionTaskCompleted")]
		SimpleWorkflowService_RespondDecisionTaskCompleted = 0,
	}
	
	public enum SignalWorkflowExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.SignalWorkflowExecution")]
		SimpleWorkflowService_SignalWorkflowExecution = 0,
	}
	
	public enum StartWorkflowExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.StartWorkflowExecution")]
		SimpleWorkflowService_StartWorkflowExecution = 0,
	}
	
	public enum TagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.TagResource")]
		SimpleWorkflowService_TagResource = 0,
	}
	
	public enum TerminateWorkflowExecutionX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.TerminateWorkflowExecution")]
		SimpleWorkflowService_TerminateWorkflowExecution = 0,
	}
	
	public enum UndeprecateActivityTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.UndeprecateActivityType")]
		SimpleWorkflowService_UndeprecateActivityType = 0,
	}
	
	public enum UndeprecateDomainX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.UndeprecateDomain")]
		SimpleWorkflowService_UndeprecateDomain = 0,
	}
	
	public enum UndeprecateWorkflowTypeX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.UndeprecateWorkflowType")]
		SimpleWorkflowService_UndeprecateWorkflowType = 0,
	}
	
	public enum UntagResourceX_Amz_Target
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SimpleWorkflowService.UntagResource")]
		SimpleWorkflowService_UntagResource = 0,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
