//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AlertSearchMethodResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitEntryWithReferencesTransitSearch Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<AlertSearchMethodResponseStatus> Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A válasz adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitEntryWithReferencesTransitSearch
	{
		
		/// <summary>
		/// Az adat típusa. Egy entitás esetén "entryWithReferences".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		public string Class { get; set; }
		
		/// <summary>
		/// A lekért adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entry")]
		public TransitSearch Entry { get; set; }
		
		/// <summary>
		/// Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitExceeded")]
		public System.Nullable<System.Boolean> LimitExceeded { get; set; }
		
		/// <summary>
		/// A válaszhoz tartozó referenciák.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public TransitReferences References { get; set; }
	}
	
	/// <summary>
	/// A lekért adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitSearch
	{
		
		/// <summary>
		/// Az illeszkedő zavarok azonosítói.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertIds")]
		public string[] AlertIds { get; set; }
		
		/// <summary>
		/// A keresett kifejezés.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="query")]
		public string Query { get; set; }
		
		/// <summary>
		/// Az illeszkedő járatok azonosítói.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeIds")]
		public string[] RouteIds { get; set; }
		
		/// <summary>
		/// Az illeszkedő megállók azonosítói.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopIds")]
		public string[] StopIds { get; set; }
	}
	
	/// <summary>
	/// A válaszhoz tartozó referenciák.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitReferences
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AlertSearchMethodResponseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_MODIFIED")]
		NOT_MODIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OK")]
		OK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_ERROR")]
		UNKNOWN_ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_FOUND")]
		NOT_FOUND = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_VALUE")]
		INVALID_VALUE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_OPERATING")]
		NOT_OPERATING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OUTSIDE_BOUNDS")]
		OUTSIDE_BOUNDS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PATH_NOT_FOUND")]
		PATH_NOT_FOUND = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_TRANSIT_TIMES")]
		NO_TRANSIT_TIMES = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REQUEST_TIMEOUT")]
		REQUEST_TIMEOUT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOGUS_PARAMETER")]
		BOGUS_PARAMETER = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOO_CLOSE")]
		TOO_CLOSE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCATION_NOT_ACCESSIBLE")]
		LOCATION_NOT_ACCESSIBLE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MISSING_MODE")]
		MISSING_MODE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR_NO_GRAPH")]
		ERROR_NO_GRAPH = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLANNER_SERVICE_UNAVAILABLE")]
		PLANNER_SERVICE_UNAVAILABLE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR_VEHICLE_LOCATION_SERVICE")]
		ERROR_VEHICLE_LOCATION_SERVICE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR_BIKE_RENTAL_SERVICE")]
		ERROR_BIKE_RENTAL_SERVICE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR_TICKETING_SERVICE")]
		ERROR_TICKETING_SERVICE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR_TRANSIT_INDEX_SERVICE")]
		ERROR_TRANSIT_INDEX_SERVICE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOVED_TEMPORARILY")]
		MOVED_TEMPORARILY = 20,
	}
	
	/// <summary>
	/// A tervezés metaadatai. Tartalmazza a következő és az előző tervezési időablakot a lapozás megvalósításához ezred másodpercben.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ApiTripSearchMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="nextDateTime")]
		public System.Nullable<System.Int64> NextDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prevDateTime")]
		public System.Nullable<System.Int64> PrevDateTime { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="searchWindowUsed")]
		public System.Nullable<System.Int32> SearchWindowUsed { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ApiVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="4")]
		_4 = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArrivalsAndDeparturesForLocationOTPMethodResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitListEntryWithReferencesTransitDepartureGroup Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A válasz adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitListEntryWithReferencesTransitDepartureGroup
	{
		
		/// <summary>
		/// Az adat típusa. Lista esetén "listWithReferences".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		public string Class { get; set; }
		
		/// <summary>
		/// Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitExceeded")]
		public System.Nullable<System.Boolean> LimitExceeded { get; set; }
		
		/// <summary>
		/// A lekért adatok listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list")]
		public TransitDepartureGroup[] List { get; set; }
		
		/// <summary>
		/// Az értéke mindig `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outOfRange")]
		public System.Nullable<System.Boolean> OutOfRange { get; set; }
		
		/// <summary>
		/// A válaszhoz tartozó referenciák.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public TransitReferences References { get; set; }
	}
	
	/// <summary>
	/// A lekért adatok listája.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitDepartureGroup
	{
		
		/// <summary>
		/// A csoporthoz tartozó célállomás.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headsign")]
		public string Headsign { get; set; }
		
		/// <summary>
		/// A csoporthoz tartozó járat azonosító.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeId")]
		public string RouteId { get; set; }
		
		/// <summary>
		/// A csoport menetrendi bejegyzései.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopTimes")]
		public TransitScheduleStopTime[] StopTimes { get; set; }
	}
	
	/// <summary>
	/// Az irányhoz tartozó menetrendi bejegyzések.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitScheduleStopTime
	{
		
		/// <summary>
		/// A megállóhoz tartozó aktív zavarok azonosítóinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertIds")]
		public string[] AlertIds { get; set; }
		
		/// <summary>
		/// A megállóba érkezés tervezett ideje epoch másodbercben. Az első megállónál hiányzik.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrivalTime")]
		public System.Nullable<System.Int64> ArrivalTime { get; set; }
		
		/// <summary>
		/// A megállóból való indulás tervezett ideje epoch másodbercben. Az utolsó megállónál hiányzik.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departureTime")]
		public System.Nullable<System.Int64> DepartureTime { get; set; }
		
		/// <summary>
		/// A megálló csoportjának azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupIds")]
		public string[] GroupIds { get; set; }
		
		/// <summary>
		/// Igaz, ha a menet legalább egy rákövetkező megállója foglalást igényel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mayRequireBooking")]
		public System.Nullable<System.Boolean> MayRequireBooking { get; set; }
		
		/// <summary>
		/// A megállóba érkezés becsült ideje epoch másodbercben, ha a járathoz van valós idejű adat. Az első megállónál hiányzik.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictedArrivalTime")]
		public System.Nullable<System.Int64> PredictedArrivalTime { get; set; }
		
		/// <summary>
		/// A megállóból való becsült indulás ideje epoch másodbercben, ha a járathoz van valós idejű adat. Az utolsó megállónál hiányzik.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictedDepartureTime")]
		public System.Nullable<System.Int64> PredictedDepartureTime { get; set; }
		
		/// <summary>
		/// A bejegyzéshez tartozó menet menetrendi napja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceDate")]
		public string ServiceDate { get; set; }
		
		/// <summary>
		/// A megállóban kijelzett célállomás.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopHeadsign")]
		public string StopHeadsign { get; set; }
		
		/// <summary>
		/// A megálló azonosítója
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopId")]
		public string StopId { get; set; }
		
		/// <summary>
		/// A bejegyzést tartalmazó menet azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tripId")]
		public string TripId { get; set; }
		
		/// <summary>
		/// Igaz, ha a menethez tartozó valós idejű adatok bizonytalanok.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uncertain")]
		public System.Nullable<System.Boolean> Uncertain { get; set; }
		
		/// <summary>
		/// A bejegyzéshez tartozó menet alacsonypadlóssága.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wheelchairAccessible")]
		public System.Nullable<System.Boolean> WheelchairAccessible { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArrivalsAndDeparturesForStopOTPMethodResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitEntryWithReferencesTransitArrivalsAndDepartures Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A válasz adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitEntryWithReferencesTransitArrivalsAndDepartures
	{
		
		/// <summary>
		/// Az adat típusa. Egy entitás esetén "entryWithReferences".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		public string Class { get; set; }
		
		/// <summary>
		/// A lekért adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entry")]
		public TransitArrivalsAndDepartures Entry { get; set; }
		
		/// <summary>
		/// Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitExceeded")]
		public System.Nullable<System.Boolean> LimitExceeded { get; set; }
		
		/// <summary>
		/// A válaszhoz tartozó referenciák.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public TransitReferences References { get; set; }
	}
	
	/// <summary>
	/// A lekért adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitArrivalsAndDepartures
	{
		
		/// <summary>
		/// A megállóhoz tartozó aktív zavarok.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertIds")]
		public string[] AlertIds { get; set; }
		
		/// <summary>
		/// A közeli megállók azonosítói.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nearbyStopIds")]
		public string[] NearbyStopIds { get; set; }
		
		/// <summary>
		/// A megállóhoz tartozó járatok azonosítói.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeIds")]
		public string[] RouteIds { get; set; }
		
		/// <summary>
		/// A megálló azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopId")]
		public string StopId { get; set; }
		
		/// <summary>
		/// A megállóhoz tartozó menetrendi bejegyzések.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopTimes")]
		public TransitScheduleStopTime[] StopTimes { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BicycleRentalMethodResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitListEntryWithReferencesTransitBikeRentalStation Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A válasz adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitListEntryWithReferencesTransitBikeRentalStation
	{
		
		/// <summary>
		/// Az adat típusa. Lista esetén "listWithReferences".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		public string Class { get; set; }
		
		/// <summary>
		/// Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitExceeded")]
		public System.Nullable<System.Boolean> LimitExceeded { get; set; }
		
		/// <summary>
		/// A lekért adatok listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list")]
		public TransitBikeRentalStation[] List { get; set; }
		
		/// <summary>
		/// Az értéke mindig `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outOfRange")]
		public System.Nullable<System.Boolean> OutOfRange { get; set; }
		
		/// <summary>
		/// A válaszhoz tartozó referenciák.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public TransitReferences References { get; set; }
	}
	
	/// <summary>
	/// A lekért adatok listája.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitBikeRentalStation
	{
		
		/// <summary>
		/// Az állomáson elérhető kerékpárok száma.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bikes")]
		public System.Nullable<System.Int32> Bikes { get; set; }
		
		/// <summary>
		/// Az állomás kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// Az állomás azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Az állomás szélességi koordinátája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		/// <summary>
		/// Az állomás hosszúsági koordinátája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		/// <summary>
		/// Az állomás neve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Az állomás összes helyének száma. Ez mindig fix 999.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spaces")]
		public System.Nullable<System.Int32> Spaces { get; set; }
		
		/// <summary>
		/// Az állomás típusa.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Kerékpáros útszakaszok kategórizálásai.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum BikeStreetCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CYCLEWAY")]
		CYCLEWAY = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CYCLELANE")]
		CYCLELANE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOW_TRAFFIC")]
		LOW_TRAFFIC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OTHER")]
		OTHER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PEDESTRIAN")]
		PEDESTRIAN = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Dialect
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="otp")]
		otp = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="mobile")]
		mobile = 1,
	}
	
	/// <summary>
	/// Az útiterv kivonatos megjelenítéséhez használható  lábak és adatok.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DisplayedLeg
	{
		
		/// <summary>
		/// Jelzi, ha a láb az első az útitervben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="first")]
		public System.Nullable<System.Boolean> First { get; set; }
		
		/// <summary>
		/// Jelzi, ha a láb az utolsó az útitervben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="last")]
		public System.Nullable<System.Boolean> Last { get; set; }
		
		/// <summary>
		/// Az indulási hely neve, kivéve az utolsón, ahol a érkezési helyé.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Az utolsó lábon az érkezési idő, az összes többin az indulási.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int64> Time { get; set; }
		
		/// <summary>
		/// Jelzi, hogy a láb nem tranzit típusú.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="walkTo")]
		public System.Nullable<System.Boolean> WalkTo { get; set; }
	}
	
	/// <summary>
	/// A zavar hatásának típusa.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EffectType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_SERVICE")]
		NO_SERVICE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WARNING")]
		WARNING = 1,
	}
	
	/// <summary>
	/// A lábhoz tartozó magassági adatok.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ElevationPoint
	{
		
		/// <summary>
		/// A magassági pont távolsága a láb kezdetéhez képest méterben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public System.Nullable<System.Double> Distance { get; set; }
		
		/// <summary>
		/// A pont magassága.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elevation")]
		public System.Nullable<System.Double> Elevation { get; set; }
	}
	
	/// <summary>
	/// A láb geometriája.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EncodedPolylineBean
	{
		
		/// <summary>
		/// A geometria (polyline) pontjainak száma.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// A geometria (polyline) pontjai kódolva.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="points")]
		public string Points { get; set; }
	}
	
	/// <summary>
	/// A talált útvonalak listája.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Itinerary
	{
		
		/// <summary>
		/// Az útiterv során hány méter kerékpározást tartalmaztak az egyes kategóriák. Az objektum kulcsai a kategóriák (`BikeStreetCategory`).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bikeCategoryDistances")]
		public System.Collections.Generic.Dictionary<string, double> BikeCategoryDistances { get; set; }
		
		/// <summary>
		/// Kerékpározási távolság az útvonalon méterben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bikeDistance")]
		public System.Nullable<System.Double> BikeDistance { get; set; }
		
		/// <summary>
		/// Kerékpározási idő az útvonalon másodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bikeTime")]
		public System.Nullable<System.Int64> BikeTime { get; set; }
		
		/// <summary>
		/// Jelzi, ha az útvonalhoz kell termékajánlást mutatni.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayProductRecommendation")]
		public System.Nullable<System.Boolean> DisplayProductRecommendation { get; set; }
		
		/// <summary>
		/// Az útiterv kivonatos megjelenítéséhez használható  lábak és adatok.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayedLegs")]
		public DisplayedLeg[] DisplayedLegs { get; set; }
		
		/// <summary>
		/// Az útvonal hossza másodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int64> Duration { get; set; }
		
		/// <summary>
		/// Az útiterv során hány métert emelkedik az útvonal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elevationGained")]
		public System.Nullable<System.Double> ElevationGained { get; set; }
		
		/// <summary>
		/// Az útiterv során hány métert süllyed az útvonal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="elevationLost")]
		public System.Nullable<System.Double> ElevationLost { get; set; }
		
		/// <summary>
		/// Az érkezési időpont ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Az utazástervező algoritmus által használt súly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generalizedCost")]
		public System.Nullable<System.Int32> GeneralizedCost { get; set; }
		
		/// <summary>
		/// Az útiterv lábai (részei).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legs")]
		public Leg[] Legs { get; set; }
		
		/// <summary>
		/// Jelzi, hogy a visszaadott útvonalak tartalmazhatnak olyan járatokat (pl.: vonatok), amire a terv során érintett jegyértékesítési helyen nem lehet jegyet váltani.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notAllTicketsAvailable")]
		public System.Nullable<System.Boolean> NotAllTicketsAvailable { get; set; }
		
		/// <summary>
		/// Útitervminták engedélyezése esetén a minták időtartam-adatai.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patternDuration")]
		public PatternStatistics PatternDuration { get; set; }
		
		/// <summary>
		/// Útitervminták engedélyezése esetén a minták időtartam-adatai.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patternFrequency")]
		public PatternStatistics PatternFrequency { get; set; }
		
		/// <summary>
		/// Útitervminták engedélyezése esetén a mintába tartozó útitervek.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="patternItineraries")]
		public Itinerary[] PatternItineraries { get; set; }
		
		/// <summary>
		/// Az indulási időpont ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Jelzi, ha az útvonal meredekebb, mint a paraméterekben kért.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tooSloped")]
		public System.Nullable<System.Boolean> TooSloped { get; set; }
		
		/// <summary>
		/// Átszállások száma az útitervben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transfers")]
		public System.Nullable<System.Int32> Transfers { get; set; }
		
		/// <summary>
		/// Járművön töltött idő az útvonalon másodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transitTime")]
		public System.Nullable<System.Int64> TransitTime { get; set; }
		
		/// <summary>
		/// A várakozási idővel igazított súly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitTimeAdjustedGeneralizedCost")]
		public System.Nullable<System.Int32> WaitTimeAdjustedGeneralizedCost { get; set; }
		
		/// <summary>
		/// Várakozási idő járműre az útvonalon másodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="waitingTime")]
		public System.Nullable<System.Int64> WaitingTime { get; set; }
		
		/// <summary>
		/// Sétálási távolság az útvonalon méterben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="walkDistance")]
		public System.Nullable<System.Double> WalkDistance { get; set; }
		
		/// <summary>
		/// Jelzi, hogy a sétálási limit túl lett lépve az útitervben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="walkLimitExceeded")]
		public System.Nullable<System.Boolean> WalkLimitExceeded { get; set; }
		
		/// <summary>
		/// Sétálási idő az útvonalon másodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="walkTime")]
		public System.Nullable<System.Int64> WalkTime { get; set; }
	}
	
	/// <summary>
	/// Az útiterv lábai (részei).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Leg
	{
		
		/// <summary>
		/// Tranzit láb esetén a járatot biztosító szolgáltató azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyId")]
		public string AgencyId { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a járatot biztosító szolgáltató neve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyName")]
		public string AgencyName { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a járatot biztosító szolgáltató időzónájának eltolódása.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyTimeZoneOffset")]
		public System.Nullable<System.Int32> AgencyTimeZoneOffset { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a járatot biztosító szolgáltató linkje.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyUrl")]
		public string AgencyUrl { get; set; }
		
		/// <summary>
		/// A lábhoz tartozó aktív zavarok azonosítói.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertIds")]
		public string[] AlertIds { get; set; }
		
		/// <summary>
		/// Igényvezérelt menet esetén a leszállási szabály.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alightRule")]
		public string AlightRule { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a láb vége és a tényleges leszállás közötti késleltetés.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrivalDelay")]
		public System.Nullable<System.Int32> ArrivalDelay { get; set; }
		
		/// <summary>
		/// Igényvezérelt menet esetén a felszállási szabály.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boardRule")]
		public string BoardRule { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a láb indulása és a tényleges felszállás közötti késleltetés.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departureDelay")]
		public System.Nullable<System.Int32> DepartureDelay { get; set; }
		
		/// <summary>
		/// A láb bejárása alatt megtett táv méterben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public System.Nullable<System.Double> Distance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public System.Nullable<System.Int64> Duration { get; set; }
		
		/// <summary>
		/// A láb vége ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public System.Nullable<System.DateTimeOffset> EndTime { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a köztes megállók a láb kezdete és végződése között.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public Place From { get; set; }
		
		/// <summary>
		/// Az utazástervező algoritmus által használt súly.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generalizedCost")]
		public System.Nullable<System.Int32> GeneralizedCost { get; set; }
		
		/// <summary>
		/// Útiterv minták esetén jelzi, hogy a mintában a megfelelő lábak valamelyikén szerepel aktív riasztás. Nincs kitöltve, ha az útiterv minták ki vannak kapcsolva.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hasAlertInPattern")]
		public System.Nullable<System.Boolean> HasAlertInPattern { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a menet célállomása.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headsign")]
		public string Headsign { get; set; }
		
		/// <summary>
		/// Jelzi, hogy az utas maradjon a járművön a végállomásnál, mert másik menetként folytatódik (hurokjárat).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="interlineWithPreviousLeg")]
		public System.Nullable<System.Boolean> InterlineWithPreviousLeg { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a köztes megállók a láb kezdete és végződése között.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="intermediateStops")]
		public Place[] IntermediateStops { get; set; }
		
		/// <summary>
		/// A lábhoz tartozó magassági adatok.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legElevation")]
		public ElevationPoint[] LegElevation { get; set; }
		
		/// <summary>
		/// A láb geometriája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legGeometry")]
		public EncodedPolylineBean LegGeometry { get; set; }
		
		/// <summary>
		/// A lábon használt közlekedési mód.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		/// <summary>
		/// Igaz, ha járatról történt a tervezés.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onBoardAccess")]
		public System.Nullable<System.Boolean> OnBoardAccess { get; set; }
		
		/// <summary>
		/// Jelzi, hogy a láb egy pathway (pl. metró lejáró).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pathway")]
		public System.Nullable<System.Boolean> Pathway { get; set; }
		
		/// <summary>
		/// Jelzi, hogy a láb adatai valós idejű forrásból származnak.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="realTime")]
		public System.Nullable<System.Boolean> RealTime { get; set; }
		
		/// <summary>
		/// Jelzi, hogy a lábat bérelt kerékpárral kell bejárni.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rentedBike")]
		public System.Nullable<System.Boolean> RentedBike { get; set; }
		
		/// <summary>
		/// Igaz, ha szükséges foglalás.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresBooking")]
		public System.Nullable<System.Boolean> RequiresBooking { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a járat hátterének színe a megjelenítéséhez.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeColor")]
		public string RouteColor { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a járat azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeId")]
		public string RouteId { get; set; }
		
		/// <summary>
		/// Útiterv minták esetén, a lábnak a mintában megfelelő, más lábakon használt járatok azonosítóinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeIds")]
		public string[] RouteIds { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a járat hosszú neve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeLongName")]
		public string RouteLongName { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a járat rövid neve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeShortName")]
		public string RouteShortName { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a járat szövegének színe a megjelenítéséhez.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeTextColor")]
		public string RouteTextColor { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a menet menetrendi napja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceDate")]
		public string ServiceDate { get; set; }
		
		/// <summary>
		/// A láb kezdete ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public System.Nullable<System.DateTimeOffset> StartTime { get; set; }
		
		/// <summary>
		/// Az útvonal lépései gyalogos, kerékpáros vagy autós láb lesetén.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="steps")]
		public WalkStep[] Steps { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public LegTimeZone TimeZone { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a köztes megállók a láb kezdete és végződése között.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public Place To { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transitLeg")]
		public System.Nullable<System.Boolean> TransitLeg { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a menethez tartozó GTFS block_id, amennyiben létezik.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tripBlockId")]
		public string TripBlockId { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a menet azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tripId")]
		public string TripId { get; set; }
		
		/// <summary>
		/// Útiterv minták esetén, a lábnak a mintában megfelelő, más lábakon használt menetek azonosítóinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tripIds")]
		public string[] TripIds { get; set; }
		
		/// <summary>
		/// A menet utazástervező azonosítója, amelyet a `fromPlace` megadásához lehet használni.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vertex")]
		public string Vertex { get; set; }
		
		/// <summary>
		/// A várakozási idő mennyiségi típusa a tranzit típusú lábon.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wait")]
		public System.Nullable<LegWait> Wait { get; set; }
	}
	
	/// <summary>
	/// Tranzit láb esetén a köztes megállók a láb kezdete és végződése között.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Place
	{
		
		/// <summary>
		/// A helyre érkezés időpontja ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrival")]
		public System.Nullable<System.DateTimeOffset> Arrival { get; set; }
		
		/// <summary>
		/// A helyről való indulás időpontja ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departure")]
		public System.Nullable<System.DateTimeOffset> Departure { get; set; }
		
		/// <summary>
		/// A hely szélességi koordinátája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		/// <summary>
		/// A hely hosszúsági koordinátája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		/// <summary>
		/// Megálló esetén a megálló neve, POI-nál a POI neve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Az indulási és az érkezési hely címkéje. Az első és az utolsó útvonal lábon van kitöltve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="orig")]
		public string Orig { get; set; }
		
		/// <summary>
		/// A megálló peron-kódja, ha a hely egy megálló.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformCode")]
		public string PlatformCode { get; set; }
		
		/// <summary>
		/// A megálló kódja, ha a hely egy megálló.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopCode")]
		public string StopCode { get; set; }
		
		/// <summary>
		/// A megálló azonosítója, ha a hely egy megálló.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopId")]
		public string StopId { get; set; }
		
		/// <summary>
		/// A megálló indexe, ha a hely egy megálló.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopIndex")]
		public System.Nullable<System.Int32> StopIndex { get; set; }
		
		/// <summary>
		/// A megálló sorszáma a meneten, ha a hely egy megálló.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopSequence")]
		public System.Nullable<System.Int32> StopSequence { get; set; }
		
		/// <summary>
		/// A jegyértékesítési pontok listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ticketingLocation")]
		public TicketingLocation TicketingLocation { get; set; }
	}
	
	/// <summary>
	/// A jegyértékesítési pontok listája.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TicketingLocation
	{
		
		/// <summary>
		/// A jegyértékesítési hely címe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Jelzi, hogy a jegyértékesítési helyen elfogadnak készpénzt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cashAccepted")]
		public System.Nullable<System.Boolean> CashAccepted { get; set; }
		
		/// <summary>
		/// Jelzi, hogy a jegyértékesítési helyen elfogadnak bankkártyát.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creditCardsAccepted")]
		public System.Nullable<System.Boolean> CreditCardsAccepted { get; set; }
		
		/// <summary>
		/// A jegyértékesítési hely leírása.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A jegyértékesítési hely azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A jegyértékesítési hely utolsó frissítésének időpontja ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// A jegyértékesítési hely szélességi koordinátája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		/// <summary>
		/// A jegyértékesítési hely hosszúsági koordinátája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		/// <summary>
		/// A jegyértékesítési hely nyitvatartása.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="openingPeriods")]
		public TicketingPeriod[] OpeningPeriods { get; set; }
		
		/// <summary>
		/// A jegyértékesítési hely üzemeltetője.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operator")]
		public string Operator { get; set; }
		
		/// <summary>
		/// Lehet-e a helyszínen igazolványt csináltatni.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="passIdCreation")]
		public System.Nullable<System.Boolean> PassIdCreation { get; set; }
		
		/// <summary>
		/// A jegyértékesítési hely helye.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="place")]
		public string Place { get; set; }
		
		/// <summary>
		/// Az árusított termékek azonosítói.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products")]
		public string[] Products { get; set; }
		
		/// <summary>
		/// A jegyértékesítési hely állapota.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<TicketingLocationState> State { get; set; }
		
		/// <summary>
		/// Be lehet-e váltani a helyszínen jegyet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ticketPassExchange")]
		public System.Nullable<System.Boolean> TicketPassExchange { get; set; }
		
		/// <summary>
		/// A jegyértékesítési hely típusa.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TicketingLocationType> Type { get; set; }
		
		/// <summary>
		/// Ha `false`, akkor hibás az adat, így a felületen elrejtésre kerül.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	/// <summary>
	/// A jegyértékesítési hely nyitvatartása.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TicketingPeriod
	{
		
		/// <summary>
		/// Zárási idő HH:mm formátumban.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closes")]
		public string Closes { get; set; }
		
		/// <summary>
		/// Zárási idő másodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="closesSeconds")]
		public System.Nullable<System.Int32> ClosesSeconds { get; set; }
		
		/// <summary>
		/// A nyitvatartási idő napja. Lehet HOL (ünnepnap) és 0247 (éjjel-nappali).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfWeek")]
		public System.Nullable<TicketingPeriodDayOfWeek> DayOfWeek { get; set; }
		
		/// <summary>
		/// Nyitási idő HH:mm formátumban.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opens")]
		public string Opens { get; set; }
		
		/// <summary>
		/// Nyitási idő másodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="opensSeconds")]
		public System.Nullable<System.Int32> OpensSeconds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TicketingPeriodDayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MON")]
		MON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TUE")]
		TUE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WED")]
		WED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="THU")]
		THU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FRI")]
		FRI = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SAT")]
		SAT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUN")]
		SUN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HOL")]
		HOL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="O247")]
		O247 = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TicketingLocationState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLANNED")]
		PLANNED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OPERATIONAL")]
		OPERATIONAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INOPERATIVE")]
		INOPERATIVE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TicketingLocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOMER_CENTER")]
		CUSTOMER_CENTER = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CASHIER")]
		CASHIER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="VENDING_MACHINE")]
		VENDING_MACHINE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RESELLER")]
		RESELLER = 3,
	}
	
	/// <summary>
	/// Az útvonal lépései gyalogos, kerékpáros vagy autós láb lesetén.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class WalkStep
	{
		
		/// <summary>
		/// A lépés abszolút iránya.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="absoluteDirection")]
		public System.Nullable<WalkStepAbsoluteDirection> AbsoluteDirection { get; set; }
		
		/// <summary>
		/// Jelzi, hogy a lépés egy nyílt terület, pl.: pláza, vagy vonat peron.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="area")]
		public System.Nullable<System.Boolean> Area { get; set; }
		
		/// <summary>
		/// Kerékpáros útszakaszok kategórizálásai.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bicycleCategory")]
		public BikeStreetCategory BicycleCategory { get; set; }
		
		/// <summary>
		/// A szakasz egyirányúsága.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bicycleStreetDirection")]
		public System.Nullable<WalkStepBicycleStreetDirection> BicycleStreetDirection { get; set; }
		
		/// <summary>
		/// Jelzi, hogy az utca nevét a rendszer generálta.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bogusName")]
		public System.Nullable<System.Boolean> BogusName { get; set; }
		
		/// <summary>
		/// A lépés hossza méterben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="distance")]
		public System.Nullable<System.Double> Distance { get; set; }
		
		/// <summary>
		/// A láb geometriája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geometry")]
		public EncodedPolylineBean Geometry { get; set; }
		
		/// <summary>
		/// A lépés kezdetének szélességi koordinátája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		/// <summary>
		/// A lépés kezdetének hosszúsági koordinátája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		/// <summary>
		/// A lépés iránya.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="relativeDirection")]
		public System.Nullable<WalkStepRelativeDirection> RelativeDirection { get; set; }
		
		/// <summary>
		/// Jelzi, hogy az utca irányt vált egy kereszteződésben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stayOn")]
		public System.Nullable<System.Boolean> StayOn { get; set; }
		
		/// <summary>
		/// Az utca neve, amin a lépés halad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="streetName")]
		public string StreetName { get; set; }
		
		/// <summary>
		/// Jelzi, hogy a szakszon sétálni kell kerékpáros tervezés esetén.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="walkingBike")]
		public System.Nullable<System.Boolean> WalkingBike { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WalkStepAbsoluteDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NORTH")]
		NORTH = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NORTHEAST")]
		NORTHEAST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="EAST")]
		EAST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOUTHEAST")]
		SOUTHEAST = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOUTH")]
		SOUTH = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SOUTHWEST")]
		SOUTHWEST = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WEST")]
		WEST = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NORTHWEST")]
		NORTHWEST = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WalkStepBicycleStreetDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BIDIRECTIONAL")]
		BIDIRECTIONAL = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ONEWAY_WITH_TRAFFIC")]
		ONEWAY_WITH_TRAFFIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ONEWAY_AGAINST_TRAFFIC")]
		ONEWAY_AGAINST_TRAFFIC = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WalkStepRelativeDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEPART")]
		DEPART = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HARD_LEFT")]
		HARD_LEFT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LEFT")]
		LEFT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SLIGHTLY_LEFT")]
		SLIGHTLY_LEFT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTINUE")]
		CONTINUE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SLIGHTLY_RIGHT")]
		SLIGHTLY_RIGHT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RIGHT")]
		RIGHT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HARD_RIGHT")]
		HARD_RIGHT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CIRCLE_CLOCKWISE")]
		CIRCLE_CLOCKWISE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CIRCLE_COUNTERCLOCKWISE")]
		CIRCLE_COUNTERCLOCKWISE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ELEVATOR")]
		ELEVATOR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UTURN_LEFT")]
		UTURN_LEFT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UTURN_RIGHT")]
		UTURN_RIGHT = 12,
	}
	
	public class LegTimeZone
	{
		
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dstsavings")]
		public System.Nullable<System.Int32> Dstsavings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rawOffset")]
		public System.Nullable<System.Int32> RawOffset { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum LegWait
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SHORT")]
		SHORT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LONG")]
		LONG = 1,
	}
	
	/// <summary>
	/// Útitervminták engedélyezése esetén a minták időtartam-adatai.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PatternStatistics
	{
		
		/// <summary>
		/// Átlag érték. Akkor van kitöltve, ha az adatok megegyeznek.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avg")]
		public System.Nullable<System.Int64> Avg { get; set; }
		
		/// <summary>
		/// Maximum érték. Akkor van kitöltve, ha az adatok különbözőek.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="max")]
		public System.Nullable<System.Int64> Max { get; set; }
		
		/// <summary>
		/// Minimum érték. Akkor van kitöltve, ha az adatok különbözőek.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="min")]
		public System.Nullable<System.Int64> Min { get; set; }
		
		/// <summary>
		/// A klienseken megjelenített szöveg.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MetadataResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitEntryWithReferencesTransitMetadata Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A válasz adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitEntryWithReferencesTransitMetadata
	{
		
		/// <summary>
		/// Az adat típusa. Egy entitás esetén "entryWithReferences".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		public string Class { get; set; }
		
		/// <summary>
		/// A lekért adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entry")]
		public TransitMetadata Entry { get; set; }
		
		/// <summary>
		/// Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitExceeded")]
		public System.Nullable<System.Boolean> LimitExceeded { get; set; }
		
		/// <summary>
		/// A válaszhoz tartozó referenciák.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public TransitReferences References { get; set; }
	}
	
	/// <summary>
	/// A lekért adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitMetadata
	{
		
		/// <summary>
		/// Az egész alkalmazásra vonatkozó aktív zavarok azonosítói.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertIds")]
		public string[] AlertIds { get; set; }
		
		/// <summary>
		/// A betöltött adatokat határoló sokszög vonala (polyline).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="boundingPolyLine")]
		public string BoundingPolyLine { get; set; }
		
		/// <summary>
		/// Azon időszak vége, amelyre az összes szolgáltató biztosít adatot. Több szolgáltató esetén korábbi lehet, mint a `validityEnd`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeValidityEnd")]
		public string CompleteValidityEnd { get; set; }
		
		/// <summary>
		/// Azon időszak kezdete, amelyre az összes szolgáltató biztosít adatot. Több szolgáltató esetén későbbi lehet, mint a `validityStart`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="completeValidityStart")]
		public string CompleteValidityStart { get; set; }
		
		/// <summary>
		/// A menetrendi napok, és a hozzá tartozó napok típusát tartalmazó összerendelés egy hétre (az aktuális nap, és a következő 6).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayTypes")]
		public System.Collections.Generic.Dictionary<string, string> DayTypes { get; set; }
		
		/// <summary>
		/// Az aktív adatforrások azonosítói.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feedIds")]
		public string[] FeedIds { get; set; }
		
		/// <summary>
		/// A betöltött adatok területének befoglaló téglalapjának két sarokpontja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lowerLeftLatitude")]
		public System.Nullable<System.Double> LowerLeftLatitude { get; set; }
		
		/// <summary>
		/// A betöltött adatok területének befoglaló téglalapjának két sarokpontja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lowerLeftLongitude")]
		public System.Nullable<System.Double> LowerLeftLongitude { get; set; }
		
		/// <summary>
		/// A szerver ideje ISO8601 formátumban.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readableTime")]
		public string ReadableTime { get; set; }
		
		/// <summary>
		/// Aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="time")]
		public System.Nullable<System.Int64> Time { get; set; }
		
		/// <summary>
		/// A szerver tranzit adatainak időzónája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
		
		/// <summary>
		/// A betöltött adatok területének befoglaló téglalapjának két sarokpontja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upperRightLatitude")]
		public System.Nullable<System.Double> UpperRightLatitude { get; set; }
		
		/// <summary>
		/// A betöltött adatok területének befoglaló téglalapjának két sarokpontja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="upperRightLongitude")]
		public System.Nullable<System.Double> UpperRightLongitude { get; set; }
		
		/// <summary>
		/// A szerveren található adatok érvényességének vége.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validityEnd")]
		public string ValidityEnd { get; set; }
		
		/// <summary>
		/// A szerveren található adatok érvényességének kezdete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="validityStart")]
		public string ValidityStart { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MobileTransitReferences
	{
		
		/// <summary>
		/// Szolgáltatók referenciáinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencies")]
		public TransitAgency[] Agencies { get; set; }
		
		/// <summary>
		/// Zavarok referenciáinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alerts")]
		public TransitAlert[] Alerts { get; set; }
		
		/// <summary>
		/// Járatok referenciáinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routes")]
		public TransitRoute[] Routes { get; set; }
		
		/// <summary>
		/// Megállók referenciáinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stops")]
		public TransitStop[] Stops { get; set; }
		
		/// <summary>
		/// Menetek referenciáinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trips")]
		public TransitTrip[] Trips { get; set; }
	}
	
	/// <summary>
	/// Szolgáltatók referenciáinak listája.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitAgency
	{
		
		/// <summary>
		/// A szolgáltató azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A szolgáltató nyelve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lang")]
		public string Lang { get; set; }
		
		/// <summary>
		/// A szolgáltató neve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A szolgáltató telefonszáma.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="phone")]
		public string Phone { get; set; }
		
		/// <summary>
		/// A szolgáltató időzónája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public string Timezone { get; set; }
		
		/// <summary>
		/// A szolgáltató linkje.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// Zavarok referenciáinak listája.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitAlert
	{
		
		/// <summary>
		/// A zavar végének időpontjához tartozó szöveg.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public TranslatedString Description { get; set; }
		
		/// <summary>
		/// A zavar hatására használhatatlan lesz-e az alkalmazás.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="disableApp")]
		public System.Nullable<System.Boolean> DisableApp { get; set; }
		
		/// <summary>
		/// A zavar végének időpontja másodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Int64> End { get; set; }
		
		/// <summary>
		/// A zavar végének időpontjához tartozó szöveg.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endText")]
		public TranslatedString EndText { get; set; }
		
		/// <summary>
		/// A zavar végének időpontjához tartozó szöveg.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public TranslatedString Header { get; set; }
		
		/// <summary>
		/// A zavar azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A zavar utolsó módosításának időpontja másodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modifiedTime")]
		public System.Nullable<System.Int64> ModifiedTime { get; set; }
		
		/// <summary>
		/// A zavar által érintett járatok azonosítóinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeIds")]
		public string[] RouteIds { get; set; }
		
		/// <summary>
		/// A zavar által érintett járatok listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routes")]
		public TransitAlertRoute[] Routes { get; set; }
		
		/// <summary>
		/// A zavar kezdő időpontja másodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="start")]
		public System.Nullable<System.Int64> Start { get; set; }
		
		/// <summary>
		/// A zavar végének időpontjához tartozó szöveg.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startText")]
		public TranslatedString StartText { get; set; }
		
		/// <summary>
		/// A zavar által érintett megállók azonosítóinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopIds")]
		public string[] StopIds { get; set; }
		
		/// <summary>
		/// A zavar időbélyege másodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public System.Nullable<System.Int64> Timestamp { get; set; }
		
		/// <summary>
		/// A zavar végének időpontjához tartozó szöveg.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public TranslatedString Url { get; set; }
	}
	
	/// <summary>
	/// A zavar végének időpontjához tartozó szöveg.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TranslatedString
	{
		
		/// <summary>
		/// A fordítás-összerendelések első eleme.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="someTranslation")]
		public string SomeTranslation { get; set; }
		
		/// <summary>
		/// Lokalizáció és a hozzá tartozó fordítások összerendelése.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="translations")]
		public System.Collections.Generic.Dictionary<string, string> Translations { get; set; }
	}
	
	/// <summary>
	/// A zavar által érintett járatok listája.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitAlertRoute
	{
		
		/// <summary>
		/// A zavar hatásának típusa.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="effectType")]
		public EffectType EffectType { get; set; }
		
		/// <summary>
		/// A zavar végének időpontjához tartozó szöveg.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="header")]
		public TranslatedString Header { get; set; }
		
		/// <summary>
		/// A zavar által érintett járat azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeId")]
		public string RouteId { get; set; }
		
		/// <summary>
		/// A zavar által érintett megállók azonosítóinak listája a járaton.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopIds")]
		public string[] StopIds { get; set; }
	}
	
	/// <summary>
	/// Járatok referenciáinak listája.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitRoute
	{
		
		/// <summary>
		/// A járatot üzemeltető szolgáltató azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyId")]
		public string AgencyId { get; set; }
		
		/// <summary>
		/// Kerékpár szállítása engedélyezett-e a járaton.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bikesAllowed")]
		public System.Nullable<System.Boolean> BikesAllowed { get; set; }
		
		/// <summary>
		/// A járat színe. Deprecated: használjuk a `style` attribútumot helyette.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// A járat neve. Ha egy | szerepel a névben, akkor a végállomásokat választja el amelyek külön sorokban megjeleníthetőek. COMPACT referenciák kérése esetében nincs kitöltve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A járat ikonjának megjelenítési szövege. Deprecated: használjuk a `style` attribútumot helyette.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconDisplayText")]
		public string IconDisplayText { get; set; }
		
		/// <summary>
		/// A járat ikonjának megjelenítési típusa. Deprecated: használjuk a `style` attribútumot helyette.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconDisplayType")]
		public string IconDisplayType { get; set; }
		
		/// <summary>
		/// A járat azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A járat hosszú neve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longName")]
		public string LongName { get; set; }
		
		/// <summary>
		/// A járat rövid neve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortName")]
		public string ShortName { get; set; }
		
		/// <summary>
		/// A járat rendezési sorszáma a többi járathoz viszonyítva.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		/// <summary>
		/// A járat megjelenítési stílusa.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="style")]
		public TransitRouteStyle Style { get; set; }
		
		/// <summary>
		/// A járat szövegének színe. Deprecated: használjuk a `style` attribútumot helyette.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textColor")]
		public string TextColor { get; set; }
		
		/// <summary>
		/// A járat típusa.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TransitRouteType> Type { get; set; }
		
		/// <summary>
		/// A járat linkje.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// A járat megjelenítési stílusa.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitRouteStyle
	{
		
		/// <summary>
		/// A járat színe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// A járathoz tartozó ikon stílusa.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public TransitRouteStyleIcon Icon { get; set; }
		
		/// <summary>
		/// A megálló stílusa.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stop")]
		public TransitStopStyle Stop { get; set; }
		
		/// <summary>
		/// A járathoz tartozó jármű ikon stílus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vehicleIcon")]
		public TransitVehicleStyleIcon VehicleIcon { get; set; }
	}
	
	/// <summary>
	/// A járathoz tartozó ikon stílusa.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitRouteStyleIcon
	{
		
		/// <summary>
		/// Az ikon felirata.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Az ikon feliratának színe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textColor")]
		public string TextColor { get; set; }
		
		/// <summary>
		/// Az ikon típusa.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TransitRouteStyleIconType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransitRouteStyleIconType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOX")]
		BOX = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CIRCLE")]
		CIRCLE = 1,
	}
	
	/// <summary>
	/// A megálló stílusa.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitStopStyle
	{
		
		/// <summary>
		/// A megálló stílushoz tartozó színek tömbje.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="colors")]
		public string[] Colors { get; set; }
		
		/// <summary>
		/// A megálló stílus képe.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="image")]
		public string Image { get; set; }
		
		/// <summary>
		/// A megálló stílus típusa.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TransitStopStyleType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransitStopStyleType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PRIORITY")]
		PRIORITY = 0,
	}
	
	/// <summary>
	/// A járathoz tartozó jármű ikon stílus.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitVehicleStyleIcon
	{
		
		/// <summary>
		/// Az ikon neve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransitRouteType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WALK")]
		WALK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BICYCLE")]
		BICYCLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAR")]
		CAR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRAM")]
		TRAM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBWAY")]
		SUBWAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBURBAN_RAILWAY")]
		SUBURBAN_RAILWAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RAIL")]
		RAIL = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COACH")]
		COACH = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUS")]
		BUS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TROLLEYBUS")]
		TROLLEYBUS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FERRY")]
		FERRY = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CABLE_CAR")]
		CABLE_CAR = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GONDOLA")]
		GONDOLA = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FUNICULAR")]
		FUNICULAR = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSIT")]
		TRANSIT = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRAINISH")]
		TRAINISH = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUSISH")]
		BUSISH = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LEG_SWITCH")]
		LEG_SWITCH = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CUSTOM_MOTOR_VEHICLE")]
		CUSTOM_MOTOR_VEHICLE = 18,
	}
	
	/// <summary>
	/// Megállók referenciáinak listája.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitStop
	{
		
		/// <summary>
		/// A megállóra vonatkozó aktív zavarok azonosítói.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertIds")]
		public string[] AlertIds { get; set; }
		
		/// <summary>
		/// A megálló kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public string Code { get; set; }
		
		/// <summary>
		/// A megálló leírása.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A megálló iránya.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public string Direction { get; set; }
		
		/// <summary>
		/// A megálló azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A megálló szélességi koordinátája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Double> Lat { get; set; }
		
		/// <summary>
		/// A megálló hely-altípusa.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationSubType")]
		public string LocationSubType { get; set; }
		
		/// <summary>
		/// A megálló hely-típusa.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationType")]
		public System.Nullable<System.Int32> LocationType { get; set; }
		
		/// <summary>
		/// A megálló hosszúsági koordinátája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Double> Lon { get; set; }
		
		/// <summary>
		/// A megálló neve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A szülő-megálló azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentStationId")]
		public string ParentStationId { get; set; }
		
		/// <summary>
		/// A megálló peron-kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platformCode")]
		public string PlatformCode { get; set; }
		
		/// <summary>
		/// A megállót érintő járatok azonosítói.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeIds")]
		public string[] RouteIds { get; set; }
		
		/// <summary>
		/// A megálló színezésének típusa. Deprecated: használjuk a `style` attribútumot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopColorType")]
		public string StopColorType { get; set; }
		
		/// <summary>
		/// A megálló stílusa.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="style")]
		public TransitStopStyle Style { get; set; }
		
		/// <summary>
		/// A megálló típusa. Deprecated: használjuk a `style` attribútumot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TransitRouteType Type { get; set; }
		
		/// <summary>
		/// A megálló utazástervező azonosítója, amelyet a `fromPlace` és a `toPlace` megadásához lehet használni.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vertex")]
		public string Vertex { get; set; }
		
		/// <summary>
		/// Akadálymentesített-e a megálló.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wheelchairBoarding")]
		public System.Nullable<System.Boolean> WheelchairBoarding { get; set; }
	}
	
	/// <summary>
	/// Menetek referenciáinak listája.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitTrip
	{
		
		/// <summary>
		/// Szállítható-e kerékpár a meneten.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bikesAllowed")]
		public System.Nullable<System.Boolean> BikesAllowed { get; set; }
		
		/// <summary>
		/// A menethez tartozó GTFS block_id, amennyiben létezik.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="blockId")]
		public string BlockId { get; set; }
		
		/// <summary>
		/// A menet irányának azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directionId")]
		public string DirectionId { get; set; }
		
		/// <summary>
		/// A menet azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A menethez tartozó járat azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeId")]
		public string RouteId { get; set; }
		
		/// <summary>
		/// A menet közlekedési naptárának azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceId")]
		public string ServiceId { get; set; }
		
		/// <summary>
		/// A menet útvonalvezetésének azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shapeId")]
		public string ShapeId { get; set; }
		
		/// <summary>
		/// A menet célállomása.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tripHeadsign")]
		public string TripHeadsign { get; set; }
		
		/// <summary>
		/// A menet rövid neve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tripShortName")]
		public string TripShortName { get; set; }
		
		/// <summary>
		/// Alacsonypadlós-e a menet.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wheelchairAccessible")]
		public System.Nullable<System.Boolean> WheelchairAccessible { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MultiRouteDetailsMethodResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitListEntryWithReferencesTransitRouteDetails Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A válasz adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitListEntryWithReferencesTransitRouteDetails
	{
		
		/// <summary>
		/// Az adat típusa. Lista esetén "listWithReferences".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		public string Class { get; set; }
		
		/// <summary>
		/// Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitExceeded")]
		public System.Nullable<System.Boolean> LimitExceeded { get; set; }
		
		/// <summary>
		/// A lekért adatok listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list")]
		public TransitRouteDetails[] List { get; set; }
		
		/// <summary>
		/// Az értéke mindig `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outOfRange")]
		public System.Nullable<System.Boolean> OutOfRange { get; set; }
		
		/// <summary>
		/// A válaszhoz tartozó referenciák.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public TransitReferences References { get; set; }
	}
	
	/// <summary>
	/// A lekért adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitRouteDetails
	{
		
		/// <summary>
		/// A járatot üzemeltető szolgáltató azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyId")]
		public string AgencyId { get; set; }
		
		/// <summary>
		/// A járaton található aktív zavarok azonosítóinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertIds")]
		public string[] AlertIds { get; set; }
		
		/// <summary>
		/// Kerékpár szállítása engedélyezett-e a járaton.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bikesAllowed")]
		public System.Nullable<System.Boolean> BikesAllowed { get; set; }
		
		/// <summary>
		/// A járat színe. Deprecated: használjuk a `style` attribútumot helyette.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="color")]
		public string Color { get; set; }
		
		/// <summary>
		/// A járat neve. Ha egy | szerepel a névben, akkor a végállomásokat választja el amelyek külön sorokban megjeleníthetőek. COMPACT referenciák kérése esetében nincs kitöltve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A járat ikonjának megjelenítési szövege. Deprecated: használjuk a `style` attribútumot helyette.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconDisplayText")]
		public string IconDisplayText { get; set; }
		
		/// <summary>
		/// A járat ikonjának megjelenítési típusa. Deprecated: használjuk a `style` attribútumot helyette.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iconDisplayType")]
		public string IconDisplayType { get; set; }
		
		/// <summary>
		/// A járat azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A járat hosszú neve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longName")]
		public string LongName { get; set; }
		
		/// <summary>
		/// A járat rövid neve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shortName")]
		public string ShortName { get; set; }
		
		/// <summary>
		/// A járat rendezési sorszáma a többi járathoz viszonyítva.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sortOrder")]
		public System.Nullable<System.Int32> SortOrder { get; set; }
		
		/// <summary>
		/// A járat megjelenítési stílusa.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="style")]
		public TransitRouteStyle Style { get; set; }
		
		/// <summary>
		/// A járat szövegének színe. Deprecated: használjuk a `style` attribútumot helyette.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="textColor")]
		public string TextColor { get; set; }
		
		/// <summary>
		/// A járat típusa.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public TransitRouteType Type { get; set; }
		
		/// <summary>
		/// A járat linkje.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// A járathoz tartozó járat variánsok listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="variants")]
		public TransitRouteVariant[] Variants { get; set; }
	}
	
	/// <summary>
	/// A járathoz tartozó járat variánsok listája.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitRouteVariant
	{
		
		/// <summary>
		/// A járat variáns megálló azonosítói, amelyekre lehetséges lehet a foglalás.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bookableStopIds")]
		public string[] BookableStopIds { get; set; }
		
		/// <summary>
		/// A járat variáns iránya.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="direction")]
		public string Direction { get; set; }
		
		/// <summary>
		/// A járat variáns célállomása.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headsign")]
		public string Headsign { get; set; }
		
		/// <summary>
		/// Igaz, ha a járaton vannak olyan menetek, amelyeken szükséges lehet az előre foglalás.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mayRequireBooking")]
		public System.Nullable<System.Boolean> MayRequireBooking { get; set; }
		
		/// <summary>
		/// A járat variáns neve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A menethez tartozó kódolt minta (polyline).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="polyline")]
		public TransitPolyline Polyline { get; set; }
		
		/// <summary>
		/// A járat variánshoz tartozó járat azonosítója. Akkor van kitöltve, ha különbözik az eredetitől.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeId")]
		public string RouteId { get; set; }
		
		/// <summary>
		/// A járat variáns megállóinak azonosítói.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopIds")]
		public string[] StopIds { get; set; }
		
		/// <summary>
		/// A járat variáns típusa.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// A menethez tartozó kódolt minta (polyline).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitPolyline
	{
		
		/// <summary>
		/// A minta pontjainak száma.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="length")]
		public System.Nullable<System.Int32> Length { get; set; }
		
		/// <summary>
		/// A minta magassági adatai (mindig üres).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="levels")]
		public string Levels { get; set; }
		
		/// <summary>
		/// A minta kódolt pontjai.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="points")]
		public string Points { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OTPTransitReferences
	{
		
		/// <summary>
		/// Szolgáltatók referenciáinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencies")]
		public System.Collections.Generic.Dictionary<string, TransitAgency> Agencies { get; set; }
		
		/// <summary>
		/// Zavarok referenciáinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alerts")]
		public System.Collections.Generic.Dictionary<string, TransitAlert> Alerts { get; set; }
		
		/// <summary>
		/// Járatok referenciáinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routes")]
		public System.Collections.Generic.Dictionary<string, TransitRoute> Routes { get; set; }
		
		/// <summary>
		/// Megállók referenciáinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stops")]
		public System.Collections.Generic.Dictionary<string, TransitStop> Stops { get; set; }
		
		/// <summary>
		/// Menetek referenciáinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trips")]
		public System.Collections.Generic.Dictionary<string, TransitTrip> Trips { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OnboardDepartPosition
	{
		
		/// <summary>
		/// A pontossága egy pozició pontnak méterben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accuracy")]
		public System.Nullable<System.Double> Accuracy { get; set; }
		
		/// <summary>
		/// A szélességi koordinátája egy pozició pontnak.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public double Lat { get; set; }
		
		/// <summary>
		/// A hosszúsági koordinátája egy pozició pontnak.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public double Lon { get; set; }
		
		/// <summary>
		/// A sebesség egy pozició pontban m/s-ban.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="speed")]
		public System.Nullable<System.Double> Speed { get; set; }
		
		/// <summary>
		/// Az időpontja egy pozició pontnak epoch másodpercben.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public long Timestamp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class OnboardDepartSearchMethodResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitListEntryWithReferencesTransitVehicle Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A válasz adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitListEntryWithReferencesTransitVehicle
	{
		
		/// <summary>
		/// Az adat típusa. Lista esetén "listWithReferences".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		public string Class { get; set; }
		
		/// <summary>
		/// Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitExceeded")]
		public System.Nullable<System.Boolean> LimitExceeded { get; set; }
		
		/// <summary>
		/// A lekért adatok listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list")]
		public TransitVehicle[] List { get; set; }
		
		/// <summary>
		/// Az értéke mindig `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outOfRange")]
		public System.Nullable<System.Boolean> OutOfRange { get; set; }
		
		/// <summary>
		/// A válaszhoz tartozó referenciák.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public TransitReferences References { get; set; }
	}
	
	/// <summary>
	/// A lekért adatok listája.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitVehicle
	{
		
		/// <summary>
		/// A jármű irányszöge.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bearing")]
		public System.Nullable<System.Single> Bearing { get; set; }
		
		/// <summary>
		/// A jármű kapacitása.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capacity")]
		public TransitVehicleOccupancy Capacity { get; set; }
		
		/// <summary>
		/// A járműhöz tartozó torlódási állapot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="congestionLevel")]
		public System.Nullable<TransitVehicleCongestionLevel> CongestionLevel { get; set; }
		
		/// <summary>
		/// Igaz, ha a jármű letért az útvonaláról.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviated")]
		public System.Nullable<System.Boolean> Deviated { get; set; }
		
		/// <summary>
		/// A jármű kijelzőjén megjelenő célállomáskép.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		/// <summary>
		/// A járműhöz tartozó utolsó valós idejű adat időbélyege másodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastUpdateTime")]
		public System.Nullable<System.Int64> LastUpdateTime { get; set; }
		
		/// <summary>
		/// A jármű rendszáma.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="licensePlate")]
		public string LicensePlate { get; set; }
		
		/// <summary>
		/// A jármű pozíciója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public TransitCoordinatePoint Location { get; set; }
		
		/// <summary>
		/// A jármű típusa.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="model")]
		public string Model { get; set; }
		
		/// <summary>
		/// A jármű kapacitása.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="occupancy")]
		public TransitVehicleOccupancy Occupancy { get; set; }
		
		/// <summary>
		/// A menethez tartozó járat azonosítója, amit a jármű teljesít.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeId")]
		public string RouteId { get; set; }
		
		/// <summary>
		/// A jármű által teljesített menet menetrendi napja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceDate")]
		public string ServiceDate { get; set; }
		
		/// <summary>
		/// Igaz, ha a jármű pozíciója kiöregedett.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stale")]
		public System.Nullable<System.Boolean> Stale { get; set; }
		
		/// <summary>
		/// A jármű állapota.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<TransitVehicleStatus> Status { get; set; }
		
		/// <summary>
		/// Hol tart a jármű a két megálló közti szakaszon, százalékban.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopDistancePercent")]
		public System.Nullable<System.Int32> StopDistancePercent { get; set; }
		
		/// <summary>
		/// A járműhöz tartozó megálló azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopId")]
		public string StopId { get; set; }
		
		/// <summary>
		/// A jármű által érintett aktuális megálló sorszáma a meneten.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopSequence")]
		public System.Nullable<System.Int32> StopSequence { get; set; }
		
		/// <summary>
		/// A járműhöz tartozó stílus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="style")]
		public TransitVehicleStyle Style { get; set; }
		
		/// <summary>
		/// A járműhöz tartozó menet azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tripId")]
		public string TripId { get; set; }
		
		/// <summary>
		/// A jármű azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vehicleId")]
		public string VehicleId { get; set; }
		
		/// <summary>
		/// A jármű fajtája. Deprecated: használjuk a `style` attribútumot.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vehicleRouteType")]
		public TransitRouteType VehicleRouteType { get; set; }
		
		/// <summary>
		/// A menet utazástervező azonosítója, amelyet a `fromPlace` megadásához lehet használni.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vertex")]
		public string Vertex { get; set; }
		
		/// <summary>
		/// Igaz, ha a jármű alacsonypadlós.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wheelchairAccessible")]
		public System.Nullable<System.Boolean> WheelchairAccessible { get; set; }
	}
	
	/// <summary>
	/// A jármű kapacitása.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitVehicleOccupancy
	{
		
		/// <summary>
		/// Hány felnőtt van a járművön.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adults")]
		public System.Nullable<System.Int32> Adults { get; set; }
		
		/// <summary>
		/// Hány gyermek van a járművön.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="children")]
		public System.Nullable<System.Int32> Children { get; set; }
		
		/// <summary>
		/// Hány be nem kategorizált entitás van a járművön.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="other")]
		public System.Nullable<System.Int32> Other { get; set; }
		
		/// <summary>
		/// Hány babakocsi van a járművön
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="strollers")]
		public System.Nullable<System.Int32> Strollers { get; set; }
		
		/// <summary>
		/// Hány kerekesszék van a járművön.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="wheelchairs")]
		public System.Nullable<System.Int32> Wheelchairs { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransitVehicleCongestionLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONGESTION")]
		CONGESTION = 1,
	}
	
	/// <summary>
	/// A jármű pozíciója.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitCoordinatePoint
	{
		
		/// <summary>
		/// Szélességi koordináta.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public System.Nullable<System.Single> Lat { get; set; }
		
		/// <summary>
		/// Hosszúsági koordináta.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lon")]
		public System.Nullable<System.Single> Lon { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TransitVehicleStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INCOMING_AT")]
		INCOMING_AT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="STOPPED_AT")]
		STOPPED_AT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="IN_TRANSIT_TO")]
		IN_TRANSIT_TO = 2,
	}
	
	/// <summary>
	/// A járműhöz tartozó stílus.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitVehicleStyle
	{
		
		/// <summary>
		/// A járathoz tartozó jármű ikon stílus.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="icon")]
		public TransitVehicleStyleIcon Icon { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlanTripResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitEntryWithReferencesResponse Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A válasz adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitEntryWithReferencesResponse
	{
		
		/// <summary>
		/// Az adat típusa. Egy entitás esetén "entryWithReferences".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		public string Class { get; set; }
		
		/// <summary>
		/// A lekért adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entry")]
		public Response Entry { get; set; }
		
		/// <summary>
		/// Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitExceeded")]
		public System.Nullable<System.Boolean> LimitExceeded { get; set; }
		
		/// <summary>
		/// A válaszhoz tartozó referenciák.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public TransitReferences References { get; set; }
	}
	
	/// <summary>
	/// A lekért adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Response
	{
		
		/// <summary>
		/// A hibát tartalmazza, ha nem sikerült a tervezés.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public PlannerError Error { get; set; }
		
		/// <summary>
		/// A tervezés metaadatai. Tartalmazza a következő és az előző tervezési időablakot a lapozás megvalósításához ezred másodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public ApiTripSearchMetadata Metadata { get; set; }
		
		/// <summary>
		/// A tervezett útvonalak.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plan")]
		public TripPlan Plan { get; set; }
		
		/// <summary>
		/// A tervezési paraméterek.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestParameters")]
		public System.Collections.Generic.Dictionary<string, string> RequestParameters { get; set; }
	}
	
	/// <summary>
	/// A hibát tartalmazza, ha nem sikerült a tervezés.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class PlannerError
	{
		
		/// <summary>
		/// A hibaüzenet azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		/// <summary>
		/// A hibaüzenet kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public System.Nullable<PlannerErrorMessage> Message { get; set; }
		
		/// <summary>
		/// A rossz paraméterek listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="missing")]
		public string[] Missing { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="msgFromMessage")]
		public PlannerErrorMessage MsgFromMessage { get; set; }
		
		/// <summary>
		/// Igaz, ha nem sikerült útvonalat találni.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noPath")]
		public System.Nullable<System.Boolean> NoPath { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum PlannerErrorMessage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLAN_OK")]
		PLAN_OK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SYSTEM_ERROR")]
		SYSTEM_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GRAPH_UNAVAILABLE")]
		GRAPH_UNAVAILABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLANNER_SERVICE_UNAVAILABLE")]
		PLANNER_SERVICE_UNAVAILABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OUTSIDE_BOUNDS")]
		OUTSIDE_BOUNDS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PATH_NOT_FOUND")]
		PATH_NOT_FOUND = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_TRANSIT_TIMES")]
		NO_TRANSIT_TIMES = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REQUEST_TIMEOUT")]
		REQUEST_TIMEOUT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOGUS_PARAMETER")]
		BOGUS_PARAMETER = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GEOCODE_FROM_NOT_FOUND")]
		GEOCODE_FROM_NOT_FOUND = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GEOCODE_TO_NOT_FOUND")]
		GEOCODE_TO_NOT_FOUND = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GEOCODE_FROM_TO_NOT_FOUND")]
		GEOCODE_FROM_TO_NOT_FOUND = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOO_CLOSE")]
		TOO_CLOSE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCATION_NOT_ACCESSIBLE")]
		LOCATION_NOT_ACCESSIBLE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MISSING_MODE")]
		MISSING_MODE = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GEOCODE_FROM_AMBIGUOUS")]
		GEOCODE_FROM_AMBIGUOUS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GEOCODE_TO_AMBIGUOUS")]
		GEOCODE_TO_AMBIGUOUS = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GEOCODE_FROM_TO_AMBIGUOUS")]
		GEOCODE_FROM_TO_AMBIGUOUS = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNDERSPECIFIED_TRIANGLE")]
		UNDERSPECIFIED_TRIANGLE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRIANGLE_NOT_AFFINE")]
		TRIANGLE_NOT_AFFINE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRIANGLE_OPTIMIZE_TYPE_NOT_SET")]
		TRIANGLE_OPTIMIZE_TYPE_NOT_SET = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRIANGLE_VALUES_NOT_SET")]
		TRIANGLE_VALUES_NOT_SET = 21,
	}
	
	/// <summary>
	/// A tervezett útvonalak.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TripPlan
	{
		
		/// <summary>
		/// Az útvonal kezdete ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateTimeOffset> Date { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a köztes megállók a láb kezdete és végződése között.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public Place From { get; set; }
		
		/// <summary>
		/// A talált útvonalak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="itineraries")]
		public Itinerary[] Itineraries { get; set; }
		
		/// <summary>
		/// Tranzit láb esetén a köztes megállók a láb kezdete és végződése között.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		public Place To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReferencesMethodErrors
	{
		
		/// <summary>
		/// A szolgáltató ID-k, amelyek feloldása sikertelen volt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="agencyIds")]
		public string[] AgencyIds { get; set; }
		
		/// <summary>
		/// A zavar ID-k, amelyek feloldása sikertelen volt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertIds")]
		public string[] AlertIds { get; set; }
		
		/// <summary>
		/// A járat ID-k, amelyek feloldása sikertelen volt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeIds")]
		public string[] RouteIds { get; set; }
		
		/// <summary>
		/// A megálló ID-k, amelyek feloldása sikertelen volt.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopIds")]
		public string[] StopIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReferencesMethodResponse
	{
		
		/// <summary>
		/// Az adat típusa. Egy entitás esetén "entryWithReferences".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		public string Class { get; set; }
		
		/// <summary>
		/// A lekért adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entry")]
		public ReferencesMethodResult Entry { get; set; }
		
		/// <summary>
		/// Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitExceeded")]
		public System.Nullable<System.Boolean> LimitExceeded { get; set; }
		
		/// <summary>
		/// A válaszhoz tartozó referenciák.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public TransitReferences References { get; set; }
	}
	
	/// <summary>
	/// A lekért adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ReferencesMethodResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ReferencesMethodErrors Errors { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum ReferencesSchema
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="true")]
		_true = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="false")]
		_false = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="compact")]
		compact = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="agencies")]
		agencies = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="routes")]
		routes = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="trips")]
		trips = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stops")]
		stops = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="alerts")]
		alerts = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="stations")]
		stations = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteDetailsForStopMethodResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitListEntryWithReferencesTransitRoute Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A válasz adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitListEntryWithReferencesTransitRoute
	{
		
		/// <summary>
		/// Az adat típusa. Lista esetén "listWithReferences".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		public string Class { get; set; }
		
		/// <summary>
		/// Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitExceeded")]
		public System.Nullable<System.Boolean> LimitExceeded { get; set; }
		
		/// <summary>
		/// A lekért adatok listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list")]
		public TransitRoute[] List { get; set; }
		
		/// <summary>
		/// Az értéke mindig `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outOfRange")]
		public System.Nullable<System.Boolean> OutOfRange { get; set; }
		
		/// <summary>
		/// A válaszhoz tartozó referenciák.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public TransitReferences References { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RouteDetailsMethodResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitEntryWithReferencesTransitRouteDetails Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A válasz adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitEntryWithReferencesTransitRouteDetails
	{
		
		/// <summary>
		/// Az adat típusa. Egy entitás esetén "entryWithReferences".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		public string Class { get; set; }
		
		/// <summary>
		/// A lekért adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entry")]
		public TransitRouteDetails Entry { get; set; }
		
		/// <summary>
		/// Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitExceeded")]
		public System.Nullable<System.Boolean> LimitExceeded { get; set; }
		
		/// <summary>
		/// A válaszhoz tartozó referenciák.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public TransitReferences References { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ScheduleForStopOTPMethodResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitEntryWithReferencesTransitSchedule Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A válasz adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitEntryWithReferencesTransitSchedule
	{
		
		/// <summary>
		/// Az adat típusa. Egy entitás esetén "entryWithReferences".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		public string Class { get; set; }
		
		/// <summary>
		/// A lekért adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entry")]
		public TransitSchedule Entry { get; set; }
		
		/// <summary>
		/// Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitExceeded")]
		public System.Nullable<System.Boolean> LimitExceeded { get; set; }
		
		/// <summary>
		/// A válaszhoz tartozó referenciák.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public TransitReferences References { get; set; }
	}
	
	/// <summary>
	/// A lekért adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitSchedule
	{
		
		/// <summary>
		/// A megállóhoz tartozó aktív zavarok azonosítói.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertIds")]
		public string[] AlertIds { get; set; }
		
		/// <summary>
		/// A menetrendhez tartozó dátum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="date")]
		public System.Nullable<System.DateOnly> Date { get; set; }
		
		/// <summary>
		/// A közeli megállók azonosítói.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nearbyStopIds")]
		public string[] NearbyStopIds { get; set; }
		
		/// <summary>
		/// A menetrendhez tartozó járatok azonosítói.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeIds")]
		public string[] RouteIds { get; set; }
		
		/// <summary>
		/// A megállóhoz tartozó menetrend.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schedules")]
		public TransitRouteSchedule[] Schedules { get; set; }
		
		/// <summary>
		/// A menetrendhez tartozó dátum.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceDate")]
		public string ServiceDate { get; set; }
		
		/// <summary>
		/// A menetrend megállójának azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopId")]
		public string StopId { get; set; }
	}
	
	/// <summary>
	/// A megállóhoz tartozó menetrend.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitRouteSchedule
	{
		
		/// <summary>
		/// A járathoz tartozó aktív zavarok.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertIds")]
		public string[] AlertIds { get; set; }
		
		/// <summary>
		/// A menetrendi adatok irány szerint csoportosítva.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directions")]
		public TransitRouteScheduleForDirection[] Directions { get; set; }
		
		/// <summary>
		/// A menetrendhez tarozó járat azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="routeId")]
		public string RouteId { get; set; }
	}
	
	/// <summary>
	/// A menetrendi adatok irány szerint csoportosítva.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitRouteScheduleForDirection
	{
		
		/// <summary>
		/// Az irány azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="directionId")]
		public string DirectionId { get; set; }
		
		/// <summary>
		/// Célmegálló és a hozzá tartozó menetrendi adatok összerendelése.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groups")]
		public System.Collections.Generic.Dictionary<string, TransitScheduleGroup> Groups { get; set; }
		
		/// <summary>
		/// Az irányhoz tartozó menetrendi bejegyzések.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopTimes")]
		public TransitScheduleStopTime[] StopTimes { get; set; }
	}
	
	/// <summary>
	/// Célmegálló és a hozzá tartozó menetrendi adatok összerendelése.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitScheduleGroup
	{
		
		/// <summary>
		/// A menetrendi csoport leírása.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// A menetrendi csoport azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		/// <summary>
		/// A menetrendi csoport célállomása.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="headsign")]
		public string Headsign { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SearchMethodResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitEntryWithReferencesTransitSearch Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatisticsResponse
	{
		
		/// <summary>
		/// Egyszerű válasz.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="result")]
		public string Result { get; set; }
	}
	
	/// <summary>
	/// A válasz státusza.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum Status
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_MODIFIED")]
		NOT_MODIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OK")]
		OK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN_ERROR")]
		UNKNOWN_ERROR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_FOUND")]
		NOT_FOUND = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INVALID_VALUE")]
		INVALID_VALUE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_OPERATING")]
		NOT_OPERATING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="OUTSIDE_BOUNDS")]
		OUTSIDE_BOUNDS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PATH_NOT_FOUND")]
		PATH_NOT_FOUND = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_TRANSIT_TIMES")]
		NO_TRANSIT_TIMES = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="REQUEST_TIMEOUT")]
		REQUEST_TIMEOUT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BOGUS_PARAMETER")]
		BOGUS_PARAMETER = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TOO_CLOSE")]
		TOO_CLOSE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LOCATION_NOT_ACCESSIBLE")]
		LOCATION_NOT_ACCESSIBLE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MISSING_MODE")]
		MISSING_MODE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR_NO_GRAPH")]
		ERROR_NO_GRAPH = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLANNER_SERVICE_UNAVAILABLE")]
		PLANNER_SERVICE_UNAVAILABLE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR_VEHICLE_LOCATION_SERVICE")]
		ERROR_VEHICLE_LOCATION_SERVICE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR_BIKE_RENTAL_SERVICE")]
		ERROR_BIKE_RENTAL_SERVICE = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR_TICKETING_SERVICE")]
		ERROR_TICKETING_SERVICE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ERROR_TRANSIT_INDEX_SERVICE")]
		ERROR_TRANSIT_INDEX_SERVICE = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MOVED_TEMPORARILY")]
		MOVED_TEMPORARILY = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StopsForLocationResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitListEntryWithReferencesTransitStop Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A válasz adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitListEntryWithReferencesTransitStop
	{
		
		/// <summary>
		/// Az adat típusa. Lista esetén "listWithReferences".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		public string Class { get; set; }
		
		/// <summary>
		/// Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitExceeded")]
		public System.Nullable<System.Boolean> LimitExceeded { get; set; }
		
		/// <summary>
		/// A lekért adatok listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="list")]
		public TransitStop[] List { get; set; }
		
		/// <summary>
		/// Az értéke mindig `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="outOfRange")]
		public System.Nullable<System.Boolean> OutOfRange { get; set; }
		
		/// <summary>
		/// A válaszhoz tartozó referenciák.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public TransitReferences References { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TicketingMethodResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitEntryWithReferencesTransitTicketing Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	/// <summary>
	/// A válasz adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitEntryWithReferencesTransitTicketing
	{
		
		/// <summary>
		/// Az adat típusa. Egy entitás esetén "entryWithReferences".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		public string Class { get; set; }
		
		/// <summary>
		/// A lekért adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entry")]
		public TransitTicketing Entry { get; set; }
		
		/// <summary>
		/// Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitExceeded")]
		public System.Nullable<System.Boolean> LimitExceeded { get; set; }
		
		/// <summary>
		/// A válaszhoz tartozó referenciák.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public TransitReferences References { get; set; }
	}
	
	/// <summary>
	/// A lekért adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitTicketing
	{
		
		/// <summary>
		/// A jegyértékesítési adatok legutóbbi módosulásának időpontja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModifiedTime")]
		public System.Nullable<System.Int64> LastModifiedTime { get; set; }
		
		/// <summary>
		/// A jegyértékesítési pontok listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locations")]
		public TicketingLocation[] Locations { get; set; }
		
		/// <summary>
		/// A legrégebb óta módosított értékesítési hely vagy termék módosításának időpontja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oldestModifiedTime")]
		public System.Nullable<System.Int64> OldestModifiedTime { get; set; }
		
		/// <summary>
		/// A termékek listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="products")]
		public TicketingProduct[] Products { get; set; }
	}
	
	/// <summary>
	/// A termékek listája.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TicketingProduct
	{
		
		/// <summary>
		/// A termék csoportjának azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupId")]
		public string GroupId { get; set; }
		
		/// <summary>
		/// A termék csoportjának neve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="groupName")]
		public string GroupName { get; set; }
		
		/// <summary>
		/// A termék azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// A termék utolsó frissítésének időpontja ezred másodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastModified")]
		public System.Nullable<System.DateTimeOffset> LastModified { get; set; }
		
		/// <summary>
		/// A termék neve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// A termék ára.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
		
		/// <summary>
		/// A termék linkje.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		/// <summary>
		/// Ha `false`, akkor hibás az adat, így a felületen elrejtésre kerül.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="visible")]
		public System.Nullable<System.Boolean> Visible { get; set; }
	}
	
	/// <summary>
	/// A válasz adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitEntryWithReferencesTransitTripDetailsOTP
	{
		
		/// <summary>
		/// Az adat típusa. Egy entitás esetén "entryWithReferences".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="class")]
		public string Class { get; set; }
		
		/// <summary>
		/// A lekért adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entry")]
		public TransitTripDetailsOTP Entry { get; set; }
		
		/// <summary>
		/// Igaz, ha a lista több elemet tartalmaz, mint a limit paraméter. Indulási és érkezési idő típusú lekéréseknél használjuk.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="limitExceeded")]
		public System.Nullable<System.Boolean> LimitExceeded { get; set; }
		
		/// <summary>
		/// A válaszhoz tartozó referenciák.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="references")]
		public TransitReferences References { get; set; }
	}
	
	/// <summary>
	/// A lekért adat.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitTripDetailsOTP
	{
		
		/// <summary>
		/// Aktív zavarok a meneten.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="alertIds")]
		public string[] AlertIds { get; set; }
		
		/// <summary>
		/// Igaz, ha a menet (legalább egy szakasza) foglalást igényel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mayRequireBooking")]
		public System.Nullable<System.Boolean> MayRequireBooking { get; set; }
		
		/// <summary>
		/// A következő menet azonosítója a csoportban, ha a menet hurokjárat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextBlockTripId")]
		public string NextBlockTripId { get; set; }
		
		/// <summary>
		/// A menethez tartozó kódolt minta (polyline).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="polyline")]
		public TransitPolyline Polyline { get; set; }
		
		/// <summary>
		/// A menet menetrendi napja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceDate")]
		public string ServiceDate { get; set; }
		
		/// <summary>
		/// Menet megállóinak listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopTimes")]
		public TransitTripStopTime[] StopTimes { get; set; }
		
		/// <summary>
		/// A menet azonosítója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tripId")]
		public string TripId { get; set; }
		
		/// <summary>
		/// A lekért adatok listája.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vehicle")]
		public TransitVehicle Vehicle { get; set; }
		
		/// <summary>
		/// A menet utazástervező azonosítója, amelyet a `fromPlace` megadásához lehet használni.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vertex")]
		public string Vertex { get; set; }
	}
	
	/// <summary>
	/// Menet megállóinak listája.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TransitTripStopTime
	{
		
		/// <summary>
		/// A megállóba érkezés tervezett ideje epoch másodbercben. Az első megállónál hiányzik.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="arrivalTime")]
		public System.Nullable<System.Int64> ArrivalTime { get; set; }
		
		/// <summary>
		/// A megállóból való indulás tervezett ideje epoch másodbercben. Az utolsó megállónál hiányzik.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="departureTime")]
		public System.Nullable<System.Int64> DepartureTime { get; set; }
		
		/// <summary>
		/// A megállóba érkezés becsült ideje epoch másodbercben, ha a járathoz van valós idejű adat. Az első megállónál hiányzik.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictedArrivalTime")]
		public System.Nullable<System.Int64> PredictedArrivalTime { get; set; }
		
		/// <summary>
		/// A megállóból való becsült indulás ideje epoch másodbercben, ha a járathoz van valós idejű adat. Az utolsó megállónál hiányzik.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="predictedDepartureTime")]
		public System.Nullable<System.Int64> PredictedDepartureTime { get; set; }
		
		/// <summary>
		/// Igaz, ha ez a megálló foglalást igényel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requiresBooking")]
		public System.Nullable<System.Boolean> RequiresBooking { get; set; }
		
		/// <summary>
		/// Milyen messze található a megálló az elsőtől a minta mentén méterben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="shapeDistTraveled")]
		public System.Nullable<System.Double> ShapeDistTraveled { get; set; }
		
		/// <summary>
		/// A megállóban kijelzett célállomás.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopHeadsign")]
		public string StopHeadsign { get; set; }
		
		/// <summary>
		/// A megálló azonosítója
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopId")]
		public string StopId { get; set; }
		
		/// <summary>
		/// A megálló sorrendje a járaton.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="stopSequence")]
		public System.Nullable<System.Int32> StopSequence { get; set; }
		
		/// <summary>
		/// Igaz, ha a menethez tartozó valós idejű adatok bizonytalanok.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="uncertain")]
		public System.Nullable<System.Boolean> Uncertain { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum TraverseMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WALK")]
		WALK = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BICYCLE")]
		BICYCLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAR")]
		CAR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRAM")]
		TRAM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBWAY")]
		SUBWAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="RAIL")]
		RAIL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BUS")]
		BUS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FERRY")]
		FERRY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CABLE_CAR")]
		CABLE_CAR = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="GONDOLA")]
		GONDOLA = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FUNICULAR")]
		FUNICULAR = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSIT")]
		TRANSIT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="AIRPLANE")]
		AIRPLANE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TROLLEYBUS")]
		TROLLEYBUS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MONORAIL")]
		MONORAIL = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SUBURBAN_RAILWAY")]
		SUBURBAN_RAILWAY = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="COACH")]
		COACH = 16,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TripDetailsOTPMethodResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitEntryWithReferencesTransitTripDetailsOTP Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VehicleForTripMethodResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitListEntryWithReferencesTransitVehicle Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VehiclesForLocationMethodResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitListEntryWithReferencesTransitVehicle Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VehiclesForRouteMethodResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitListEntryWithReferencesTransitVehicle Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VehiclesForStopMethodResponse
	{
		
		/// <summary>
		/// A válasz státusz kódja.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// Az aktuális szerveridő ezredmásodpercben.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currentTime")]
		public System.Nullable<System.Int64> CurrentTime { get; set; }
		
		/// <summary>
		/// A válasz adat.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="data")]
		public TransitListEntryWithReferencesTransitVehicle Data { get; set; }
		
		/// <summary>
		/// A válasz státusza.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public AlertSearchMethodResponseStatus Status { get; set; }
		
		/// <summary>
		/// A válasz szövege.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// A válasz API verziója.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<System.Int32> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum WalkProfile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="SLOW")]
		SLOW = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MID")]
		MID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="FAST")]
		FAST = 2,
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// SearchAlerts {dialect}/api/where/alert-search
		/// </summary>
		/// <param name="query">A keresési feltétel, amit a zavar fejlécével, leírásával, vagy azonosítójával illesztünk.</param>
		/// <param name="start">A keresés időintervallumának eleje epoch másodpercben.</param>
		/// <param name="end">A keresési időintervallum vége epoch másodpercben.</param>
		/// <param name="minResult">A visszaadott elemek minimális száma.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>Visszatér a `query` paraméterben megadott keresési feltételnek megfelelő zavarokkal, amik aktívak a megadott időintervallumnban.</returns>
		public async Task<AlertSearchMethodResponse> SearchAlertsAsync(string query, long start, long end, int minResult, string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/alert-search?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&start="+start+"&end="+end+"&minResult="+minResult+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<AlertSearchMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetArrivalsAndDeparturesForLocation {dialect}/api/where/arrivals-and-departures-for-location
		/// </summary>
		/// <param name="groupLimit">Menetrendi adatok maximális száma egy csoportban.</param>
		/// <param name="clientLon">A kliens hosszúsági koordinátája.</param>
		/// <param name="clientLat">A kliens szélességi koordinátája.</param>
		/// <param name="minutesBefore">A lekérdezési időablak a `time` paraméter előtt ennyi perccel indul.</param>
		/// <param name="minutesAfter">A lekérdezési időablak a `time` paraméter után ennyi perccel ér véget.</param>
		/// <param name="stopId">A megállók azonosítóinak listája, amelyekhez a lekérést végezzük.</param>
		/// <param name="includeRouteId">A válasz szűrésére használt járatok azonosítóinak listája.</param>
		/// <param name="time">A lekérdezés kiértékeléséhez használt időpont. Alapértelmezetten az aktuális szerveridő.</param>
		/// <param name="onlyDepartures">Ha igaz akkor csak az érkezési (és előrejelzett érkezési) idők nem szerepelnek a válaszban.</param>
		/// <param name="limit">A visszaadott indulási és érkezési idők listájának maximális hossza.</param>
		/// <param name="lat">A helyszín középpontjának szélessgéi koordinátája.</param>
		/// <param name="lon">A helyszín középpontjának hosszúsági koordinátája.</param>
		/// <param name="latSpan">A lekérési terület szélességi íve. (Terület szélessége: `lat +/- latspan`).</param>
		/// <param name="lonSpan">A lekérési terület hosszúsági íve. (Terület hosszúsága: `lon +/- lonSpan`).</param>
		/// <param name="radius">Ha a `latSpan` vagy a `longSpan` nincs kitöltve, a keresési terület a középpontól számított `radius` méter távolság mind a négy irányban.</param>
		/// <param name="query">A válasz szűrésére használt keresési kifejezés.</param>
		/// <param name="minResult">A visszaadott elemek minimális száma.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>Visszaadja egy területhez tartozó érkezési és indulási időket járatazonosítók és célállomások szerint csoportosítva.</returns>
		public async Task<ArrivalsAndDeparturesForLocationOTPMethodResponse> GetArrivalsAndDeparturesForLocationAsync(
					int groupLimit, 
					double clientLon, 
					double clientLat, 
					int minutesBefore, 
					int minutesAfter, 
					string[] stopId, 
					string[] includeRouteId, 
					long time, 
					bool onlyDepartures, 
					int limit, 
					float lat, 
					float lon, 
					float latSpan, 
					float lonSpan, 
					int radius, 
					string query, 
					int minResult, 
					string appVersion, 
					ApiVersion version, 
					Dialect dialect, 
					ReferencesSchema[] includeReferences, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/arrivals-and-departures-for-location?groupLimit="+groupLimit+"&clientLon="+clientLon+"&clientLat="+clientLat+"&minutesBefore="+minutesBefore+"&minutesAfter="+minutesAfter+"&"+string.Join("&", stopId.Select(z => $"stopId={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", includeRouteId.Select(z => $"includeRouteId={System.Uri.EscapeDataString(z.ToString())}"))+"&time="+time+"&onlyDepartures="+onlyDepartures+"&limit="+limit+"&lat="+lat+"&lon="+lon+"&latSpan="+latSpan+"&lonSpan="+lonSpan+"&radius="+radius+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&minResult="+minResult+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArrivalsAndDeparturesForLocationOTPMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetArrivalsAndDeparturesForStop {dialect}/api/where/arrivals-and-departures-for-stop
		/// </summary>
		/// <param name="minutesBefore">A lekérdezési időablak a `time` paraméter előtt ennyi perccel indul.</param>
		/// <param name="minutesAfter">A lekérdezési időablak a `time` paraméter után ennyi perccel ér véget.</param>
		/// <param name="stopId">A megállók azonosítóinak listája, amelyekhez a lekérést végezzük.</param>
		/// <param name="includeRouteId">A válasz szűrésére használt járatok azonosítóinak listája.</param>
		/// <param name="time">A lekérdezés kiértékeléséhez használt időpont. Alapértelmezetten az aktuális szerveridő.</param>
		/// <param name="onlyDepartures">Ha igaz akkor csak az érkezési (és előrejelzett érkezési) idők nem szerepelnek a válaszban.</param>
		/// <param name="limit">A visszaadott indulási és érkezési idők listájának maximális hossza.</param>
		/// <param name="lat">A helyszín középpontjának szélessgéi koordinátája.</param>
		/// <param name="lon">A helyszín középpontjának hosszúsági koordinátája.</param>
		/// <param name="latSpan">A lekérési terület szélességi íve. (Terület szélessége: `lat +/- latspan`).</param>
		/// <param name="lonSpan">A lekérési terület hosszúsági íve. (Terület hosszúsága: `lon +/- lonSpan`).</param>
		/// <param name="radius">Ha a `latSpan` vagy a `longSpan` nincs kitöltve, a keresési terület a középpontól számított `radius` méter távolság mind a négy irányban.</param>
		/// <param name="query">A válasz szűrésére használt keresési kifejezés.</param>
		/// <param name="minResult">A visszaadott elemek minimális száma.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>Lekéri a megállóhoz tartozó érkezési és indulási időket.</returns>
		public async Task<ArrivalsAndDeparturesForStopOTPMethodResponse> GetArrivalsAndDeparturesForStopAsync(
					int minutesBefore, 
					int minutesAfter, 
					string[] stopId, 
					string[] includeRouteId, 
					long time, 
					bool onlyDepartures, 
					int limit, 
					float lat, 
					float lon, 
					float latSpan, 
					float lonSpan, 
					int radius, 
					string query, 
					int minResult, 
					string appVersion, 
					ApiVersion version, 
					Dialect dialect, 
					ReferencesSchema[] includeReferences, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/arrivals-and-departures-for-stop?minutesBefore="+minutesBefore+"&minutesAfter="+minutesAfter+"&"+string.Join("&", stopId.Select(z => $"stopId={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", includeRouteId.Select(z => $"includeRouteId={System.Uri.EscapeDataString(z.ToString())}"))+"&time="+time+"&onlyDepartures="+onlyDepartures+"&limit="+limit+"&lat="+lat+"&lon="+lon+"&latSpan="+latSpan+"&lonSpan="+lonSpan+"&radius="+radius+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&minResult="+minResult+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ArrivalsAndDeparturesForStopOTPMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetBicycleRentalStations {dialect}/api/where/bicycle-rental
		/// </summary>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>Visszatér az összes kerékpárkölcsönző állomással.</returns>
		public async Task<BicycleRentalMethodResponse> GetBicycleRentalStationsAsync(string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/bicycle-rental?appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BicycleRentalMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// BookingRedirect {dialect}/api/where/booking-redirect
		/// </summary>
		/// <param name="routeId">A járat azonosítója.</param>
		/// <param name="directionId">A járat íránya.</param>
		/// <param name="tripId">A menet azonosítója.</param>
		/// <param name="serviceDate">A menet üzem napja.</param>
		/// <param name="boardStopId">A felszállási megálló azonosítója.</param>
		/// <param name="alightStopId">A leszállási megálló azonosítója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		public async Task BookingRedirectAsync(string routeId, string directionId, string tripId, string serviceDate, string boardStopId, string alightStopId, ApiVersion version, string appVersion, Dialect dialect, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/booking-redirect?routeId=" + (routeId==null? "" : System.Uri.EscapeDataString(routeId))+"&directionId=" + (directionId==null? "" : System.Uri.EscapeDataString(directionId))+"&tripId=" + (tripId==null? "" : System.Uri.EscapeDataString(tripId))+"&serviceDate=" + (serviceDate==null? "" : System.Uri.EscapeDataString(serviceDate))+"&boardStopId=" + (boardStopId==null? "" : System.Uri.EscapeDataString(boardStopId))+"&alightStopId=" + (alightStopId==null? "" : System.Uri.EscapeDataString(alightStopId))+"&version=" + version+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetMetadata {dialect}/api/where/metadata
		/// </summary>
		/// <param name="time">A lekérés kiértékelésének időpontja epoch másodpercben (az aktív zavarok lekéréséhez szükséges).A szerver ideje az alapértelmezett értéke.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>A szerver metaadataival tér vissza.</returns>
		public async Task<MetadataResponse> GetMetadataAsync(long time, string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/metadata?time="+time+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MetadataResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetMultiRouteDetails {dialect}/api/where/multi-route-details
		/// </summary>
		/// <param name="routeId">A lekért járatok azonosítói.</param>
		/// <param name="date">Az aktív zavarok lekéréséhez használt dátum. Alapértelmezett értéke az aktuális nap.</param>
		/// <param name="related">Ha igaz, akkor az útvonalhoz tartozó kapcsolódó útvonalak is szerepelnek a válaszban.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>Az összes járatot visszaadja a megadott azonosítókhoz.</returns>
		public async Task<MultiRouteDetailsMethodResponse> GetMultiRouteDetailsAsync(string[] routeId, string date, bool related, string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/multi-route-details?"+string.Join("&", routeId.Select(z => $"routeId={System.Uri.EscapeDataString(z.ToString())}"))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&related="+related+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<MultiRouteDetailsMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// SearchForOnboardDepartVehicles {dialect}/api/where/onboard-depart-search
		/// </summary>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>Visszatér az utas útvonalára illeszkedő járművekkel.</returns>
		public async Task<OnboardDepartSearchMethodResponse> SearchForOnboardDepartVehiclesAsync(string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, OnboardDepartPosition[] requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/onboard-depart-search?appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<OnboardDepartSearchMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// PlanAccess {dialect}/api/where/plan-access
		/// </summary>
		/// <param name="version">Az API verziója.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <param name="date">A dátum, amikor a tervezés indul (`arriveBy` esetén érkezik).</param>
		/// <param name="time">Az idő, amikor a tervezés indul (`arriveBy` esetén érkezik).</param>
		/// <param name="fromPlace">Az indulási hely adatai `név::hely` formában. A `név` az adott hely tetszőleges neve, amely az útiterv kiindulási pontjának lesz a neve (`leg.from.name`). A `hely` lehet koordináta `lat,lon` formában, vagy a geocoder API által visszaadott `vertex` azonosítója.</param>
		/// <param name="toPlace">Az érkezési hely adatai `név::hely` formában. A `név` az adott hely tetszőleges neve, amely az útiterv érkezési pontjának lesz a neve (`leg.to.name`). A `hely` lehet koordináta `lat,lon` formában, vagy a geocoder API által visszaadott `vertex` azonosítója.</param>
		/// <param name="mode">A tervező milyen közlekedési módokat használjon. A kerékpár kölcsönzés a `BICYCLE,WALK` paraméterekkel kapcsolható be.</param>
		/// <param name="shouldBuyTickets">Az első járműre szállás előtt történjen-e jegyvásárlás.</param>
		/// <param name="showIntermediateStops">A válasz tartalmazza-e a járatok által érintett köztes megállókat is.</param>
		/// <param name="arriveBy">Érkezési időre tervezzünk-e a megadott `date` és `time` paraméterrel.</param>
		/// <param name="wheelchair">Az összes járat alacsonypadlós legyen-e.</param>
		/// <param name="triangleSafetyFactor">Kerékpáros háromszög módú tervezés esetén mennyire számít a biztonság. 0 és 1 közötti szám, és 1-et kell kiadnia a másik két faktor összegével.</param>
		/// <param name="triangleSlopeFactor">Kerékpáros háromszög módú tervezés esetén mennyire számít az útvonal síksága. 0 és 1 közötti szám, és 1-et kell kiadnia a másik két faktor összegével.</param>
		/// <param name="triangleTimeFactor">Kerékpáros háromszög módú tervezés esetén mennyire számít a gyorsaság. 0 és 1 közötti szám, és 1-et kell kiadnia a másik két faktor összegével.</param>
		/// <param name="optimize">A kereső mire optimalizálja az útvonalakat.</param>
		/// <param name="walkProfile">A séta sebességét meghatározó profil.</param>
		/// <param name="numItineraries">Legfeljebb hány útvonal szerepeljen a válaszban.</param>
		/// <returns>A megadott paraméterekkel tervez megállóba útvonalat.</returns>
		public async Task<PlanTripResponse> PlanAccessAsync(
					ApiVersion version, 
					string appVersion, 
					Dialect dialect, 
					ReferencesSchema[] includeReferences, 
					string date, 
					string time, 
					string fromPlace, 
					string toPlace, 
					TraverseMode[] mode, 
					bool shouldBuyTickets, 
					bool showIntermediateStops, 
					bool arriveBy, 
					bool wheelchair, 
					double triangleSafetyFactor, 
					double triangleSlopeFactor, 
					double triangleTimeFactor, 
					PlanAccessOptimize optimize, 
					WalkProfile walkProfile, 
					int numItineraries, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/plan-access?version=" + version+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&time=" + (time==null? "" : System.Uri.EscapeDataString(time))+"&fromPlace=" + (fromPlace==null? "" : System.Uri.EscapeDataString(fromPlace))+"&toPlace=" + (toPlace==null? "" : System.Uri.EscapeDataString(toPlace))+"&"+string.Join("&", mode.Select(z => $"mode={z}"))+"&shouldBuyTickets="+shouldBuyTickets+"&showIntermediateStops="+showIntermediateStops+"&arriveBy="+arriveBy+"&wheelchair="+wheelchair+"&triangleSafetyFactor="+triangleSafetyFactor+"&triangleSlopeFactor="+triangleSlopeFactor+"&triangleTimeFactor="+triangleTimeFactor+"&optimize=" + optimize+"&walkProfile=" + walkProfile+"&numItineraries="+numItineraries;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PlanTripResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// PlanTrip {dialect}/api/where/plan-trip
		/// </summary>
		/// <param name="version">Az API verziója.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <param name="date">A dátum, amikor a tervezés indul (`arriveBy` esetén érkezik).</param>
		/// <param name="time">Az idő, amikor a tervezés indul (`arriveBy` esetén érkezik).</param>
		/// <param name="fromPlace">Az indulási hely adatai `név::hely` formában. A `név` az adott hely tetszőleges neve, amely az útiterv kiindulási pontjának lesz a neve (`leg.from.name`). A `hely` lehet koordináta `lat,lon` formában, vagy a geocoder API által visszaadott `vertex` azonosítója.</param>
		/// <param name="toPlace">Az érkezési hely adatai `név::hely` formában. A `név` az adott hely tetszőleges neve, amely az útiterv érkezési pontjának lesz a neve (`leg.to.name`). A `hely` lehet koordináta `lat,lon` formában, vagy a geocoder API által visszaadott `vertex` azonosítója.</param>
		/// <param name="mode">A tervező milyen közlekedési módokat használjon. A kerékpár kölcsönzés a `BICYCLE,WALK` paraméterekkel kapcsolható be.</param>
		/// <param name="shouldBuyTickets">Az első járműre szállás előtt történjen-e jegyvásárlás.</param>
		/// <param name="showIntermediateStops">A válasz tartalmazza-e a járatok által érintett köztes megállókat is.</param>
		/// <param name="arriveBy">Érkezési időre tervezzünk-e a megadott `date` és `time` paraméterrel.</param>
		/// <param name="wheelchair">Az összes járat alacsonypadlós legyen-e.</param>
		/// <param name="triangleSafetyFactor">Kerékpáros háromszög módú tervezés esetén mennyire számít a biztonság. 0 és 1 közötti szám, és 1-et kell kiadnia a másik két faktor összegével.</param>
		/// <param name="triangleSlopeFactor">Kerékpáros háromszög módú tervezés esetén mennyire számít az útvonal síksága. 0 és 1 közötti szám, és 1-et kell kiadnia a másik két faktor összegével.</param>
		/// <param name="triangleTimeFactor">Kerékpáros háromszög módú tervezés esetén mennyire számít a gyorsaság. 0 és 1 közötti szám, és 1-et kell kiadnia a másik két faktor összegével.</param>
		/// <param name="optimize">A kereső mire optimalizálja az útvonalakat.</param>
		/// <param name="walkProfile">A séta sebességét meghatározó profil.</param>
		/// <param name="numItineraries">Legfeljebb hány útvonal szerepeljen a válaszban.</param>
		/// <returns>A megadott paraméterekkel tervez útvonalat.</returns>
		public async Task<PlanTripResponse> PlanTripAsync(
					ApiVersion version, 
					string appVersion, 
					Dialect dialect, 
					ReferencesSchema[] includeReferences, 
					string date, 
					string time, 
					string fromPlace, 
					string toPlace, 
					TraverseMode[] mode, 
					bool shouldBuyTickets, 
					bool showIntermediateStops, 
					bool arriveBy, 
					bool wheelchair, 
					double triangleSafetyFactor, 
					double triangleSlopeFactor, 
					double triangleTimeFactor, 
					PlanAccessOptimize optimize, 
					WalkProfile walkProfile, 
					int numItineraries, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/plan-trip?version=" + version+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&time=" + (time==null? "" : System.Uri.EscapeDataString(time))+"&fromPlace=" + (fromPlace==null? "" : System.Uri.EscapeDataString(fromPlace))+"&toPlace=" + (toPlace==null? "" : System.Uri.EscapeDataString(toPlace))+"&"+string.Join("&", mode.Select(z => $"mode={z}"))+"&shouldBuyTickets="+shouldBuyTickets+"&showIntermediateStops="+showIntermediateStops+"&arriveBy="+arriveBy+"&wheelchair="+wheelchair+"&triangleSafetyFactor="+triangleSafetyFactor+"&triangleSlopeFactor="+triangleSlopeFactor+"&triangleTimeFactor="+triangleTimeFactor+"&optimize=" + optimize+"&walkProfile=" + walkProfile+"&numItineraries="+numItineraries;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<PlanTripResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetReferences {dialect}/api/where/references
		/// </summary>
		/// <param name="agencyId">A szolgáltató ID-je.</param>
		/// <param name="alertId">A zavar ID-je.</param>
		/// <param name="routeId">A járat ID-ja.</param>
		/// <param name="stopId">A megálló ID-ja.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>ID alapú referencia lekérdezés.</returns>
		public async Task<ReferencesMethodResponse> GetReferencesAsync(string[] agencyId, string[] alertId, string[] routeId, string[] stopId, string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/references?"+string.Join("&", agencyId.Select(z => $"agencyId={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", alertId.Select(z => $"alertId={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", routeId.Select(z => $"routeId={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", stopId.Select(z => $"stopId={System.Uri.EscapeDataString(z.ToString())}"))+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ReferencesMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetRouteDetails {dialect}/api/where/route-details
		/// </summary>
		/// <param name="routeId">A járat ID-ja.</param>
		/// <param name="date">Az aktív zavarok lekéréséhez használt dátum. Alapértelmezett értéke az aktuális nap.</param>
		/// <param name="related">Ha igaz, akkor az útvonalhoz tartozó kapcsolódó útvonalak is szerepelnek a válaszban.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>Visszaadja a megadott ID-val rendelkező járatot.</returns>
		public async Task<RouteDetailsMethodResponse> GetRouteDetailsAsync(string routeId, string date, bool related, string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/route-details?routeId=" + (routeId==null? "" : System.Uri.EscapeDataString(routeId))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&related="+related+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RouteDetailsMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetRouteDetailsForStop {dialect}/api/where/route-details-for-stop
		/// </summary>
		/// <param name="stopId">A lekért megálló azonosítója.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>A megállóhoz és a testvérmegállóihoz tartozó összes járattal tér vissza.</returns>
		public async Task<RouteDetailsForStopMethodResponse> GetRouteDetailsForStopAsync(string stopId, string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/route-details-for-stop?stopId=" + (stopId==null? "" : System.Uri.EscapeDataString(stopId))+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RouteDetailsForStopMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetScheduleForStop {dialect}/api/where/schedule-for-stop
		/// </summary>
		/// <param name="stopId">A releváns megállók azonosítói.</param>
		/// <param name="date">A kért dátum.</param>
		/// <param name="onlyDepartures">Igaz esetén az érkezési és előrejelzett érkezési idők ki lesznek hagyva a válaszból.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>Visszaadja a menetrendet az adott megállóhoz.</returns>
		public async Task<ScheduleForStopOTPMethodResponse> GetScheduleForStopAsync(string[] stopId, string date, bool onlyDepartures, string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/schedule-for-stop?"+string.Join("&", stopId.Select(z => $"stopId={System.Uri.EscapeDataString(z.ToString())}"))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&onlyDepartures="+onlyDepartures+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ScheduleForStopOTPMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Search {dialect}/api/where/search
		/// </summary>
		/// <param name="query">Szűrőfeltétel, amire illesztve vannak a zavarok, járatok és megállók.</param>
		/// <param name="lat">A látható térkép középpontjának szélessgéi koordinátája.</param>
		/// <param name="lon">A látható térkép középpontjának hosszúsági koordinátája.</param>
		/// <param name="minResult">A visszaadott elemek minimális száma.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>Visszaadja az olyan zavarokat, megállókat és járatokat, amelyek tulajdonságai illeszkednek a megadott szűrőrfeltételre.</returns>
		public async Task<SearchMethodResponse> SearchAsync(string query, float lat, float lon, int minResult, string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/search?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&lat="+lat+"&lon="+lon+"&minResult="+minResult+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<SearchMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetStatistics {dialect}/api/where/statistics
		/// </summary>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <returns>Egyszerű végpont hibakereséshez, ami egy "OK" választ ad vissza.</returns>
		public async Task<StatisticsResponse> GetStatisticsAsync(Dialect dialect, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/statistics";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StatisticsResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetStopsForLocation {dialect}/api/where/stops-for-location
		/// </summary>
		/// <param name="lat">A helyszín középpontjának szélessgéi koordinátája.</param>
		/// <param name="lon">A helyszín középpontjának hosszúsági koordinátája.</param>
		/// <param name="latSpan">A lekérési terület szélességi íve. (Terület szélessége: `lat +/- latspan`).</param>
		/// <param name="lonSpan">A lekérési terület hosszúsági íve. (Terület hosszúsága: `lon +/- lonSpan`).</param>
		/// <param name="radius">Ha a `latSpan` vagy a `longSpan` nincs kitöltve, a keresési terület a középpontól számított `radius` méter távolság mind a négy irányban.</param>
		/// <param name="query">A válasz szűrésére használt keresési kifejezés.</param>
		/// <param name="minResult">A visszaadott elemek minimális száma.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>Egy megállólistát ad vissza az adott helyhez. Ha a lat vagy a lon null, akkor az összes megálló bekerül a válaszba.</returns>
		public async Task<StopsForLocationResponse> GetStopsForLocationAsync(float lat, float lon, float latSpan, float lonSpan, int radius, string query, int minResult, string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/stops-for-location?lat="+lat+"&lon="+lon+"&latSpan="+latSpan+"&lonSpan="+lonSpan+"&radius="+radius+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&minResult="+minResult+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<StopsForLocationResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetTicketingData {dialect}/api/where/ticketing-locations
		/// </summary>
		/// <param name="ifModifiedSince">Csak azokat az elemeket adjuk vissza, amik módosultak az itt megadott időbélyeg (UNIX időbélyeg másodpercben) után. Ha nincs változás üres listákkal tér vissza. Elsőbbsége van a header paraméterrel szemben.</param>
		/// <param name="full">Ha igaz, és az adat változott az `ifModifiedSince` query paraméterben megadott időpont óta, akkor az összes adat visszaadásra kerül. Ha nincs megadva csak a módosult elemek szerepelnek a válaszban. Csak az `ifModifiedSince` query paraméterrel együtt szerepelhet, mivel az `If-Modified-Since` fejléc minden esetben a teljes választ tartalmazza.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>Visszaadja a jegyértékesítő helyeket és jegytípusokat.</returns>
		public async Task<TicketingMethodResponse> GetTicketingDataAsync(long ifModifiedSince, bool full, string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/ticketing-locations?ifModifiedSince="+ifModifiedSince+"&full="+full+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TicketingMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetTripDetails {dialect}/api/where/trip-details
		/// </summary>
		/// <param name="vehicleId">Amennyiben meg van adva, azon menet érkezik a válaszban, amit az adott jármű teljesít.</param>
		/// <param name="tripId">Ha nincs kitöltve a járműazonosító, az itt megadott azonosítóval rendelkező menet lesz a válaszban.</param>
		/// <param name="date">Ha nincs kitöltve a járműazonosító, ezen a dátumon lesz keresve az adott azonosítójú menet.</param>
		/// <param name="ifModifiedSince">Akkor adunk vissza adatot, ha az módosult az itt megadott időbélyeg (UNIX időbélyeg másodpercben) után. Ellenkező esetben HTTP 304 a válasz, ha nincs változás. Elsőbbsége van a header paraméterrel szemben.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>Visszaadja a részletes információit egy menetnek, ami az azonosítója és a dátum alapján, vagy az azt teljesítő jármű azonosítója alapján lett lekérve.</returns>
		public async Task<TripDetailsOTPMethodResponse> GetTripDetailsAsync(string vehicleId, string tripId, string date, long ifModifiedSince, string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/trip-details?vehicleId=" + (vehicleId==null? "" : System.Uri.EscapeDataString(vehicleId))+"&tripId=" + (tripId==null? "" : System.Uri.EscapeDataString(tripId))+"&date=" + (date==null? "" : System.Uri.EscapeDataString(date))+"&ifModifiedSince="+ifModifiedSince+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<TripDetailsOTPMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetVehicleForTrip {dialect}/api/where/vehicle-for-trip
		/// </summary>
		/// <param name="tripId">A lekért menetek azonosítói.</param>
		/// <param name="date">A lekért menetrendi napok. Alapértelmezetten az aktuális nap.</param>
		/// <param name="ifModifiedSince">Akkor adunk vissza adatot, ha az módosult az itt megadott időbélyeg (UNIX időbélyeg másodpercben) után. Ellenkező esetben HTTP 304 a válasz, ha nincs változás. Elsőbbsége van a header paraméterrel szemben.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>Visszatér a megadott menetekhez és menetrendi napokhoz tartozó járművekkel.</returns>
		public async Task<VehicleForTripMethodResponse> GetVehicleForTripAsync(string[] tripId, string[] date, long ifModifiedSince, string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/vehicle-for-trip?"+string.Join("&", tripId.Select(z => $"tripId={System.Uri.EscapeDataString(z.ToString())}"))+"&"+string.Join("&", date.Select(z => $"date={System.Uri.EscapeDataString(z.ToString())}"))+"&ifModifiedSince="+ifModifiedSince+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VehicleForTripMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetVehiclesForLocation {dialect}/api/where/vehicles-for-location
		/// </summary>
		/// <param name="query">A válasz listát szűrő feltétel, amit tartalmaznia kell a jármű azonosítójának, rendszámának vagy a típusának.</param>
		/// <param name="lat">A terület középpontjának szélességi koordinátája.</param>
		/// <param name="lon">A terület középpontjának hosszúsági koordinátája.</param>
		/// <param name="latSpan">A lekérési terület szélességi íve. (Terület szélessége: `lat +/- latspan`).</param>
		/// <param name="lonSpan">A lekérési terület hosszúsági íve. (Terület hosszúsága: `lon +/- lonSpan`).</param>
		/// <param name="radius">Ha a `latSpan` vagy a `longSpan` nincs kitöltve, a keresési terület a középpontól számított `radius` méter távolság mind a négy irányban.</param>
		/// <param name="ifModifiedSince">Akkor adunk vissza adatot, ha az módosult az itt megadott időbélyeg (UNIX időbélyeg másodpercben) után. Ellenkező esetben HTTP 304 a válasz, ha nincs változás. Elsőbbsége van a header paraméterrel szemben.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>Visszatér az adott területen található összes járművel. Ha a `lat` vagy a `lon` null, az összes jármű benne lesz a válaszban.</returns>
		public async Task<VehiclesForLocationMethodResponse> GetVehiclesForLocationAsync(string query, float lat, float lon, float latSpan, float lonSpan, int radius, long ifModifiedSince, string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/vehicles-for-location?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&lat="+lat+"&lon="+lon+"&latSpan="+latSpan+"&lonSpan="+lonSpan+"&radius="+radius+"&ifModifiedSince="+ifModifiedSince+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VehiclesForLocationMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetVehiclesForRoute {dialect}/api/where/vehicles-for-route
		/// </summary>
		/// <param name="routeId">A lekért járatok azonosítói.</param>
		/// <param name="related">Tartalmazza-e a válasz a kapcsolódó járatokat is a referenciákban.</param>
		/// <param name="ifModifiedSince">Akkor adunk vissza adatot, ha az módosult az itt megadott időbélyeg (UNIX időbélyeg másodpercben) után. Ellenkező esetben HTTP 304 a válasz, ha nincs változás. Elsőbbsége van a header paraméterrel szemben.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>A megadott járat azonosítókhoz tartozó járművekkel tér vissza.</returns>
		public async Task<VehiclesForRouteMethodResponse> GetVehiclesForRouteAsync(string[] routeId, bool related, long ifModifiedSince, string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/vehicles-for-route?"+string.Join("&", routeId.Select(z => $"routeId={System.Uri.EscapeDataString(z.ToString())}"))+"&related="+related+"&ifModifiedSince="+ifModifiedSince+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VehiclesForRouteMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// GetVehiclesForStop {dialect}/api/where/vehicles-for-stop
		/// </summary>
		/// <param name="stopId">A lekért megálló azonosítója.</param>
		/// <param name="ifModifiedSince">Akkor adunk vissza adatot, ha az módosult az itt megadott időbélyeg (UNIX időbélyeg másodpercben) után. Ellenkező esetben HTTP 304 a válasz, ha nincs változás. Elsőbbsége van a header paraméterrel szemben.</param>
		/// <param name="appVersion">A kliensalkalmazás verziója.</param>
		/// <param name="version">Az API verziója.</param>
		/// <param name="dialect">Az API referenciáinak dialektusa.</param>
		/// <param name="includeReferences">A referenciák típusát határozza meg. `true` vagy `COMPACT` esetén minden referencia szerepel, `false` esetén üres. `COMPACT` módban a route referenciák `description` mezője kihagyásra kerül.</param>
		/// <returns>Visszaadja az összes járművet, ami olyan menetet teljesít, ami tartalmazza a megadott megállót.</returns>
		public async Task<VehiclesForStopMethodResponse> GetVehiclesForStopAsync(string stopId, long ifModifiedSince, string appVersion, ApiVersion version, Dialect dialect, ReferencesSchema[] includeReferences, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = ""+dialect+"/api/where/vehicles-for-stop?stopId=" + (stopId==null? "" : System.Uri.EscapeDataString(stopId))+"&ifModifiedSince="+ifModifiedSince+"&appVersion=" + (appVersion==null? "" : System.Uri.EscapeDataString(appVersion))+"&version=" + version+"&"+string.Join("&", includeReferences.Select(z => $"includeReferences={z}"));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<VehiclesForStopMethodResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum PlanAccessOptimize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="BEST")]
		BEST = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="WALK")]
		WALK = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TRANSFERS")]
		TRANSFERS = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
