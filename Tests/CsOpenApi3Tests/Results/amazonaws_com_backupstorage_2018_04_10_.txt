//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceUnavailableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ServiceInternalException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RetryableException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IllegalArgumentException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ResourceNotFoundException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThrottlingException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetChunkOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KMSInvalidKeyUsageException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetObjectMetadataOutput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MetadataBlob { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListChunksOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public Chunk[] ChunkList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Chunk
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Chunk
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Index { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public int Length { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Checksum { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataChecksumAlgorithm ChecksumAlgorithm { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ChunkToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DataChecksumAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SHA256 = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListObjectsOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public BackupObject[] ObjectList { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string NextToken { get; set; }
	}
	
	/// <summary>
	/// Object
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BackupObject
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Int32> ChunksCount { get; set; }
		
		[System.Runtime.Serialization.DataMember()]
		public string MetadataString { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ObjectChecksum { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SummaryChecksumAlgorithm ObjectChecksumAlgorithm { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ObjectToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SummaryChecksumAlgorithm
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUMMARY = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotifyObjectCompleteOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ObjectChecksum { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SummaryChecksumAlgorithm ObjectChecksumAlgorithm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotReadableInputStreamException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutChunkOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ChunkChecksum { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataChecksumAlgorithm ChunkChecksumAlgorithm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutObjectOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string InlineChunkChecksum { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public DataChecksumAlgorithm InlineChunkChecksumAlgorithm { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string ObjectChecksum { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public SummaryChecksumAlgorithm ObjectChecksumAlgorithm { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartObjectOutput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string UploadId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DataAlreadyExistsException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteObjectInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetChunkInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GetObjectMetadataInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListChunksInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListObjectsInput
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NotifyObjectCompleteInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string MetadataBlob { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutChunkInput
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Data { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PutObjectInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string InlineChunk { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class StartObjectInput
	{
		
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ThrowOnDuplicate { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Delete Object from the incremental base Backup.
		/// DeleteObject backup-jobs/{jobId}/object/{objectName}
		/// </summary>
		/// <param name="jobId">Backup job Id for the in-progress backup.</param>
		/// <param name="objectName">The name of the Object.</param>
		/// <returns>Success</returns>
		public async Task DeleteObjectAsync(string jobId, string objectName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/object/"+ (objectName==null? "" : System.Uri.EscapeDataString(objectName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Start upload containing one or many chunks.
		/// StartObject backup-jobs/{jobId}/object/{objectName}
		/// </summary>
		/// <param name="jobId">Backup job Id for the in-progress backup</param>
		/// <param name="objectName">Name for the object.</param>
		/// <returns>Success</returns>
		public async Task<StartObjectOutput> StartObjectAsync(string jobId, string objectName, StartObjectPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/object/"+ (objectName==null? "" : System.Uri.EscapeDataString(objectName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<StartObjectOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the specified object's chunk.
		/// GetChunk restore-jobs/{jobId}/chunk/{chunkToken}
		/// </summary>
		/// <param name="jobId">Storage job id</param>
		/// <param name="chunkToken">Chunk token</param>
		/// <returns>Success</returns>
		public async Task<GetChunkOutput> GetChunkAsync(string jobId, string chunkToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restore-jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/chunk/"+ (chunkToken==null? "" : System.Uri.EscapeDataString(chunkToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetChunkOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get metadata associated with an Object.
		/// GetObjectMetadata restore-jobs/{jobId}/object/{objectToken}/metadata
		/// </summary>
		/// <param name="jobId">Backup job id for the in-progress backup.</param>
		/// <param name="objectToken">Object token.</param>
		/// <returns>Success</returns>
		public async Task<GetObjectMetadataOutput> GetObjectMetadataAsync(string jobId, string objectToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restore-jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/object/"+ (objectToken==null? "" : System.Uri.EscapeDataString(objectToken))+"/metadata";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetObjectMetadataOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List chunks in a given Object
		/// ListChunks restore-jobs/{jobId}/chunks/{objectToken}/list
		/// </summary>
		/// <param name="jobId">Storage job id</param>
		/// <param name="objectToken">Object token</param>
		/// <param name="max_results">Maximum number of chunks
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="next_token">Pagination token</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListChunksOutput> ListChunksAsync(string jobId, string objectToken, int max_results, string next_token, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restore-jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/chunks/"+ (objectToken==null? "" : System.Uri.EscapeDataString(objectToken))+"/list&max-results="+max_results+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListChunksOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// List all Objects in a given Backup.
		/// ListObjects restore-jobs/{jobId}/objects/list
		/// </summary>
		/// <param name="jobId">Storage job id</param>
		/// <param name="starting_object_name">Optional, specifies the starting Object name to list from. Ignored if NextToken is not NULL</param>
		/// <param name="starting_object_prefix">Optional, specifies the starting Object prefix to list from. Ignored if NextToken is not NULL</param>
		/// <param name="max_results">Maximum objects count
		/// Minimum: 1
		/// Maximum: 100
		// </param>
		/// <param name="next_token">Pagination token</param>
		/// <param name="created_before">(Optional) Created before filter</param>
		/// <param name="created_after">(Optional) Created after filter</param>
		/// <param name="MaxResults">Pagination limit</param>
		/// <param name="NextToken">Pagination token</param>
		/// <returns>Success</returns>
		public async Task<ListObjectsOutput> ListObjectsAsync(string jobId, string starting_object_name, string starting_object_prefix, int max_results, string next_token, System.DateTimeOffset created_before, System.DateTimeOffset created_after, string MaxResults, string NextToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "restore-jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/objects/list&starting-object-name=" + (starting_object_name==null? "" : System.Uri.EscapeDataString(starting_object_name))+"&starting-object-prefix=" + (starting_object_prefix==null? "" : System.Uri.EscapeDataString(starting_object_prefix))+"&max-results="+max_results+"&next-token=" + (next_token==null? "" : System.Uri.EscapeDataString(next_token))+"&created-before=" + created_before.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&created-after=" + created_after.ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffffffZ")+"&MaxResults=" + (MaxResults==null? "" : System.Uri.EscapeDataString(MaxResults))+"&NextToken=" + (NextToken==null? "" : System.Uri.EscapeDataString(NextToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListObjectsOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Complete upload
		/// NotifyObjectComplete backup-jobs/{jobId}/object/{uploadId}/complete#checksum&checksum-algorithm
		/// </summary>
		/// <param name="jobId">Backup job Id for the in-progress backup</param>
		/// <param name="uploadId">Upload Id for the in-progress upload</param>
		/// <param name="checksum">Object checksum</param>
		/// <param name="checksum_algorithm">Checksum algorithm</param>
		/// <param name="metadata_string">Optional metadata associated with an Object. Maximum string length is 256 bytes.</param>
		/// <param name="metadata_blob_length">The size of MetadataBlob.</param>
		/// <param name="metadata_checksum">Checksum of MetadataBlob.</param>
		/// <param name="metadata_checksum_algorithm">Checksum algorithm.</param>
		/// <returns>Success</returns>
		public async Task<NotifyObjectCompleteOutput> NotifyObjectCompleteAsync(string jobId, string uploadId, string checksum, SummaryChecksumAlgorithm checksum_algorithm, string metadata_string, int metadata_blob_length, string metadata_checksum, DataChecksumAlgorithm metadata_checksum_algorithm, NotifyObjectCompletePutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/object/"+ (uploadId==null? "" : System.Uri.EscapeDataString(uploadId))+"/complete#checksum&checksum-algorithm&checksum=" + (checksum==null? "" : System.Uri.EscapeDataString(checksum))+"&checksum-algorithm=" + checksum_algorithm+"&metadata-string=" + (metadata_string==null? "" : System.Uri.EscapeDataString(metadata_string))+"&metadata-blob-length="+metadata_blob_length+"&metadata-checksum=" + (metadata_checksum==null? "" : System.Uri.EscapeDataString(metadata_checksum))+"&metadata-checksum-algorithm=" + metadata_checksum_algorithm;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NotifyObjectCompleteOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload chunk.
		/// PutChunk backup-jobs/{jobId}/chunk/{uploadId}/{chunkIndex}#length&checksum&checksum-algorithm
		/// </summary>
		/// <param name="jobId">Backup job Id for the in-progress backup.</param>
		/// <param name="uploadId">Upload Id for the in-progress upload.</param>
		/// <param name="chunkIndex">Describes this chunk's position relative to the other chunks</param>
		/// <param name="length">Data length</param>
		/// <param name="checksum">Data checksum</param>
		/// <param name="checksum_algorithm">Checksum algorithm</param>
		/// <returns>Success</returns>
		public async Task<PutChunkOutput> PutChunkAsync(string jobId, string uploadId, int chunkIndex, int length, string checksum, DataChecksumAlgorithm checksum_algorithm, PutChunkPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/chunk/"+ (uploadId==null? "" : System.Uri.EscapeDataString(uploadId))+"/"+chunkIndex+"#length&checksum&checksum-algorithm&length="+length+"&checksum=" + (checksum==null? "" : System.Uri.EscapeDataString(checksum))+"&checksum-algorithm=" + checksum_algorithm;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutChunkOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Upload object that can store object metadata String and data blob in single API call using inline chunk field.
		/// PutObject backup-jobs/{jobId}/object/{objectName}/put-object
		/// </summary>
		/// <param name="jobId">Backup job Id for the in-progress backup.</param>
		/// <param name="objectName">The name of the Object to be uploaded.</param>
		/// <param name="metadata_string">Store user defined metadata like backup checksum, disk ids, restore metadata etc.</param>
		/// <param name="length">Length of the inline chunk data.</param>
		/// <param name="checksum">Inline chunk checksum</param>
		/// <param name="checksum_algorithm">Inline chunk checksum algorithm</param>
		/// <param name="object_checksum">object checksum</param>
		/// <param name="object_checksum_algorithm">object checksum algorithm</param>
		/// <param name="throwOnDuplicate">Throw an exception if Object name is already exist.</param>
		/// <returns>Success</returns>
		public async Task<PutObjectOutput> PutObjectAsync(string jobId, string objectName, string metadata_string, int length, string checksum, string checksum_algorithm, string object_checksum, SummaryChecksumAlgorithm object_checksum_algorithm, bool throwOnDuplicate, PutObjectPutBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "backup-jobs/"+ (jobId==null? "" : System.Uri.EscapeDataString(jobId))+"/object/"+ (objectName==null? "" : System.Uri.EscapeDataString(objectName))+"/put-object&metadata-string=" + (metadata_string==null? "" : System.Uri.EscapeDataString(metadata_string))+"&length="+length+"&checksum=" + (checksum==null? "" : System.Uri.EscapeDataString(checksum))+"&checksum-algorithm=" + (checksum_algorithm==null? "" : System.Uri.EscapeDataString(checksum_algorithm))+"&object-checksum=" + (object_checksum==null? "" : System.Uri.EscapeDataString(object_checksum))+"&object-checksum-algorithm=" + object_checksum_algorithm+"&throwOnDuplicate="+throwOnDuplicate;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PutObjectOutput>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class StartObjectPutBody
	{
		
		/// <summary>
		/// Throw an exception if Object name is already exist.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public System.Nullable<System.Boolean> ThrowOnDuplicate { get; set; }
	}
	
	public class NotifyObjectCompletePutBody
	{
		
		/// <summary>
		/// Optional metadata associated with an Object. Maximum length is 4MB.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string MetadataBlob { get; set; }
	}
	
	public class PutChunkPutBody
	{
		
		/// <summary>
		/// Data to be uploaded
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember()]
		public string Data { get; set; }
	}
	
	public class PutObjectPutBody
	{
		
		/// <summary>
		/// Inline chunk data to be uploaded.
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public string InlineChunk { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
