//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Event
	{
		
		[System.Runtime.Serialization.DataMember(Name="city")]
		public string City { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="critic_name")]
		public string Critic_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_detail_url")]
		public string Event_detail_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_id")]
		public System.Nullable<System.Int32> Event_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_name")]
		public string Event_name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="event_schedule_id")]
		public System.Nullable<System.Int32> Event_schedule_id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="festival")]
		public System.Nullable<System.Boolean> Festival { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="film_rating")]
		public System.Nullable<System.Boolean> Film_rating { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="free")]
		public System.Nullable<System.Boolean> Free { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="kid_friendly")]
		public System.Nullable<System.Boolean> Kid_friendly { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_chance")]
		public System.Nullable<System.Boolean> Last_chance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_modified")]
		public string Last_modified { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="long_running_show")]
		public System.Nullable<System.Boolean> Long_running_show { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="previews_and_openings")]
		public System.Nullable<System.Boolean> Previews_and_openings { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recur_days")]
		public string[] Recur_days { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="recurring_start_date")]
		public string Recurring_start_date { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="state")]
		public string State { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="times_pick")]
		public System.Nullable<System.Boolean> Times_pick { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="web_description")]
		public string Web_description { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Geographic API
		/// Geographic API
		/// EventsGetByNameAndLatitudeAndLongitudeAndElevationAndSwAndQueryAndFilterAndDate_rangeAndFacetsAndSortAndLimitAndOffset query.json
		/// </summary>
		/// <param name="name">A displayable name for the specified place.</param>
		/// <param name="latitude">The latitude of the specified place.
		///</param>
		/// <param name="longitude">The longitude of the specified place.</param>
		/// <param name="elevation">The elevation of the specified place, in meters.</param>
		/// <param name="sw">Along with ne, forms a bounded box using the longitude and latitude coordinates specified as the southwest corner. The search results are limited to the resulting box. Two float values, separated by a comma `latitude,longitude` <br/> The ne parameter is required to use this parameter.</param>
		/// <param name="query">Search keywords to perform a text search on the fields: web_description, event_name and venue_name. 'AND' searches can be performed by wrapping query terms in quotes. If you do not specify a query, all results will be returned.
		///</param>
		/// <param name="filter">Filters search results based on the facets provided.  For more information on the values you can filter on, see Facets.
		///</param>
		/// <param name="date_range">Start date to end date in the following format- YYYY-MM-DD:YYYY-MM-DD</param>
		/// <param name="facets">When facets is set to 1, a count of all facets will be included in the response.</param>
		/// <param name="sort">Sorts your results on the fields specified. <br/> `sort_value1+[asc | desc],sort_value2+[asc|desc],[...]`<br/> Appending +asc to a facet or response will sort results on that value in ascending order. Appending +desc to a facet or response  will sort results in descending order. You can sort on multiple fields. You can sort on any facet. For the list of responses you can sort on, see the Sortable Field column in the Response table. <br/><br/>If you are doing a spatial search with the ll parameter, you can also sort by the distance from the center of the search: dist+[asc | desc] <br/> **Note:** either +asc or +desc is required when using the sort parameter.
		///</param>
		/// <param name="limit">Limits the number of results returned</param>
		/// <param name="offset">Sets the starting point of the result set</param>
		/// <returns>An array of events</returns>
		public async Task<EventsGetByNameAndLatitudeAndLongitudeAndElevationAndSwAndQueryAndFilterAndDate_rangeAndFacetsAndSortAndLimitAndOffsetReturn> EventsGetByNameAndLatitudeAndLongitudeAndElevationAndSwAndQueryAndFilterAndDate_rangeAndFacetsAndSortAndLimitAndOffsetAsync(string name, string latitude, string longitude, int elevation, string sw, string query, string filter, string date_range, EventsGetByNameAndLatitudeAndLongitudeAndElevationAndSwAndQueryAndFilterAndDate_rangeAndFacetsAndSortAndLimitAndOffsetFacets facets, string sort, int limit, int offset, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "query.json?name=" + (name==null? "" : System.Uri.EscapeDataString(name))+"&latitude=" + (latitude==null? "" : System.Uri.EscapeDataString(latitude))+"&longitude=" + (longitude==null? "" : System.Uri.EscapeDataString(longitude))+"&elevation="+elevation+"&sw=" + (sw==null? "" : System.Uri.EscapeDataString(sw))+"&query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&date_range=" + (date_range==null? "" : System.Uri.EscapeDataString(date_range))+"&facets="+facets+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&limit="+limit+"&offset="+offset;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<EventsGetByNameAndLatitudeAndLongitudeAndElevationAndSwAndQueryAndFilterAndDate_rangeAndFacetsAndSortAndLimitAndOffsetReturn>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum EventsGetByNameAndLatitudeAndLongitudeAndElevationAndSwAndQueryAndFilterAndDate_rangeAndFacetsAndSortAndLimitAndOffsetFacets
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_0 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
	}
	
	public class EventsGetByNameAndLatitudeAndLongitudeAndElevationAndSwAndQueryAndFilterAndDate_rangeAndFacetsAndSortAndLimitAndOffsetReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="results")]
		public Event[] Results { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
