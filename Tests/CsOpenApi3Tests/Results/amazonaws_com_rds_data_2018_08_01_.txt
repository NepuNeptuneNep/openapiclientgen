//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The response elements represent the output of a SQL statement over an array of data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchExecuteStatementResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="updateResults")]
		public UpdateResult[] UpdateResults { get; set; }
	}
	
	/// <summary>
	/// The response elements represent the results of an update.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class UpdateResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="generatedFields")]
		public Field[] GeneratedFields { get; set; }
	}
	
	/// <summary>
	/// Contains a value.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Field
	{
		
		[System.Runtime.Serialization.DataMember(Name="isNull")]
		public System.Nullable<System.Boolean> IsNull { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="booleanValue")]
		public System.Nullable<System.Boolean> BooleanValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longValue")]
		public System.Nullable<System.Int32> LongValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="doubleValue")]
		public System.Nullable<System.Double> DoubleValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blobValue")]
		public string BlobValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arrayValue")]
		public ArrayValue ArrayValue { get; set; }
	}
	
	/// <summary>
	/// Contains an array.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ArrayValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="booleanValues")]
		public System.Nullable<System.Boolean> BooleanValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longValues")]
		public System.Nullable<System.Int32> LongValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="doubleValues")]
		public System.Nullable<System.Double> DoubleValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stringValues")]
		public string[] StringValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arrayValues")]
		public ArrayValue[] ArrayValues { get; set; }
	}
	
	/// <summary>
	/// A parameter used in a SQL statement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SqlParameter
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="value")]
		public Field Value { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeHint")]
		public TypeHint TypeHint { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TypeHint
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UUID = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIMESTAMP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DATE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DECIMAL = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccessDeniedException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BadRequestException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StatementTimeoutException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InternalServerErrorException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ForbiddenException
	{
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ServiceUnavailableError
	{
	}
	
	/// <summary>
	/// The response elements represent the output of a request to start a SQL transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeginTransactionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	/// <summary>
	/// The response elements represent the output of a commit transaction request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitTransactionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="transactionStatus")]
		public string TransactionStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class NotFoundException
	{
	}
	
	/// <summary>
	/// The response elements represent the output of a request to run one or more SQL statements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecuteSqlResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="sqlStatementResults")]
		public SqlStatementResult[] SqlStatementResults { get; set; }
	}
	
	/// <summary>
	/// <p>The result of a SQL statement.</p> <pre><code> &lt;note&gt; &lt;p&gt;This data structure is only used with the deprecated &lt;code&gt;ExecuteSql&lt;/code&gt; operation. Use the &lt;code&gt;BatchExecuteStatement&lt;/code&gt; or &lt;code&gt;ExecuteStatement&lt;/code&gt; operation instead.&lt;/p&gt; &lt;/note&gt; </code></pre>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class SqlStatementResult
	{
		
		[System.Runtime.Serialization.DataMember(Name="resultFrame")]
		public ResultFrame ResultFrame { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfRecordsUpdated")]
		public System.Nullable<System.Int32> NumberOfRecordsUpdated { get; set; }
	}
	
	/// <summary>
	/// <p>The result set returned by a SQL statement.</p> <note> <p>This data structure is only used with the deprecated <code>ExecuteSql</code> operation. Use the <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> operation instead.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResultFrame
	{
		
		[System.Runtime.Serialization.DataMember(Name="resultSetMetadata")]
		public ResultSetMetadata ResultSetMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="records")]
		public Record[] Records { get; set; }
	}
	
	/// <summary>
	/// The metadata of the result set returned by a SQL statement.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResultSetMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="columnCount")]
		public System.Nullable<System.Int32> ColumnCount { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="columnMetadata")]
		public ColumnMetadata[] ColumnMetadata { get; set; }
	}
	
	/// <summary>
	/// Contains the metadata for a column.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ColumnMetadata
	{
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<System.Int32> Type { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="typeName")]
		public string TypeName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schemaName")]
		public string SchemaName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tableName")]
		public string TableName { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isAutoIncrement")]
		public System.Nullable<System.Boolean> IsAutoIncrement { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isSigned")]
		public System.Nullable<System.Boolean> IsSigned { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCurrency")]
		public System.Nullable<System.Boolean> IsCurrency { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isCaseSensitive")]
		public System.Nullable<System.Boolean> IsCaseSensitive { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nullable")]
		public System.Nullable<System.Int32> Nullable { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="precision")]
		public System.Nullable<System.Int32> Precision { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="scale")]
		public System.Nullable<System.Int32> Scale { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arrayBaseColumnType")]
		public System.Nullable<System.Int32> ArrayBaseColumnType { get; set; }
	}
	
	/// <summary>
	/// <p>A record returned by a call.</p> <note> <p>This data structure is only used with the deprecated <code>ExecuteSql</code> operation. Use the <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> operation instead.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Record
	{
		
		[System.Runtime.Serialization.DataMember(Name="values")]
		public Value[] Values { get; set; }
	}
	
	/// <summary>
	/// <p>Contains the value of a column.</p> <pre><code> &lt;note&gt; &lt;p&gt;This data structure is only used with the deprecated &lt;code&gt;ExecuteSql&lt;/code&gt; operation. Use the &lt;code&gt;BatchExecuteStatement&lt;/code&gt; or &lt;code&gt;ExecuteStatement&lt;/code&gt; operation instead.&lt;/p&gt; &lt;/note&gt; </code></pre>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Value
	{
		
		[System.Runtime.Serialization.DataMember(Name="isNull")]
		public System.Nullable<System.Boolean> IsNull { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bitValue")]
		public System.Nullable<System.Boolean> BitValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="bigIntValue")]
		public System.Nullable<System.Int32> BigIntValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="intValue")]
		public System.Nullable<System.Int32> IntValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="doubleValue")]
		public System.Nullable<System.Double> DoubleValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="realValue")]
		public float RealValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stringValue")]
		public string StringValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="blobValue")]
		public string BlobValue { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="arrayValues")]
		public Value[] ArrayValues { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="structValue")]
		public StructValue StructValue { get; set; }
	}
	
	/// <summary>
	/// <p>A structure value returned by a call.</p> <note> <p>This data structure is only used with the deprecated <code>ExecuteSql</code> operation. Use the <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> operation instead.</p> </note>
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class StructValue
	{
		
		[System.Runtime.Serialization.DataMember(Name="attributes")]
		public Value[] Attributes { get; set; }
	}
	
	/// <summary>
	/// The response elements represent the output of a request to run a SQL statement against a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecuteStatementResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="records")]
		public Field[][] Records { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="columnMetadata")]
		public ColumnMetadata[] ColumnMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="numberOfRecordsUpdated")]
		public System.Nullable<System.Int32> NumberOfRecordsUpdated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="generatedFields")]
		public Field[] GeneratedFields { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formattedRecords")]
		public string FormattedRecords { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum DecimalReturnType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DOUBLE_OR_LONG = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LongReturnType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STRING = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LONG = 1,
	}
	
	/// <summary>
	/// The response elements represent the output of a request to perform a rollback of a transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RollbackTransactionResponse
	{
		
		[System.Runtime.Serialization.DataMember(Name="transactionStatus")]
		public string TransactionStatus { get; set; }
	}
	
	/// <summary>
	/// The request parameters represent the input of a SQL statement over an array of data.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BatchExecuteStatementRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretArn")]
		public string SecretArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sql")]
		public string Sql { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="database")]
		public string Database { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameterSets")]
		public SqlParameter[][] ParameterSets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	/// <summary>
	/// The request parameters represent the input of a request to start a SQL transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BeginTransactionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretArn")]
		public string SecretArn { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="database")]
		public string Database { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
	}
	
	/// <summary>
	/// The request parameters represent the input of a commit transaction request.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class CommitTransactionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretArn")]
		public string SecretArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	/// <summary>
	/// The request parameters represent the input of a request to run one or more SQL statements.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecuteSqlRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dbClusterOrInstanceArn")]
		public string DbClusterOrInstanceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="awsSecretStoreArn")]
		public string AwsSecretStoreArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sqlStatements")]
		public string SqlStatements { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="database")]
		public string Database { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
	}
	
	/// <summary>
	/// Options that control how the result set is returned.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ResultSetOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="decimalReturnType")]
		public DecimalReturnType DecimalReturnType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longReturnType")]
		public LongReturnType LongReturnType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum RecordsFormatType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NONE = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		JSON = 1,
	}
	
	/// <summary>
	/// The request parameters represent the input of a request to run a SQL statement against a database.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ExecuteStatementRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretArn")]
		public string SecretArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sql")]
		public string Sql { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="database")]
		public string Database { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="schema")]
		public string Schema { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public SqlParameter[] Parameters { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="includeResultMetadata")]
		public System.Nullable<System.Boolean> IncludeResultMetadata { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="continueAfterTimeout")]
		public System.Nullable<System.Boolean> ContinueAfterTimeout { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="resultSetOptions")]
		public ResultSetOptions ResultSetOptions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="formatRecordsAs")]
		public RecordsFormatType FormatRecordsAs { get; set; }
	}
	
	/// <summary>
	/// The request parameters represent the input of a request to perform a rollback of a transaction.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RollbackTransactionRequest
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretArn")]
		public string SecretArn { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		public string TransactionId { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// <p>Runs a batch SQL statement over an array of data.</p> <p>You can run bulk update and insert operations for multiple records using a DML statement with different parameter sets. Bulk operations can provide a significant performance improvement over individual insert and update operations.</p> <note> <p>If a call isn't part of a transaction because it doesn't include the <code>transactionID</code> parameter, changes that result from the call are committed automatically.</p> <p>There isn't a fixed upper limit on the number of parameter sets. However, the maximum size of the HTTP request submitted through the Data API is 4 MiB. If the request exceeds this limit, the Data API returns an error and doesn't process the request. This 4-MiB limit includes the size of the HTTP headers and the JSON notation in the request. Thus, the number of parameter sets that you can include depends on a combination of factors, such as the size of the SQL statement and the size of each parameter set.</p> <p>The response size limit is 1 MiB. If the call returns more than 1 MiB of response data, the call is terminated.</p> </note>
		/// BatchExecuteStatement BatchExecute
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BatchExecuteStatementResponse> BatchExecuteStatementAsync(BatchExecuteStatementPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BatchExecute";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BatchExecuteStatementResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Starts a SQL transaction.</p> <note> <p>A transaction can run for a maximum of 24 hours. A transaction is terminated and rolled back automatically after 24 hours.</p> <p>A transaction times out if no calls use its transaction ID in three minutes. If a transaction times out before it's committed, it's rolled back automatically.</p> <p>DDL statements inside a transaction cause an implicit commit. We recommend that you run each DDL statement in a separate <code>ExecuteStatement</code> call with <code>continueAfterTimeout</code> enabled.</p> </note>
		/// BeginTransaction BeginTransaction
		/// </summary>
		/// <returns>Success</returns>
		public async Task<BeginTransactionResponse> BeginTransactionAsync(BeginTransactionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "BeginTransaction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<BeginTransactionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Ends a SQL transaction started with the <code>BeginTransaction</code> operation and commits the changes.
		/// CommitTransaction CommitTransaction
		/// </summary>
		/// <returns>Success</returns>
		public async Task<CommitTransactionResponse> CommitTransactionAsync(CommitTransactionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "CommitTransaction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<CommitTransactionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Runs one or more SQL statements.</p> <note> <p>This operation is deprecated. Use the <code>BatchExecuteStatement</code> or <code>ExecuteStatement</code> operation.</p> </note>
		/// ExecuteSql ExecuteSql
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ExecuteSqlResponse> ExecuteSqlAsync(ExecuteSqlPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "ExecuteSql";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExecuteSqlResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// <p>Runs a SQL statement against a database.</p> <note> <p>If a call isn't part of a transaction because it doesn't include the <code>transactionID</code> parameter, changes that result from the call are committed automatically.</p> <p>If the binary response data from the database is more than 1 MB, the call is terminated.</p> </note>
		/// ExecuteStatement Execute
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ExecuteStatementResponse> ExecuteStatementAsync(ExecuteStatementPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "Execute";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ExecuteStatementResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
		
		/// <summary>
		/// Performs a rollback of a transaction. Rolling back a transaction cancels its changes.
		/// RollbackTransaction RollbackTransaction
		/// </summary>
		/// <returns>Success</returns>
		public async Task<RollbackTransactionResponse> RollbackTransactionAsync(RollbackTransactionPostBody requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "RollbackTransaction";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<RollbackTransactionResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
	
	public class BatchExecuteStatementPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
		/// Required
		/// Max length: 100
		/// Min length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// <p>The ARN of the secret that enables access to the DB cluster. Enter the database user name and password for the credentials in the secret.</p> <p>For information about creating the secret, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/create_database_secret.html">Create a database secret</a>.</p>
		/// Required
		/// Max length: 100
		/// Min length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretArn")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string SecretArn { get; set; }
		
		/// <summary>
		/// The SQL statement to run. Don't include a semicolon (;) at the end of the SQL statement.
		/// Required
		/// Max length: 65536
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sql")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		public string Sql { get; set; }
		
		/// <summary>
		/// The name of the database.
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Database { get; set; }
		
		/// <summary>
		/// <p>The name of the database schema.</p> <note> <p>Currently, the <code>schema</code> parameter isn't supported.</p> </note>
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Schema { get; set; }
		
		/// <summary>
		/// <p>The parameter set for the batch operation.</p> <p>The SQL statement is executed as many times as the number of parameter sets provided. To execute a SQL statement with no parameters, use one of the following options:</p> <ul> <li> <p>Specify one or more empty parameter sets.</p> </li> <li> <p>Use the <code>ExecuteStatement</code> operation instead of the <code>BatchExecuteStatement</code> operation.</p> </li> </ul> <note> <p>Array parameters are not supported.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameterSets")]
		public SqlParameter[][] ParameterSets { get; set; }
		
		/// <summary>
		/// <p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p> <p>If the SQL statement is not part of a transaction, don't set this parameter.</p>
		/// Max length: 192
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string TransactionId { get; set; }
	}
	
	public class BeginTransactionPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
		/// Required
		/// Max length: 100
		/// Min length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// The name or ARN of the secret that enables access to the DB cluster.
		/// Required
		/// Max length: 100
		/// Min length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretArn")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string SecretArn { get; set; }
		
		/// <summary>
		/// The name of the database.
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Database { get; set; }
		
		/// <summary>
		/// The name of the database schema.
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Schema { get; set; }
	}
	
	public class CommitTransactionPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
		/// Required
		/// Max length: 100
		/// Min length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// The name or ARN of the secret that enables access to the DB cluster.
		/// Required
		/// Max length: 100
		/// Min length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretArn")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string SecretArn { get; set; }
		
		/// <summary>
		/// The identifier of the transaction to end and commit.
		/// Required
		/// Max length: 192
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string TransactionId { get; set; }
	}
	
	public class ExecuteSqlPostBody
	{
		
		/// <summary>
		/// The ARN of the Aurora Serverless DB cluster.
		/// Required
		/// Max length: 100
		/// Min length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="dbClusterOrInstanceArn")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string DbClusterOrInstanceArn { get; set; }
		
		/// <summary>
		/// <p>The Amazon Resource Name (ARN) of the secret that enables access to the DB cluster. Enter the database user name and password for the credentials in the secret.</p> <p>For information about creating the secret, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/create_database_secret.html">Create a database secret</a>.</p>
		/// Required
		/// Max length: 100
		/// Min length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="awsSecretStoreArn")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string AwsSecretStoreArn { get; set; }
		
		/// <summary>
		/// <p>One or more SQL statements to run on the DB cluster.</p> <p>You can separate SQL statements from each other with a semicolon (;). Any valid SQL statement is permitted, including data definition, data manipulation, and commit statements. </p>
		/// Required
		/// Max length: 65536
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sqlStatements")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		public string SqlStatements { get; set; }
		
		/// <summary>
		/// The name of the database.
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Database { get; set; }
		
		/// <summary>
		/// The name of the database schema.
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Schema { get; set; }
	}
	
	public class ExecuteStatementPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
		/// Required
		/// Max length: 100
		/// Min length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// <p>The ARN of the secret that enables access to the DB cluster. Enter the database user name and password for the credentials in the secret.</p> <p>For information about creating the secret, see <a href="https://docs.aws.amazon.com/secretsmanager/latest/userguide/create_database_secret.html">Create a database secret</a>.</p>
		/// Required
		/// Max length: 100
		/// Min length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretArn")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string SecretArn { get; set; }
		
		/// <summary>
		/// The SQL statement to run.
		/// Required
		/// Max length: 65536
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="sql")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(65536)]
		public string Sql { get; set; }
		
		/// <summary>
		/// The name of the database.
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="database")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Database { get; set; }
		
		/// <summary>
		/// <p>The name of the database schema.</p> <note> <p>Currently, the <code>schema</code> parameter isn't supported.</p> </note>
		/// Max length: 64
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="schema")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(64)]
		public string Schema { get; set; }
		
		/// <summary>
		/// <p>The parameters for the SQL statement.</p> <note> <p>Array parameters are not supported.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public SqlParameter[] Parameters { get; set; }
		
		/// <summary>
		/// <p>The identifier of a transaction that was started by using the <code>BeginTransaction</code> operation. Specify the transaction ID of the transaction that you want to include the SQL statement in.</p> <p>If the SQL statement is not part of a transaction, don't set this parameter.</p>
		/// Max length: 192
		/// Min length: 0
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string TransactionId { get; set; }
		
		/// <summary>
		/// A value that indicates whether to include metadata in the results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includeResultMetadata")]
		public System.Nullable<System.Boolean> IncludeResultMetadata { get; set; }
		
		/// <summary>
		/// <p>A value that indicates whether to continue running the statement after the call times out. By default, the statement stops running when the call times out.</p> <note> <p>For DDL statements, we recommend continuing to run the statement after the call times out. When a DDL statement terminates before it is finished running, it can result in errors and possibly corrupted data structures.</p> </note>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="continueAfterTimeout")]
		public System.Nullable<System.Boolean> ContinueAfterTimeout { get; set; }
		
		/// <summary>
		/// Options that control how the result set is returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resultSetOptions")]
		public ExecuteStatementPostBodyResultSetOptions ResultSetOptions { get; set; }
		
		/// <summary>
		/// <p>A value that indicates whether to format the result set as a single JSON string. This parameter only applies to <code>SELECT</code> statements and is ignored for other types of statements. Allowed values are <code>NONE</code> and <code>JSON</code>. The default value is <code>NONE</code>. The result is returned in the <code>formattedRecords</code> field.</p> <p>For usage information about the JSON format for result sets, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API</a> in the <i>Amazon Aurora User Guide</i>.</p>
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="formatRecordsAs")]
		public RecordsFormatType FormatRecordsAs { get; set; }
	}
	
	public class ExecuteStatementPostBodyResultSetOptions
	{
		
		[System.Runtime.Serialization.DataMember(Name="decimalReturnType")]
		public DecimalReturnType DecimalReturnType { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="longReturnType")]
		public LongReturnType LongReturnType { get; set; }
	}
	
	public class RollbackTransactionPostBody
	{
		
		/// <summary>
		/// The Amazon Resource Name (ARN) of the Aurora Serverless DB cluster.
		/// Required
		/// Max length: 100
		/// Min length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="resourceArn")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string ResourceArn { get; set; }
		
		/// <summary>
		/// The name or ARN of the secret that enables access to the DB cluster.
		/// Required
		/// Max length: 100
		/// Min length: 11
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="secretArn")]
		[System.ComponentModel.DataAnnotations.MinLength(11)]
		[System.ComponentModel.DataAnnotations.MaxLength(100)]
		public string SecretArn { get; set; }
		
		/// <summary>
		/// The identifier of the transaction to roll back.
		/// Required
		/// Max length: 192
		/// Min length: 0
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="transactionId")]
		[System.ComponentModel.DataAnnotations.MinLength(0)]
		[System.ComponentModel.DataAnnotations.MaxLength(192)]
		public string TransactionId { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
