//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Album
	{
		
		[System.Runtime.Serialization.DataMember(Name="can_comment")]
		public System.Nullable<System.Boolean> Can_comment { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count_comments")]
		public System.Nullable<System.Double> Count_comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count_views")]
		public System.Nullable<System.Double> Count_views { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_create")]
		public System.Nullable<System.Double> Date_create { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_update")]
		public System.Nullable<System.Double> Date_update { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="farm")]
		public string Farm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="photos")]
		public System.Nullable<System.Double> Photos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="primary")]
		public string Primary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="server")]
		public string Server { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="videos")]
		public System.Nullable<System.Double> Videos { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContextPhoto
	{
		
		[System.Runtime.Serialization.DataMember(Name="farm")]
		public string Farm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_faved")]
		public System.Nullable<System.Boolean> Is_faved { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license")]
		public System.Nullable<System.Int32> License { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="media")]
		public string Media { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="safe")]
		public System.Nullable<System.Boolean> Safe { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="server")]
		public string Server { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="thumb")]
		public string Thumb { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContextPhotos
	{
		
		[System.Runtime.Serialization.DataMember(Name="photos")]
		public ContextPhoto[] Photos { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Cover
	{
		
		[System.Runtime.Serialization.DataMember(Name="farm")]
		public string Farm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isfamily")]
		public System.Nullable<System.Boolean> Isfamily { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isfriend")]
		public System.Nullable<System.Boolean> Isfriend { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ispublic")]
		public System.Nullable<System.Boolean> Ispublic { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public string Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="server")]
		public string Server { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="y")]
		public string Y { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Group
	{
		
		[System.Runtime.Serialization.DataMember(Name="blast")]
		public GroupBlast Blast { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cover")]
		public Cover Cover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverphoto_farm")]
		public string Coverphoto_farm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverphoto_server")]
		public string Coverphoto_server { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverphoto_url")]
		public PhotoURLs Coverphoto_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public GroupDescription Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconfarm")]
		public string Iconfarm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconserver")]
		public string Iconserver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_admin")]
		public System.Nullable<System.Boolean> Is_admin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_member")]
		public System.Nullable<System.Boolean> Is_member { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_moderator")]
		public System.Nullable<System.Boolean> Is_moderator { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ispoolmoderated")]
		public System.Nullable<System.Boolean> Ispoolmoderated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lang")]
		public string Lang { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public GroupMembers Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public GroupName Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path_alias")]
		public string Path_alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pool_count")]
		public GroupPool_count Pool_count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pool_rows")]
		public System.Nullable<System.Int32> Pool_rows { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public GroupPrivacy Privacy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="restrictions")]
		public GroupRestrictions Restrictions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="roles")]
		public GroupRoles Roles { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rules")]
		public GroupRules Rules { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="throttle")]
		public GroupThrottle Throttle { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topic_count")]
		public GroupTopic_count Topic_count { get; set; }
	}
	
	public class GroupBlast
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="date_blast_added")]
		public string Date_blast_added { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_id")]
		public string User_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PhotoURLs
	{
		
		[System.Runtime.Serialization.DataMember(Name="h")]
		public string H { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="l")]
		public string L { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="s")]
		public string S { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="t")]
		public string T { get; set; }
	}
	
	public class GroupDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class GroupMembers
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class GroupName
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class GroupPool_count
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class GroupPrivacy
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class GroupRestrictions
	{
		
		[System.Runtime.Serialization.DataMember(Name="art_ok")]
		public System.Nullable<System.Boolean> Art_ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="has_geo")]
		public System.Nullable<System.Boolean> Has_geo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="images_ok")]
		public System.Nullable<System.Boolean> Images_ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moderate_ok")]
		public System.Nullable<System.Boolean> Moderate_ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="photos_ok")]
		public System.Nullable<System.Boolean> Photos_ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="restricted_ok")]
		public System.Nullable<System.Boolean> Restricted_ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="safe_ok")]
		public System.Nullable<System.Boolean> Safe_ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="screens_ok")]
		public System.Nullable<System.Boolean> Screens_ok { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="videos_ok")]
		public System.Nullable<System.Boolean> Videos_ok { get; set; }
	}
	
	public class GroupRoles
	{
		
		[System.Runtime.Serialization.DataMember(Name="admin")]
		public string Admin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="member")]
		public string Member { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="moderator")]
		public string Moderator { get; set; }
	}
	
	public class GroupRules
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class GroupThrottle
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public System.Nullable<System.Int32> Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public string Mode { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="remaining")]
		public string Remaining { get; set; }
	}
	
	public class GroupTopic_count
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Note
	{
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Owner
	{
		
		[System.Runtime.Serialization.DataMember(Name="iconfarm")]
		public string Iconfarm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconserver")]
		public string Iconserver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_ad_free")]
		public System.Nullable<System.Boolean> Is_ad_free { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ispro")]
		public System.Nullable<System.Boolean> Ispro { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="noindexfollow")]
		public System.Nullable<System.Boolean> Noindexfollow { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nsid")]
		public string Nsid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path_alias")]
		public string Path_alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="realname")]
		public string Realname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public string Username { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Person
	{
		
		[System.Runtime.Serialization.DataMember(Name="can_buy_pro")]
		public System.Nullable<System.Boolean> Can_buy_pro { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cover")]
		public Cover Cover { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverphoto")]
		public PhotoURLs Coverphoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverphoto_farm")]
		public string Coverphoto_farm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="coverphoto_server")]
		public string Coverphoto_server { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public PersonDescription Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="disable_keyboard_shortcuts")]
		public PersonDisable_keyboard_shortcuts Disable_keyboard_shortcuts { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="expire")]
		public System.Nullable<System.Boolean> Expire { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="has_stats")]
		public System.Nullable<System.Boolean> Has_stats { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconfarm")]
		public string Iconfarm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconserver")]
		public string Iconserver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_ad_free")]
		public System.Nullable<System.Boolean> Is_ad_free { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ispro")]
		public System.Nullable<System.Boolean> Ispro { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="location")]
		public PersonLocation Location { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mbox_sha1sum")]
		public PersonMbox_sha1sum Mbox_sha1sum { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="mobileurl")]
		public PersonMobileurl Mobileurl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nsid")]
		public string Nsid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="path_alias")]
		public string Path_alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="photos")]
		public PersonPhotos Photos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="photosurl")]
		public PersonPhotosurl Photosurl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profileurl")]
		public PersonProfileurl Profileurl { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="realname")]
		public PersonRealname Realname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone")]
		public PersonTimezone Timezone { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="unread_messages")]
		public PersonUnread_messages Unread_messages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="user_secret")]
		public string User_secret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="username")]
		public PersonUsername Username { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="yintl")]
		public string Yintl { get; set; }
	}
	
	public class PersonDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class PersonDisable_keyboard_shortcuts
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class PersonLocation
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class PersonMbox_sha1sum
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class PersonMobileurl
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class PersonPhotos
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public PersonPhotosCount Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstdate")]
		public PersonPhotosFirstdate Firstdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="firstdatetaken")]
		public PersonPhotosFirstdatetaken Firstdatetaken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="views")]
		public PersonPhotosViews Views { get; set; }
	}
	
	public class PersonPhotosCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class PersonPhotosFirstdate
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class PersonPhotosFirstdatetaken
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class PersonPhotosViews
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class PersonPhotosurl
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class PersonProfileurl
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class PersonRealname
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class PersonTimezone
	{
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="offset")]
		public string Offset { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="timezone_id")]
		public string Timezone_id { get; set; }
	}
	
	public class PersonUnread_messages
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class PersonUsername
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Photo
	{
		
		[System.Runtime.Serialization.DataMember(Name="comments")]
		public PhotoComments Comments { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dates")]
		public PhotoDates Dates { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="dateuploaded")]
		public string Dateuploaded { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="description")]
		public PhotoDescription Description { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="editability")]
		public PhotoEditability Editability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="farm")]
		public string Farm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isfavorite")]
		public System.Nullable<System.Boolean> Isfavorite { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="license")]
		public string License { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="media")]
		public string Media { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public PhotoNotes Notes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="originalsecret")]
		public string Originalsecret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="owner")]
		public Owner Owner { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="people")]
		public PhotoPeople People { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public PhotoPermissions Permissions { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="publiceditability")]
		public PhotoPubliceditability Publiceditability { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="rotation")]
		public string Rotation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="safe")]
		public System.Nullable<System.Boolean> Safe { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="safety_level")]
		public string Safety_level { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="server")]
		public string Server { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tags")]
		public PhotoTags Tags { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="title")]
		public PhotoTitle Title { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="urls")]
		public PhotoUrls Urls { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public PhotoUsage Usage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="views")]
		public string Views { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="visibility")]
		public PhotoVisibility Visibility { get; set; }
	}
	
	public class PhotoComments
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class PhotoDates
	{
		
		[System.Runtime.Serialization.DataMember(Name="lastupdate")]
		public string Lastupdate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="posted")]
		public string Posted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="taken")]
		public string Taken { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="takengranularity")]
		public string Takengranularity { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="takenunknown")]
		public System.Nullable<System.Boolean> Takenunknown { get; set; }
	}
	
	public class PhotoDescription
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class PhotoEditability
	{
		
		[System.Runtime.Serialization.DataMember(Name="canaddmeta")]
		public System.Nullable<System.Boolean> Canaddmeta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancomment")]
		public System.Nullable<System.Boolean> Cancomment { get; set; }
	}
	
	public class PhotoNotes
	{
		
		[System.Runtime.Serialization.DataMember(Name="note")]
		public Note[] Note { get; set; }
	}
	
	public class PhotoPeople
	{
		
		[System.Runtime.Serialization.DataMember(Name="haspeople")]
		public System.Nullable<System.Boolean> Haspeople { get; set; }
	}
	
	public class PhotoPermissions
	{
		
		[System.Runtime.Serialization.DataMember(Name="permaddmeta")]
		public string Permaddmeta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="permcomment")]
		public string Permcomment { get; set; }
	}
	
	public class PhotoPubliceditability
	{
		
		[System.Runtime.Serialization.DataMember(Name="canaddmeta")]
		public System.Nullable<System.Boolean> Canaddmeta { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="cancomment")]
		public System.Nullable<System.Boolean> Cancomment { get; set; }
	}
	
	public class PhotoTags
	{
		
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public Tag[] Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Tag
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorname")]
		public string Authorname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="machine_tag")]
		public System.Nullable<System.Boolean> Machine_tag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="raw")]
		public string Raw { get; set; }
	}
	
	public class PhotoTitle
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class PhotoUrls
	{
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public URL[] Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class URL
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class PhotoUsage
	{
		
		[System.Runtime.Serialization.DataMember(Name="canblog")]
		public System.Nullable<System.Boolean> Canblog { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candownload")]
		public System.Nullable<System.Boolean> Candownload { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canprint")]
		public System.Nullable<System.Boolean> Canprint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canshare")]
		public System.Nullable<System.Boolean> Canshare { get; set; }
	}
	
	public class PhotoVisibility
	{
		
		[System.Runtime.Serialization.DataMember(Name="isfamily")]
		public System.Nullable<System.Boolean> Isfamily { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="isfriend")]
		public System.Nullable<System.Boolean> Isfriend { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ispublic")]
		public System.Nullable<System.Boolean> Ispublic { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Size
	{
		
		[System.Runtime.Serialization.DataMember(Name="height")]
		public System.Nullable<System.Double> Height { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="media")]
		public string Media { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="source")]
		public string Source { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="width")]
		public System.Nullable<System.Double> Width { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Topic
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author_is_deleted")]
		public System.Nullable<System.Boolean> Author_is_deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author_path_alias")]
		public string Author_path_alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorname")]
		public string Authorname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="can_delete")]
		public System.Nullable<System.Boolean> Can_delete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="can_edit")]
		public System.Nullable<System.Boolean> Can_edit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="can_reply")]
		public System.Nullable<System.Boolean> Can_reply { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="count_replies")]
		public System.Nullable<System.Int32> Count_replies { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datecreate")]
		public string Datecreate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datelastpost")]
		public string Datelastpost { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconfarm")]
		public string Iconfarm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconserver")]
		public string Iconserver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_locked")]
		public System.Nullable<System.Boolean> Is_locked { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_pro")]
		public System.Nullable<System.Boolean> Is_pro { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_sticky")]
		public System.Nullable<System.Boolean> Is_sticky { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="last_reply")]
		public string Last_reply { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastedit")]
		public string Lastedit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public TopicMessage Message { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="role")]
		public string Role { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="subject")]
		public string Subject { get; set; }
	}
	
	public class TopicMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TopicReply
	{
		
		[System.Runtime.Serialization.DataMember(Name="author")]
		public string Author { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author_is_deleted")]
		public System.Nullable<System.Boolean> Author_is_deleted { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="author_path_alias")]
		public string Author_path_alias { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="authorname")]
		public string Authorname { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="can_delete")]
		public System.Nullable<System.Boolean> Can_delete { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="can_edit")]
		public System.Nullable<System.Boolean> Can_edit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="datecreate")]
		public string Datecreate { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconfarm")]
		public string Iconfarm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconserver")]
		public string Iconserver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="is_pro")]
		public System.Nullable<System.Boolean> Is_pro { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lastedit")]
		public string Lastedit { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="message")]
		public TopicReplyMessage Message { get; set; }
	}
	
	public class TopicReplyMessage
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Returns an access token
		/// GetAccessToken oauth/access_token
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> GetAccessTokenAsync(string oauth_consumer_key, string oauth_nonce, string oauth_timestamp, string oauth_signature_method, string oauth_version, string oauth_signature, string oauth_verifier, string oauth_token, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "oauth/access_token?oauth_consumer_key=" + (oauth_consumer_key==null? "" : System.Uri.EscapeDataString(oauth_consumer_key))+"&oauth_nonce=" + (oauth_nonce==null? "" : System.Uri.EscapeDataString(oauth_nonce))+"&oauth_timestamp=" + (oauth_timestamp==null? "" : System.Uri.EscapeDataString(oauth_timestamp))+"&oauth_signature_method=" + (oauth_signature_method==null? "" : System.Uri.EscapeDataString(oauth_signature_method))+"&oauth_version=" + (oauth_version==null? "" : System.Uri.EscapeDataString(oauth_version))+"&oauth_signature=" + (oauth_signature==null? "" : System.Uri.EscapeDataString(oauth_signature))+"&oauth_verifier=" + (oauth_verifier==null? "" : System.Uri.EscapeDataString(oauth_verifier))+"&oauth_token=" + (oauth_token==null? "" : System.Uri.EscapeDataString(oauth_token));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns an oauth token and oauth token secret
		/// GetRequestToken oauth/request_token
		/// </summary>
		/// <returns>OK</returns>
		public async Task<string> GetRequestTokenAsync(string oauth_consumer_key, string oauth_nonce, string oauth_timestamp, string oauth_signature_method, string oauth_version, string oauth_signature, string oauth_callback, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "oauth/request_token?oauth_consumer_key=" + (oauth_consumer_key==null? "" : System.Uri.EscapeDataString(oauth_consumer_key))+"&oauth_nonce=" + (oauth_nonce==null? "" : System.Uri.EscapeDataString(oauth_nonce))+"&oauth_timestamp=" + (oauth_timestamp==null? "" : System.Uri.EscapeDataString(oauth_timestamp))+"&oauth_signature_method=" + (oauth_signature_method==null? "" : System.Uri.EscapeDataString(oauth_signature_method))+"&oauth_version=" + (oauth_version==null? "" : System.Uri.EscapeDataString(oauth_version))+"&oauth_signature=" + (oauth_signature==null? "" : System.Uri.EscapeDataString(oauth_signature))+"&oauth_callback=" + (oauth_callback==null? "" : System.Uri.EscapeDataString(oauth_callback));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<string>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns next and previous favorites for a photo in a user's favorites
		/// GetFavoritesContextByID rest?method=flickr.favorites.getContext
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetFavoritesContextByIDReturn> GetFavoritesContextByIDAsync(string api_key, string photo_id, string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.favorites.getContext&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&photo_id=" + (photo_id==null? "" : System.Uri.EscapeDataString(photo_id))+"&user_id=" + (user_id==null? "" : System.Uri.EscapeDataString(user_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetFavoritesContextByIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of the user's favorite photos. Only photos which the calling user has permission to see are returned.
		/// GetFavoritesByPersonID rest?method=flickr.favorites.getList
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetFavoritesByPersonIDReturn> GetFavoritesByPersonIDAsync(string api_key, string user_id, double min_fave_date, double max_fave_date, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.favorites.getList&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&user_id=" + (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"&min_fave_date="+min_fave_date+"&max_fave_date="+max_fave_date+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetFavoritesByPersonIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of photos in a gallery.
		/// GetGalleryPhotosByID rest?method=flickr.galleries.getPhotos
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetGalleryPhotosByIDReturn> GetGalleryPhotosByIDAsync(string api_key, string gallery_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.galleries.getPhotos&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&gallery_id=" + (gallery_id==null? "" : System.Uri.EscapeDataString(gallery_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetGalleryPhotosByIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information on a group topic reply
		/// GetGroupTopicRepliesByID rest?method=flickr.groups.discuss.replies.getInfo
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetGroupTopicRepliesByIDReturn> GetGroupTopicRepliesByIDAsync(string api_key, string group_id, string topic_id, string reply_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.groups.discuss.replies.getInfo&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&group_id=" + (group_id==null? "" : System.Uri.EscapeDataString(group_id))+"&topic_id=" + (topic_id==null? "" : System.Uri.EscapeDataString(topic_id))+"&reply_id=" + (reply_id==null? "" : System.Uri.EscapeDataString(reply_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetGroupTopicRepliesByIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about a group discussion topic
		/// GetGroupTopicByID rest?method=flickr.groups.discuss.topics.getInfo
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetGroupTopicByIDReturn> GetGroupTopicByIDAsync(string api_key, string group_id, string topic_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.groups.discuss.topics.getInfo&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&group_id=" + (group_id==null? "" : System.Uri.EscapeDataString(group_id))+"&topic_id=" + (topic_id==null? "" : System.Uri.EscapeDataString(topic_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetGroupTopicByIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of discussion topics in a group.
		/// GetGroupDiscussionsByID rest?method=flickr.groups.discuss.topics.getList
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetGroupDiscussionsByIDReturn> GetGroupDiscussionsByIDAsync(string api_key, string group_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.groups.discuss.topics.getList&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&group_id=" + (group_id==null? "" : System.Uri.EscapeDataString(group_id))+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetGroupDiscussionsByIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get information about a group
		/// GetGroupByID rest?method=flickr.groups.getInfo
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetGroupByIDReturn> GetGroupByIDAsync(string api_key, string group_id, string group_path_alias, string lang, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.groups.getInfo&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&group_id=" + (group_id==null? "" : System.Uri.EscapeDataString(group_id))+"&group_path_alias=" + (group_path_alias==null? "" : System.Uri.EscapeDataString(group_path_alias))+"&lang=" + (lang==null? "" : System.Uri.EscapeDataString(lang));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetGroupByIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns next and previous photos for a photo in a group pool
		/// PublicGetByApi_keyAndPhoto_idAndGroup_id rest?method=flickr.groups.pools.getContext
		/// </summary>
		/// <returns>OK</returns>
		public async Task<PublicGetByApi_keyAndPhoto_idAndGroup_idReturn> PublicGetByApi_keyAndPhoto_idAndGroup_idAsync(string api_key, string photo_id, string group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.groups.pools.getContext&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&photo_id=" + (photo_id==null? "" : System.Uri.EscapeDataString(photo_id))+"&group_id=" + (group_id==null? "" : System.Uri.EscapeDataString(group_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<PublicGetByApi_keyAndPhoto_idAndGroup_idReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of pool photos for a given group
		/// GetGroupPhotosByID rest?method=flickr.groups.pools.getPhotos
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetGroupPhotosByIDReturn> GetGroupPhotosByIDAsync(string api_key, string group_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.groups.pools.getPhotos&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&group_id=" + (group_id==null? "" : System.Uri.EscapeDataString(group_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetGroupPhotosByIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a person
		/// GetPersonByID rest?method=flickr.people.getInfo
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetPersonByIDReturn> GetPersonByIDAsync(string api_key, string user_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.people.getInfo&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&user_id=" + (user_id==null? "" : System.Uri.EscapeDataString(user_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetPersonByIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return photos from the given user's photostream
		/// GetMediaByPersonID rest?method=flickr.people.getPhotos
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetMediaByPersonIDReturn> GetMediaByPersonIDAsync(string api_key, string user_id, double safe_search, double min_upload_date, double max_upload_date, double min_taken_date, double max_taken_date, double content_type, double privacy_filter, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.people.getPhotos&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&user_id=" + (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"&safe_search="+safe_search+"&min_upload_date="+min_upload_date+"&max_upload_date="+max_upload_date+"&min_taken_date="+min_taken_date+"&max_taken_date="+max_taken_date+"&content_type="+content_type+"&privacy_filter="+privacy_filter+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetMediaByPersonIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns next and previous photos in a photo list
		/// GetPhotolistContextByID rest?method=flickr.photolist.getContext
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetPhotolistContextByIDReturn> GetPhotolistContextByIDAsync(string api_key, string photo_id, string photolist_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.photolist.getContext&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&photo_id=" + (photo_id==null? "" : System.Uri.EscapeDataString(photo_id))+"&photolist_id=" + (photolist_id==null? "" : System.Uri.EscapeDataString(photolist_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetPhotolistContextByIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns next and previous photos for a photo in a photostream
		/// GetPhotostreamContextByID rest?method=flickr.photos.getContext
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetPhotostreamContextByIDReturn> GetPhotostreamContextByIDAsync(string api_key, string photo_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.photos.getContext&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&photo_id=" + (photo_id==null? "" : System.Uri.EscapeDataString(photo_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetPhotostreamContextByIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves a list of EXIF/TIFF/GPS tags for a given photo. The calling user must have permission to view the photo.
		/// GetPhotoExifByID rest?method=flickr.photos.getExif
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetPhotoExifByIDReturn> GetPhotoExifByIDAsync(string api_key, string photo_id, string secret, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.photos.getExif&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&photo_id=" + (photo_id==null? "" : System.Uri.EscapeDataString(photo_id))+"&secret=" + (secret==null? "" : System.Uri.EscapeDataString(secret));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetPhotoExifByIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a photo
		/// GetPhotoByID rest?method=flickr.photos.getInfo
		/// </summary>
		/// <returns>a photo</returns>
		public async Task<GetPhotoByIDReturn> GetPhotoByIDAsync(string api_key, string photo_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.photos.getInfo&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&photo_id=" + (photo_id==null? "" : System.Uri.EscapeDataString(photo_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetPhotoByIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns photo sizes
		/// GetPhotoSizesByID rest?method=flickr.photos.getSizes
		/// </summary>
		/// <returns>Photo sizes</returns>
		public async Task<GetPhotoSizesByIDReturn> GetPhotoSizesByIDAsync(string api_key, string photo_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.photos.getSizes&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&photo_id=" + (photo_id==null? "" : System.Uri.EscapeDataString(photo_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetPhotoSizesByIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Fetches a list of available photo licenses for Flickr
		/// GetLicenseByID rest?method=flickr.photos.licenses.getInfo
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetLicenseByIDReturn> GetLicenseByIDAsync(string api_key, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.photos.licenses.getInfo&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetLicenseByIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Return a list of photos matching some criteria.
		/// GetMediaBySearch rest?method=flickr.photos.search
		/// </summary>
		/// <param name="text">A free text search. Photos who's title, description or tags contain the text will be returned. You can exclude results that match a term by prepending it with a - character.</param>
		/// <param name="tags">A comma-delimited list of tags. Photos with one or more of the tags listed will be returned. You can exclude results that match a term by prepending it with a - character.</param>
		/// <param name="user_id">The NSID of the user who's photo to search. If this parameter isn't passed then everybody's public photos will be searched. A value of "me" will search against the calling user's photos for authenticated calls.</param>
		/// <param name="min_upload_date">Minimum upload date. Photos with an upload date greater than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime.</param>
		/// <param name="max_upload_date">Maximum upload date. Photos with an upload date less than or equal to this value will be returned. The date can be in the form of a unix timestamp or mysql datetime.</param>
		/// <param name="min_taken_date">Minimum taken date. Photos with an taken date greater than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp.</param>
		/// <param name="max_taken_date">Maximum taken date. Photos with an taken date less than or equal to this value will be returned. The date can be in the form of a mysql datetime or unix timestamp.</param>
		/// <param name="license">The license id for photos (for possible values see the flickr.photos.licenses.getInfo method). Multiple licenses may be comma-separated.</param>
		/// <param name="sort">The order in which to sort returned photos. Deafults to date-posted-desc (unless you are doing a radial geo query, in which case the default sorting is by ascending distance from the point specified). The possible values are:
		///  date-posted-asc,
		///  date-posted-desc,
		///  date-taken-asc,
		///  date-taken-desc,
		///  interestingness-desc,
		///  interestingness-asc, and
		///  relevance.
		///</param>
		/// <param name="privacy_filter">Return photos only matching a certain privacy level. This only applies when making an authenticated call to view photos you own. Valid values are:,
		///  1: public photos,
		///  2: private photos visible to friends,
		///  3: private photos visible to family,
		///  4: private photos visible to friends & family,
		///  5: completely private photos
		///</param>
		/// <param name="bbox">A comma-delimited list of 4 values defining the Bounding Box of the area that will be searched.</param>
		/// <param name="accuracy">Recorded accuracy level of the location information. Current range is 1-16:
		///  World level is 1
		///  Country is ~3
		///  Region is ~6
		///  City is ~11
		///  Street is ~16
		///</param>
		/// <param name="safe_search">Safe search setting:
		///  1: for safe,
		///  2: for moderate,
		///  3: for restricted
		///</param>
		/// <param name="content_type">Content Type setting:
		///  1: photos only.
		///  2: screenshots only.
		///  3: 'other' only.
		///  4: photos and screenshots.
		///  5: screenshots and 'other'.
		///  6: photos and 'other'.
		///  7: photos, screenshots, and 'other' (all).
		///</param>
		/// <param name="machine_tags">Aside from passing in a fully formed machine tag, there is a special syntax for searching on specific properties : Find photos using the 'dc' namespace : "machine_tags" => "dc:" Find photos with a title in the 'dc' namespace : "machine_tags" => "dc:title=" Find photos titled "mr. camera" in the 'dc' namespace : "machine_tags" => "dc:title=\"mr. camera\" Find photos whose value is "mr. camera" : "machine_tags" => "*:*=\"mr. camera\"" Find photos that have a title, in any namespace : "machine_tags" => "*:title=" Find photos that have a title, in any namespace, whose value is "mr. camera" : "machine_tags" => "*:title=\"mr. camera\"" Find photos, in the 'dc' namespace whose value is "mr. camera" : "machine_tags" => "dc:*=\"mr. camera\"" Multiple machine tags may be queried by passing a comma-separated list. The number of machine tags you can pass in a single query depends on the tag mode (AND or OR) that you are querying with. "AND" queries are limited to (16) machine tags. "OR" queries are limited to (8).
		///</param>
		/// <param name="machine_tag_mode">Either 'any' for an OR combination of tags, or 'all' for an AND combination. Defaults to 'any' if not specified.</param>
		/// <param name="group_id">The id of a group who's pool to search. If specified, only matching photos posted to the group's pool will be returned.</param>
		/// <param name="contacts">Search your contacts. Either 'all' or 'ff' for just friends and family. (Experimental)</param>
		/// <param name="woe_id">A 32-bit identifier that uniquely represents spatial entities. (not used if bbox argument is present).</param>
		/// <param name="place_id">A Flickr place id. (not used if bbox argument is present). Geo queries require some sort of limiting agent in order to prevent the database from crying. This is basically like the check against "parameterless searches" for queries without a geo component. A tag, for instance, is considered a limiting agent as are user defined min_date_taken and min_date_upload parameters — If no limiting factor is passed we return only photos added in the last 12 hours (though we may extend the limit in the future).
		///</param>
		/// <param name="media">Filter results by media type. Possible values are all (default), photos or videos</param>
		/// <param name="has_geo">Any photo that has been geotagged, or if the value is "0" any photo that has not been geotagged. Geo queries require some sort of limiting agent in order to prevent the database from crying. This is basically like the check against "parameterless searches" for queries without a geo component. A tag, for instance, is considered a limiting agent as are user defined min_date_taken and min_date_upload parameters — If no limiting factor is passed we return only photos added in the last 12 hours (though we may extend the limit in the future).
		///</param>
		/// <param name="geo_context">Geo context is a numeric value representing the photo's geotagginess beyond latitude and longitude. For example, you may wish to search for photos that were taken "indoors" or "outdoors". The current list of context IDs is: 0, not defined. 1, indoors. 2, outdoors. Geo queries require some sort of limiting agent in order to prevent the database from crying. This is basically like the check against "parameterless searches" for queries without a geo component. A tag, for instance, is considered a limiting agent as are user defined min_date_taken and min_date_upload parameters — If no limiting factor is passed we return only photos added in the last 12 hours (though we may extend the limit in the future).
		///</param>
		/// <param name="lat">A valid latitude, in decimal format, for doing radial geo queries. Geo queries require some sort of limiting agent in order to prevent the database from crying. This is basically like the check against "parameterless searches" for queries without a geo component. A tag, for instance, is considered a limiting agent as are user defined min_date_taken and min_date_upload parameters — If no limiting factor is passed we return only photos added in the last 12 hours (though we may extend the limit in the future).
		///</param>
		/// <param name="lon">A valid longitude, in decimal format, for doing radial geo queries. Geo queries require some sort of limiting agent in order to prevent the database from crying. This is basically like the check against "parameterless searches" for queries without a geo component. A tag, for instance, is considered a limiting agent as are user defined min_date_taken and min_date_upload parameters — If no limiting factor is passed we return only photos added in the last 12 hours (though we may extend the limit in the future).
		///</param>
		/// <param name="radius">A valid radius used for geo queries, greater than zero and less than 20 miles (or 32 kilometers), for use with point-based geo queries. The default value is 5 (km).</param>
		/// <param name="radius_units">The unit of measure when doing radial geo queries. Valid options are "mi" (miles) and "km" (kilometers). The default is "km".</param>
		/// <param name="is_commons">Limit the scope of the search to only photos that are part of the Flickr Commons project. Default is false.</param>
		/// <param name="in_gallery">Limit the scope of the search to only photos that are in a gallery? Default is false, search all photos.</param>
		/// <param name="is_getty">Limit the scope of the search to only photos that are for sale on Getty. Default is false.</param>
		/// <param name="per_page">Number of photos to return per page. If this argument is omitted, it defaults to 100. The maximum allowed value is 500.</param>
		/// <param name="page">The page of results to return. If this argument is omitted, it defaults to 1.</param>
		/// <returns>OK</returns>
		public async Task<GetMediaBySearchReturn> GetMediaBySearchAsync(
					string api_key, 
					string text, 
					string tags, 
					string user_id, 
					string min_upload_date, 
					string max_upload_date, 
					string min_taken_date, 
					string max_taken_date, 
					string license, 
					string sort, 
					double privacy_filter, 
					string bbox, 
					string accuracy, 
					double safe_search, 
					double content_type, 
					string machine_tags, 
					string machine_tag_mode, 
					string group_id, 
					string contacts, 
					string woe_id, 
					string place_id, 
					string media, 
					string has_geo, 
					string geo_context, 
					string lat, 
					string lon, 
					double radius, 
					string radius_units, 
					bool is_commons, 
					bool in_gallery, 
					bool is_getty, 
					double per_page, 
					double page, 
					Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.photos.search&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&text=" + (text==null? "" : System.Uri.EscapeDataString(text))+"&tags=" + (tags==null? "" : System.Uri.EscapeDataString(tags))+"&user_id=" + (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"&min_upload_date=" + (min_upload_date==null? "" : System.Uri.EscapeDataString(min_upload_date))+"&max_upload_date=" + (max_upload_date==null? "" : System.Uri.EscapeDataString(max_upload_date))+"&min_taken_date=" + (min_taken_date==null? "" : System.Uri.EscapeDataString(min_taken_date))+"&max_taken_date=" + (max_taken_date==null? "" : System.Uri.EscapeDataString(max_taken_date))+"&license=" + (license==null? "" : System.Uri.EscapeDataString(license))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&privacy_filter="+privacy_filter+"&bbox=" + (bbox==null? "" : System.Uri.EscapeDataString(bbox))+"&accuracy=" + (accuracy==null? "" : System.Uri.EscapeDataString(accuracy))+"&safe_search="+safe_search+"&content_type="+content_type+"&machine_tags=" + (machine_tags==null? "" : System.Uri.EscapeDataString(machine_tags))+"&machine_tag_mode=" + (machine_tag_mode==null? "" : System.Uri.EscapeDataString(machine_tag_mode))+"&group_id=" + (group_id==null? "" : System.Uri.EscapeDataString(group_id))+"&contacts=" + (contacts==null? "" : System.Uri.EscapeDataString(contacts))+"&woe_id=" + (woe_id==null? "" : System.Uri.EscapeDataString(woe_id))+"&place_id=" + (place_id==null? "" : System.Uri.EscapeDataString(place_id))+"&media=" + (media==null? "" : System.Uri.EscapeDataString(media))+"&has_geo=" + (has_geo==null? "" : System.Uri.EscapeDataString(has_geo))+"&geo_context=" + (geo_context==null? "" : System.Uri.EscapeDataString(geo_context))+"&lat=" + (lat==null? "" : System.Uri.EscapeDataString(lat))+"&lon=" + (lon==null? "" : System.Uri.EscapeDataString(lon))+"&radius="+radius+"&radius_units=" + (radius_units==null? "" : System.Uri.EscapeDataString(radius_units))+"&is_commons="+is_commons+"&in_gallery="+in_gallery+"&is_getty="+is_getty+"&per_page="+per_page+"&page="+page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetMediaBySearchReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns next and previous photos for a photo in a set
		/// GetAlbumContextByID rest?method=flickr.photosets.getContext
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetAlbumContextByIDReturn> GetAlbumContextByIDAsync(string api_key, string photo_id, string photoset_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.photosets.getContext&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&photo_id=" + (photo_id==null? "" : System.Uri.EscapeDataString(photo_id))+"&photoset_id=" + (photoset_id==null? "" : System.Uri.EscapeDataString(photoset_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetAlbumContextByIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns the albums belonging to the specified user
		/// GetAlbumsByPersonID rest?method=flickr.photosets.getList
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetAlbumsByPersonIDReturn> GetAlbumsByPersonIDAsync(string api_key, string user_id, double page, double per_page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.photosets.getList&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&user_id=" + (user_id==null? "" : System.Uri.EscapeDataString(user_id))+"&page="+page+"&per_page="+per_page;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetAlbumsByPersonIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Returns a list of photos in an album.
		/// GetAlbumByID rest?method=flickr.photosets.getPhotos
		/// </summary>
		/// <returns>OK</returns>
		public async Task<GetAlbumByIDReturn> GetAlbumByIDAsync(string api_key, string photoset_id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.photosets.getPhotos&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&photoset_id=" + (photoset_id==null? "" : System.Uri.EscapeDataString(photoset_id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GetAlbumByIDReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Echos the input parameters back in the response
		/// Echo rest?method=flickr.test.echo
		/// </summary>
		/// <returns>OK</returns>
		public async Task<EchoReturn> EchoAsync(string api_key, string echo, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "rest?method=flickr.test.echo&api_key=" + (api_key==null? "" : System.Uri.EscapeDataString(api_key))+"&echo=" + (echo==null? "" : System.Uri.EscapeDataString(echo));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EchoReturn>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public class GetFavoritesContextByIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public GetFavoritesContextByIDReturnCount Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextphoto")]
		public ContextPhoto Nextphoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prevphoto")]
		public ContextPhoto Prevphoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stat")]
		public string Stat { get; set; }
	}
	
	public class GetFavoritesContextByIDReturnCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class GetFavoritesByPersonIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Double> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Double> Pages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="perpage")]
		public System.Nullable<System.Double> Perpage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="photos")]
		public Photo[] Photos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	public class GetGalleryPhotosByIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="photos")]
		public Photo[] Photos { get; set; }
	}
	
	public class GetGroupTopicRepliesByIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="reply")]
		public TopicReply Reply { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stat")]
		public string Stat { get; set; }
	}
	
	public class GetGroupTopicByIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="stat")]
		public string Stat { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topic")]
		public Topic Topic { get; set; }
	}
	
	public class GetGroupDiscussionsByIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="iconfarm")]
		public System.Nullable<System.Double> Iconfarm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="iconserver")]
		public System.Nullable<System.Double> Iconserver { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="ispoolmoderated")]
		public System.Nullable<System.Boolean> Ispoolmoderated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="lang")]
		public string Lang { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="members")]
		public System.Nullable<System.Double> Members { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Double> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Double> Pages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="per_page")]
		public System.Nullable<System.Double> Per_page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public System.Nullable<System.Double> Privacy { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="topics")]
		public Topic[] Topics { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	public class GetGroupByIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="group")]
		public Group Group { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stat")]
		public string Stat { get; set; }
	}
	
	public class PublicGetByApi_keyAndPhoto_idAndGroup_idReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public PublicGetByApi_keyAndPhoto_idAndGroup_idReturnCount Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextphoto")]
		public ContextPhoto Nextphoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prevphoto")]
		public ContextPhoto Prevphoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stat")]
		public string Stat { get; set; }
	}
	
	public class PublicGetByApi_keyAndPhoto_idAndGroup_idReturnCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class GetGroupPhotosByIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="photos")]
		public Photo[] Photos { get; set; }
	}
	
	public class GetPersonByIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="person")]
		public Person Person { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stat")]
		public string Stat { get; set; }
	}
	
	public class GetMediaByPersonIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Double> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Double> Pages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="perpage")]
		public System.Nullable<System.Double> Perpage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="photos")]
		public Photo[] Photos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	public class GetPhotolistContextByIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public GetPhotolistContextByIDReturnCount Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextphoto")]
		public ContextPhoto Nextphoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prevphoto")]
		public ContextPhoto Prevphoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stat")]
		public string Stat { get; set; }
	}
	
	public class GetPhotolistContextByIDReturnCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class GetPhotostreamContextByIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public GetPhotostreamContextByIDReturnCount Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextphoto")]
		public ContextPhoto Nextphoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prevphoto")]
		public ContextPhoto Prevphoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stat")]
		public string Stat { get; set; }
	}
	
	public class GetPhotostreamContextByIDReturnCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class GetPhotoExifByIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="photo")]
		public GetPhotoExifByIDReturnPhoto Photo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stat")]
		public string Stat { get; set; }
	}
	
	public class GetPhotoExifByIDReturnPhoto
	{
		
		[System.Runtime.Serialization.DataMember(Name="camera")]
		public string Camera { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="exif")]
		public GetPhotoExifByIDReturnPhotoExif[] GetPhotoExifByIDReturnPhotoExif { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="farm")]
		public string Farm { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="secret")]
		public string Secret { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="server")]
		public string Server { get; set; }
	}
	
	public class GetPhotoExifByIDReturnPhotoExif
	{
		
		[System.Runtime.Serialization.DataMember(Name="label")]
		public string Label { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="raw")]
		public GetPhotoExifByIDReturnPhotoExifRaw Raw { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagspace")]
		public string Tagspace { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="tagspaceid")]
		public string Tagspaceid { get; set; }
	}
	
	public class GetPhotoExifByIDReturnPhotoExifRaw
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class GetPhotoByIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="photo")]
		public Photo Photo { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stat")]
		public string Stat { get; set; }
	}
	
	public class GetPhotoSizesByIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="sizes")]
		public GetPhotoSizesByIDReturnSizes Sizes { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stat")]
		public string Stat { get; set; }
	}
	
	public class GetPhotoSizesByIDReturnSizes
	{
		
		[System.Runtime.Serialization.DataMember(Name="canblog")]
		public System.Nullable<System.Double> Canblog { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="candownload")]
		public System.Nullable<System.Double> Candownload { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="canprint")]
		public System.Nullable<System.Double> Canprint { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="sizes")]
		public Size[] Sizes { get; set; }
	}
	
	public class GetLicenseByIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="licenses")]
		public GetLicenseByIDReturnLicenses Licenses { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stat")]
		public string Stat { get; set; }
	}
	
	public class GetLicenseByIDReturnLicenses
	{
		
		[System.Runtime.Serialization.DataMember(Name="license")]
		public GetLicenseByIDReturnLicensesLicense[] GetLicenseByIDReturnLicensesLicense { get; set; }
	}
	
	public class GetLicenseByIDReturnLicensesLicense
	{
		
		[System.Runtime.Serialization.DataMember(Name="id")]
		public System.Nullable<System.Int32> Id { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public class GetMediaBySearchReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Double> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Double> Pages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="perpage")]
		public System.Nullable<System.Double> Perpage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="photos")]
		public Photo[] Photos { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	public class GetAlbumContextByIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="count")]
		public GetAlbumContextByIDReturnCount Count { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="nextphoto")]
		public ContextPhoto Nextphoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="prevphoto")]
		public ContextPhoto Prevphoto { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="stat")]
		public string Stat { get; set; }
	}
	
	public class GetAlbumContextByIDReturnCount
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
	
	public class GetAlbumsByPersonIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Double> Page { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="pages")]
		public System.Nullable<System.Double> Pages { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="perpage")]
		public System.Nullable<System.Double> Perpage { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="photosets")]
		public Album[] Photosets { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="total")]
		public System.Nullable<System.Double> Total { get; set; }
	}
	
	public class GetAlbumByIDReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="photoset")]
		public Photo[] Photoset { get; set; }
	}
	
	public class EchoReturn
	{
		
		[System.Runtime.Serialization.DataMember(Name="echo")]
		public EchoReturnEcho Echo { get; set; }
	}
	
	public class EchoReturnEcho
	{
		
		[System.Runtime.Serialization.DataMember()]
		public string _content { get; set; }
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
