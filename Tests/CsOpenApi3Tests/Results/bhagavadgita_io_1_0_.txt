//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChapterSchema
	{
		
		[System.Runtime.Serialization.DataMember(Name="chapter_number")]
		public System.Nullable<System.Int32> Chapter_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="chapter_summary")]
		public string Chapter_summary { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name_meaning")]
		public string Name_meaning { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name_translation")]
		public string Name_translation { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="name_transliterated")]
		public string Name_transliterated { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verses_count")]
		public System.Nullable<System.Int32> Verses_count { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerseSchema
	{
		
		[System.Runtime.Serialization.DataMember(Name="meaning")]
		public string Meaning { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="transliteration")]
		public string Transliteration { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="verse_number")]
		public string Verse_number { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="word_meanings")]
		public string Word_meanings { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get all the 18 Chapters of the Bhagavad Gita.
		/// Get a list of all the 18 Chapters of the Bhagavad Gita.<br/>
		/// ChapterGetByAccess_tokenAndLanguage api/v1/chapters
		/// </summary>
		/// <param name="access_token">Your app's access token.</param>
		/// <param name="language">Language to query. Leave blank for english.</param>
		/// <returns>Success: Everything worked as expected.</returns>
		public async Task<ChapterSchema> ChapterGetByAccess_tokenAndLanguageAsync(string access_token, ChapterGetByAccess_tokenAndLanguageLanguage language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/chapters?access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token))+"&language=" + language;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChapterSchema>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a specific chapter from the Bhagavad Gita.
		/// Get information about a specific chapter from the Bhagavad Gita.<br/>
		/// ChapterGetByAccess_tokenAndChapter_numberAndLanguage api/v1/chapters/{chapter_number}
		/// </summary>
		/// <param name="access_token">Your app's access token.</param>
		/// <param name="chapter_number">Which Chapter Number to filter?</param>
		/// <param name="language">Language to query. Leave blank for english.</param>
		/// <returns>Success: Everything worked as expected.</returns>
		public async Task<ChapterSchema> ChapterGetByAccess_tokenAndChapter_numberAndLanguageAsync(string access_token, ChapterGetByAccess_tokenAndChapter_numberAndLanguageChapter_number chapter_number, ChapterGetByAccess_tokenAndLanguageLanguage language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/chapters/"+chapter_number+"?access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token))+"&language=" + language;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ChapterSchema>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the Verses from a Chapter.
		/// Get a list of all Verses from a particular Chapter.<br/>
		/// VerseGetByAccess_tokenAndChapter_numberAndLanguage api/v1/chapters/{chapter_number}/verses
		/// </summary>
		/// <param name="access_token">Your app's access token.</param>
		/// <param name="chapter_number">Which Chapter Number to filter?</param>
		/// <param name="language">Language to query. Leave blank for english.</param>
		/// <returns>Success: Everything worked as expected.</returns>
		public async Task<VerseSchema> VerseGetByAccess_tokenAndChapter_numberAndLanguageAsync(string access_token, VerseGetByAccess_tokenAndChapter_numberAndLanguageChapter_number chapter_number, ChapterGetByAccess_tokenAndLanguageLanguage language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/chapters/"+chapter_number+"/verses?access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token))+"&language=" + language;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VerseSchema>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a particular verse from a chapter.
		/// Get a specific verse from a specific chapter.<br/>
		/// VerseGetByAccess_tokenAndChapter_numberAndVerse_numberAndLanguage api/v1/chapters/{chapter_number}/verses/{verse_number}
		/// </summary>
		/// <param name="access_token">Your app's access token.</param>
		/// <param name="chapter_number">Which Chapter Number to filter?</param>
		/// <param name="verse_number">Which Verse Number to filter?</param>
		/// <param name="language">Language to query. Leave blank for english.</param>
		/// <returns>Success: Everything worked as expected.</returns>
		public async Task<VerseSchema> VerseGetByAccess_tokenAndChapter_numberAndVerse_numberAndLanguageAsync(string access_token, VerseGetByAccess_tokenAndChapter_numberAndVerse_numberAndLanguageChapter_number chapter_number, VerseGetByAccess_tokenAndChapter_numberAndVerse_numberAndLanguageVerse_number verse_number, ChapterGetByAccess_tokenAndLanguageLanguage language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/chapters/"+chapter_number+"/verses/"+verse_number+"?access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token))+"&language=" + language;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VerseSchema>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get all the Verses.
		/// Get a list of all Verses.<br/>
		/// VerseGetByAccess_tokenAndLanguage api/v1/verses
		/// </summary>
		/// <param name="access_token">Your app's access token.</param>
		/// <param name="language">Language to query. Leave blank for english.</param>
		/// <returns>Success: Everything worked as expected.</returns>
		public async Task<VerseSchema> VerseGetByAccess_tokenAndLanguageAsync(string access_token, ChapterGetByAccess_tokenAndLanguageLanguage language, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "api/v1/verses?access_token=" + (access_token==null? "" : System.Uri.EscapeDataString(access_token))+"&language=" + language;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<VerseSchema>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum ChapterGetByAccess_tokenAndLanguageLanguage
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		hi = 0,
	}
	
	public enum ChapterGetByAccess_tokenAndChapter_numberAndLanguageChapter_number
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	public enum VerseGetByAccess_tokenAndChapter_numberAndLanguageChapter_number
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	public enum VerseGetByAccess_tokenAndChapter_numberAndVerse_numberAndLanguageChapter_number
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_2 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		_3 = 3,
	}
	
	public enum VerseGetByAccess_tokenAndChapter_numberAndVerse_numberAndLanguageVerse_number
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="1")]
		_1 = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="2")]
		_2 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="3")]
		_3 = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
