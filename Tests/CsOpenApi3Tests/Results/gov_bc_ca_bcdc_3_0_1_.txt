//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Get the activity stream of an organization
		/// Return an organization's activity stream
		/// ActionOrganization_activity_listGetById action/organization_activity_list
		/// </summary>
		/// <param name="id">The id or name of the organization</param>
		/// <returns>List of an organization's activities</returns>
		public async Task ActionOrganization_activity_listGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/organization_activity_list?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the activity stream of an organization, HTML format
		/// Return an organization's activity stream as HTML
		/// ActionOrganization_activity_list_htmlGetById action/organization_activity_list_html
		/// </summary>
		/// <param name="id">The id or name of the organization</param>
		/// <returns>List of an organization's activities in HTML</returns>
		public async Task ActionOrganization_activity_list_htmlGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/organization_activity_list_html?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get names of organizations that match a query string
		/// Return a list of organization names that contain a string
		/// ActionOrganization_autocompleteGetByQAndLimit action/organization_autocomplete
		/// </summary>
		/// <param name="q">The string to search for</param>
		/// <param name="limit">The maximum number of organizations to return (optional)</param>
		/// <returns>List of organizations</returns>
		public async Task ActionOrganization_autocompleteGetByQAndLimitAsync(string q, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/organization_autocomplete?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get number of followers of an organization
		/// Return the number of followers of an organization
		/// ActionOrganization_follower_countGetById action/organization_follower_count
		/// </summary>
		/// <param name="id">The id or name of the organization</param>
		/// <returns>Count of organization followers</returns>
		public async Task ActionOrganization_follower_countGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/organization_follower_count?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get users following an organization
		/// Return a list of users that are following a given organization
		/// ActionOrganization_follower_listGetById action/organization_follower_list
		/// </summary>
		/// <param name="id">The id or name of the organization</param>
		/// <returns>List of organization followers</returns>
		public async Task ActionOrganization_follower_listGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/organization_follower_list?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get names of all organizations
		/// Returns the names of all indexed organizations
		/// ActionOrganization_listGetByOffsetAndLimit action/organization_list
		/// </summary>
		/// <param name="offset">The offset (index) of the first organizations to return</param>
		/// <param name="limit">The number of organizations to be returned per page</param>
		/// <returns>List of organizations</returns>
		public async Task ActionOrganization_listGetByOffsetAndLimitAsync(int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/organization_list?offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get organizations that a user has a given permission for
		/// Return the organizations that the user has a given permission for
		/// ActionOrganization_list_for_userGetByPermission action/organization_list_for_user
		/// </summary>
		/// <param name="permission">The permission the user has against the returned organization</param>
		/// <returns>List of organizations for given permission</returns>
		public async Task ActionOrganization_list_for_userGetByPermissionAsync(string permission, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/organization_list_for_user?permission=" + (permission==null? "" : System.Uri.EscapeDataString(permission));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get organization revisions
		/// Return an organization's revisions
		/// ActionOrganization_revision_listGetById action/organization_revision_list
		/// </summary>
		/// <param name="id">The name or id of the organization</param>
		/// <returns>List of an organization's revisions</returns>
		public async Task ActionOrganization_revision_listGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/organization_revision_list?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get details of a specific organization
		/// Return the details of an organization
		/// ActionOrganization_showGetByIdAndInclude_datasets action/organization_show
		/// </summary>
		/// <param name="id">The id or name of the organization</param>
		/// <param name="include_datasets">include a list of the organization's datasets</param>
		/// <returns>List organization details</returns>
		public async Task ActionOrganization_showGetByIdAndInclude_datasetsAsync(string id, bool include_datasets, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/organization_show?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&include_datasets="+include_datasets;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the activity stream of a package (dataset)
		/// Returns a package's activity stream
		/// ActionPackage_activity_listGetByIdAndOffsetAndLimit action/package_activity_list
		/// </summary>
		/// <param name="id">The id or name of the package</param>
		/// <param name="offset">Where to start getting activity items from</param>
		/// <param name="limit">The maximum number of activities to return</param>
		/// <returns>List of activities</returns>
		public async Task ActionPackage_activity_listGetByIdAndOffsetAndLimitAsync(string id, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/package_activity_list?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the activity stream of a package (dataset), HTML format
		/// The activity stream is rendered as a snippet of HTML meant to be included in an HTML pag, i.e it doesn't have any header or footer.
		/// ActionPackage_activity_list_htmlGetByIdAndOffsetAndLimit action/package_activity_list_html
		/// </summary>
		/// <param name="id">The id or name of the package</param>
		/// <param name="offset">Where to start getting activity items from</param>
		/// <param name="limit">The maximum number of activities to return</param>
		/// <returns>List of activities rendered as HTML snippet</returns>
		public async Task ActionPackage_activity_list_htmlGetByIdAndOffsetAndLimitAsync(string id, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/package_activity_list_html?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find packages (datasets) matching a query
		/// Return a list of datasets that match a string
		/// ActionPackage_autocompleteGetByQAndLimit action/package_autocomplete
		/// </summary>
		/// <param name="q">The string to query</param>
		/// <param name="limit">The maximum number of resource formats to return</param>
		/// <returns>List of datasets that match a string</returns>
		public async Task ActionPackage_autocompleteGetByQAndLimitAsync(string q, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/package_autocomplete?q=" + (q==null? "" : System.Uri.EscapeDataString(q))+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of all packages (datasets)
		/// Returns the names of all indexed packages (datasets)
		/// ActionPackage_listGetByOffsetAndLimit action/package_list
		/// </summary>
		/// <param name="offset">The offset (index) of the first package to return</param>
		/// <param name="limit">The number of packages to be returned per page</param>
		/// <returns>List of packages</returns>
		public async Task ActionPackage_listGetByOffsetAndLimitAsync(int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/package_list?offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get package (dataset) relationships
		/// Return a dataset's relationships
		/// ActionPackage_relationships_listGetByIdAndId2AndRel action/package_relationships_list
		/// </summary>
		/// <param name="id">The id or name of the first package</param>
		/// <param name="id2">The id or name of the second package</param>
		/// <param name="rel">relationship as string</param>
		/// <returns>List of dataset relationships</returns>
		public async Task ActionPackage_relationships_listGetByIdAndId2AndRelAsync(string id, string id2, string rel, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/package_relationships_list?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&id2=" + (id2==null? "" : System.Uri.EscapeDataString(id2))+"&rel=" + (rel==null? "" : System.Uri.EscapeDataString(rel));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get list of revisions for a package (dataset)
		/// Return a dataset's revision as a list of dictionaries
		/// ActionPackage_revision_listGetById action/package_revision_list
		/// </summary>
		/// <param name="id">The id or name of the dataset</param>
		/// <returns>List of dataset revisions</returns>
		public async Task ActionPackage_revision_listGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/package_revision_list?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find packages (datasets) matching query terms
		/// Searches for packages (datasets) matching the specified query terms
		/// ActionPackage_searchGetByQ action/package_search
		/// </summary>
		/// <param name="q">A query string</param>
		/// <returns>List of packages</returns>
		public async Task ActionPackage_searchGetByQAsync(string q, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/package_search?q=" + (q==null? "" : System.Uri.EscapeDataString(q));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get metadata about one specific package (dataset)
		/// Returns metadata about the package (dataset) corresponding to the specified unique name
		/// ActionPackage_showGetById action/package_show
		/// </summary>
		/// <param name="id">The package name</param>
		/// <returns>A package metadata object</returns>
		public async Task ActionPackage_showGetByIdAsync(string id, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/package_show?id=" + (id==null? "" : System.Uri.EscapeDataString(id));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets items related to a package (dataset)
		/// Returns a dataset's related items.
		/// ActionRelated_listGetByIdAndDatasetAndType_filterAndSortAndFeatured action/related_list
		/// </summary>
		/// <param name="id">id or name of the dataset (optional)</param>
		/// <param name="dataset">Dataset dictionary of the dataset (optional)</param>
		/// <param name="type_filter">The type of related item to show (optional)</param>
		/// <param name="sort">The order to sort the related items in</param>
		/// <param name="featured">whether or not to restrict the results to only featured items</param>
		/// <returns>Search for related items</returns>
		public async Task ActionRelated_listGetByIdAndDatasetAndType_filterAndSortAndFeaturedAsync(string id, string dataset, string type_filter, string sort, string featured, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/related_list?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&dataset=" + (dataset==null? "" : System.Uri.EscapeDataString(dataset))+"&type_filter=" + (type_filter==null? "" : System.Uri.EscapeDataString(type_filter))+"&sort=" + (sort==null? "" : System.Uri.EscapeDataString(sort))+"&featured=" + (featured==null? "" : System.Uri.EscapeDataString(featured));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Find resources
		/// Returns a dictionary with two fields ``count`` and ``results``.             The ``count`` field contains the total number of Resources                found without the limit or query parameters having an effect.             The ``results`` field is a list of dictized Resource objects.             The query parameter is a required field. It is a string in                the form ``{field}:{term}`` or a list of strings, each of the             same form. Within each string, ``{field}`` is a field or extra             field on the Resource domain object.
		/// ActionResource_searchGetByQueryAndFieldsAndOrder_byAndOffsetAndLimit action/resource_search
		/// </summary>
		/// <param name="query">The search criteria string or list of strings of the form ``{field}:{term1}``</param>
		/// <param name="fields">Depreciated</param>
		/// <param name="order_by">A field on the resource model that orders the results</param>
		/// <param name="offset">Apply an offset to the query</param>
		/// <param name="limit">Apply a limit to the query</param>
		/// <returns>Search for resources</returns>
		public async Task ActionResource_searchGetByQueryAndFieldsAndOrder_byAndOffsetAndLimitAsync(string query, string fields, string order_by, int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/resource_search?query=" + (query==null? "" : System.Uri.EscapeDataString(query))+"&fields=" + (fields==null? "" : System.Uri.EscapeDataString(fields))+"&order_by=" + (order_by==null? "" : System.Uri.EscapeDataString(order_by))+"&offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get metadata for a specific resource
		/// Return the metadata of a resource
		/// ActionResource_showGetByIdAndInclude_tracking action/resource_show
		/// </summary>
		/// <param name="id">The id of the resource</param>
		/// <param name="include_tracking">Add tracking information to dataset</param>
		/// <returns>Return metadata of a resource</returns>
		public async Task ActionResource_showGetByIdAndInclude_trackingAsync(string id, bool include_tracking, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/resource_show?id=" + (id==null? "" : System.Uri.EscapeDataString(id))+"&include_tracking="+include_tracking;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get the site status
		/// Returns the site status
		/// ActionStatus_showGet action/status_show
		/// </summary>
		/// <returns>Returns the site status, version, installed extensions</returns>
		public async Task ActionStatus_showGetAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/status_show";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Get a list of tags
		/// Returns the names of all indexed tags
		/// ActionTag_listGetByOffsetAndLimit action/tag_list
		/// </summary>
		/// <param name="offset">The offset (index) of the first tag to return</param>
		/// <param name="limit">The number of tags to be returned per page</param>
		/// <returns>List of tags</returns>
		public async Task ActionTag_listGetByOffsetAndLimitAsync(int offset, int limit, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "action/tag_list?offset="+offset+"&limit="+limit;
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
