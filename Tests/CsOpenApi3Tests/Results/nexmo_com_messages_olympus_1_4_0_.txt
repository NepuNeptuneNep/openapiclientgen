//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Audio : BaseMessageType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="audio")]
		public AudioAudio1 Audio1 { get; set; }
		
		/// <summary>
		/// The type of message to send. You must provide `audio` in this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message_type")]
		public System.Nullable<AudioMessage_type> Message_type { get; set; }
	}
	
	public class AudioAudio1
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum AudioMessage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		audio = 0,
	}
	
	/// <summary>
	/// This is only present for the Inbound Message where the user is quoting another message, or for a `product` message where the user has selected the 'Message Business' 
	///option. It provides information about the quoted message and/or the product message being responded to. 
	///
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Context
	{
		
		/// <summary>
		/// The phone number of the **original sender** of the message being quoted in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Not present in a `context` object which is the result of a user selecting 'Message Business' in a `product` message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_from")]
		public string Message_from { get; set; }
		
		/// <summary>
		/// The UUID of the message being quoted. Not present in a `context` object which is the result of a user selecting 'Message Business' in a `product` message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_uuid")]
		public string Message_uuid { get; set; }
		
		/// <summary>
		/// An object containing details of a product from a `product` message being quoted or replied to using the 'Message Business' option.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whatsapp_referred_product")]
		public ContextWhatsapp_referred_product Whatsapp_referred_product { get; set; }
	}
	
	public class ContextWhatsapp_referred_product
	{
		
		/// <summary>
		/// The ID of the catalog associated with the product from the `product` message being quoted or replied to using the 'Message Business' option.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="catalog_id")]
		public string Catalog_id { get; set; }
		
		/// <summary>
		/// The ID of the product from the `product` message being quoted or replied to using the 'Message Business' option.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="product_retailer_id")]
		public string Product_retailer_id { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Custom : BaseMessageType
	{
		
		/// <summary>
		/// A custom payload, which is passed directly to WhatsApp for certain features such as templates and interactive messages. The schema of a custom object can vary widely. [Read more about Custom Objects](https://developer.vonage.com/messages/concepts/custom-objects).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="custom")]
		public string Custom1 { get; set; }
		
		/// <summary>
		/// The type of message to send. You must provide `custom` in this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message_type")]
		public System.Nullable<CustomMessage_type> Message_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum CustomMessage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		custom = 0,
	}
	
	/// <summary>
	/// Unsupported channel
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorChannel
	{
		
		/// <summary>
		/// Additional information about the error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Internal Trace ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// Generic error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Link to error / remediation options
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Invalid channel parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorChannelParams
	{
		
		/// <summary>
		/// Additional information about the error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Internal Trace ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invalid_parameters")]
		public ErrorChannelParamsInvalid_parameters[] ErrorChannelParamsInvalid_parameters { get; set; }
		
		/// <summary>
		/// Generic error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Link to error / remediation options
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ErrorChannelParamsInvalid_parameters
	{
		
		/// <summary>
		/// Name of invalid parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Reason of failure
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Invalid client reference
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorClientReference
	{
		
		/// <summary>
		/// Additional information about the error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Internal Trace ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// Generic error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Link to error / remediation options
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorInternal
	{
		
		/// <summary>
		/// Additional information about the error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Internal Trace ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// Generic error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Link to error / remediation options
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Invalid JSON
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorInvalidJson
	{
		
		/// <summary>
		/// Additional information about the error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Internal Trace ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// Generic error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Link to error / remediation options
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Invalid message parameters
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorMessageParams
	{
		
		/// <summary>
		/// Additional information about the error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Internal Trace ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="invalid_parameters")]
		public ErrorMessageParamsInvalid_parameters[] ErrorMessageParamsInvalid_parameters { get; set; }
		
		/// <summary>
		/// Generic error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Link to error / remediation options
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ErrorMessageParamsInvalid_parameters
	{
		
		/// <summary>
		/// Name of invalid parameter
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Reason of failure
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reason")]
		public string Reason { get; set; }
	}
	
	/// <summary>
	/// Invalid message type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorMessageType
	{
		
		/// <summary>
		/// Additional information about the error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Internal Trace ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// Generic error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Link to error / remediation options
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorPaymentRequired
	{
		
		/// <summary>
		/// Additional information about the error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Internal Trace ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// Generic error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Link to error / remediation options
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Invalid recipient
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorRecipient
	{
		
		/// <summary>
		/// Additional information about the error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Internal Trace ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// Generic error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Link to error / remediation options
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Invalid sender
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorSender
	{
		
		/// <summary>
		/// Additional information about the error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Internal Trace ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// Generic error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Link to error / remediation options
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorThrottled
	{
		
		/// <summary>
		/// Additional information about the error
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Internal Trace ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// Generic error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Link to error / remediation options
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Invalid Application Type
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorUnauthorizedInvalidApplication
	{
		
		/// <summary>
		/// Additional information about the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Internal Trace ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// Generic error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Link to error / remediation options
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	/// <summary>
	/// Missing or Invalid Credentials
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ErrorUnauthorizedMissingCredentials
	{
		
		/// <summary>
		/// Additional information about the error
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// Internal Trace ID
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// Generic error message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// Link to error / remediation options
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class File : BaseMessageType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="file")]
		public FileFile1 File1 { get; set; }
		
		/// <summary>
		/// The type of message to send. You must provide `file` in this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message_type")]
		public System.Nullable<FileMessage_type> Message_type { get; set; }
	}
	
	public class FileFile1
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum FileMessage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		file = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Image : BaseMessageType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="image")]
		public ImageImage1 Image1 { get; set; }
		
		/// <summary>
		/// The type of message to send. You must provide `image` in this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message_type")]
		public System.Nullable<ImageMessage_type> Message_type { get; set; }
	}
	
	public class ImageImage1
	{
		
		/// <summary>
		/// The publicly accessible URL of the image attachment. The image file is available for 48 hours after it is created. Supported types are .jpg, .jpeg, and .png
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ImageMessage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		image = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InboundMessengerMessageCommon
	{
		
		/// <summary>
		/// The channel that the message came in on
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public InboundMessengerMessageCommonChannel Channel { get; set; }
		
		/// <summary>
		/// The ID of the message sender
		///
		/// Required
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string From { get; set; }
		
		/// <summary>
		/// The UUID of the message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_uuid")]
		public string Message_uuid { get; set; }
		
		/// <summary>
		/// The datetime of when the event occurred, in `ISO 8601` format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// The ID of the message recipient
		///
		/// Required
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InboundMessengerMessageCommonChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		messenger = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InboundViberMessageCommon
	{
		
		/// <summary>
		/// The channel that the message came in on
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public InboundViberMessageCommonChannel Channel { get; set; }
		
		/// <summary>
		/// Object containing contextual details for the inbound message when it is a response to another message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public InboundViberMessageCommonContext Context { get; set; }
		
		/// <summary>
		/// The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// The UUID of the message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_uuid")]
		public string Message_uuid { get; set; }
		
		/// <summary>
		/// The datetime of when the event occurred, in `ISO 8601` format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// The ID of the message recipient
		///
		/// Required
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum InboundViberMessageCommonChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		viber_service = 0,
	}
	
	public class InboundViberMessageCommonContext
	{
		
		/// <summary>
		/// The ID of the message being replied to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message_uuid")]
		public string Message_uuid { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Location : BaseMessageType
	{
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="location")]
		public LocationLocation1 Location1 { get; set; }
		
		/// <summary>
		/// The type of message to send. You must provide `location` in this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message_type")]
		public System.Nullable<LocationMessage_type> Message_type { get; set; }
	}
	
	public class LocationLocation1
	{
		
		/// <summary>
		/// Address of the location. Only displayed if `name` is present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Latitude of the location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="lat")]
		public double Lat { get; set; }
		
		/// <summary>
		/// Longitude of the location.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="long")]
		public double Long { get; set; }
		
		/// <summary>
		/// Name of the location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum LocationMessage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		location = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Order : BaseMessageType
	{
		
		/// <summary>
		/// The type of message to send.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message_type")]
		public System.Nullable<OrderMessage_type> Message_type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="order")]
		public OrderOrder1 Order1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum OrderMessage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		order = 0,
	}
	
	public class OrderOrder1
	{
		
		/// <summary>
		/// The ID of the catalog containing the products in this order.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="catalog_id")]
		public string Catalog_id { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="product_items")]
		public OrderOrder1Product_items[] OrderOrder1Product_items { get; set; }
	}
	
	public class OrderOrder1Product_items
	{
		
		/// <summary>
		/// The currency code representing the currency for this specific item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public string Currency { get; set; }
		
		/// <summary>
		/// The unit price for this specific item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="item_price")]
		public string Item_price { get; set; }
		
		/// <summary>
		/// The ID of the specific product being ordered.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="product_retailer_id")]
		public string Product_retailer_id { get; set; }
		
		/// <summary>
		/// The quantity ordered for this specific item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public string Quantity { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Profile
	{
		
		/// <summary>
		/// The WhatsApp number's displayed profile name
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Reply : BaseMessageType
	{
		
		/// <summary>
		/// The type of message to send. You must provide `custom` in this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message_type")]
		public System.Nullable<ReplyMessage_type> Message_type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="reply")]
		public ReplyReply1 Reply1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ReplyMessage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		reply = 0,
	}
	
	public class ReplyReply1
	{
		
		/// <summary>
		/// A description that may be added to the interactive options presented (available only on interactive lists).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// An identifier to help identify the exact interactive message response.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The title displayed on the interactive option chosen.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Template : BaseMessageType
	{
		
		/// <summary>
		/// The type of message to send. You must provide `template` in this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message_type")]
		public System.Nullable<TemplateMessage_type> Message_type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="template")]
		public TemplateTemplate1 Template1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TemplateMessage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		template = 0,
	}
	
	public class TemplateTemplate1
	{
		
		/// <summary>
		/// The name of the template. For WhatsApp use your WhatsApp namespace (available via Facebook Business Manager), followed by a colon : and the name of the template to use.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The parameters are an array of strings, with the first string being used for {{1}} in the template, with the second being {{2}} etc. Only required if the template specified by `name` contains parameters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parameters")]
		public string[] Parameters { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Text : BaseMessageType
	{
		
		/// <summary>
		/// The type of message to send. You must provide `text` in this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message_type")]
		public System.Nullable<TextMessage_type> Message_type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum TextMessage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		text = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Unsupported : BaseMessageType
	{
		
		/// <summary>
		/// The type of message to send. Will be `unsupported` if the type of message received from user is not supported by the channel.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_type")]
		public UnsupportedMessage_type Message_type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UnsupportedMessage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		unsupported = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Usage
	{
		
		/// <summary>
		/// The charge currency in ISO 4217 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public System.Nullable<UsageCurrency> Currency { get; set; }
		
		/// <summary>
		/// The charge amount as a stringified number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum UsageCurrency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EUR = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class Video : BaseMessageType
	{
		
		/// <summary>
		/// The type of message to send. You must provide `video` in this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message_type")]
		public System.Nullable<VideoMessage_type> Message_type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="video")]
		public VideoVideo1 Video1 { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VideoMessage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		video = 0,
	}
	
	public class VideoVideo1
	{
		
		/// <summary>
		/// Publicly accessible URL of the video attachment. Supports file types .mp4 and .3gpp
		///> Note: Only supports video codec H.264 and audio codec AAC
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class BaseMessageType
	{
		
		/// <summary>
		/// Client reference of up to 100 characters. The reference will be present in every message status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_ref")]
		public string Client_ref { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelOptionsMessenger
	{
		
		/// <summary>
		/// The channel to send to. You must provide `messenger` in this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public InboundMessengerMessageCommonChannel Channel { get; set; }
		
		/// <summary>
		/// The ID of the message sender
		///
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="messenger")]
		public ChannelOptionsMessengerMessenger Messenger { get; set; }
		
		/// <summary>
		/// The ID of the message recipient
		///
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string To { get; set; }
	}
	
	public class ChannelOptionsMessengerMessenger
	{
		
		/// <summary>
		/// The use of different category tags enables the business to send messages for different use cases. For Facebook Messenger they need to comply with their [Messaging Types policy](https://developers.facebook.com/docs/messenger-platform/send-messages#messaging_types). Vonage maps our `category` to their `messaging_type`. If `message_tag` is used, then an additional `tag` for that type is mandatory. By default Vonage sends the `response` category to Facebook Messenger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<ChannelOptionsMessengerMessengerCategory> Category { get; set; }
		
		/// <summary>
		/// A tag describing the type and relevance of the 1:1 communication between your app and the end user. A full list of available tags is available [here](https://developers.facebook.com/docs/messenger-platform/send-messages/message-tags)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tag")]
		public string Tag { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ChannelOptionsMessengerMessengerCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		response = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		update = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		message_tag = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelOptionsMms
	{
		
		/// <summary>
		/// The channel to send to. You must provide `mms` in this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public System.Nullable<ChannelOptionsMmsChannel> Channel { get; set; }
		
		/// <summary>
		/// The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
		///
		/// Max length: 15
		/// Min length: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ChannelOptionsMmsChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		mms = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelOptionsSms
	{
		
		/// <summary>
		/// The channel to send to. You must provide `sms` in this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public System.Nullable<ChannelOptionsSmsChannel> Channel { get; set; }
		
		/// <summary>
		/// The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
		///
		/// Max length: 15
		/// Min length: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ChannelOptionsSmsChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		sms = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelOptionsViber
	{
		
		/// <summary>
		/// The channel to send to. You must provide `viber_service` in this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public InboundViberMessageCommonChannel Channel { get; set; }
		
		/// <summary>
		/// The ID of the message sender
		///
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string From { get; set; }
		
		/// <summary>
		/// The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
		///
		/// Max length: 15
		/// Min length: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string To { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="viber_service")]
		public ChannelOptionsViberViber_service Viber_service { get; set; }
	}
	
	public class ChannelOptionsViberViber_service
	{
		
		/// <summary>
		/// The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public System.Nullable<ChannelOptionsViberViber_serviceCategory> Category { get; set; }
		
		/// <summary>
		/// Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message.
		/// Minimum: 30
		/// Maximum: 259200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		[System.ComponentModel.DataAnnotations.Range(30, 259200)]
		public System.Nullable<System.Int32> Ttl { get; set; }
		
		/// <summary>
		/// Viber-specific type definition. To use "template", please contact your Vonage Account Manager to setup your templates. To find out more please visit the [product page](https://www.vonage.com/communications-apis/messages/)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ChannelOptionsViberViber_serviceCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		transaction = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		promotion = 1,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelOptionsViberVideo
	{
		
		/// <summary>
		/// The channel to send to. You must provide `viber_service` in this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public InboundViberMessageCommonChannel Channel { get; set; }
		
		/// <summary>
		/// The ID of the message sender
		///
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string From { get; set; }
		
		/// <summary>
		/// The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
		///
		/// Max length: 15
		/// Min length: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string To { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="viber_service")]
		public ChannelOptionsViberVideoViber_service Viber_service { get; set; }
	}
	
	public class ChannelOptionsViberVideoViber_service
	{
		
		/// <summary>
		/// The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ChannelOptionsViberViber_serviceCategory Category { get; set; }
		
		/// <summary>
		/// The duration of the video in seconds.
		/// Minimum: 1
		/// Maximum: 600
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
		
		/// <summary>
		/// The file size of the video in MB.
		/// Minimum: 1
		/// Maximum: 200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="file_size")]
		public string File_size { get; set; }
		
		/// <summary>
		/// Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message.
		/// Minimum: 30
		/// Maximum: 259200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		[System.ComponentModel.DataAnnotations.Range(30, 259200)]
		public System.Nullable<System.Int32> Ttl { get; set; }
		
		/// <summary>
		/// Viber-specific type definition. To use "template", please contact your Vonage Account Manager to setup your templates. To find out more please visit the [product page](https://www.vonage.com/communications-apis/messages/)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelOptionsViberWithButton
	{
		
		/// <summary>
		/// The channel to send to. You must provide `viber_service` in this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public InboundViberMessageCommonChannel Channel { get; set; }
		
		/// <summary>
		/// The ID of the message sender
		///
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string From { get; set; }
		
		/// <summary>
		/// The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
		///
		/// Max length: 15
		/// Min length: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string To { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="viber_service")]
		public ChannelOptionsViberWithButtonViber_service Viber_service { get; set; }
	}
	
	public class ChannelOptionsViberWithButtonViber_service
	{
		
		/// <summary>
		/// Node for Viber action buttons.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="action")]
		public ChannelOptionsViberWithButtonViber_serviceAction Action { get; set; }
		
		/// <summary>
		/// The use of different category tags enables the business to send messages for different use cases. For Viber Business Messages the first message sent from a business to a user must be personal, informative & a targeted message - not promotional. By default Vonage sends the `transaction` category to Viber Business Messages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="category")]
		public ChannelOptionsViberViber_serviceCategory Category { get; set; }
		
		/// <summary>
		/// Set the time-to-live of message to be delivered in seconds. i.e. if the message is not delivered in 600 seconds then delete the message.
		/// Minimum: 30
		/// Maximum: 259200
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ttl")]
		[System.ComponentModel.DataAnnotations.Range(30, 259200)]
		public System.Nullable<System.Int32> Ttl { get; set; }
		
		/// <summary>
		/// Viber-specific type definition. To use "template", please contact your Vonage Account Manager to setup your templates. To find out more please visit the [product page](https://www.vonage.com/communications-apis/messages/)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	public class ChannelOptionsViberWithButtonViber_serviceAction
	{
		
		/// <summary>
		/// Text which is rendered on the action button.
		/// Max length: 30
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		[System.ComponentModel.DataAnnotations.MaxLength(30)]
		public string Text { get; set; }
		
		/// <summary>
		/// A URL which is requested when the action button is clicked.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class ChannelOptionsWhatsapp
	{
		
		/// <summary>
		/// The channel to send to. You must provide `whatsapp` in this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public System.Nullable<ChannelOptionsWhatsappChannel> Channel { get; set; }
		
		/// <summary>
		/// The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
		///
		/// Max length: 15
		/// Min length: 7
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum ChannelOptionsWhatsappChannel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		whatsapp = 0,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InboundMessageMMS
	{
		
		/// <summary>
		/// The channel the message came in on
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public ChannelOptionsMmsChannel Channel { get; set; }
		
		/// <summary>
		/// The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// The UUID of the message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_uuid")]
		public string Message_uuid { get; set; }
		
		/// <summary>
		/// The datetime of when the event occurred, in `ISO 8601` format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
		///
		/// Required
		/// Max length: 15
		/// Min length: 7
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InboundMessageSMS
	{
		
		/// <summary>
		/// The channel the message came in on
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public ChannelOptionsSmsChannel Channel { get; set; }
		
		/// <summary>
		/// The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// The UUID of the message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_uuid")]
		public string Message_uuid { get; set; }
		
		/// <summary>
		/// Channel specific metadata for SMS
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sms")]
		public InboundMessageSMSSms Sms { get; set; }
		
		/// <summary>
		/// The UTF-8 encoded text of the inbound message.
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// The datetime of when the event occurred, in `ISO 8601` format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
		///
		/// Required
		/// Max length: 15
		/// Min length: 7
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string To { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public Usage Usage { get; set; }
	}
	
	public class InboundMessageSMSSms
	{
		
		/// <summary>
		/// The first word of the message sent to uppercase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyword")]
		public string Keyword { get; set; }
		
		/// <summary>
		/// The number of inbound SMS messages concatenated together to comprise this message. SMS messages are 160 characters, if an inbound message exceeds that size they are concatenated together to forma single message. This number indicates how many messages formed this webhook.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="num_messages")]
		public string Num_messages { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class InboundWhatsAppMessageCommon
	{
		
		/// <summary>
		/// The channel that the message came in on
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public ChannelOptionsWhatsappChannel Channel { get; set; }
		
		/// <summary>
		/// This is only present for the Inbound Message where the user is quoting another message, or for a `product` message where the user has selected the 'Message Business' 
		///option. It provides information about the quoted message and/or the product message being responded to. 
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public Context Context { get; set; }
		
		/// <summary>
		/// The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// The UUID of the message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_uuid")]
		public string Message_uuid { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="profile")]
		public Profile Profile { get; set; }
		
		/// <summary>
		/// A message from the channel provider, which may contain a description, error codes or other information
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provider_message")]
		public string Provider_message { get; set; }
		
		/// <summary>
		/// The datetime of when the event occurred, in `ISO 8601` format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
		///
		/// Required
		/// Max length: 15
		/// Min length: 7
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessageStatusBase
	{
		
		/// <summary>
		/// Client reference of up to 100 characters. The reference will be present in every message status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="client_ref")]
		public string Client_ref { get; set; }
		
		/// <summary>
		/// If the message encountered a problem a descriptive error will be supplied in this object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public MessageStatusBaseError Error { get; set; }
		
		/// <summary>
		/// The phone number of the message **sender** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000. For SMS in certain localities alpha-numeric sender id's will work as well, see [Global Messaging](https://developer.nexmo.com/messaging/sms/guides/country-specific-features#country-specific-features) for more details
		///
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="from")]
		public string From { get; set; }
		
		/// <summary>
		/// The UUID of the message
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="message_uuid")]
		public string Message_uuid { get; set; }
		
		/// <summary>
		/// The status of the message.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="status")]
		public MessageStatusBaseStatus Status { get; set; }
		
		/// <summary>
		/// The datetime of when the event occurred, in `ISO 8601` format.
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="timestamp")]
		public string Timestamp { get; set; }
		
		/// <summary>
		/// The phone number of the message **recipient** in the [E.164](https://en.wikipedia.org/wiki/E.164) format. Don't use a leading + or 00 when entering a phone number, start with the country code, for example, 447700900000.
		///
		/// Required
		/// Max length: 15
		/// Min length: 7
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(7)]
		[System.ComponentModel.DataAnnotations.MaxLength(15)]
		public string To { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public MessageStatusBaseUsage Usage { get; set; }
	}
	
	public class MessageStatusBaseError
	{
		
		/// <summary>
		/// Text describing the error. See [our errors list](https://developer.nexmo.com/api-errors/messages-olympus) for a list of possible errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detail")]
		public string Detail { get; set; }
		
		/// <summary>
		/// The record id of this error's occurrence.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instance")]
		public string Instance { get; set; }
		
		/// <summary>
		/// The error code encountered when sending the message. See [our errors list](https://developer.nexmo.com/api-errors/messages-olympus) for a list of possible errors
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="title")]
		public string Title { get; set; }
		
		/// <summary>
		/// The type of error encountered, follow URL for more details
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MessageStatusBaseStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		submitted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		delivered = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		undeliverable = 3,
	}
	
	public class MessageStatusBaseUsage
	{
		
		/// <summary>
		/// The charge currency in ISO 4217 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public UsageCurrency Currency { get; set; }
		
		/// <summary>
		/// The charge amount as a stringified number.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessageStatusMMS : MessageStatusBase
	{
		
		/// <summary>
		/// The channel sending to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public ChannelOptionsMmsChannel Channel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessageStatusMessenger : MessageStatusBase
	{
		
		/// <summary>
		/// The channel sending to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public InboundMessengerMessageCommonChannel Channel { get; set; }
		
		/// <summary>
		/// The ID of the message sender
		///
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="from")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string From { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<MessageStatusMessengerStatus> Status { get; set; }
		
		/// <summary>
		/// The ID of the message recipient
		///
		/// Max length: 50
		/// Min length: 1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="to")]
		[System.ComponentModel.DataAnnotations.MinLength(1)]
		[System.ComponentModel.DataAnnotations.MaxLength(50)]
		public string To { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MessageStatusMessengerStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		submitted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		delivered = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		undeliverable = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		read = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessageStatusSMS : MessageStatusBase
	{
		
		/// <summary>
		/// The channel sending to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public ChannelOptionsSmsChannel Channel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessageStatusViber : MessageStatusBase
	{
		
		/// <summary>
		/// The channel sending to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public InboundViberMessageCommonChannel Channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<MessageStatusViberStatus> Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MessageStatusViberStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		submitted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		delivered = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		undeliverable = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		read = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class MessageStatusWhatsApp : MessageStatusBase
	{
		
		/// <summary>
		/// The channel sending to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channel")]
		public ChannelOptionsWhatsappChannel Channel { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="status")]
		public System.Nullable<MessageStatusWhatsAppStatus> Status { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="usage")]
		public MessageStatusWhatsAppUsage Usage { get; set; }
		
		/// <summary>
		/// An object contining meta-data related to the WhatsApp message that triggered this callback. Only present for callbacks with a `status` of `delivered`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="whatsapp")]
		public MessageStatusWhatsAppWhatsapp Whatsapp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum MessageStatusWhatsAppStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		submitted = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		delivered = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		rejected = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		undeliverable = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		read = 4,
	}
	
	public class MessageStatusWhatsAppUsage
	{
		
		/// <summary>
		/// The charge currency in ISO 4217 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currency")]
		public UsageCurrency Currency { get; set; }
		
		/// <summary>
		/// The charge amount as a stringified number. For WhatsApp this is the default Vonage charge per conversation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="price")]
		public string Price { get; set; }
	}
	
	public class MessageStatusWhatsAppWhatsapp
	{
		
		/// <summary>
		/// An object contining data for the conversation to which the message relates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversation")]
		public MessageStatusWhatsAppWhatsappConversation Conversation { get; set; }
	}
	
	public class MessageStatusWhatsAppWhatsappConversation
	{
		
		/// <summary>
		/// The id of the conversation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// An object contining data related to the origin of the conversation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="origin")]
		public MessageStatusWhatsAppWhatsappConversationOrigin Origin { get; set; }
	}
	
	public class MessageStatusWhatsAppWhatsappConversationOrigin
	{
		
		/// <summary>
		/// The conversation type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class VCard : BaseMessageType
	{
		
		/// <summary>
		/// The type of message to send. You must provide `vcard` in this field
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message_type")]
		public System.Nullable<VCardMessage_type> Message_type { get; set; }
		
		/// <summary>
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="vcard")]
		public VCardVcard Vcard { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public enum VCardMessage_type
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		vcard = 0,
	}
	
	public class VCardVcard
	{
		
		/// <summary>
		/// The publicly accessible URL of the vCard attachment. Supported types are .vcf only
		/// Required
		/// </summary>
		[System.ComponentModel.DataAnnotations.Required()]
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Send a message to the given channel.
		/// Send a Message
		/// SendMessage 
		/// </summary>
		/// <param name="requestBody">Send a Message.</param>
		public async Task SendMessageAsync(Text requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
