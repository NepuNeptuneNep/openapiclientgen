//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// (Restricted Access) Contains a signal helping apps differentiating between likely genuine and likely non-genuine user traffic.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountActivity
	{
		
		/// <summary>
		/// Required. Indicates the activity level of the account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activityLevel")]
		public System.Nullable<AccountActivityActivityLevel> ActivityLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccountActivityActivityLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="ACTIVITY_LEVEL_UNSPECIFIED")]
		ACTIVITY_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNEVALUATED")]
		UNEVALUATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNUSUAL")]
		UNUSUAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPICAL_BASIC")]
		TYPICAL_BASIC = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="TYPICAL_STRONG")]
		TYPICAL_STRONG = 5,
	}
	
	/// <summary>
	/// Contains the account information such as the licensing status for the user in the scope.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AccountDetails
	{
		
		/// <summary>
		/// (Restricted Access) Contains a signal helping apps differentiating between likely genuine and likely non-genuine user traffic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountActivity")]
		public AccountActivity AccountActivity { get; set; }
		
		/// <summary>
		/// Required. Details about the licensing status of the user for the app in the scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appLicensingVerdict")]
		public System.Nullable<AccountDetailsAppLicensingVerdict> AppLicensingVerdict { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AccountDetailsAppLicensingVerdict
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LICENSED")]
		LICENSED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNLICENSED")]
		UNLICENSED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNEVALUATED")]
		UNEVALUATED = 3,
	}
	
	/// <summary>
	/// Contains signals about others apps on the device which could be used to access or control the requesting app.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppAccessRiskVerdict
	{
		
		/// <summary>
		/// Required. App access risk verdict related to apps that are not installed by Google Play, and are not preloaded on the system image by the device manufacturer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="otherApps")]
		public System.Nullable<AppAccessRiskVerdictOtherApps> OtherApps { get; set; }
		
		/// <summary>
		/// Required. App access risk verdict related to apps that are not installed by the Google Play Store, and are not preloaded on the system image by the device manufacturer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playOrSystemApps")]
		public AppAccessRiskVerdictOtherApps PlayOrSystemApps { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AppAccessRiskVerdictOtherApps
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNEVALUATED")]
		UNEVALUATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NOT_INSTALLED")]
		NOT_INSTALLED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="INSTALLED")]
		INSTALLED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CAPTURING")]
		CAPTURING = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="CONTROLLING")]
		CONTROLLING = 5,
	}
	
	/// <summary>
	/// Contains the application integrity information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class AppIntegrity
	{
		
		/// <summary>
		/// Required. Details about the app recognition verdict
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appRecognitionVerdict")]
		public System.Nullable<AppIntegrityAppRecognitionVerdict> AppRecognitionVerdict { get; set; }
		
		/// <summary>
		/// The SHA256 hash of the requesting app's signing certificates (base64 web-safe encoded). Set iff app_recognition_verdict != UNEVALUATED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="certificateSha256Digest")]
		public string[] CertificateSha256Digest { get; set; }
		
		/// <summary>
		/// Package name of the application under attestation. Set iff app_recognition_verdict != UNEVALUATED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="packageName")]
		public string PackageName { get; set; }
		
		/// <summary>
		/// Version code of the application. Set iff app_recognition_verdict != UNEVALUATED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="versionCode")]
		public string VersionCode { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum AppIntegrityAppRecognitionVerdict
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNKNOWN")]
		UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLAY_RECOGNIZED")]
		PLAY_RECOGNIZED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNRECOGNIZED_VERSION")]
		UNRECOGNIZED_VERSION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNEVALUATED")]
		UNEVALUATED = 3,
	}
	
	/// <summary>
	/// Request to decode the integrity token.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DecodeIntegrityTokenRequest
	{
		
		/// <summary>
		/// Encoded integrity token.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrityToken")]
		public string IntegrityToken { get; set; }
	}
	
	/// <summary>
	/// Response containing the decoded integrity payload.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DecodeIntegrityTokenResponse
	{
		
		/// <summary>
		/// Contains basic app information and integrity signals like device attestation and licensing details.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="tokenPayloadExternal")]
		public TokenPayloadExternal TokenPayloadExternal { get; set; }
	}
	
	/// <summary>
	/// Contains basic app information and integrity signals like device attestation and licensing details.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TokenPayloadExternal
	{
		
		/// <summary>
		/// Contains the account information such as the licensing status for the user in the scope.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="accountDetails")]
		public AccountDetails AccountDetails { get; set; }
		
		/// <summary>
		/// Contains the application integrity information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appIntegrity")]
		public AppIntegrity AppIntegrity { get; set; }
		
		/// <summary>
		/// Contains the device attestation information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceIntegrity")]
		public DeviceIntegrity DeviceIntegrity { get; set; }
		
		/// <summary>
		/// Contains information about the environment Play Integrity API runs in, e.g. Play Protect verdict.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentDetails")]
		public EnvironmentDetails EnvironmentDetails { get; set; }
		
		/// <summary>
		/// Contains the integrity request information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestDetails")]
		public RequestDetails RequestDetails { get; set; }
		
		/// <summary>
		/// Contains additional information generated for testing responses.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="testingDetails")]
		public TestingDetails TestingDetails { get; set; }
	}
	
	/// <summary>
	/// Contains the device attestation information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class DeviceIntegrity
	{
		
		/// <summary>
		/// Details about the integrity of the device the app is running on.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceRecognitionVerdict")]
		public string[] DeviceRecognitionVerdict { get; set; }
		
		/// <summary>
		/// Recent device activity can help developers identify devices that have exhibited hyperactive attestation activity, which could be a sign of an attack or token farming.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recentDeviceActivity")]
		public RecentDeviceActivity RecentDeviceActivity { get; set; }
	}
	
	/// <summary>
	/// Recent device activity can help developers identify devices that have exhibited hyperactive attestation activity, which could be a sign of an attack or token farming.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RecentDeviceActivity
	{
		
		/// <summary>
		/// Required. Indicates the activity level of the device.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceActivityLevel")]
		public System.Nullable<RecentDeviceActivityDeviceActivityLevel> DeviceActivityLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum RecentDeviceActivityDeviceActivityLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="DEVICE_ACTIVITY_LEVEL_UNSPECIFIED")]
		DEVICE_ACTIVITY_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNEVALUATED")]
		UNEVALUATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LEVEL_1")]
		LEVEL_1 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LEVEL_2")]
		LEVEL_2 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LEVEL_3")]
		LEVEL_3 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="LEVEL_4")]
		LEVEL_4 = 5,
	}
	
	/// <summary>
	/// Contains information about the environment Play Integrity API runs in, e.g. Play Protect verdict.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class EnvironmentDetails
	{
		
		/// <summary>
		/// Contains signals about others apps on the device which could be used to access or control the requesting app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appAccessRiskVerdict")]
		public AppAccessRiskVerdict AppAccessRiskVerdict { get; set; }
		
		/// <summary>
		/// The evaluation of Play Protect verdict.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playProtectVerdict")]
		public System.Nullable<EnvironmentDetailsPlayProtectVerdict> PlayProtectVerdict { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
	[System.SerializableAttribute()]
	public enum EnvironmentDetailsPlayProtectVerdict
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="PLAY_PROTECT_VERDICT_UNSPECIFIED")]
		PLAY_PROTECT_VERDICT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="UNEVALUATED")]
		UNEVALUATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_ISSUES")]
		NO_ISSUES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="NO_DATA")]
		NO_DATA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="MEDIUM_RISK")]
		MEDIUM_RISK = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="HIGH_RISK")]
		HIGH_RISK = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute(Value="POSSIBLE_RISK")]
		POSSIBLE_RISK = 6,
	}
	
	/// <summary>
	/// Contains the integrity request information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class RequestDetails
	{
		
		/// <summary>
		/// Nonce that was provided in the request (which is base64 web-safe no-wrap).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonce")]
		public string Nonce { get; set; }
		
		/// <summary>
		/// Request hash that was provided in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestHash")]
		public string RequestHash { get; set; }
		
		/// <summary>
		/// Required. Application package name this attestation was requested for. Note: This field makes no guarantees or promises on the caller integrity. For details on application integrity, check application_integrity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestPackageName")]
		public string RequestPackageName { get; set; }
		
		/// <summary>
		/// Required. Timestamp, in milliseconds, of the integrity application request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timestampMillis")]
		public string TimestampMillis { get; set; }
	}
	
	/// <summary>
	/// Contains additional information generated for testing responses.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="")]
	[System.SerializableAttribute()]
	public class TestingDetails
	{
		
		/// <summary>
		/// Required. Indicates that the information contained in this payload is a testing response that is statically overridden for a tester.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="isTestingResponse")]
		public System.Nullable<System.Boolean> IsTestingResponse { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Decodes the integrity token and returns the token payload.
		/// Playintegrity_decodeIntegrityToken v1/{packageName}:decodeIntegrityToken
		/// </summary>
		/// <param name="packageName"> Package name of the app the attached integrity token belongs to.</param>
		/// <returns>Successful response</returns>
		public async Task<DecodeIntegrityTokenResponse> Playintegrity_decodeIntegrityTokenAsync(string packageName, DecodeIntegrityTokenRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (packageName==null? "" : System.Uri.EscapeDataString(packageName))+":decodeIntegrityToken";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<DecodeIntegrityTokenResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
