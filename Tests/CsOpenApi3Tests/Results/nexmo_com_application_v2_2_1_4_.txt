//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationResponse
	{
		
		/// <summary>
		/// Your application can use multiple products. This contains the configuration for each product. This replaces the application `type` from version 1 of the Application API.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="capabilities")]
		public Capabilities Capabilities { get; set; }
		
		/// <summary>
		/// The application's ID
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Friendly identifier for your application. This is not unique
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Application privacy config
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privacy")]
		public ApplicationResponsePrivacy Privacy { get; set; }
	}
	
	/// <summary>
	/// Your application can use multiple products. This contains the configuration for each product. This replaces the application `type` from version 1 of the Application API.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Capabilities
	{
		
		/// <summary>
		/// Meetings related configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="meetings")]
		public MeetingsCapability Meetings { get; set; }
		
		/// <summary>
		/// Messages / Dispatch related configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="messages")]
		public MessagesCapability Messages { get; set; }
		
		/// <summary>
		/// RTC / Conversation Service related configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rtc")]
		public RtcCapability Rtc { get; set; }
		
		/// <summary>
		/// Specify the `vbc` capability to enable zero-rated calls for VBC number programmability service applications. This is always an empty object.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vbc")]
		public string Vbc { get; set; }
		
		/// <summary>
		/// Two factor authentication related configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="verify")]
		public VerifyCapability Verify { get; set; }
		
		/// <summary>
		/// Voice related configuration
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="voice")]
		public VoiceCapability Voice { get; set; }
	}
	
	/// <summary>
	/// Meetings related configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MeetingsCapability
	{
		
		[System.Runtime.Serialization.DataMember(Name="webhooks")]
		public MeetingsCapabilityWebhooks Webhooks { get; set; }
	}
	
	public class MeetingsCapabilityWebhooks
	{
		
		/// <summary>
		/// Vonage will send recording changed events to this URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recording_changed")]
		public MeetingsCapabilityWebhooksRecording_changed Recording_changed { get; set; }
		
		/// <summary>
		/// Vonage will send call room changed events to this URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="room_changed")]
		public MeetingsCapabilityWebhooksRoom_changed Room_changed { get; set; }
		
		/// <summary>
		/// Vonage will send call session changed events to this URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="session_changed")]
		public MeetingsCapabilityWebhooksSession_changed Session_changed { get; set; }
	}
	
	public class MeetingsCapabilityWebhooksRecording_changed
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="http_method")]
		public System.Nullable<MeetingsCapabilityWebhooksRecording_changedHttp_method> Http_method { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MeetingsCapabilityWebhooksRecording_changedHttp_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PUT = 2,
	}
	
	public class MeetingsCapabilityWebhooksRoom_changed
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="http_method")]
		public MeetingsCapabilityWebhooksRecording_changedHttp_method Http_method { get; set; }
	}
	
	public class MeetingsCapabilityWebhooksSession_changed
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="http_method")]
		public MeetingsCapabilityWebhooksRecording_changedHttp_method Http_method { get; set; }
	}
	
	/// <summary>
	/// Messages / Dispatch related configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MessagesCapability
	{
		
		/// <summary>
		/// If not populated will be set to v1
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public string Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webhooks")]
		public MessagesCapabilityWebhooks Webhooks { get; set; }
	}
	
	public class MessagesCapabilityWebhooks
	{
		
		/// <summary>
		/// Vonage will forward inbound messages to this URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inbound_url")]
		public MessagesCapabilityWebhooksInbound_url Inbound_url { get; set; }
		
		/// <summary>
		/// Vonage will send message status updates (e.g. `delivered`, `seen`) to this URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_url")]
		public MessagesCapabilityWebhooksStatus_url Status_url { get; set; }
	}
	
	public class MessagesCapabilityWebhooksInbound_url
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="http_method")]
		public System.Nullable<MessagesCapabilityWebhooksInbound_urlHttp_method> Http_method { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MessagesCapabilityWebhooksInbound_urlHttp_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST = 0,
	}
	
	public class MessagesCapabilityWebhooksStatus_url
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="http_method")]
		public MessagesCapabilityWebhooksInbound_urlHttp_method Http_method { get; set; }
	}
	
	/// <summary>
	/// RTC / Conversation Service related configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RtcCapability
	{
		
		/// <summary>
		/// Minimum: 1
		/// Maximum: 31
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="leg_persistence_time")]
		[System.ComponentModel.DataAnnotations.Range(1, 31)]
		public System.Nullable<System.Int32> Leg_persistence_time { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="signed_callbacks")]
		public System.Nullable<System.Boolean> Signed_callbacks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webhooks")]
		public RtcCapabilityWebhooks Webhooks { get; set; }
	}
	
	public class RtcCapabilityWebhooks
	{
		
		/// <summary>
		/// Vonage will send RTC events to this URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_url")]
		public RtcCapabilityWebhooksEvent_url Event_url { get; set; }
	}
	
	public class RtcCapabilityWebhooksEvent_url
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="http_method")]
		public System.Nullable<RtcCapabilityWebhooksEvent_urlHttp_method> Http_method { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RtcCapabilityWebhooksEvent_urlHttp_method
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GET = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		POST = 1,
	}
	
	/// <summary>
	/// Two factor authentication related configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VerifyCapability
	{
		
		/// <summary>
		/// Verify current version. If specified must be set to v2
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<VerifyCapabilityVersion> Version { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webhooks")]
		public VerifyCapabilityWebhooks Webhooks { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VerifyCapabilityVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		v2 = 0,
	}
	
	public class VerifyCapabilityWebhooks
	{
		
		/// <summary>
		/// Vonage will send request status events (e.g. `progress`, `complete`) to this URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status_url")]
		public VerifyCapabilityWebhooksStatus_url Status_url { get; set; }
	}
	
	public class VerifyCapabilityWebhooksStatus_url
	{
		
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="http_method")]
		public MessagesCapabilityWebhooksInbound_urlHttp_method Http_method { get; set; }
	}
	
	/// <summary>
	/// Voice related configuration
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VoiceCapability
	{
		
		/// <summary>
		/// ttl used by the NCCO in case you’re using a conversation action (is set in hours and is 48 by default)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversation_ttl")]
		public System.Nullable<System.Int32> Conversation_ttl { get; set; }
		
		/// <summary>
		/// encompass all the payment related fields
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="payments")]
		public VoiceCapabilityPayments Payments { get; set; }
		
		/// <summary>
		/// verify that a request is coming from Vonage servers (a jwt token will be sent on the callback authorization header)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="signed_callbacks")]
		public System.Nullable<System.Boolean> Signed_callbacks { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="webhooks")]
		public VoiceCapabilityWebhooks Webhooks { get; set; }
	}
	
	public class VoiceCapabilityPayments
	{
		
		/// <summary>
		/// payment gateways like Stripe
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gateways")]
		public VoiceCapabilityPaymentsGateways[] VoiceCapabilityPaymentsGateways { get; set; }
	}
	
	public class VoiceCapabilityPaymentsGateways
	{
		
		/// <summary>
		/// used to identify the gateway in the credentials service
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="credential")]
		public string Credential { get; set; }
		
		/// <summary>
		/// determines if the user has completed the integration with the gateway
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mode")]
		public System.Nullable<VoiceCapabilityPaymentsGatewaysMode> Mode { get; set; }
		
		/// <summary>
		/// payment gateway type (Stripe, Azure)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public string Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VoiceCapabilityPaymentsGatewaysMode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		test = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		live = 1,
	}
	
	public class VoiceCapabilityWebhooks
	{
		
		[System.Runtime.Serialization.DataMember(Name="answer_url")]
		public VoiceCapabilityWebhooksAnswer_url Answer_url { get; set; }
		
		/// <summary>
		/// Vonage will send call events (e.g. `ringing`, `answered`) to this URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="event_url")]
		public VoiceCapabilityWebhooksEvent_url Event_url { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="fallback_answer_url")]
		public VoiceCapabilityWebhooksFallback_answer_url Fallback_answer_url { get; set; }
	}
	
	public class VoiceCapabilityWebhooksAnswer_url
	{
		
		/// <summary>
		/// The URL that Vonage requests when a call is placed/received. Must return an NCCO
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// If Vonage can't connect to the webhook URL for this specified amount of time, then Vonage makes one additional attempt to connect to the webhook endpoint. This is an integer value specified in milliseconds.
		/// Minimum: 300
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connection_timeout")]
		[System.ComponentModel.DataAnnotations.Range(300, 1000)]
		public System.Nullable<System.Int32> Connection_timeout { get; set; }
		
		/// <summary>
		/// The HTTP method used to fetch your NCCO from your `answer_url`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="http_method")]
		public RtcCapabilityWebhooksEvent_urlHttp_method Http_method { get; set; }
		
		/// <summary>
		/// If a response from the webhook URL can't be read for this specified amount of time, then Vonage makes one additional attempt to read the webhook endpoint. This is an integer value specified in milliseconds.
		/// Minimum: 1000
		/// Maximum: 5000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socket_timeout")]
		[System.ComponentModel.DataAnnotations.Range(1000, 5000)]
		public System.Nullable<System.Int32> Socket_timeout { get; set; }
	}
	
	public class VoiceCapabilityWebhooksEvent_url
	{
		
		/// <summary>
		/// The URL that Vonage sends events related to your call to
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// If Vonage can't connect to the webhook URL for this specified amount of time, then Vonage makes one additional attempt to connect to the webhook endpoint. This is an integer value specified in milliseconds.
		/// Minimum: 300
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connection_timeout")]
		[System.ComponentModel.DataAnnotations.Range(300, 1000)]
		public System.Nullable<System.Int32> Connection_timeout { get; set; }
		
		/// <summary>
		/// The HTTP method used to send events to your server
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="http_method")]
		public RtcCapabilityWebhooksEvent_urlHttp_method Http_method { get; set; }
		
		/// <summary>
		/// If a response from the webhook URL can't be read for this specified amount of time, then Vonage makes one additional attempt to read the webhook endpoint. This is an integer value specified in milliseconds.
		/// Minimum: 1000
		/// Maximum: 10000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socket_timeout")]
		[System.ComponentModel.DataAnnotations.Range(1000, 10000)]
		public System.Nullable<System.Int32> Socket_timeout { get; set; }
	}
	
	public class VoiceCapabilityWebhooksFallback_answer_url
	{
		
		/// <summary>
		/// If your `answer_url` is offline or returns a HTTP error code, Vonage will make a request to a
		///`fallback_answer_url` if it is set. This URL must return an NCCO.
		///
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// If Vonage can't connect to the webhook URL for this specified amount of time, then Vonage makes one additional attempt to connect to the webhook endpoint. This is an integer value specified in milliseconds.
		/// Minimum: 300
		/// Maximum: 1000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="connection_timeout")]
		[System.ComponentModel.DataAnnotations.Range(300, 1000)]
		public System.Nullable<System.Int32> Connection_timeout { get; set; }
		
		/// <summary>
		/// The HTTP method used to fetch your NCCO from your `answer_url`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="http_method")]
		public RtcCapabilityWebhooksEvent_urlHttp_method Http_method { get; set; }
		
		/// <summary>
		/// If a response from the webhook URL can't be read for this specified amount of time, then Vonage makes one additional attempt to read the webhook endpoint. This is an integer value specified in milliseconds.
		/// Minimum: 1000
		/// Maximum: 5000
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="socket_timeout")]
		[System.ComponentModel.DataAnnotations.Range(1000, 5000)]
		public System.Nullable<System.Int32> Socket_timeout { get; set; }
	}
	
	public class ApplicationResponsePrivacy
	{
		
		/// <summary>
		/// If set to `true`, Vonage may store and use your content and data for the improvement of Vonage's AI based services and technologies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="improve_ai")]
		public System.Nullable<System.Boolean> Improve_ai { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ApplicationResponseCollection
	{
		
		/// <summary>
		/// A list of applications matching your existing filters
		/// </summary>
		[System.Runtime.Serialization.DataMember()]
		public ApplicationResponseCollection_embedded _embedded { get; set; }
		
		/// <summary>
		/// The current page number (starts at 1)
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page")]
		public System.Nullable<System.Int32> Page { get; set; }
		
		/// <summary>
		/// The number of applications per page
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="page_size")]
		public System.Nullable<System.Int32> Page_size { get; set; }
		
		/// <summary>
		/// The total number of applications
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_items")]
		public System.Nullable<System.Int32> Total_items { get; set; }
		
		/// <summary>
		/// The total number of pages returned
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="total_pages")]
		public System.Nullable<System.Int32> Total_pages { get; set; }
	}
	
	public class ApplicationResponseCollection_embedded
	{
		
		[System.Runtime.Serialization.DataMember(Name="applications")]
		public ApplicationResponse[] Applications { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List available applications
		/// ListApplication 
		/// </summary>
		/// <param name="page_size">The number of applications per page</param>
		/// <param name="page">The current page number (starts at 1)</param>
		/// <returns>Success</returns>
		public async Task<ApplicationResponseCollection> ListApplicationAsync(int page_size, int page, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "?page_size="+page_size+"&page="+page;
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApplicationResponseCollection>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Create an application
		/// CreateApplication 
		/// </summary>
		public async Task CreateApplicationAsync(object requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Delete an application
		/// Deleting an application **cannot be undone**.
		/// DeleteApplication {id}
		/// </summary>
		public async Task DeleteApplicationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{id}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Get an application
		/// GetApplication {id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ApplicationResponse> GetApplicationAsync(Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{id}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri);
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApplicationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
		
		/// <summary>
		/// Update an application
		/// UpdateApplication {id}
		/// </summary>
		/// <returns>Success</returns>
		public async Task<ApplicationResponse> UpdateApplicationAsync(object requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "{id}";
			using var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Put, requestUri);
			var content = System.Net.Http.Json.JsonContent.Create(requestBody, mediaType: null, jsonSerializerSettings);
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var streamContent = await responseMessage.Content.ReadAsStreamAsync();
				return JsonSerializer.Deserialize<ApplicationResponse>(streamContent, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public new System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
