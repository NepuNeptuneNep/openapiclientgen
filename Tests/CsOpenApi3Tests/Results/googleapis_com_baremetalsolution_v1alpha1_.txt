//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using Newtonsoft.Json;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Configuration parameters for a new instance.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceConfig
	{
		
		/// <summary>
		/// A network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientNetwork")]
		public NetworkAddress ClientNetwork { get; set; }
		
		/// <summary>
		/// Whether the instance should be provisioned with Hyperthreading enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hyperthreading")]
		public System.Nullable<System.Boolean> Hyperthreading { get; set; }
		
		/// <summary>
		/// A transient unique identifier to idenfity an instance within an ProvisioningConfig request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public string InstanceType { get; set; }
		
		/// <summary>
		/// Location where to deploy the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// OS image to initialize the instance.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="osImage")]
		public string OsImage { get; set; }
		
		/// <summary>
		/// A network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="privateNetwork")]
		public NetworkAddress PrivateNetwork { get; set; }
		
		/// <summary>
		/// User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userNote")]
		public string UserNote { get; set; }
	}
	
	/// <summary>
	/// A network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkAddress
	{
		
		/// <summary>
		/// IP address to be assigned to the server.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="address")]
		public string Address { get; set; }
		
		/// <summary>
		/// Name of the existing network to use. Will be of the format at--vlan for pre-intake UI networks like for eg, at-123456-vlan001 or any user-defined name like for eg, my-network-name for networks provisioned using intake UI. The field is exclusively filled only in case of an already existing network. Mutually exclusive with network_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="existingNetworkId")]
		public string ExistingNetworkId { get; set; }
		
		/// <summary>
		/// Name of the network to use, within the same ProvisioningConfig request. This represents a new network being provisioned in the same request. Can have any user-defined name like for eg, my-network-name. Mutually exclusive with existing_network_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkId")]
		public string NetworkId { get; set; }
	}
	
	/// <summary>
	/// A resource budget.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InstanceQuota
	{
		
		/// <summary>
		/// Number of machines than can be created for the given location and instance_type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="availableMachineCount")]
		public System.Nullable<System.Int32> AvailableMachineCount { get; set; }
		
		/// <summary>
		/// Instance type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceType")]
		public string InstanceType { get; set; }
		
		/// <summary>
		/// Location where the quota applies.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
	}
	
	/// <summary>
	/// Response for ListProvisioningQuotas.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListProvisioningQuotasResponse
	{
		
		/// <summary>
		/// Token to retrieve the next page of results, or empty if there are no more results in the list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The provisioning quotas registered in this project.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningQuotas")]
		public ProvisioningQuota[] ProvisioningQuotas { get; set; }
	}
	
	/// <summary>
	/// A provisioning quota for a given project.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProvisioningQuota
	{
		
		/// <summary>
		/// A resource budget.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instanceQuota")]
		public InstanceQuota InstanceQuota { get; set; }
	}
	
	/// <summary>
	/// A LUN range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LunRange
	{
		
		/// <summary>
		/// Number of LUNs to create.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="quantity")]
		public System.Nullable<System.Int32> Quantity { get; set; }
		
		/// <summary>
		/// The requested size of each LUN, in GB.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeGb")]
		public System.Nullable<System.Int32> SizeGb { get; set; }
	}
	
	/// <summary>
	/// Configuration parameters for a new network.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NetworkConfig
	{
		
		/// <summary>
		/// Interconnect bandwidth. Set only when type is CLIENT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bandwidth")]
		public System.Nullable<NetworkConfigBandwidth> Bandwidth { get; set; }
		
		/// <summary>
		/// CIDR range of the network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cidr")]
		public string Cidr { get; set; }
		
		/// <summary>
		/// A transient unique identifier to identify a volume within an ProvisioningConfig request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Location where to deploy the network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// Service CIDR, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceCidr")]
		public System.Nullable<NetworkConfigServiceCidr> ServiceCidr { get; set; }
		
		/// <summary>
		/// The type of this network.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<NetworkConfigType> Type { get; set; }
		
		/// <summary>
		/// User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userNote")]
		public string UserNote { get; set; }
		
		/// <summary>
		/// List of VLAN attachments. As of now there are always 2 attachments, but it is going to change in the future (multi vlan).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vlanAttachments")]
		public VlanAttachment[] VlanAttachments { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkConfigBandwidth
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BANDWIDTH_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BW_1_GBPS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BW_2_GBPS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BW_5_GBPS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BW_10_GBPS = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkConfigServiceCidr
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SERVICE_CIDR_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_26 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_27 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HIGH_28 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NetworkConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CLIENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE = 2,
	}
	
	/// <summary>
	/// A GCP vlan attachment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VlanAttachment
	{
		
		/// <summary>
		/// Identifier of the VLAN attachment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Attachment pairing key.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pairingKey")]
		public string PairingKey { get; set; }
	}
	
	/// <summary>
	/// A NFS export entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NfsExport
	{
		
		/// <summary>
		/// Allow dev.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowDev")]
		public System.Nullable<System.Boolean> AllowDev { get; set; }
		
		/// <summary>
		/// Allow the setuid flag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="allowSuid")]
		public System.Nullable<System.Boolean> AllowSuid { get; set; }
		
		/// <summary>
		/// A CIDR range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cidr")]
		public string Cidr { get; set; }
		
		/// <summary>
		/// Either a single machine, identified by an ID, or a comma-separated list of machine IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineId")]
		public string MachineId { get; set; }
		
		/// <summary>
		/// Network to use to publish the export.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networkId")]
		public string NetworkId { get; set; }
		
		/// <summary>
		/// Disable root squashing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="noRootSquash")]
		public System.Nullable<System.Boolean> NoRootSquash { get; set; }
		
		/// <summary>
		/// Export permissions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="permissions")]
		public System.Nullable<NfsExportPermissions> Permissions { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NfsExportPermissions
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERMISSIONS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_WRITE = 2,
	}
	
	/// <summary>
	/// An provisioning configuration.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProvisioningConfig
	{
		
		/// <summary>
		/// Instances to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="instances")]
		public InstanceConfig[] Instances { get; set; }
		
		/// <summary>
		/// Networks to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="networks")]
		public NetworkConfig[] Networks { get; set; }
		
		/// <summary>
		/// A reference to track the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ticketId")]
		public string TicketId { get; set; }
		
		/// <summary>
		/// Volumes to be created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="volumes")]
		public VolumeConfig[] Volumes { get; set; }
	}
	
	/// <summary>
	/// Configuration parameters for a new volume.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VolumeConfig
	{
		
		/// <summary>
		/// A transient unique identifier to identify a volume within an ProvisioningConfig request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// Location where to deploy the volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="location")]
		public string Location { get; set; }
		
		/// <summary>
		/// LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lunRanges")]
		public LunRange[] LunRanges { get; set; }
		
		/// <summary>
		/// Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="machineIds")]
		public string[] MachineIds { get; set; }
		
		/// <summary>
		/// NFS exports. Set only when protocol is PROTOCOL_NFS.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nfsExports")]
		public NfsExport[] NfsExports { get; set; }
		
		/// <summary>
		/// Volume protocol.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="protocol")]
		public System.Nullable<VolumeConfigProtocol> Protocol { get; set; }
		
		/// <summary>
		/// The requested size of this volume, in GB. This will be updated in a later iteration with a generic size field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sizeGb")]
		public System.Nullable<System.Int32> SizeGb { get; set; }
		
		/// <summary>
		/// Whether snapshots should be enabled.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="snapshotsEnabled")]
		public System.Nullable<System.Boolean> SnapshotsEnabled { get; set; }
		
		/// <summary>
		/// The type of this Volume.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<VolumeConfigType> Type { get; set; }
		
		/// <summary>
		/// User note field, it can be used by customers to add additional information for the BMS Ops team (b/194021617).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userNote")]
		public string UserNote { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VolumeConfigProtocol
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROTOCOL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROTOCOL_FC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROTOCOL_NFS = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VolumeConfigType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FLASH = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISK = 2,
	}
	
	/// <summary>
	/// Request for SubmitProvisioningConfig.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubmitProvisioningConfigRequest
	{
		
		/// <summary>
		/// Optional. Email provided to send a confirmation with provisioning config to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// An provisioning configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="provisioningConfig")]
		public ProvisioningConfig ProvisioningConfig { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerSettings jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerSettings jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// List the budget details to provision resources on a given project.
		/// Baremetalsolution_projects_provisioningQuotas_list v1alpha1/{parent}/provisioningQuotas
		/// </summary>
		/// <param name="parent">Required. The parent project containing the provisioning quotas.</param>
		/// <param name="pageSize">The maximum number of items to return.</param>
		/// <param name="pageToken">The next_page_token value returned from a previous List request, if any.</param>
		/// <returns>Successful response</returns>
		public async Task<ListProvisioningQuotasResponse> Baremetalsolution_projects_provisioningQuotas_listAsync(string parent, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (parent==null? "" : System.Uri.EscapeDataString(parent))+"/provisioningQuotas&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ListProvisioningQuotasResponse>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Submit a provisiong configuration for a given project.
		/// Baremetalsolution_projects_locations_submitProvisioningConfig v1alpha1/{project}/{location}:submitProvisioningConfig
		/// </summary>
		/// <param name="project">Required. The target project of the provisioning request.</param>
		/// <param name="location">Required. The target location of the provisioning request.</param>
		/// <returns>Successful response</returns>
		public async Task<ProvisioningConfig> Baremetalsolution_projects_locations_submitProvisioningConfigAsync(string project, string location, SubmitProvisioningConfigRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/"+ (project==null? "" : System.Uri.EscapeDataString(project))+"/"+ (location==null? "" : System.Uri.EscapeDataString(location))+":submitProvisioningConfig";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			using (var requestWriter = new System.IO.StringWriter())
			{
			var requestSerializer = JsonSerializer.Create(jsonSerializerSettings);
			requestSerializer.Serialize(requestWriter, requestBody);
			var content = new System.Net.Http.StringContent(requestWriter.ToString(), System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var responseMessageStream = await responseMessage.Content.ReadAsStreamAsync();
				using (JsonReader jsonReader = new JsonTextReader(new System.IO.StreamReader(responseMessageStream)))
				{
				var serializer = JsonSerializer.Create(jsonSerializerSettings);
				return serializer.Deserialize<ProvisioningConfig>(jsonReader);
				}
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
