//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// The comment analysis request message. Next ID: 11
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyzeCommentRequest
	{
		
		/// <summary>
		/// Opaque token that is echoed from the request to the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Represents a body of text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public TextEntry Comment { get; set; }
		
		/// <summary>
		/// Optional identifier associating this AnalyzeCommentRequest with a particular client's community. Different communities may have different norms and rules. Specifying this value enables us to explore building community-specific models for clients.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="communityId")]
		public string CommunityId { get; set; }
		
		/// <summary>
		/// Context is typically something that a Comment is referencing or replying to (such as an article, or previous comment). Note: Populate only ONE OF the following fields. The oneof syntax cannot be used because that would require nesting entries inside another message and breaking backwards compatibility. The server will return an error if more than one of the following fields is present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public Context Context { get; set; }
		
		/// <summary>
		/// Do not store the comment or context sent in this request. By default, the service may store comments/context for debugging purposes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doNotStore")]
		public System.Nullable<System.Boolean> DoNotStore { get; set; }
		
		/// <summary>
		/// If specified, any requested attribute that is requested but not supported for the language detected will be dropped from the returned scores instead of returning an error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dropUnsupportedAttributes")]
		public System.Nullable<System.Boolean> DropUnsupportedAttributes { get; set; }
		
		/// <summary>
		/// The language(s) of the comment and context. If none are specified, we attempt to automatically detect the language. Specifying multiple languages means the text contains multiple lanugages. Both ISO and BCP-47 language codes are accepted. The server returns an error if no language was specified and language detection fails. The server also returns an error if the languages (either specified by the caller, or auto-detected) are not *all* supported by the service.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// Specification of requested attributes. The AttributeParameters serve as configuration for each associated attribute. The map keys are attribute names. The available attributes may be different on each RFE installation, and can be seen by calling ListAttributes (see above). For the prod installation, known as Perspective API, see https://developers.perspectiveapi.com/s/about-the-api-model-cards.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedAttributes")]
		public System.Collections.Generic.Dictionary<string, AttributeParameters> RequestedAttributes { get; set; }
		
		/// <summary>
		/// Session ID. Used to join related RPCs into a single session. For example, an interactive tool that calls both the AnalyzeComment and SuggestCommentScore RPCs should set all invocations of both RPCs to the same Session ID, typically a random 64-bit integer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
		
		/// <summary>
		/// An advisory parameter that will return span annotations if the model is capable of providing scores with sub-comment resolution. This will likely increase the size of the returned message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spanAnnotations")]
		public System.Nullable<System.Boolean> SpanAnnotations { get; set; }
	}
	
	/// <summary>
	/// Represents a body of text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TextEntry
	{
		
		/// <summary>
		/// UTF-8 encoded text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="text")]
		public string Text { get; set; }
		
		/// <summary>
		/// Type of the text field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<TextEntryType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TextEntryType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TEXT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAIN_TEXT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HTML = 2,
	}
	
	/// <summary>
	/// Context is typically something that a Comment is referencing or replying to (such as an article, or previous comment). Note: Populate only ONE OF the following fields. The oneof syntax cannot be used because that would require nesting entries inside another message and breaking backwards compatibility. The server will return an error if more than one of the following fields is present.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Context
	{
		
		/// <summary>
		/// A type of context specific to a comment left on a single-threaded comment message board, where comments are either a top level comment or the child of a top level comment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="articleAndParentComment")]
		public ArticleAndParentComment ArticleAndParentComment { get; set; }
		
		/// <summary>
		/// A list of messages. For example, a linear comments section or forum thread.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entries")]
		public TextEntry[] Entries { get; set; }
	}
	
	/// <summary>
	/// A type of context specific to a comment left on a single-threaded comment message board, where comments are either a top level comment or the child of a top level comment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ArticleAndParentComment
	{
		
		/// <summary>
		/// Represents a body of text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="article")]
		public TextEntry Article { get; set; }
		
		/// <summary>
		/// Represents a body of text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentComment")]
		public TextEntry ParentComment { get; set; }
	}
	
	/// <summary>
	/// Configurable parameters for attribute scoring.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeParameters
	{
		
		/// <summary>
		/// Don't return scores for this attribute that are below this threshold. If unset, a default threshold will be applied. A FloatValue wrapper is used to distinguish between 0 vs. default/unset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scoreThreshold")]
		public System.Nullable<System.Single> ScoreThreshold { get; set; }
		
		/// <summary>
		/// What type of scores to return. If unset, defaults to probability scores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="scoreType")]
		public System.Nullable<AttributeParametersScoreType> ScoreType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AttributeParametersScoreType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCORE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROBABILITY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STD_DEV_SCORE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERCENTILE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RAW = 4,
	}
	
	/// <summary>
	/// The comment analysis response message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AnalyzeCommentResponse
	{
		
		/// <summary>
		/// Scores for the requested attributes. The map keys are attribute names (same as the requested_attribute field in AnalyzeCommentRequest, for example "ATTACK_ON_AUTHOR", "INFLAMMATORY", etc).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeScores")]
		public System.Collections.Generic.Dictionary<string, AttributeScores> AttributeScores { get; set; }
		
		/// <summary>
		/// Same token from the original AnalyzeCommentRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Contains the languages detected from the text content, sorted in order of likelihood.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedLanguages")]
		public string[] DetectedLanguages { get; set; }
		
		/// <summary>
		/// The language(s) used by CommentAnalyzer service to choose which Model to use when analyzing the comment. Might better be called "effective_languages". The logic used to make the choice is as follows: if !Request.languages.empty() effective_languages = Request.languages else effective_languages = detected_languages[0]
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
	}
	
	/// <summary>
	/// This holds score values for a single attribute. It contains both per-span scores as well as an overall summary score..
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AttributeScores
	{
		
		/// <summary>
		/// Per-span scores.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="spanScores")]
		public SpanScore[] SpanScores { get; set; }
		
		/// <summary>
		/// Analysis scores are described by a value and a ScoreType.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="summaryScore")]
		public Score SummaryScore { get; set; }
	}
	
	/// <summary>
	/// This is a single score for a given span of text.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SpanScore
	{
		
		/// <summary>
		/// "begin" and "end" describe the span of the original text that the attribute score applies to. The values are the UTF-16 codepoint range. "end" is exclusive. For example, with the text "Hi there", the begin/end pair (0,2) describes the text "Hi". If "begin" and "end" are unset, the score applies to the full text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="begin")]
		public System.Nullable<System.Int32> Begin { get; set; }
		
		[System.Runtime.Serialization.DataMember(Name="end")]
		public System.Nullable<System.Int32> End { get; set; }
		
		/// <summary>
		/// Analysis scores are described by a value and a ScoreType.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="score")]
		public Score Score { get; set; }
	}
	
	/// <summary>
	/// Analysis scores are described by a value and a ScoreType.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Score
	{
		
		/// <summary>
		/// The type of the above value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public AttributeParametersScoreType Type { get; set; }
		
		/// <summary>
		/// Score value. Semantics described by type below.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="value")]
		public System.Nullable<System.Single> Value { get; set; }
	}
	
	/// <summary>
	/// The comment score suggestion request message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuggestCommentScoreRequest
	{
		
		/// <summary>
		/// Attribute scores for the comment. The map keys are attribute names, same as the requested_attribute field in AnalyzeCommentRequest (for example "ATTACK_ON_AUTHOR", "INFLAMMATORY", etc.). This field has the same type as the `attribute_scores` field in AnalyzeCommentResponse. To specify an overall attribute score for the entire comment as a whole, use the `summary_score` field of the mapped AttributeScores object. To specify scores on specific subparts of the comment, use the `span_scores` field. All SpanScore objects must have begin and end fields set. All Score objects must be explicitly set (for binary classification, use the score values 0 and 1). If Score objects don't include a ScoreType, `PROBABILITY` is assumed. `attribute_scores` must not be empty. The mapped AttributeScores objects also must not be empty. An `INVALID_ARGUMENT` error is returned for all malformed requests.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="attributeScores")]
		public System.Collections.Generic.Dictionary<string, AttributeScores> AttributeScores { get; set; }
		
		/// <summary>
		/// Opaque token that is echoed from the request to the response.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// Represents a body of text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="comment")]
		public TextEntry Comment { get; set; }
		
		/// <summary>
		/// Optional identifier associating this comment score suggestion with a particular sub-community. Different communities may have different norms and rules. Specifying this value enables training community-specific models.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="communityId")]
		public string CommunityId { get; set; }
		
		/// <summary>
		/// Context is typically something that a Comment is referencing or replying to (such as an article, or previous comment). Note: Populate only ONE OF the following fields. The oneof syntax cannot be used because that would require nesting entries inside another message and breaking backwards compatibility. The server will return an error if more than one of the following fields is present.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="context")]
		public Context Context { get; set; }
		
		/// <summary>
		/// The language(s) of the comment and context. If none are specified, we attempt to automatically detect the language. Both ISO and BCP-47 language codes are accepted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languages")]
		public string[] Languages { get; set; }
		
		/// <summary>
		/// Session ID. Used to join related RPCs into a single session. For example, an interactive tool that calls both the AnalyzeComment and SuggestCommentScore RPCs should set all invocations of both RPCs to the same Session ID, typically a random 64-bit integer.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sessionId")]
		public string SessionId { get; set; }
	}
	
	/// <summary>
	/// The comment score suggestion response message.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SuggestCommentScoreResponse
	{
		
		/// <summary>
		/// Same token from the original SuggestCommentScoreRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clientToken")]
		public string ClientToken { get; set; }
		
		/// <summary>
		/// The list of languages detected from the comment text.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="detectedLanguages")]
		public string[] DetectedLanguages { get; set; }
		
		/// <summary>
		/// The list of languages provided in the request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requestedLanguages")]
		public string[] RequestedLanguages { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Analyzes the provided text and returns scores for requested attributes.
		/// Commentanalyzer_comments_analyze v1alpha1/comments:analyze
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<AnalyzeCommentResponse> Commentanalyzer_comments_analyzeAsync(AnalyzeCommentRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/comments:analyze";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AnalyzeCommentResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Suggest comment scores as training data.
		/// Commentanalyzer_comments_suggestscore v1alpha1/comments:suggestscore
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<SuggestCommentScoreResponse> Commentanalyzer_comments_suggestscoreAsync(SuggestCommentScoreRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1alpha1/comments:suggestscore";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SuggestCommentScoreResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
