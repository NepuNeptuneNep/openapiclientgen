//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyNS
{
	using System;
	using System.Linq;
	using System.Collections.Generic;
	using System.Threading.Tasks;
	using System.Text.Json;
	using System.Text.Json.Serialization;
	using Fonlow.Net.Http;
	
	
	/// <summary>
	/// Request message for ManualTriggerService.ActivateManualTrigger.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActivateManualTriggerRequest
	{
	}
	
	/// <summary>
	/// Configuration for custom Active View video viewability metrics.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ActiveViewVideoViewabilityMetricConfig
	{
		
		/// <summary>
		/// Required. The display name of the custom metric.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The minimum visible video duration required (in seconds) in order for an impression to be recorded. You must specify minimum_duration, minimum_quartile or both. If both are specified, an impression meets the metric criteria if either requirement is met (whichever happens first).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumDuration")]
		public System.Nullable<ActiveViewVideoViewabilityMetricConfigMinimumDuration> MinimumDuration { get; set; }
		
		/// <summary>
		/// The minimum visible video duration required, based on the video quartiles, in order for an impression to be recorded. You must specify minimum_duration, minimum_quartile or both. If both are specified, an impression meets the metric criteria if either requirement is met (whichever happens first).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumQuartile")]
		public System.Nullable<ActiveViewVideoViewabilityMetricConfigMinimumQuartile> MinimumQuartile { get; set; }
		
		/// <summary>
		/// Required. The minimum percentage of the video ad's pixels visible on the screen in order for an impression to be recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumViewability")]
		public System.Nullable<ActiveViewVideoViewabilityMetricConfigMinimumViewability> MinimumViewability { get; set; }
		
		/// <summary>
		/// Required. The minimum percentage of the video ad's volume required in order for an impression to be recorded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumVolume")]
		public System.Nullable<ActiveViewVideoViewabilityMetricConfigMinimumVolume> MinimumVolume { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ActiveViewVideoViewabilityMetricConfigMinimumDuration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_0 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_3 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_4 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_5 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_6 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_7 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_8 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_9 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_10 = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_11 = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_12 = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_13 = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_14 = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_15 = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_30 = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_45 = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_SECONDS_60 = 20,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ActiveViewVideoViewabilityMetricConfigMinimumQuartile
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_QUARTILE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_QUARTILE_NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_QUARTILE_FIRST = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_QUARTILE_SECOND = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_QUARTILE_THIRD = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_DURATION_QUARTILE_FOURTH = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ActiveViewVideoViewabilityMetricConfigMinimumViewability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWABILITY_PERCENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWABILITY_PERCENT_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWABILITY_PERCENT_25 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWABILITY_PERCENT_50 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWABILITY_PERCENT_75 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWABILITY_PERCENT_100 = 5,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ActiveViewVideoViewabilityMetricConfigMinimumVolume
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_VOLUME_PERCENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_VOLUME_PERCENT_0 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_VOLUME_PERCENT_10 = 2,
	}
	
	/// <summary>
	/// Details of Adloox settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Adloox
	{
		
		/// <summary>
		/// Adloox's brand safety settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedAdlooxCategories")]
		public string[] ExcludedAdlooxCategories { get; set; }
	}
	
	/// <summary>
	/// A single advertiser in Display & Video 360 (DV360).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Advertiser
	{
		
		/// <summary>
		/// Ad server related settings of an advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adServerConfig")]
		public AdvertiserAdServerConfig AdServerConfig { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the advertiser. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Creatives related settings of an advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeConfig")]
		public AdvertiserCreativeConfig CreativeConfig { get; set; }
		
		/// <summary>
		/// Settings that control how advertiser related data may be accessed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataAccessConfig")]
		public AdvertiserDataAccessConfig DataAccessConfig { get; set; }
		
		/// <summary>
		/// Required. The display name of the advertiser. Must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required. Controls whether or not insertion orders and line items of the advertiser can spend their budgets and bid on inventory. * Accepted values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_PAUSED` and `ENTITY_STATUS_SCHEDULED_FOR_DELETION`. * If set to `ENTITY_STATUS_SCHEDULED_FOR_DELETION`, the advertiser will be deleted 30 days from when it was first scheduled for deletion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityStatus")]
		public System.Nullable<AdvertiserEntityStatus> EntityStatus { get; set; }
		
		/// <summary>
		/// General settings of an advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generalConfig")]
		public AdvertiserGeneralConfig GeneralConfig { get; set; }
		
		/// <summary>
		/// Integration details of an entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationDetails")]
		public IntegrationDetails IntegrationDetails { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. Immutable. The unique ID of the partner that the advertiser belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerId")]
		public string PartnerId { get; set; }
		
		/// <summary>
		/// Whether integration with Mediaocean (Prisma) is enabled. By enabling this, you agree to the following: On behalf of my company, I authorize Mediaocean (Prisma) to send budget segment plans to Google, and I authorize Google to send corresponding reporting and invoices from DV360 to Mediaocean for the purposes of budget planning, billing, and reconciliation for this advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prismaEnabled")]
		public System.Nullable<System.Boolean> PrismaEnabled { get; set; }
		
		/// <summary>
		/// Targeting settings related to ad serving of an advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="servingConfig")]
		public AdvertiserTargetingConfig ServingConfig { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the advertiser was last updated. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Ad server related settings of an advertiser.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdvertiserAdServerConfig
	{
		
		/// <summary>
		/// Settings for advertisers that use both Campaign Manager 360 (CM360) and third-party ad servers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cmHybridConfig")]
		public CmHybridConfig CmHybridConfig { get; set; }
		
		/// <summary>
		/// Settings for advertisers that use third-party ad servers only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdPartyOnlyConfig")]
		public ThirdPartyOnlyConfig ThirdPartyOnlyConfig { get; set; }
	}
	
	/// <summary>
	/// Settings for advertisers that use both Campaign Manager 360 (CM360) and third-party ad servers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CmHybridConfig
	{
		
		/// <summary>
		/// Required. Immutable. Account ID of the CM360 Floodlight configuration linked with the DV360 advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cmAccountId")]
		public string CmAccountId { get; set; }
		
		/// <summary>
		/// Required. Immutable. ID of the CM360 Floodlight configuration linked with the DV360 advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cmFloodlightConfigId")]
		public string CmFloodlightConfigId { get; set; }
		
		/// <summary>
		/// Required. Immutable. By setting this field to `true`, you, on behalf of your company, authorize the sharing of information from the given Floodlight configuration to this Display & Video 360 advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cmFloodlightLinkingAuthorized")]
		public System.Nullable<System.Boolean> CmFloodlightLinkingAuthorized { get; set; }
		
		/// <summary>
		/// A list of CM360 sites whose placements will be synced to DV360 as creatives. If absent or empty in CreateAdvertiser method, the system will automatically create a CM360 site. Removing sites from this list may cause DV360 creatives synced from CM360 to be deleted. At least one site must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cmSyncableSiteIds")]
		public string[] CmSyncableSiteIds { get; set; }
		
		/// <summary>
		/// Whether or not to report DV360 cost to CM360.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dv360ToCmCostReportingEnabled")]
		public System.Nullable<System.Boolean> Dv360ToCmCostReportingEnabled { get; set; }
		
		/// <summary>
		/// Whether or not to include DV360 data in CM360 data transfer reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dv360ToCmDataSharingEnabled")]
		public System.Nullable<System.Boolean> Dv360ToCmDataSharingEnabled { get; set; }
	}
	
	/// <summary>
	/// Settings for advertisers that use third-party ad servers only.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThirdPartyOnlyConfig
	{
		
		/// <summary>
		/// Whether or not order ID reporting for pixels is enabled. This value cannot be changed once set to `true`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pixelOrderIdReportingEnabled")]
		public System.Nullable<System.Boolean> PixelOrderIdReportingEnabled { get; set; }
	}
	
	/// <summary>
	/// Creatives related settings of an advertiser.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdvertiserCreativeConfig
	{
		
		/// <summary>
		/// Whether or not the advertiser is enabled for dynamic creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamicCreativeEnabled")]
		public System.Nullable<System.Boolean> DynamicCreativeEnabled { get; set; }
		
		/// <summary>
		/// An ID for configuring campaign monitoring provided by Integral Ad Service (IAS). The DV360 system will append an IAS "Campaign Monitor" tag containing this ID to the creative tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iasClientId")]
		public string IasClientId { get; set; }
		
		/// <summary>
		/// Whether or not to use DV360's Online Behavioral Advertising (OBA) compliance. Warning: Changing OBA settings may cause the audit status of your creatives to be reset by some ad exchanges, making them ineligible to serve until they are re-approved.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obaComplianceDisabled")]
		public System.Nullable<System.Boolean> ObaComplianceDisabled { get; set; }
		
		/// <summary>
		/// By setting this field to `true`, you, on behalf of your company, authorize Google to use video creatives associated with this Display & Video 360 advertiser to provide reporting and features related to the advertiser's television campaigns. Applicable only when the advertiser has a CM360 hybrid ad server configuration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoCreativeDataSharingAuthorized")]
		public System.Nullable<System.Boolean> VideoCreativeDataSharingAuthorized { get; set; }
	}
	
	/// <summary>
	/// Settings that control how advertiser related data may be accessed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdvertiserDataAccessConfig
	{
		
		/// <summary>
		/// Structured Data Files (SDF) settings of an advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdfConfig")]
		public AdvertiserSdfConfig SdfConfig { get; set; }
	}
	
	/// <summary>
	/// Structured Data Files (SDF) settings of an advertiser.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdvertiserSdfConfig
	{
		
		/// <summary>
		/// Whether or not this advertiser overrides the SDF configuration of its parent partner. By default, an advertiser inherits the SDF configuration from the parent partner. To override the partner configuration, set this field to `true` and provide the new configuration in sdfConfig.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="overridePartnerSdfConfig")]
		public System.Nullable<System.Boolean> OverridePartnerSdfConfig { get; set; }
		
		/// <summary>
		/// Structured Data File (SDF) related settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdfConfig")]
		public SdfConfig SdfConfig { get; set; }
	}
	
	/// <summary>
	/// Structured Data File (SDF) related settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SdfConfig
	{
		
		/// <summary>
		/// An administrator email address to which the SDF processing status reports will be sent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adminEmail")]
		public string AdminEmail { get; set; }
		
		/// <summary>
		/// Required. The version of SDF being used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public System.Nullable<SdfConfigVersion> Version { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SdfConfigVersion
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDF_VERSION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDF_VERSION_3_1 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDF_VERSION_4 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDF_VERSION_4_1 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDF_VERSION_4_2 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDF_VERSION_5 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDF_VERSION_5_1 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDF_VERSION_5_2 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDF_VERSION_5_3 = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDF_VERSION_5_4 = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDF_VERSION_5_5 = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDF_VERSION_6 = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SDF_VERSION_7 = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AdvertiserEntityStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_STATUS_ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_STATUS_ARCHIVED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_STATUS_DRAFT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_STATUS_PAUSED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENTITY_STATUS_SCHEDULED_FOR_DELETION = 5,
	}
	
	/// <summary>
	/// General settings of an advertiser.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdvertiserGeneralConfig
	{
		
		/// <summary>
		/// Required. Immutable. Advertiser's currency in ISO 4217 format. Accepted codes and the currencies they represent are: Currency Code : Currency Name * `ARS` : Argentine Peso * `AUD` : Australian Dollar * `BRL` : Brazilian Real * `CAD` : Canadian Dollar * `CHF` : Swiss Franc * `CLP` : Chilean Peso * `CNY` : Chinese Yuan * `COP` : Colombian Peso * `CZK` : Czech Koruna * `DKK` : Danish Krone * `EGP` : Egyption Pound * `EUR` : Euro * `GBP` : British Pound * `HKD` : Hong Kong Dollar * `HUF` : Hungarian Forint * `IDR` : Indonesian Rupiah * `ILS` : Israeli Shekel * `INR` : Indian Rupee * `JPY` : Japanese Yen * `KRW` : South Korean Won * `MXN` : Mexican Pesos * `MYR` : Malaysian Ringgit * `NGN` : Nigerian Naira * `NOK` : Norwegian Krone * `NZD` : New Zealand Dollar * `PEN` : Peruvian Nuevo Sol * `PLN` : Polish Zloty * `RON` : New Romanian Leu * `RUB` : Russian Ruble * `SEK` : Swedish Krona * `TRY` : Turkish Lira * `TWD` : New Taiwan Dollar * `USD` : US Dollar * `ZAR` : South African Rand
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Required. The domain URL of the advertiser's primary website. The system will send this information to publishers that require website URL to associate a campaign with an advertiser. Provide a URL with no path or query string, beginning with `http:` or `https:`. For example, http://www.example.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="domainUrl")]
		public string DomainUrl { get; set; }
		
		/// <summary>
		/// Output only. The standard TZ database name of the advertiser's time zone. For example, `America/New_York`. See more at: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones For CM360 hybrid advertisers, the time zone is the same as that of the associated CM360 account; for third-party only advertisers, the time zone is the same as that of the parent partner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	/// <summary>
	/// Integration details of an entry.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegrationDetails
	{
		
		/// <summary>
		/// Additional details of the entry in string format. Must be UTF-8 encoded with a length of no more than 1000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string Details { get; set; }
		
		/// <summary>
		/// An external identifier to be associated with the entry. The integration code will show up together with the entry in many places in the system, for example, reporting. Must be UTF-8 encoded with a length of no more than 500 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationCode")]
		public string IntegrationCode { get; set; }
	}
	
	/// <summary>
	/// Targeting settings related to ad serving of an advertiser.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AdvertiserTargetingConfig
	{
		
		/// <summary>
		/// Whether or not connected TV devices are exempt from viewability targeting for all video line items under the advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exemptTvFromViewabilityTargeting")]
		public System.Nullable<System.Boolean> ExemptTvFromViewabilityTargeting { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable age range. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_AGE_RANGE`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgeRangeAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The age range of an audience. We only support targeting a continuous age range of an audience. Thus, the age range represented in this field can be 1) targeted solely, or, 2) part of a larger continuous age range. The reach of a continuous age range targeting can be expanded by also targeting an audience of an unknown age.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ageRange")]
		public System.Nullable<AgeRangeAssignedTargetingOptionDetailsAgeRange> AgeRange { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_AGE_RANGE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AgeRangeAssignedTargetingOptionDetailsAgeRange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGE_RANGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGE_RANGE_18_24 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGE_RANGE_25_34 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGE_RANGE_35_44 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGE_RANGE_45_54 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGE_RANGE_55_64 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGE_RANGE_65_PLUS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AGE_RANGE_UNKNOWN = 7,
	}
	
	/// <summary>
	/// Represents a targetable age range. This will be populated in the age_range_details field when targeting_type is `TARGETING_TYPE_AGE_RANGE`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AgeRangeTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The age range of an audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ageRange")]
		public AgeRangeAssignedTargetingOptionDetailsAgeRange AgeRange { get; set; }
	}
	
	/// <summary>
	/// Details for assigned app targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_APP`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The ID of the app. Android's Play store app uses bundle ID, for example `com.google.android.gm`. Apple's App store app ID uses 9 digit string, for example `422689480`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Indicates the platform of the targeted app. If this field is not specified, the app platform will be assumed to be mobile (i.e., Android or iOS), and we will derive the appropriate mobile platform from the app ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appPlatform")]
		public System.Nullable<AppAssignedTargetingOptionDetailsAppPlatform> AppPlatform { get; set; }
		
		/// <summary>
		/// Output only. The display name of the app.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicates if this option is being negatively targeted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negative")]
		public System.Nullable<System.Boolean> Negative { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AppAssignedTargetingOptionDetailsAppPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_PLATFORM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_PLATFORM_IOS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_PLATFORM_ANDROID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_PLATFORM_ROKU = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_PLATFORM_AMAZON_FIRETV = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_PLATFORM_PLAYSTATION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_PLATFORM_APPLE_TV = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_PLATFORM_XBOX = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_PLATFORM_SAMSUNG_TV = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_PLATFORM_ANDROID_TV = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_PLATFORM_GENERIC_CTV = 10,
	}
	
	/// <summary>
	/// Details for assigned app category targeting option. This will be populated in the app_category_details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_APP_CATEGORY`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppCategoryAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the app category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicates if this option is being negatively targeted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negative")]
		public System.Nullable<System.Boolean> Negative { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_APP_CATEGORY`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable collection of apps. A collection lets you target dynamic groups of related apps that are maintained by the platform, for example `All Apps/Google Play/Games`. This will be populated in the app_category_details field when targeting_type is `TARGETING_TYPE_APP_CATEGORY`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AppCategoryTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The name of the app collection.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// A single asset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Asset
	{
		
		/// <summary>
		/// The asset content. For uploaded assets, the content is the serving path.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="content")]
		public string Content { get; set; }
		
		/// <summary>
		/// Media ID of the uploaded asset. This is a unique identifier for the asset. This ID can be passed to other API calls, e.g. CreateCreative to associate the asset with a creative. The Media ID space updated on **April 5, 2023**. Update media IDs cached before **April 5, 2023** by retrieving the new media ID from associated creative resources or re-uploading the asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaId")]
		public string MediaId { get; set; }
	}
	
	/// <summary>
	/// Asset association for the creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssetAssociation
	{
		
		/// <summary>
		/// A single asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asset")]
		public Asset Asset { get; set; }
		
		/// <summary>
		/// The role of this asset for the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="role")]
		public System.Nullable<AssetAssociationRole> Role { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AssetAssociationRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_MAIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_BACKUP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_POLITE_LOAD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_HEADLINE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_LONG_HEADLINE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_BODY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_LONG_BODY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_CAPTION_URL = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_CALL_TO_ACTION = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_ADVERTISER_NAME = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_PRICE = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_ANDROID_APP_ID = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_IOS_APP_ID = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_RATING = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_ICON = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ASSET_ROLE_COVER_IMAGE = 16,
	}
	
	/// <summary>
	/// An assignment between a targetable inventory source and an inventory source group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssignedInventorySource
	{
		
		/// <summary>
		/// Output only. The unique ID of the assigned inventory source. The ID is only unique within a given inventory source group. It may be reused in other contexts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedInventorySourceId")]
		public string AssignedInventorySourceId { get; set; }
		
		/// <summary>
		/// Required. The ID of the inventory source entity being targeted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySourceId")]
		public string InventorySourceId { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the assigned inventory source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// An assignment between a location list and a relevant targeting option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssignedLocation
	{
		
		/// <summary>
		/// Output only. The unique ID of the assigned location. The ID is only unique within a location list. It may be reused in other contexts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedLocationId")]
		public string AssignedLocationId { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the assigned location.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The ID of the targeting option assigned to the location list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	/// <summary>
	/// A single assigned targeting option, which defines the state of a targeting option for an entity with targeting settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssignedTargetingOption
	{
		
		/// <summary>
		/// Represents a targetable age range. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_AGE_RANGE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ageRangeDetails")]
		public AgeRangeAssignedTargetingOptionDetails AgeRangeDetails { get; set; }
		
		/// <summary>
		/// Details for assigned app category targeting option. This will be populated in the app_category_details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_APP_CATEGORY`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appCategoryDetails")]
		public AppCategoryAssignedTargetingOptionDetails AppCategoryDetails { get; set; }
		
		/// <summary>
		/// Details for assigned app targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_APP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appDetails")]
		public AppAssignedTargetingOptionDetails AppDetails { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the assigned targeting option. The ID is only unique within a given resource and targeting type. It may be reused in other contexts.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedTargetingOptionId")]
		public string AssignedTargetingOptionId { get; set; }
		
		/// <summary>
		/// Assigned audience group targeting option details. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_AUDIENCE_GROUP`. The relation between each group is UNION, except for excluded_first_and_third_party_audience_group and excluded_google_audience_group, of which COMPLEMENT is used as an INTERSECTION with other groups.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audienceGroupDetails")]
		public AudienceGroupAssignedTargetingOptionDetails AudienceGroupDetails { get; set; }
		
		/// <summary>
		/// Details for audio content type assigned targeting option. This will be populated in the audio_content_type_details field when targeting_type is `TARGETING_TYPE_AUDIO_CONTENT_TYPE`. Explicitly targeting all options is not supported. Remove all audio content type targeting options to achieve this effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioContentTypeDetails")]
		public AudioContentTypeAssignedTargetingOptionDetails AudioContentTypeDetails { get; set; }
		
		/// <summary>
		/// Represents an assigned authorized seller status. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS`. If a resource does not have an `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` assigned targeting option, it is using the "Authorized Direct Sellers and Resellers" option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizedSellerStatusDetails")]
		public AuthorizedSellerStatusAssignedTargetingOptionDetails AuthorizedSellerStatusDetails { get; set; }
		
		/// <summary>
		/// Details for assigned browser targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_BROWSER`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="browserDetails")]
		public BrowserAssignedTargetingOptionDetails BrowserDetails { get; set; }
		
		/// <summary>
		/// Details for assigned Business chain targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_BUSINESS_CHAIN`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessChainDetails")]
		public BusinessChainAssignedTargetingOptionDetails BusinessChainDetails { get; set; }
		
		/// <summary>
		/// Details for assigned carrier and ISP targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_CARRIER_AND_ISP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierAndIspDetails")]
		public CarrierAndIspAssignedTargetingOptionDetails CarrierAndIspDetails { get; set; }
		
		/// <summary>
		/// Assigned category targeting option details. This will be populated in the category_details field when targeting_type is `TARGETING_TYPE_CATEGORY`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryDetails")]
		public CategoryAssignedTargetingOptionDetails CategoryDetails { get; set; }
		
		/// <summary>
		/// Details for assigned channel targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_CHANNEL`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelDetails")]
		public ChannelAssignedTargetingOptionDetails ChannelDetails { get; set; }
		
		/// <summary>
		/// Details for content duration assigned targeting option. This will be populated in the content_duration_details field when targeting_type is `TARGETING_TYPE_CONTENT_DURATION`. Explicitly targeting all options is not supported. Remove all content duration targeting options to achieve this effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentDurationDetails")]
		public ContentDurationAssignedTargetingOptionDetails ContentDurationDetails { get; set; }
		
		/// <summary>
		/// Details for content genre assigned targeting option. This will be populated in the content_genre_details field when targeting_type is `TARGETING_TYPE_CONTENT_GENRE`. Explicitly targeting all options is not supported. Remove all content genre targeting options to achieve this effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentGenreDetails")]
		public ContentGenreAssignedTargetingOptionDetails ContentGenreDetails { get; set; }
		
		/// <summary>
		/// Assigned content instream position targeting option details. This will be populated in the content_instream_position_details field when targeting_type is `TARGETING_TYPE_CONTENT_INSTREAM_POSITION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentInstreamPositionDetails")]
		public ContentInstreamPositionAssignedTargetingOptionDetails ContentInstreamPositionDetails { get; set; }
		
		/// <summary>
		/// Assigned content outstream position targeting option details. This will be populated in the content_outstream_position_details field when targeting_type is `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentOutstreamPositionDetails")]
		public ContentOutstreamPositionAssignedTargetingOptionDetails ContentOutstreamPositionDetails { get; set; }
		
		/// <summary>
		/// Details for content stream type assigned targeting option. This will be populated in the content_stream_type_details field when targeting_type is `TARGETING_TYPE_CONTENT_STREAM_TYPE`. Explicitly targeting all options is not supported. Remove all content stream type targeting options to achieve this effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentStreamTypeDetails")]
		public ContentStreamTypeAssignedTargetingOptionDetails ContentStreamTypeDetails { get; set; }
		
		/// <summary>
		/// Representation of a segment of time defined on a specific day of the week and with a start and end time. The time represented by `start_hour` must be before the time represented by `end_hour`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayAndTimeDetails")]
		public DayAndTimeAssignedTargetingOptionDetails DayAndTimeDetails { get; set; }
		
		/// <summary>
		/// Assigned device make and model targeting option details. This will be populated in the device_make_model_details field when targeting_type is `TARGETING_TYPE_DEVICE_MAKE_MODEL`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceMakeModelDetails")]
		public DeviceMakeModelAssignedTargetingOptionDetails DeviceMakeModelDetails { get; set; }
		
		/// <summary>
		/// Targeting details for device type. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_DEVICE_TYPE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceTypeDetails")]
		public DeviceTypeAssignedTargetingOptionDetails DeviceTypeDetails { get; set; }
		
		/// <summary>
		/// Targeting details for digital content label. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digitalContentLabelExclusionDetails")]
		public DigitalContentLabelAssignedTargetingOptionDetails DigitalContentLabelExclusionDetails { get; set; }
		
		/// <summary>
		/// Assigned environment targeting option details. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_ENVIRONMENT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentDetails")]
		public EnvironmentAssignedTargetingOptionDetails EnvironmentDetails { get; set; }
		
		/// <summary>
		/// Details for assigned exchange targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_EXCHANGE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchangeDetails")]
		public ExchangeAssignedTargetingOptionDetails ExchangeDetails { get; set; }
		
		/// <summary>
		/// Details for assigned gender targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_GENDER`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genderDetails")]
		public GenderAssignedTargetingOptionDetails GenderDetails { get; set; }
		
		/// <summary>
		/// Details for assigned geographic region targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_GEO_REGION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoRegionDetails")]
		public GeoRegionAssignedTargetingOptionDetails GeoRegionDetails { get; set; }
		
		/// <summary>
		/// Details for assigned household income targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_HOUSEHOLD_INCOME`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="householdIncomeDetails")]
		public HouseholdIncomeAssignedTargetingOptionDetails HouseholdIncomeDetails { get; set; }
		
		/// <summary>
		/// Output only. The inheritance status of the assigned targeting option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inheritance")]
		public System.Nullable<AssignedTargetingOptionInheritance> Inheritance { get; set; }
		
		/// <summary>
		/// Targeting details for inventory source. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_INVENTORY_SOURCE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySourceDetails")]
		public InventorySourceAssignedTargetingOptionDetails InventorySourceDetails { get; set; }
		
		/// <summary>
		/// Targeting details for inventory source group. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_INVENTORY_SOURCE_GROUP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySourceGroupDetails")]
		public InventorySourceGroupAssignedTargetingOptionDetails InventorySourceGroupDetails { get; set; }
		
		/// <summary>
		/// Details for assigned keyword targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_KEYWORD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywordDetails")]
		public KeywordAssignedTargetingOptionDetails KeywordDetails { get; set; }
		
		/// <summary>
		/// Details for assigned language targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_LANGUAGE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageDetails")]
		public LanguageAssignedTargetingOptionDetails LanguageDetails { get; set; }
		
		/// <summary>
		/// Output only. The resource name for this assigned targeting option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Details for native content position assigned targeting option. This will be populated in the native_content_position_details field when targeting_type is `TARGETING_TYPE_NATIVE_CONTENT_POSITION`. Explicitly targeting all options is not supported. Remove all native content position targeting options to achieve this effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nativeContentPositionDetails")]
		public NativeContentPositionAssignedTargetingOptionDetails NativeContentPositionDetails { get; set; }
		
		/// <summary>
		/// Targeting details for negative keyword list. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negativeKeywordListDetails")]
		public NegativeKeywordListAssignedTargetingOptionDetails NegativeKeywordListDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable Open Measurement enabled inventory type. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_OMID`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="omidDetails")]
		public OmidAssignedTargetingOptionDetails OmidDetails { get; set; }
		
		/// <summary>
		/// On screen position targeting option details. This will be populated in the on_screen_position_details field when targeting_type is `TARGETING_TYPE_ON_SCREEN_POSITION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onScreenPositionDetails")]
		public OnScreenPositionAssignedTargetingOptionDetails OnScreenPositionDetails { get; set; }
		
		/// <summary>
		/// Assigned operating system targeting option details. This will be populated in the operating_system_details field when targeting_type is `TARGETING_TYPE_OPERATING_SYSTEM`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemDetails")]
		public OperatingSystemAssignedTargetingOptionDetails OperatingSystemDetails { get; set; }
		
		/// <summary>
		/// Details for assigned parental status targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_PARENTAL_STATUS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentalStatusDetails")]
		public ParentalStatusAssignedTargetingOptionDetails ParentalStatusDetails { get; set; }
		
		/// <summary>
		/// Details for assigned POI targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_POI`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poiDetails")]
		public PoiAssignedTargetingOptionDetails PoiDetails { get; set; }
		
		/// <summary>
		/// Targeting details for proximity location list. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_PROXIMITY_LOCATION_LIST`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proximityLocationListDetails")]
		public ProximityLocationListAssignedTargetingOptionDetails ProximityLocationListDetails { get; set; }
		
		/// <summary>
		/// Targeting details for regional location list. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_REGIONAL_LOCATION_LIST`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionalLocationListDetails")]
		public RegionalLocationListAssignedTargetingOptionDetails RegionalLocationListDetails { get; set; }
		
		/// <summary>
		/// Targeting details for sensitive category. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sensitiveCategoryExclusionDetails")]
		public SensitiveCategoryAssignedTargetingOptionDetails SensitiveCategoryExclusionDetails { get; set; }
		
		/// <summary>
		/// Details for assigned sub-exchange targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_SUB_EXCHANGE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subExchangeDetails")]
		public SubExchangeAssignedTargetingOptionDetails SubExchangeDetails { get; set; }
		
		/// <summary>
		/// Output only. Identifies the type of this assigned targeting option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingType")]
		public System.Nullable<AssignedTargetingOptionTargetingType> TargetingType { get; set; }
		
		/// <summary>
		/// Assigned third party verifier targeting option details. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_THIRD_PARTY_VERIFIER`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdPartyVerifierDetails")]
		public ThirdPartyVerifierAssignedTargetingOptionDetails ThirdPartyVerifierDetails { get; set; }
		
		/// <summary>
		/// Details for assigned URL targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_URL`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlDetails")]
		public UrlAssignedTargetingOptionDetails UrlDetails { get; set; }
		
		/// <summary>
		/// User rewarded content targeting option details. This will be populated in the user_rewarded_content_details field when targeting_type is `TARGETING_TYPE_USER_REWARDED_CONTENT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRewardedContentDetails")]
		public UserRewardedContentAssignedTargetingOptionDetails UserRewardedContentDetails { get; set; }
		
		/// <summary>
		/// Video player size targeting option details. This will be populated in the video_player_size_details field when targeting_type is `TARGETING_TYPE_VIDEO_PLAYER_SIZE`. Explicitly targeting all options is not supported. Remove all video player size targeting options to achieve this effect.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoPlayerSizeDetails")]
		public VideoPlayerSizeAssignedTargetingOptionDetails VideoPlayerSizeDetails { get; set; }
		
		/// <summary>
		/// Assigned viewability targeting option details. This will be populated in the viewability_details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_VIEWABILITY`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewabilityDetails")]
		public ViewabilityAssignedTargetingOptionDetails ViewabilityDetails { get; set; }
	}
	
	/// <summary>
	/// Assigned audience group targeting option details. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_AUDIENCE_GROUP`. The relation between each group is UNION, except for excluded_first_and_third_party_audience_group and excluded_google_audience_group, of which COMPLEMENT is used as an INTERSECTION with other groups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudienceGroupAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Details of first and third party audience group. All first and third party audience targeting settings are logically ‘OR’ of each other.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedFirstAndThirdPartyAudienceGroup")]
		public FirstAndThirdPartyAudienceGroup ExcludedFirstAndThirdPartyAudienceGroup { get; set; }
		
		/// <summary>
		/// Details of Google audience group. All Google audience targeting settings are logically ‘OR’ of each other.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedGoogleAudienceGroup")]
		public GoogleAudienceGroup ExcludedGoogleAudienceGroup { get; set; }
		
		/// <summary>
		/// Details of combined audience group. All combined audience targeting settings are logically ‘OR’ of each other.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedCombinedAudienceGroup")]
		public CombinedAudienceGroup IncludedCombinedAudienceGroup { get; set; }
		
		/// <summary>
		/// Details of custom list group. All custom list targeting settings are logically ‘OR’ of each other.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedCustomListGroup")]
		public CustomListGroup IncludedCustomListGroup { get; set; }
		
		/// <summary>
		/// The first and third party audience ids and recencies of included first and third party audience groups. Each first and third party audience group contains first and third party audience ids only. The relation between each first and third party audience group is INTERSECTION, and the result is UNION'ed with other audience groups. Repeated groups with same settings will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedFirstAndThirdPartyAudienceGroups")]
		public FirstAndThirdPartyAudienceGroup[] IncludedFirstAndThirdPartyAudienceGroups { get; set; }
		
		/// <summary>
		/// Details of Google audience group. All Google audience targeting settings are logically ‘OR’ of each other.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="includedGoogleAudienceGroup")]
		public GoogleAudienceGroup IncludedGoogleAudienceGroup { get; set; }
	}
	
	/// <summary>
	/// Details of first and third party audience group. All first and third party audience targeting settings are logically ‘OR’ of each other.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FirstAndThirdPartyAudienceGroup
	{
		
		/// <summary>
		/// Required. All first and third party audience targeting settings in first and third party audience group. Repeated settings with same id are not allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public FirstAndThirdPartyAudienceTargetingSetting[] Settings { get; set; }
	}
	
	/// <summary>
	/// Details of first and third party audience targeting setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FirstAndThirdPartyAudienceTargetingSetting
	{
		
		/// <summary>
		/// Required. First and third party audience id of the first and third party audience targeting setting. This id is first_and_third_party_audience_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstAndThirdPartyAudienceId")]
		public string FirstAndThirdPartyAudienceId { get; set; }
		
		/// <summary>
		/// The recency of the first and third party audience targeting setting. Only applicable to first party audiences, otherwise will be ignored. For more info, refer to https://support.google.com/displayvideo/answer/2949947#recency When unspecified, no recency limit will be used.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="recency")]
		public System.Nullable<FirstAndThirdPartyAudienceTargetingSettingRecency> Recency { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FirstAndThirdPartyAudienceTargetingSettingRecency
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_NO_LIMIT = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_1_MINUTE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_5_MINUTES = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_10_MINUTES = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_15_MINUTES = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_30_MINUTES = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_1_HOUR = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_2_HOURS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_3_HOURS = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_6_HOURS = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_12_HOURS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_1_DAY = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_2_DAYS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_3_DAYS = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_5_DAYS = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_7_DAYS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_10_DAYS = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_14_DAYS = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_15_DAYS = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_21_DAYS = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_28_DAYS = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_30_DAYS = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_40_DAYS = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_45_DAYS = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_60_DAYS = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_90_DAYS = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_120_DAYS = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_180_DAYS = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_270_DAYS = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RECENCY_365_DAYS = 29,
	}
	
	/// <summary>
	/// Details of Google audience group. All Google audience targeting settings are logically ‘OR’ of each other.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAudienceGroup
	{
		
		/// <summary>
		/// Required. All Google audience targeting settings in Google audience group. Repeated settings with same id will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public GoogleAudienceTargetingSetting[] Settings { get; set; }
	}
	
	/// <summary>
	/// Details of Google audience targeting setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAudienceTargetingSetting
	{
		
		/// <summary>
		/// Required. Google audience id of the Google audience targeting setting. This id is google_audience_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleAudienceId")]
		public string GoogleAudienceId { get; set; }
	}
	
	/// <summary>
	/// Details of combined audience group. All combined audience targeting settings are logically ‘OR’ of each other.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CombinedAudienceGroup
	{
		
		/// <summary>
		/// Required. All combined audience targeting settings in combined audience group. Repeated settings with same id will be ignored. The number of combined audience settings should be no more than five, error will be thrown otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public CombinedAudienceTargetingSetting[] Settings { get; set; }
	}
	
	/// <summary>
	/// Details of combined audience targeting setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CombinedAudienceTargetingSetting
	{
		
		/// <summary>
		/// Required. Combined audience id of combined audience targeting setting. This id is combined_audience_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="combinedAudienceId")]
		public string CombinedAudienceId { get; set; }
	}
	
	/// <summary>
	/// Details of custom list group. All custom list targeting settings are logically ‘OR’ of each other.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomListGroup
	{
		
		/// <summary>
		/// Required. All custom list targeting settings in custom list group. Repeated settings with same id will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="settings")]
		public CustomListTargetingSetting[] Settings { get; set; }
	}
	
	/// <summary>
	/// Details of custom list targeting setting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomListTargetingSetting
	{
		
		/// <summary>
		/// Required. Custom id of custom list targeting setting. This id is custom_list_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customListId")]
		public string CustomListId { get; set; }
	}
	
	/// <summary>
	/// Details for audio content type assigned targeting option. This will be populated in the audio_content_type_details field when targeting_type is `TARGETING_TYPE_AUDIO_CONTENT_TYPE`. Explicitly targeting all options is not supported. Remove all audio content type targeting options to achieve this effect.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioContentTypeAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The audio content type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioContentType")]
		public System.Nullable<AudioContentTypeAssignedTargetingOptionDetailsAudioContentType> AudioContentType { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_AUDIO_CONTENT_TYPE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AudioContentTypeAssignedTargetingOptionDetailsAudioContentType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO_CONTENT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO_CONTENT_TYPE_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO_CONTENT_TYPE_MUSIC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO_CONTENT_TYPE_BROADCAST = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIO_CONTENT_TYPE_PODCAST = 4,
	}
	
	/// <summary>
	/// Represents an assigned authorized seller status. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS`. If a resource does not have an `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` assigned targeting option, it is using the "Authorized Direct Sellers and Resellers" option.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizedSellerStatusAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The authorized seller status to target.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizedSellerStatus")]
		public System.Nullable<AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus> AuthorizedSellerStatus { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZED_SELLER_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZED_SELLER_STATUS_AUTHORIZED_DIRECT_SELLERS_ONLY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUTHORIZED_SELLER_STATUS_AUTHORIZED_AND_NON_PARTICIPATING_PUBLISHERS = 2,
	}
	
	/// <summary>
	/// Details for assigned browser targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_BROWSER`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BrowserAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the browser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicates if this option is being negatively targeted. All assigned browser targeting options on the same resource must have the same value for this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negative")]
		public System.Nullable<System.Boolean> Negative { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_BROWSER`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	/// <summary>
	/// Details for assigned Business chain targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_BUSINESS_CHAIN`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BusinessChainAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of a business chain, e.g. "KFC", "Chase Bank".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required. The radius of the area around the business chain that will be targeted. The units of the radius are specified by proximity_radius_unit. Must be 1 to 800 if unit is `DISTANCE_UNIT_KILOMETERS` and 1 to 500 if unit is `DISTANCE_UNIT_MILES`. The minimum increment for both cases is 0.1. Inputs will be rounded to the nearest acceptable value if it is too granular, e.g. 15.57 will become 15.6.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proximityRadiusAmount")]
		public System.Nullable<System.Double> ProximityRadiusAmount { get; set; }
		
		/// <summary>
		/// Required. The unit of distance by which the targeting radius is measured.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proximityRadiusUnit")]
		public System.Nullable<BusinessChainAssignedTargetingOptionDetailsProximityRadiusUnit> ProximityRadiusUnit { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_BUSINESS_CHAIN`. Accepted business chain targeting option IDs can be retrieved using SearchTargetingOptions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum BusinessChainAssignedTargetingOptionDetailsProximityRadiusUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISTANCE_UNIT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISTANCE_UNIT_MILES = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISTANCE_UNIT_KILOMETERS = 2,
	}
	
	/// <summary>
	/// Details for assigned carrier and ISP targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_CARRIER_AND_ISP`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CarrierAndIspAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the carrier or ISP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicates if this option is being negatively targeted. All assigned carrier and ISP targeting options on the same resource must have the same value for this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negative")]
		public System.Nullable<System.Boolean> Negative { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_CARRIER_AND_ISP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	/// <summary>
	/// Assigned category targeting option details. This will be populated in the category_details field when targeting_type is `TARGETING_TYPE_CATEGORY`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CategoryAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicates if this option is being negatively targeted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negative")]
		public System.Nullable<System.Boolean> Negative { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CATEGORY`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	/// <summary>
	/// Details for assigned channel targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_CHANNEL`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ChannelAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. ID of the channel. Should refer to the channel ID field on a [Partner-owned channel](partners.channels#Channel.FIELDS.channel_id) or [advertiser-owned channel](advertisers.channels#Channel.FIELDS.channel_id) resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// Indicates if this option is being negatively targeted. For advertiser level assigned targeting option, this field must be true.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negative")]
		public System.Nullable<System.Boolean> Negative { get; set; }
	}
	
	/// <summary>
	/// Details for content duration assigned targeting option. This will be populated in the content_duration_details field when targeting_type is `TARGETING_TYPE_CONTENT_DURATION`. Explicitly targeting all options is not supported. Remove all content duration targeting options to achieve this effect.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentDurationAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The content duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentDuration")]
		public System.Nullable<ContentDurationAssignedTargetingOptionDetailsContentDuration> ContentDuration { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CONTENT_DURATION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ContentDurationAssignedTargetingOptionDetailsContentDuration
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_DURATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_DURATION_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_DURATION_0_TO_1_MIN = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_DURATION_1_TO_5_MIN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_DURATION_5_TO_15_MIN = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_DURATION_15_TO_30_MIN = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_DURATION_30_TO_60_MIN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_DURATION_OVER_60_MIN = 7,
	}
	
	/// <summary>
	/// Details for content genre assigned targeting option. This will be populated in the content_genre_details field when targeting_type is `TARGETING_TYPE_CONTENT_GENRE`. Explicitly targeting all options is not supported. Remove all content genre targeting options to achieve this effect.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentGenreAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the content genre.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicates if this option is being negatively targeted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negative")]
		public System.Nullable<System.Boolean> Negative { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CONTENT_GENRE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	/// <summary>
	/// Assigned content instream position targeting option details. This will be populated in the content_instream_position_details field when targeting_type is `TARGETING_TYPE_CONTENT_INSTREAM_POSITION`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentInstreamPositionAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default. Possible values are: * `AD_TYPE_VIDEO`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_VIDEO_DEFAULT`. * `AD_TYPE_AUDIO`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_AUDIO_DEFAULT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adType")]
		public System.Nullable<ContentInstreamPositionAssignedTargetingOptionDetailsAdType> AdType { get; set; }
		
		/// <summary>
		/// Required. The content instream position for video or audio ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentInstreamPosition")]
		public System.Nullable<ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition> ContentInstreamPosition { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CONTENT_INSTREAM_POSITION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ContentInstreamPositionAssignedTargetingOptionDetailsAdType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_TYPE_DISPLAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_TYPE_VIDEO = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_TYPE_AUDIO = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_INSTREAM_POSITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_INSTREAM_POSITION_PRE_ROLL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_INSTREAM_POSITION_MID_ROLL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_INSTREAM_POSITION_POST_ROLL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_INSTREAM_POSITION_UNKNOWN = 4,
	}
	
	/// <summary>
	/// Assigned content outstream position targeting option details. This will be populated in the content_outstream_position_details field when targeting_type is `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentOutstreamPositionAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default. Possible values are: * `AD_TYPE_DISPLAY`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_DISPLAY_DEFAULT`. * `AD_TYPE_VIDEO`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_VIDEO_DEFAULT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adType")]
		public ContentInstreamPositionAssignedTargetingOptionDetailsAdType AdType { get; set; }
		
		/// <summary>
		/// Required. The content outstream position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentOutstreamPosition")]
		public System.Nullable<ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition> ContentOutstreamPosition { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_OUTSTREAM_POSITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_OUTSTREAM_POSITION_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_OUTSTREAM_POSITION_IN_ARTICLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_OUTSTREAM_POSITION_IN_BANNER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_OUTSTREAM_POSITION_IN_FEED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_OUTSTREAM_POSITION_INTERSTITIAL = 5,
	}
	
	/// <summary>
	/// Details for content stream type assigned targeting option. This will be populated in the content_stream_type_details field when targeting_type is `TARGETING_TYPE_CONTENT_STREAM_TYPE`. Explicitly targeting all options is not supported. Remove all content stream type targeting options to achieve this effect.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentStreamTypeAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The content stream type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentStreamType")]
		public System.Nullable<ContentStreamTypeAssignedTargetingOptionDetailsContentStreamType> ContentStreamType { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_CONTENT_STREAM_TYPE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ContentStreamTypeAssignedTargetingOptionDetailsContentStreamType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_STREAM_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_LIVE_STREAM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_ON_DEMAND = 2,
	}
	
	/// <summary>
	/// Representation of a segment of time defined on a specific day of the week and with a start and end time. The time represented by `start_hour` must be before the time represented by `end_hour`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DayAndTimeAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The day of the week for this day and time targeting setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dayOfWeek")]
		public System.Nullable<DayAndTimeAssignedTargetingOptionDetailsDayOfWeek> DayOfWeek { get; set; }
		
		/// <summary>
		/// Required. The end hour for day and time targeting. Must be between 1 (1 hour after start of day) and 24 (end of day).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endHour")]
		public System.Nullable<System.Int32> EndHour { get; set; }
		
		/// <summary>
		/// Required. The start hour for day and time targeting. Must be between 0 (start of day) and 23 (1 hour before end of day).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startHour")]
		public System.Nullable<System.Int32> StartHour { get; set; }
		
		/// <summary>
		/// Required. The mechanism used to determine which timezone to use for this day and time targeting setting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZoneResolution")]
		public System.Nullable<DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution> TimeZoneResolution { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DayAndTimeAssignedTargetingOptionDetailsDayOfWeek
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DAY_OF_WEEK_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MONDAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TUESDAY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEDNESDAY = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THURSDAY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRIDAY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SATURDAY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUNDAY = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DayAndTimeAssignedTargetingOptionDetailsTimeZoneResolution
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_ZONE_RESOLUTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_ZONE_RESOLUTION_END_USER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_ZONE_RESOLUTION_ADVERTISER = 2,
	}
	
	/// <summary>
	/// Assigned device make and model targeting option details. This will be populated in the device_make_model_details field when targeting_type is `TARGETING_TYPE_DEVICE_MAKE_MODEL`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceMakeModelAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the device make and model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicates if this option is being negatively targeted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negative")]
		public System.Nullable<System.Boolean> Negative { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_DEVICE_MAKE_MODEL`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	/// <summary>
	/// Targeting details for device type. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_DEVICE_TYPE`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceTypeAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The display name of the device type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceType")]
		public System.Nullable<DeviceTypeAssignedTargetingOptionDetailsDeviceType> DeviceType { get; set; }
		
		/// <summary>
		/// Required. ID of the device type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DeviceTypeAssignedTargetingOptionDetailsDeviceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_TYPE_COMPUTER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_TYPE_CONNECTED_TV = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_TYPE_SMART_PHONE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEVICE_TYPE_TABLET = 4,
	}
	
	/// <summary>
	/// Targeting details for digital content label. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DigitalContentLabelAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the digital content label rating tier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentRatingTier")]
		public System.Nullable<DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier> ContentRatingTier { get; set; }
		
		/// <summary>
		/// Required. ID of the digital content label to be EXCLUDED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedTargetingOptionId")]
		public string ExcludedTargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_RATING_TIER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_RATING_TIER_UNRATED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_RATING_TIER_GENERAL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_RATING_TIER_PARENTAL_GUIDANCE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_RATING_TIER_TEENS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONTENT_RATING_TIER_MATURE = 5,
	}
	
	/// <summary>
	/// Assigned environment targeting option details. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_ENVIRONMENT`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnvironmentAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The serving environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public System.Nullable<EnvironmentAssignedTargetingOptionDetailsEnvironment> Environment { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_ENVIRONMENT` (e.g., "508010" for targeting the `ENVIRONMENT_WEB_OPTIMIZED` option).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum EnvironmentAssignedTargetingOptionDetailsEnvironment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENVIRONMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENVIRONMENT_WEB_OPTIMIZED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENVIRONMENT_WEB_NOT_OPTIMIZED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENVIRONMENT_APP = 3,
	}
	
	/// <summary>
	/// Details for assigned exchange targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_EXCHANGE`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExchangeAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_EXCHANGE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	/// <summary>
	/// Details for assigned gender targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_GENDER`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenderAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The gender of the audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public System.Nullable<GenderAssignedTargetingOptionDetailsGender> Gender { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_GENDER`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GenderAssignedTargetingOptionDetailsGender
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENDER_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENDER_MALE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENDER_FEMALE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GENDER_UNKNOWN = 3,
	}
	
	/// <summary>
	/// Details for assigned geographic region targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_GEO_REGION`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeoRegionAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the geographic region (e.g., "Ontario, Canada").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The type of geographic region targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoRegionType")]
		public System.Nullable<GeoRegionAssignedTargetingOptionDetailsGeoRegionType> GeoRegionType { get; set; }
		
		/// <summary>
		/// Indicates if this option is being negatively targeted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negative")]
		public System.Nullable<System.Boolean> Negative { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_GEO_REGION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GeoRegionAssignedTargetingOptionDetailsGeoRegionType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_UNKNOWN = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_OTHER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_COUNTRY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_REGION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_TERRITORY = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_PROVINCE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_STATE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_PREFECTURE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_GOVERNORATE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_CANTON = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_UNION_TERRITORY = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_AUTONOMOUS_COMMUNITY = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_DMA_REGION = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_METRO = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_CONGRESSIONAL_DISTRICT = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_COUNTY = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_MUNICIPALITY = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_CITY = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_POSTAL_CODE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_DEPARTMENT = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_AIRPORT = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_TV_REGION = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_OKRUG = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_BOROUGH = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_CITY_REGION = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_ARRONDISSEMENT = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_NEIGHBORHOOD = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_UNIVERSITY = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GEO_REGION_TYPE_DISTRICT = 28,
	}
	
	/// <summary>
	/// Details for assigned household income targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_HOUSEHOLD_INCOME`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HouseholdIncomeAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The household income of the audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="householdIncome")]
		public System.Nullable<HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome> HouseholdIncome { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_HOUSEHOLD_INCOME`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUSEHOLD_INCOME_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUSEHOLD_INCOME_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUSEHOLD_INCOME_LOWER_50_PERCENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUSEHOLD_INCOME_TOP_41_TO_50_PERCENT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUSEHOLD_INCOME_TOP_31_TO_40_PERCENT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUSEHOLD_INCOME_TOP_21_TO_30_PERCENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUSEHOLD_INCOME_TOP_11_TO_20_PERCENT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOUSEHOLD_INCOME_TOP_10_PERCENT = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AssignedTargetingOptionInheritance
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INHERITANCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NOT_INHERITED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INHERITED_FROM_PARTNER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INHERITED_FROM_ADVERTISER = 3,
	}
	
	/// <summary>
	/// Targeting details for inventory source. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_INVENTORY_SOURCE`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventorySourceAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. ID of the inventory source. Should refer to the inventory_source_id field of an InventorySource resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySourceId")]
		public string InventorySourceId { get; set; }
	}
	
	/// <summary>
	/// Targeting details for inventory source group. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_INVENTORY_SOURCE_GROUP`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventorySourceGroupAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. ID of the inventory source group. Should refer to the inventory_source_group_id field of an InventorySourceGroup resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySourceGroupId")]
		public string InventorySourceGroupId { get; set; }
	}
	
	/// <summary>
	/// Details for assigned keyword targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_KEYWORD`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class KeywordAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The keyword, for example `car insurance`. Positive keyword cannot be offensive word. Must be UTF-8 encoded with a maximum size of 255 bytes. Maximum number of characters is 80. Maximum number of words is 10.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keyword")]
		public string Keyword { get; set; }
		
		/// <summary>
		/// Indicates if this option is being negatively targeted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negative")]
		public System.Nullable<System.Boolean> Negative { get; set; }
	}
	
	/// <summary>
	/// Details for assigned language targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_LANGUAGE`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LanguageAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the language (e.g., "French").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicates if this option is being negatively targeted. All assigned language targeting options on the same resource must have the same value for this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negative")]
		public System.Nullable<System.Boolean> Negative { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_LANGUAGE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	/// <summary>
	/// Details for native content position assigned targeting option. This will be populated in the native_content_position_details field when targeting_type is `TARGETING_TYPE_NATIVE_CONTENT_POSITION`. Explicitly targeting all options is not supported. Remove all native content position targeting options to achieve this effect.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NativeContentPositionAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The content position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentPosition")]
		public System.Nullable<NativeContentPositionAssignedTargetingOptionDetailsContentPosition> ContentPosition { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_NATIVE_CONTENT_POSITION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum NativeContentPositionAssignedTargetingOptionDetailsContentPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_CONTENT_POSITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_CONTENT_POSITION_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_CONTENT_POSITION_IN_ARTICLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_CONTENT_POSITION_IN_FEED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_CONTENT_POSITION_PERIPHERAL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NATIVE_CONTENT_POSITION_RECOMMENDATION = 5,
	}
	
	/// <summary>
	/// Targeting details for negative keyword list. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NegativeKeywordListAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. ID of the negative keyword list. Should refer to the negative_keyword_list_id field of a NegativeKeywordList resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negativeKeywordListId")]
		public string NegativeKeywordListId { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable Open Measurement enabled inventory type. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_OMID`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OmidAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The type of Open Measurement enabled inventory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="omid")]
		public System.Nullable<OmidAssignedTargetingOptionDetailsOmid> Omid { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_OMID`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OmidAssignedTargetingOptionDetailsOmid
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OMID_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OMID_FOR_MOBILE_DISPLAY_ADS = 1,
	}
	
	/// <summary>
	/// On screen position targeting option details. This will be populated in the on_screen_position_details field when targeting_type is `TARGETING_TYPE_ON_SCREEN_POSITION`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OnScreenPositionAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The ad type to target. Only applicable to insertion order targeting and new line items supporting the specified ad type will inherit this targeting option by default. Possible values are: * `AD_TYPE_DISPLAY`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_DISPLAY_DEFAULT`. * `AD_TYPE_VIDEO`, the setting will be inherited by new line item when line_item_type is `LINE_ITEM_TYPE_VIDEO_DEFAULT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adType")]
		public ContentInstreamPositionAssignedTargetingOptionDetailsAdType AdType { get; set; }
		
		/// <summary>
		/// Output only. The on screen position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onScreenPosition")]
		public System.Nullable<OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition> OnScreenPosition { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_ON_SCREEN_POSITION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_SCREEN_POSITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_SCREEN_POSITION_UNKNOWN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_SCREEN_POSITION_ABOVE_THE_FOLD = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ON_SCREEN_POSITION_BELOW_THE_FOLD = 3,
	}
	
	/// <summary>
	/// Assigned operating system targeting option details. This will be populated in the operating_system_details field when targeting_type is `TARGETING_TYPE_OPERATING_SYSTEM`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperatingSystemAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Indicates if this option is being negatively targeted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negative")]
		public System.Nullable<System.Boolean> Negative { get; set; }
		
		/// <summary>
		/// Required. The targeting option ID populated in targeting_option_id field when targeting_type is `TARGETING_TYPE_OPERATING_SYSTEM`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	/// <summary>
	/// Details for assigned parental status targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_PARENTAL_STATUS`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParentalStatusAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The parental status of the audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentalStatus")]
		public System.Nullable<ParentalStatusAssignedTargetingOptionDetailsParentalStatus> ParentalStatus { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_PARENTAL_STATUS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParentalStatusAssignedTargetingOptionDetailsParentalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARENTAL_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARENTAL_STATUS_PARENT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARENTAL_STATUS_NOT_A_PARENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARENTAL_STATUS_UNKNOWN = 3,
	}
	
	/// <summary>
	/// Details for assigned POI targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_POI`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PoiAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of a POI, e.g. "Times Square", "Space Needle", followed by its full address if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. Latitude of the POI rounding to 6th decimal place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// Output only. Longitude of the POI rounding to 6th decimal place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
		
		/// <summary>
		/// Required. The radius of the area around the POI that will be targeted. The units of the radius are specified by proximity_radius_unit. Must be 1 to 800 if unit is `DISTANCE_UNIT_KILOMETERS` and 1 to 500 if unit is `DISTANCE_UNIT_MILES`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proximityRadiusAmount")]
		public System.Nullable<System.Double> ProximityRadiusAmount { get; set; }
		
		/// <summary>
		/// Required. The unit of distance by which the targeting radius is measured.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proximityRadiusUnit")]
		public BusinessChainAssignedTargetingOptionDetailsProximityRadiusUnit ProximityRadiusUnit { get; set; }
		
		/// <summary>
		/// Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_POI`. Accepted POI targeting option IDs can be retrieved using `targetingTypes.targetingOptions.search`. If targeting a specific latitude/longitude coordinate removed from an address or POI name, you can generate the necessary targeting option ID by rounding the desired coordinate values to the 6th decimal place, removing the decimals, and concatenating the string values separated by a semicolon. For example, you can target the latitude/longitude pair of 40.7414691, -74.003387 using the targeting option ID "40741469;-74003387". **Upon** **creation, this field value will be updated to append a semicolon and** **alphanumerical hash value if only latitude/longitude coordinates are** **provided.**
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	/// <summary>
	/// Targeting details for proximity location list. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_PROXIMITY_LOCATION_LIST`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ProximityLocationListAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. ID of the proximity location list. Should refer to the location_list_id field of a LocationList resource whose type is `TARGETING_LOCATION_TYPE_PROXIMITY`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proximityLocationListId")]
		public string ProximityLocationListId { get; set; }
		
		/// <summary>
		/// Required. Radius range for proximity location list. This represents the size of the area around a chosen location that will be targeted. `All` proximity location targeting under a single resource must have the same radius range value. Set this value to match any existing targeting. If updated, this field will change the radius range for all proximity targeting under the resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="proximityRadiusRange")]
		public System.Nullable<ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange> ProximityRadiusRange { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ProximityLocationListAssignedTargetingOptionDetailsProximityRadiusRange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROXIMITY_RADIUS_RANGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROXIMITY_RADIUS_RANGE_SMALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROXIMITY_RADIUS_RANGE_MEDIUM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROXIMITY_RADIUS_RANGE_LARGE = 3,
	}
	
	/// <summary>
	/// Targeting details for regional location list. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_REGIONAL_LOCATION_LIST`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RegionalLocationListAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Indicates if this option is being negatively targeted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negative")]
		public System.Nullable<System.Boolean> Negative { get; set; }
		
		/// <summary>
		/// Required. ID of the regional location list. Should refer to the location_list_id field of a LocationList resource whose type is `TARGETING_LOCATION_TYPE_REGIONAL`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionalLocationListId")]
		public string RegionalLocationListId { get; set; }
	}
	
	/// <summary>
	/// Targeting details for sensitive category. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SensitiveCategoryAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. ID of the sensitive category to be EXCLUDED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedTargetingOptionId")]
		public string ExcludedTargetingOptionId { get; set; }
		
		/// <summary>
		/// Output only. An enum for the DV360 Sensitive category content classifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sensitiveCategory")]
		public System.Nullable<SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory> SensitiveCategory { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_ADULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_DEROGATORY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_DOWNLOADS_SHARING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_WEAPONS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_GAMBLING = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_VIOLENCE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_SUGGESTIVE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_PROFANITY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_ALCOHOL = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_DRUGS = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_TOBACCO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_POLITICS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_RELIGION = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_TRAGEDY = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_TRANSPORTATION_ACCIDENTS = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_SENSITIVE_SOCIAL_ISSUES = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SENSITIVE_CATEGORY_SHOCKING = 17,
	}
	
	/// <summary>
	/// Details for assigned sub-exchange targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_SUB_EXCHANGE`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubExchangeAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_SUB_EXCHANGE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AssignedTargetingOptionTargetingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_CHANNEL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_APP_CATEGORY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_APP = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_URL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_DAY_AND_TIME = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_AGE_RANGE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_REGIONAL_LOCATION_LIST = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_PROXIMITY_LOCATION_LIST = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_GENDER = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_VIDEO_PLAYER_SIZE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_USER_REWARDED_CONTENT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_PARENTAL_STATUS = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_CONTENT_INSTREAM_POSITION = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_DEVICE_TYPE = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_AUDIENCE_GROUP = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_BROWSER = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_HOUSEHOLD_INCOME = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_ON_SCREEN_POSITION = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_THIRD_PARTY_VERIFIER = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_ENVIRONMENT = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_CARRIER_AND_ISP = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_OPERATING_SYSTEM = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_DEVICE_MAKE_MODEL = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_KEYWORD = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_NEGATIVE_KEYWORD_LIST = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_VIEWABILITY = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_CATEGORY = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_INVENTORY_SOURCE = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_LANGUAGE = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_AUTHORIZED_SELLER_STATUS = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_GEO_REGION = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_INVENTORY_SOURCE_GROUP = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_EXCHANGE = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_SUB_EXCHANGE = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_POI = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_BUSINESS_CHAIN = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_CONTENT_DURATION = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_CONTENT_STREAM_TYPE = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_NATIVE_CONTENT_POSITION = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_OMID = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_AUDIO_CONTENT_TYPE = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_TYPE_CONTENT_GENRE = 45,
	}
	
	/// <summary>
	/// Assigned third party verifier targeting option details. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_THIRD_PARTY_VERIFIER`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThirdPartyVerifierAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Details of Adloox settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adloox")]
		public Adloox Adloox { get; set; }
		
		/// <summary>
		/// Details of DoubleVerify settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="doubleVerify")]
		public DoubleVerify DoubleVerify { get; set; }
		
		/// <summary>
		/// Details of Integral Ad Science settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integralAdScience")]
		public IntegralAdScience IntegralAdScience { get; set; }
	}
	
	/// <summary>
	/// Details of DoubleVerify settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DoubleVerify
	{
		
		/// <summary>
		/// Details of DoubleVerify star ratings settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appStarRating")]
		public DoubleVerifyAppStarRating AppStarRating { get; set; }
		
		/// <summary>
		/// Avoid bidding on apps with the age rating.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avoidedAgeRatings")]
		public string[] AvoidedAgeRatings { get; set; }
		
		/// <summary>
		/// Settings for brand safety controls.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="brandSafetyCategories")]
		public DoubleVerifyBrandSafetyCategories BrandSafetyCategories { get; set; }
		
		/// <summary>
		/// The custom segment ID provided by DoubleVerify. The ID must start with "51" and consist of eight digits. Custom segment ID cannot be specified along with any of the following fields: * brand_safety_categories * avoided_age_ratings * app_star_rating * fraud_invalid_traffic
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customSegmentId")]
		public string CustomSegmentId { get; set; }
		
		/// <summary>
		/// Details of DoubleVerify display viewability settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayViewability")]
		public DoubleVerifyDisplayViewability DisplayViewability { get; set; }
		
		/// <summary>
		/// DoubleVerify Fraud & Invalid Traffic settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fraudInvalidTraffic")]
		public DoubleVerifyFraudInvalidTraffic FraudInvalidTraffic { get; set; }
		
		/// <summary>
		/// Details of DoubleVerify video viewability settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoViewability")]
		public DoubleVerifyVideoViewability VideoViewability { get; set; }
	}
	
	/// <summary>
	/// Details of DoubleVerify star ratings settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DoubleVerifyAppStarRating
	{
		
		/// <summary>
		/// Avoid bidding on apps with insufficient star ratings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avoidInsufficientStarRating")]
		public System.Nullable<System.Boolean> AvoidInsufficientStarRating { get; set; }
		
		/// <summary>
		/// Avoid bidding on apps with the star ratings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avoidedStarRating")]
		public System.Nullable<DoubleVerifyAppStarRatingAvoidedStarRating> AvoidedStarRating { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DoubleVerifyAppStarRatingAvoidedStarRating
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_STAR_RATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_STAR_RATE_1_POINT_5_LESS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_STAR_RATE_2_LESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_STAR_RATE_2_POINT_5_LESS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_STAR_RATE_3_LESS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_STAR_RATE_3_POINT_5_LESS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_STAR_RATE_4_LESS = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APP_STAR_RATE_4_POINT_5_LESS = 7,
	}
	
	/// <summary>
	/// Settings for brand safety controls.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DoubleVerifyBrandSafetyCategories
	{
		
		/// <summary>
		/// Unknown or unrateable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avoidUnknownBrandSafetyCategory")]
		public System.Nullable<System.Boolean> AvoidUnknownBrandSafetyCategory { get; set; }
		
		/// <summary>
		/// Brand safety high severity avoidance categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avoidedHighSeverityCategories")]
		public string[] AvoidedHighSeverityCategories { get; set; }
		
		/// <summary>
		/// Brand safety medium severity avoidance categories.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avoidedMediumSeverityCategories")]
		public string[] AvoidedMediumSeverityCategories { get; set; }
	}
	
	/// <summary>
	/// Details of DoubleVerify display viewability settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DoubleVerifyDisplayViewability
	{
		
		/// <summary>
		/// Target web and app inventory to maximize IAB viewable rate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iab")]
		public System.Nullable<DoubleVerifyDisplayViewabilityIab> Iab { get; set; }
		
		/// <summary>
		/// Target web and app inventory to maximize 100% viewable duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewableDuring")]
		public System.Nullable<DoubleVerifyDisplayViewabilityViewableDuring> ViewableDuring { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DoubleVerifyDisplayViewabilityIab
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWED_RATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWED_RATE_80_PERCENT_HIGHER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWED_RATE_75_PERCENT_HIGHER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWED_RATE_70_PERCENT_HIGHER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWED_RATE_65_PERCENT_HIGHER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWED_RATE_60_PERCENT_HIGHER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWED_RATE_55_PERCENT_HIGHER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWED_RATE_50_PERCENT_HIGHER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWED_RATE_40_PERCENT_HIGHER = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWED_RATE_30_PERCENT_HIGHER = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DoubleVerifyDisplayViewabilityViewableDuring
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVERAGE_VIEW_DURATION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVERAGE_VIEW_DURATION_5_SEC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVERAGE_VIEW_DURATION_10_SEC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AVERAGE_VIEW_DURATION_15_SEC = 3,
	}
	
	/// <summary>
	/// DoubleVerify Fraud & Invalid Traffic settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DoubleVerifyFraudInvalidTraffic
	{
		
		/// <summary>
		/// Insufficient Historical Fraud & IVT Stats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avoidInsufficientOption")]
		public System.Nullable<System.Boolean> AvoidInsufficientOption { get; set; }
		
		/// <summary>
		/// Avoid Sites and Apps with historical Fraud & IVT.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="avoidedFraudOption")]
		public System.Nullable<DoubleVerifyFraudInvalidTrafficAvoidedFraudOption> AvoidedFraudOption { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DoubleVerifyFraudInvalidTrafficAvoidedFraudOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FRAUD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_IMPRESSION_FRAUD_100 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_IMPRESSION_FRAUD_50 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_IMPRESSION_FRAUD_25 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_IMPRESSION_FRAUD_10 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_IMPRESSION_FRAUD_8 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_IMPRESSION_FRAUD_6 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_IMPRESSION_FRAUD_4 = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_IMPRESSION_FRAUD_2 = 8,
	}
	
	/// <summary>
	/// Details of DoubleVerify video viewability settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DoubleVerifyVideoViewability
	{
		
		/// <summary>
		/// Target inventory to maximize impressions with 400x300 or greater player size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="playerImpressionRate")]
		public System.Nullable<DoubleVerifyVideoViewabilityPlayerImpressionRate> PlayerImpressionRate { get; set; }
		
		/// <summary>
		/// Target web inventory to maximize IAB viewable rate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoIab")]
		public System.Nullable<DoubleVerifyVideoViewabilityVideoIab> VideoIab { get; set; }
		
		/// <summary>
		/// Target web inventory to maximize fully viewable rate.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoViewableRate")]
		public System.Nullable<DoubleVerifyVideoViewabilityVideoViewableRate> VideoViewableRate { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DoubleVerifyVideoViewabilityPlayerImpressionRate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAYER_SIZE_400X300_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAYER_SIZE_400X300_95 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAYER_SIZE_400X300_70 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAYER_SIZE_400X300_25 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLAYER_SIZE_400X300_5 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DoubleVerifyVideoViewabilityVideoIab
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_IAB_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWABILITY_80_PERCENT_HIGHER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWABILITY_75_PERCENT_HIGHER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWABILITY_70_PERCENT_HIGHER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWABILITY_65_PERCENT_HIHGER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWABILITY_60_PERCENT_HIGHER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWABILITY_55_PERCENT_HIHGER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWABILITY_50_PERCENT_HIGHER = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWABILITY_40_PERCENT_HIHGER = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IAB_VIEWABILITY_30_PERCENT_HIHGER = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum DoubleVerifyVideoViewabilityVideoViewableRate
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_VIEWABLE_RATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWED_PERFORMANCE_40_PERCENT_HIGHER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWED_PERFORMANCE_35_PERCENT_HIGHER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWED_PERFORMANCE_30_PERCENT_HIGHER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWED_PERFORMANCE_25_PERCENT_HIGHER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWED_PERFORMANCE_20_PERCENT_HIGHER = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWED_PERFORMANCE_10_PERCENT_HIGHER = 6,
	}
	
	/// <summary>
	/// Details of Integral Ad Science settings.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IntegralAdScience
	{
		
		/// <summary>
		/// The custom segment ID provided by Integral Ad Science. The ID must be between `1000001` and `1999999`, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customSegmentId")]
		public string[] CustomSegmentId { get; set; }
		
		/// <summary>
		/// Display Viewability section (applicable to display line items only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayViewability")]
		public System.Nullable<IntegralAdScienceDisplayViewability> DisplayViewability { get; set; }
		
		/// <summary>
		/// Brand Safety - **Unrateable**.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeUnrateable")]
		public System.Nullable<System.Boolean> ExcludeUnrateable { get; set; }
		
		/// <summary>
		/// Ad Fraud settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedAdFraudRisk")]
		public System.Nullable<IntegralAdScienceExcludedAdFraudRisk> ExcludedAdFraudRisk { get; set; }
		
		/// <summary>
		/// Brand Safety - **Adult content**.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedAdultRisk")]
		public System.Nullable<IntegralAdScienceExcludedAdultRisk> ExcludedAdultRisk { get; set; }
		
		/// <summary>
		/// Brand Safety - **Alcohol**.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedAlcoholRisk")]
		public System.Nullable<IntegralAdScienceExcludedAlcoholRisk> ExcludedAlcoholRisk { get; set; }
		
		/// <summary>
		/// Brand Safety - **Drugs**.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedDrugsRisk")]
		public System.Nullable<IntegralAdScienceExcludedDrugsRisk> ExcludedDrugsRisk { get; set; }
		
		/// <summary>
		/// Brand Safety - **Gambling**.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedGamblingRisk")]
		public System.Nullable<IntegralAdScienceExcludedGamblingRisk> ExcludedGamblingRisk { get; set; }
		
		/// <summary>
		/// Brand Safety - **Hate speech**.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedHateSpeechRisk")]
		public System.Nullable<IntegralAdScienceExcludedHateSpeechRisk> ExcludedHateSpeechRisk { get; set; }
		
		/// <summary>
		/// Brand Safety - **Illegal downloads**.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedIllegalDownloadsRisk")]
		public System.Nullable<IntegralAdScienceExcludedIllegalDownloadsRisk> ExcludedIllegalDownloadsRisk { get; set; }
		
		/// <summary>
		/// Brand Safety - **Offensive language**.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedOffensiveLanguageRisk")]
		public System.Nullable<IntegralAdScienceExcludedOffensiveLanguageRisk> ExcludedOffensiveLanguageRisk { get; set; }
		
		/// <summary>
		/// Brand Safety - **Violence**.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludedViolenceRisk")]
		public System.Nullable<IntegralAdScienceExcludedViolenceRisk> ExcludedViolenceRisk { get; set; }
		
		/// <summary>
		/// True advertising quality (applicable to Display line items only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="traqScoreOption")]
		public System.Nullable<IntegralAdScienceTraqScoreOption> TraqScoreOption { get; set; }
		
		/// <summary>
		/// Video Viewability Section (applicable to video line items only).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoViewability")]
		public System.Nullable<IntegralAdScienceVideoViewability> VideoViewability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntegralAdScienceDisplayViewability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_VIEWABILITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_VIEWABILITY_40 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_VIEWABILITY_50 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_VIEWABILITY_60 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_VIEWABILITY_70 = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntegralAdScienceExcludedAdFraudRisk
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPICIOUS_ACTIVITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPICIOUS_ACTIVITY_HR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPICIOUS_ACTIVITY_HMR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntegralAdScienceExcludedAdultRisk
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADULT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADULT_HR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADULT_HMR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntegralAdScienceExcludedAlcoholRisk
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALCOHOL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALCOHOL_HR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ALCOHOL_HMR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntegralAdScienceExcludedDrugsRisk
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRUGS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRUGS_HR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DRUGS_HMR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntegralAdScienceExcludedGamblingRisk
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GAMBLING_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GAMBLING_HR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GAMBLING_HMR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntegralAdScienceExcludedHateSpeechRisk
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HATE_SPEECH_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HATE_SPEECH_HR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HATE_SPEECH_HMR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntegralAdScienceExcludedIllegalDownloadsRisk
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ILLEGAL_DOWNLOADS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ILLEGAL_DOWNLOADS_HR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ILLEGAL_DOWNLOADS_HMR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntegralAdScienceExcludedOffensiveLanguageRisk
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFENSIVE_LANGUAGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFENSIVE_LANGUAGE_HR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OFFENSIVE_LANGUAGE_HMR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntegralAdScienceExcludedViolenceRisk
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIOLENCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIOLENCE_HR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIOLENCE_HMR = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntegralAdScienceTraqScoreOption
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAQ_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAQ_250 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAQ_500 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAQ_600 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAQ_700 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAQ_750 = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAQ_875 = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TRAQ_1000 = 7,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum IntegralAdScienceVideoViewability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_VIEWABILITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_VIEWABILITY_40 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_VIEWABILITY_50 = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_VIEWABILITY_60 = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_VIEWABILITY_70 = 4,
	}
	
	/// <summary>
	/// Details for assigned URL targeting option. This will be populated in the details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_URL`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UrlAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Indicates if this option is being negatively targeted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negative")]
		public System.Nullable<System.Boolean> Negative { get; set; }
		
		/// <summary>
		/// Required. The URL, for example `example.com`. DV360 supports two levels of subdirectory targeting, for example `www.example.com/one-subdirectory-level/second-level`, and five levels of subdomain targeting, for example `five.four.three.two.one.example.com`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	/// <summary>
	/// User rewarded content targeting option details. This will be populated in the user_rewarded_content_details field when targeting_type is `TARGETING_TYPE_USER_REWARDED_CONTENT`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserRewardedContentAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_USER_REWARDED_CONTENT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
		
		/// <summary>
		/// Output only. User rewarded content status for video ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRewardedContent")]
		public System.Nullable<UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent> UserRewardedContent { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_REWARDED_CONTENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_REWARDED_CONTENT_USER_REWARDED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_REWARDED_CONTENT_NOT_USER_REWARDED = 2,
	}
	
	/// <summary>
	/// Video player size targeting option details. This will be populated in the video_player_size_details field when targeting_type is `TARGETING_TYPE_VIDEO_PLAYER_SIZE`. Explicitly targeting all options is not supported. Remove all video player size targeting options to achieve this effect.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoPlayerSizeAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The targeting_option_id field when targeting_type is `TARGETING_TYPE_VIDEO_PLAYER_SIZE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
		
		/// <summary>
		/// Required. The video player size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoPlayerSize")]
		public System.Nullable<VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize> VideoPlayerSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_PLAYER_SIZE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_PLAYER_SIZE_SMALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_PLAYER_SIZE_LARGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_PLAYER_SIZE_HD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIDEO_PLAYER_SIZE_UNKNOWN = 4,
	}
	
	/// <summary>
	/// Assigned viewability targeting option details. This will be populated in the viewability_details field of an AssignedTargetingOption when targeting_type is `TARGETING_TYPE_VIEWABILITY`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ViewabilityAssignedTargetingOptionDetails
	{
		
		/// <summary>
		/// Required. The targeting_option_id of a TargetingOption of type `TARGETING_TYPE_VIEWABILITY` (e.g., "509010" for targeting the `VIEWABILITY_10_PERCENT_OR_MORE` option).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
		
		/// <summary>
		/// Required. The predicted viewability percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewability")]
		public System.Nullable<ViewabilityAssignedTargetingOptionDetailsViewability> Viewability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ViewabilityAssignedTargetingOptionDetailsViewability
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWABILITY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWABILITY_10_PERCENT_OR_MORE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWABILITY_20_PERCENT_OR_MORE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWABILITY_30_PERCENT_OR_MORE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWABILITY_40_PERCENT_OR_MORE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWABILITY_50_PERCENT_OR_MORE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWABILITY_60_PERCENT_OR_MORE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWABILITY_70_PERCENT_OR_MORE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWABILITY_80_PERCENT_OR_MORE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		VIEWABILITY_90_PERCENT_OR_MORE = 9,
	}
	
	/// <summary>
	/// A single assigned user role, which defines a user's authorized interaction with a specified partner or advertiser.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AssignedUserRole
	{
		
		/// <summary>
		/// The ID of the advertiser that the assigend user role applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Output only. The ID of the assigned user role.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedUserRoleId")]
		public string AssignedUserRoleId { get; set; }
		
		/// <summary>
		/// The ID of the partner that the assigned user role applies to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerId")]
		public string PartnerId { get; set; }
		
		/// <summary>
		/// Required. The user role to assign to a user for the entity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRole")]
		public System.Nullable<AssignedUserRoleUserRole> UserRole { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum AssignedUserRoleUserRole
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		USER_ROLE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADMIN_PARTNER_CLIENT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_PLANNER = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_PLANNER_LIMITED = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STANDARD_PARTNER_CLIENT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READ_ONLY = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REPORTING_ONLY = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LIMITED_REPORTING_ONLY = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_ADMIN = 11,
	}
	
	/// <summary>
	/// Represents a targetable audio content type. This will be populated in the audio_content_type_details field when targeting_type is `TARGETING_TYPE_AUDIO_CONTENT_TYPE`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioContentTypeTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The audio content type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioContentType")]
		public AudioContentTypeAssignedTargetingOptionDetailsAudioContentType AudioContentType { get; set; }
	}
	
	/// <summary>
	/// The length an audio or a video has been played.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AudioVideoOffset
	{
		
		/// <summary>
		/// The offset in percentage of the audio or video duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="percentage")]
		public string Percentage { get; set; }
		
		/// <summary>
		/// The offset in seconds from the start of the audio or video.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seconds")]
		public string Seconds { get; set; }
	}
	
	/// <summary>
	/// Response message for AdvertiserService.AuditAdvertiser.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuditAdvertiserResponse
	{
		
		/// <summary>
		/// The number of individual targeting options from the following targeting types that are assigned to a line item under this advertiser. These individual targeting options count towards the limit of 4500000 ad group targeting options per advertiser. Qualifying Targeting types: * Channels, URLs, apps, and collections * Demographic * Google Audiences, including Affinity, Custom Affinity, and In-market audiences * Inventory source * Keyword * Mobile app category * User lists * Video targeting * Viewability
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adGroupCriteriaCount")]
		public string AdGroupCriteriaCount { get; set; }
		
		/// <summary>
		/// The number of individual targeting options from the following targeting types that are assigned to a line item under this advertiser. These individual targeting options count towards the limit of 900000 campaign targeting options per advertiser. Qualifying Targeting types: * Position * Browser * Connection speed * Day and time * Device and operating system * Digital content label * Sensitive categories * Environment * Geography, including business chains and proximity * ISP * Language * Third-party verification
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignCriteriaCount")]
		public string CampaignCriteriaCount { get; set; }
		
		/// <summary>
		/// The number of channels created under this advertiser. These channels count towards the limit of 1000 channels per advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelsCount")]
		public string ChannelsCount { get; set; }
		
		/// <summary>
		/// The number of negative keyword lists created under this advertiser. These negative keyword lists count towards the limit of 20 negative keyword lists per advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negativeKeywordListsCount")]
		public string NegativeKeywordListsCount { get; set; }
		
		/// <summary>
		/// The number of negatively targeted channels created under this advertiser. These negatively targeted channels count towards the limit of 5 negatively targeted channels per advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negativelyTargetedChannelsCount")]
		public string NegativelyTargetedChannelsCount { get; set; }
		
		/// <summary>
		/// The number of ACTIVE and PAUSED campaigns under this advertiser. These campaigns count towards the limit of 9999 campaigns per advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usedCampaignsCount")]
		public string UsedCampaignsCount { get; set; }
		
		/// <summary>
		/// The number of ACTIVE, PAUSED and DRAFT insertion orders under this advertiser. These insertion orders count towards the limit of 9999 insertion orders per advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usedInsertionOrdersCount")]
		public string UsedInsertionOrdersCount { get; set; }
		
		/// <summary>
		/// The number of ACTIVE, PAUSED, and DRAFT line items under this advertiser. These line items count towards the limit of 9999 line items per advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="usedLineItemsCount")]
		public string UsedLineItemsCount { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable authorized seller status. This will be populated in the authorized_seller_status_details field when targeting_type is `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class AuthorizedSellerStatusTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The authorized seller status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizedSellerStatus")]
		public AuthorizedSellerStatusAssignedTargetingOptionDetailsAuthorizedSellerStatus AuthorizedSellerStatus { get; set; }
	}
	
	/// <summary>
	/// Settings that control the bid strategy. Bid strategy determines the bid price.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BiddingStrategy
	{
		
		/// <summary>
		/// A strategy that uses a fixed bidding price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fixedBid")]
		public FixedBidStrategy FixedBid { get; set; }
		
		/// <summary>
		/// A strategy that automatically adjusts the bid to optimize a specified performance goal while spending the full budget.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maximizeSpendAutoBid")]
		public MaximizeSpendBidStrategy MaximizeSpendAutoBid { get; set; }
		
		/// <summary>
		/// A strategy that automatically adjusts the bid to meet or beat a specified performance goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceGoalAutoBid")]
		public PerformanceGoalBidStrategy PerformanceGoalAutoBid { get; set; }
	}
	
	/// <summary>
	/// A strategy that uses a fixed bidding price.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FixedBidStrategy
	{
		
		/// <summary>
		/// The fixed bid amount, in micros of the advertiser's currency. For insertion order entity, bid_amount_micros should be set as 0. For line item entity, bid_amount_micros must be greater than or equal to billable unit of the given currency and smaller than or equal to the upper limit 1000000000. For example, 1500000 represents 1.5 standard units of the currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidAmountMicros")]
		public string BidAmountMicros { get; set; }
	}
	
	/// <summary>
	/// A strategy that automatically adjusts the bid to optimize a specified performance goal while spending the full budget.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MaximizeSpendBidStrategy
	{
		
		/// <summary>
		/// The ID of the Custom Bidding Algorithm used by this strategy. Only applicable when performance_goal_type is set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customBiddingAlgorithmId")]
		public string CustomBiddingAlgorithmId { get; set; }
		
		/// <summary>
		/// The maximum average CPM that may be bid, in micros of the advertiser's currency. Must be greater than or equal to a billable unit of the given currency. For example, 1500000 represents 1.5 standard units of the currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAverageCpmBidAmountMicros")]
		public string MaxAverageCpmBidAmountMicros { get; set; }
		
		/// <summary>
		/// Required. The type of the performance goal that the bidding strategy tries to minimize while spending the full budget. `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM` is not supported for this strategy.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceGoalType")]
		public System.Nullable<MaximizeSpendBidStrategyPerformanceGoalType> PerformanceGoalType { get; set; }
		
		/// <summary>
		/// Whether the strategy takes deal floor prices into account.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="raiseBidForDeals")]
		public System.Nullable<System.Boolean> RaiseBidForDeals { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MaximizeSpendBidStrategyPerformanceGoalType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CIVA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_IVO_TEN = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_AV_VIEWED = 7,
	}
	
	/// <summary>
	/// A strategy that automatically adjusts the bid to meet or beat a specified performance goal.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PerformanceGoalBidStrategy
	{
		
		/// <summary>
		/// The ID of the Custom Bidding Algorithm used by this strategy. Only applicable when performance_goal_type is set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customBiddingAlgorithmId")]
		public string CustomBiddingAlgorithmId { get; set; }
		
		/// <summary>
		/// The maximum average CPM that may be bid, in micros of the advertiser's currency. Must be greater than or equal to a billable unit of the given currency. Not applicable when performance_goal_type is set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM`. For example, 1500000 represents 1.5 standard units of the currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAverageCpmBidAmountMicros")]
		public string MaxAverageCpmBidAmountMicros { get; set; }
		
		/// <summary>
		/// Required. The performance goal the bidding strategy will attempt to meet or beat, in micros of the advertiser's currency or in micro of the ROAS (Return On Advertising Spend) value which is also based on advertiser's currency. Must be greater than or equal to a billable unit of the given currency and smaller or equal to upper bounds. Each performance_goal_type has its upper bound: * when performance_goal_type is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA`, upper bound is 10000.00 USD. * when performance_goal_type is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC`, upper bound is 1000.00 USD. * when performance_goal_type is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM`, upper bound is 1000.00 USD. * when performance_goal_type is `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`, upper bound is 1000.00 and lower bound is 0.01. Example: If set to `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM`, the bid price will be based on the probability that each available impression will be viewable. For example, if viewable CPM target is $2 and an impression is 40% likely to be viewable, the bid price will be $0.80 CPM (40% of $2). For example, 1500000 represents 1.5 standard units of the currency or ROAS value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceGoalAmountMicros")]
		public string PerformanceGoalAmountMicros { get; set; }
		
		/// <summary>
		/// Required. The type of the performance goal that the bidding strategy will try to meet or beat. For line item level usage, the value must be one of: * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPA` * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CPC` * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_VIEWABLE_CPM` * `BIDDING_STRATEGY_PERFORMANCE_GOAL_TYPE_CUSTOM_ALGO`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceGoalType")]
		public MaximizeSpendBidStrategyPerformanceGoalType PerformanceGoalType { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable browser. This will be populated in the browser_details field when targeting_type is `TARGETING_TYPE_BROWSER`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BrowserTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the browser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Summarized information of an individual campaign budget.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BudgetSummary
	{
		
		/// <summary>
		/// Corresponds to the external_budget_id of a campaign budget. If the value is not set in the campaign budget, this field will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalBudgetId")]
		public string ExternalBudgetId { get; set; }
		
		/// <summary>
		/// The sum of charges made under this budget before taxes, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="preTaxAmountMicros")]
		public string PreTaxAmountMicros { get; set; }
		
		/// <summary>
		/// Google Payments Center supports searching and filtering on the component fields of this code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prismaCpeCode")]
		public PrismaCpeCode PrismaCpeCode { get; set; }
		
		/// <summary>
		/// The amount of tax applied to charges under this budget, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="taxAmountMicros")]
		public string TaxAmountMicros { get; set; }
		
		/// <summary>
		/// The total sum of charges made under this budget, including tax, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalAmountMicros")]
		public string TotalAmountMicros { get; set; }
	}
	
	/// <summary>
	/// Google Payments Center supports searching and filtering on the component fields of this code.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrismaCpeCode
	{
		
		/// <summary>
		/// The Prisma client code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prismaClientCode")]
		public string PrismaClientCode { get; set; }
		
		/// <summary>
		/// The Prisma estimate code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prismaEstimateCode")]
		public string PrismaEstimateCode { get; set; }
		
		/// <summary>
		/// The Prisma product code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prismaProductCode")]
		public string PrismaProductCode { get; set; }
	}
	
	/// <summary>
	/// Request message for BulkEditAdvertiserAssignedTargetingOptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkEditAdvertiserAssignedTargetingOptionsRequest
	{
		
		/// <summary>
		/// The assigned targeting options to create in batch, specified as a list of `CreateAssignedTargetingOptionsRequest`. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createRequests")]
		public CreateAssignedTargetingOptionsRequest[] CreateRequests { get; set; }
		
		/// <summary>
		/// The assigned targeting options to delete in batch, specified as a list of `DeleteAssignedTargetingOptionsRequest`. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteRequests")]
		public DeleteAssignedTargetingOptionsRequest[] DeleteRequests { get; set; }
	}
	
	/// <summary>
	/// A request listing which assigned targeting options of a given targeting type should be created and added.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAssignedTargetingOptionsRequest
	{
		
		/// <summary>
		/// Required. The assigned targeting options to create and add.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedTargetingOptions")]
		public AssignedTargetingOption[] AssignedTargetingOptions { get; set; }
		
		/// <summary>
		/// Required. Identifies the type of this assigned targeting option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingType")]
		public AssignedTargetingOptionTargetingType TargetingType { get; set; }
	}
	
	/// <summary>
	/// A request listing which assigned targeting options of a given targeting type should be deleted.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeleteAssignedTargetingOptionsRequest
	{
		
		/// <summary>
		/// Required. The assigned targeting option IDs to delete.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedTargetingOptionIds")]
		public string[] AssignedTargetingOptionIds { get; set; }
		
		/// <summary>
		/// Required. Identifies the type of this assigned targeting option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingType")]
		public AssignedTargetingOptionTargetingType TargetingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkEditAdvertiserAssignedTargetingOptionsResponse
	{
		
		/// <summary>
		/// The list of assigned targeting options that have been successfully created. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAssignedTargetingOptions")]
		public AssignedTargetingOption[] CreatedAssignedTargetingOptions { get; set; }
	}
	
	/// <summary>
	/// Request message for AssignedInventorySourceService.BulkEdit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkEditAssignedInventorySourcesRequest
	{
		
		/// <summary>
		/// The ID of the advertiser that owns the parent inventory source group. The parent partner does not have access to these assigned inventory sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// The assigned inventory sources to create in bulk, specified as a list of AssignedInventorySources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAssignedInventorySources")]
		public AssignedInventorySource[] CreatedAssignedInventorySources { get; set; }
		
		/// <summary>
		/// The IDs of the assigned inventory sources to delete in bulk, specified as a list of assigned_inventory_source_ids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletedAssignedInventorySources")]
		public string[] DeletedAssignedInventorySources { get; set; }
		
		/// <summary>
		/// The ID of the partner that owns the inventory source group. Only this partner has write access to these assigned inventory sources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerId")]
		public string PartnerId { get; set; }
	}
	
	/// <summary>
	/// Response message for AssignedInventorySourceService.BulkEdit.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkEditAssignedInventorySourcesResponse
	{
		
		/// <summary>
		/// The list of assigned inventory sources that have been successfully created. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedInventorySources")]
		public AssignedInventorySource[] AssignedInventorySources { get; set; }
	}
	
	/// <summary>
	/// Request message for AssignedLocationService.BulkEditAssignedLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkEditAssignedLocationsRequest
	{
		
		/// <summary>
		/// The assigned locations to create in bulk, specified as a list of AssignedLocation resources.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAssignedLocations")]
		public AssignedLocation[] CreatedAssignedLocations { get; set; }
		
		/// <summary>
		/// The IDs of the assigned locations to delete in bulk, specified as a list of assignedLocationId values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletedAssignedLocations")]
		public string[] DeletedAssignedLocations { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkEditAssignedLocationsResponse
	{
		
		/// <summary>
		/// The list of assigned locations that have been successfully created. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedLocations")]
		public AssignedLocation[] AssignedLocations { get; set; }
	}
	
	/// <summary>
	/// Request message for BulkEditAssignedUserRoles.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkEditAssignedUserRolesRequest
	{
		
		/// <summary>
		/// The assigned user roles to create in batch, specified as a list of AssignedUserRoles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAssignedUserRoles")]
		public AssignedUserRole[] CreatedAssignedUserRoles { get; set; }
		
		/// <summary>
		/// The assigned user roles to delete in batch, specified as a list of assigned_user_role_ids. The format of assigned_user_role_id is `entityType-entityid`, for example `partner-123`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletedAssignedUserRoles")]
		public string[] DeletedAssignedUserRoles { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkEditAssignedUserRolesResponse
	{
		
		/// <summary>
		/// The list of assigned user roles that have been successfully created. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAssignedUserRoles")]
		public AssignedUserRole[] CreatedAssignedUserRoles { get; set; }
	}
	
	/// <summary>
	/// Request message for BulkEditLineItemAssignedTargetingOptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkEditLineItemAssignedTargetingOptionsRequest
	{
		
		/// <summary>
		/// The assigned targeting options to create in batch, specified as a list of `CreateAssignedTargetingOptionsRequest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createRequests")]
		public CreateAssignedTargetingOptionsRequest[] CreateRequests { get; set; }
		
		/// <summary>
		/// The assigned targeting options to delete in batch, specified as a list of `DeleteAssignedTargetingOptionsRequest`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteRequests")]
		public DeleteAssignedTargetingOptionsRequest[] DeleteRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkEditLineItemAssignedTargetingOptionsResponse
	{
		
		/// <summary>
		/// The list of assigned targeting options that have been successfully created. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAssignedTargetingOptions")]
		public AssignedTargetingOption[] CreatedAssignedTargetingOptions { get; set; }
	}
	
	/// <summary>
	/// Request message for NegativeKeywordService.BulkEditNegativeKeywords.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkEditNegativeKeywordsRequest
	{
		
		/// <summary>
		/// The negative keywords to create in batch, specified as a list of NegativeKeywords.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdNegativeKeywords")]
		public NegativeKeyword[] CreatedNegativeKeywords { get; set; }
		
		/// <summary>
		/// The negative keywords to delete in batch, specified as a list of keyword_values.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletedNegativeKeywords")]
		public string[] DeletedNegativeKeywords { get; set; }
	}
	
	/// <summary>
	/// A negatively targeted keyword that belongs to a negative keyword list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NegativeKeyword
	{
		
		/// <summary>
		/// Required. Immutable. The negatively targeted keyword, for example `car insurance`. Must be UTF-8 encoded with a maximum size of 255 bytes. Maximum number of characters is 80. Maximum number of words is 10. Valid characters are restricted to ASCII characters only. The only URL-escaping permitted is for representing whitespace between words. Leading or trailing whitespace is ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="keywordValue")]
		public string KeywordValue { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the negative keyword.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Response message for NegativeKeywordService.BulkEditNegativeKeywords.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkEditNegativeKeywordsResponse
	{
		
		/// <summary>
		/// The list of negative keywords that have been successfully created. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negativeKeywords")]
		public NegativeKeyword[] NegativeKeywords { get; set; }
	}
	
	/// <summary>
	/// Request message for BulkEditPartnerAssignedTargetingOptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkEditPartnerAssignedTargetingOptionsRequest
	{
		
		/// <summary>
		/// The assigned targeting options to create in batch, specified as a list of `CreateAssignedTargetingOptionsRequest`. Supported targeting types: * `TARGETING_TYPE_CHANNEL`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createRequests")]
		public CreateAssignedTargetingOptionsRequest[] CreateRequests { get; set; }
		
		/// <summary>
		/// The assigned targeting options to delete in batch, specified as a list of `DeleteAssignedTargetingOptionsRequest`. Supported targeting types: * `TARGETING_TYPE_CHANNEL`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deleteRequests")]
		public DeleteAssignedTargetingOptionsRequest[] DeleteRequests { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkEditPartnerAssignedTargetingOptionsResponse
	{
		
		/// <summary>
		/// The list of assigned targeting options that have been successfully created. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdAssignedTargetingOptions")]
		public AssignedTargetingOption[] CreatedAssignedTargetingOptions { get; set; }
	}
	
	/// <summary>
	/// Request message for SiteService.BulkEditSites.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkEditSitesRequest
	{
		
		/// <summary>
		/// The ID of the advertiser that owns the parent channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// The sites to create in batch, specified as a list of Sites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createdSites")]
		public Site[] CreatedSites { get; set; }
		
		/// <summary>
		/// The sites to delete in batch, specified as a list of site url_or_app_ids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deletedSites")]
		public string[] DeletedSites { get; set; }
		
		/// <summary>
		/// The ID of the partner that owns the parent channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerId")]
		public string PartnerId { get; set; }
	}
	
	/// <summary>
	/// A single site. Sites are apps or websites belonging to a channel.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Site
	{
		
		/// <summary>
		/// Output only. The resource name of the site.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The app ID or URL of the site. Must be UTF-8 encoded with a maximum length of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="urlOrAppId")]
		public string UrlOrAppId { get; set; }
	}
	
	/// <summary>
	/// Response message for SiteService.BulkEditSites.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkEditSitesResponse
	{
		
		/// <summary>
		/// The list of sites that have been successfully created. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sites")]
		public Site[] Sites { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkListAdvertiserAssignedTargetingOptionsResponse
	{
		
		/// <summary>
		/// The list of assigned targeting options. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedTargetingOptions")]
		public AssignedTargetingOption[] AssignedTargetingOptions { get; set; }
		
		/// <summary>
		/// A token identifying the next page of results. This value should be specified as the pageToken in a subsequent BulkListAdvertiserAssignedTargetingOptionsRequest to fetch the next page of results. This token will be absent if there are no more assigned_targeting_options to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkListCampaignAssignedTargetingOptionsResponse
	{
		
		/// <summary>
		/// The list of assigned targeting options. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedTargetingOptions")]
		public AssignedTargetingOption[] AssignedTargetingOptions { get; set; }
		
		/// <summary>
		/// A token identifying the next page of results. This value should be specified as the pageToken in a subsequent BulkListCampaignAssignedTargetingOptionsRequest to fetch the next page of results. This token will be absent if there are no more assigned_targeting_options to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkListInsertionOrderAssignedTargetingOptionsResponse
	{
		
		/// <summary>
		/// The list of assigned targeting options. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedTargetingOptions")]
		public AssignedTargetingOption[] AssignedTargetingOptions { get; set; }
		
		/// <summary>
		/// A token identifying the next page of results. This value should be specified as the pageToken in a subsequent BulkListInsertionOrderAssignedTargetingOptionsRequest to fetch the next page of results. This token will be absent if there are no more assigned_targeting_options to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BulkListLineItemAssignedTargetingOptionsResponse
	{
		
		/// <summary>
		/// The list of assigned targeting options. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedTargetingOptions")]
		public AssignedTargetingOption[] AssignedTargetingOptions { get; set; }
		
		/// <summary>
		/// A token identifying the next page of results. This value should be specified as the pageToken in a subsequent BulkListLineItemAssignedTargetingOptionsRequest to fetch the next page of results. This token will be absent if there are no more assigned_targeting_options to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Search terms for Business Chain targeting options. At least one of the field should be populated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BusinessChainSearchTerms
	{
		
		/// <summary>
		/// The search query for the desired business chain. The query must be the full name of the business, e.g. "KFC", "mercedes-benz".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessChainQuery")]
		public string BusinessChainQuery { get; set; }
		
		/// <summary>
		/// The search query for the desired geo region, e.g. "Seattle", "United State".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="regionQuery")]
		public string RegionQuery { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable business chain within a geo region. This will be populated in the business_chain_details field when targeting_type is `TARGETING_TYPE_BUSINESS_CHAIN`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class BusinessChainTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the business chain, e.g. "KFC", "Chase Bank".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessChain")]
		public string BusinessChain { get; set; }
		
		/// <summary>
		/// Output only. The display name of the geographic region, e.g. "Ontario, Canada".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoRegion")]
		public string GeoRegion { get; set; }
		
		/// <summary>
		/// Output only. The type of the geographic region.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoRegionType")]
		public GeoRegionAssignedTargetingOptionDetailsGeoRegionType GeoRegionType { get; set; }
	}
	
	/// <summary>
	/// A single campaign.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Campaign
	{
		
		/// <summary>
		/// Output only. The unique ID of the advertiser the campaign belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// The list of budgets available to this campaign. If this field is not set, the campaign uses an unlimited budget.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignBudgets")]
		public CampaignBudget[] CampaignBudgets { get; set; }
		
		/// <summary>
		/// Settings that track the planned spend and duration of a campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignFlight")]
		public CampaignFlight CampaignFlight { get; set; }
		
		/// <summary>
		/// Settings that control the goal of a campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignGoal")]
		public CampaignGoal CampaignGoal { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the campaign. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public string CampaignId { get; set; }
		
		/// <summary>
		/// Required. The display name of the campaign. Must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required. Controls whether or not the insertion orders under this campaign can spend their budgets and bid on inventory. * Accepted values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. * For CreateCampaign method, `ENTITY_STATUS_ARCHIVED` is not allowed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityStatus")]
		public AdvertiserEntityStatus EntityStatus { get; set; }
		
		/// <summary>
		/// Settings that control the number of times a user may be shown with the same ad during a given time period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequencyCap")]
		public FrequencyCap FrequencyCap { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the campaign was last updated. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Settings that control how the campaign budget is allocated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CampaignBudget
	{
		
		/// <summary>
		/// Required. The total amount the linked insertion order segments can budget. The amount is in micros. Must be greater than 0. For example, 500000000 represents 500 standard units of the currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budgetAmountMicros")]
		public string BudgetAmountMicros { get; set; }
		
		/// <summary>
		/// The unique ID of the campaign budget. Assigned by the system. Do not set for new budgets. Must be included when updating or adding budgets to campaign_budgets. Otherwise, a new ID will be generated and assigned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budgetId")]
		public string BudgetId { get; set; }
		
		/// <summary>
		/// Required. Immutable. Specifies whether the budget is measured in currency or impressions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budgetUnit")]
		public System.Nullable<CampaignBudgetBudgetUnit> BudgetUnit { get; set; }
		
		/// <summary>
		/// A date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// Required. The display name of the budget. Must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Immutable. The ID identifying this budget to the external source. If this field is set and the invoice detail level of the corresponding billing profile is set to "Budget level PO", all impressions served against this budget will include this ID on the invoice. Must be unique under the campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalBudgetId")]
		public string ExternalBudgetId { get; set; }
		
		/// <summary>
		/// Required. The external source of the budget.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="externalBudgetSource")]
		public System.Nullable<CampaignBudgetExternalBudgetSource> ExternalBudgetSource { get; set; }
		
		/// <summary>
		/// Immutable. The ID used to group budgets to be included the same invoice. If this field is set and the invoice level of the corresponding billing profile is set to "Budget invoice grouping ID", all external_budget_id sharing the same invoice_grouping_id will be grouped in the same invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceGroupingId")]
		public string InvoiceGroupingId { get; set; }
		
		/// <summary>
		/// Settings specific to the Mediaocean Prisma tool.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prismaConfig")]
		public PrismaConfig PrismaConfig { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CampaignBudgetBudgetUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUDGET_UNIT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUDGET_UNIT_CURRENCY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BUDGET_UNIT_IMPRESSIONS = 2,
	}
	
	/// <summary>
	/// A date range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DateRange
	{
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endDate")]
		public Date EndDate { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startDate")]
		public Date StartDate { get; set; }
	}
	
	/// <summary>
	/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Date
	{
		
		/// <summary>
		/// Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="day")]
		public System.Nullable<System.Int32> Day { get; set; }
		
		/// <summary>
		/// Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="month")]
		public System.Nullable<System.Int32> Month { get; set; }
		
		/// <summary>
		/// Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="year")]
		public System.Nullable<System.Int32> Year { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CampaignBudgetExternalBudgetSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_BUDGET_SOURCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_BUDGET_SOURCE_NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXTERNAL_BUDGET_SOURCE_MEDIA_OCEAN = 2,
	}
	
	/// <summary>
	/// Settings specific to the Mediaocean Prisma tool.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PrismaConfig
	{
		
		/// <summary>
		/// Google Payments Center supports searching and filtering on the component fields of this code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prismaCpeCode")]
		public PrismaCpeCode PrismaCpeCode { get; set; }
		
		/// <summary>
		/// Required. The Prisma type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="prismaType")]
		public System.Nullable<PrismaConfigPrismaType> PrismaType { get; set; }
		
		/// <summary>
		/// Required. The entity allocated this budget (DSP, site, etc.).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="supplier")]
		public string Supplier { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PrismaConfigPrismaType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRISMA_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRISMA_TYPE_DISPLAY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRISMA_TYPE_SEARCH = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRISMA_TYPE_VIDEO = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRISMA_TYPE_AUDIO = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRISMA_TYPE_SOCIAL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRISMA_TYPE_FEE = 6,
	}
	
	/// <summary>
	/// Settings that track the planned spend and duration of a campaign.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CampaignFlight
	{
		
		/// <summary>
		/// A date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plannedDates")]
		public DateRange PlannedDates { get; set; }
		
		/// <summary>
		/// The amount the campaign is expected to spend for its given planned_dates. This will not limit serving, but will be used for tracking spend in the DV360 UI. The amount is in micros. Must be greater than or equal to 0. For example, 500000000 represents 500 standard units of the currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="plannedSpendAmountMicros")]
		public string PlannedSpendAmountMicros { get; set; }
	}
	
	/// <summary>
	/// Settings that control the goal of a campaign.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CampaignGoal
	{
		
		/// <summary>
		/// Required. The type of the campaign goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignGoalType")]
		public System.Nullable<CampaignGoalCampaignGoalType> CampaignGoalType { get; set; }
		
		/// <summary>
		/// Settings that control the performance goal of a campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceGoal")]
		public PerformanceGoal PerformanceGoal { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CampaignGoalCampaignGoalType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAMPAIGN_GOAL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAMPAIGN_GOAL_TYPE_APP_INSTALL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAMPAIGN_GOAL_TYPE_BRAND_AWARENESS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAMPAIGN_GOAL_TYPE_OFFLINE_ACTION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAMPAIGN_GOAL_TYPE_ONLINE_ACTION = 4,
	}
	
	/// <summary>
	/// Settings that control the performance goal of a campaign.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PerformanceGoal
	{
		
		/// <summary>
		/// The goal amount, in micros of the advertiser's currency. Applicable when performance_goal_type is one of: * `PERFORMANCE_GOAL_TYPE_CPM` * `PERFORMANCE_GOAL_TYPE_CPC` * `PERFORMANCE_GOAL_TYPE_CPA` * `PERFORMANCE_GOAL_TYPE_CPIAVC` * `PERFORMANCE_GOAL_TYPE_VCPM` For example 1500000 represents 1.5 standard units of the currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceGoalAmountMicros")]
		public string PerformanceGoalAmountMicros { get; set; }
		
		/// <summary>
		/// The decimal representation of the goal percentage in micros. Applicable when performance_goal_type is one of: * `PERFORMANCE_GOAL_TYPE_CTR` * `PERFORMANCE_GOAL_TYPE_VIEWABILITY` * `PERFORMANCE_GOAL_TYPE_CLICK_CVR` * `PERFORMANCE_GOAL_TYPE_IMPRESSION_CVR` * `PERFORMANCE_GOAL_TYPE_VTR` * `PERFORMANCE_GOAL_TYPE_AUDIO_COMPLETION_RATE` * `PERFORMANCE_GOAL_TYPE_VIDEO_COMPLETION_RATE` For example, 70000 represents 7% (decimal 0.07).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceGoalPercentageMicros")]
		public string PerformanceGoalPercentageMicros { get; set; }
		
		/// <summary>
		/// A key performance indicator (KPI) string, which can be empty. Must be UTF-8 encoded with a length of no more than 100 characters. Applicable when performance_goal_type is set to `PERFORMANCE_GOAL_TYPE_OTHER`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceGoalString")]
		public string PerformanceGoalString { get; set; }
		
		/// <summary>
		/// Required. The type of the performance goal.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceGoalType")]
		public System.Nullable<PerformanceGoalPerformanceGoalType> PerformanceGoalType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PerformanceGoalPerformanceGoalType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_GOAL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_GOAL_TYPE_CPM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_GOAL_TYPE_CPC = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_GOAL_TYPE_CPA = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_GOAL_TYPE_CTR = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_GOAL_TYPE_VIEWABILITY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_GOAL_TYPE_CPIAVC = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_GOAL_TYPE_CPE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_GOAL_TYPE_CLICK_CVR = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_GOAL_TYPE_IMPRESSION_CVR = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_GOAL_TYPE_VCPM = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_GOAL_TYPE_VTR = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_GOAL_TYPE_AUDIO_COMPLETION_RATE = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_GOAL_TYPE_VIDEO_COMPLETION_RATE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PERFORMANCE_GOAL_TYPE_OTHER = 14,
	}
	
	/// <summary>
	/// Settings that control the number of times a user may be shown with the same ad during a given time period.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FrequencyCap
	{
		
		/// <summary>
		/// The maximum number of times a user may be shown the same ad during this period. Must be greater than 0. Required when unlimited is `false` and max_views is not set.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxImpressions")]
		public System.Nullable<System.Int32> MaxImpressions { get; set; }
		
		/// <summary>
		/// The time unit in which the frequency cap will be applied. Required when unlimited is `false`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeUnit")]
		public System.Nullable<FrequencyCapTimeUnit> TimeUnit { get; set; }
		
		/// <summary>
		/// The number of time_unit the frequency cap will last. Required when unlimited is `false`. The following restrictions apply based on the value of time_unit: * `TIME_UNIT_LIFETIME` - this field is output only and will default to 1 * `TIME_UNIT_MONTHS` - must be between 1 and 2 * `TIME_UNIT_WEEKS` - must be between 1 and 4 * `TIME_UNIT_DAYS` - must be between 1 and 6 * `TIME_UNIT_HOURS` - must be between 1 and 23 * `TIME_UNIT_MINUTES` - must be between 1 and 59
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeUnitCount")]
		public System.Nullable<System.Int32> TimeUnitCount { get; set; }
		
		/// <summary>
		/// Whether unlimited frequency capping is applied. When this field is set to `true`, the remaining frequency cap fields are not applicable.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unlimited")]
		public System.Nullable<System.Boolean> Unlimited { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FrequencyCapTimeUnit
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_UNIT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_UNIT_LIFETIME = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_UNIT_MONTHS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_UNIT_WEEKS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_UNIT_DAYS = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_UNIT_HOURS = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TIME_UNIT_MINUTES = 6,
	}
	
	/// <summary>
	/// Represents a targetable carrier or ISP. This will be populated in the carrier_and_isp_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_CARRIER_AND_ISP`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CarrierAndIspTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the carrier or ISP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The type indicating if it's carrier or ISP.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<CarrierAndIspTargetingOptionDetailsType> Type { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CarrierAndIspTargetingOptionDetailsType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARRIER_AND_ISP_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARRIER_AND_ISP_TYPE_ISP = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CARRIER_AND_ISP_TYPE_CARRIER = 2,
	}
	
	/// <summary>
	/// Represents a targetable category. This will be populated in the category_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_CATEGORY`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CategoryTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the category.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// A single channel. Channels are custom groups of related websites and apps.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Channel
	{
		
		/// <summary>
		/// The ID of the advertiser that owns the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the channel. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channelId")]
		public string ChannelId { get; set; }
		
		/// <summary>
		/// Required. The display name of the channel. Must be UTF-8 encoded with a maximum length of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. Number of line items that are directly targeting this channel negatively.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negativelyTargetedLineItemCount")]
		public string NegativelyTargetedLineItemCount { get; set; }
		
		/// <summary>
		/// The ID of the partner that owns the channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerId")]
		public string PartnerId { get; set; }
		
		/// <summary>
		/// Output only. Number of line items that are directly targeting this channel positively.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="positivelyTargetedLineItemCount")]
		public string PositivelyTargetedLineItemCount { get; set; }
	}
	
	/// <summary>
	/// A Campaign Manager 360 tracking ad.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CmTrackingAd
	{
		
		/// <summary>
		/// The ad ID of the campaign manager 360 tracking Ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cmAdId")]
		public string CmAdId { get; set; }
		
		/// <summary>
		/// The creative ID of the campaign manager 360 tracking Ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cmCreativeId")]
		public string CmCreativeId { get; set; }
		
		/// <summary>
		/// The placement ID of the campaign manager 360 tracking Ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cmPlacementId")]
		public string CmPlacementId { get; set; }
	}
	
	/// <summary>
	/// Describes a combined audience resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CombinedAudience
	{
		
		/// <summary>
		/// Output only. The unique ID of the combined audience. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="combinedAudienceId")]
		public string CombinedAudienceId { get; set; }
		
		/// <summary>
		/// Output only. The display name of the combined audience. .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the combined audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// User consent status.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Consent
	{
		
		/// <summary>
		/// Represents consent for ad personalization.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adPersonalization")]
		public System.Nullable<ConsentAdPersonalization> AdPersonalization { get; set; }
		
		/// <summary>
		/// Represents consent for ad user data.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adUserData")]
		public ConsentAdPersonalization AdUserData { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ConsentAdPersonalization
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSENT_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSENT_STATUS_GRANTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CONSENT_STATUS_DENIED = 2,
	}
	
	/// <summary>
	/// Contact information defining a Customer Match audience member.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContactInfo
	{
		
		/// <summary>
		/// Country code of the member. Must also be set with the following fields: * hashed_first_name * hashed_last_name * zip_codes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="countryCode")]
		public string CountryCode { get; set; }
		
		/// <summary>
		/// A list of SHA256 hashed email of the member. Before hashing, remove all whitespace and make sure the string is all lowercase.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashedEmails")]
		public string[] HashedEmails { get; set; }
		
		/// <summary>
		/// SHA256 hashed first name of the member. Before hashing, remove all whitespace and make sure the string is all lowercase. Must also be set with the following fields: * country_code * hashed_last_name * zip_codes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashedFirstName")]
		public string HashedFirstName { get; set; }
		
		/// <summary>
		/// SHA256 hashed last name of the member. Before hashing, remove all whitespace and make sure the string is all lowercase. Must also be set with the following fields: * country_code * hashed_first_name * zip_codes
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashedLastName")]
		public string HashedLastName { get; set; }
		
		/// <summary>
		/// A list of SHA256 hashed phone numbers of the member. Before hashing, all phone numbers must be formatted using the [E.164 format](//en.wikipedia.org/wiki/E.164) and include the country calling code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hashedPhoneNumbers")]
		public string[] HashedPhoneNumbers { get; set; }
		
		/// <summary>
		/// A list of zip codes of the member. Must also be set with the following fields: * country_code * hashed_first_name * hashed_last_name
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="zipCodes")]
		public string[] ZipCodes { get; set; }
	}
	
	/// <summary>
	/// Wrapper message for a list of contact information defining Customer Match audience members.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContactInfoList
	{
		
		/// <summary>
		/// User consent status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consent")]
		public Consent Consent { get; set; }
		
		/// <summary>
		/// A list of ContactInfo objects defining Customer Match audience members. The size of members after splitting the contact_infos mustn't be greater than 500,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactInfos")]
		public ContactInfo[] ContactInfos { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable content duration. This will be populated in the content_duration_details field when targeting_type is `TARGETING_TYPE_CONTENT_DURATION`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentDurationTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The content duration.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentDuration")]
		public ContentDurationAssignedTargetingOptionDetailsContentDuration ContentDuration { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable content genre. This will be populated in the content_genre_details field when targeting_type is `TARGETING_TYPE_CONTENT_GENRE`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentGenreTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the content genre
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable content instream position, which could be used by video and audio ads. This will be populated in the content_instream_position_details field when targeting_type is `TARGETING_TYPE_CONTENT_INSTREAM_POSITION`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentInstreamPositionTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The content instream position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentInstreamPosition")]
		public ContentInstreamPositionAssignedTargetingOptionDetailsContentInstreamPosition ContentInstreamPosition { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable content outstream position, which could be used by display and video ads. This will be populated in the content_outstream_position_details field when targeting_type is `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentOutstreamPositionTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The content outstream position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentOutstreamPosition")]
		public ContentOutstreamPositionAssignedTargetingOptionDetailsContentOutstreamPosition ContentOutstreamPosition { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable content stream type. This will be populated in the content_stream_type_details field when targeting_type is `TARGETING_TYPE_CONTENT_STREAM_TYPE`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ContentStreamTypeTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The content stream type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentStreamType")]
		public ContentStreamTypeAssignedTargetingOptionDetailsContentStreamType ContentStreamType { get; set; }
	}
	
	/// <summary>
	/// Settings that control how conversions are counted. All post-click conversions will be counted. A percentage value can be set for post-view conversions counting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ConversionCountingConfig
	{
		
		/// <summary>
		/// The Floodlight activity configs used to track conversions. The number of conversions counted is the sum of all of the conversions counted by all of the Floodlight activity IDs specified in this field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightActivityConfigs")]
		public TrackingFloodlightActivityConfig[] FloodlightActivityConfigs { get; set; }
		
		/// <summary>
		/// The percentage of post-view conversions to count, in millis (1/1000 of a percent). Must be between 0 and 100000 inclusive. For example, to track 50% of the post-click conversions, set a value of 50000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postViewCountPercentageMillis")]
		public string PostViewCountPercentageMillis { get; set; }
	}
	
	/// <summary>
	/// Settings that control the behavior of a single Floodlight activity config.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TrackingFloodlightActivityConfig
	{
		
		/// <summary>
		/// Required. The ID of the Floodlight activity.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightActivityId")]
		public string FloodlightActivityId { get; set; }
		
		/// <summary>
		/// Required. The number of days after an ad has been clicked in which a conversion may be counted. Must be between 0 and 90 inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postClickLookbackWindowDays")]
		public System.Nullable<System.Int32> PostClickLookbackWindowDays { get; set; }
		
		/// <summary>
		/// Required. The number of days after an ad has been viewed in which a conversion may be counted. Must be between 0 and 90 inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="postViewLookbackWindowDays")]
		public System.Nullable<System.Int32> PostViewLookbackWindowDays { get; set; }
	}
	
	/// <summary>
	/// Counter event of the creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CounterEvent
	{
		
		/// <summary>
		/// Required. The name of the counter event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The name used to identify this counter event in reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportingName")]
		public string ReportingName { get; set; }
	}
	
	/// <summary>
	/// A request message for CreateAsset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAssetRequest
	{
		
		/// <summary>
		/// Required. The filename of the asset, including the file extension. The filename must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filename")]
		public string Filename { get; set; }
	}
	
	/// <summary>
	/// A response message for CreateAsset.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateAssetResponse
	{
		
		/// <summary>
		/// A single asset.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="asset")]
		public Asset Asset { get; set; }
	}
	
	/// <summary>
	/// Request message for [SdfDownloadTaskService.CreateSdfDownloadTask].
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreateSdfDownloadTaskRequest
	{
		
		/// <summary>
		/// The ID of the advertiser to download SDF for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// A filtering option that filters entities by their entity IDs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="idFilter")]
		public IdFilter IdFilter { get; set; }
		
		/// <summary>
		/// A filtering option for filtering on Inventory Source entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySourceFilter")]
		public InventorySourceFilter InventorySourceFilter { get; set; }
		
		/// <summary>
		/// A filtering option that filters on selected file types belonging to a chosen set of filter entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentEntityFilter")]
		public ParentEntityFilter ParentEntityFilter { get; set; }
		
		/// <summary>
		/// The ID of the partner to download SDF for.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerId")]
		public string PartnerId { get; set; }
		
		/// <summary>
		/// Required. The SDF version of the downloaded file. If set to `SDF_VERSION_UNSPECIFIED`, this will default to the version specified by the advertiser or partner identified by `root_id`. An advertiser inherits its SDF version from its partner unless configured otherwise.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public SdfConfigVersion Version { get; set; }
	}
	
	/// <summary>
	/// A filtering option that filters entities by their entity IDs.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class IdFilter
	{
		
		/// <summary>
		/// YouTube Ads to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adGroupAdIds")]
		public string[] AdGroupAdIds { get; set; }
		
		/// <summary>
		/// YouTube Ad Groups to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adGroupIds")]
		public string[] AdGroupIds { get; set; }
		
		/// <summary>
		/// Campaigns to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignIds")]
		public string[] CampaignIds { get; set; }
		
		/// <summary>
		/// Insertion Orders to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertionOrderIds")]
		public string[] InsertionOrderIds { get; set; }
		
		/// <summary>
		/// Line Items to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemIds")]
		public string[] LineItemIds { get; set; }
		
		/// <summary>
		/// Media Products to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaProductIds")]
		public string[] MediaProductIds { get; set; }
	}
	
	/// <summary>
	/// A filtering option for filtering on Inventory Source entities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventorySourceFilter
	{
		
		/// <summary>
		/// Inventory Sources to download by ID. All IDs must belong to the same Advertiser or Partner specified in CreateSdfDownloadTaskRequest. Leave empty to download all Inventory Sources for the selected Advertiser or Partner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySourceIds")]
		public string[] InventorySourceIds { get; set; }
	}
	
	/// <summary>
	/// A filtering option that filters on selected file types belonging to a chosen set of filter entities.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParentEntityFilter
	{
		
		/// <summary>
		/// Required. File types that will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileType")]
		public string[] FileType { get; set; }
		
		/// <summary>
		/// The IDs of the specified filter type. This is used to filter entities to fetch. If filter type is not `FILTER_TYPE_NONE`, at least one ID must be specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterIds")]
		public string[] FilterIds { get; set; }
		
		/// <summary>
		/// Required. Filter type used to filter fetched entities.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="filterType")]
		public System.Nullable<ParentEntityFilterFilterType> FilterType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ParentEntityFilterFilterType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILTER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILTER_TYPE_NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILTER_TYPE_ADVERTISER_ID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILTER_TYPE_CAMPAIGN_ID = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILTER_TYPE_MEDIA_PRODUCT_ID = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILTER_TYPE_INSERTION_ORDER_ID = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FILTER_TYPE_LINE_ITEM_ID = 6,
	}
	
	/// <summary>
	/// A single Creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Creative
	{
		
		/// <summary>
		/// Additional dimensions. Applicable when creative_type is one of: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE` * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_LIGHTBOX` * `CREATIVE_TYPE_PUBLISHER_HOSTED` If this field is specified, width_pixels and height_pixels are both required and must be greater than or equal to 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="additionalDimensions")]
		public Dimensions[] AdditionalDimensions { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the advertiser the creative belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Third-party HTML tracking tag to be appended to the creative tag.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appendedTag")]
		public string AppendedTag { get; set; }
		
		/// <summary>
		/// Required. Assets associated to this creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assets")]
		public AssetAssociation[] Assets { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the Campaign Manager 360 placement associated with the creative. This field is only applicable for creatives that are synced from Campaign Manager.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cmPlacementId")]
		public string CmPlacementId { get; set; }
		
		/// <summary>
		/// A Campaign Manager 360 tracking ad.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="cmTrackingAd")]
		public CmTrackingAd CmTrackingAd { get; set; }
		
		/// <summary>
		/// The IDs of companion creatives for a video creative. You can assign existing display creatives (with image or HTML5 assets) to serve surrounding the publisher's video player. Companions display around the video player while the video is playing and remain after the video has completed. Creatives contain additional dimensions can not be companion creatives. This field is only supported for following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="companionCreativeIds")]
		public string[] CompanionCreativeIds { get; set; }
		
		/// <summary>
		/// Counter events for a rich media creative. Counters track the number of times that a user interacts with any part of a rich media creative in a specified way (mouse-overs, mouse-outs, clicks, taps, data loading, keyboard entries, etc.). Any event that can be captured in the creative can be recorded as a counter. Leave it empty or unset for creatives containing image assets only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="counterEvents")]
		public CounterEvent[] CounterEvents { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the creative was created. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. A list of attributes of the creative that is generated by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeAttributes")]
		public string[] CreativeAttributes { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the creative. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeId")]
		public string CreativeId { get; set; }
		
		/// <summary>
		/// Required. Immutable. The type of the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeType")]
		public System.Nullable<CreativeCreativeType> CreativeType { get; set; }
		
		/// <summary>
		/// Dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimensions Dimensions { get; set; }
		
		/// <summary>
		/// Required. The display name of the creative. Must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. Indicates whether the creative is dynamic.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dynamic")]
		public System.Nullable<System.Boolean> Dynamic { get; set; }
		
		/// <summary>
		/// Required. Controls whether or not the creative can serve. Accepted values are: * `ENTITY_STATUS_ACTIVE` * `ENTITY_STATUS_ARCHIVED` * `ENTITY_STATUS_PAUSED`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityStatus")]
		public AdvertiserEntityStatus EntityStatus { get; set; }
		
		/// <summary>
		/// Required. Exit events for this creative. An exit (also known as a click tag) is any area in your creative that someone can click or tap to open an advertiser's landing page. Every creative must include at least one exit. You can add an exit to your creative in any of the following ways: * Use Google Web Designer's tap area. * Define a JavaScript variable called "clickTag". * Use the Enabler (Enabler.exit()) to track exits in rich media formats.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exitEvents")]
		public ExitEvent[] ExitEvents { get; set; }
		
		/// <summary>
		/// Optional. Indicates the creative will automatically expand on hover. Optional and only valid for third-party expandable creatives. Third-party expandable creatives are creatives with following hosting source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_EXPANDABLE`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expandOnHover")]
		public System.Nullable<System.Boolean> ExpandOnHover { get; set; }
		
		/// <summary>
		/// Optional. Specifies the expanding direction of the creative. Required and only valid for third-party expandable creatives. Third-party expandable creatives are creatives with following hosting source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_EXPANDABLE`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="expandingDirection")]
		public System.Nullable<CreativeExpandingDirection> ExpandingDirection { get; set; }
		
		/// <summary>
		/// Required. Indicates where the creative is hosted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="hostingSource")]
		public System.Nullable<CreativeHostingSource> HostingSource { get; set; }
		
		/// <summary>
		/// Output only. Indicates the third-party VAST tag creative requires HTML5 Video support. Output only and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_VIDEO`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="html5Video")]
		public System.Nullable<System.Boolean> Html5Video { get; set; }
		
		/// <summary>
		/// Indicates whether Integral Ad Science (IAS) campaign monitoring is enabled. To enable this for the creative, make sure the Advertiser.creative_config.ias_client_id has been set to your IAS client ID.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="iasCampaignMonitoring")]
		public System.Nullable<System.Boolean> IasCampaignMonitoring { get; set; }
		
		/// <summary>
		/// ID information used to link this creative to an external system. Must be UTF-8 encoded with a length of no more than 10,000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationCode")]
		public string IntegrationCode { get; set; }
		
		/// <summary>
		/// JavaScript measurement URL from supported third-party verification providers (ComScore, DoubleVerify, IAS, Moat). HTML script tags are not supported. This field is only writeable in following creative_type: * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_NATIVE_VIDEO`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="jsTrackerUrl")]
		public string JsTrackerUrl { get; set; }
		
		/// <summary>
		/// Output only. The IDs of the line items this creative is associated with. To associate a creative to a line item, use LineItem.creative_ids instead.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemIds")]
		public string[] LineItemIds { get; set; }
		
		/// <summary>
		/// Output only. Media duration of the creative. Applicable when creative_type is one of: * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_NATIVE_VIDEO` * `CREATIVE_TYPE_PUBLISHER_HOSTED`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mediaDuration")]
		public string MediaDuration { get; set; }
		
		/// <summary>
		/// Output only. Indicates the third-party audio creative supports MP3. Output only and only valid for third-party audio creatives. Third-party audio creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mp3Audio")]
		public System.Nullable<System.Boolean> Mp3Audio { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// User notes for this creative. Must be UTF-8 encoded with a length of no more than 20,000 characters.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="notes")]
		public string Notes { get; set; }
		
		/// <summary>
		/// OBA Icon for a Creative
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="obaIcon")]
		public ObaIcon ObaIcon { get; set; }
		
		/// <summary>
		/// Output only. Indicates the third-party audio creative supports OGG. Output only and only valid for third-party audio creatives. Third-party audio creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="oggAudio")]
		public System.Nullable<System.Boolean> OggAudio { get; set; }
		
		/// <summary>
		/// The length an audio or a video has been played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="progressOffset")]
		public AudioVideoOffset ProgressOffset { get; set; }
		
		/// <summary>
		/// Optional. Indicates that the creative relies on HTML5 to render properly. Optional and only valid for third-party tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requireHtml5")]
		public System.Nullable<System.Boolean> RequireHtml5 { get; set; }
		
		/// <summary>
		/// Optional. Indicates that the creative requires MRAID (Mobile Rich Media Ad Interface Definitions system). Set this if the creative relies on mobile gestures for interactivity, such as swiping or tapping. Optional and only valid for third-party tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requireMraid")]
		public System.Nullable<System.Boolean> RequireMraid { get; set; }
		
		/// <summary>
		/// Optional. Indicates that the creative will wait for a return ping for attribution. Only valid when using a Campaign Manager 360 tracking ad with a third-party ad server parameter and the ${DC_DBM_TOKEN} macro. Optional and only valid for third-party tag creatives or third-party VAST tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE` Third-party VAST tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="requirePingForAttribution")]
		public System.Nullable<System.Boolean> RequirePingForAttribution { get; set; }
		
		/// <summary>
		/// Review statuses for the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reviewStatus")]
		public ReviewStatusInfo ReviewStatus { get; set; }
		
		/// <summary>
		/// The length an audio or a video has been played.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skipOffset")]
		public AudioVideoOffset SkipOffset { get; set; }
		
		/// <summary>
		/// Whether the user can choose to skip a video creative. This field is only supported for the following creative_type: * `CREATIVE_TYPE_VIDEO`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="skippable")]
		public System.Nullable<System.Boolean> Skippable { get; set; }
		
		/// <summary>
		/// Optional. The original third-party tag used for the creative. Required and only valid for third-party tag creatives. Third-party tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_EXPANDABLE`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdPartyTag")]
		public string ThirdPartyTag { get; set; }
		
		/// <summary>
		/// Tracking URLs from third parties to track interactions with a video creative. This field is only supported for the following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_NATIVE_VIDEO`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="thirdPartyUrls")]
		public ThirdPartyUrl[] ThirdPartyUrls { get; set; }
		
		/// <summary>
		/// Timer custom events for a rich media creative. Timers track the time during which a user views and interacts with a specified part of a rich media creative. A creative can have multiple timer events, each timed independently. Leave it empty or unset for creatives containing image assets only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timerEvents")]
		public TimerEvent[] TimerEvents { get; set; }
		
		/// <summary>
		/// Tracking URLs for analytics providers or third-party ad technology vendors. The URLs must start with https (except on inventory that doesn't require SSL compliance). If using macros in your URL, use only macros supported by Display & Video 360. Standard URLs only, no IMG or SCRIPT tags. This field is only writeable in following creative_type: * `CREATIVE_TYPE_NATIVE` * `CREATIVE_TYPE_NATIVE_SITE_SQUARE` * `CREATIVE_TYPE_NATIVE_VIDEO`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="trackerUrls")]
		public string[] TrackerUrls { get; set; }
		
		/// <summary>
		/// Output only. Audio/Video transcodes. Display & Video 360 transcodes the main asset into a number of alternative versions that use different file formats or have different properties (resolution, audio bit rate, and video bit rate), each designed for specific video players or bandwidths. These transcodes give a publisher's system more options to choose from for each impression on your video and ensures that the appropriate file serves based on the viewer’s connection and screen size. This field is only supported in following creative_type: * `CREATIVE_TYPE_VIDEO` * `CREATIVE_TYPE_NATIVE_VIDEO` * `CREATIVE_TYPE_AUDIO`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transcodes")]
		public Transcode[] Transcodes { get; set; }
		
		/// <summary>
		/// A creative identifier provided by a registry that is unique across all platforms. This is part of the VAST 4.0 standard.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="universalAdId")]
		public UniversalAdId UniversalAdId { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the creative was last updated, either by the user or system (e.g. creative review). Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Optional. The URL of the VAST tag for a third-party VAST tag creative. Required and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_AUDIO` * `CREATIVE_TYPE_VIDEO`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vastTagUrl")]
		public string VastTagUrl { get; set; }
		
		/// <summary>
		/// Output only. Indicates the third-party VAST tag creative requires VPAID (Digital Video Player-Ad Interface). Output only and only valid for third-party VAST tag creatives. Third-party VAST tag creatives are creatives with following hosting_source: * `HOSTING_SOURCE_THIRD_PARTY` combined with following creative_type: * `CREATIVE_TYPE_VIDEO`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="vpaid")]
		public System.Nullable<System.Boolean> Vpaid { get; set; }
	}
	
	/// <summary>
	/// Dimensions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Dimensions
	{
		
		/// <summary>
		/// The height in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="heightPixels")]
		public System.Nullable<System.Int32> HeightPixels { get; set; }
		
		/// <summary>
		/// The width in pixels.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="widthPixels")]
		public System.Nullable<System.Int32> WidthPixels { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeCreativeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_TYPE_STANDARD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_TYPE_EXPANDABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_TYPE_VIDEO = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_TYPE_NATIVE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_TYPE_TEMPLATED_APP_INSTALL = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_TYPE_NATIVE_SITE_SQUARE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_TYPE_TEMPLATED_APP_INSTALL_INTERSTITIAL = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_TYPE_LIGHTBOX = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_TYPE_NATIVE_APP_INSTALL = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_TYPE_NATIVE_APP_INSTALL_SQUARE = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_TYPE_AUDIO = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_TYPE_PUBLISHER_HOSTED = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_TYPE_NATIVE_VIDEO = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CREATIVE_TYPE_TEMPLATED_APP_INSTALL_VIDEO = 14,
	}
	
	/// <summary>
	/// Exit event of the creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExitEvent
	{
		
		/// <summary>
		/// The name of the click tag of the exit event. The name must be unique within one creative. Leave it empty or unset for creatives containing image assets only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The name used to identify this event in reports. Leave it empty or unset for creatives containing image assets only.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportingName")]
		public string ReportingName { get; set; }
		
		/// <summary>
		/// Required. The type of the exit event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ExitEventType> Type { get; set; }
		
		/// <summary>
		/// Required. The click through URL of the exit event. This is required when type is: * `EXIT_EVENT_TYPE_DEFAULT` * `EXIT_EVENT_TYPE_BACKUP`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExitEventType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXIT_EVENT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXIT_EVENT_TYPE_DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXIT_EVENT_TYPE_BACKUP = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeExpandingDirection
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDING_DIRECTION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDING_DIRECTION_NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDING_DIRECTION_UP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDING_DIRECTION_DOWN = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDING_DIRECTION_LEFT = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDING_DIRECTION_RIGHT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDING_DIRECTION_UP_AND_LEFT = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDING_DIRECTION_UP_AND_RIGHT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDING_DIRECTION_DOWN_AND_LEFT = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDING_DIRECTION_DOWN_AND_RIGHT = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDING_DIRECTION_UP_OR_DOWN = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDING_DIRECTION_LEFT_OR_RIGHT = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXPANDING_DIRECTION_ANY_DIAGONAL = 12,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CreativeHostingSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOSTING_SOURCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOSTING_SOURCE_CM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOSTING_SOURCE_THIRD_PARTY = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOSTING_SOURCE_HOSTED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		HOSTING_SOURCE_RICH_MEDIA = 4,
	}
	
	/// <summary>
	/// OBA Icon for a Creative
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ObaIcon
	{
		
		/// <summary>
		/// Required. The click tracking URL of the OBA icon. Only URLs of the following domains are allowed: * https://info.evidon.com * https://l.betrad.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickTrackingUrl")]
		public string ClickTrackingUrl { get; set; }
		
		/// <summary>
		/// Dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimensions Dimensions { get; set; }
		
		/// <summary>
		/// Required. The landing page URL of the OBA icon. Only URLs of the following domains are allowed: * https://info.evidon.com * https://l.betrad.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="landingPageUrl")]
		public string LandingPageUrl { get; set; }
		
		/// <summary>
		/// The position of the OBA icon on the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="position")]
		public System.Nullable<ObaIconPosition> Position { get; set; }
		
		/// <summary>
		/// The program of the OBA icon. For example: “AdChoices”.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="program")]
		public string Program { get; set; }
		
		/// <summary>
		/// The MIME type of the OBA icon resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceMimeType")]
		public string ResourceMimeType { get; set; }
		
		/// <summary>
		/// The URL of the OBA icon resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceUrl")]
		public string ResourceUrl { get; set; }
		
		/// <summary>
		/// Required. The view tracking URL of the OBA icon. Only URLs of the following domains are allowed: * https://info.evidon.com * https://l.betrad.com
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewTrackingUrl")]
		public string ViewTrackingUrl { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ObaIconPosition
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBA_ICON_POSITION_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBA_ICON_POSITION_UPPER_RIGHT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBA_ICON_POSITION_UPPER_LEFT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBA_ICON_POSITION_LOWER_RIGHT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OBA_ICON_POSITION_LOWER_LEFT = 4,
	}
	
	/// <summary>
	/// Review statuses for the creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReviewStatusInfo
	{
		
		/// <summary>
		/// Represents the basic approval needed for a creative to begin serving. Summary of creative_and_landing_page_review_status and content_and_policy_review_status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="approvalStatus")]
		public System.Nullable<ReviewStatusInfoApprovalStatus> ApprovalStatus { get; set; }
		
		/// <summary>
		/// Content and policy review status for the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentAndPolicyReviewStatus")]
		public System.Nullable<ReviewStatusInfoContentAndPolicyReviewStatus> ContentAndPolicyReviewStatus { get; set; }
		
		/// <summary>
		/// Creative and landing page review status for the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeAndLandingPageReviewStatus")]
		public ReviewStatusInfoContentAndPolicyReviewStatus CreativeAndLandingPageReviewStatus { get; set; }
		
		/// <summary>
		/// Exchange review statuses for the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchangeReviewStatuses")]
		public ExchangeReviewStatus[] ExchangeReviewStatuses { get; set; }
		
		/// <summary>
		/// Publisher review statuses for the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherReviewStatuses")]
		public PublisherReviewStatus[] PublisherReviewStatuses { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReviewStatusInfoApprovalStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVAL_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVAL_STATUS_PENDING_NOT_SERVABLE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVAL_STATUS_PENDING_SERVABLE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVAL_STATUS_APPROVED_SERVABLE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		APPROVAL_STATUS_REJECTED_NOT_SERVABLE = 4,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ReviewStatusInfoContentAndPolicyReviewStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_STATUS_APPROVED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_STATUS_REJECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REVIEW_STATUS_PENDING = 3,
	}
	
	/// <summary>
	/// Exchange review status for the creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExchangeReviewStatus
	{
		
		/// <summary>
		/// The exchange reviewing the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchange")]
		public System.Nullable<ExchangeReviewStatusExchange> Exchange { get; set; }
		
		/// <summary>
		/// Status of the exchange review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReviewStatusInfoContentAndPolicyReviewStatus Status { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ExchangeReviewStatusExchange
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_GOOGLE_AD_MANAGER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_APPNEXUS = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_BRIGHTROLL = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_ADFORM = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_ADMETA = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_ADMIXER = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_ADSMOGO = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_ADSWIZZ = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_BIDSWITCH = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_BRIGHTROLL_DISPLAY = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_CADREON = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_DAILYMOTION = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_FIVE = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_FLUCT = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_FREEWHEEL = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_GENIEE = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_GUMGUM = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_IMOBILE = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_IBILLBOARD = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_IMPROVE_DIGITAL = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_INDEX = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_KARGO = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_MICROAD = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_MOPUB = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_NEND = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_ONE_BY_AOL_DISPLAY = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_ONE_BY_AOL_MOBILE = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_ONE_BY_AOL_VIDEO = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_OOYALA = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_OPENX = 30,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_PERMODO = 31,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_PLATFORMONE = 32,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_PLATFORMID = 33,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_PUBMATIC = 34,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_PULSEPOINT = 35,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_REVENUEMAX = 36,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_RUBICON = 37,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_SMARTCLIP = 38,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_SMARTRTB = 39,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_SMARTSTREAMTV = 40,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_SOVRN = 41,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_SPOTXCHANGE = 42,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_STROER = 43,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_TEADSTV = 44,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_TELARIA = 45,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_TVN = 46,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_UNITED = 47,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_YIELDLAB = 48,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_YIELDMO = 49,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_UNRULYX = 50,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_OPEN8 = 51,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_TRITON = 52,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_TRIPLELIFT = 53,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_TABOOLA = 54,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_INMOBI = 55,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_SMAATO = 56,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_AJA = 57,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_SUPERSHIP = 58,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_NEXSTAR_DIGITAL = 59,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_WAZE = 60,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_SOUNDCAST = 61,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_SHARETHROUGH = 62,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_FYBER = 63,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_RED_FOR_PUBLISHERS = 64,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_MEDIANET = 65,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_TAPJOY = 66,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_VISTAR = 67,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_DAX = 68,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_JCD = 69,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_PLACE_EXCHANGE = 70,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_APPLOVIN = 71,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_CONNATIX = 72,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_RESET_DIGITAL = 73,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		EXCHANGE_HIVESTACK = 74,
	}
	
	/// <summary>
	/// Publisher review status for the creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PublisherReviewStatus
	{
		
		/// <summary>
		/// The publisher reviewing the creative.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherName")]
		public string PublisherName { get; set; }
		
		/// <summary>
		/// Status of the publisher review.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public ReviewStatusInfoContentAndPolicyReviewStatus Status { get; set; }
	}
	
	/// <summary>
	/// Tracking URLs from third parties to track interactions with an audio or a video creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ThirdPartyUrl
	{
		
		/// <summary>
		/// The type of interaction needs to be tracked by the tracking URL
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="type")]
		public System.Nullable<ThirdPartyUrlType> Type { get; set; }
		
		/// <summary>
		/// Tracking URL used to track the interaction. Provide a URL with optional path or query string, beginning with `https:`. For example, https://www.example.com/path
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="url")]
		public string Url { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ThirdPartyUrlType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_URL_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_URL_TYPE_IMPRESSION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_URL_TYPE_CLICK_TRACKING = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_START = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_FIRST_QUARTILE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_MIDPOINT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_THIRD_QUARTILE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_COMPLETE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_MUTE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_PAUSE = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_REWIND = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_FULLSCREEN = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_STOP = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_CUSTOM = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_SKIP = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		THIRD_PARTY_URL_TYPE_AUDIO_VIDEO_PROGRESS = 15,
	}
	
	/// <summary>
	/// Timer event of the creative.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimerEvent
	{
		
		/// <summary>
		/// Required. The name of the timer event.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The name used to identify this timer event in reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reportingName")]
		public string ReportingName { get; set; }
	}
	
	/// <summary>
	/// Represents information about the transcoded audio or video file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Transcode
	{
		
		/// <summary>
		/// The bit rate for the audio stream of the transcoded video, or the bit rate for the transcoded audio, in kilobits per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioBitRateKbps")]
		public string AudioBitRateKbps { get; set; }
		
		/// <summary>
		/// The sample rate for the audio stream of the transcoded video, or the sample rate for the transcoded audio, in hertz.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioSampleRateHz")]
		public string AudioSampleRateHz { get; set; }
		
		/// <summary>
		/// The transcoding bit rate of the transcoded video, in kilobits per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bitRateKbps")]
		public string BitRateKbps { get; set; }
		
		/// <summary>
		/// Dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dimensions")]
		public Dimensions Dimensions { get; set; }
		
		/// <summary>
		/// The size of the transcoded file, in bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="fileSizeBytes")]
		public string FileSizeBytes { get; set; }
		
		/// <summary>
		/// The frame rate of the transcoded video, in frames per second.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frameRate")]
		public System.Nullable<System.Single> FrameRate { get; set; }
		
		/// <summary>
		/// The MIME type of the transcoded file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mimeType")]
		public string MimeType { get; set; }
		
		/// <summary>
		/// The name of the transcoded file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Indicates if the transcoding was successful.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="transcoded")]
		public System.Nullable<System.Boolean> Transcoded { get; set; }
	}
	
	/// <summary>
	/// A creative identifier provided by a registry that is unique across all platforms. This is part of the VAST 4.0 standard.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UniversalAdId
	{
		
		/// <summary>
		/// The unique creative identifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="id")]
		public string Id { get; set; }
		
		/// <summary>
		/// The registry provides unique creative identifiers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="registry")]
		public System.Nullable<UniversalAdIdRegistry> Registry { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum UniversalAdIdRegistry
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIVERSAL_AD_REGISTRY_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIVERSAL_AD_REGISTRY_OTHER = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIVERSAL_AD_REGISTRY_AD_ID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIVERSAL_AD_REGISTRY_CLEARCAST = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIVERSAL_AD_REGISTRY_DV360 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		UNIVERSAL_AD_REGISTRY_CM = 5,
	}
	
	/// <summary>
	/// Creative requirements configuration for the inventory source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CreativeConfig
	{
		
		/// <summary>
		/// The type of creative that can be assigned to the inventory source. Only the following types are supported: * `CREATIVE_TYPE_STANDARD` * `CREATIVE_TYPE_VIDEO`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeType")]
		public CreativeCreativeType CreativeType { get; set; }
		
		/// <summary>
		/// The configuration for display creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayCreativeConfig")]
		public InventorySourceDisplayCreativeConfig DisplayCreativeConfig { get; set; }
		
		/// <summary>
		/// The configuration for video creatives.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoCreativeConfig")]
		public InventorySourceVideoCreativeConfig VideoCreativeConfig { get; set; }
	}
	
	/// <summary>
	/// The configuration for display creatives.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventorySourceDisplayCreativeConfig
	{
		
		/// <summary>
		/// Dimensions.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeSize")]
		public Dimensions CreativeSize { get; set; }
	}
	
	/// <summary>
	/// The configuration for video creatives.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventorySourceVideoCreativeConfig
	{
		
		/// <summary>
		/// The duration requirements for the video creatives that can be assigned to the inventory source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="duration")]
		public string Duration { get; set; }
	}
	
	/// <summary>
	/// A single custom bidding algorithm.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomBiddingAlgorithm
	{
		
		/// <summary>
		/// Immutable. The unique ID of the advertiser that owns the custom bidding algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the custom bidding algorithm. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customBiddingAlgorithmId")]
		public string CustomBiddingAlgorithmId { get; set; }
		
		/// <summary>
		/// Output only. The status of custom bidding algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customBiddingAlgorithmState")]
		public System.Nullable<CustomBiddingAlgorithmCustomBiddingAlgorithmState> CustomBiddingAlgorithmState { get; set; }
		
		/// <summary>
		/// Required. Immutable. The type of custom bidding algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customBiddingAlgorithmType")]
		public System.Nullable<CustomBiddingAlgorithmCustomBiddingAlgorithmType> CustomBiddingAlgorithmType { get; set; }
		
		/// <summary>
		/// Required. The display name of the custom bidding algorithm. Must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Controls whether or not the custom bidding algorithm can be used as a bidding strategy. Accepted values are: * `ENTITY_STATUS_ACTIVE` * `ENTITY_STATUS_ARCHIVED`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityStatus")]
		public AdvertiserEntityStatus EntityStatus { get; set; }
		
		/// <summary>
		/// Output only. The state of custom bidding model readiness for each advertiser who has access. This field may only include the state of the queried advertiser if the algorithm [`owner`](/display-video/api/reference/rest/v1/customBiddingAlgorithms#CustomBiddingAlgorithm.FIELDS.oneof_owner) is a partner and is being retrieved using an advertiser [`accessor`](/display-video/api/reference/rest/v1/customBiddingAlgorithms/list#body.QUERY_PARAMETERS.oneof_accessor).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="modelReadiness")]
		public CustomBiddingModelReadinessState[] ModelReadiness { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the custom bidding algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Immutable. The unique ID of the partner that owns the custom bidding algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerId")]
		public string PartnerId { get; set; }
		
		/// <summary>
		/// The IDs of the advertisers who have access to this algorithm. If advertiser_id is set, this field will only consist of that value. This field will not be set if the algorithm [`owner`](/display-video/api/reference/rest/v1/customBiddingAlgorithms#CustomBiddingAlgorithm.FIELDS.oneof_owner) is a partner and is being retrieved using an advertiser [`accessor`](/display-video/api/reference/rest/v1/customBiddingAlgorithms/list#body.QUERY_PARAMETERS.oneof_accessor).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sharedAdvertiserIds")]
		public string[] SharedAdvertiserIds { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CustomBiddingAlgorithmCustomBiddingAlgorithmState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ENABLED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DORMANT = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SUSPENDED = 3,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CustomBiddingAlgorithmCustomBiddingAlgorithmType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOM_BIDDING_ALGORITHM_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SCRIPT_BASED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADS_DATA_HUB_BASED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOAL_BUILDER_BASED = 3,
	}
	
	/// <summary>
	/// The custom bidding algorithm model readiness state for a single shared advertiser.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomBiddingModelReadinessState
	{
		
		/// <summary>
		/// The unique ID of the relevant advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// The readiness state of custom bidding model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readinessState")]
		public System.Nullable<CustomBiddingModelReadinessStateReadinessState> ReadinessState { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CustomBiddingModelReadinessStateReadinessState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READINESS_STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READINESS_STATE_ACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READINESS_STATE_INSUFFICIENT_DATA = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READINESS_STATE_TRAINING = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		READINESS_STATE_NO_VALID_SCRIPT = 4,
	}
	
	/// <summary>
	/// A single custom bidding script.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomBiddingScript
	{
		
		/// <summary>
		/// Output only. Whether the script is currently being used for scoring by the parent algorithm.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="active")]
		public System.Nullable<System.Boolean> Active { get; set; }
		
		/// <summary>
		/// Output only. The time when the script was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the custom bidding algorithm the script belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customBiddingAlgorithmId")]
		public string CustomBiddingAlgorithmId { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the custom bidding script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customBiddingScriptId")]
		public string CustomBiddingScriptId { get; set; }
		
		/// <summary>
		/// Output only. Error details of a rejected custom bidding script. This field will only be populated when state is REJECTED.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errors")]
		public ScriptError[] Errors { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the custom bidding script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The reference to the uploaded custom bidding script file.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="script")]
		public CustomBiddingScriptRef Script { get; set; }
		
		/// <summary>
		/// Output only. The state of the custom bidding script.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<CustomBiddingScriptState> State { get; set; }
	}
	
	/// <summary>
	/// An error message for a custom bidding script.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ScriptError
	{
		
		/// <summary>
		/// The column number in the script where the error was thrown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="column")]
		public string Column { get; set; }
		
		/// <summary>
		/// The type of error.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorCode")]
		public System.Nullable<ScriptErrorErrorCode> ErrorCode { get; set; }
		
		/// <summary>
		/// The detailed error message.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="errorMessage")]
		public string ErrorMessage { get; set; }
		
		/// <summary>
		/// The line number in the script where the error was thrown.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="line")]
		public string Line { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ScriptErrorErrorCode
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ERROR_CODE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SYNTAX_ERROR = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DEPRECATED_SYNTAX = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INTERNAL_ERROR = 3,
	}
	
	/// <summary>
	/// The reference to the uploaded custom bidding script file.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomBiddingScriptRef
	{
		
		/// <summary>
		/// A resource name to be used in media.download to Download the script files. Or media.upload to Upload the script files. Resource names have the format `customBiddingAlgorithms/{custom_bidding_algorithm_id}/scriptRef/{ref_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum CustomBiddingScriptState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACCEPTED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		REJECTED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 3,
	}
	
	/// <summary>
	/// Describes a custom list entity, such as a custom affinity or custom intent audience list.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class CustomList
	{
		
		/// <summary>
		/// Output only. The unique ID of the custom list. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customListId")]
		public string CustomListId { get; set; }
		
		/// <summary>
		/// Output only. The display name of the custom list. .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the custom list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// Request message for ManualTriggerService.DeactivateManualTrigger.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeactivateManualTriggerRequest
	{
	}
	
	/// <summary>
	/// Represents a targetable device make and model. This will be populated in the device_make_model_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_DEVICE_MAKE_MODEL`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceMakeModelTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the device make and model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable device type. This will be populated in the device_type_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_DEVICE_TYPE`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DeviceTypeTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The device type that is used to be targeted.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceType")]
		public DeviceTypeAssignedTargetingOptionDetailsDeviceType DeviceType { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable digital content label rating tier. This will be populated in the digital_content_label_details field of the TargetingOption when targeting_type is `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class DigitalContentLabelTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. An enum for the content label brand safety tiers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentRatingTier")]
		public DigitalContentLabelAssignedTargetingOptionDetailsContentRatingTier ContentRatingTier { get; set; }
	}
	
	/// <summary>
	/// Request message for FirstAndThirdPartyAudienceService.EditCustomerMatchMembers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditCustomerMatchMembersRequest
	{
		
		/// <summary>
		/// Wrapper message for a list of contact information defining Customer Match audience members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addedContactInfoList")]
		public ContactInfoList AddedContactInfoList { get; set; }
		
		/// <summary>
		/// Wrapper message for a list of mobile device IDs defining Customer Match audience members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addedMobileDeviceIdList")]
		public MobileDeviceIdList AddedMobileDeviceIdList { get; set; }
		
		/// <summary>
		/// Required. The ID of the owner advertiser of the updated Customer Match FirstAndThirdPartyAudience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
	}
	
	/// <summary>
	/// Wrapper message for a list of mobile device IDs defining Customer Match audience members.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MobileDeviceIdList
	{
		
		/// <summary>
		/// User consent status.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="consent")]
		public Consent Consent { get; set; }
		
		/// <summary>
		/// A list of mobile device IDs defining Customer Match audience members. The size of mobile_device_ids mustn't be greater than 500,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileDeviceIds")]
		public string[] MobileDeviceIds { get; set; }
	}
	
	/// <summary>
	/// The response of FirstAndThirdPartyAudienceService.EditCustomerMatchMembers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditCustomerMatchMembersResponse
	{
		
		/// <summary>
		/// Required. The ID of the updated Customer Match FirstAndThirdPartyAudience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstAndThirdPartyAudienceId")]
		public string FirstAndThirdPartyAudienceId { get; set; }
	}
	
	/// <summary>
	/// Request message for GuaranteedOrderService.EditGuaranteedOrderReadAccessors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditGuaranteedOrderReadAccessorsRequest
	{
		
		/// <summary>
		/// The advertisers to add as read accessors to the guaranteed order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addedAdvertisers")]
		public string[] AddedAdvertisers { get; set; }
		
		/// <summary>
		/// Required. The partner context in which the change is being made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerId")]
		public string PartnerId { get; set; }
		
		/// <summary>
		/// Whether to give all advertisers of the read/write accessor partner read access to the guaranteed order. Only applicable if read_write_partner_id is set in the guaranteed order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readAccessInherited")]
		public System.Nullable<System.Boolean> ReadAccessInherited { get; set; }
		
		/// <summary>
		/// The advertisers to remove as read accessors to the guaranteed order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removedAdvertisers")]
		public string[] RemovedAdvertisers { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditGuaranteedOrderReadAccessorsResponse
	{
		
		/// <summary>
		/// Whether all advertisers of read_write_partner_id have read access to the guaranteed order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readAccessInherited")]
		public System.Nullable<System.Boolean> ReadAccessInherited { get; set; }
		
		/// <summary>
		/// The IDs of advertisers with read access to the guaranteed order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readAdvertiserIds")]
		public string[] ReadAdvertiserIds { get; set; }
	}
	
	/// <summary>
	/// Request message for InventorySourceService.EditInventorySourceReadWriteAccessors.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditInventorySourceReadWriteAccessorsRequest
	{
		
		/// <summary>
		/// Update to the list of advertisers with read/write access to the inventory source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertisersUpdate")]
		public EditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate AdvertisersUpdate { get; set; }
		
		/// <summary>
		/// Set the partner context as read/write accessor of the inventory source. This will remove all other current read/write advertiser accessors.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignPartner")]
		public System.Nullable<System.Boolean> AssignPartner { get; set; }
		
		/// <summary>
		/// Required. The partner context by which the accessors change is being made.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerId")]
		public string PartnerId { get; set; }
	}
	
	/// <summary>
	/// Update to the list of advertisers with read/write access to the inventory source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EditInventorySourceReadWriteAccessorsRequestAdvertisersUpdate
	{
		
		/// <summary>
		/// The advertisers to add.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="addedAdvertisers")]
		public string[] AddedAdvertisers { get; set; }
		
		/// <summary>
		/// The advertisers to remove.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="removedAdvertisers")]
		public string[] RemovedAdvertisers { get; set; }
	}
	
	/// <summary>
	/// A generic empty message that you can re-use to avoid defining duplicated empty messages in your APIs. A typical example is to use it as the request or the response type of an API method. For instance: service Foo { rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty); }
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Empty
	{
	}
	
	/// <summary>
	/// Represents a targetable environment. This will be populated in the environment_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_ENVIRONMENT`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class EnvironmentTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The serving environment.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environment")]
		public EnvironmentAssignedTargetingOptionDetailsEnvironment Environment { get; set; }
	}
	
	/// <summary>
	/// Settings that control which exchanges are enabled for a partner.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExchangeConfig
	{
		
		/// <summary>
		/// All enabled exchanges in the partner. Duplicate enabled exchanges will be ignored.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="enabledExchanges")]
		public ExchangeConfigEnabledExchange[] EnabledExchanges { get; set; }
	}
	
	/// <summary>
	/// An enabled exchange in the partner.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExchangeConfigEnabledExchange
	{
		
		/// <summary>
		/// The enabled exchange.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchange")]
		public ExchangeReviewStatusExchange Exchange { get; set; }
		
		/// <summary>
		/// Output only. Agency ID of Google Ad Manager. The field is only relevant when Google Ad Manager is the enabled exchange.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleAdManagerAgencyId")]
		public string GoogleAdManagerAgencyId { get; set; }
		
		/// <summary>
		/// Output only. Network ID of Google Ad Manager. The field is only relevant when Google Ad Manager is the enabled exchange.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleAdManagerBuyerNetworkId")]
		public string GoogleAdManagerBuyerNetworkId { get; set; }
		
		/// <summary>
		/// Output only. Seat ID of the enabled exchange.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="seatId")]
		public string SeatId { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable exchange. This will be populated in the exchange_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_EXCHANGE`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ExchangeTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The type of exchange.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchange")]
		public ExchangeReviewStatusExchange Exchange { get; set; }
	}
	
	/// <summary>
	/// Describes a first or third party audience list used for targeting. First party audiences are created via usage of client data. Third party audiences are provided by Third Party data providers and can only be licensed to customers.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FirstAndThirdPartyAudience
	{
		
		/// <summary>
		/// Output only. The estimated audience size for the Display network in the past month. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only returned in GET request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeDisplayAudienceSize")]
		public string ActiveDisplayAudienceSize { get; set; }
		
		/// <summary>
		/// The app_id matches with the type of the mobile_device_ids being uploaded. Only applicable to audience_type `CUSTOMER_MATCH_DEVICE_ID`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Output only. The source of the audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audienceSource")]
		public System.Nullable<FirstAndThirdPartyAudienceAudienceSource> AudienceSource { get; set; }
		
		/// <summary>
		/// The type of the audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audienceType")]
		public System.Nullable<FirstAndThirdPartyAudienceAudienceType> AudienceType { get; set; }
		
		/// <summary>
		/// Wrapper message for a list of contact information defining Customer Match audience members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contactInfoList")]
		public ContactInfoList ContactInfoList { get; set; }
		
		/// <summary>
		/// The user-provided description of the audience. Only applicable to first party audiences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
		
		/// <summary>
		/// Output only. The estimated audience size for the Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only returned in GET request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayAudienceSize")]
		public string DisplayAudienceSize { get; set; }
		
		/// <summary>
		/// Output only. The estimated desktop audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayDesktopAudienceSize")]
		public string DisplayDesktopAudienceSize { get; set; }
		
		/// <summary>
		/// Output only. The estimated mobile app audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayMobileAppAudienceSize")]
		public string DisplayMobileAppAudienceSize { get; set; }
		
		/// <summary>
		/// Output only. The estimated mobile web audience size in Display network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayMobileWebAudienceSize")]
		public string DisplayMobileWebAudienceSize { get; set; }
		
		/// <summary>
		/// The display name of the first and third party audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the first and third party audience. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstAndThirdPartyAudienceId")]
		public string FirstAndThirdPartyAudienceId { get; set; }
		
		/// <summary>
		/// Whether the audience is a first or third party audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstAndThirdPartyAudienceType")]
		public System.Nullable<FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType> FirstAndThirdPartyAudienceType { get; set; }
		
		/// <summary>
		/// Output only. The estimated audience size for Gmail network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gmailAudienceSize")]
		public string GmailAudienceSize { get; set; }
		
		/// <summary>
		/// The duration in days that an entry remains in the audience after the qualifying event. If the audience has no expiration, set the value of this field to 10000. Otherwise, the set value must be greater than 0 and less than or equal to 540. Only applicable to first party audiences. This field is required if one of the following audience_type is used: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="membershipDurationDays")]
		public string MembershipDurationDays { get; set; }
		
		/// <summary>
		/// Wrapper message for a list of mobile device IDs defining Customer Match audience members.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileDeviceIdList")]
		public MobileDeviceIdList MobileDeviceIdList { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the first and third party audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The estimated audience size for YouTube network. If the size is less than 1000, the number will be hidden and 0 will be returned due to privacy reasons. Otherwise, the number will be rounded off to two significant digits. Only applicable to first party audiences. Only returned in GET request.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="youtubeAudienceSize")]
		public string YoutubeAudienceSize { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FirstAndThirdPartyAudienceAudienceSource
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIENCE_SOURCE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		DISPLAY_VIDEO_360 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CAMPAIGN_MANAGER = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AD_MANAGER = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SEARCH_ADS_360 = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YOUTUBE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ADS_DATA_HUB = 6,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FirstAndThirdPartyAudienceAudienceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUDIENCE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_MATCH_CONTACT_INFO = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_MATCH_DEVICE_ID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		CUSTOMER_MATCH_USER_ID = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVITY_BASED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FREQUENCY_CAP = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_BASED = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YOUTUBE_USERS = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LICENSED = 8,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FirstAndThirdPartyAudienceFirstAndThirdPartyAudienceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_FIRST_PARTY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		FIRST_AND_THIRD_PARTY_AUDIENCE_TYPE_THIRD_PARTY = 2,
	}
	
	/// <summary>
	/// A single Floodlight group.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class FloodlightGroup
	{
		
		/// <summary>
		/// Configuration for custom Active View video viewability metrics.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activeViewConfig")]
		public ActiveViewVideoViewabilityMetricConfig ActiveViewConfig { get; set; }
		
		/// <summary>
		/// User-defined custom variables owned by the Floodlight group. Use custom Floodlight variables to create reporting data that is tailored to your unique business needs. Custom Floodlight variables use the keys `U1=`, `U2=`, and so on, and can take any values that you choose to pass to them. You can use them to track virtually any type of data that you collect about your customers, such as the genre of movie that a customer purchases, the country to which the item is shipped, and so on. Custom Floodlight variables may not be used to pass any data that could be used or recognized as personally identifiable information (PII). Example: `custom_variables { fields { "U1": value { number_value: 123.4 }, "U2": value { string_value: "MyVariable2" }, "U3": value { string_value: "MyVariable3" } } }` Acceptable values for keys are "U1" through "U100", inclusive. String values must be less than 64 characters long, and cannot contain the following characters: `"<>`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customVariables")]
		public System.Collections.Generic.Dictionary<string, object> CustomVariables { get; set; }
		
		/// <summary>
		/// Required. The display name of the Floodlight group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the Floodlight group. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="floodlightGroupId")]
		public string FloodlightGroupId { get; set; }
		
		/// <summary>
		/// Specifies how many days into the past to look when determining whether to record a conversion.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lookbackWindow")]
		public LookbackWindow LookbackWindow { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the Floodlight group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The web tag type enabled for the Floodlight group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="webTagType")]
		public System.Nullable<FloodlightGroupWebTagType> WebTagType { get; set; }
	}
	
	/// <summary>
	/// Specifies how many days into the past to look when determining whether to record a conversion.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LookbackWindow
	{
		
		/// <summary>
		/// Lookback window, in days, from the last time a given user clicked on one of your ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="clickDays")]
		public System.Nullable<System.Int32> ClickDays { get; set; }
		
		/// <summary>
		/// Lookback window, in days, from the last time a given user viewed one of your ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="impressionDays")]
		public System.Nullable<System.Int32> ImpressionDays { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum FloodlightGroupWebTagType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_TAG_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_TAG_TYPE_NONE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_TAG_TYPE_IMAGE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		WEB_TAG_TYPE_DYNAMIC = 3,
	}
	
	/// <summary>
	/// Represents a targetable gender. This will be populated in the gender_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_GENDER`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenderTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The gender of an audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="gender")]
		public GenderAssignedTargetingOptionDetailsGender Gender { get; set; }
	}
	
	/// <summary>
	/// Request message for LineItemService.GenerateDefaultLineItem.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GenerateDefaultLineItemRequest
	{
		
		/// <summary>
		/// Required. The display name of the line item. Must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required. The unique ID of the insertion order that the line item belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertionOrderId")]
		public string InsertionOrderId { get; set; }
		
		/// <summary>
		/// Required. The type of the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemType")]
		public System.Nullable<GenerateDefaultLineItemRequestLineItemType> LineItemType { get; set; }
		
		/// <summary>
		/// A mobile app promoted by a mobile app install line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileApp")]
		public MobileApp MobileApp { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GenerateDefaultLineItemRequestLineItemType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_TYPE_DISPLAY_DEFAULT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INSTALL = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_TYPE_VIDEO_DEFAULT = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INSTALL = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_TYPE_DISPLAY_MOBILE_APP_INVENTORY = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_TYPE_VIDEO_MOBILE_APP_INVENTORY = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_TYPE_AUDIO_DEFAULT = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_TYPE_VIDEO_OVER_THE_TOP = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_TYPE_DISPLAY_OUT_OF_HOME = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_TYPE_VIDEO_OUT_OF_HOME = 10,
	}
	
	/// <summary>
	/// A mobile app promoted by a mobile app install line item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MobileApp
	{
		
		/// <summary>
		/// Required. The ID of the app provided by the platform store. Android apps are identified by the bundle ID used by Android's Play store, such as `com.google.android.gm`. iOS apps are identified by a nine-digit app ID used by Apple's App store, such as `422689480`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appId")]
		public string AppId { get; set; }
		
		/// <summary>
		/// Output only. The app name.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The app platform.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="platform")]
		public System.Nullable<MobileAppPlatform> Platform { get; set; }
		
		/// <summary>
		/// Output only. The app publisher.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisher")]
		public string Publisher { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum MobileAppPlatform
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PLATFORM_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		IOS = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ANDROID = 2,
	}
	
	/// <summary>
	/// Search terms for geo region targeting options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeoRegionSearchTerms
	{
		
		/// <summary>
		/// The search query for the desired geo region. The query can be a prefix, e.g. "New Yor", "Seattle", "USA", etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoRegionQuery")]
		public string GeoRegionQuery { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable geographic region. This will be populated in the geo_region_details field when targeting_type is `TARGETING_TYPE_GEO_REGION`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GeoRegionTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the geographic region (e.g., "Ontario, Canada").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The type of geographic region targeting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoRegionType")]
		public GeoRegionAssignedTargetingOptionDetailsGeoRegionType GeoRegionType { get; set; }
	}
	
	/// <summary>
	/// Describes a Google audience resource. Includes Google audience lists.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleAudience
	{
		
		/// <summary>
		/// Output only. The display name of the Google audience. .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the Google audience. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleAudienceId")]
		public string GoogleAudienceId { get; set; }
		
		/// <summary>
		/// Output only. The type of Google audience. .
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleAudienceType")]
		public System.Nullable<GoogleAudienceGoogleAudienceType> GoogleAudienceType { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the google audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GoogleAudienceGoogleAudienceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_AUDIENCE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_AUDIENCE_TYPE_AFFINITY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_AUDIENCE_TYPE_IN_MARKET = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_AUDIENCE_TYPE_INSTALLED_APPS = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_AUDIENCE_TYPE_NEW_MOBILE_DEVICES = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_AUDIENCE_TYPE_LIFE_EVENT = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GOOGLE_AUDIENCE_TYPE_EXTENDED_DEMOGRAPHIC = 6,
	}
	
	/// <summary>
	/// Media resource.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GoogleBytestreamMedia
	{
		
		/// <summary>
		/// Name of the media resource.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// A guaranteed order. Guaranteed orders are parent entity of guaranteed inventory sources. When creating a guaranteed inventory source, a guaranteed order ID must be assigned to the inventory source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GuaranteedOrder
	{
		
		/// <summary>
		/// Output only. The ID of default advertiser of the guaranteed order. The default advertiser is either the read_write_advertiser_id or, if that is not set, the first advertiser listed in read_advertiser_ids. Otherwise, there is no default advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultAdvertiserId")]
		public string DefaultAdvertiserId { get; set; }
		
		/// <summary>
		/// The ID of the default campaign that is assigned to the guaranteed order. The default campaign must belong to the default advertiser.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="defaultCampaignId")]
		public string DefaultCampaignId { get; set; }
		
		/// <summary>
		/// Required. The display name of the guaranteed order. Must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required. Immutable. The exchange where the guaranteed order originated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchange")]
		public ExchangeReviewStatusExchange Exchange { get; set; }
		
		/// <summary>
		/// Output only. The unique identifier of the guaranteed order. The guaranteed order IDs have the format `{exchange}-{legacy_guaranteed_order_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guaranteedOrderId")]
		public string GuaranteedOrderId { get; set; }
		
		/// <summary>
		/// Output only. The legacy ID of the guaranteed order. Assigned by the original exchange. The legacy ID is unique within one exchange, but is not guaranteed to be unique across all guaranteed orders. This ID is used in SDF and UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="legacyGuaranteedOrderId")]
		public string LegacyGuaranteedOrderId { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the guaranteed order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Required. The publisher name of the guaranteed order. Must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherName")]
		public string PublisherName { get; set; }
		
		/// <summary>
		/// Whether all advertisers of read_write_partner_id have read access to the guaranteed order. Only applicable if read_write_partner_id is set. If True, overrides read_advertiser_ids.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readAccessInherited")]
		public System.Nullable<System.Boolean> ReadAccessInherited { get; set; }
		
		/// <summary>
		/// The IDs of advertisers with read access to the guaranteed order. This field must not include the advertiser assigned to read_write_advertiser_id if it is set. All advertisers in this field must belong to read_write_partner_id or the same partner as read_write_advertiser_id.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readAdvertiserIds")]
		public string[] ReadAdvertiserIds { get; set; }
		
		/// <summary>
		/// The advertiser with read/write access to the guaranteed order. This is also the default advertiser of the guaranteed order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readWriteAdvertiserId")]
		public string ReadWriteAdvertiserId { get; set; }
		
		/// <summary>
		/// The partner with read/write access to the guaranteed order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readWritePartnerId")]
		public string ReadWritePartnerId { get; set; }
		
		/// <summary>
		/// The status settings of the guaranteed order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public GuaranteedOrderStatus Status { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the guaranteed order was last updated. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// The status settings of the guaranteed order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class GuaranteedOrderStatus
	{
		
		/// <summary>
		/// Output only. The configuration status of the guaranteed order. Acceptable values are `PENDING` and `COMPLETED`. A guaranteed order must be configured (fill in the required fields, choose creatives, and select a default campaign) before it can serve. Currently the configuration action can only be performed via UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configStatus")]
		public System.Nullable<GuaranteedOrderStatusConfigStatus> ConfigStatus { get; set; }
		
		/// <summary>
		/// The user-provided reason for pausing this guaranteed order. Must be UTF-8 encoded with a maximum length of 100 bytes. Only applicable when entity_status is set to `ENTITY_STATUS_PAUSED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityPauseReason")]
		public string EntityPauseReason { get; set; }
		
		/// <summary>
		/// Whether or not the guaranteed order is servable. Acceptable values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. Default value is `ENTITY_STATUS_ACTIVE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityStatus")]
		public AdvertiserEntityStatus EntityStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum GuaranteedOrderStatusConfigStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GUARANTEED_ORDER_CONFIG_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		COMPLETED = 2,
	}
	
	/// <summary>
	/// Represents a targetable household income. This will be populated in the household_income_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_HOUSEHOLD_INCOME`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class HouseholdIncomeTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The household income of an audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="householdIncome")]
		public HouseholdIncomeAssignedTargetingOptionDetailsHouseholdIncome HouseholdIncome { get; set; }
	}
	
	/// <summary>
	/// A single insertion order.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertionOrder
	{
		
		/// <summary>
		/// Output only. The unique ID of the advertiser the insertion order belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Settings that control the bid strategy. Bid strategy determines the bid price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidStrategy")]
		public BiddingStrategy BidStrategy { get; set; }
		
		/// <summary>
		/// Immutable. The billable outcome of the insertion order. Outcome based buying is deprecated. `BILLABLE_OUTCOME_PAY_PER_IMPRESSION` is the only valid value.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="billableOutcome")]
		public System.Nullable<InsertionOrderBillableOutcome> BillableOutcome { get; set; }
		
		/// <summary>
		/// Settings that control how insertion order budget is allocated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budget")]
		public InsertionOrderBudget Budget { get; set; }
		
		/// <summary>
		/// Required. Immutable. The unique ID of the campaign that the insertion order belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public string CampaignId { get; set; }
		
		/// <summary>
		/// Required. The display name of the insertion order. Must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required. Controls whether or not the insertion order can spend its budget and bid on inventory. * For CreateInsertionOrder method, only `ENTITY_STATUS_DRAFT` is allowed. To activate an insertion order, use UpdateInsertionOrder method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * An insertion order cannot be changed back to `ENTITY_STATUS_DRAFT` status from any other status. * An insertion order cannot be set to `ENTITY_STATUS_ACTIVE` if its parent campaign is not active.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityStatus")]
		public AdvertiserEntityStatus EntityStatus { get; set; }
		
		/// <summary>
		/// Settings that control the number of times a user may be shown with the same ad during a given time period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequencyCap")]
		public FrequencyCap FrequencyCap { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the insertion order. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertionOrderId")]
		public string InsertionOrderId { get; set; }
		
		/// <summary>
		/// The type of insertion order. If this field is unspecified in creation, the value defaults to `RTB`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertionOrderType")]
		public System.Nullable<InsertionOrderInsertionOrderType> InsertionOrderType { get; set; }
		
		/// <summary>
		/// Integration details of an entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationDetails")]
		public IntegrationDetails IntegrationDetails { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the insertion order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Settings that control the rate at which a budget is spent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pacing")]
		public Pacing Pacing { get; set; }
		
		/// <summary>
		/// The partner costs associated with the insertion order. If absent or empty in CreateInsertionOrder method, the newly created insertion order will inherit partner costs from the partner settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerCosts")]
		public PartnerCost[] PartnerCosts { get; set; }
		
		/// <summary>
		/// Settings that control the performance goal of a campaign.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="performanceGoal")]
		public PerformanceGoal PerformanceGoal { get; set; }
		
		/// <summary>
		/// Output only. The reservation type of the insertion order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservationType")]
		public System.Nullable<InsertionOrderReservationType> ReservationType { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the insertion order was last updated. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InsertionOrderBillableOutcome
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLABLE_OUTCOME_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLABLE_OUTCOME_PAY_PER_IMPRESSION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLABLE_OUTCOME_PAY_PER_CLICK = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BILLABLE_OUTCOME_PAY_PER_VIEWABLE_IMPRESSION = 3,
	}
	
	/// <summary>
	/// Settings that control how insertion order budget is allocated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertionOrderBudget
	{
		
		/// <summary>
		/// The type of automation used to manage bid and budget for the insertion order. If this field is unspecified in creation, the value defaults to `INSERTION_ORDER_AUTOMATION_TYPE_NONE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="automationType")]
		public System.Nullable<InsertionOrderBudgetAutomationType> AutomationType { get; set; }
		
		/// <summary>
		/// Required. The list of budget segments. Use a budget segment to specify a specific budget for a given period of time an insertion order is running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budgetSegments")]
		public InsertionOrderBudgetSegment[] BudgetSegments { get; set; }
		
		/// <summary>
		/// Required. Immutable. The budget unit specifies whether the budget is currency based or impression based.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budgetUnit")]
		public CampaignBudgetBudgetUnit BudgetUnit { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InsertionOrderBudgetAutomationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERTION_ORDER_AUTOMATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERTION_ORDER_AUTOMATION_TYPE_BUDGET = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERTION_ORDER_AUTOMATION_TYPE_NONE = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERTION_ORDER_AUTOMATION_TYPE_BID_BUDGET = 3,
	}
	
	/// <summary>
	/// Settings that control the budget of a single budget segment.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InsertionOrderBudgetSegment
	{
		
		/// <summary>
		/// Required. The budget amount the insertion order will spend for the given date_range. The amount is in micros. Must be greater than 0. For example, 500000000 represents 500 standard units of the currency.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budgetAmountMicros")]
		public string BudgetAmountMicros { get; set; }
		
		/// <summary>
		/// The budget_id of the campaign budget that this insertion order budget segment is a part of.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignBudgetId")]
		public string CampaignBudgetId { get; set; }
		
		/// <summary>
		/// A date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// The budget segment description. It can be used to enter Purchase Order information for each budget segment and have that information printed on the invoices. Must be UTF-8 encoded.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="description")]
		public string Description { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InsertionOrderInsertionOrderType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSERTION_ORDER_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RTB = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		OVER_THE_TOP = 2,
	}
	
	/// <summary>
	/// Settings that control the rate at which a budget is spent.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Pacing
	{
		
		/// <summary>
		/// Maximum number of impressions to serve every day. Applicable when the budget is impression based. Must be greater than 0.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyMaxImpressions")]
		public string DailyMaxImpressions { get; set; }
		
		/// <summary>
		/// Maximum currency amount to spend every day in micros of advertiser's currency. Applicable when the budget is currency based. Must be greater than 0. For example, for 1.5 standard unit of the currency, set this field to 1500000. The value assigned will be rounded to whole billable units for the relevant currency by the following rules: any positive value less than a single billable unit will be rounded up to one billable unit and any value larger than a single billable unit will be rounded down to the nearest billable value. For example, if the currency's billable unit is 0.01, and this field is set to 10257770, it will round down to 10250000, a value of 10.25. If set to 505, it will round up to 10000, a value of 0.01.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dailyMaxMicros")]
		public string DailyMaxMicros { get; set; }
		
		/// <summary>
		/// Required. The time period in which the pacing budget will be spent. When automatic budget allocation is enabled at the insertion order via automationType, this field is output only and defaults to `PACING_PERIOD_FLIGHT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pacingPeriod")]
		public System.Nullable<PacingPacingPeriod> PacingPeriod { get; set; }
		
		/// <summary>
		/// Required. The type of pacing that defines how the budget amount will be spent across the pacing_period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pacingType")]
		public System.Nullable<PacingPacingType> PacingType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PacingPacingPeriod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PACING_PERIOD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PACING_PERIOD_DAILY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PACING_PERIOD_FLIGHT = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PacingPacingType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PACING_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PACING_TYPE_AHEAD = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PACING_TYPE_ASAP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PACING_TYPE_EVEN = 3,
	}
	
	/// <summary>
	/// Settings that control a partner cost. A partner cost is any type of expense involved in running a campaign, other than the costs of purchasing impressions (which is called the media cost) and using third-party audience segment data (data fee). Some examples of partner costs include the fees for using DV360, a third-party ad server, or a third-party ad serving verification service.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartnerCost
	{
		
		/// <summary>
		/// Required. The type of the partner cost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="costType")]
		public System.Nullable<PartnerCostCostType> CostType { get; set; }
		
		/// <summary>
		/// The CPM fee amount in micros of advertiser's currency. Applicable when the fee_type is `PARTNER_FEE_TYPE_CPM_FEE`. Must be greater than or equal to 0. For example, for 1.5 standard unit of the advertiser's currency, set this field to 1500000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feeAmount")]
		public string FeeAmount { get; set; }
		
		/// <summary>
		/// The media fee percentage in millis (1/1000 of a percent). Applicable when the fee_type is `PARTNER_FEE_TYPE_MEDIA_FEE`. Must be greater than or equal to 0. For example: 100 represents 0.1%.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feePercentageMillis")]
		public string FeePercentageMillis { get; set; }
		
		/// <summary>
		/// Required. The fee type for this partner cost.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="feeType")]
		public System.Nullable<PartnerCostFeeType> FeeType { get; set; }
		
		/// <summary>
		/// The invoice type for this partner cost. * Required when cost_type is one of: - `PARTNER_COST_TYPE_ADLOOX` - `PARTNER_COST_TYPE_DOUBLE_VERIFY` - `PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE`. * Output only for other types.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceType")]
		public System.Nullable<PartnerCostInvoiceType> InvoiceType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PartnerCostCostType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_ADLOOX = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_ADLOOX_PREBID = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_ADSAFE = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_ADXPOSE = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_AGGREGATE_KNOWLEDGE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_AGENCY_TRADING_DESK = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_DV360_FEE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_COMSCORE_VCE = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_DATA_MANAGEMENT_PLATFORM = 9,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_DEFAULT = 10,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_DOUBLE_VERIFY = 11,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_DOUBLE_VERIFY_PREBID = 12,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_EVIDON = 13,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_VIDEO = 14,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_INTEGRAL_AD_SCIENCE_PREBID = 15,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_MEDIA_COST_DATA = 16,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_MOAT_VIDEO = 17,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_NIELSEN_DAR = 18,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_SHOP_LOCAL = 19,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_TERACENT = 20,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_THIRD_PARTY_AD_SERVER = 21,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_TRUST_METRICS = 22,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_VIZU = 23,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_ADLINGO_FEE = 24,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_CUSTOM_FEE_1 = 25,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_CUSTOM_FEE_2 = 26,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_CUSTOM_FEE_3 = 27,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_CUSTOM_FEE_4 = 28,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_CUSTOM_FEE_5 = 29,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_TYPE_SCIBIDS_FEE = 30,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PartnerCostFeeType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_FEE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_FEE_TYPE_CPM_FEE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_FEE_TYPE_MEDIA_FEE = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PartnerCostInvoiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_INVOICE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_INVOICE_TYPE_DV360 = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_COST_INVOICE_TYPE_PARTNER = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InsertionOrderReservationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVATION_TYPE_NOT_GUARANTEED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVATION_TYPE_PROGRAMMATIC_GUARANTEED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		RESERVATION_TYPE_TAG_GUARANTEED = 3,
	}
	
	/// <summary>
	/// An inventory source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventorySource
	{
		
		/// <summary>
		/// Whether the inventory source has a guaranteed or non-guaranteed delivery.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="commitment")]
		public System.Nullable<InventorySourceCommitment> Commitment { get; set; }
		
		/// <summary>
		/// The creative requirements of the inventory source. Not applicable for auction packages.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeConfigs")]
		public CreativeConfig[] CreativeConfigs { get; set; }
		
		/// <summary>
		/// The ID in the exchange space that uniquely identifies the inventory source. Must be unique across buyers within each exchange but not necessarily unique across exchanges.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dealId")]
		public string DealId { get; set; }
		
		/// <summary>
		/// The delivery method of the inventory source. * For non-guaranteed inventory sources, the only acceptable value is `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`. * For guaranteed inventory sources, acceptable values are `INVENTORY_SOURCE_DELIVERY_METHOD_TAG` and `INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deliveryMethod")]
		public System.Nullable<InventorySourceDeliveryMethod> DeliveryMethod { get; set; }
		
		/// <summary>
		/// The display name of the inventory source. Must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// The exchange to which the inventory source belongs.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchange")]
		public ExchangeReviewStatusExchange Exchange { get; set; }
		
		/// <summary>
		/// Immutable. The ID of the guaranteed order that this inventory source belongs to. Only applicable when commitment is `INVENTORY_SOURCE_COMMITMENT_GUARANTEED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guaranteedOrderId")]
		public string GuaranteedOrderId { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the inventory source. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySourceId")]
		public string InventorySourceId { get; set; }
		
		/// <summary>
		/// Output only. The product type of the inventory source, denoting the way through which it sells inventory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySourceProductType")]
		public System.Nullable<InventorySourceInventorySourceProductType> InventorySourceProductType { get; set; }
		
		/// <summary>
		/// Denotes the type of the inventory source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySourceType")]
		public System.Nullable<InventorySourceInventorySourceType> InventorySourceType { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the inventory source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The publisher/seller name of the inventory source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="publisherName")]
		public string PublisherName { get; set; }
		
		/// <summary>
		/// The rate related settings of the inventory source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rateDetails")]
		public RateDetails RateDetails { get; set; }
		
		/// <summary>
		/// Output only. The IDs of advertisers with read-only access to the inventory source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readAdvertiserIds")]
		public string[] ReadAdvertiserIds { get; set; }
		
		/// <summary>
		/// Output only. The IDs of partners with read-only access to the inventory source. All advertisers of partners in this field inherit read-only access to the inventory source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readPartnerIds")]
		public string[] ReadPartnerIds { get; set; }
		
		/// <summary>
		/// The partner or advertisers with access to the inventory source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="readWriteAccessors")]
		public InventorySourceAccessors ReadWriteAccessors { get; set; }
		
		/// <summary>
		/// The status related settings of the inventory source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="status")]
		public InventorySourceStatus Status { get; set; }
		
		/// <summary>
		/// A time range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeRange")]
		public TimeRange TimeRange { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the inventory source was last updated. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InventorySourceCommitment
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_COMMITMENT_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_COMMITMENT_GUARANTEED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_COMMITMENT_NON_GUARANTEED = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InventorySourceDeliveryMethod
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_DELIVERY_METHOD_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_DELIVERY_METHOD_PROGRAMMATIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_DELIVERY_METHOD_TAG = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InventorySourceInventorySourceProductType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_PRODUCT_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PREFERRED_DEAL = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PRIVATE_AUCTION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRAMMATIC_GUARANTEED = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TAG_GUARANTEED = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		YOUTUBE_RESERVE = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INSTANT_RESERVE = 6,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		GUARANTEED_PACKAGE = 7,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PROGRAMMATIC_TV = 8,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		AUCTION_PACKAGE = 9,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InventorySourceInventorySourceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_TYPE_PRIVATE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_TYPE_AUCTION_PACKAGE = 2,
	}
	
	/// <summary>
	/// The rate related settings of the inventory source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class RateDetails
	{
		
		/// <summary>
		/// The rate type. Acceptable values are `INVENTORY_SOURCE_RATE_TYPE_CPM_FIXED`, `INVENTORY_SOURCE_RATE_TYPE_CPM_FLOOR`, and `INVENTORY_SOURCE_RATE_TYPE_CPD`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySourceRateType")]
		public System.Nullable<RateDetailsInventorySourceRateType> InventorySourceRateType { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="minimumSpend")]
		public Money MinimumSpend { get; set; }
		
		/// <summary>
		/// Represents an amount of money with its currency type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="rate")]
		public Money Rate { get; set; }
		
		/// <summary>
		/// Required for guaranteed inventory sources. The number of impressions guaranteed by the seller.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="unitsPurchased")]
		public string UnitsPurchased { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum RateDetailsInventorySourceRateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_RATE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_RATE_TYPE_CPM_FIXED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_RATE_TYPE_CPM_FLOOR = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_RATE_TYPE_CPD = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_RATE_TYPE_FLAT = 4,
	}
	
	/// <summary>
	/// Represents an amount of money with its currency type.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Money
	{
		
		/// <summary>
		/// The three-letter currency code defined in ISO 4217.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Number of nano (10^-9) units of the amount. The value must be between -999,999,999 and +999,999,999 inclusive. If `units` is positive, `nanos` must be positive or zero. If `units` is zero, `nanos` can be positive, zero, or negative. If `units` is negative, `nanos` must be negative or zero. For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nanos")]
		public System.Nullable<System.Int32> Nanos { get; set; }
		
		/// <summary>
		/// The whole units of the amount. For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="units")]
		public string Units { get; set; }
	}
	
	/// <summary>
	/// The partner or advertisers with access to the inventory source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventorySourceAccessors
	{
		
		/// <summary>
		/// The advertisers with access to the inventory source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertisers")]
		public InventorySourceAccessorsAdvertiserAccessors Advertisers { get; set; }
		
		/// <summary>
		/// The partner with access to the inventory source.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partner")]
		public InventorySourceAccessorsPartnerAccessor Partner { get; set; }
	}
	
	/// <summary>
	/// The advertisers with access to the inventory source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventorySourceAccessorsAdvertiserAccessors
	{
		
		/// <summary>
		/// The IDs of the advertisers.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserIds")]
		public string[] AdvertiserIds { get; set; }
	}
	
	/// <summary>
	/// The partner with access to the inventory source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventorySourceAccessorsPartnerAccessor
	{
		
		/// <summary>
		/// The ID of the partner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerId")]
		public string PartnerId { get; set; }
	}
	
	/// <summary>
	/// The status related settings of the inventory source.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventorySourceStatus
	{
		
		/// <summary>
		/// Output only. The configuration status of the inventory source. Only applicable for guaranteed inventory sources. Acceptable values are `INVENTORY_SOURCE_CONFIG_STATUS_PENDING` and `INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED`. An inventory source must be configured (fill in the required fields, choose creatives, and select a default campaign) before it can serve.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="configStatus")]
		public System.Nullable<InventorySourceStatusConfigStatus> ConfigStatus { get; set; }
		
		/// <summary>
		/// The user-provided reason for pausing this inventory source. Must not exceed 100 characters. Only applicable when entity_status is set to `ENTITY_STATUS_PAUSED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityPauseReason")]
		public string EntityPauseReason { get; set; }
		
		/// <summary>
		/// Whether or not the inventory source is servable. Acceptable values are `ENTITY_STATUS_ACTIVE`, `ENTITY_STATUS_ARCHIVED`, and `ENTITY_STATUS_PAUSED`. Default value is `ENTITY_STATUS_ACTIVE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityStatus")]
		public AdvertiserEntityStatus EntityStatus { get; set; }
		
		/// <summary>
		/// Output only. The seller-provided reason for pausing this inventory source. Only applicable for inventory sources synced directly from the publishers and when seller_status is set to `ENTITY_STATUS_PAUSED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerPauseReason")]
		public string SellerPauseReason { get; set; }
		
		/// <summary>
		/// Output only. The status set by the seller for the inventory source. Only applicable for inventory sources synced directly from the publishers. Acceptable values are `ENTITY_STATUS_ACTIVE` and `ENTITY_STATUS_PAUSED`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sellerStatus")]
		public AdvertiserEntityStatus SellerStatus { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InventorySourceStatusConfigStatus
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_CONFIG_STATUS_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_CONFIG_STATUS_PENDING = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVENTORY_SOURCE_CONFIG_STATUS_COMPLETED = 2,
	}
	
	/// <summary>
	/// A time range.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TimeRange
	{
		
		/// <summary>
		/// Required. The upper bound of a time range, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// Required. The lower bound of a time range, inclusive.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="startTime")]
		public string StartTime { get; set; }
	}
	
	/// <summary>
	/// A collection of targetable inventory sources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class InventorySourceGroup
	{
		
		/// <summary>
		/// Required. The display name of the inventory source group. Must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the inventory source group. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySourceGroupId")]
		public string InventorySourceGroupId { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the inventory source group.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	/// <summary>
	/// A single invoice.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Invoice
	{
		
		/// <summary>
		/// The budget grouping ID for this invoice. This field will only be set if the invoice level of the corresponding billing profile was set to "Budget invoice grouping ID".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budgetInvoiceGroupingId")]
		public string BudgetInvoiceGroupingId { get; set; }
		
		/// <summary>
		/// The list of summarized information for each budget associated with this invoice. This field will only be set if the invoice detail level of the corresponding billing profile was set to "Budget level PO".
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budgetSummaries")]
		public BudgetSummary[] BudgetSummaries { get; set; }
		
		/// <summary>
		/// The ID of the original invoice being adjusted by this invoice, if applicable. May appear on the invoice PDF as `Reference invoice number`. If replaced_invoice_ids is set, this field will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="correctedInvoiceId")]
		public string CorrectedInvoiceId { get; set; }
		
		/// <summary>
		/// The currency used in the invoice in ISO 4217 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// The display name of the invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dueDate")]
		public Date DueDate { get; set; }
		
		/// <summary>
		/// The unique ID of the invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceId")]
		public string InvoiceId { get; set; }
		
		/// <summary>
		/// The type of invoice document.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoiceType")]
		public System.Nullable<InvoiceInvoiceType> InvoiceType { get; set; }
		
		/// <summary>
		/// Represents a whole or partial calendar date, such as a birthday. The time of day and time zone are either specified elsewhere or are insignificant. The date is relative to the Gregorian Calendar. This can represent one of the following: * A full date, with non-zero year, month, and day values. * A month and day, with a zero year (for example, an anniversary). * A year on its own, with a zero month and a zero day. * A year and month, with a zero day (for example, a credit card expiration date). Related types: * google.type.TimeOfDay * google.type.DateTime * google.protobuf.Timestamp
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="issueDate")]
		public Date IssueDate { get; set; }
		
		/// <summary>
		/// The resource name of the invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The total amount of costs or adjustments not tied to a particular budget, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nonBudgetMicros")]
		public string NonBudgetMicros { get; set; }
		
		/// <summary>
		/// The ID of the payments account the invoice belongs to. Appears on the invoice PDF as `Billing Account Number`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentsAccountId")]
		public string PaymentsAccountId { get; set; }
		
		/// <summary>
		/// The ID of the payments profile the invoice belongs to. Appears on the invoice PDF as `Billing ID`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="paymentsProfileId")]
		public string PaymentsProfileId { get; set; }
		
		/// <summary>
		/// The URL to download a PDF copy of the invoice. This URL is user specific and requires a valid OAuth 2.0 access token to access. The access token must be provided in an `Authorization: Bearer` HTTP header and be authorized for one of the following scopes: * `https://www.googleapis.com/auth/display-video-mediaplanning` * `https://www.googleapis.com/auth/display-video` The URL will be valid for 7 days after retrieval of this invoice object or until this invoice is retrieved again.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pdfUrl")]
		public string PdfUrl { get; set; }
		
		/// <summary>
		/// Purchase order number associated with the invoice.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="purchaseOrderNumber")]
		public string PurchaseOrderNumber { get; set; }
		
		/// <summary>
		/// The ID(s) of any originally issued invoice that is being cancelled by this invoice, if applicable. Multiple invoices may be listed if those invoices are being consolidated into a single invoice. May appear on invoice PDF as `Replaced invoice numbers`. If corrected_invoice_id is set, this field will be empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="replacedInvoiceIds")]
		public string[] ReplacedInvoiceIds { get; set; }
		
		/// <summary>
		/// A date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="serviceDateRange")]
		public DateRange ServiceDateRange { get; set; }
		
		/// <summary>
		/// The pre-tax subtotal amount, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subtotalAmountMicros")]
		public string SubtotalAmountMicros { get; set; }
		
		/// <summary>
		/// The invoice total amount, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalAmountMicros")]
		public string TotalAmountMicros { get; set; }
		
		/// <summary>
		/// The sum of all taxes in invoice, in micros of the invoice's currency. For example, if currency_code is `USD`, then 1000000 represents one US dollar.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="totalTaxAmountMicros")]
		public string TotalTaxAmountMicros { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum InvoiceInvoiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVOICE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVOICE_TYPE_CREDIT = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INVOICE_TYPE_INVOICE = 2,
	}
	
	/// <summary>
	/// Represents a targetable language. This will be populated in the language_details field when targeting_type is `TARGETING_TYPE_LANGUAGE`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LanguageTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the language (e.g., "French").
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// A single line item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LineItem
	{
		
		/// <summary>
		/// Output only. The unique ID of the advertiser the line item belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Settings that control the bid strategy. Bid strategy determines the bid price.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="bidStrategy")]
		public BiddingStrategy BidStrategy { get; set; }
		
		/// <summary>
		/// Settings that control how budget is allocated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budget")]
		public LineItemBudget Budget { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the campaign that the line item belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaignId")]
		public string CampaignId { get; set; }
		
		/// <summary>
		/// Settings that control how conversions are counted. All post-click conversions will be counted. A percentage value can be set for post-view conversions counting.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="conversionCounting")]
		public ConversionCountingConfig ConversionCounting { get; set; }
		
		/// <summary>
		/// The IDs of the creatives associated with the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creativeIds")]
		public string[] CreativeIds { get; set; }
		
		/// <summary>
		/// Required. The display name of the line item. Must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required. Controls whether or not the line item can spend its budget and bid on inventory. * For CreateLineItem method, only `ENTITY_STATUS_DRAFT` is allowed. To activate a line item, use UpdateLineItem method and update the status to `ENTITY_STATUS_ACTIVE` after creation. * A line item cannot be changed back to `ENTITY_STATUS_DRAFT` status from any other status. * If the line item's parent insertion order is not active, the line item can't spend its budget even if its own status is `ENTITY_STATUS_ACTIVE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityStatus")]
		public AdvertiserEntityStatus EntityStatus { get; set; }
		
		/// <summary>
		/// Whether to exclude new exchanges from automatically being targeted by the line item. This field is false by default.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeNewExchanges")]
		public System.Nullable<System.Boolean> ExcludeNewExchanges { get; set; }
		
		/// <summary>
		/// Settings that control the active duration of a line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flight")]
		public LineItemFlight Flight { get; set; }
		
		/// <summary>
		/// Settings that control the number of times a user may be shown with the same ad during a given time period.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="frequencyCap")]
		public FrequencyCap FrequencyCap { get; set; }
		
		/// <summary>
		/// Required. Immutable. The unique ID of the insertion order that the line item belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertionOrderId")]
		public string InsertionOrderId { get; set; }
		
		/// <summary>
		/// Integration details of an entry.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="integrationDetails")]
		public IntegrationDetails IntegrationDetails { get; set; }
		
		/// <summary>
		/// The IDs of the private inventory sources assigned to the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySourceIds")]
		public string[] InventorySourceIds { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the line item. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemId")]
		public string LineItemId { get; set; }
		
		/// <summary>
		/// Required. Immutable. The type of the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItemType")]
		public GenerateDefaultLineItemRequestLineItemType LineItemType { get; set; }
		
		/// <summary>
		/// A mobile app promoted by a mobile app install line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="mobileApp")]
		public MobileApp MobileApp { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Settings that control the rate at which a budget is spent.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pacing")]
		public Pacing Pacing { get; set; }
		
		/// <summary>
		/// The partner costs associated with the line item. If absent or empty in CreateLineItem method, the newly created line item will inherit partner costs from its parent insertion order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerCosts")]
		public PartnerCost[] PartnerCosts { get; set; }
		
		/// <summary>
		/// Settings that control how partner revenue is calculated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerRevenueModel")]
		public PartnerRevenueModel PartnerRevenueModel { get; set; }
		
		/// <summary>
		/// Output only. The reservation type of the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="reservationType")]
		public InsertionOrderReservationType ReservationType { get; set; }
		
		/// <summary>
		/// Settings that control the [optimized targeting](//support.google.com/displayvideo/answer/12060859) settings of the line item.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingExpansion")]
		public TargetingExpansionConfig TargetingExpansion { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the line item was last updated. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
		
		/// <summary>
		/// Output only. The warning messages generated by the line item. These warnings do not block saving the line item, but some may block the line item from running.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="warningMessages")]
		public string[] WarningMessages { get; set; }
	}
	
	/// <summary>
	/// Settings that control how budget is allocated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LineItemBudget
	{
		
		/// <summary>
		/// Required. The type of the budget allocation. `LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC` is only applicable when automatic budget allocation is enabled for the parent insertion order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budgetAllocationType")]
		public System.Nullable<LineItemBudgetBudgetAllocationType> BudgetAllocationType { get; set; }
		
		/// <summary>
		/// Output only. The budget unit specifies whether the budget is currency based or impression based. This value is inherited from the parent insertion order.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="budgetUnit")]
		public CampaignBudgetBudgetUnit BudgetUnit { get; set; }
		
		/// <summary>
		/// The maximum budget amount the line item will spend. Must be greater than 0. When budget_allocation_type is: * `LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC`, this field is immutable and is set by the system. * `LINE_ITEM_BUDGET_ALLOCATION_TYPE_FIXED`, if budget_unit is: - `BUDGET_UNIT_CURRENCY`, this field represents maximum budget amount to spend, in micros of the advertiser's currency. For example, 1500000 represents 1.5 standard units of the currency. - `BUDGET_UNIT_IMPRESSIONS`, this field represents the maximum number of impressions to serve. * `LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNLIMITED`, this field is not applicable and will be ignored by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="maxAmount")]
		public string MaxAmount { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LineItemBudgetBudgetAllocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_BUDGET_ALLOCATION_TYPE_AUTOMATIC = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_BUDGET_ALLOCATION_TYPE_FIXED = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_BUDGET_ALLOCATION_TYPE_UNLIMITED = 3,
	}
	
	/// <summary>
	/// Settings that control the active duration of a line item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LineItemFlight
	{
		
		/// <summary>
		/// A date range.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dateRange")]
		public DateRange DateRange { get; set; }
		
		/// <summary>
		/// Required. The type of the line item's flight dates.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="flightDateType")]
		public System.Nullable<LineItemFlightFlightDateType> FlightDateType { get; set; }
		
		/// <summary>
		/// The ID of the manual trigger associated with the line item. * Required when flight_date_type is `LINE_ITEM_FLIGHT_DATE_TYPE_TRIGGER`. Must not be set otherwise. * When set, the line item's flight dates are inherited from its parent insertion order. * Active line items will spend when the selected trigger is activated within the parent insertion order's flight dates. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This field will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerId")]
		public string TriggerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LineItemFlightFlightDateType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_FLIGHT_DATE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_FLIGHT_DATE_TYPE_INHERITED = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_FLIGHT_DATE_TYPE_CUSTOM = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LINE_ITEM_FLIGHT_DATE_TYPE_TRIGGER = 3,
	}
	
	/// <summary>
	/// Settings that control how partner revenue is calculated.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartnerRevenueModel
	{
		
		/// <summary>
		/// Required. The markup amount of the partner revenue model. Must be greater than or equal to 0. * When the markup_type is set to be `PARTNER_REVENUE_MODEL_MARKUP_TYPE_CPM`, this field represents the CPM markup in micros of advertiser's currency. For example, 1500000 represents 1.5 standard units of the currency. * When the markup_type is set to be `PARTNER_REVENUE_MODEL_MARKUP_TYPE_MEDIA_COST_MARKUP`, this field represents the media cost percent markup in millis. For example, 100 represents 0.1% (decimal 0.001). * When the markup_type is set to be `PARTNER_REVENUE_MODEL_MARKUP_TYPE_TOTAL_MEDIA_COST_MARKUP`, this field represents the total media cost percent markup in millis. For example, 100 represents 0.1% (decimal 0.001).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markupAmount")]
		public string MarkupAmount { get; set; }
		
		/// <summary>
		/// Required. The markup type of the partner revenue model.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="markupType")]
		public System.Nullable<PartnerRevenueModelMarkupType> MarkupType { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum PartnerRevenueModelMarkupType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_REVENUE_MODEL_MARKUP_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_REVENUE_MODEL_MARKUP_TYPE_CPM = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_REVENUE_MODEL_MARKUP_TYPE_MEDIA_COST_MARKUP = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		PARTNER_REVENUE_MODEL_MARKUP_TYPE_TOTAL_MEDIA_COST_MARKUP = 3,
	}
	
	/// <summary>
	/// Settings that control the [optimized targeting](//support.google.com/displayvideo/answer/12060859) settings of the line item.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetingExpansionConfig
	{
		
		/// <summary>
		/// Whether to exclude first-party audiences from use in targeting expansion. This field was deprecated with the launch of [optimized targeting](//support.google.com/displayvideo/answer/12060859). This field will be set to `false`. If this field is set to `true` when deprecated, all positive first-party audience targeting assigned to this line item will be replaced with negative targeting of the same first-party audiences to ensure the continued exclusion of those audiences.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="excludeFirstPartyAudience")]
		public System.Nullable<System.Boolean> ExcludeFirstPartyAudience { get; set; }
		
		/// <summary>
		/// Required. Whether optimized targeting is turned on. This field supports the following values: * `NO_EXPANSION`: optimized targeting is turned off * `LEAST_EXPANSION`: optimized targeting is turned on If this field is set to any other value, it will automatically be set to `LEAST_EXPANSION`. `NO_EXPANSION` will be the default value for the field and will be automatically assigned if you do not set the field.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingExpansionLevel")]
		public System.Nullable<TargetingExpansionConfigTargetingExpansionLevel> TargetingExpansionLevel { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum TargetingExpansionConfigTargetingExpansionLevel
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_EXPANSION_LEVEL_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		NO_EXPANSION = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LEAST_EXPANSION = 2,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		SOME_EXPANSION = 3,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		BALANCED_EXPANSION = 4,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MORE_EXPANSION = 5,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		MOST_EXPANSION = 6,
	}
	
	/// <summary>
	/// Response message for ListAdvertiserAssignedTargetingOptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAdvertiserAssignedTargetingOptionsResponse
	{
		
		/// <summary>
		/// The list of assigned targeting options. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedTargetingOptions")]
		public AssignedTargetingOption[] AssignedTargetingOptions { get; set; }
		
		/// <summary>
		/// A token identifying the next page of results. This value should be specified as the pageToken in a subsequent ListAdvertiserAssignedTargetingOptionsRequest to fetch the next page of results. This token will be absent if there are no more assigned_targeting_options to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAdvertisersResponse
	{
		
		/// <summary>
		/// The list of advertisers. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertisers")]
		public Advertiser[] Advertisers { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListAdvertisers` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for AssignedInventorySourceService.ListAssignedInventorySources.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAssignedInventorySourcesResponse
	{
		
		/// <summary>
		/// The list of assigned inventory sources. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedInventorySources")]
		public AssignedInventorySource[] AssignedInventorySources { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListAssignedInventorySources` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for AssignedLocationService.ListAssignedLocations.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListAssignedLocationsResponse
	{
		
		/// <summary>
		/// The list of assigned locations. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedLocations")]
		public AssignedLocation[] AssignedLocations { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListAssignedLocations` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for ListCampaignAssignedTargetingOptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCampaignAssignedTargetingOptionsResponse
	{
		
		/// <summary>
		/// The list of assigned targeting options. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedTargetingOptions")]
		public AssignedTargetingOption[] AssignedTargetingOptions { get; set; }
		
		/// <summary>
		/// A token identifying the next page of results. This value should be specified as the pageToken in a subsequent ListCampaignAssignedTargetingOptionsRequest to fetch the next page of results. This token will be absent if there are no more assigned_targeting_options to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCampaignsResponse
	{
		
		/// <summary>
		/// The list of campaigns. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="campaigns")]
		public Campaign[] Campaigns { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListCampaigns` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListChannelsResponse
	{
		
		/// <summary>
		/// The list of channels. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="channels")]
		public Channel[] Channels { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListChannels` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCombinedAudiencesResponse
	{
		
		/// <summary>
		/// The list of combined audiences. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="combinedAudiences")]
		public CombinedAudience[] CombinedAudiences { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListCombinedAudiences` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCreativesResponse
	{
		
		/// <summary>
		/// The list of creatives. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="creatives")]
		public Creative[] Creatives { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListCreativesRequest` method to retrieve the next page of results. If this field is null, it means this is the last page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCustomBiddingAlgorithmsResponse
	{
		
		/// <summary>
		/// The list of custom bidding algorithms. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customBiddingAlgorithms")]
		public CustomBiddingAlgorithm[] CustomBiddingAlgorithms { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListCustomBiddingAlgorithmsRequest` method to retrieve the next page of results. If this field is null, it means this is the last page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCustomBiddingScriptsResponse
	{
		
		/// <summary>
		/// The list of custom bidding scripts. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customBiddingScripts")]
		public CustomBiddingScript[] CustomBiddingScripts { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListCustomBiddingScriptsRequest` method to retrieve the next page of results. If this field is null, it means this is the last page.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListCustomListsResponse
	{
		
		/// <summary>
		/// The list of custom lists. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="customLists")]
		public CustomList[] CustomLists { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListCustomLists` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListFirstAndThirdPartyAudiencesResponse
	{
		
		/// <summary>
		/// The list of first and third party audiences. Audience size properties will not be included. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="firstAndThirdPartyAudiences")]
		public FirstAndThirdPartyAudience[] FirstAndThirdPartyAudiences { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListFirstAndThirdPartyAudiences` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGoogleAudiencesResponse
	{
		
		/// <summary>
		/// The list of Google audiences. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="googleAudiences")]
		public GoogleAudience[] GoogleAudiences { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListGoogleAudiences` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListGuaranteedOrdersResponse
	{
		
		/// <summary>
		/// The list of guaranteed orders. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="guaranteedOrders")]
		public GuaranteedOrder[] GuaranteedOrders { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListGuaranteedOrders` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListInsertionOrderAssignedTargetingOptionsResponse
	{
		
		/// <summary>
		/// The list of assigned targeting options. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedTargetingOptions")]
		public AssignedTargetingOption[] AssignedTargetingOptions { get; set; }
		
		/// <summary>
		/// A token identifying the next page of results. This value should be specified as the pageToken in a subsequent ListInsertionOrderAssignedTargetingOptionsRequest to fetch the next page of results. This token will be absent if there are no more assigned_targeting_options to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListInsertionOrdersResponse
	{
		
		/// <summary>
		/// The list of insertion orders. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="insertionOrders")]
		public InsertionOrder[] InsertionOrders { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListInsertionOrders` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for InventorySourceGroupService.ListInventorySourceGroups.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListInventorySourceGroupsResponse
	{
		
		/// <summary>
		/// The list of inventory source groups. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySourceGroups")]
		public InventorySourceGroup[] InventorySourceGroups { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListInventorySourceGroups` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListInventorySourcesResponse
	{
		
		/// <summary>
		/// The list of inventory sources. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="inventorySources")]
		public InventorySource[] InventorySources { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListInventorySources` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListInvoicesResponse
	{
		
		/// <summary>
		/// The list of invoices. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="invoices")]
		public Invoice[] Invoices { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListInvoices` method to retrieve the next page of results. This token will be absent if there are no more invoices to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// Response message for ListLineItemAssignedTargetingOptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLineItemAssignedTargetingOptionsResponse
	{
		
		/// <summary>
		/// The list of assigned targeting options. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedTargetingOptions")]
		public AssignedTargetingOption[] AssignedTargetingOptions { get; set; }
		
		/// <summary>
		/// A token identifying the next page of results. This value should be specified as the pageToken in a subsequent ListLineItemAssignedTargetingOptionsRequest to fetch the next page of results. This token will be absent if there are no more assigned_targeting_options to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLineItemsResponse
	{
		
		/// <summary>
		/// The list of line items. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lineItems")]
		public LineItem[] LineItems { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListLineItems` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListLocationListsResponse
	{
		
		/// <summary>
		/// The list of location lists. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationLists")]
		public LocationList[] LocationLists { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListLocationLists` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A list of locations used for targeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LocationList
	{
		
		/// <summary>
		/// Required. Immutable. The unique ID of the advertiser the location list belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Required. The display name of the location list. Must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the location list. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationListId")]
		public string LocationListId { get; set; }
		
		/// <summary>
		/// Required. Immutable. The type of location. All locations in the list will share this type.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="locationType")]
		public System.Nullable<LocationListLocationType> LocationType { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the location list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum LocationListLocationType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_LOCATION_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_LOCATION_TYPE_PROXIMITY = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		TARGETING_LOCATION_TYPE_REGIONAL = 2,
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListManualTriggersResponse
	{
		
		/// <summary>
		/// The list of manual triggers. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="manualTriggers")]
		public ManualTrigger[] ManualTriggers { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListManualTriggers` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A single manual trigger in Display & Video 360. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This resource will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ManualTrigger
	{
		
		/// <summary>
		/// Required. The maximum duration of each activation in minutes. Must be between 1 and 360 inclusive. After this duration, the trigger will be automatically deactivated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="activationDurationMinutes")]
		public string ActivationDurationMinutes { get; set; }
		
		/// <summary>
		/// Required. Immutable. The unique ID of the advertiser that the manual trigger belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Required. The display name of the manual trigger. Must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The timestamp of the trigger's latest activation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latestActivationTime")]
		public string LatestActivationTime { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the manual trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The state of the manual trigger. Will be set to the `INACTIVE` state upon creation.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="state")]
		public System.Nullable<ManualTriggerState> State { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the manual trigger.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="triggerId")]
		public string TriggerId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public enum ManualTriggerState
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		STATE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		INACTIVE = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		ACTIVE = 2,
	}
	
	/// <summary>
	/// Response message for NegativeKeywordListService.ListNegativeKeywordLists.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListNegativeKeywordListsResponse
	{
		
		/// <summary>
		/// The list of negative keyword lists. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negativeKeywordLists")]
		public NegativeKeywordList[] NegativeKeywordLists { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListNegativeKeywordLists` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	/// <summary>
	/// A list of negative keywords used for targeting.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NegativeKeywordList
	{
		
		/// <summary>
		/// Output only. The unique ID of the advertiser the negative keyword list belongs to.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Required. The display name of the negative keyword list. Must be UTF-8 encoded with a maximum size of 255 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the negative keyword list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the negative keyword list. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negativeKeywordListId")]
		public string NegativeKeywordListId { get; set; }
		
		/// <summary>
		/// Output only. Number of line items that are directly targeting this negative keyword list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetedLineItemCount")]
		public string TargetedLineItemCount { get; set; }
	}
	
	/// <summary>
	/// Response message for NegativeKeywordService.ListNegativeKeywords.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListNegativeKeywordsResponse
	{
		
		/// <summary>
		/// The list of negative keywords. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negativeKeywords")]
		public NegativeKeyword[] NegativeKeywords { get; set; }
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListNegativeKeywords` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPartnerAssignedTargetingOptionsResponse
	{
		
		/// <summary>
		/// The list of assigned targeting options. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedTargetingOptions")]
		public AssignedTargetingOption[] AssignedTargetingOptions { get; set; }
		
		/// <summary>
		/// A token identifying the next page of results. This value should be specified as the pageToken in a subsequent ListPartnerAssignedTargetingOptionsRequest to fetch the next page of results. This token will be absent if there are no more assigned_targeting_options to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListPartnersResponse
	{
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListPartners` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of partners. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partners")]
		public Partner[] Partners { get; set; }
	}
	
	/// <summary>
	/// A single partner in Display & Video 360 (DV360).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Partner
	{
		
		/// <summary>
		/// Ad server related settings of a partner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="adServerConfig")]
		public PartnerAdServerConfig AdServerConfig { get; set; }
		
		/// <summary>
		/// Settings that control how partner related data may be accessed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dataAccessConfig")]
		public PartnerDataAccessConfig DataAccessConfig { get; set; }
		
		/// <summary>
		/// The display name of the partner. Must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. The status of the partner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="entityStatus")]
		public AdvertiserEntityStatus EntityStatus { get; set; }
		
		/// <summary>
		/// Settings that control which exchanges are enabled for a partner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchangeConfig")]
		public ExchangeConfig ExchangeConfig { get; set; }
		
		/// <summary>
		/// General settings of a partner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="generalConfig")]
		public PartnerGeneralConfig GeneralConfig { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the partner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the partner. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerId")]
		public string PartnerId { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the partner was last updated. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="updateTime")]
		public string UpdateTime { get; set; }
	}
	
	/// <summary>
	/// Ad server related settings of a partner.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartnerAdServerConfig
	{
		
		/// <summary>
		/// Measurement settings of a partner.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="measurementConfig")]
		public MeasurementConfig MeasurementConfig { get; set; }
	}
	
	/// <summary>
	/// Measurement settings of a partner.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class MeasurementConfig
	{
		
		/// <summary>
		/// Whether or not to report DV360 cost to CM360.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dv360ToCmCostReportingEnabled")]
		public System.Nullable<System.Boolean> Dv360ToCmCostReportingEnabled { get; set; }
		
		/// <summary>
		/// Whether or not to include DV360 data in CM360 data transfer reports.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="dv360ToCmDataSharingEnabled")]
		public System.Nullable<System.Boolean> Dv360ToCmDataSharingEnabled { get; set; }
	}
	
	/// <summary>
	/// Settings that control how partner related data may be accessed.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartnerDataAccessConfig
	{
		
		/// <summary>
		/// Structured Data File (SDF) related settings.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sdfConfig")]
		public SdfConfig SdfConfig { get; set; }
	}
	
	/// <summary>
	/// General settings of a partner.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PartnerGeneralConfig
	{
		
		/// <summary>
		/// Immutable. Partner's currency in ISO 4217 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
		
		/// <summary>
		/// Immutable. The standard TZ database name of the partner's time zone. For example, `America/New_York`. See more at: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="timeZone")]
		public string TimeZone { get; set; }
	}
	
	/// <summary>
	/// Response message for SiteService.ListSites.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListSitesResponse
	{
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListSites` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of sites. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sites")]
		public Site[] Sites { get; set; }
	}
	
	/// <summary>
	/// Response message for ListTargetingOptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListTargetingOptionsResponse
	{
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListTargetingOptions` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of targeting options. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptions")]
		public TargetingOption[] TargetingOptions { get; set; }
	}
	
	/// <summary>
	/// Represents a single targeting option, which is a targetable concept in DV360.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class TargetingOption
	{
		
		/// <summary>
		/// Represents a targetable age range. This will be populated in the age_range_details field when targeting_type is `TARGETING_TYPE_AGE_RANGE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="ageRangeDetails")]
		public AgeRangeTargetingOptionDetails AgeRangeDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable collection of apps. A collection lets you target dynamic groups of related apps that are maintained by the platform, for example `All Apps/Google Play/Games`. This will be populated in the app_category_details field when targeting_type is `TARGETING_TYPE_APP_CATEGORY`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="appCategoryDetails")]
		public AppCategoryTargetingOptionDetails AppCategoryDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable audio content type. This will be populated in the audio_content_type_details field when targeting_type is `TARGETING_TYPE_AUDIO_CONTENT_TYPE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="audioContentTypeDetails")]
		public AudioContentTypeTargetingOptionDetails AudioContentTypeDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable authorized seller status. This will be populated in the authorized_seller_status_details field when targeting_type is `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="authorizedSellerStatusDetails")]
		public AuthorizedSellerStatusTargetingOptionDetails AuthorizedSellerStatusDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable browser. This will be populated in the browser_details field when targeting_type is `TARGETING_TYPE_BROWSER`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="browserDetails")]
		public BrowserTargetingOptionDetails BrowserDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable business chain within a geo region. This will be populated in the business_chain_details field when targeting_type is `TARGETING_TYPE_BUSINESS_CHAIN`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessChainDetails")]
		public BusinessChainTargetingOptionDetails BusinessChainDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable carrier or ISP. This will be populated in the carrier_and_isp_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_CARRIER_AND_ISP`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="carrierAndIspDetails")]
		public CarrierAndIspTargetingOptionDetails CarrierAndIspDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable category. This will be populated in the category_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_CATEGORY`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="categoryDetails")]
		public CategoryTargetingOptionDetails CategoryDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable content duration. This will be populated in the content_duration_details field when targeting_type is `TARGETING_TYPE_CONTENT_DURATION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentDurationDetails")]
		public ContentDurationTargetingOptionDetails ContentDurationDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable content genre. This will be populated in the content_genre_details field when targeting_type is `TARGETING_TYPE_CONTENT_GENRE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentGenreDetails")]
		public ContentGenreTargetingOptionDetails ContentGenreDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable content instream position, which could be used by video and audio ads. This will be populated in the content_instream_position_details field when targeting_type is `TARGETING_TYPE_CONTENT_INSTREAM_POSITION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentInstreamPositionDetails")]
		public ContentInstreamPositionTargetingOptionDetails ContentInstreamPositionDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable content outstream position, which could be used by display and video ads. This will be populated in the content_outstream_position_details field when targeting_type is `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentOutstreamPositionDetails")]
		public ContentOutstreamPositionTargetingOptionDetails ContentOutstreamPositionDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable content stream type. This will be populated in the content_stream_type_details field when targeting_type is `TARGETING_TYPE_CONTENT_STREAM_TYPE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentStreamTypeDetails")]
		public ContentStreamTypeTargetingOptionDetails ContentStreamTypeDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable device make and model. This will be populated in the device_make_model_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_DEVICE_MAKE_MODEL`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceMakeModelDetails")]
		public DeviceMakeModelTargetingOptionDetails DeviceMakeModelDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable device type. This will be populated in the device_type_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_DEVICE_TYPE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="deviceTypeDetails")]
		public DeviceTypeTargetingOptionDetails DeviceTypeDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable digital content label rating tier. This will be populated in the digital_content_label_details field of the TargetingOption when targeting_type is `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="digitalContentLabelDetails")]
		public DigitalContentLabelTargetingOptionDetails DigitalContentLabelDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable environment. This will be populated in the environment_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_ENVIRONMENT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="environmentDetails")]
		public EnvironmentTargetingOptionDetails EnvironmentDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable exchange. This will be populated in the exchange_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_EXCHANGE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="exchangeDetails")]
		public ExchangeTargetingOptionDetails ExchangeDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable gender. This will be populated in the gender_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_GENDER`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="genderDetails")]
		public GenderTargetingOptionDetails GenderDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable geographic region. This will be populated in the geo_region_details field when targeting_type is `TARGETING_TYPE_GEO_REGION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoRegionDetails")]
		public GeoRegionTargetingOptionDetails GeoRegionDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable household income. This will be populated in the household_income_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_HOUSEHOLD_INCOME`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="householdIncomeDetails")]
		public HouseholdIncomeTargetingOptionDetails HouseholdIncomeDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable language. This will be populated in the language_details field when targeting_type is `TARGETING_TYPE_LANGUAGE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="languageDetails")]
		public LanguageTargetingOptionDetails LanguageDetails { get; set; }
		
		/// <summary>
		/// Output only. The resource name for this targeting option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Represents a targetable native content position. This will be populated in the native_content_position_details field when targeting_type is `TARGETING_TYPE_NATIVE_CONTENT_POSITION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nativeContentPositionDetails")]
		public NativeContentPositionTargetingOptionDetails NativeContentPositionDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable Open Measurement enabled inventory type. This will be populated in the omid_details field when targeting_type is `TARGETING_TYPE_OMID`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="omidDetails")]
		public OmidTargetingOptionDetails OmidDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable on screen position, which could be used by display and video ads. This will be populated in the on_screen_position_details field when targeting_type is `TARGETING_TYPE_ON_SCREEN_POSITION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onScreenPositionDetails")]
		public OnScreenPositionTargetingOptionDetails OnScreenPositionDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable operating system. This will be populated in the operating_system_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_OPERATING_SYSTEM`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="operatingSystemDetails")]
		public OperatingSystemTargetingOptionDetails OperatingSystemDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable parental status. This will be populated in the parental_status_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_PARENTAL_STATUS`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentalStatusDetails")]
		public ParentalStatusTargetingOptionDetails ParentalStatusDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable point of interest(POI). This will be populated in the poi_details field when targeting_type is `TARGETING_TYPE_POI`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poiDetails")]
		public PoiTargetingOptionDetails PoiDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable sensitive category. This will be populated in the sensitive_category_details field of the TargetingOption when targeting_type is `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sensitiveCategoryDetails")]
		public SensitiveCategoryTargetingOptionDetails SensitiveCategoryDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable sub-exchange. This will be populated in the sub_exchange_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_SUB_EXCHANGE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="subExchangeDetails")]
		public SubExchangeTargetingOptionDetails SubExchangeDetails { get; set; }
		
		/// <summary>
		/// Output only. A unique identifier for this targeting option. The tuple {`targeting_type`, `targeting_option_id`} will be unique.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptionId")]
		public string TargetingOptionId { get; set; }
		
		/// <summary>
		/// Output only. The type of this targeting option.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingType")]
		public AssignedTargetingOptionTargetingType TargetingType { get; set; }
		
		/// <summary>
		/// Represents a targetable user rewarded content status for video ads only. This will be populated in the user_rewarded_content_details field when targeting_type is `TARGETING_TYPE_USER_REWARDED_CONTENT`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRewardedContentDetails")]
		public UserRewardedContentTargetingOptionDetails UserRewardedContentDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable video player size. This will be populated in the video_player_size_details field when targeting_type is `TARGETING_TYPE_VIDEO_PLAYER_SIZE`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoPlayerSizeDetails")]
		public VideoPlayerSizeTargetingOptionDetails VideoPlayerSizeDetails { get; set; }
		
		/// <summary>
		/// Represents a targetable viewability. This will be populated in the viewability_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_VIEWABILITY`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewabilityDetails")]
		public ViewabilityTargetingOptionDetails ViewabilityDetails { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable native content position. This will be populated in the native_content_position_details field when targeting_type is `TARGETING_TYPE_NATIVE_CONTENT_POSITION`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class NativeContentPositionTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The content position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="contentPosition")]
		public NativeContentPositionAssignedTargetingOptionDetailsContentPosition ContentPosition { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable Open Measurement enabled inventory type. This will be populated in the omid_details field when targeting_type is `TARGETING_TYPE_OMID`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OmidTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The type of Open Measurement enabled inventory.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="omid")]
		public OmidAssignedTargetingOptionDetailsOmid Omid { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable on screen position, which could be used by display and video ads. This will be populated in the on_screen_position_details field when targeting_type is `TARGETING_TYPE_ON_SCREEN_POSITION`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OnScreenPositionTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The on screen position.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="onScreenPosition")]
		public OnScreenPositionAssignedTargetingOptionDetailsOnScreenPosition OnScreenPosition { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable operating system. This will be populated in the operating_system_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_OPERATING_SYSTEM`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class OperatingSystemTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the operating system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable parental status. This will be populated in the parental_status_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_PARENTAL_STATUS`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ParentalStatusTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The parental status of an audience.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="parentalStatus")]
		public ParentalStatusAssignedTargetingOptionDetailsParentalStatus ParentalStatus { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable point of interest(POI). This will be populated in the poi_details field when targeting_type is `TARGETING_TYPE_POI`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PoiTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of a POI(e.g. "Times Square", "Space Needle"), followed by its full address if available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Output only. Latitude of the POI rounding to 6th decimal place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="latitude")]
		public System.Nullable<System.Double> Latitude { get; set; }
		
		/// <summary>
		/// Output only. Longitude of the POI rounding to 6th decimal place.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="longitude")]
		public System.Nullable<System.Double> Longitude { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable sensitive category. This will be populated in the sensitive_category_details field of the TargetingOption when targeting_type is `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SensitiveCategoryTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. An enum for the DV360 Sensitive category content classifier.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sensitiveCategory")]
		public SensitiveCategoryAssignedTargetingOptionDetailsSensitiveCategory SensitiveCategory { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable sub-exchange. This will be populated in the sub_exchange_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_SUB_EXCHANGE`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SubExchangeTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The display name of the sub-exchange.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable user rewarded content status for video ads only. This will be populated in the user_rewarded_content_details field when targeting_type is `TARGETING_TYPE_USER_REWARDED_CONTENT`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class UserRewardedContentTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. User rewarded content status for video ads.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userRewardedContent")]
		public UserRewardedContentAssignedTargetingOptionDetailsUserRewardedContent UserRewardedContent { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable video player size. This will be populated in the video_player_size_details field when targeting_type is `TARGETING_TYPE_VIDEO_PLAYER_SIZE`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class VideoPlayerSizeTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The video player size.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="videoPlayerSize")]
		public VideoPlayerSizeAssignedTargetingOptionDetailsVideoPlayerSize VideoPlayerSize { get; set; }
	}
	
	/// <summary>
	/// Represents a targetable viewability. This will be populated in the viewability_details field of a TargetingOption when targeting_type is `TARGETING_TYPE_VIEWABILITY`.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ViewabilityTargetingOptionDetails
	{
		
		/// <summary>
		/// Output only. The predicted viewability percentage.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="viewability")]
		public ViewabilityAssignedTargetingOptionDetailsViewability Viewability { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ListUsersResponse
	{
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `ListUsers` method to retrieve the next page of results. This token will be absent if there are no more results to return.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of users. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="users")]
		public User[] Users { get; set; }
	}
	
	/// <summary>
	/// A single user in Display & Video 360.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class User
	{
		
		/// <summary>
		/// The assigned user roles. Required in CreateUser. Output only in UpdateUser. Can only be updated through BulkEditAssignedUserRoles.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="assignedUserRoles")]
		public AssignedUserRole[] AssignedUserRoles { get; set; }
		
		/// <summary>
		/// Required. The display name of the user. Must be UTF-8 encoded with a maximum size of 240 bytes.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="displayName")]
		public string DisplayName { get; set; }
		
		/// <summary>
		/// Required. Immutable. The email address used to identify the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="email")]
		public string Email { get; set; }
		
		/// <summary>
		/// Output only. The timestamp when the user last logged in DV360 UI.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="lastLoginTime")]
		public string LastLoginTime { get; set; }
		
		/// <summary>
		/// Output only. The resource name of the user.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// Output only. The unique ID of the user. Assigned by the system.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="userId")]
		public string UserId { get; set; }
	}
	
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class LookupInvoiceCurrencyResponse
	{
		
		/// <summary>
		/// Currency used by the advertiser in ISO 4217 format.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="currencyCode")]
		public string CurrencyCode { get; set; }
	}
	
	/// <summary>
	/// This resource represents a long-running operation that is the result of a network API call.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Operation
	{
		
		/// <summary>
		/// If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="done")]
		public System.Nullable<System.Boolean> Done { get; set; }
		
		/// <summary>
		/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="error")]
		public Status Error { get; set; }
		
		/// <summary>
		/// Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="metadata")]
		public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
		
		/// <summary>
		/// The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="name")]
		public string Name { get; set; }
		
		/// <summary>
		/// The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="response")]
		public System.Collections.Generic.Dictionary<string, object> Response { get; set; }
	}
	
	/// <summary>
	/// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class Status
	{
		
		/// <summary>
		/// The status code, which should be an enum value of google.rpc.Code.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="code")]
		public System.Nullable<System.Int32> Code { get; set; }
		
		/// <summary>
		/// A list of messages that carry the error details. There is a common set of message types for APIs to use.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="details")]
		public string[] Details { get; set; }
		
		/// <summary>
		/// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="message")]
		public string Message { get; set; }
	}
	
	/// <summary>
	/// Search terms for POI targeting options.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class PoiSearchTerms
	{
		
		/// <summary>
		/// The search query for the desired POI name, street address, or coordinate of the desired POI. The query can be a prefix, e.g. "Times squar", "40.7505045,-73.99562", "315 W 44th St", etc.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poiQuery")]
		public string PoiQuery { get; set; }
	}
	
	/// <summary>
	/// Request message for NegativeKeywordService.ReplaceNegativeKeywords.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceNegativeKeywordsRequest
	{
		
		/// <summary>
		/// The negative keywords that will replace the existing keywords in the negative keyword list, specified as a list of NegativeKeywords.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newNegativeKeywords")]
		public NegativeKeyword[] NewNegativeKeywords { get; set; }
	}
	
	/// <summary>
	/// Response message for NegativeKeywordService.ReplaceNegativeKeywords.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceNegativeKeywordsResponse
	{
		
		/// <summary>
		/// The full list of negative keywords now present in the negative keyword list.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="negativeKeywords")]
		public NegativeKeyword[] NegativeKeywords { get; set; }
	}
	
	/// <summary>
	/// Request message for SiteService.ReplaceSites.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceSitesRequest
	{
		
		/// <summary>
		/// The ID of the advertiser that owns the parent channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// The sites that will replace the existing sites assigned to the channel, specified as a list of Sites.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="newSites")]
		public Site[] NewSites { get; set; }
		
		/// <summary>
		/// The ID of the partner that owns the parent channel.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="partnerId")]
		public string PartnerId { get; set; }
	}
	
	/// <summary>
	/// Response message for SiteService.ReplaceSites.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class ReplaceSitesResponse
	{
		
		/// <summary>
		/// The list of sites in the channel after replacing.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="sites")]
		public Site[] Sites { get; set; }
	}
	
	/// <summary>
	/// Type for the response returned by [SdfDownloadTaskService.CreateSdfDownloadTask].
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SdfDownloadTask
	{
		
		/// <summary>
		/// A resource name to be used in media.download to Download the prepared files. Resource names have the format `download/sdfdownloadtasks/media/{media_id}`. `media_id` will be made available by the long running operation service once the task status is done.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="resourceName")]
		public string ResourceName { get; set; }
	}
	
	/// <summary>
	/// Type for the metadata returned by [SdfDownloadTaskService.CreateSdfDownloadTask].
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SdfDownloadTaskMetadata
	{
		
		/// <summary>
		/// The time when the operation was created.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="createTime")]
		public string CreateTime { get; set; }
		
		/// <summary>
		/// The time when execution was completed.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="endTime")]
		public string EndTime { get; set; }
		
		/// <summary>
		/// The SDF version used to execute this download task.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="version")]
		public SdfConfigVersion Version { get; set; }
	}
	
	/// <summary>
	/// Request message for SearchTargetingOptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchTargetingOptionsRequest
	{
		
		/// <summary>
		/// Required. The Advertiser this request is being made in the context of.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="advertiserId")]
		public string AdvertiserId { get; set; }
		
		/// <summary>
		/// Search terms for Business Chain targeting options. At least one of the field should be populated.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="businessChainSearchTerms")]
		public BusinessChainSearchTerms BusinessChainSearchTerms { get; set; }
		
		/// <summary>
		/// Search terms for geo region targeting options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="geoRegionSearchTerms")]
		public GeoRegionSearchTerms GeoRegionSearchTerms { get; set; }
		
		/// <summary>
		/// Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageSize")]
		public System.Nullable<System.Int32> PageSize { get; set; }
		
		/// <summary>
		/// A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `SearchTargetingOptions` method. If not specified, the first page of results will be returned.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="pageToken")]
		public string PageToken { get; set; }
		
		/// <summary>
		/// Search terms for POI targeting options.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="poiSearchTerms")]
		public PoiSearchTerms PoiSearchTerms { get; set; }
	}
	
	/// <summary>
	/// Response message for SearchTargetingOptions.
	/// </summary>
	[System.Runtime.Serialization.DataContract(Namespace="http://fonlow.com/TestOpenApi/2024/04")]
	public class SearchTargetingOptionsResponse
	{
		
		/// <summary>
		/// A token to retrieve the next page of results. Pass this value in the page_token field in the subsequent call to `SearchTargetingOptions` method to retrieve the next page of results.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="nextPageToken")]
		public string NextPageToken { get; set; }
		
		/// <summary>
		/// The list of targeting options that match the search criteria. This list will be absent if empty.
		/// </summary>
		[System.Runtime.Serialization.DataMember(Name="targetingOptions")]
		public TargetingOption[] TargetingOptions { get; set; }
	}
	
	public partial class Misc
	{
		
		private System.Net.Http.HttpClient httpClient;
		
		private JsonSerializerOptions jsonSerializerSettings;
		
		public Misc(System.Net.Http.HttpClient httpClient, JsonSerializerOptions jsonSerializerSettings=null)
		{
			if (httpClient == null)
				throw new ArgumentNullException("Null HttpClient.", "httpClient");

			if (httpClient.BaseAddress == null)
				throw new ArgumentNullException("HttpClient has no BaseAddress", "httpClient");

			this.httpClient = httpClient;
			this.jsonSerializerSettings = jsonSerializerSettings;
		}
		
		/// <summary>
		/// Downloads media. Download is supported on the URI `/download/{resource_name=**}?alt=media.` **Note**: Download requests will not be successful without including `alt=media` query string.
		/// Displayvideo_media_download download/{resourceName}
		/// </summary>
		/// <param name="resourceName">Name of the media that is being downloaded. See ReadRequest.resource_name.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleBytestreamMedia> Displayvideo_media_downloadAsync(string resourceName, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "download/"+ (resourceName==null? "" : System.Uri.EscapeDataString(resourceName));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleBytestreamMedia>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists advertisers that are accessible to the current user. The order is defined by the order_by parameter. A single partner_id is required. Cross-partner listing is not supported.
		/// Displayvideo_advertisers_list v1/advertisers
		/// </summary>
		/// <param name="filter">Allows filtering by advertiser fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. * A restriction has the form of `{field} {operator} {value}`. * The `updateTime` field must use the `GREATER THAN OR EQUAL TO (>=)` or `LESS THAN OR EQUAL TO (<=)` operators. * All other fields must use the `EQUALS (=)` operator. Supported fields: * `advertiserId` * `displayName` * `entityStatus` * `updateTime` (input in ISO 8601 format, or `YYYY-MM-DDTHH:MM:SSZ`) Examples: * All active advertisers under a partner: `entityStatus="ENTITY_STATUS_ACTIVE"` * All advertisers with an update time less than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime<="2020-11-04T18:54:47Z"` * All advertisers with an update time greater than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime>="2020-11-04T18:54:47Z"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `displayName` (default) * `entityStatus` * `updateTime` The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. For example, `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListAdvertisers` method. If not specified, the first page of results will be returned.</param>
		/// <param name="partnerId">Required. The ID of the partner that the fetched advertisers should all belong to. The system only supports listing advertisers for one partner at a time.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAdvertisersResponse> Displayvideo_advertisers_listAsync(string filter, string orderBy, int pageSize, string pageToken, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAdvertisersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new advertiser. Returns the newly created advertiser if successful. This method can take up to 180 seconds to complete.
		/// Displayvideo_advertisers_create v1/advertisers
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Advertiser> Displayvideo_advertisers_createAsync(Advertiser requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Advertiser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an advertiser. Deleting an advertiser will delete all of its child resources, for example, campaigns, insertion orders and line items. A deleted advertiser cannot be recovered.
		/// Displayvideo_advertisers_delete v1/advertisers/{advertiserId}
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser we need to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Displayvideo_advertisers_deleteAsync(string advertiserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an advertiser.
		/// Displayvideo_advertisers_get v1/advertisers/{advertiserId}
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser to fetch.</param>
		/// <returns>Successful response</returns>
		public async Task<Advertiser> Displayvideo_advertisers_getAsync(string advertiserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Advertiser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing advertiser. Returns the updated advertiser if successful.
		/// Displayvideo_advertisers_patch v1/advertisers/{advertiserId}
		/// </summary>
		/// <param name="advertiserId">Output only. The unique ID of the advertiser. Assigned by the system.</param>
		/// <param name="updateMask">Required. The mask to control which fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<Advertiser> Displayvideo_advertisers_patchAsync(string advertiserId, string updateMask, Advertiser requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Advertiser>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists campaigns in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, campaigns with `ENTITY_STATUS_ARCHIVED` will not be included in the results.
		/// Displayvideo_advertisers_campaigns_list v1/advertisers/{advertiserId}/campaigns
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser to list campaigns for.</param>
		/// <param name="filter">Allows filtering by campaign fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * The `updateTime` field must use the `GREATER THAN OR EQUAL TO (>=)` or `LESS THAN OR EQUAL TO (<=)` operators. * All other fields must use the `EQUALS (=)` operator. Supported fields: * `campaignId` * `displayName` * `entityStatus` * `updateTime` (input in ISO 8601 format, or `YYYY-MM-DDTHH:MM:SSZ`) Examples: * All `ENTITY_STATUS_ACTIVE` or `ENTITY_STATUS_PAUSED` campaigns under an advertiser: `(entityStatus="ENTITY_STATUS_ACTIVE" OR entityStatus="ENTITY_STATUS_PAUSED")` * All campaigns with an update time less than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime<="2020-11-04T18:54:47Z"` * All campaigns with an update time greater than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime>="2020-11-04T18:54:47Z"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `displayName` (default) * `entityStatus` * `updateTime` The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListCampaigns` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCampaignsResponse> Displayvideo_advertisers_campaigns_listAsync(string advertiserId, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/campaigns&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCampaignsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new campaign. Returns the newly created campaign if successful.
		/// Displayvideo_advertisers_campaigns_create v1/advertisers/{advertiserId}/campaigns
		/// </summary>
		/// <param name="advertiserId">Output only. The unique ID of the advertiser the campaign belongs to.</param>
		/// <returns>Successful response</returns>
		public async Task<Campaign> Displayvideo_advertisers_campaigns_createAsync(string advertiserId, Campaign requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/campaigns";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Campaign>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Permanently deletes a campaign. A deleted campaign cannot be recovered. The campaign should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to be able to delete it.
		/// Displayvideo_advertisers_campaigns_delete v1/advertisers/{advertiserId}/campaigns/{campaignId}
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser this campaign belongs to.</param>
		/// <param name="campaignId">The ID of the campaign we need to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Displayvideo_advertisers_campaigns_deleteAsync(string advertiserId, string campaignId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/campaigns/"+ (campaignId==null? "" : System.Uri.EscapeDataString(campaignId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a campaign.
		/// Displayvideo_advertisers_campaigns_get v1/advertisers/{advertiserId}/campaigns/{campaignId}
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser this campaign belongs to.</param>
		/// <param name="campaignId">Required. The ID of the campaign to fetch.</param>
		/// <returns>Successful response</returns>
		public async Task<Campaign> Displayvideo_advertisers_campaigns_getAsync(string advertiserId, string campaignId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/campaigns/"+ (campaignId==null? "" : System.Uri.EscapeDataString(campaignId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Campaign>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing campaign. Returns the updated campaign if successful.
		/// Displayvideo_advertisers_campaigns_patch v1/advertisers/{advertiserId}/campaigns/{campaignId}
		/// </summary>
		/// <param name="advertiserId">Output only. The unique ID of the advertiser the campaign belongs to.</param>
		/// <param name="campaignId">Output only. The unique ID of the campaign. Assigned by the system.</param>
		/// <param name="updateMask">Required. The mask to control which fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<Campaign> Displayvideo_advertisers_campaigns_patchAsync(string advertiserId, string campaignId, string updateMask, Campaign requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/campaigns/"+ (campaignId==null? "" : System.Uri.EscapeDataString(campaignId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Campaign>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the targeting options assigned to a campaign for a specified targeting type.
		/// Displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_list v1/advertisers/{advertiserId}/campaigns/{campaignId}/targetingTypes/{targetingType}/assignedTargetingOptions
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser the campaign belongs to.</param>
		/// <param name="campaignId">Required. The ID of the campaign to list assigned targeting options for.</param>
		/// <param name="targetingType">Required. Identifies the type of assigned targeting options to list. Supported targeting types: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_VIEWABILITY`</param>
		/// <param name="filter">Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR` logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedTargetingOptionId` * `inheritance` Examples: * `AssignedTargetingOption` resources with ID 1 or 2 `assignedTargetingOptionId="1" OR assignedTargetingOptionId="2"` * `AssignedTargetingOption` resources with inheritance status of `NOT_INHERITED` or `INHERITED_FROM_PARTNER` `inheritance="NOT_INHERITED" OR inheritance="INHERITED_FROM_PARTNER"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `assignedTargetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `assignedTargetingOptionId desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `5000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListCampaignAssignedTargetingOptions` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCampaignAssignedTargetingOptionsResponse> Displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_listAsync(string advertiserId, string campaignId, AssignedTargetingOptionTargetingType targetingType, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/campaigns/"+ (campaignId==null? "" : System.Uri.EscapeDataString(campaignId))+"/targetingTypes/"+targetingType+"/assignedTargetingOptions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCampaignAssignedTargetingOptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a single targeting option assigned to a campaign.
		/// Displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_get v1/advertisers/{advertiserId}/campaigns/{campaignId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser the campaign belongs to.</param>
		/// <param name="campaignId">Required. The ID of the campaign the assigned targeting option belongs to.</param>
		/// <param name="targetingType">Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_VIEWABILITY`</param>
		/// <param name="assignedTargetingOptionId">Required. An identifier unique to the targeting type in this campaign that identifies the assigned targeting option being requested.</param>
		/// <returns>Successful response</returns>
		public async Task<AssignedTargetingOption> Displayvideo_advertisers_campaigns_targetingTypes_assignedTargetingOptions_getAsync(string advertiserId, string campaignId, AssignedTargetingOptionTargetingType targetingType, string assignedTargetingOptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/campaigns/"+ (campaignId==null? "" : System.Uri.EscapeDataString(campaignId))+"/targetingTypes/"+targetingType+"/assignedTargetingOptions/"+ (assignedTargetingOptionId==null? "" : System.Uri.EscapeDataString(assignedTargetingOptionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssignedTargetingOption>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists assigned targeting options of a campaign across targeting types.
		/// Displayvideo_advertisers_campaigns_bulkListCampaignAssignedTargetingOptions v1/advertisers/{advertiserId}/campaigns/{campaignId}:bulkListCampaignAssignedTargetingOptions
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser the campaign belongs to.</param>
		/// <param name="campaignId">Required. The ID of the campaign to list assigned targeting options for.</param>
		/// <param name="filter">Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR` logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `targetingType` * `inheritance` Examples: * `AssignedTargetingOption` resources of targeting type `TARGETING_TYPE_LANGUAGE` or `TARGETING_TYPE_GENDER`: `targetingType="TARGETING_TYPE_LANGUAGE" OR targetingType="TARGETING_TYPE_GENDER"` * `AssignedTargetingOption` resources with inheritance status of `NOT_INHERITED` or `INHERITED_FROM_PARTNER`: `inheritance="NOT_INHERITED" OR inheritance="INHERITED_FROM_PARTNER"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `targetingType` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `targetingType desc`.</param>
		/// <param name="pageSize">Requested page size. The size must be an integer between `1` and `5000`. If unspecified, the default is `5000`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token that lets the client fetch the next page of results. Typically, this is the value of next_page_token returned from the previous call to `BulkListCampaignAssignedTargetingOptions` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<BulkListCampaignAssignedTargetingOptionsResponse> Displayvideo_advertisers_campaigns_bulkListCampaignAssignedTargetingOptionsAsync(string advertiserId, string campaignId, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/campaigns/"+ (campaignId==null? "" : System.Uri.EscapeDataString(campaignId))+":bulkListCampaignAssignedTargetingOptions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BulkListCampaignAssignedTargetingOptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists channels for a partner or advertiser.
		/// Displayvideo_advertisers_channels_list v1/advertisers/{advertiserId}/channels
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser that owns the channels.</param>
		/// <param name="filter">Allows filtering by channel fields. Supported syntax: * Filter expressions for channel can only contain at most one restriction. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `displayName` Examples: * All channels for which the display name contains "google": `displayName : "google"`. The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `displayName` (default) * `channelId` The default sorting order is ascending. To specify descending order for a field, a suffix " desc" should be added to the field name. Example: `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListChannels` method. If not specified, the first page of results will be returned.</param>
		/// <param name="partnerId">The ID of the partner that owns the channels.</param>
		/// <returns>Successful response</returns>
		public async Task<ListChannelsResponse> Displayvideo_advertisers_channels_listAsync(string advertiserId, string filter, string orderBy, int pageSize, string pageToken, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/channels&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListChannelsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new channel. Returns the newly created channel if successful.
		/// Displayvideo_advertisers_channels_create v1/advertisers/{advertiserId}/channels
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser that owns the created channel.</param>
		/// <param name="partnerId">The ID of the partner that owns the created channel.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Displayvideo_advertisers_channels_createAsync(string advertiserId, string partnerId, Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/channels&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Channel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a channel. Returns the updated channel if successful.
		/// Displayvideo_advertisers_channels_patch v1/advertisers/{advertiserId}/channels/{channelId}
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser that owns the created channel.</param>
		/// <param name="channelId">Output only. The unique ID of the channel. Assigned by the system.</param>
		/// <param name="partnerId">The ID of the partner that owns the created channel.</param>
		/// <param name="updateMask">Required. The mask to control which fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Displayvideo_advertisers_channels_patchAsync(string advertiserId, string channelId, string partnerId, string updateMask, Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Channel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists sites in a channel.
		/// Displayvideo_advertisers_channels_sites_list v1/advertisers/{advertiserId}/channels/{channelId}/sites
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser that owns the parent channel.</param>
		/// <param name="channelId">Required. The ID of the parent channel to which the requested sites belong.</param>
		/// <param name="filter">Allows filtering by site fields. Supported syntax: * Filter expressions for site retrieval can only contain at most one restriction. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `urlOrAppId` Examples: * All sites for which the URL or app ID contains "google": `urlOrAppId : "google"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `urlOrAppId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix " desc" should be added to the field name. Example: `urlOrAppId desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `10000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListSites` method. If not specified, the first page of results will be returned.</param>
		/// <param name="partnerId">The ID of the partner that owns the parent channel.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSitesResponse> Displayvideo_advertisers_channels_sites_listAsync(string advertiserId, string channelId, string filter, string orderBy, int pageSize, string pageToken, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/sites&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSitesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a site from a channel.
		/// Displayvideo_advertisers_channels_sites_delete v1/advertisers/{advertiserId}/channels/{channelId}/sites/{urlOrAppId}
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser that owns the parent channel.</param>
		/// <param name="channelId">Required. The ID of the parent channel to which the site belongs.</param>
		/// <param name="urlOrAppId">Required. The URL or app ID of the site to delete.</param>
		/// <param name="partnerId">The ID of the partner that owns the parent channel.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Displayvideo_advertisers_channels_sites_deleteAsync(string advertiserId, string channelId, string urlOrAppId, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/sites/"+ (urlOrAppId==null? "" : System.Uri.EscapeDataString(urlOrAppId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Bulk edits sites under a single channel. The operation will delete the sites provided in BulkEditSitesRequest.deleted_sites and then create the sites provided in BulkEditSitesRequest.created_sites.
		/// Displayvideo_advertisers_channels_sites_bulkEdit v1/advertisers/{advertiserId}/channels/{channelId}/sites:bulkEdit
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser that owns the parent channel.</param>
		/// <param name="channelId">Required. The ID of the parent channel to which the sites belong.</param>
		/// <returns>Successful response</returns>
		public async Task<BulkEditSitesResponse> Displayvideo_advertisers_channels_sites_bulkEditAsync(string advertiserId, string channelId, BulkEditSitesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/sites:bulkEdit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BulkEditSitesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces all of the sites under a single channel. The operation will replace the sites under a channel with the sites provided in ReplaceSitesRequest.new_sites.
		/// Displayvideo_advertisers_channels_sites_replace v1/advertisers/{advertiserId}/channels/{channelId}/sites:replace
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser that owns the parent channel.</param>
		/// <param name="channelId">Required. The ID of the parent channel whose sites will be replaced.</param>
		/// <returns>Successful response</returns>
		public async Task<ReplaceSitesResponse> Displayvideo_advertisers_channels_sites_replaceAsync(string advertiserId, string channelId, ReplaceSitesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/sites:replace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReplaceSitesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists creatives in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, creatives with `ENTITY_STATUS_ARCHIVED` will not be included in the results.
		/// Displayvideo_advertisers_creatives_list v1/advertisers/{advertiserId}/creatives
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser to list creatives for.</param>
		/// <param name="filter">Allows filtering by creative fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * The `lineItemIds` field must use the `HAS (:)` operator. * The `updateTime` field must use the `GREATER THAN OR EQUAL TO (>=)` or `LESS THAN OR EQUAL TO (<=)` operators. * All other fields must use the `EQUALS (=)` operator. * For `entityStatus`, `minDuration`, `maxDuration`, `updateTime`, and `dynamic` fields, there may be at most one restriction. Supported Fields: * `approvalStatus` * `creativeId` * `creativeType` * `dimensions` (input in the form of `{width}x{height}`) * `dynamic` * `entityStatus` * `exchangeReviewStatus` (input in the form of `{exchange}-{reviewStatus}`) * `lineItemIds` * `maxDuration` (input in the form of `{duration}s`. Only seconds are supported) * `minDuration` (input in the form of `{duration}s`. Only seconds are supported) * `updateTime` (input in ISO 8601 format, or `YYYY-MM-DDTHH:MM:SSZ`) Notes: * For `updateTime`, a creative resource's field value reflects the last time that a creative has been updated, which includes updates made by the system (e.g. creative review updates). Examples: * All native creatives: `creativeType="CREATIVE_TYPE_NATIVE"` * All active creatives with 300x400 or 50x100 dimensions: `entityStatus="ENTITY_STATUS_ACTIVE" AND (dimensions="300x400" OR dimensions="50x100")` * All dynamic creatives that are approved by AdX or AppNexus, with a minimum duration of 5 seconds and 200ms: `dynamic="true" AND minDuration="5.2s" AND (exchangeReviewStatus="EXCHANGE_GOOGLE_AD_MANAGER-REVIEW_STATUS_APPROVED" OR exchangeReviewStatus="EXCHANGE_APPNEXUS-REVIEW_STATUS_APPROVED")` * All video creatives that are associated with line item ID 1 or 2: `creativeType="CREATIVE_TYPE_VIDEO" AND (lineItemIds:1 OR lineItemIds:2)` * Find creatives by multiple creative IDs: `creativeId=1 OR creativeId=2` * All creatives with an update time greater than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime>="2020-11-04T18:54:47Z"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `creativeId` (default) * `createTime` * `mediaDuration` * `dimensions` (sorts by width first, then by height) The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `createTime desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListCreatives` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCreativesResponse> Displayvideo_advertisers_creatives_listAsync(string advertiserId, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/creatives&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCreativesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new creative. Returns the newly created creative if successful. A ["Standard" user role](//support.google.com/displayvideo/answer/2723011) or greater for the parent advertiser or partner is required to make this request.
		/// Displayvideo_advertisers_creatives_create v1/advertisers/{advertiserId}/creatives
		/// </summary>
		/// <param name="advertiserId">Output only. The unique ID of the advertiser the creative belongs to.</param>
		/// <returns>Successful response</returns>
		public async Task<Creative> Displayvideo_advertisers_creatives_createAsync(string advertiserId, Creative requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/creatives";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Creative>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a creative. Returns error code `NOT_FOUND` if the creative does not exist. The creative should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, before it can be deleted. A ["Standard" user role](//support.google.com/displayvideo/answer/2723011) or greater for the parent advertiser or partner is required to make this request.
		/// Displayvideo_advertisers_creatives_delete v1/advertisers/{advertiserId}/creatives/{creativeId}
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser this creative belongs to.</param>
		/// <param name="creativeId">The ID of the creative to be deleted.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Displayvideo_advertisers_creatives_deleteAsync(string advertiserId, string creativeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/creatives/"+ (creativeId==null? "" : System.Uri.EscapeDataString(creativeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a creative.
		/// Displayvideo_advertisers_creatives_get v1/advertisers/{advertiserId}/creatives/{creativeId}
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser this creative belongs to.</param>
		/// <param name="creativeId">Required. The ID of the creative to fetch.</param>
		/// <returns>Successful response</returns>
		public async Task<Creative> Displayvideo_advertisers_creatives_getAsync(string advertiserId, string creativeId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/creatives/"+ (creativeId==null? "" : System.Uri.EscapeDataString(creativeId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Creative>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing creative. Returns the updated creative if successful. A ["Standard" user role](//support.google.com/displayvideo/answer/2723011) or greater for the parent advertiser or partner is required to make this request.
		/// Displayvideo_advertisers_creatives_patch v1/advertisers/{advertiserId}/creatives/{creativeId}
		/// </summary>
		/// <param name="advertiserId">Output only. The unique ID of the advertiser the creative belongs to.</param>
		/// <param name="creativeId">Output only. The unique ID of the creative. Assigned by the system.</param>
		/// <param name="updateMask">Required. The mask to control which fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<Creative> Displayvideo_advertisers_creatives_patchAsync(string advertiserId, string creativeId, string updateMask, Creative requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/creatives/"+ (creativeId==null? "" : System.Uri.EscapeDataString(creativeId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Creative>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists insertion orders in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, insertion orders with `ENTITY_STATUS_ARCHIVED` will not be included in the results.
		/// Displayvideo_advertisers_insertionOrders_list v1/advertisers/{advertiserId}/insertionOrders
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser to list insertion orders for.</param>
		/// <param name="filter">Allows filtering by insertion order fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * The `updateTime` field must use the `GREATER THAN OR EQUAL TO (>=)` or `LESS THAN OR EQUAL TO (<=)` operators. * All other fields must use the `EQUALS (=)` operator. Supported fields: * `campaignId` * `displayName` * `entityStatus` * `updateTime` (input in ISO 8601 format, or `YYYY-MM-DDTHH:MM:SSZ`) Examples: * All insertion orders under a campaign: `campaignId="1234"` * All `ENTITY_STATUS_ACTIVE` or `ENTITY_STATUS_PAUSED` insertion orders under an advertiser: `(entityStatus="ENTITY_STATUS_ACTIVE" OR entityStatus="ENTITY_STATUS_PAUSED")` * All insertion orders with an update time less than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime<="2020-11-04T18:54:47Z"` * All insertion orders with an update time greater than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime>="2020-11-04T18:54:47Z"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * "displayName" (default) * "entityStatus" * "updateTime" The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `100`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListInsertionOrders` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListInsertionOrdersResponse> Displayvideo_advertisers_insertionOrders_listAsync(string advertiserId, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/insertionOrders&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListInsertionOrdersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new insertion order. Returns the newly created insertion order if successful.
		/// Displayvideo_advertisers_insertionOrders_create v1/advertisers/{advertiserId}/insertionOrders
		/// </summary>
		/// <param name="advertiserId">Output only. The unique ID of the advertiser the insertion order belongs to.</param>
		/// <returns>Successful response</returns>
		public async Task<InsertionOrder> Displayvideo_advertisers_insertionOrders_createAsync(string advertiserId, InsertionOrder requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/insertionOrders";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InsertionOrder>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an insertion order. Returns error code `NOT_FOUND` if the insertion order does not exist. The insertion order should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to be able to delete it.
		/// Displayvideo_advertisers_insertionOrders_delete v1/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser this insertion order belongs to.</param>
		/// <param name="insertionOrderId">The ID of the insertion order to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Displayvideo_advertisers_insertionOrders_deleteAsync(string advertiserId, string insertionOrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/insertionOrders/"+ (insertionOrderId==null? "" : System.Uri.EscapeDataString(insertionOrderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an insertion order. Returns error code `NOT_FOUND` if the insertion order does not exist.
		/// Displayvideo_advertisers_insertionOrders_get v1/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser this insertion order belongs to.</param>
		/// <param name="insertionOrderId">Required. The ID of the insertion order to fetch.</param>
		/// <returns>Successful response</returns>
		public async Task<InsertionOrder> Displayvideo_advertisers_insertionOrders_getAsync(string advertiserId, string insertionOrderId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/insertionOrders/"+ (insertionOrderId==null? "" : System.Uri.EscapeDataString(insertionOrderId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InsertionOrder>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing insertion order. Returns the updated insertion order if successful.
		/// Displayvideo_advertisers_insertionOrders_patch v1/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}
		/// </summary>
		/// <param name="advertiserId">Output only. The unique ID of the advertiser the insertion order belongs to.</param>
		/// <param name="insertionOrderId">Output only. The unique ID of the insertion order. Assigned by the system.</param>
		/// <param name="updateMask">Required. The mask to control which fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<InsertionOrder> Displayvideo_advertisers_insertionOrders_patchAsync(string advertiserId, string insertionOrderId, string updateMask, InsertionOrder requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/insertionOrders/"+ (insertionOrderId==null? "" : System.Uri.EscapeDataString(insertionOrderId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InsertionOrder>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the targeting options assigned to an insertion order.
		/// Displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_list v1/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}/targetingTypes/{targetingType}/assignedTargetingOptions
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser the insertion order belongs to.</param>
		/// <param name="insertionOrderId">Required. The ID of the insertion order to list assigned targeting options for.</param>
		/// <param name="targetingType">Required. Identifies the type of assigned targeting options to list. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_VIEWABILITY`</param>
		/// <param name="filter">Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedTargetingOptionId` * `inheritance` Examples: * `AssignedTargetingOption` resources with ID 1 or 2: `assignedTargetingOptionId="1" OR assignedTargetingOptionId="2"` * `AssignedTargetingOption` resources with inheritance status of `NOT_INHERITED` or `INHERITED_FROM_PARTNER`: `inheritance="NOT_INHERITED" OR inheritance="INHERITED_FROM_PARTNER"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `assignedTargetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `assignedTargetingOptionId desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `5000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListInsertionOrderAssignedTargetingOptions` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListInsertionOrderAssignedTargetingOptionsResponse> Displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_listAsync(string advertiserId, string insertionOrderId, AssignedTargetingOptionTargetingType targetingType, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/insertionOrders/"+ (insertionOrderId==null? "" : System.Uri.EscapeDataString(insertionOrderId))+"/targetingTypes/"+targetingType+"/assignedTargetingOptions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListInsertionOrderAssignedTargetingOptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a single targeting option assigned to an insertion order.
		/// Displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_get v1/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser the insertion order belongs to.</param>
		/// <param name="insertionOrderId">Required. The ID of the insertion order the assigned targeting option belongs to.</param>
		/// <param name="targetingType">Required. Identifies the type of this assigned targeting option. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_VIEWABILITY`</param>
		/// <param name="assignedTargetingOptionId">Required. An identifier unique to the targeting type in this insertion order that identifies the assigned targeting option being requested.</param>
		/// <returns>Successful response</returns>
		public async Task<AssignedTargetingOption> Displayvideo_advertisers_insertionOrders_targetingTypes_assignedTargetingOptions_getAsync(string advertiserId, string insertionOrderId, AssignedTargetingOptionTargetingType targetingType, string assignedTargetingOptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/insertionOrders/"+ (insertionOrderId==null? "" : System.Uri.EscapeDataString(insertionOrderId))+"/targetingTypes/"+targetingType+"/assignedTargetingOptions/"+ (assignedTargetingOptionId==null? "" : System.Uri.EscapeDataString(assignedTargetingOptionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssignedTargetingOption>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists assigned targeting options of an insertion order across targeting types.
		/// Displayvideo_advertisers_insertionOrders_bulkListInsertionOrderAssignedTargetingOptions v1/advertisers/{advertiserId}/insertionOrders/{insertionOrderId}:bulkListInsertionOrderAssignedTargetingOptions
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser the insertion order belongs to.</param>
		/// <param name="insertionOrderId">Required. The ID of the insertion order to list assigned targeting options for.</param>
		/// <param name="filter">Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `targetingType` * `inheritance` Examples: * `AssignedTargetingOption` resources of targeting type `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` or `TARGETING_TYPE_CHANNEL`: `targetingType="TARGETING_TYPE_PROXIMITY_LOCATION_LIST" OR targetingType="TARGETING_TYPE_CHANNEL"` * `AssignedTargetingOption` resources with inheritance status of `NOT_INHERITED` or `INHERITED_FROM_PARTNER`: `inheritance="NOT_INHERITED" OR inheritance="INHERITED_FROM_PARTNER"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `targetingType` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `targetingType desc`.</param>
		/// <param name="pageSize">Requested page size. The size must be an integer between `1` and `5000`. If unspecified, the default is `5000`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token that lets the client fetch the next page of results. Typically, this is the value of next_page_token returned from the previous call to `BulkListInsertionOrderAssignedTargetingOptions` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<BulkListInsertionOrderAssignedTargetingOptionsResponse> Displayvideo_advertisers_insertionOrders_bulkListInsertionOrderAssignedTargetingOptionsAsync(string advertiserId, string insertionOrderId, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/insertionOrders/"+ (insertionOrderId==null? "" : System.Uri.EscapeDataString(insertionOrderId))+":bulkListInsertionOrderAssignedTargetingOptions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BulkListInsertionOrderAssignedTargetingOptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists invoices posted for an advertiser in a given month. Invoices generated by billing profiles with a "Partner" invoice level are not retrievable through this method.
		/// Displayvideo_advertisers_invoices_list v1/advertisers/{advertiserId}/invoices
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser to list invoices for.</param>
		/// <param name="issueMonth">The month to list the invoices for. If not set, the request will retrieve invoices for the previous month. Must be in the format YYYYMM.</param>
		/// <param name="loiSapinInvoiceType">Select type of invoice to retrieve for Loi Sapin advertisers. Only applicable to Loi Sapin advertisers. Will be ignored otherwise.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListInvoices` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListInvoicesResponse> Displayvideo_advertisers_invoices_listAsync(string advertiserId, string issueMonth, Displayvideo_advertisers_invoices_listLoiSapinInvoiceType loiSapinInvoiceType, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/invoices&issueMonth=" + (issueMonth==null? "" : System.Uri.EscapeDataString(issueMonth))+"&loiSapinInvoiceType=" + loiSapinInvoiceType+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListInvoicesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Retrieves the invoice currency used by an advertiser in a given month.
		/// Displayvideo_advertisers_invoices_lookupInvoiceCurrency v1/advertisers/{advertiserId}/invoices:lookupInvoiceCurrency
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser to lookup currency for.</param>
		/// <param name="invoiceMonth">Month for which the currency is needed. If not set, the request will return existing currency settings for the advertiser. Must be in the format YYYYMM.</param>
		/// <returns>Successful response</returns>
		public async Task<LookupInvoiceCurrencyResponse> Displayvideo_advertisers_invoices_lookupInvoiceCurrencyAsync(string advertiserId, string invoiceMonth, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/invoices:lookupInvoiceCurrency&invoiceMonth=" + (invoiceMonth==null? "" : System.Uri.EscapeDataString(invoiceMonth));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LookupInvoiceCurrencyResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists line items in an advertiser. The order is defined by the order_by parameter. If a filter by entity_status is not specified, line items with `ENTITY_STATUS_ARCHIVED` will not be included in the results.
		/// Displayvideo_advertisers_lineItems_list v1/advertisers/{advertiserId}/lineItems
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser to list line items for.</param>
		/// <param name="filter">Allows filtering by line item fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * The `updateTime` field must use the `GREATER THAN OR EQUAL TO (>=)` or `LESS THAN OR EQUAL TO (<=)` operators. * All other fields must use the `EQUALS (=)` operator. Supported fields: * `campaignId` * `displayName` * `entityStatus` * `insertionOrderId` * `lineItemId` * `lineItemType` * `updateTime` (input in ISO 8601 format, or `YYYY-MM-DDTHH:MM:SSZ`) Examples: * All line items under an insertion order: `insertionOrderId="1234"` * All `ENTITY_STATUS_ACTIVE` or `ENTITY_STATUS_PAUSED` and `LINE_ITEM_TYPE_DISPLAY_DEFAULT` line items under an advertiser: `(entityStatus="ENTITY_STATUS_ACTIVE" OR entityStatus="ENTITY_STATUS_PAUSED") AND lineItemType="LINE_ITEM_TYPE_DISPLAY_DEFAULT"` * All line items with an update time less than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime<="2020-11-04T18:54:47Z"` * All line items with an update time greater than or equal to 2020-11-04T18:54:47Z (format of ISO 8601): `updateTime>="2020-11-04T18:54:47Z"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `displayName` (default) * `entityStatus` * `updateTime` The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListLineItems` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLineItemsResponse> Displayvideo_advertisers_lineItems_listAsync(string advertiserId, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/lineItems&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLineItemsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new line item. Returns the newly created line item if successful. YouTube & Partners line items cannot be created or updated using the API.
		/// Displayvideo_advertisers_lineItems_create v1/advertisers/{advertiserId}/lineItems
		/// </summary>
		/// <param name="advertiserId">Output only. The unique ID of the advertiser the line item belongs to.</param>
		/// <returns>Successful response</returns>
		public async Task<LineItem> Displayvideo_advertisers_lineItems_createAsync(string advertiserId, LineItem requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/lineItems";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LineItem>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a line item. Returns error code `NOT_FOUND` if the line item does not exist. The line item should be archived first, i.e. set entity_status to `ENTITY_STATUS_ARCHIVED`, to be able to delete it. YouTube & Partners line items cannot be created or updated using the API.
		/// Displayvideo_advertisers_lineItems_delete v1/advertisers/{advertiserId}/lineItems/{lineItemId}
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser this line item belongs to.</param>
		/// <param name="lineItemId">The ID of the line item to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Displayvideo_advertisers_lineItems_deleteAsync(string advertiserId, string lineItemId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/lineItems/"+ (lineItemId==null? "" : System.Uri.EscapeDataString(lineItemId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a line item.
		/// Displayvideo_advertisers_lineItems_get v1/advertisers/{advertiserId}/lineItems/{lineItemId}
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser this line item belongs to.</param>
		/// <param name="lineItemId">Required. The ID of the line item to fetch.</param>
		/// <returns>Successful response</returns>
		public async Task<LineItem> Displayvideo_advertisers_lineItems_getAsync(string advertiserId, string lineItemId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/lineItems/"+ (lineItemId==null? "" : System.Uri.EscapeDataString(lineItemId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LineItem>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing line item. Returns the updated line item if successful. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * BulkEditAssignedTargetingOptions * BulkUpdateLineItems * assignedTargetingOptions.create * assignedTargetingOptions.delete YouTube & Partners line items cannot be created or updated using the API.
		/// Displayvideo_advertisers_lineItems_patch v1/advertisers/{advertiserId}/lineItems/{lineItemId}
		/// </summary>
		/// <param name="advertiserId">Output only. The unique ID of the advertiser the line item belongs to.</param>
		/// <param name="lineItemId">Output only. The unique ID of the line item. Assigned by the system.</param>
		/// <param name="updateMask">Required. The mask to control which fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<LineItem> Displayvideo_advertisers_lineItems_patchAsync(string advertiserId, string lineItemId, string updateMask, LineItem requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/lineItems/"+ (lineItemId==null? "" : System.Uri.EscapeDataString(lineItemId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LineItem>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the targeting options assigned to a line item.
		/// Displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_list v1/advertisers/{advertiserId}/lineItems/{lineItemId}/targetingTypes/{targetingType}/assignedTargetingOptions
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser the line item belongs to.</param>
		/// <param name="lineItemId">Required. The ID of the line item to list assigned targeting options for.</param>
		/// <param name="targetingType">Required. Identifies the type of assigned targeting options to list. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_VIEWABILITY` * `TARGETING_TYPE_YOUTUBE_CHANNEL` (only for `LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIDEO_SEQUENCE` line items) * `TARGETING_TYPE_YOUTUBE_VIDEO` (only for `LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIDEO_SEQUENCE` line items)</param>
		/// <param name="filter">Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedTargetingOptionId` * `inheritance` Examples: * `AssignedTargetingOption` resources with ID 1 or 2: `assignedTargetingOptionId="1" OR assignedTargetingOptionId="2"` * `AssignedTargetingOption` resources with inheritance status of `NOT_INHERITED` or `INHERITED_FROM_PARTNER`: `inheritance="NOT_INHERITED" OR inheritance="INHERITED_FROM_PARTNER"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `assignedTargetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `assignedTargetingOptionId desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `5000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListLineItemAssignedTargetingOptions` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLineItemAssignedTargetingOptionsResponse> Displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_listAsync(string advertiserId, string lineItemId, AssignedTargetingOptionTargetingType targetingType, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/lineItems/"+ (lineItemId==null? "" : System.Uri.EscapeDataString(lineItemId))+"/targetingTypes/"+targetingType+"/assignedTargetingOptions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLineItemAssignedTargetingOptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assigns a targeting option to a line item. Returns the assigned targeting option if successful. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * lineItems.bulkEditAssignedTargetingOptions * lineItems.bulkUpdate * lineItems.patch * DeleteLineItemAssignedTargetingOption YouTube & Partners line items cannot be created or updated using the API.
		/// Displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_create v1/advertisers/{advertiserId}/lineItems/{lineItemId}/targetingTypes/{targetingType}/assignedTargetingOptions
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser the line item belongs to.</param>
		/// <param name="lineItemId">Required. The ID of the line item the assigned targeting option will belong to.</param>
		/// <param name="targetingType">Required. Identifies the type of this assigned targeting option. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_VIEWABILITY`</param>
		/// <returns>Successful response</returns>
		public async Task<AssignedTargetingOption> Displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_createAsync(string advertiserId, string lineItemId, AssignedTargetingOptionTargetingType targetingType, AssignedTargetingOption requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/lineItems/"+ (lineItemId==null? "" : System.Uri.EscapeDataString(lineItemId))+"/targetingTypes/"+targetingType+"/assignedTargetingOptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssignedTargetingOption>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an assigned targeting option from a line item. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * lineItems.bulkEditAssignedTargetingOptions * lineItems.bulkUpdate * lineItems.patch * CreateLineItemAssignedTargetingOption YouTube & Partners line items cannot be created or updated using the API.
		/// Displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_delete v1/advertisers/{advertiserId}/lineItems/{lineItemId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser the line item belongs to.</param>
		/// <param name="lineItemId">Required. The ID of the line item the assigned targeting option belongs to.</param>
		/// <param name="targetingType">Required. Identifies the type of this assigned targeting option. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_VIEWABILITY`</param>
		/// <param name="assignedTargetingOptionId">Required. The ID of the assigned targeting option to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_deleteAsync(string advertiserId, string lineItemId, AssignedTargetingOptionTargetingType targetingType, string assignedTargetingOptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/lineItems/"+ (lineItemId==null? "" : System.Uri.EscapeDataString(lineItemId))+"/targetingTypes/"+targetingType+"/assignedTargetingOptions/"+ (assignedTargetingOptionId==null? "" : System.Uri.EscapeDataString(assignedTargetingOptionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a single targeting option assigned to a line item.
		/// Displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_get v1/advertisers/{advertiserId}/lineItems/{lineItemId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser the line item belongs to.</param>
		/// <param name="lineItemId">Required. The ID of the line item the assigned targeting option belongs to.</param>
		/// <param name="targetingType">Required. Identifies the type of this assigned targeting option. Supported targeting types include: * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_APP` * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AUDIENCE_GROUP` * `TARGETING_TYPE_AUDIO_CONTENT_TYPE` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_BUSINESS_CHAIN` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_CONTENT_DURATION` * `TARGETING_TYPE_CONTENT_GENRE` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_STREAM_TYPE` * `TARGETING_TYPE_DAY_AND_TIME` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_INVENTORY_SOURCE` * `TARGETING_TYPE_INVENTORY_SOURCE_GROUP` * `TARGETING_TYPE_KEYWORD` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_NEGATIVE_KEYWORD_LIST` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_POI` * `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` * `TARGETING_TYPE_REGIONAL_LOCATION_LIST` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_THIRD_PARTY_VERIFIER` * `TARGETING_TYPE_URL` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_VIEWABILITY` * `TARGETING_TYPE_YOUTUBE_CHANNEL` (only for `LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIDEO_SEQUENCE` line items) * `TARGETING_TYPE_YOUTUBE_VIDEO` (only for `LINE_ITEM_TYPE_YOUTUBE_AND_PARTNERS_VIDEO_SEQUENCE` line items)</param>
		/// <param name="assignedTargetingOptionId">Required. An identifier unique to the targeting type in this line item that identifies the assigned targeting option being requested.</param>
		/// <returns>Successful response</returns>
		public async Task<AssignedTargetingOption> Displayvideo_advertisers_lineItems_targetingTypes_assignedTargetingOptions_getAsync(string advertiserId, string lineItemId, AssignedTargetingOptionTargetingType targetingType, string assignedTargetingOptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/lineItems/"+ (lineItemId==null? "" : System.Uri.EscapeDataString(lineItemId))+"/targetingTypes/"+targetingType+"/assignedTargetingOptions/"+ (assignedTargetingOptionId==null? "" : System.Uri.EscapeDataString(assignedTargetingOptionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssignedTargetingOption>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Bulk edits targeting options under a single line item. The operation will delete the assigned targeting options provided in BulkEditLineItemAssignedTargetingOptionsRequest.delete_requests and then create the assigned targeting options provided in BulkEditLineItemAssignedTargetingOptionsRequest.create_requests. Requests to this endpoint cannot be made concurrently with the following requests updating the same line item: * lineItems.patch * assignedTargetingOptions.create * assignedTargetingOptions.delete YouTube & Partners line items cannot be created or updated using the API.
		/// Displayvideo_advertisers_lineItems_bulkEditLineItemAssignedTargetingOptions v1/advertisers/{advertiserId}/lineItems/{lineItemId}:bulkEditLineItemAssignedTargetingOptions
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser the line item belongs to.</param>
		/// <param name="lineItemId">Required. The ID of the line item the assigned targeting option will belong to.</param>
		/// <returns>Successful response</returns>
		public async Task<BulkEditLineItemAssignedTargetingOptionsResponse> Displayvideo_advertisers_lineItems_bulkEditLineItemAssignedTargetingOptionsAsync(string advertiserId, string lineItemId, BulkEditLineItemAssignedTargetingOptionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/lineItems/"+ (lineItemId==null? "" : System.Uri.EscapeDataString(lineItemId))+":bulkEditLineItemAssignedTargetingOptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BulkEditLineItemAssignedTargetingOptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists assigned targeting options of a line item across targeting types.
		/// Displayvideo_advertisers_lineItems_bulkListLineItemAssignedTargetingOptions v1/advertisers/{advertiserId}/lineItems/{lineItemId}:bulkListLineItemAssignedTargetingOptions
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser the line item belongs to.</param>
		/// <param name="lineItemId">Required. The ID of the line item to list assigned targeting options for.</param>
		/// <param name="filter">Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `targetingType` * `inheritance` Examples: * `AssignedTargetingOption` resources of targeting type `TARGETING_TYPE_PROXIMITY_LOCATION_LIST` or `TARGETING_TYPE_CHANNEL`: `targetingType="TARGETING_TYPE_PROXIMITY_LOCATION_LIST" OR targetingType="TARGETING_TYPE_CHANNEL"` * `AssignedTargetingOption` resources with inheritance status of `NOT_INHERITED` or `INHERITED_FROM_PARTNER`: `inheritance="NOT_INHERITED" OR inheritance="INHERITED_FROM_PARTNER"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `targetingType` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `targetingType desc`.</param>
		/// <param name="pageSize">Requested page size. The size must be an integer between `1` and `5000`. If unspecified, the default is `5000`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token that lets the client fetch the next page of results. Typically, this is the value of next_page_token returned from the previous call to `BulkListLineItemAssignedTargetingOptions` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<BulkListLineItemAssignedTargetingOptionsResponse> Displayvideo_advertisers_lineItems_bulkListLineItemAssignedTargetingOptionsAsync(string advertiserId, string lineItemId, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/lineItems/"+ (lineItemId==null? "" : System.Uri.EscapeDataString(lineItemId))+":bulkListLineItemAssignedTargetingOptions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BulkListLineItemAssignedTargetingOptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new line item with settings (including targeting) inherited from the insertion order and an `ENTITY_STATUS_DRAFT` entity_status. Returns the newly created line item if successful. There are default values based on the three fields: * The insertion order's insertion_order_type * The insertion order's automation_type * The given line_item_type YouTube & Partners line items cannot be created or updated using the API.
		/// Displayvideo_advertisers_lineItems_generateDefault v1/advertisers/{advertiserId}/lineItems:generateDefault
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser this line item belongs to.</param>
		/// <returns>Successful response</returns>
		public async Task<LineItem> Displayvideo_advertisers_lineItems_generateDefaultAsync(string advertiserId, GenerateDefaultLineItemRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/lineItems:generateDefault";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LineItem>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists location lists based on a given advertiser id.
		/// Displayvideo_advertisers_locationLists_list v1/advertisers/{advertiserId}/locationLists
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the DV360 advertiser to which the fetched location lists belong.</param>
		/// <param name="filter">Allows filtering by location list fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `locationType` Examples: * All regional location list: `locationType="TARGETING_LOCATION_TYPE_REGIONAL"` * All proximity location list: `locationType="TARGETING_LOCATION_TYPE_PROXIMITY"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `locationListId` (default) * `displayName` The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. Defaults to `100` if not set. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListLocationLists` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListLocationListsResponse> Displayvideo_advertisers_locationLists_listAsync(string advertiserId, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/locationLists&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListLocationListsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new location list. Returns the newly created location list if successful.
		/// Displayvideo_advertisers_locationLists_create v1/advertisers/{advertiserId}/locationLists
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the DV360 advertiser to which the location list belongs.</param>
		/// <returns>Successful response</returns>
		public async Task<LocationList> Displayvideo_advertisers_locationLists_createAsync(string advertiserId, LocationList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/locationLists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LocationList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a location list. Returns the updated location list if successful.
		/// Displayvideo_advertisers_locationLists_patch v1/advertisers/{advertiserId}/locationLists/{locationListId}
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the DV360 advertiser to which the location lists belongs.</param>
		/// <param name="locationListId">Output only. The unique ID of the location list. Assigned by the system.</param>
		/// <param name="updateMask">Required. The mask to control which fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<LocationList> Displayvideo_advertisers_locationLists_patchAsync(string advertiserId, string locationListId, string updateMask, LocationList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/locationLists/"+ (locationListId==null? "" : System.Uri.EscapeDataString(locationListId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<LocationList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists locations assigned to a location list.
		/// Displayvideo_advertisers_locationLists_assignedLocations_list v1/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the DV360 advertiser to which the location list belongs.</param>
		/// <param name="locationListId">Required. The ID of the location list to which these assignments are assigned.</param>
		/// <param name="filter">Allows filtering by location list assignment fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR` logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedLocationId` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `assignedLocationId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix " desc" should be added to the field name. Example: `assignedLocationId desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListAssignedLocations` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAssignedLocationsResponse> Displayvideo_advertisers_locationLists_assignedLocations_listAsync(string advertiserId, string locationListId, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/locationLists/"+ (locationListId==null? "" : System.Uri.EscapeDataString(locationListId))+"/assignedLocations&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAssignedLocationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an assignment between a location and a location list.
		/// Displayvideo_advertisers_locationLists_assignedLocations_create v1/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the DV360 advertiser to which the location list belongs.</param>
		/// <param name="locationListId">Required. The ID of the location list for which the assignment will be created.</param>
		/// <returns>Successful response</returns>
		public async Task<AssignedLocation> Displayvideo_advertisers_locationLists_assignedLocations_createAsync(string advertiserId, string locationListId, AssignedLocation requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/locationLists/"+ (locationListId==null? "" : System.Uri.EscapeDataString(locationListId))+"/assignedLocations";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssignedLocation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the assignment between a location and a location list.
		/// Displayvideo_advertisers_locationLists_assignedLocations_delete v1/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations/{assignedLocationId}
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the DV360 advertiser to which the location list belongs.</param>
		/// <param name="locationListId">Required. The ID of the location list to which this assignment is assigned.</param>
		/// <param name="assignedLocationId">Required. The ID of the assigned location to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Displayvideo_advertisers_locationLists_assignedLocations_deleteAsync(string advertiserId, string locationListId, string assignedLocationId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/locationLists/"+ (locationListId==null? "" : System.Uri.EscapeDataString(locationListId))+"/assignedLocations/"+ (assignedLocationId==null? "" : System.Uri.EscapeDataString(assignedLocationId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Bulk edits multiple assignments between locations and a single location list. The operation will delete the assigned locations provided in deletedAssignedLocations and then create the assigned locations provided in createdAssignedLocations.
		/// Displayvideo_advertisers_locationLists_assignedLocations_bulkEdit v1/advertisers/{advertiserId}/locationLists/{locationListId}/assignedLocations:bulkEdit
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the DV360 advertiser to which the location list belongs.</param>
		/// <param name="locationListId">Required. The ID of the location list to which these assignments are assigned.</param>
		/// <returns>Successful response</returns>
		public async Task<BulkEditAssignedLocationsResponse> Displayvideo_advertisers_locationLists_assignedLocations_bulkEditAsync(string advertiserId, string locationListId, BulkEditAssignedLocationsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/locationLists/"+ (locationListId==null? "" : System.Uri.EscapeDataString(locationListId))+"/assignedLocations:bulkEdit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BulkEditAssignedLocationsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists manual triggers that are accessible to the current user for a given advertiser ID. The order is defined by the order_by parameter. A single advertiser_id is required. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
		/// Displayvideo_advertisers_manualTriggers_list v1/advertisers/{advertiserId}/manualTriggers
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser that the fetched manual triggers belong to.</param>
		/// <param name="filter">Allows filtering by manual trigger fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `displayName` * `state` Examples: * All active manual triggers under an advertiser: `state="ACTIVE"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `displayName` (default) * `state` The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. For example, `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListManualTriggers` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListManualTriggersResponse> Displayvideo_advertisers_manualTriggers_listAsync(string advertiserId, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/manualTriggers&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListManualTriggersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new manual trigger. Returns the newly created manual trigger if successful. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
		/// Displayvideo_advertisers_manualTriggers_create v1/advertisers/{advertiserId}/manualTriggers
		/// </summary>
		/// <param name="advertiserId">Required. Immutable. The unique ID of the advertiser that the manual trigger belongs to.</param>
		/// <returns>Successful response</returns>
		public async Task<ManualTrigger> Displayvideo_advertisers_manualTriggers_createAsync(string advertiserId, ManualTrigger requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/manualTriggers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ManualTrigger>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a manual trigger. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
		/// Displayvideo_advertisers_manualTriggers_get v1/advertisers/{advertiserId}/manualTriggers/{triggerId}
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser this manual trigger belongs to.</param>
		/// <param name="triggerId">Required. The ID of the manual trigger to fetch.</param>
		/// <returns>Successful response</returns>
		public async Task<ManualTrigger> Displayvideo_advertisers_manualTriggers_getAsync(string advertiserId, string triggerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/manualTriggers/"+ (triggerId==null? "" : System.Uri.EscapeDataString(triggerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ManualTrigger>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a manual trigger. Returns the updated manual trigger if successful. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
		/// Displayvideo_advertisers_manualTriggers_patch v1/advertisers/{advertiserId}/manualTriggers/{triggerId}
		/// </summary>
		/// <param name="advertiserId">Required. Immutable. The unique ID of the advertiser that the manual trigger belongs to.</param>
		/// <param name="triggerId">Output only. The unique ID of the manual trigger.</param>
		/// <param name="updateMask">Required. The mask to control which fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<ManualTrigger> Displayvideo_advertisers_manualTriggers_patchAsync(string advertiserId, string triggerId, string updateMask, ManualTrigger requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/manualTriggers/"+ (triggerId==null? "" : System.Uri.EscapeDataString(triggerId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ManualTrigger>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Activates a manual trigger. Each activation of the manual trigger must be at least 5 minutes apart, otherwise an error will be returned. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
		/// Displayvideo_advertisers_manualTriggers_activate v1/advertisers/{advertiserId}/manualTriggers/{triggerId}:activate
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser that the manual trigger belongs.</param>
		/// <param name="triggerId">Required. The ID of the manual trigger to activate.</param>
		/// <returns>Successful response</returns>
		public async Task<ManualTrigger> Displayvideo_advertisers_manualTriggers_activateAsync(string advertiserId, string triggerId, ActivateManualTriggerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/manualTriggers/"+ (triggerId==null? "" : System.Uri.EscapeDataString(triggerId))+":activate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ManualTrigger>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deactivates a manual trigger. **Warning:** Line Items using manual triggers no longer serve in Display & Video 360. This method will sunset on August 1, 2023. Read our [feature deprecation announcement](/display-video/api/deprecations#features.manual_triggers) for more information.
		/// Displayvideo_advertisers_manualTriggers_deactivate v1/advertisers/{advertiserId}/manualTriggers/{triggerId}:deactivate
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser that the manual trigger belongs.</param>
		/// <param name="triggerId">Required. The ID of the manual trigger to deactivate.</param>
		/// <returns>Successful response</returns>
		public async Task<ManualTrigger> Displayvideo_advertisers_manualTriggers_deactivateAsync(string advertiserId, string triggerId, DeactivateManualTriggerRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/manualTriggers/"+ (triggerId==null? "" : System.Uri.EscapeDataString(triggerId))+":deactivate";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ManualTrigger>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists negative keyword lists based on a given advertiser id.
		/// Displayvideo_advertisers_negativeKeywordLists_list v1/advertisers/{advertiserId}/negativeKeywordLists
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the DV360 advertiser to which the fetched negative keyword lists belong.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. Defaults to `100` if not set. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListNegativeKeywordLists` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListNegativeKeywordListsResponse> Displayvideo_advertisers_negativeKeywordLists_listAsync(string advertiserId, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/negativeKeywordLists&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListNegativeKeywordListsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new negative keyword list. Returns the newly created negative keyword list if successful.
		/// Displayvideo_advertisers_negativeKeywordLists_create v1/advertisers/{advertiserId}/negativeKeywordLists
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the DV360 advertiser to which the negative keyword list will belong.</param>
		/// <returns>Successful response</returns>
		public async Task<NegativeKeywordList> Displayvideo_advertisers_negativeKeywordLists_createAsync(string advertiserId, NegativeKeywordList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/negativeKeywordLists";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NegativeKeywordList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a negative keyword list. Returns the updated negative keyword list if successful.
		/// Displayvideo_advertisers_negativeKeywordLists_patch v1/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListId}
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the DV360 advertiser to which the negative keyword list belongs.</param>
		/// <param name="negativeKeywordListId">Output only. The unique ID of the negative keyword list. Assigned by the system.</param>
		/// <param name="updateMask">Required. The mask to control which fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<NegativeKeywordList> Displayvideo_advertisers_negativeKeywordLists_patchAsync(string advertiserId, string negativeKeywordListId, string updateMask, NegativeKeywordList requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/negativeKeywordLists/"+ (negativeKeywordListId==null? "" : System.Uri.EscapeDataString(negativeKeywordListId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<NegativeKeywordList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists negative keywords in a negative keyword list.
		/// Displayvideo_advertisers_negativeKeywordLists_negativeKeywords_list v1/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListId}/negativeKeywords
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the DV360 advertiser to which the parent negative keyword list belongs.</param>
		/// <param name="negativeKeywordListId">Required. The ID of the parent negative keyword list to which the requested negative keywords belong.</param>
		/// <param name="filter">Allows filtering by negative keyword fields. Supported syntax: * Filter expressions for negative keywords can only contain at most one restriction. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `keywordValue` Examples: * All negative keywords for which the keyword value contains "google": `keywordValue : "google"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `keywordValue` (default) The default sorting order is ascending. To specify descending order for a field, a suffix " desc" should be added to the field name. Example: `keywordValue desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `1000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListNegativeKeywords` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListNegativeKeywordsResponse> Displayvideo_advertisers_negativeKeywordLists_negativeKeywords_listAsync(string advertiserId, string negativeKeywordListId, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/negativeKeywordLists/"+ (negativeKeywordListId==null? "" : System.Uri.EscapeDataString(negativeKeywordListId))+"/negativeKeywords&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListNegativeKeywordsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a negative keyword from a negative keyword list.
		/// Displayvideo_advertisers_negativeKeywordLists_negativeKeywords_delete v1/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListId}/negativeKeywords/{keywordValue}
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the DV360 advertiser to which the parent negative keyword list belongs.</param>
		/// <param name="negativeKeywordListId">Required. The ID of the parent negative keyword list to which the negative keyword belongs.</param>
		/// <param name="keywordValue">Required. The keyword value of the negative keyword to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Displayvideo_advertisers_negativeKeywordLists_negativeKeywords_deleteAsync(string advertiserId, string negativeKeywordListId, string keywordValue, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/negativeKeywordLists/"+ (negativeKeywordListId==null? "" : System.Uri.EscapeDataString(negativeKeywordListId))+"/negativeKeywords/"+ (keywordValue==null? "" : System.Uri.EscapeDataString(keywordValue));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Bulk edits negative keywords in a single negative keyword list. The operation will delete the negative keywords provided in BulkEditNegativeKeywordsRequest.deleted_negative_keywords and then create the negative keywords provided in BulkEditNegativeKeywordsRequest.created_negative_keywords. This operation is guaranteed to be atomic and will never result in a partial success or partial failure.
		/// Displayvideo_advertisers_negativeKeywordLists_negativeKeywords_bulkEdit v1/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListId}/negativeKeywords:bulkEdit
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the DV360 advertiser to which the parent negative keyword list belongs.</param>
		/// <param name="negativeKeywordListId">Required. The ID of the parent negative keyword list to which the negative keywords belong.</param>
		/// <returns>Successful response</returns>
		public async Task<BulkEditNegativeKeywordsResponse> Displayvideo_advertisers_negativeKeywordLists_negativeKeywords_bulkEditAsync(string advertiserId, string negativeKeywordListId, BulkEditNegativeKeywordsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/negativeKeywordLists/"+ (negativeKeywordListId==null? "" : System.Uri.EscapeDataString(negativeKeywordListId))+"/negativeKeywords:bulkEdit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BulkEditNegativeKeywordsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces all negative keywords in a single negative keyword list. The operation will replace the keywords in a negative keyword list with keywords provided in ReplaceNegativeKeywordsRequest.new_negative_keywords.
		/// Displayvideo_advertisers_negativeKeywordLists_negativeKeywords_replace v1/advertisers/{advertiserId}/negativeKeywordLists/{negativeKeywordListId}/negativeKeywords:replace
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the DV360 advertiser to which the parent negative keyword list belongs.</param>
		/// <param name="negativeKeywordListId">Required. The ID of the parent negative keyword list to which the negative keywords belong.</param>
		/// <returns>Successful response</returns>
		public async Task<ReplaceNegativeKeywordsResponse> Displayvideo_advertisers_negativeKeywordLists_negativeKeywords_replaceAsync(string advertiserId, string negativeKeywordListId, ReplaceNegativeKeywordsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/negativeKeywordLists/"+ (negativeKeywordListId==null? "" : System.Uri.EscapeDataString(negativeKeywordListId))+"/negativeKeywords:replace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReplaceNegativeKeywordsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the targeting options assigned to an advertiser.
		/// Displayvideo_advertisers_targetingTypes_assignedTargetingOptions_list v1/advertisers/{advertiserId}/targetingTypes/{targetingType}/assignedTargetingOptions
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser.</param>
		/// <param name="targetingType">Required. Identifies the type of assigned targeting options to list. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_YOUTUBE_VIDEO` * `TARGETING_TYPE_YOUTUBE_CHANNEL`</param>
		/// <param name="filter">Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR` logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedTargetingOptionId` Examples: * `AssignedTargetingOption` with ID 123456: `assignedTargetingOptionId="123456"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `assignedTargetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `assignedTargetingOptionId desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `5000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListAdvertiserAssignedTargetingOptions` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAdvertiserAssignedTargetingOptionsResponse> Displayvideo_advertisers_targetingTypes_assignedTargetingOptions_listAsync(string advertiserId, AssignedTargetingOptionTargetingType targetingType, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/targetingTypes/"+targetingType+"/assignedTargetingOptions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAdvertiserAssignedTargetingOptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assigns a targeting option to an advertiser. Returns the assigned targeting option if successful.
		/// Displayvideo_advertisers_targetingTypes_assignedTargetingOptions_create v1/advertisers/{advertiserId}/targetingTypes/{targetingType}/assignedTargetingOptions
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser.</param>
		/// <param name="targetingType">Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`</param>
		/// <returns>Successful response</returns>
		public async Task<AssignedTargetingOption> Displayvideo_advertisers_targetingTypes_assignedTargetingOptions_createAsync(string advertiserId, AssignedTargetingOptionTargetingType targetingType, AssignedTargetingOption requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/targetingTypes/"+targetingType+"/assignedTargetingOptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssignedTargetingOption>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an assigned targeting option from an advertiser.
		/// Displayvideo_advertisers_targetingTypes_assignedTargetingOptions_delete v1/advertisers/{advertiserId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser.</param>
		/// <param name="targetingType">Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION`</param>
		/// <param name="assignedTargetingOptionId">Required. The ID of the assigned targeting option to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Displayvideo_advertisers_targetingTypes_assignedTargetingOptions_deleteAsync(string advertiserId, AssignedTargetingOptionTargetingType targetingType, string assignedTargetingOptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/targetingTypes/"+targetingType+"/assignedTargetingOptions/"+ (assignedTargetingOptionId==null? "" : System.Uri.EscapeDataString(assignedTargetingOptionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a single targeting option assigned to an advertiser.
		/// Displayvideo_advertisers_targetingTypes_assignedTargetingOptions_get v1/advertisers/{advertiserId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser.</param>
		/// <param name="targetingType">Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_OMID` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_YOUTUBE_VIDEO` * `TARGETING_TYPE_YOUTUBE_CHANNEL`</param>
		/// <param name="assignedTargetingOptionId">Required. An identifier unique to the targeting type in this advertiser that identifies the assigned targeting option being requested.</param>
		/// <returns>Successful response</returns>
		public async Task<AssignedTargetingOption> Displayvideo_advertisers_targetingTypes_assignedTargetingOptions_getAsync(string advertiserId, AssignedTargetingOptionTargetingType targetingType, string assignedTargetingOptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"/targetingTypes/"+targetingType+"/assignedTargetingOptions/"+ (assignedTargetingOptionId==null? "" : System.Uri.EscapeDataString(assignedTargetingOptionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssignedTargetingOption>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Audits an advertiser. Returns the counts of used entities per resource type under the advertiser provided. Used entities count towards their respective resource limit. See https://support.google.com/displayvideo/answer/6071450.
		/// Displayvideo_advertisers_audit v1/advertisers/{advertiserId}:audit
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser to audit.</param>
		/// <param name="readMask">Optional. The specific fields to return. If no mask is specified, all fields in the response proto will be filled. Valid values are: * usedLineItemsCount * usedInsertionOrdersCount * usedCampaignsCount * channelsCount * negativelyTargetedChannelsCount * negativeKeywordListsCount * adGroupCriteriaCount * campaignCriteriaCount</param>
		/// <returns>Successful response</returns>
		public async Task<AuditAdvertiserResponse> Displayvideo_advertisers_auditAsync(string advertiserId, string readMask, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+":audit&readMask=" + (readMask==null? "" : System.Uri.EscapeDataString(readMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AuditAdvertiserResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Bulk edits targeting options under a single advertiser. The operation will delete the assigned targeting options provided in BulkEditAdvertiserAssignedTargetingOptionsRequest.delete_requests and then create the assigned targeting options provided in BulkEditAdvertiserAssignedTargetingOptionsRequest.create_requests .
		/// Displayvideo_advertisers_bulkEditAdvertiserAssignedTargetingOptions v1/advertisers/{advertiserId}:bulkEditAdvertiserAssignedTargetingOptions
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser.</param>
		/// <returns>Successful response</returns>
		public async Task<BulkEditAdvertiserAssignedTargetingOptionsResponse> Displayvideo_advertisers_bulkEditAdvertiserAssignedTargetingOptionsAsync(string advertiserId, BulkEditAdvertiserAssignedTargetingOptionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+":bulkEditAdvertiserAssignedTargetingOptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BulkEditAdvertiserAssignedTargetingOptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists assigned targeting options of an advertiser across targeting types.
		/// Displayvideo_advertisers_bulkListAdvertiserAssignedTargetingOptions v1/advertisers/{advertiserId}:bulkListAdvertiserAssignedTargetingOptions
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser the line item belongs to.</param>
		/// <param name="filter">Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR` logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=) operator`. Supported fields: * `targetingType` Examples: * targetingType with value TARGETING_TYPE_CHANNEL `targetingType="TARGETING_TYPE_CHANNEL"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `targetingType` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `targetingType desc`.</param>
		/// <param name="pageSize">Requested page size. The size must be an integer between `1` and `5000`. If unspecified, the default is '5000'. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token that lets the client fetch the next page of results. Typically, this is the value of next_page_token returned from the previous call to `BulkListAdvertiserAssignedTargetingOptions` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<BulkListAdvertiserAssignedTargetingOptionsResponse> Displayvideo_advertisers_bulkListAdvertiserAssignedTargetingOptionsAsync(string advertiserId, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/advertisers/"+ (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+":bulkListAdvertiserAssignedTargetingOptions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BulkListAdvertiserAssignedTargetingOptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists combined audiences. The order is defined by the order_by parameter.
		/// Displayvideo_combinedAudiences_list v1/combinedAudiences
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser that has access to the fetched combined audiences.</param>
		/// <param name="filter">Allows filtering by combined audience fields. Supported syntax: * Filter expressions for combined audiences can only contain at most one restriction. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `displayName` Examples: * All combined audiences for which the display name contains "Google": `displayName : "Google"`. The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `combinedAudienceId` (default) * `displayName` The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListCombinedAudiences` method. If not specified, the first page of results will be returned.</param>
		/// <param name="partnerId">The ID of the partner that has access to the fetched combined audiences.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCombinedAudiencesResponse> Displayvideo_combinedAudiences_listAsync(string advertiserId, string filter, string orderBy, int pageSize, string pageToken, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/combinedAudiences?advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCombinedAudiencesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a combined audience.
		/// Displayvideo_combinedAudiences_get v1/combinedAudiences/{combinedAudienceId}
		/// </summary>
		/// <param name="combinedAudienceId">Required. The ID of the combined audience to fetch.</param>
		/// <param name="advertiserId">The ID of the advertiser that has access to the fetched combined audience.</param>
		/// <param name="partnerId">The ID of the partner that has access to the fetched combined audience.</param>
		/// <returns>Successful response</returns>
		public async Task<CombinedAudience> Displayvideo_combinedAudiences_getAsync(string combinedAudienceId, string advertiserId, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/combinedAudiences/"+ (combinedAudienceId==null? "" : System.Uri.EscapeDataString(combinedAudienceId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CombinedAudience>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists custom bidding algorithms that are accessible to the current user and can be used in bidding stratgies. The order is defined by the order_by parameter.
		/// Displayvideo_customBiddingAlgorithms_list v1/customBiddingAlgorithms
		/// </summary>
		/// <param name="advertiserId">The ID of the DV360 advertiser that has access to the custom bidding algorithm.</param>
		/// <param name="filter">Allows filtering by custom bidding algorithm fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND`. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * The `customBiddingAlgorithmType` field must use the `EQUALS (=)` operator. * The `displayName` field must use the `HAS (:)` operator. Supported fields: * `customBiddingAlgorithmType` * `displayName` Examples: * All custom bidding algorithms for which the display name contains "politics": `displayName:"politics"`. * All custom bidding algorithms for which the type is "SCRIPT_BASED": `customBiddingAlgorithmType=SCRIPT_BASED` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `displayName` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListCustomBiddingAlgorithms` method. If not specified, the first page of results will be returned.</param>
		/// <param name="partnerId">The ID of the DV360 partner that has access to the custom bidding algorithm.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCustomBiddingAlgorithmsResponse> Displayvideo_customBiddingAlgorithms_listAsync(string advertiserId, string filter, string orderBy, int pageSize, string pageToken, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customBiddingAlgorithms?advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCustomBiddingAlgorithmsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new custom bidding algorithm. Returns the newly created custom bidding algorithm if successful.
		/// Displayvideo_customBiddingAlgorithms_create v1/customBiddingAlgorithms
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<CustomBiddingAlgorithm> Displayvideo_customBiddingAlgorithms_createAsync(CustomBiddingAlgorithm requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customBiddingAlgorithms";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomBiddingAlgorithm>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a custom bidding algorithm.
		/// Displayvideo_customBiddingAlgorithms_get v1/customBiddingAlgorithms/{customBiddingAlgorithmId}
		/// </summary>
		/// <param name="customBiddingAlgorithmId">Required. The ID of the custom bidding algorithm to fetch.</param>
		/// <param name="advertiserId">The ID of the DV360 partner that has access to the custom bidding algorithm.</param>
		/// <param name="partnerId">The ID of the DV360 partner that has access to the custom bidding algorithm.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomBiddingAlgorithm> Displayvideo_customBiddingAlgorithms_getAsync(string customBiddingAlgorithmId, string advertiserId, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customBiddingAlgorithms/"+ (customBiddingAlgorithmId==null? "" : System.Uri.EscapeDataString(customBiddingAlgorithmId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomBiddingAlgorithm>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing custom bidding algorithm. Returns the updated custom bidding algorithm if successful.
		/// Displayvideo_customBiddingAlgorithms_patch v1/customBiddingAlgorithms/{customBiddingAlgorithmId}
		/// </summary>
		/// <param name="customBiddingAlgorithmId">Output only. The unique ID of the custom bidding algorithm. Assigned by the system.</param>
		/// <param name="updateMask">Required. The mask to control which fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomBiddingAlgorithm> Displayvideo_customBiddingAlgorithms_patchAsync(string customBiddingAlgorithmId, string updateMask, CustomBiddingAlgorithm requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customBiddingAlgorithms/"+ (customBiddingAlgorithmId==null? "" : System.Uri.EscapeDataString(customBiddingAlgorithmId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomBiddingAlgorithm>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists custom bidding scripts that belong to the given algorithm. The order is defined by the order_by parameter.
		/// Displayvideo_customBiddingAlgorithms_scripts_list v1/customBiddingAlgorithms/{customBiddingAlgorithmId}/scripts
		/// </summary>
		/// <param name="customBiddingAlgorithmId">Required. The ID of the custom bidding algorithm owns the script.</param>
		/// <param name="advertiserId">The ID of the advertiser that owns the parent custom bidding algorithm.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `createTime desc` (default) The default sorting order is descending. To specify ascending order for a field, the suffix "desc" should be removed. Example: `createTime`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListCustomBiddingScripts` method. If not specified, the first page of results will be returned.</param>
		/// <param name="partnerId">The ID of the partner that owns the parent custom bidding algorithm. Only this partner will have write access to this custom bidding script.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCustomBiddingScriptsResponse> Displayvideo_customBiddingAlgorithms_scripts_listAsync(string customBiddingAlgorithmId, string advertiserId, string orderBy, int pageSize, string pageToken, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customBiddingAlgorithms/"+ (customBiddingAlgorithmId==null? "" : System.Uri.EscapeDataString(customBiddingAlgorithmId))+"/scripts&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCustomBiddingScriptsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new custom bidding script. Returns the newly created script if successful.
		/// Displayvideo_customBiddingAlgorithms_scripts_create v1/customBiddingAlgorithms/{customBiddingAlgorithmId}/scripts
		/// </summary>
		/// <param name="customBiddingAlgorithmId">Required. The ID of the custom bidding algorithm that owns the script.</param>
		/// <param name="advertiserId">The ID of the advertiser that owns the parent custom bidding algorithm.</param>
		/// <param name="partnerId">The ID of the partner that owns the parent custom bidding algorithm. Only this partner will have write access to this custom bidding script.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomBiddingScript> Displayvideo_customBiddingAlgorithms_scripts_createAsync(string customBiddingAlgorithmId, string advertiserId, string partnerId, CustomBiddingScript requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customBiddingAlgorithms/"+ (customBiddingAlgorithmId==null? "" : System.Uri.EscapeDataString(customBiddingAlgorithmId))+"/scripts&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomBiddingScript>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a custom bidding script.
		/// Displayvideo_customBiddingAlgorithms_scripts_get v1/customBiddingAlgorithms/{customBiddingAlgorithmId}/scripts/{customBiddingScriptId}
		/// </summary>
		/// <param name="customBiddingAlgorithmId">Required. The ID of the custom bidding algorithm owns the script.</param>
		/// <param name="customBiddingScriptId">Required. The ID of the custom bidding script to fetch.</param>
		/// <param name="advertiserId">The ID of the advertiser that owns the parent custom bidding algorithm.</param>
		/// <param name="partnerId">The ID of the partner that owns the parent custom bidding algorithm. Only this partner will have write access to this custom bidding script.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomBiddingScript> Displayvideo_customBiddingAlgorithms_scripts_getAsync(string customBiddingAlgorithmId, string customBiddingScriptId, string advertiserId, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customBiddingAlgorithms/"+ (customBiddingAlgorithmId==null? "" : System.Uri.EscapeDataString(customBiddingAlgorithmId))+"/scripts/"+ (customBiddingScriptId==null? "" : System.Uri.EscapeDataString(customBiddingScriptId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomBiddingScript>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a custom bidding script reference object for a script file. The resulting reference object provides a resource path to which the script file should be uploaded. This reference object should be included in when creating a new custom bidding script object.
		/// Displayvideo_customBiddingAlgorithms_uploadScript v1/customBiddingAlgorithms/{customBiddingAlgorithmId}:uploadScript
		/// </summary>
		/// <param name="customBiddingAlgorithmId">Required. The ID of the custom bidding algorithm owns the script.</param>
		/// <param name="advertiserId">The ID of the advertiser that owns the parent custom bidding algorithm.</param>
		/// <param name="partnerId">The ID of the partner that owns the parent custom bidding algorithm. Only this partner will have write access to this custom bidding script.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomBiddingScriptRef> Displayvideo_customBiddingAlgorithms_uploadScriptAsync(string customBiddingAlgorithmId, string advertiserId, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customBiddingAlgorithms/"+ (customBiddingAlgorithmId==null? "" : System.Uri.EscapeDataString(customBiddingAlgorithmId))+":uploadScript&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomBiddingScriptRef>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists custom lists. The order is defined by the order_by parameter.
		/// Displayvideo_customLists_list v1/customLists
		/// </summary>
		/// <param name="advertiserId">The ID of the DV360 advertiser that has access to the fetched custom lists.</param>
		/// <param name="filter">Allows filtering by custom list fields. Supported syntax: * Filter expressions for custom lists can only contain at most one restriction. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `displayName` Examples: * All custom lists for which the display name contains "Google": `displayName:"Google"`. The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `customListId` (default) * `displayName` The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListCustomLists` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListCustomListsResponse> Displayvideo_customLists_listAsync(string advertiserId, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customLists?advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListCustomListsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a custom list.
		/// Displayvideo_customLists_get v1/customLists/{customListId}
		/// </summary>
		/// <param name="customListId">Required. The ID of the custom list to fetch.</param>
		/// <param name="advertiserId">The ID of the DV360 advertiser that has access to the fetched custom lists.</param>
		/// <returns>Successful response</returns>
		public async Task<CustomList> Displayvideo_customLists_getAsync(string customListId, string advertiserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/customLists/"+ (customListId==null? "" : System.Uri.EscapeDataString(customListId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<CustomList>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists first and third party audiences. The order is defined by the order_by parameter.
		/// Displayvideo_firstAndThirdPartyAudiences_list v1/firstAndThirdPartyAudiences
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser that has access to the fetched first and third party audiences.</param>
		/// <param name="filter">Allows filtering by first and third party audience fields. Supported syntax: * Filter expressions for first and third party audiences can only contain at most one restriction. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `displayName` Examples: * All first and third party audiences for which the display name contains "Google": `displayName:"Google"`. The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `firstAndThirdPartyAudienceId` (default) * `displayName` The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListFirstAndThirdPartyAudiences` method. If not specified, the first page of results will be returned.</param>
		/// <param name="partnerId">The ID of the partner that has access to the fetched first and third party audiences.</param>
		/// <returns>Successful response</returns>
		public async Task<ListFirstAndThirdPartyAudiencesResponse> Displayvideo_firstAndThirdPartyAudiences_listAsync(string advertiserId, string filter, string orderBy, int pageSize, string pageToken, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/firstAndThirdPartyAudiences?advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListFirstAndThirdPartyAudiencesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a FirstAndThirdPartyAudience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`
		/// Displayvideo_firstAndThirdPartyAudiences_create v1/firstAndThirdPartyAudiences
		/// </summary>
		/// <param name="advertiserId">Required. The ID of the advertiser under whom the FirstAndThirdPartyAudience will be created.</param>
		/// <returns>Successful response</returns>
		public async Task<FirstAndThirdPartyAudience> Displayvideo_firstAndThirdPartyAudiences_createAsync(string advertiserId, FirstAndThirdPartyAudience requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/firstAndThirdPartyAudiences?advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FirstAndThirdPartyAudience>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a first and third party audience.
		/// Displayvideo_firstAndThirdPartyAudiences_get v1/firstAndThirdPartyAudiences/{firstAndThirdPartyAudienceId}
		/// </summary>
		/// <param name="firstAndThirdPartyAudienceId">Required. The ID of the first and third party audience to fetch.</param>
		/// <param name="advertiserId">The ID of the advertiser that has access to the fetched first and third party audience.</param>
		/// <param name="partnerId">The ID of the partner that has access to the fetched first and third party audience.</param>
		/// <returns>Successful response</returns>
		public async Task<FirstAndThirdPartyAudience> Displayvideo_firstAndThirdPartyAudiences_getAsync(string firstAndThirdPartyAudienceId, string advertiserId, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/firstAndThirdPartyAudiences/"+ (firstAndThirdPartyAudienceId==null? "" : System.Uri.EscapeDataString(firstAndThirdPartyAudienceId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FirstAndThirdPartyAudience>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing FirstAndThirdPartyAudience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`
		/// Displayvideo_firstAndThirdPartyAudiences_patch v1/firstAndThirdPartyAudiences/{firstAndThirdPartyAudienceId}
		/// </summary>
		/// <param name="firstAndThirdPartyAudienceId">Output only. The unique ID of the first and third party audience. Assigned by the system.</param>
		/// <param name="advertiserId">Required. The ID of the owner advertiser of the updated FirstAndThirdPartyAudience.</param>
		/// <param name="updateMask">Required. The mask to control which fields to update. Updates are only supported for the following fields: * `displayName` * `description` * `membershipDurationDays`</param>
		/// <returns>Successful response</returns>
		public async Task<FirstAndThirdPartyAudience> Displayvideo_firstAndThirdPartyAudiences_patchAsync(string firstAndThirdPartyAudienceId, string advertiserId, string updateMask, FirstAndThirdPartyAudience requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/firstAndThirdPartyAudiences/"+ (firstAndThirdPartyAudienceId==null? "" : System.Uri.EscapeDataString(firstAndThirdPartyAudienceId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FirstAndThirdPartyAudience>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates the member list of a Customer Match audience. Only supported for the following audience_type: * `CUSTOMER_MATCH_CONTACT_INFO` * `CUSTOMER_MATCH_DEVICE_ID`
		/// Displayvideo_firstAndThirdPartyAudiences_editCustomerMatchMembers v1/firstAndThirdPartyAudiences/{firstAndThirdPartyAudienceId}:editCustomerMatchMembers
		/// </summary>
		/// <param name="firstAndThirdPartyAudienceId">Required. The ID of the Customer Match FirstAndThirdPartyAudience whose members will be edited.</param>
		/// <returns>Successful response</returns>
		public async Task<EditCustomerMatchMembersResponse> Displayvideo_firstAndThirdPartyAudiences_editCustomerMatchMembersAsync(string firstAndThirdPartyAudienceId, EditCustomerMatchMembersRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/firstAndThirdPartyAudiences/"+ (firstAndThirdPartyAudienceId==null? "" : System.Uri.EscapeDataString(firstAndThirdPartyAudienceId))+":editCustomerMatchMembers";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EditCustomerMatchMembersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Floodlight group.
		/// Displayvideo_floodlightGroups_get v1/floodlightGroups/{floodlightGroupId}
		/// </summary>
		/// <param name="floodlightGroupId">Required. The ID of the Floodlight group to fetch.</param>
		/// <param name="partnerId">Required. The partner context by which the Floodlight group is being accessed.</param>
		/// <returns>Successful response</returns>
		public async Task<FloodlightGroup> Displayvideo_floodlightGroups_getAsync(string floodlightGroupId, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/floodlightGroups/"+ (floodlightGroupId==null? "" : System.Uri.EscapeDataString(floodlightGroupId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<FloodlightGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists Google audiences. The order is defined by the order_by parameter.
		/// Displayvideo_googleAudiences_list v1/googleAudiences
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser that has access to the fetched Google audiences.</param>
		/// <param name="filter">Allows filtering by Google audience fields. Supported syntax: * Filter expressions for Google audiences can only contain at most one restriction. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `displayName` Examples: * All Google audiences for which the display name contains "Google": `displayName:"Google"`. The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `googleAudienceId` (default) * `displayName` The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListGoogleAudiences` method. If not specified, the first page of results will be returned.</param>
		/// <param name="partnerId">The ID of the partner that has access to the fetched Google audiences.</param>
		/// <returns>Successful response</returns>
		public async Task<ListGoogleAudiencesResponse> Displayvideo_googleAudiences_listAsync(string advertiserId, string filter, string orderBy, int pageSize, string pageToken, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/googleAudiences?advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListGoogleAudiencesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a Google audience.
		/// Displayvideo_googleAudiences_get v1/googleAudiences/{googleAudienceId}
		/// </summary>
		/// <param name="googleAudienceId">Required. The ID of the Google audience to fetch.</param>
		/// <param name="advertiserId">The ID of the advertiser that has access to the fetched Google audience.</param>
		/// <param name="partnerId">The ID of the partner that has access to the fetched Google audience.</param>
		/// <returns>Successful response</returns>
		public async Task<GoogleAudience> Displayvideo_googleAudiences_getAsync(string googleAudienceId, string advertiserId, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/googleAudiences/"+ (googleAudienceId==null? "" : System.Uri.EscapeDataString(googleAudienceId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GoogleAudience>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists guaranteed orders that are accessible to the current user. The order is defined by the order_by parameter. If a filter by entity_status is not specified, guaranteed orders with entity status `ENTITY_STATUS_ARCHIVED` will not be included in the results.
		/// Displayvideo_guaranteedOrders_list v1/guaranteedOrders
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser that has access to the guaranteed order.</param>
		/// <param name="filter">Allows filtering by guaranteed order fields. * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `guaranteed_order_id` * `exchange` * `display_name` * `status.entityStatus` Examples: * All active guaranteed orders: `status.entityStatus="ENTITY_STATUS_ACTIVE"` * Guaranteed orders belonging to Google Ad Manager or Rubicon exchanges: `exchange="EXCHANGE_GOOGLE_AD_MANAGER" OR exchange="EXCHANGE_RUBICON"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `displayName` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. For example, `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListGuaranteedOrders` method. If not specified, the first page of results will be returned.</param>
		/// <param name="partnerId">The ID of the partner that has access to the guaranteed order.</param>
		/// <returns>Successful response</returns>
		public async Task<ListGuaranteedOrdersResponse> Displayvideo_guaranteedOrders_listAsync(string advertiserId, string filter, string orderBy, int pageSize, string pageToken, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/guaranteedOrders?advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListGuaranteedOrdersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new guaranteed order. Returns the newly created guaranteed order if successful.
		/// Displayvideo_guaranteedOrders_create v1/guaranteedOrders
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser that the request is being made within.</param>
		/// <param name="partnerId">The ID of the partner that the request is being made within.</param>
		/// <returns>Successful response</returns>
		public async Task<GuaranteedOrder> Displayvideo_guaranteedOrders_createAsync(string advertiserId, string partnerId, GuaranteedOrder requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/guaranteedOrders?advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GuaranteedOrder>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a guaranteed order.
		/// Displayvideo_guaranteedOrders_get v1/guaranteedOrders/{guaranteedOrderId}
		/// </summary>
		/// <param name="guaranteedOrderId">Required. The ID of the guaranteed order to fetch. The ID is of the format `{exchange}-{legacy_guaranteed_order_id}`</param>
		/// <param name="advertiserId">The ID of the advertiser that has access to the guaranteed order.</param>
		/// <param name="partnerId">The ID of the partner that has access to the guaranteed order.</param>
		/// <returns>Successful response</returns>
		public async Task<GuaranteedOrder> Displayvideo_guaranteedOrders_getAsync(string guaranteedOrderId, string advertiserId, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/guaranteedOrders/"+ (guaranteedOrderId==null? "" : System.Uri.EscapeDataString(guaranteedOrderId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GuaranteedOrder>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing guaranteed order. Returns the updated guaranteed order if successful.
		/// Displayvideo_guaranteedOrders_patch v1/guaranteedOrders/{guaranteedOrderId}
		/// </summary>
		/// <param name="guaranteedOrderId">Output only. The unique identifier of the guaranteed order. The guaranteed order IDs have the format `{exchange}-{legacy_guaranteed_order_id}`.</param>
		/// <param name="advertiserId">The ID of the advertiser that the request is being made within.</param>
		/// <param name="partnerId">The ID of the partner that the request is being made within.</param>
		/// <param name="updateMask">Required. The mask to control which fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<GuaranteedOrder> Displayvideo_guaranteedOrders_patchAsync(string guaranteedOrderId, string advertiserId, string partnerId, string updateMask, GuaranteedOrder requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/guaranteedOrders/"+ (guaranteedOrderId==null? "" : System.Uri.EscapeDataString(guaranteedOrderId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<GuaranteedOrder>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edits read advertisers of a guaranteed order.
		/// Displayvideo_guaranteedOrders_editGuaranteedOrderReadAccessors v1/guaranteedOrders/{guaranteedOrderId}:editGuaranteedOrderReadAccessors
		/// </summary>
		/// <param name="guaranteedOrderId">Required. The ID of the guaranteed order to edit. The ID is of the format `{exchange}-{legacy_guaranteed_order_id}`</param>
		/// <returns>Successful response</returns>
		public async Task<EditGuaranteedOrderReadAccessorsResponse> Displayvideo_guaranteedOrders_editGuaranteedOrderReadAccessorsAsync(string guaranteedOrderId, EditGuaranteedOrderReadAccessorsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/guaranteedOrders/"+ (guaranteedOrderId==null? "" : System.Uri.EscapeDataString(guaranteedOrderId))+":editGuaranteedOrderReadAccessors";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<EditGuaranteedOrderReadAccessorsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists inventory source groups that are accessible to the current user. The order is defined by the order_by parameter.
		/// Displayvideo_inventorySourceGroups_list v1/inventorySourceGroups
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser that has access to the inventory source group. If an inventory source group is partner-owned, only advertisers to which the group is explicitly shared can access the group.</param>
		/// <param name="filter">Allows filtering by inventory source group fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `inventorySourceGroupId` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `displayName` (default) * `inventorySourceGroupId` The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. For example, `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListInventorySources` method. If not specified, the first page of results will be returned.</param>
		/// <param name="partnerId">The ID of the partner that has access to the inventory source group. A partner cannot access advertiser-owned inventory source groups.</param>
		/// <returns>Successful response</returns>
		public async Task<ListInventorySourceGroupsResponse> Displayvideo_inventorySourceGroups_listAsync(string advertiserId, string filter, string orderBy, int pageSize, string pageToken, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inventorySourceGroups?advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListInventorySourceGroupsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new inventory source group. Returns the newly created inventory source group if successful.
		/// Displayvideo_inventorySourceGroups_create v1/inventorySourceGroups
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser that owns the inventory source group. The parent partner will not have access to this group.</param>
		/// <param name="partnerId">The ID of the partner that owns the inventory source group. Only this partner will have write access to this group. Only advertisers to which this group is explicitly shared will have read access to this group.</param>
		/// <returns>Successful response</returns>
		public async Task<InventorySourceGroup> Displayvideo_inventorySourceGroups_createAsync(string advertiserId, string partnerId, InventorySourceGroup requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inventorySourceGroups?advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InventorySourceGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an inventory source group.
		/// Displayvideo_inventorySourceGroups_delete v1/inventorySourceGroups/{inventorySourceGroupId}
		/// </summary>
		/// <param name="inventorySourceGroupId">Required. The ID of the inventory source group to delete.</param>
		/// <param name="advertiserId">The ID of the advertiser that owns the inventory source group. The parent partner does not have access to this group.</param>
		/// <param name="partnerId">The ID of the partner that owns the inventory source group. Only this partner has write access to this group.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Displayvideo_inventorySourceGroups_deleteAsync(string inventorySourceGroupId, string advertiserId, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inventorySourceGroups/"+ (inventorySourceGroupId==null? "" : System.Uri.EscapeDataString(inventorySourceGroupId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an inventory source group.
		/// Displayvideo_inventorySourceGroups_get v1/inventorySourceGroups/{inventorySourceGroupId}
		/// </summary>
		/// <param name="inventorySourceGroupId">Required. The ID of the inventory source group to fetch.</param>
		/// <param name="advertiserId">The ID of the advertiser that has access to the inventory source group. If an inventory source group is partner-owned, only advertisers to which the group is explicitly shared can access the group.</param>
		/// <param name="partnerId">The ID of the partner that has access to the inventory source group. A partner cannot access an advertiser-owned inventory source group.</param>
		/// <returns>Successful response</returns>
		public async Task<InventorySourceGroup> Displayvideo_inventorySourceGroups_getAsync(string inventorySourceGroupId, string advertiserId, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inventorySourceGroups/"+ (inventorySourceGroupId==null? "" : System.Uri.EscapeDataString(inventorySourceGroupId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InventorySourceGroup>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists inventory sources assigned to an inventory source group.
		/// Displayvideo_inventorySourceGroups_assignedInventorySources_list v1/inventorySourceGroups/{inventorySourceGroupId}/assignedInventorySources
		/// </summary>
		/// <param name="inventorySourceGroupId">Required. The ID of the inventory source group to which these assignments are assigned.</param>
		/// <param name="advertiserId">The ID of the advertiser that has access to the assignment. If the parent inventory source group is partner-owned, only advertisers to which the parent group is explicitly shared can access the assigned inventory source.</param>
		/// <param name="filter">Allows filtering by assigned inventory source fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the `OR` logical operator. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedInventorySourceId` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `assignedInventorySourceId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix " desc" should be added to the field name. Example: `assignedInventorySourceId desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `100`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListAssignedInventorySources` method. If not specified, the first page of results will be returned.</param>
		/// <param name="partnerId">The ID of the partner that has access to the assignment. If the parent inventory source group is advertiser-owned, the assignment cannot be accessed via a partner.</param>
		/// <returns>Successful response</returns>
		public async Task<ListAssignedInventorySourcesResponse> Displayvideo_inventorySourceGroups_assignedInventorySources_listAsync(string inventorySourceGroupId, string advertiserId, string filter, string orderBy, int pageSize, string pageToken, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inventorySourceGroups/"+ (inventorySourceGroupId==null? "" : System.Uri.EscapeDataString(inventorySourceGroupId))+"/assignedInventorySources&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListAssignedInventorySourcesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an assignment between an inventory source and an inventory source group.
		/// Displayvideo_inventorySourceGroups_assignedInventorySources_create v1/inventorySourceGroups/{inventorySourceGroupId}/assignedInventorySources
		/// </summary>
		/// <param name="inventorySourceGroupId">Required. The ID of the inventory source group to which the assignment will be assigned.</param>
		/// <param name="advertiserId">The ID of the advertiser that owns the parent inventory source group. The parent partner will not have access to this assigned inventory source.</param>
		/// <param name="partnerId">The ID of the partner that owns the parent inventory source group. Only this partner will have write access to this assigned inventory source.</param>
		/// <returns>Successful response</returns>
		public async Task<AssignedInventorySource> Displayvideo_inventorySourceGroups_assignedInventorySources_createAsync(string inventorySourceGroupId, string advertiserId, string partnerId, AssignedInventorySource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inventorySourceGroups/"+ (inventorySourceGroupId==null? "" : System.Uri.EscapeDataString(inventorySourceGroupId))+"/assignedInventorySources&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssignedInventorySource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes the assignment between an inventory source and an inventory source group.
		/// Displayvideo_inventorySourceGroups_assignedInventorySources_delete v1/inventorySourceGroups/{inventorySourceGroupId}/assignedInventorySources/{assignedInventorySourceId}
		/// </summary>
		/// <param name="inventorySourceGroupId">Required. The ID of the inventory source group to which this assignment is assigned.</param>
		/// <param name="assignedInventorySourceId">Required. The ID of the assigned inventory source to delete.</param>
		/// <param name="advertiserId">The ID of the advertiser that owns the parent inventory source group. The parent partner does not have access to this assigned inventory source.</param>
		/// <param name="partnerId">The ID of the partner that owns the parent inventory source group. Only this partner has write access to this assigned inventory source.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Displayvideo_inventorySourceGroups_assignedInventorySources_deleteAsync(string inventorySourceGroupId, string assignedInventorySourceId, string advertiserId, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inventorySourceGroups/"+ (inventorySourceGroupId==null? "" : System.Uri.EscapeDataString(inventorySourceGroupId))+"/assignedInventorySources/"+ (assignedInventorySourceId==null? "" : System.Uri.EscapeDataString(assignedInventorySourceId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Bulk edits multiple assignments between inventory sources and a single inventory source group. The operation will delete the assigned inventory sources provided in BulkEditAssignedInventorySourcesRequest.deleted_assigned_inventory_sources and then create the assigned inventory sources provided in BulkEditAssignedInventorySourcesRequest.created_assigned_inventory_sources.
		/// Displayvideo_inventorySourceGroups_assignedInventorySources_bulkEdit v1/inventorySourceGroups/{inventorySourceGroupId}/assignedInventorySources:bulkEdit
		/// </summary>
		/// <param name="inventorySourceGroupId">Required. The ID of the inventory source group to which the assignments are assigned.</param>
		/// <returns>Successful response</returns>
		public async Task<BulkEditAssignedInventorySourcesResponse> Displayvideo_inventorySourceGroups_assignedInventorySources_bulkEditAsync(string inventorySourceGroupId, BulkEditAssignedInventorySourcesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inventorySourceGroups/"+ (inventorySourceGroupId==null? "" : System.Uri.EscapeDataString(inventorySourceGroupId))+"/assignedInventorySources:bulkEdit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BulkEditAssignedInventorySourcesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists inventory sources that are accessible to the current user. The order is defined by the order_by parameter. If a filter by entity_status is not specified, inventory sources with entity status `ENTITY_STATUS_ARCHIVED` will not be included in the results.
		/// Displayvideo_inventorySources_list v1/inventorySources
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser that has access to the inventory source.</param>
		/// <param name="filter">Allows filtering by inventory source fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `status.entityStatus` * `commitment` * `deliveryMethod` * `rateDetails.rateType` * `exchange` Examples: * All active inventory sources: `status.entityStatus="ENTITY_STATUS_ACTIVE"` * Inventory sources belonging to Google Ad Manager or Rubicon exchanges: `exchange="EXCHANGE_GOOGLE_AD_MANAGER" OR exchange="EXCHANGE_RUBICON"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `displayName` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. For example, `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListInventorySources` method. If not specified, the first page of results will be returned.</param>
		/// <param name="partnerId">The ID of the partner that has access to the inventory source.</param>
		/// <returns>Successful response</returns>
		public async Task<ListInventorySourcesResponse> Displayvideo_inventorySources_listAsync(string advertiserId, string filter, string orderBy, int pageSize, string pageToken, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inventorySources?advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListInventorySourcesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new inventory source. Returns the newly created inventory source if successful.
		/// Displayvideo_inventorySources_create v1/inventorySources
		/// </summary>
		/// <param name="advertiserId">The ID of the advertiser that the request is being made within.</param>
		/// <param name="partnerId">The ID of the partner that the request is being made within.</param>
		/// <returns>Successful response</returns>
		public async Task<InventorySource> Displayvideo_inventorySources_createAsync(string advertiserId, string partnerId, InventorySource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inventorySources?advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InventorySource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets an inventory source.
		/// Displayvideo_inventorySources_get v1/inventorySources/{inventorySourceId}
		/// </summary>
		/// <param name="inventorySourceId">Required. The ID of the inventory source to fetch.</param>
		/// <param name="partnerId">Required. The ID of the DV360 partner to which the fetched inventory source is permissioned.</param>
		/// <returns>Successful response</returns>
		public async Task<InventorySource> Displayvideo_inventorySources_getAsync(string inventorySourceId, string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inventorySources/"+ (inventorySourceId==null? "" : System.Uri.EscapeDataString(inventorySourceId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InventorySource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing inventory source. Returns the updated inventory source if successful.
		/// Displayvideo_inventorySources_patch v1/inventorySources/{inventorySourceId}
		/// </summary>
		/// <param name="inventorySourceId">Output only. The unique ID of the inventory source. Assigned by the system.</param>
		/// <param name="advertiserId">The ID of the advertiser that the request is being made within.</param>
		/// <param name="partnerId">The ID of the partner that the request is being made within.</param>
		/// <param name="updateMask">Required. The mask to control which fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<InventorySource> Displayvideo_inventorySources_patchAsync(string inventorySourceId, string advertiserId, string partnerId, string updateMask, InventorySource requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inventorySources/"+ (inventorySourceId==null? "" : System.Uri.EscapeDataString(inventorySourceId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&partnerId=" + (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InventorySource>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Edits read/write accessors of an inventory source. Returns the updated read_write_accessors for the inventory source.
		/// Displayvideo_inventorySources_editInventorySourceReadWriteAccessors v1/inventorySources/{inventorySourceId}:editInventorySourceReadWriteAccessors
		/// </summary>
		/// <param name="inventorySourceId">Required. The ID of inventory source to update.</param>
		/// <returns>Successful response</returns>
		public async Task<InventorySourceAccessors> Displayvideo_inventorySources_editInventorySourceReadWriteAccessorsAsync(string inventorySourceId, EditInventorySourceReadWriteAccessorsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/inventorySources/"+ (inventorySourceId==null? "" : System.Uri.EscapeDataString(inventorySourceId))+":editInventorySourceReadWriteAccessors";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<InventorySourceAccessors>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists partners that are accessible to the current user. The order is defined by the order_by parameter.
		/// Displayvideo_partners_list v1/partners
		/// </summary>
		/// <param name="filter">Allows filtering by partner fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `AND` or `OR` logical operators. A sequence of restrictions implicitly uses `AND`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `entityStatus` Examples: * All active partners: `entityStatus="ENTITY_STATUS_ACTIVE"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `displayName` The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. For example, `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListPartners` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPartnersResponse> Displayvideo_partners_listAsync(string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListPartnersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a partner.
		/// Displayvideo_partners_get v1/partners/{partnerId}
		/// </summary>
		/// <param name="partnerId">Required. The ID of the partner to fetch.</param>
		/// <returns>Successful response</returns>
		public async Task<Partner> Displayvideo_partners_getAsync(string partnerId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Partner>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists channels for a partner or advertiser.
		/// Displayvideo_partners_channels_list v1/partners/{partnerId}/channels
		/// </summary>
		/// <param name="partnerId">The ID of the partner that owns the channels.</param>
		/// <param name="advertiserId">The ID of the advertiser that owns the channels.</param>
		/// <param name="filter">Allows filtering by channel fields. Supported syntax: * Filter expressions for channel can only contain at most one restriction. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `displayName` Examples: * All channels for which the display name contains "google": `displayName : "google"`. The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `displayName` (default) * `channelId` The default sorting order is ascending. To specify descending order for a field, a suffix " desc" should be added to the field name. Example: `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListChannels` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListChannelsResponse> Displayvideo_partners_channels_listAsync(string partnerId, string advertiserId, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/channels&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListChannelsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new channel. Returns the newly created channel if successful.
		/// Displayvideo_partners_channels_create v1/partners/{partnerId}/channels
		/// </summary>
		/// <param name="partnerId">The ID of the partner that owns the created channel.</param>
		/// <param name="advertiserId">The ID of the advertiser that owns the created channel.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Displayvideo_partners_channels_createAsync(string partnerId, string advertiserId, Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/channels&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Channel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates a channel. Returns the updated channel if successful.
		/// Displayvideo_partners_channels_patch v1/partners/{partnerId}/channels/{channelId}
		/// </summary>
		/// <param name="partnerId">The ID of the partner that owns the created channel.</param>
		/// <param name="channelId">Output only. The unique ID of the channel. Assigned by the system.</param>
		/// <param name="advertiserId">The ID of the advertiser that owns the created channel.</param>
		/// <param name="updateMask">Required. The mask to control which fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<Channel> Displayvideo_partners_channels_patchAsync(string partnerId, string channelId, string advertiserId, string updateMask, Channel requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Channel>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists sites in a channel.
		/// Displayvideo_partners_channels_sites_list v1/partners/{partnerId}/channels/{channelId}/sites
		/// </summary>
		/// <param name="partnerId">The ID of the partner that owns the parent channel.</param>
		/// <param name="channelId">Required. The ID of the parent channel to which the requested sites belong.</param>
		/// <param name="advertiserId">The ID of the advertiser that owns the parent channel.</param>
		/// <param name="filter">Allows filtering by site fields. Supported syntax: * Filter expressions for site retrieval can only contain at most one restriction. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `HAS (:)` operator. Supported fields: * `urlOrAppId` Examples: * All sites for which the URL or app ID contains "google": `urlOrAppId : "google"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `urlOrAppId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix " desc" should be added to the field name. Example: `urlOrAppId desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `10000`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListSites` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListSitesResponse> Displayvideo_partners_channels_sites_listAsync(string partnerId, string channelId, string advertiserId, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/sites&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListSitesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a site from a channel.
		/// Displayvideo_partners_channels_sites_delete v1/partners/{partnerId}/channels/{channelId}/sites/{urlOrAppId}
		/// </summary>
		/// <param name="partnerId">The ID of the partner that owns the parent channel.</param>
		/// <param name="channelId">Required. The ID of the parent channel to which the site belongs.</param>
		/// <param name="urlOrAppId">Required. The URL or app ID of the site to delete.</param>
		/// <param name="advertiserId">The ID of the advertiser that owns the parent channel.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Displayvideo_partners_channels_sites_deleteAsync(string partnerId, string channelId, string urlOrAppId, string advertiserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/sites/"+ (urlOrAppId==null? "" : System.Uri.EscapeDataString(urlOrAppId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Bulk edits sites under a single channel. The operation will delete the sites provided in BulkEditSitesRequest.deleted_sites and then create the sites provided in BulkEditSitesRequest.created_sites.
		/// Displayvideo_partners_channels_sites_bulkEdit v1/partners/{partnerId}/channels/{channelId}/sites:bulkEdit
		/// </summary>
		/// <param name="partnerId">The ID of the partner that owns the parent channel.</param>
		/// <param name="channelId">Required. The ID of the parent channel to which the sites belong.</param>
		/// <returns>Successful response</returns>
		public async Task<BulkEditSitesResponse> Displayvideo_partners_channels_sites_bulkEditAsync(string partnerId, string channelId, BulkEditSitesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/sites:bulkEdit";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BulkEditSitesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Replaces all of the sites under a single channel. The operation will replace the sites under a channel with the sites provided in ReplaceSitesRequest.new_sites.
		/// Displayvideo_partners_channels_sites_replace v1/partners/{partnerId}/channels/{channelId}/sites:replace
		/// </summary>
		/// <param name="partnerId">The ID of the partner that owns the parent channel.</param>
		/// <param name="channelId">Required. The ID of the parent channel whose sites will be replaced.</param>
		/// <returns>Successful response</returns>
		public async Task<ReplaceSitesResponse> Displayvideo_partners_channels_sites_replaceAsync(string partnerId, string channelId, ReplaceSitesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/channels/"+ (channelId==null? "" : System.Uri.EscapeDataString(channelId))+"/sites:replace";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ReplaceSitesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists the targeting options assigned to a partner.
		/// Displayvideo_partners_targetingTypes_assignedTargetingOptions_list v1/partners/{partnerId}/targetingTypes/{targetingType}/assignedTargetingOptions
		/// </summary>
		/// <param name="partnerId">Required. The ID of the partner.</param>
		/// <param name="targetingType">Required. Identifies the type of assigned targeting options to list. Supported targeting types: * `TARGETING_TYPE_CHANNEL`</param>
		/// <param name="filter">Allows filtering by assigned targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the logical operator `OR`. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `assignedTargetingOptionId` Examples: * `AssignedTargetingOption` resource with ID 123456: `assignedTargetingOptionId="123456"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `assignedTargetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `assignedTargetingOptionId desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListPartnerAssignedTargetingOptions` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListPartnerAssignedTargetingOptionsResponse> Displayvideo_partners_targetingTypes_assignedTargetingOptions_listAsync(string partnerId, AssignedTargetingOptionTargetingType targetingType, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/targetingTypes/"+targetingType+"/assignedTargetingOptions&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListPartnerAssignedTargetingOptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Assigns a targeting option to a partner. Returns the assigned targeting option if successful.
		/// Displayvideo_partners_targetingTypes_assignedTargetingOptions_create v1/partners/{partnerId}/targetingTypes/{targetingType}/assignedTargetingOptions
		/// </summary>
		/// <param name="partnerId">Required. The ID of the partner.</param>
		/// <param name="targetingType">Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL`</param>
		/// <returns>Successful response</returns>
		public async Task<AssignedTargetingOption> Displayvideo_partners_targetingTypes_assignedTargetingOptions_createAsync(string partnerId, AssignedTargetingOptionTargetingType targetingType, AssignedTargetingOption requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/targetingTypes/"+targetingType+"/assignedTargetingOptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssignedTargetingOption>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes an assigned targeting option from a partner.
		/// Displayvideo_partners_targetingTypes_assignedTargetingOptions_delete v1/partners/{partnerId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}
		/// </summary>
		/// <param name="partnerId">Required. The ID of the partner.</param>
		/// <param name="targetingType">Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL`</param>
		/// <param name="assignedTargetingOptionId">Required. The ID of the assigned targeting option to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Displayvideo_partners_targetingTypes_assignedTargetingOptions_deleteAsync(string partnerId, AssignedTargetingOptionTargetingType targetingType, string assignedTargetingOptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/targetingTypes/"+targetingType+"/assignedTargetingOptions/"+ (assignedTargetingOptionId==null? "" : System.Uri.EscapeDataString(assignedTargetingOptionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a single targeting option assigned to a partner.
		/// Displayvideo_partners_targetingTypes_assignedTargetingOptions_get v1/partners/{partnerId}/targetingTypes/{targetingType}/assignedTargetingOptions/{assignedTargetingOptionId}
		/// </summary>
		/// <param name="partnerId">Required. The ID of the partner.</param>
		/// <param name="targetingType">Required. Identifies the type of this assigned targeting option. Supported targeting types: * `TARGETING_TYPE_CHANNEL`</param>
		/// <param name="assignedTargetingOptionId">Required. An identifier unique to the targeting type in this partner that identifies the assigned targeting option being requested.</param>
		/// <returns>Successful response</returns>
		public async Task<AssignedTargetingOption> Displayvideo_partners_targetingTypes_assignedTargetingOptions_getAsync(string partnerId, AssignedTargetingOptionTargetingType targetingType, string assignedTargetingOptionId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+"/targetingTypes/"+targetingType+"/assignedTargetingOptions/"+ (assignedTargetingOptionId==null? "" : System.Uri.EscapeDataString(assignedTargetingOptionId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<AssignedTargetingOption>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Bulk edits targeting options under a single partner. The operation will delete the assigned targeting options provided in BulkEditPartnerAssignedTargetingOptionsRequest.deleteRequests and then create the assigned targeting options provided in BulkEditPartnerAssignedTargetingOptionsRequest.createRequests .
		/// Displayvideo_partners_bulkEditPartnerAssignedTargetingOptions v1/partners/{partnerId}:bulkEditPartnerAssignedTargetingOptions
		/// </summary>
		/// <param name="partnerId">Required. The ID of the partner.</param>
		/// <returns>Successful response</returns>
		public async Task<BulkEditPartnerAssignedTargetingOptionsResponse> Displayvideo_partners_bulkEditPartnerAssignedTargetingOptionsAsync(string partnerId, BulkEditPartnerAssignedTargetingOptionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/partners/"+ (partnerId==null? "" : System.Uri.EscapeDataString(partnerId))+":bulkEditPartnerAssignedTargetingOptions";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BulkEditPartnerAssignedTargetingOptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates an SDF Download Task. Returns an Operation. An SDF Download Task is a long-running, asynchronous operation. The metadata type of this operation is SdfDownloadTaskMetadata. If the request is successful, the response type of the operation is SdfDownloadTask. The response will not include the download files, which must be retrieved with media.download. The state of operation can be retrieved with sdfdownloadtask.operations.get. Any errors can be found in the error.message. Note that error.details is expected to be empty.
		/// Displayvideo_sdfdownloadtasks_create v1/sdfdownloadtasks
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<Operation> Displayvideo_sdfdownloadtasks_createAsync(CreateSdfDownloadTaskRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/sdfdownloadtasks";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists targeting options of a given type.
		/// Displayvideo_targetingTypes_targetingOptions_list v1/targetingTypes/{targetingType}/targetingOptions
		/// </summary>
		/// <param name="targetingType">Required. The type of targeting option to be listed. Accepted values are: * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_VIEWABILITY` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_OMID`</param>
		/// <param name="advertiserId">Required. The Advertiser this request is being made in the context of.</param>
		/// <param name="filter">Allows filtering by targeting option fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by `OR` logical operators. * A restriction has the form of `{field} {operator} {value}`. * All fields must use the `EQUALS (=)` operator. Supported fields: * `carrierAndIspDetails.type` * `geoRegionDetails.geoRegionType` * `targetingOptionId` Examples: * All `GEO REGION` targeting options that belong to sub type `GEO_REGION_TYPE_COUNTRY` or `GEO_REGION_TYPE_STATE`: `geoRegionDetails.geoRegionType="GEO_REGION_TYPE_COUNTRY" OR geoRegionDetails.geoRegionType="GEO_REGION_TYPE_STATE"` * All `CARRIER AND ISP` targeting options that belong to sub type `CARRIER_AND_ISP_TYPE_CARRIER`: `carrierAndIspDetails.type="CARRIER_AND_ISP_TYPE_CARRIER"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `targetingOptionId` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. Example: `targetingOptionId desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`. Returns error code `INVALID_ARGUMENT` if an invalid value is specified.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListTargetingOptions` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListTargetingOptionsResponse> Displayvideo_targetingTypes_targetingOptions_listAsync(AssignedTargetingOptionTargetingType targetingType, string advertiserId, string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/targetingTypes/"+targetingType+"/targetingOptions?advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId))+"&filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListTargetingOptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a single targeting option.
		/// Displayvideo_targetingTypes_targetingOptions_get v1/targetingTypes/{targetingType}/targetingOptions/{targetingOptionId}
		/// </summary>
		/// <param name="targetingType">Required. The type of targeting option to retrieve. Accepted values are: * `TARGETING_TYPE_APP_CATEGORY` * `TARGETING_TYPE_AGE_RANGE` * `TARGETING_TYPE_GENDER` * `TARGETING_TYPE_VIDEO_PLAYER_SIZE` * `TARGETING_TYPE_USER_REWARDED_CONTENT` * `TARGETING_TYPE_PARENTAL_STATUS` * `TARGETING_TYPE_CONTENT_INSTREAM_POSITION` * `TARGETING_TYPE_CONTENT_OUTSTREAM_POSITION` * `TARGETING_TYPE_DEVICE_TYPE` * `TARGETING_TYPE_BROWSER` * `TARGETING_TYPE_HOUSEHOLD_INCOME` * `TARGETING_TYPE_ON_SCREEN_POSITION` * `TARGETING_TYPE_CARRIER_AND_ISP` * `TARGETING_TYPE_OPERATING_SYSTEM` * `TARGETING_TYPE_DEVICE_MAKE_MODEL` * `TARGETING_TYPE_ENVIRONMENT` * `TARGETING_TYPE_CATEGORY` * `TARGETING_TYPE_VIEWABILITY` * `TARGETING_TYPE_AUTHORIZED_SELLER_STATUS` * `TARGETING_TYPE_LANGUAGE` * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_DIGITAL_CONTENT_LABEL_EXCLUSION` * `TARGETING_TYPE_SENSITIVE_CATEGORY_EXCLUSION` * `TARGETING_TYPE_EXCHANGE` * `TARGETING_TYPE_SUB_EXCHANGE` * `TARGETING_TYPE_NATIVE_CONTENT_POSITION` * `TARGETING_TYPE_OMID`</param>
		/// <param name="targetingOptionId">Required. The ID of the of targeting option to retrieve.</param>
		/// <param name="advertiserId">Required. The Advertiser this request is being made in the context of.</param>
		/// <returns>Successful response</returns>
		public async Task<TargetingOption> Displayvideo_targetingTypes_targetingOptions_getAsync(AssignedTargetingOptionTargetingType targetingType, string targetingOptionId, string advertiserId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/targetingTypes/"+targetingType+"/targetingOptions/"+ (targetingOptionId==null? "" : System.Uri.EscapeDataString(targetingOptionId))+"&advertiserId=" + (advertiserId==null? "" : System.Uri.EscapeDataString(advertiserId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<TargetingOption>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Searches for targeting options of a given type based on the given search terms.
		/// Displayvideo_targetingTypes_targetingOptions_search v1/targetingTypes/{targetingType}/targetingOptions:search
		/// </summary>
		/// <param name="targetingType">Required. The type of targeting options to retrieve. Accepted values are: * `TARGETING_TYPE_GEO_REGION` * `TARGETING_TYPE_POI` * `TARGETING_TYPE_BUSINESS_CHAIN`</param>
		/// <returns>Successful response</returns>
		public async Task<SearchTargetingOptionsResponse> Displayvideo_targetingTypes_targetingOptions_searchAsync(AssignedTargetingOptionTargetingType targetingType, SearchTargetingOptionsRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/targetingTypes/"+targetingType+"/targetingOptions:search";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<SearchTargetingOptionsResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Lists users that are accessible to the current user. If two users have user roles on the same partner or advertiser, they can access each other. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method.
		/// Displayvideo_users_list v1/users
		/// </summary>
		/// <param name="filter">Allows filtering by user fields. Supported syntax: * Filter expressions are made up of one or more restrictions. * Restrictions can be combined by the logical operator `AND`. * A restriction has the form of `{field} {operator} {value}`. * The `budget.budget_segments.date_range.end_date` field must use the `LESS THAN (<)` operator. * The `displayName and `email` field must use the `HAS (:)` operator. * All other fields must use the `EQUALS (=)` operator. Supported fields: * `assignedUserRole.advertiserId` * `assignedUserRole.entityType` * This is synthetic field of `AssignedUserRole` used for filtering. Identifies the type of entity to which the user role is assigned. Valid values are `Partner` and `Advertiser`. * `assignedUserRole.parentPartnerId` * This is a synthetic field of `AssignedUserRole` used for filtering. Identifies the parent partner of the entity to which the user role is assigned. * `assignedUserRole.partnerId` * `assignedUserRole.userRole` * `displayName` * `email` Examples: * The user with `displayName` containing "foo": `displayName:"foo"` * The user with `email` containing "bar": `email:"bar"` * All users with standard user roles: `assignedUserRole.userRole="STANDARD"` * All users with user roles for partner 123: `assignedUserRole.partnerId="123"` * All users with user roles for advertiser 123: `assignedUserRole.advertiserId="123"` * All users with partner level user roles: `entityType="PARTNER"` * All users with user roles for partner 123 and advertisers under partner 123: `parentPartnerId="123"` The length of this field should be no more than 500 characters. Reference our [filter `LIST` requests](/display-video/api/guides/how-tos/filters) guide for more information.</param>
		/// <param name="orderBy">Field by which to sort the list. Acceptable values are: * `displayName` (default) The default sorting order is ascending. To specify descending order for a field, a suffix "desc" should be added to the field name. For example, `displayName desc`.</param>
		/// <param name="pageSize">Requested page size. Must be between `1` and `200`. If unspecified will default to `100`.</param>
		/// <param name="pageToken">A token identifying a page of results the server should return. Typically, this is the value of next_page_token returned from the previous call to `ListUsers` method. If not specified, the first page of results will be returned.</param>
		/// <returns>Successful response</returns>
		public async Task<ListUsersResponse> Displayvideo_users_listAsync(string filter, string orderBy, int pageSize, string pageToken, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users?filter=" + (filter==null? "" : System.Uri.EscapeDataString(filter))+"&orderBy=" + (orderBy==null? "" : System.Uri.EscapeDataString(orderBy))+"&pageSize="+pageSize+"&pageToken=" + (pageToken==null? "" : System.Uri.EscapeDataString(pageToken));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<ListUsersResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Creates a new user. Returns the newly created user if successful. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method.
		/// Displayvideo_users_create v1/users
		/// </summary>
		/// <returns>Successful response</returns>
		public async Task<User> Displayvideo_users_createAsync(User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Deletes a user. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method.
		/// Displayvideo_users_delete v1/users/{userId}
		/// </summary>
		/// <param name="userId">Required. The ID of the user to delete.</param>
		/// <returns>Successful response</returns>
		public async Task<Empty> Displayvideo_users_deleteAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Delete, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Empty>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets a user. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method.
		/// Displayvideo_users_get v1/users/{userId}
		/// </summary>
		/// <param name="userId">Required. The ID of the user to fetch.</param>
		/// <returns>Successful response</returns>
		public async Task<User> Displayvideo_users_getAsync(string userId, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Updates an existing user. Returns the updated user if successful. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method.
		/// Displayvideo_users_patch v1/users/{userId}
		/// </summary>
		/// <param name="userId">Output only. The unique ID of the user. Assigned by the system.</param>
		/// <param name="updateMask">Required. The mask to control which fields to update.</param>
		/// <returns>Successful response</returns>
		public async Task<User> Displayvideo_users_patchAsync(string userId, string updateMask, User requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+"&updateMask=" + (updateMask==null? "" : System.Uri.EscapeDataString(updateMask));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Patch, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<User>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Bulk edits user roles for a user. The operation will delete the assigned user roles provided in BulkEditAssignedUserRolesRequest.deletedAssignedUserRoles and then assign the user roles provided in BulkEditAssignedUserRolesRequest.createdAssignedUserRoles. This method has unique authentication requirements. Read the prerequisites in our [Managing Users guide](/display-video/api/guides/users/overview#prerequisites) before using this method. The "Try this method" feature does not work for this method.
		/// Displayvideo_users_bulkEditAssignedUserRoles v1/users/{userId}:bulkEditAssignedUserRoles
		/// </summary>
		/// <param name="userId">Required. The ID of the user to which the assigned user roles belong.</param>
		/// <returns>Successful response</returns>
		public async Task<BulkEditAssignedUserRolesResponse> Displayvideo_users_bulkEditAssignedUserRolesAsync(string userId, BulkEditAssignedUserRolesRequest requestBody, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/users/"+ (userId==null? "" : System.Uri.EscapeDataString(userId))+":bulkEditAssignedUserRoles";
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, requestUri))
			{
			var contentJson = JsonSerializer.Serialize(requestBody, jsonSerializerSettings);
			var content = new System.Net.Http.StringContent(contentJson, System.Text.Encoding.UTF8, "application/json");
			httpRequestMessage.Content = content;
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<BulkEditAssignedUserRolesResponse>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
		
		/// <summary>
		/// Gets the latest state of an asynchronous SDF download task operation. Clients should poll this method at intervals of 30 seconds.
		/// Displayvideo_sdfdownloadtasks_operations_get v1/{name}
		/// </summary>
		/// <param name="name">The name of the operation resource.</param>
		/// <returns>Successful response</returns>
		public async Task<Operation> Displayvideo_sdfdownloadtasks_operations_getAsync(string name, Action<System.Net.Http.Headers.HttpRequestHeaders> handleHeaders = null)
		{
			var requestUri = "v1/"+ (name==null? "" : System.Uri.EscapeDataString(name));
			using (var httpRequestMessage = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Get, requestUri))
			{
			if (handleHeaders != null)
			{
				handleHeaders(httpRequestMessage.Headers);
			}

			var responseMessage = await httpClient.SendAsync(httpRequestMessage);
			try
			{
				responseMessage.EnsureSuccessStatusCodeEx();
				var contentString = await responseMessage.Content.ReadAsStringAsync();
				return JsonSerializer.Deserialize<Operation>(contentString, jsonSerializerSettings);
			}
			finally
			{
				responseMessage.Dispose();
			}
			}
		}
	}
	
	public enum Displayvideo_advertisers_invoices_listLoiSapinInvoiceType
	{
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOI_SAPIN_INVOICE_TYPE_UNSPECIFIED = 0,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOI_SAPIN_INVOICE_TYPE_MEDIA = 1,
		
		[System.Runtime.Serialization.EnumMemberAttribute()]
		LOI_SAPIN_INVOICE_TYPE_PLATFORM = 2,
	}
}

namespace Fonlow.Net.Http
{
	using System.Net.Http;

	public class WebApiRequestException : HttpRequestException
	{
		public System.Net.HttpStatusCode StatusCode { get; private set; }

		public string Response { get; private set; }

		public System.Net.Http.Headers.HttpResponseHeaders Headers { get; private set; }

		public System.Net.Http.Headers.MediaTypeHeaderValue ContentType { get; private set; }

		public WebApiRequestException(string message, System.Net.HttpStatusCode statusCode, string response, System.Net.Http.Headers.HttpResponseHeaders headers, System.Net.Http.Headers.MediaTypeHeaderValue contentType) : base(message)
		{
			StatusCode = statusCode;
			Response = response;
			Headers = headers;
			ContentType = contentType;
		}
	}

	public static class ResponseMessageExtensions
	{
		public static void EnsureSuccessStatusCodeEx(this HttpResponseMessage responseMessage)
		{
			if (!responseMessage.IsSuccessStatusCode)
			{
				var responseText = responseMessage.Content.ReadAsStringAsync().Result;
				var contentType = responseMessage.Content.Headers.ContentType;
				throw new WebApiRequestException(responseMessage.ReasonPhrase, responseMessage.StatusCode, responseText, responseMessage.Headers, contentType);
			}
		}
	}
}
